
ethernet_UDB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c78  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c70  08010f48  08010f48  00020f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08013bb8  08013bb8  00023bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08013bbc  08013bbc  00023bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  24000000  08013bc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000032c0  24000094  08013c54  00030094  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24003354  08013c54  00033354  2**0
                  ALLOC
  8 .lwip_sec     00004d83  30000000  30000000  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025355  00000000  00000000  000300c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005608  00000000  00000000  00055417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019a0  00000000  00000000  0005aa20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018c0  00000000  00000000  0005c3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f2bf  00000000  00000000  0005dc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029c54  00000000  00000000  0009cf3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015d9bb  00000000  00000000  000c6b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022454e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000073f0  00000000  00000000  002245a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000094 	.word	0x24000094
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08010f30 	.word	0x08010f30

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000098 	.word	0x24000098
 800030c:	08010f30 	.word	0x08010f30

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003b6:	f000 fa55 	bl	8000864 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ba:	4b3c      	ldr	r3, [pc, #240]	; (80004ac <main+0xfc>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d11b      	bne.n	80003fe <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003c6:	f3bf 8f4f 	dsb	sy
}
 80003ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003cc:	f3bf 8f6f 	isb	sy
}
 80003d0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003d2:	4b36      	ldr	r3, [pc, #216]	; (80004ac <main+0xfc>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003da:	f3bf 8f4f 	dsb	sy
}
 80003de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003e0:	f3bf 8f6f 	isb	sy
}
 80003e4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003e6:	4b31      	ldr	r3, [pc, #196]	; (80004ac <main+0xfc>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a30      	ldr	r2, [pc, #192]	; (80004ac <main+0xfc>)
 80003ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003f2:	f3bf 8f4f 	dsb	sy
}
 80003f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003f8:	f3bf 8f6f 	isb	sy
}
 80003fc:	e000      	b.n	8000400 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003fe:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000400:	4b2a      	ldr	r3, [pc, #168]	; (80004ac <main+0xfc>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000408:	2b00      	cmp	r3, #0
 800040a:	d138      	bne.n	800047e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800040c:	4b27      	ldr	r3, [pc, #156]	; (80004ac <main+0xfc>)
 800040e:	2200      	movs	r2, #0
 8000410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000414:	f3bf 8f4f 	dsb	sy
}
 8000418:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800041a:	4b24      	ldr	r3, [pc, #144]	; (80004ac <main+0xfc>)
 800041c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000420:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	0b5b      	lsrs	r3, r3, #13
 8000426:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800042a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	08db      	lsrs	r3, r3, #3
 8000430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000434:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	015a      	lsls	r2, r3, #5
 800043a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800043e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000444:	4919      	ldr	r1, [pc, #100]	; (80004ac <main+0xfc>)
 8000446:	4313      	orrs	r3, r2
 8000448:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	1e5a      	subs	r2, r3, #1
 8000450:	607a      	str	r2, [r7, #4]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d1ef      	bne.n	8000436 <main+0x86>
    } while(sets-- != 0U);
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	1e5a      	subs	r2, r3, #1
 800045a:	60ba      	str	r2, [r7, #8]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d1e5      	bne.n	800042c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000460:	f3bf 8f4f 	dsb	sy
}
 8000464:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <main+0xfc>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a10      	ldr	r2, [pc, #64]	; (80004ac <main+0xfc>)
 800046c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000470:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000472:	f3bf 8f4f 	dsb	sy
}
 8000476:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000478:	f3bf 8f6f 	isb	sy
}
 800047c:	e000      	b.n	8000480 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800047e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000480:	f000 fe54 	bl	800112c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000484:	f000 f818 	bl	80004b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000488:	f000 f8d8 	bl	800063c <MX_GPIO_Init>
  MX_LWIP_Init();
 800048c:	f004 fbcc 	bl	8004c28 <MX_LWIP_Init>
  MX_TIM1_Init();
 8000490:	f000 f880 	bl	8000594 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000494:	4806      	ldr	r0, [pc, #24]	; (80004b0 <main+0x100>)
 8000496:	f003 ff03 	bl	80042a0 <HAL_TIM_Base_Start_IT>
  udpClient_connect();
 800049a:	f000 fc11 	bl	8000cc0 <udpClient_connect>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	ethernetif_input(&gnetif);
 800049e:	4805      	ldr	r0, [pc, #20]	; (80004b4 <main+0x104>)
 80004a0:	f004 fe30 	bl	8005104 <ethernetif_input>

	/* Handle timeouts */
	sys_check_timeouts();
 80004a4:	f00c fa90 	bl	800c9c8 <sys_check_timeouts>
	ethernetif_input(&gnetif);
 80004a8:	e7f9      	b.n	800049e <main+0xee>
 80004aa:	bf00      	nop
 80004ac:	e000ed00 	.word	0xe000ed00
 80004b0:	240000b0 	.word	0x240000b0
 80004b4:	24000170 	.word	0x24000170

080004b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b09c      	sub	sp, #112	; 0x70
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004c2:	224c      	movs	r2, #76	; 0x4c
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f00f fb12 	bl	800faf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2220      	movs	r2, #32
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f00f fb0c 	bl	800faf0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004d8:	2002      	movs	r0, #2
 80004da:	f002 ff41 	bl	8003360 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004de:	2300      	movs	r3, #0
 80004e0:	603b      	str	r3, [r7, #0]
 80004e2:	4b2b      	ldr	r3, [pc, #172]	; (8000590 <SystemClock_Config+0xd8>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	4a2a      	ldr	r2, [pc, #168]	; (8000590 <SystemClock_Config+0xd8>)
 80004e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004ec:	6193      	str	r3, [r2, #24]
 80004ee:	4b28      	ldr	r3, [pc, #160]	; (8000590 <SystemClock_Config+0xd8>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004fa:	bf00      	nop
 80004fc:	4b24      	ldr	r3, [pc, #144]	; (8000590 <SystemClock_Config+0xd8>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000508:	d1f8      	bne.n	80004fc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800050a:	2301      	movs	r3, #1
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800050e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000512:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000514:	2302      	movs	r3, #2
 8000516:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000518:	2302      	movs	r3, #2
 800051a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800051c:	2301      	movs	r3, #1
 800051e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8000520:	2344      	movs	r3, #68	; 0x44
 8000522:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000524:	2301      	movs	r3, #1
 8000526:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000528:	2304      	movs	r3, #4
 800052a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800052c:	2302      	movs	r3, #2
 800052e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000530:	230c      	movs	r3, #12
 8000532:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000534:	2300      	movs	r3, #0
 8000536:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000538:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800053c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000542:	4618      	mov	r0, r3
 8000544:	f002 ff46 	bl	80033d4 <HAL_RCC_OscConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800054e:	f000 f9dd 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	233f      	movs	r3, #63	; 0x3f
 8000554:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000556:	2303      	movs	r3, #3
 8000558:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800055e:	2308      	movs	r3, #8
 8000560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000562:	2340      	movs	r3, #64	; 0x40
 8000564:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000566:	2340      	movs	r3, #64	; 0x40
 8000568:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800056a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800056e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000570:	2340      	movs	r3, #64	; 0x40
 8000572:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2103      	movs	r1, #3
 8000578:	4618      	mov	r0, r3
 800057a:	f003 fad9 	bl	8003b30 <HAL_RCC_ClockConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000584:	f000 f9c2 	bl	800090c <Error_Handler>
  }
}
 8000588:	bf00      	nop
 800058a:	3770      	adds	r7, #112	; 0x70
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	58024800 	.word	0x58024800

08000594 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800059a:	f107 0310 	add.w	r3, r7, #16
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005b2:	4b20      	ldr	r3, [pc, #128]	; (8000634 <MX_TIM1_Init+0xa0>)
 80005b4:	4a20      	ldr	r2, [pc, #128]	; (8000638 <MX_TIM1_Init+0xa4>)
 80005b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 27499;
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <MX_TIM1_Init+0xa0>)
 80005ba:	f646 326b 	movw	r2, #27499	; 0x6b6b
 80005be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <MX_TIM1_Init+0xa0>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80005c6:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <MX_TIM1_Init+0xa0>)
 80005c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80005cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ce:	4b19      	ldr	r3, [pc, #100]	; (8000634 <MX_TIM1_Init+0xa0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_TIM1_Init+0xa0>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <MX_TIM1_Init+0xa0>)
 80005dc:	2280      	movs	r2, #128	; 0x80
 80005de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005e0:	4814      	ldr	r0, [pc, #80]	; (8000634 <MX_TIM1_Init+0xa0>)
 80005e2:	f003 fe05 	bl	80041f0 <HAL_TIM_Base_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80005ec:	f000 f98e 	bl	800090c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	4619      	mov	r1, r3
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <MX_TIM1_Init+0xa0>)
 80005fe:	f003 fff5 	bl	80045ec <HAL_TIM_ConfigClockSource>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000608:	f000 f980 	bl	800090c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_TIM1_Init+0xa0>)
 800061e:	f004 fa49 	bl	8004ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000628:	f000 f970 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	240000b0 	.word	0x240000b0
 8000638:	40010000 	.word	0x40010000

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	; 0x30
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000652:	4b7d      	ldr	r3, [pc, #500]	; (8000848 <MX_GPIO_Init+0x20c>)
 8000654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000658:	4a7b      	ldr	r2, [pc, #492]	; (8000848 <MX_GPIO_Init+0x20c>)
 800065a:	f043 0304 	orr.w	r3, r3, #4
 800065e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000662:	4b79      	ldr	r3, [pc, #484]	; (8000848 <MX_GPIO_Init+0x20c>)
 8000664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000668:	f003 0304 	and.w	r3, r3, #4
 800066c:	61bb      	str	r3, [r7, #24]
 800066e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000670:	4b75      	ldr	r3, [pc, #468]	; (8000848 <MX_GPIO_Init+0x20c>)
 8000672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000676:	4a74      	ldr	r2, [pc, #464]	; (8000848 <MX_GPIO_Init+0x20c>)
 8000678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000680:	4b71      	ldr	r3, [pc, #452]	; (8000848 <MX_GPIO_Init+0x20c>)
 8000682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b6e      	ldr	r3, [pc, #440]	; (8000848 <MX_GPIO_Init+0x20c>)
 8000690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000694:	4a6c      	ldr	r2, [pc, #432]	; (8000848 <MX_GPIO_Init+0x20c>)
 8000696:	f043 0301 	orr.w	r3, r3, #1
 800069a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800069e:	4b6a      	ldr	r3, [pc, #424]	; (8000848 <MX_GPIO_Init+0x20c>)
 80006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ac:	4b66      	ldr	r3, [pc, #408]	; (8000848 <MX_GPIO_Init+0x20c>)
 80006ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b2:	4a65      	ldr	r2, [pc, #404]	; (8000848 <MX_GPIO_Init+0x20c>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006bc:	4b62      	ldr	r3, [pc, #392]	; (8000848 <MX_GPIO_Init+0x20c>)
 80006be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ca:	4b5f      	ldr	r3, [pc, #380]	; (8000848 <MX_GPIO_Init+0x20c>)
 80006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d0:	4a5d      	ldr	r2, [pc, #372]	; (8000848 <MX_GPIO_Init+0x20c>)
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006da:	4b5b      	ldr	r3, [pc, #364]	; (8000848 <MX_GPIO_Init+0x20c>)
 80006dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e0:	f003 0308 	and.w	r3, r3, #8
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006e8:	4b57      	ldr	r3, [pc, #348]	; (8000848 <MX_GPIO_Init+0x20c>)
 80006ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ee:	4a56      	ldr	r2, [pc, #344]	; (8000848 <MX_GPIO_Init+0x20c>)
 80006f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f8:	4b53      	ldr	r3, [pc, #332]	; (8000848 <MX_GPIO_Init+0x20c>)
 80006fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000706:	4b50      	ldr	r3, [pc, #320]	; (8000848 <MX_GPIO_Init+0x20c>)
 8000708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070c:	4a4e      	ldr	r2, [pc, #312]	; (8000848 <MX_GPIO_Init+0x20c>)
 800070e:	f043 0310 	orr.w	r3, r3, #16
 8000712:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000716:	4b4c      	ldr	r3, [pc, #304]	; (8000848 <MX_GPIO_Init+0x20c>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071c:	f003 0310 	and.w	r3, r3, #16
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	f244 0101 	movw	r1, #16385	; 0x4001
 800072a:	4848      	ldr	r0, [pc, #288]	; (800084c <MX_GPIO_Init+0x210>)
 800072c:	f002 fde4 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000736:	4846      	ldr	r0, [pc, #280]	; (8000850 <MX_GPIO_Init+0x214>)
 8000738:	f002 fdde 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000742:	4844      	ldr	r0, [pc, #272]	; (8000854 <MX_GPIO_Init+0x218>)
 8000744:	f002 fdd8 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2102      	movs	r1, #2
 800074c:	4842      	ldr	r0, [pc, #264]	; (8000858 <MX_GPIO_Init+0x21c>)
 800074e:	f002 fdd3 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000752:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4619      	mov	r1, r3
 8000766:	483b      	ldr	r0, [pc, #236]	; (8000854 <MX_GPIO_Init+0x218>)
 8000768:	f002 fc1e 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 800076c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	4831      	ldr	r0, [pc, #196]	; (800084c <MX_GPIO_Init+0x210>)
 8000786:	f002 fc0f 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800078a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800079c:	2307      	movs	r3, #7
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	482a      	ldr	r0, [pc, #168]	; (8000850 <MX_GPIO_Init+0x214>)
 80007a8:	f002 fbfe 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80007ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	4822      	ldr	r0, [pc, #136]	; (8000850 <MX_GPIO_Init+0x214>)
 80007c6:	f002 fbef 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80007ca:	2380      	movs	r3, #128	; 0x80
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	481f      	ldr	r0, [pc, #124]	; (800085c <MX_GPIO_Init+0x220>)
 80007e0:	f002 fbe2 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80007e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80007f6:	230a      	movs	r3, #10
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	4817      	ldr	r0, [pc, #92]	; (8000860 <MX_GPIO_Init+0x224>)
 8000802:	f002 fbd1 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <MX_GPIO_Init+0x218>)
 8000820:	f002 fbc2 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000824:	2302      	movs	r3, #2
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4807      	ldr	r0, [pc, #28]	; (8000858 <MX_GPIO_Init+0x21c>)
 800083c:	f002 fbb4 	bl	8002fa8 <HAL_GPIO_Init>

}
 8000840:	bf00      	nop
 8000842:	3730      	adds	r7, #48	; 0x30
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	58024400 	.word	0x58024400
 800084c:	58020400 	.word	0x58020400
 8000850:	58020c00 	.word	0x58020c00
 8000854:	58020800 	.word	0x58020800
 8000858:	58021000 	.word	0x58021000
 800085c:	58021800 	.word	0x58021800
 8000860:	58020000 	.word	0x58020000

08000864 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800086a:	463b      	mov	r3, r7
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000876:	f000 fe0f 	bl	8001498 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800087a:	2301      	movs	r3, #1
 800087c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800087e:	2300      	movs	r3, #0
 8000880:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x00;
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000886:	231f      	movs	r3, #31
 8000888:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800088a:	2387      	movs	r3, #135	; 0x87
 800088c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800088e:	2300      	movs	r3, #0
 8000890:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000892:	2300      	movs	r3, #0
 8000894:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000896:	2301      	movs	r3, #1
 8000898:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800089a:	2301      	movs	r3, #1
 800089c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008a6:	463b      	mov	r3, r7
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 fe2d 	bl	8001508 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80008b2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80008b6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 80008b8:	2309      	movs	r3, #9
 80008ba:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80008bc:	2300      	movs	r3, #0
 80008be:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80008c0:	2303      	movs	r3, #3
 80008c2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80008cc:	2301      	movs	r3, #1
 80008ce:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008d0:	463b      	mov	r3, r7
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fe18 	bl	8001508 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80008d8:	2302      	movs	r3, #2
 80008da:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30004000;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <MPU_Config+0xa4>)
 80008de:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80008e0:	230d      	movs	r3, #13
 80008e2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008e8:	2301      	movs	r3, #1
 80008ea:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008f0:	463b      	mov	r3, r7
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fe08 	bl	8001508 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008f8:	2004      	movs	r0, #4
 80008fa:	f000 fde5 	bl	80014c8 <HAL_MPU_Enable>

}
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	30004000 	.word	0x30004000

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	e7fe      	b.n	8000914 <Error_Handler+0x8>
	...

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <HAL_MspInit+0x30>)
 8000920:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000924:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_MspInit+0x30>)
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_MspInit+0x30>)
 8000930:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000934:	f003 0302 	and.w	r3, r3, #2
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	58024400 	.word	0x58024400

0800094c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <HAL_TIM_Base_MspInit+0x48>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d116      	bne.n	800098c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_TIM_Base_MspInit+0x4c>)
 8000960:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000964:	4a0c      	ldr	r2, [pc, #48]	; (8000998 <HAL_TIM_Base_MspInit+0x4c>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_TIM_Base_MspInit+0x4c>)
 8000970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	2019      	movs	r0, #25
 8000982:	f000 fd54 	bl	800142e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000986:	2019      	movs	r0, #25
 8000988:	f000 fd6b 	bl	8001462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800098c:	bf00      	nop
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40010000 	.word	0x40010000
 8000998:	58024400 	.word	0x58024400

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e8:	f000 fc12 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
  HAL_TIM_PeriodElapsedCallback(&htim1);
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <TIM1_UP_IRQHandler+0x1c>)
 80009f6:	f000 f959 	bl	8000cac <HAL_TIM_PeriodElapsedCallback>
  HAL_GPIO_TogglePin(GPIOC, 10);
 80009fa:	210a      	movs	r1, #10
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <TIM1_UP_IRQHandler+0x20>)
 80009fe:	f002 fc94 	bl	800332a <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a02:	4802      	ldr	r0, [pc, #8]	; (8000a0c <TIM1_UP_IRQHandler+0x1c>)
 8000a04:	f003 fcd2 	bl	80043ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	240000b0 	.word	0x240000b0
 8000a10:	58020800 	.word	0x58020800

08000a14 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <ETH_IRQHandler+0x10>)
 8000a1a:	f001 f917 	bl	8001c4c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	240001c4 	.word	0x240001c4

08000a28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
	return 1;
 8000a2c:	2301      	movs	r3, #1
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <_kill>:

int _kill(int pid, int sig)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <_kill+0x20>)
 8000a44:	2216      	movs	r2, #22
 8000a46:	601a      	str	r2, [r3, #0]
	return -1;
 8000a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	24003344 	.word	0x24003344

08000a5c <_exit>:

void _exit (int status)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a64:	f04f 31ff 	mov.w	r1, #4294967295
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ffe5 	bl	8000a38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a6e:	e7fe      	b.n	8000a6e <_exit+0x12>

08000a70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	e00a      	b.n	8000a98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a82:	f3af 8000 	nop.w
 8000a86:	4601      	mov	r1, r0
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	b2ca      	uxtb	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbf0      	blt.n	8000a82 <_read+0x12>
	}

return len;
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	e009      	b.n	8000ad0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbf1      	blt.n	8000abc <_write+0x12>
	}
	return len;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <_close>:

int _close(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
	return -1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b0a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_isatty>:

int _isatty(int file)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
	return 1;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b54:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <_sbrk+0x5c>)
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <_sbrk+0x60>)
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <_sbrk+0x64>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <_sbrk+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d205      	bcs.n	8000b88 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <_sbrk+0x6c>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
 8000b86:	e009      	b.n	8000b9c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <_sbrk+0x64>)
 8000b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	371c      	adds	r7, #28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	24050000 	.word	0x24050000
 8000bac:	00000400 	.word	0x00000400
 8000bb0:	240000fc 	.word	0x240000fc
 8000bb4:	24003358 	.word	0x24003358
 8000bb8:	24003344 	.word	0x24003344

08000bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b32      	ldr	r3, [pc, #200]	; (8000c8c <SystemInit+0xd0>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a31      	ldr	r2, [pc, #196]	; (8000c8c <SystemInit+0xd0>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bd0:	4b2f      	ldr	r3, [pc, #188]	; (8000c90 <SystemInit+0xd4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 030f 	and.w	r3, r3, #15
 8000bd8:	2b06      	cmp	r3, #6
 8000bda:	d807      	bhi.n	8000bec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bdc:	4b2c      	ldr	r3, [pc, #176]	; (8000c90 <SystemInit+0xd4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f023 030f 	bic.w	r3, r3, #15
 8000be4:	4a2a      	ldr	r2, [pc, #168]	; (8000c90 <SystemInit+0xd4>)
 8000be6:	f043 0307 	orr.w	r3, r3, #7
 8000bea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bec:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <SystemInit+0xd8>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a28      	ldr	r2, [pc, #160]	; (8000c94 <SystemInit+0xd8>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bf8:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <SystemInit+0xd8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bfe:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <SystemInit+0xd8>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4924      	ldr	r1, [pc, #144]	; (8000c94 <SystemInit+0xd8>)
 8000c04:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <SystemInit+0xdc>)
 8000c06:	4013      	ands	r3, r2
 8000c08:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <SystemInit+0xd4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d007      	beq.n	8000c26 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c16:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <SystemInit+0xd4>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f023 030f 	bic.w	r3, r3, #15
 8000c1e:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <SystemInit+0xd4>)
 8000c20:	f043 0307 	orr.w	r3, r3, #7
 8000c24:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c26:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <SystemInit+0xd8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <SystemInit+0xd8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <SystemInit+0xd8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <SystemInit+0xd8>)
 8000c3a:	4a18      	ldr	r2, [pc, #96]	; (8000c9c <SystemInit+0xe0>)
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <SystemInit+0xd8>)
 8000c40:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <SystemInit+0xe4>)
 8000c42:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <SystemInit+0xd8>)
 8000c46:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <SystemInit+0xe8>)
 8000c48:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <SystemInit+0xd8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <SystemInit+0xd8>)
 8000c52:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <SystemInit+0xe8>)
 8000c54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <SystemInit+0xd8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <SystemInit+0xd8>)
 8000c5e:	4a11      	ldr	r2, [pc, #68]	; (8000ca4 <SystemInit+0xe8>)
 8000c60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <SystemInit+0xd8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <SystemInit+0xd8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a09      	ldr	r2, [pc, #36]	; (8000c94 <SystemInit+0xd8>)
 8000c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <SystemInit+0xd8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <SystemInit+0xec>)
 8000c7c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c80:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00
 8000c90:	52002000 	.word	0x52002000
 8000c94:	58024400 	.word	0x58024400
 8000c98:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c9c:	02020200 	.word	0x02020200
 8000ca0:	01ff0000 	.word	0x01ff0000
 8000ca4:	01010280 	.word	0x01010280
 8000ca8:	52004000 	.word	0x52004000

08000cac <HAL_TIM_PeriodElapsedCallback>:

extern TIM_HandleTypeDef htim1;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	udpClient_send();
 8000cb4:	f000 f83a 	bl	8000d2c <udpClient_send>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <udpClient_connect>:
5. Close socket descriptor and exit.
*/


void udpClient_connect(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
	err_t err;

	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 8000cc6:	f00c fb83 	bl	800d3d0 <udp_new>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a13      	ldr	r2, [pc, #76]	; (8000d1c <udpClient_connect+0x5c>)
 8000cce:	6013      	str	r3, [r2, #0]

	/* Bind the block to module's IP and port */
	ip_addr_t myIPaddr;
	IP_ADDR4(&myIPaddr, 192, 168, 0, 123);
 8000cd0:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <udpClient_connect+0x60>)
 8000cd2:	60bb      	str	r3, [r7, #8]
	udp_bind(upcb, &myIPaddr, 8);
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <udpClient_connect+0x5c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f107 0108 	add.w	r1, r7, #8
 8000cdc:	2208      	movs	r2, #8
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f00c fa60 	bl	800d1a4 <udp_bind>


	/* configure destination IP address and port */
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 0, 8);
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <udpClient_connect+0x64>)
 8000ce6:	607b      	str	r3, [r7, #4]
	err= udp_connect(upcb, &DestIPaddr, 7);
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <udpClient_connect+0x5c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	1d39      	adds	r1, r7, #4
 8000cee:	2207      	movs	r2, #7
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f00c fadf 	bl	800d2b4 <udp_connect>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 8000cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d108      	bne.n	8000d14 <udpClient_connect+0x54>
	{
		/* 2. Send message to server */
		udpClient_send ();
 8000d02:	f000 f813 	bl	8000d2c <udpClient_send>

		/* 3. Set a receive callback for the upcb */
		udp_recv(upcb, udp_receive_callback, NULL);
 8000d06:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <udpClient_connect+0x5c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4906      	ldr	r1, [pc, #24]	; (8000d28 <udpClient_connect+0x68>)
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f00c fb3e 	bl	800d390 <udp_recv>
	}
}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	24000100 	.word	0x24000100
 8000d20:	7b00a8c0 	.word	0x7b00a8c0
 8000d24:	0800a8c0 	.word	0x0800a8c0
 8000d28:	08000d91 	.word	0x08000d91

08000d2c <udpClient_send>:

///This function send data to USB server


static void udpClient_send(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b09c      	sub	sp, #112	; 0x70
 8000d30:	af00      	add	r7, sp, #0
  struct pbuf *txBuf;
  char data[100];

  int len = sprintf(data, "\nQUANTTRONIX UDP client message %d", counter);
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <udpClient_send+0x58>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	4913      	ldr	r1, [pc, #76]	; (8000d88 <udpClient_send+0x5c>)
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f00e ff36 	bl	800fbac <siprintf>
 8000d40:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* allocate pbuf from pool*/
  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8000d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	2036      	movs	r0, #54	; 0x36
 8000d4e:	f005 fdc3 	bl	80068d8 <pbuf_alloc>
 8000d52:	66b8      	str	r0, [r7, #104]	; 0x68

  if (txBuf != NULL)
 8000d54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d00f      	beq.n	8000d7a <udpClient_send+0x4e>
  {
    /* copy data to pbuf */
    pbuf_take(txBuf, data, len);
 8000d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4619      	mov	r1, r3
 8000d62:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000d64:	f006 fb08 	bl	8007378 <pbuf_take>

    /* send udp data */
    udp_send(upcb, txBuf);
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <udpClient_send+0x60>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f00c f82e 	bl	800cdd0 <udp_send>

    /* free pbuf */
    pbuf_free(txBuf);
 8000d74:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000d76:	f006 f893 	bl	8006ea0 <pbuf_free>
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	3770      	adds	r7, #112	; 0x70
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	24000168 	.word	0x24000168
 8000d88:	08010f48 	.word	0x08010f48
 8000d8c:	24000100 	.word	0x24000100

08000d90 <udp_receive_callback>:

/// This function handle the input data from UDB server
void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b098      	sub	sp, #96	; 0x60
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	strncpy (buffer, (char *)p->payload, p->len);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6859      	ldr	r1, [r3, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	895b      	ldrh	r3, [r3, #10]
 8000da6:	461a      	mov	r2, r3
 8000da8:	4818      	ldr	r0, [pc, #96]	; (8000e0c <udp_receive_callback+0x7c>)
 8000daa:	f00e ff1f 	bl	800fbec <strncpy>
	  struct pbuf *txBuf;
	  char data[70];

	  int len = sprintf(data, "\nQUANTTRONIX UDP client message %s", buffer);
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4a16      	ldr	r2, [pc, #88]	; (8000e0c <udp_receive_callback+0x7c>)
 8000db4:	4916      	ldr	r1, [pc, #88]	; (8000e10 <udp_receive_callback+0x80>)
 8000db6:	4618      	mov	r0, r3
 8000db8:	f00e fef8 	bl	800fbac <siprintf>
 8000dbc:	65f8      	str	r0, [r7, #92]	; 0x5c

	  /* allocate pbuf from pool*/
	  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8000dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	2036      	movs	r0, #54	; 0x36
 8000dca:	f005 fd85 	bl	80068d8 <pbuf_alloc>
 8000dce:	65b8      	str	r0, [r7, #88]	; 0x58

	  if (txBuf != NULL)
 8000dd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d00e      	beq.n	8000df4 <udp_receive_callback+0x64>
	  {
	    /* copy data to pbuf */
	    pbuf_take(txBuf, data, len);
 8000dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	4619      	mov	r1, r3
 8000de0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000de2:	f006 fac9 	bl	8007378 <pbuf_take>

	    /* send udp data */
	    udp_send(upcb, txBuf);
 8000de6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000de8:	68b8      	ldr	r0, [r7, #8]
 8000dea:	f00b fff1 	bl	800cdd0 <udp_send>

	    /* free pbuf */
	    pbuf_free(txBuf);
 8000dee:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000df0:	f006 f856 	bl	8006ea0 <pbuf_free>
	  }
	/*increment message count */
	counter++;
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <udp_receive_callback+0x84>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <udp_receive_callback+0x84>)
 8000dfc:	6013      	str	r3, [r2, #0]

	/* Free receive pbuf */
	pbuf_free(p);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f006 f84e 	bl	8006ea0 <pbuf_free>
}
 8000e04:	bf00      	nop
 8000e06:	3760      	adds	r7, #96	; 0x60
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	24000104 	.word	0x24000104
 8000e10:	08010f6c 	.word	0x08010f6c
 8000e14:	24000168 	.word	0x24000168

08000e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e1c:	f7ff fece 	bl	8000bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e20:	480c      	ldr	r0, [pc, #48]	; (8000e54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e22:	490d      	ldr	r1, [pc, #52]	; (8000e58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e38:	4c0a      	ldr	r4, [pc, #40]	; (8000e64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e46:	f00e fdf7 	bl	800fa38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4a:	f7ff fab1 	bl	80003b0 <main>
  bx  lr
 8000e4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e50:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000e54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e58:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 8000e5c:	08013bc0 	.word	0x08013bc0
  ldr r2, =_sbss
 8000e60:	24000094 	.word	0x24000094
  ldr r4, =_ebss
 8000e64:	24003354 	.word	0x24003354

08000e68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC3_IRQHandler>

08000e6a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d00b      	beq.n	8000e92 <LAN8742_RegisterBusIO+0x28>
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d007      	beq.n	8000e92 <LAN8742_RegisterBusIO+0x28>
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <LAN8742_RegisterBusIO+0x28>
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d102      	bne.n	8000e98 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	e014      	b.n	8000ec2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	691a      	ldr	r2, [r3, #16]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	2300      	movs	r3, #0
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d17c      	bne.n	8000fe8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d002      	beq.n	8000efc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2220      	movs	r2, #32
 8000f00:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	e01c      	b.n	8000f42 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	f107 0208 	add.w	r2, r7, #8
 8000f10:	2112      	movs	r1, #18
 8000f12:	6978      	ldr	r0, [r7, #20]
 8000f14:	4798      	blx	r3
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	da03      	bge.n	8000f24 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000f1c:	f06f 0304 	mvn.w	r3, #4
 8000f20:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000f22:	e00b      	b.n	8000f3c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	f003 031f 	and.w	r3, r3, #31
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d105      	bne.n	8000f3c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
         break;
 8000f3a:	e005      	b.n	8000f48 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	2b1f      	cmp	r3, #31
 8000f46:	d9df      	bls.n	8000f08 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b1f      	cmp	r3, #31
 8000f4e:	d902      	bls.n	8000f56 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000f50:	f06f 0302 	mvn.w	r3, #2
 8000f54:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d145      	bne.n	8000fe8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	6810      	ldr	r0, [r2, #0]
 8000f64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4798      	blx	r3
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db37      	blt.n	8000fe2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	6810      	ldr	r0, [r2, #0]
 8000f7a:	f107 0208 	add.w	r2, r7, #8
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4798      	blx	r3
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db28      	blt.n	8000fda <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	4798      	blx	r3
 8000f8e:	4603      	mov	r3, r0
 8000f90:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f92:	e01c      	b.n	8000fce <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4798      	blx	r3
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fa6:	d80e      	bhi.n	8000fc6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	6810      	ldr	r0, [r2, #0]
 8000fb0:	f107 0208 	add.w	r2, r7, #8
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4798      	blx	r3
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	da07      	bge.n	8000fce <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000fbe:	f06f 0304 	mvn.w	r3, #4
 8000fc2:	613b      	str	r3, [r7, #16]
                 break;
 8000fc4:	e010      	b.n	8000fe8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000fc6:	f06f 0301 	mvn.w	r3, #1
 8000fca:	613b      	str	r3, [r7, #16]
               break;
 8000fcc:	e00c      	b.n	8000fe8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1dd      	bne.n	8000f94 <LAN8742_Init+0xc6>
 8000fd8:	e006      	b.n	8000fe8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000fda:	f06f 0304 	mvn.w	r3, #4
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	e002      	b.n	8000fe8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000fe2:	f06f 0303 	mvn.w	r3, #3
 8000fe6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d112      	bne.n	8001014 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	4798      	blx	r3
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000ff8:	bf00      	nop
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	4798      	blx	r3
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800100c:	d9f5      	bls.n	8000ffa <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001014:	693b      	ldr	r3, [r7, #16]
 }
 8001016:	4618      	mov	r0, r3
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	6810      	ldr	r0, [r2, #0]
 8001032:	f107 020c 	add.w	r2, r7, #12
 8001036:	2101      	movs	r1, #1
 8001038:	4798      	blx	r3
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	da02      	bge.n	8001046 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001040:	f06f 0304 	mvn.w	r3, #4
 8001044:	e06e      	b.n	8001124 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	6810      	ldr	r0, [r2, #0]
 800104e:	f107 020c 	add.w	r2, r7, #12
 8001052:	2101      	movs	r1, #1
 8001054:	4798      	blx	r3
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	da02      	bge.n	8001062 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800105c:	f06f 0304 	mvn.w	r3, #4
 8001060:	e060      	b.n	8001124 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800106c:	2301      	movs	r3, #1
 800106e:	e059      	b.n	8001124 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	6810      	ldr	r0, [r2, #0]
 8001078:	f107 020c 	add.w	r2, r7, #12
 800107c:	2100      	movs	r1, #0
 800107e:	4798      	blx	r3
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	da02      	bge.n	800108c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001086:	f06f 0304 	mvn.w	r3, #4
 800108a:	e04b      	b.n	8001124 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d11b      	bne.n	80010ce <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d006      	beq.n	80010ae <LAN8742_GetLinkState+0x90>
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010aa:	2302      	movs	r3, #2
 80010ac:	e03a      	b.n	8001124 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e033      	b.n	8001124 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010c6:	2304      	movs	r3, #4
 80010c8:	e02c      	b.n	8001124 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010ca:	2305      	movs	r3, #5
 80010cc:	e02a      	b.n	8001124 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	6810      	ldr	r0, [r2, #0]
 80010d6:	f107 020c 	add.w	r2, r7, #12
 80010da:	211f      	movs	r1, #31
 80010dc:	4798      	blx	r3
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	da02      	bge.n	80010ea <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80010e4:	f06f 0304 	mvn.w	r3, #4
 80010e8:	e01c      	b.n	8001124 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80010f4:	2306      	movs	r3, #6
 80010f6:	e015      	b.n	8001124 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 031c 	and.w	r3, r3, #28
 80010fe:	2b18      	cmp	r3, #24
 8001100:	d101      	bne.n	8001106 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001102:	2302      	movs	r3, #2
 8001104:	e00e      	b.n	8001124 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f003 031c 	and.w	r3, r3, #28
 800110c:	2b08      	cmp	r3, #8
 800110e:	d101      	bne.n	8001114 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001110:	2303      	movs	r3, #3
 8001112:	e007      	b.n	8001124 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 031c 	and.w	r3, r3, #28
 800111a:	2b14      	cmp	r3, #20
 800111c:	d101      	bne.n	8001122 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800111e:	2304      	movs	r3, #4
 8001120:	e000      	b.n	8001124 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001122:	2305      	movs	r3, #5
    }				
  }
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001132:	2003      	movs	r0, #3
 8001134:	f000 f970 	bl	8001418 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001138:	f002 feb0 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 800113c:	4602      	mov	r2, r0
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_Init+0x68>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	0a1b      	lsrs	r3, r3, #8
 8001144:	f003 030f 	and.w	r3, r3, #15
 8001148:	4913      	ldr	r1, [pc, #76]	; (8001198 <HAL_Init+0x6c>)
 800114a:	5ccb      	ldrb	r3, [r1, r3]
 800114c:	f003 031f 	and.w	r3, r3, #31
 8001150:	fa22 f303 	lsr.w	r3, r2, r3
 8001154:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_Init+0x68>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <HAL_Init+0x6c>)
 8001160:	5cd3      	ldrb	r3, [r2, r3]
 8001162:	f003 031f 	and.w	r3, r3, #31
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	fa22 f303 	lsr.w	r3, r2, r3
 800116c:	4a0b      	ldr	r2, [pc, #44]	; (800119c <HAL_Init+0x70>)
 800116e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001170:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <HAL_Init+0x74>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001176:	2000      	movs	r0, #0
 8001178:	f000 f814 	bl	80011a4 <HAL_InitTick>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e002      	b.n	800118c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001186:	f7ff fbc7 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	58024400 	.word	0x58024400
 8001198:	08013970 	.word	0x08013970
 800119c:	24000004 	.word	0x24000004
 80011a0:	24000000 	.word	0x24000000

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_InitTick+0x60>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e021      	b.n	80011fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_InitTick+0x64>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_InitTick+0x60>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f955 	bl	800147e <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00e      	b.n	80011fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d80a      	bhi.n	80011fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f000 f91f 	bl	800142e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <HAL_InitTick+0x68>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	2400000c 	.word	0x2400000c
 8001208:	24000000 	.word	0x24000000
 800120c:	24000008 	.word	0x24000008

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	2400000c 	.word	0x2400000c
 8001234:	2400016c 	.word	0x2400016c

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	2400016c 	.word	0x2400016c

08001250 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001260:	4904      	ldr	r1, [pc, #16]	; (8001274 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4313      	orrs	r3, r2
 8001266:	604b      	str	r3, [r1, #4]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	58000400 	.word	0x58000400

08001278 <__NVIC_SetPriorityGrouping>:
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <__NVIC_SetPriorityGrouping+0x40>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a6:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <__NVIC_SetPriorityGrouping+0x40>)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	60d3      	str	r3, [r2, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00
 80012bc:	05fa0000 	.word	0x05fa0000

080012c0 <__NVIC_GetPriorityGrouping>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_EnableIRQ>:
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	db0b      	blt.n	8001306 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	f003 021f 	and.w	r2, r3, #31
 80012f4:	4907      	ldr	r1, [pc, #28]	; (8001314 <__NVIC_EnableIRQ+0x38>)
 80012f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	2001      	movs	r0, #1
 80012fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000e100 	.word	0xe000e100

08001318 <__NVIC_SetPriority>:
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001328:	2b00      	cmp	r3, #0
 800132a:	db0a      	blt.n	8001342 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	490c      	ldr	r1, [pc, #48]	; (8001364 <__NVIC_SetPriority+0x4c>)
 8001332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001336:	0112      	lsls	r2, r2, #4
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	440b      	add	r3, r1
 800133c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001340:	e00a      	b.n	8001358 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4908      	ldr	r1, [pc, #32]	; (8001368 <__NVIC_SetPriority+0x50>)
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	3b04      	subs	r3, #4
 8001350:	0112      	lsls	r2, r2, #4
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	440b      	add	r3, r1
 8001356:	761a      	strb	r2, [r3, #24]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000e100 	.word	0xe000e100
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <NVIC_EncodePriority>:
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	; 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f1c3 0307 	rsb	r3, r3, #7
 8001386:	2b04      	cmp	r3, #4
 8001388:	bf28      	it	cs
 800138a:	2304      	movcs	r3, #4
 800138c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3304      	adds	r3, #4
 8001392:	2b06      	cmp	r3, #6
 8001394:	d902      	bls.n	800139c <NVIC_EncodePriority+0x30>
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3b03      	subs	r3, #3
 800139a:	e000      	b.n	800139e <NVIC_EncodePriority+0x32>
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	f04f 32ff 	mov.w	r2, #4294967295
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	401a      	ands	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b4:	f04f 31ff 	mov.w	r1, #4294967295
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	43d9      	mvns	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	4313      	orrs	r3, r2
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3724      	adds	r7, #36	; 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e4:	d301      	bcc.n	80013ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00f      	b.n	800140a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <SysTick_Config+0x40>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f2:	210f      	movs	r1, #15
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f7ff ff8e 	bl	8001318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <SysTick_Config+0x40>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <SysTick_Config+0x40>)
 8001404:	2207      	movs	r2, #7
 8001406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	e000e010 	.word	0xe000e010

08001418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff29 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800143c:	f7ff ff40 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 8001440:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f7ff ff90 	bl	800136c <NVIC_EncodePriority>
 800144c:	4602      	mov	r2, r0
 800144e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff5f 	bl	8001318 <__NVIC_SetPriority>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800146c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff33 	bl	80012dc <__NVIC_EnableIRQ>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffa4 	bl	80013d4 <SysTick_Config>
 800148c:	4603      	mov	r3, r0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800149c:	f3bf 8f5f 	dmb	sy
}
 80014a0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <HAL_MPU_Disable+0x28>)
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <HAL_MPU_Disable+0x28>)
 80014a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ac:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_MPU_Disable+0x2c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00
 80014c4:	e000ed90 	.word	0xe000ed90

080014c8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80014d0:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <HAL_MPU_Enable+0x38>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_MPU_Enable+0x3c>)
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	4a09      	ldr	r2, [pc, #36]	; (8001504 <HAL_MPU_Enable+0x3c>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80014e6:	f3bf 8f4f 	dsb	sy
}
 80014ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014ec:	f3bf 8f6f 	isb	sy
}
 80014f0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed90 	.word	0xe000ed90
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	785a      	ldrb	r2, [r3, #1]
 8001514:	4b1d      	ldr	r3, [pc, #116]	; (800158c <HAL_MPU_ConfigRegion+0x84>)
 8001516:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d029      	beq.n	8001574 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001520:	4a1a      	ldr	r2, [pc, #104]	; (800158c <HAL_MPU_ConfigRegion+0x84>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7b1b      	ldrb	r3, [r3, #12]
 800152c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7adb      	ldrb	r3, [r3, #11]
 8001532:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001534:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	7a9b      	ldrb	r3, [r3, #10]
 800153a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800153c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7b5b      	ldrb	r3, [r3, #13]
 8001542:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001544:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7b9b      	ldrb	r3, [r3, #14]
 800154a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800154c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7bdb      	ldrb	r3, [r3, #15]
 8001552:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001554:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7a5b      	ldrb	r3, [r3, #9]
 800155a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800155c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7a1b      	ldrb	r3, [r3, #8]
 8001562:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001564:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	7812      	ldrb	r2, [r2, #0]
 800156a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800156e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001570:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001572:	e005      	b.n	8001580 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_MPU_ConfigRegion+0x84>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <HAL_MPU_ConfigRegion+0x84>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed90 	.word	0xe000ed90

08001590 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e0cf      	b.n	8001742 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d106      	bne.n	80015ba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2223      	movs	r2, #35	; 0x23
 80015b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f003 fe15 	bl	80051e4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	4b64      	ldr	r3, [pc, #400]	; (800174c <HAL_ETH_Init+0x1bc>)
 80015bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015c0:	4a62      	ldr	r2, [pc, #392]	; (800174c <HAL_ETH_Init+0x1bc>)
 80015c2:	f043 0302 	orr.w	r3, r3, #2
 80015c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015ca:	4b60      	ldr	r3, [pc, #384]	; (800174c <HAL_ETH_Init+0x1bc>)
 80015cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	7a1b      	ldrb	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d103      	bne.n	80015e8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80015e0:	2000      	movs	r0, #0
 80015e2:	f7ff fe35 	bl	8001250 <HAL_SYSCFG_ETHInterfaceSelect>
 80015e6:	e003      	b.n	80015f0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80015e8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80015ec:	f7ff fe30 	bl	8001250 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80015f0:	4b57      	ldr	r3, [pc, #348]	; (8001750 <HAL_ETH_Init+0x1c0>)
 80015f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6812      	ldr	r2, [r2, #0]
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800160a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800160c:	f7ff fe14 	bl	8001238 <HAL_GetTick>
 8001610:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001612:	e011      	b.n	8001638 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001614:	f7ff fe10 	bl	8001238 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001622:	d909      	bls.n	8001638 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2204      	movs	r2, #4
 8001628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	22e0      	movs	r2, #224	; 0xe0
 8001630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e084      	b.n	8001742 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1e4      	bne.n	8001614 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 fee0 	bl	8002410 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001650:	f002 fd9e 	bl	8004190 <HAL_RCC_GetHCLKFreq>
 8001654:	4603      	mov	r3, r0
 8001656:	4a3f      	ldr	r2, [pc, #252]	; (8001754 <HAL_ETH_Init+0x1c4>)
 8001658:	fba2 2303 	umull	r2, r3, r2, r3
 800165c:	0c9a      	lsrs	r2, r3, #18
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	3a01      	subs	r2, #1
 8001664:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f001 f8cb 	bl	8002804 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001676:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800167a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001686:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800168a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d009      	beq.n	80016ae <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	22e0      	movs	r2, #224	; 0xe0
 80016a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e049      	b.n	8001742 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80016ba:	4b27      	ldr	r3, [pc, #156]	; (8001758 <HAL_ETH_Init+0x1c8>)
 80016bc:	4013      	ands	r3, r2
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6952      	ldr	r2, [r2, #20]
 80016c2:	0051      	lsls	r1, r2, #1
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	430b      	orrs	r3, r1
 80016ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ce:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f001 f933 	bl	800293e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f001 f979 	bl	80029d0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	3305      	adds	r3, #5
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	021a      	lsls	r2, r3, #8
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	3304      	adds	r3, #4
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	3303      	adds	r3, #3
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	061a      	lsls	r2, r3, #24
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	3302      	adds	r3, #2
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	041b      	lsls	r3, r3, #16
 8001710:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	3301      	adds	r3, #1
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800171c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800172a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800172c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2210      	movs	r2, #16
 800173c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	58024400 	.word	0x58024400
 8001750:	58000400 	.word	0x58000400
 8001754:	431bde83 	.word	0x431bde83
 8001758:	ffff8001 	.word	0xffff8001

0800175c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800176a:	2b10      	cmp	r3, #16
 800176c:	d153      	bne.n	8001816 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2223      	movs	r2, #35	; 0x23
 8001772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2204      	movs	r2, #4
 800177a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 f9f6 	bl	8001b6e <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f042 0202 	orr.w	r2, r2, #2
 8001790:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 0201 	orr.w	r2, r2, #1
 80017a0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0201 	orr.w	r2, r2, #1
 80017b2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017be:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017ce:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017ea:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f6:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001802:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001806:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2223      	movs	r2, #35	; 0x23
 800180e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	e000      	b.n	8001818 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
  }
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800182e:	2b23      	cmp	r3, #35	; 0x23
 8001830:	d13f      	bne.n	80018b2 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2223      	movs	r2, #35	; 0x23
 8001836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001842:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001852:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800185e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800186e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0201 	bic.w	r2, r2, #1
 8001880:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0202 	bic.w	r2, r2, #2
 80018a4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2210      	movs	r2, #16
 80018aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
  }
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d8:	f043 0201 	orr.w	r2, r3, #1
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e07f      	b.n	80019e6 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018ec:	2b23      	cmp	r3, #35	; 0x23
 80018ee:	d179      	bne.n	80019e4 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80018f0:	2200      	movs	r2, #0
 80018f2:	68b9      	ldr	r1, [r7, #8]
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f001 f8c9 	bl	8002a8c <ETH_Prepare_Tx_Descriptors>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d009      	beq.n	8001914 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001906:	f043 0202 	orr.w	r2, r3, #2
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e068      	b.n	80019e6 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8001914:	f3bf 8f4f 	dsb	sy
}
 8001918:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3206      	adds	r2, #6
 8001922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001926:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	629a      	str	r2, [r3, #40]	; 0x28
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	2b03      	cmp	r3, #3
 8001938:	d904      	bls.n	8001944 <HAL_ETH_Transmit+0x84>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	1f1a      	subs	r2, r3, #4
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3106      	adds	r1, #6
 8001950:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001954:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001958:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 800195c:	f7ff fc6c 	bl	8001238 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001962:	e039      	b.n	80019d8 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800196c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d012      	beq.n	800199e <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197e:	f043 0208 	orr.w	r2, r3, #8
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001990:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e023      	b.n	80019e6 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a4:	d018      	beq.n	80019d8 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80019a6:	f7ff fc47 	bl	8001238 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d302      	bcc.n	80019bc <HAL_ETH_Transmit+0xfc>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10d      	bne.n	80019d8 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c2:	f043 0204 	orr.w	r2, r3, #4
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80019d2:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e006      	b.n	80019e6 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	dbc1      	blt.n	8001964 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	e000      	b.n	80019e6 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
  }
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b088      	sub	sp, #32
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d109      	bne.n	8001a1a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0c:	f043 0201 	orr.w	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e0a5      	b.n	8001b66 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a20:	2b23      	cmp	r3, #35	; 0x23
 8001a22:	d001      	beq.n	8001a28 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e09e      	b.n	8001b66 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69fa      	ldr	r2, [r7, #28]
 8001a32:	3212      	adds	r2, #18
 8001a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a38:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a3e:	f1c3 0304 	rsb	r3, r3, #4
 8001a42:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a44:	e067      	b.n	8001b16 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d007      	beq.n	8001a62 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d103      	bne.n	8001a76 <HAL_ETH_ReadData+0x88>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d03d      	beq.n	8001af2 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d005      	beq.n	8001a8e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00d      	beq.n	8001abc <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001acc:	461a      	mov	r2, r3
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	f003 fd67 	bl	80055a4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	441a      	add	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3301      	adds	r3, #1
 8001af6:	61fb      	str	r3, [r7, #28]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d902      	bls.n	8001b04 <HAL_ETH_ReadData+0x116>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b04      	subs	r3, #4
 8001b02:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	3212      	adds	r2, #18
 8001b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3301      	adds	r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	db06      	blt.n	8001b2c <HAL_ETH_ReadData+0x13e>
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d202      	bcs.n	8001b2c <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d08c      	beq.n	8001a46 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	441a      	add	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f814 	bl	8001b6e <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d108      	bne.n	8001b64 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	e000      	b.n	8001b66 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3720      	adds	r7, #32
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b088      	sub	sp, #32
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b82:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	3212      	adds	r2, #18
 8001b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8e:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b94:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001b96:	e03b      	b.n	8001c10 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d112      	bne.n	8001bc6 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f003 fccd 	bl	8005544 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d102      	bne.n	8001bb6 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	74fb      	strb	r3, [r7, #19]
 8001bb4:	e007      	b.n	8001bc6 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001bc6:	7cfb      	ldrb	r3, [r7, #19]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d021      	beq.n	8001c10 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001bcc:	f3bf 8f5f 	dmb	sy
}
 8001bd0:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d004      	beq.n	8001be4 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	e003      	b.n	8001bec <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001bea:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d902      	bls.n	8001bfe <ETH_UpdateDescriptor+0x90>
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69fa      	ldr	r2, [r7, #28]
 8001c02:	3212      	adds	r2, #18
 8001c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c08:	617b      	str	r3, [r7, #20]
      desccount--;
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <ETH_UpdateDescriptor+0xae>
 8001c16:	7cfb      	ldrb	r3, [r7, #19]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1bd      	bne.n	8001b98 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d00d      	beq.n	8001c42 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2e:	461a      	mov	r2, r3
 8001c30:	2300      	movs	r3, #0
 8001c32:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001c42:	bf00      	nop
 8001c44:	3720      	adds	r7, #32
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c64:	2b40      	cmp	r3, #64	; 0x40
 8001c66:	d115      	bne.n	8001c94 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c70:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c78:	2b40      	cmp	r3, #64	; 0x40
 8001c7a:	d10b      	bne.n	8001c94 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c84:	461a      	mov	r2, r3
 8001c86:	f248 0340 	movw	r3, #32832	; 0x8040
 8001c8a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f8f6 	bl	8001e80 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d115      	bne.n	8001cd4 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d10b      	bne.n	8001cd4 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	f248 0301 	movw	r3, #32769	; 0x8001
 8001cca:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f8cc 	bl	8001e6c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cdc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ce8:	d153      	bne.n	8001d92 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cfe:	d148      	bne.n	8001d92 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d06:	f043 0208 	orr.w	r2, r3, #8
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d18:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d24:	d11e      	bne.n	8001d64 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d2e:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001d32:	f241 1302 	movw	r3, #4354	; 0x1102
 8001d36:	4013      	ands	r3, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d46:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d56:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	22e0      	movs	r2, #224	; 0xe0
 8001d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001d62:	e013      	b.n	8001d8c <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d6c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001d70:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d82:	461a      	mov	r2, r3
 8001d84:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8001d88:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f881 	bl	8001e94 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001d9a:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d104      	bne.n	8001db0 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d019      	beq.n	8001de4 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db6:	f043 0210 	orr.w	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	22e0      	movs	r2, #224	; 0xe0
 8001dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f85c 	bl	8001e94 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	2b10      	cmp	r3, #16
 8001df2:	d10f      	bne.n	8001e14 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001dfc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f84e 	bl	8001ea8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	2b20      	cmp	r3, #32
 8001e22:	d10f      	bne.n	8001e44 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e2c:	f003 020f 	and.w	r2, r3, #15
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f840 	bl	8001ebc <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <HAL_ETH_IRQHandler+0x21c>)
 8001e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_ETH_IRQHandler+0x21c>)
 8001e52:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e56:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f839 	bl	8001ed0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	58000080 	.word	0x58000080

08001e6c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e03e      	b.n	8001f84 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f0e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	055b      	lsls	r3, r3, #21
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	041b      	lsls	r3, r3, #16
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f043 030c 	orr.w	r3, r3, #12
 8001f32:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001f46:	f7ff f977 	bl	8001238 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f4c:	e009      	b.n	8001f62 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001f4e:	f7ff f973 	bl	8001238 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f5c:	d901      	bls.n	8001f62 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e010      	b.n	8001f84 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1ed      	bne.n	8001f4e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
 8001f98:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e03c      	b.n	8002028 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fb6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	055b      	lsls	r3, r3, #21
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	041b      	lsls	r3, r3, #16
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f023 030c 	bic.w	r3, r3, #12
 8001fda:	f043 0304 	orr.w	r3, r3, #4
 8001fde:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_ETH_WritePHYRegister+0xa4>)
 8001fee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001ff2:	4a0f      	ldr	r2, [pc, #60]	; (8002030 <HAL_ETH_WritePHYRegister+0xa4>)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001ffa:	f7ff f91d 	bl	8001238 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002000:	e009      	b.n	8002016 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002002:	f7ff f919 	bl	8001238 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002010:	d901      	bls.n	8002016 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e008      	b.n	8002028 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1ed      	bne.n	8002002 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40028000 	.word	0x40028000

08002034 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e1c3      	b.n	80023d0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 020c 	and.w	r2, r3, #12
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf14      	ite	ne
 8002064:	2301      	movne	r3, #1
 8002066:	2300      	moveq	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf0c      	ite	eq
 800208e:	2301      	moveq	r3, #1
 8002090:	2300      	movne	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf14      	ite	ne
 80020aa:	2301      	movne	r3, #1
 80020ac:	2300      	moveq	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf0c      	ite	eq
 80020c4:	2301      	moveq	r3, #1
 80020c6:	2300      	movne	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80020d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020da:	2b00      	cmp	r3, #0
 80020dc:	bf14      	ite	ne
 80020de:	2301      	movne	r3, #1
 80020e0:	2300      	moveq	r3, #0
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf14      	ite	ne
 80020f8:	2301      	movne	r3, #1
 80020fa:	2300      	moveq	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	bf14      	ite	ne
 800212e:	2301      	movne	r3, #1
 8002130:	2300      	moveq	r3, #0
 8002132:	b2db      	uxtb	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800215e:	2b00      	cmp	r3, #0
 8002160:	bf0c      	ite	eq
 8002162:	2301      	moveq	r3, #1
 8002164:	2300      	movne	r3, #0
 8002166:	b2db      	uxtb	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf14      	ite	ne
 800217c:	2301      	movne	r3, #1
 800217e:	2300      	moveq	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002192:	2b00      	cmp	r3, #0
 8002194:	bf14      	ite	ne
 8002196:	2301      	movne	r3, #1
 8002198:	2300      	moveq	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf14      	ite	ne
 80021b0:	2301      	movne	r3, #1
 80021b2:	2300      	moveq	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80021c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf14      	ite	ne
 80021ca:	2301      	movne	r3, #1
 80021cc:	2300      	moveq	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	bf14      	ite	ne
 80021f2:	2301      	movne	r3, #1
 80021f4:	2300      	moveq	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	461a      	mov	r2, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf0c      	ite	eq
 8002228:	2301      	moveq	r3, #1
 800222a:	2300      	movne	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf14      	ite	ne
 8002244:	2301      	movne	r3, #1
 8002246:	2300      	moveq	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002258:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf14      	ite	ne
 8002260:	2301      	movne	r3, #1
 8002262:	2300      	moveq	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8002278:	2b00      	cmp	r3, #0
 800227a:	bf14      	ite	ne
 800227c:	2301      	movne	r3, #1
 800227e:	2300      	moveq	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	0e5b      	lsrs	r3, r3, #25
 8002292:	f003 021f 	and.w	r2, r3, #31
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 020f 	and.w	r2, r3, #15
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bf14      	ite	ne
 80022d2:	2301      	movne	r3, #1
 80022d4:	2300      	moveq	r3, #0
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bf0c      	ite	eq
 80022ee:	2301      	moveq	r3, #1
 80022f0:	2300      	movne	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	461a      	mov	r2, r3
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	b29a      	uxth	r2, r3
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	bf14      	ite	ne
 8002328:	2301      	movne	r3, #1
 800232a:	2300      	moveq	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233e:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002342:	2b00      	cmp	r3, #0
 8002344:	bf14      	ite	ne
 8002346:	2301      	movne	r3, #1
 8002348:	2300      	moveq	r3, #0
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800235c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800236c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf14      	ite	ne
 8002384:	2301      	movne	r3, #1
 8002386:	2300      	moveq	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf14      	ite	ne
 80023a2:	2301      	movne	r3, #1
 80023a4:	2300      	moveq	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80023b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf0c      	ite	eq
 80023c0:	2301      	moveq	r3, #1
 80023c2:	2300      	movne	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e00b      	b.n	8002408 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f6:	2b10      	cmp	r3, #16
 80023f8:	d105      	bne.n	8002406 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80023fa:	6839      	ldr	r1, [r7, #0]
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f85f 	bl	80024c0 <ETH_SetMACConfig>

    return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e000      	b.n	8002408 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
  }
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002420:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002428:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800242a:	f001 feb1 	bl	8004190 <HAL_RCC_GetHCLKFreq>
 800242e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4a1e      	ldr	r2, [pc, #120]	; (80024ac <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d908      	bls.n	800244a <HAL_ETH_SetMDIOClockRange+0x3a>
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4a1d      	ldr	r2, [pc, #116]	; (80024b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d804      	bhi.n	800244a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	e027      	b.n	800249a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4a18      	ldr	r2, [pc, #96]	; (80024b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d908      	bls.n	8002464 <HAL_ETH_SetMDIOClockRange+0x54>
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	4a17      	ldr	r2, [pc, #92]	; (80024b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d204      	bcs.n	8002464 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	e01a      	b.n	800249a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4a13      	ldr	r2, [pc, #76]	; (80024b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d303      	bcc.n	8002474 <HAL_ETH_SetMDIOClockRange+0x64>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d911      	bls.n	8002498 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4a10      	ldr	r2, [pc, #64]	; (80024b8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d908      	bls.n	800248e <HAL_ETH_SetMDIOClockRange+0x7e>
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4a0f      	ldr	r2, [pc, #60]	; (80024bc <HAL_ETH_SetMDIOClockRange+0xac>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d804      	bhi.n	800248e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	e005      	b.n	800249a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	e000      	b.n	800249a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002498:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	01312cff 	.word	0x01312cff
 80024b0:	02160ebf 	.word	0x02160ebf
 80024b4:	03938700 	.word	0x03938700
 80024b8:	05f5e0ff 	.word	0x05f5e0ff
 80024bc:	08f0d17f 	.word	0x08f0d17f

080024c0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80024d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	791b      	ldrb	r3, [r3, #4]
 80024d8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80024da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	7b1b      	ldrb	r3, [r3, #12]
 80024e0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80024e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	7b5b      	ldrb	r3, [r3, #13]
 80024e8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80024ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	7b9b      	ldrb	r3, [r3, #14]
 80024f0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80024f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	7bdb      	ldrb	r3, [r3, #15]
 80024f8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80024fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	7c12      	ldrb	r2, [r2, #16]
 8002500:	2a00      	cmp	r2, #0
 8002502:	d102      	bne.n	800250a <ETH_SetMACConfig+0x4a>
 8002504:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002508:	e000      	b.n	800250c <ETH_SetMACConfig+0x4c>
 800250a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800250c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	7c52      	ldrb	r2, [r2, #17]
 8002512:	2a00      	cmp	r2, #0
 8002514:	d102      	bne.n	800251c <ETH_SetMACConfig+0x5c>
 8002516:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800251a:	e000      	b.n	800251e <ETH_SetMACConfig+0x5e>
 800251c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800251e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	7c9b      	ldrb	r3, [r3, #18]
 8002524:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002526:	431a      	orrs	r2, r3
               macconf->Speed |
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800252c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002532:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	7f1b      	ldrb	r3, [r3, #28]
 8002538:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800253a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	7f5b      	ldrb	r3, [r3, #29]
 8002540:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002542:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	7f92      	ldrb	r2, [r2, #30]
 8002548:	2a00      	cmp	r2, #0
 800254a:	d102      	bne.n	8002552 <ETH_SetMACConfig+0x92>
 800254c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002550:	e000      	b.n	8002554 <ETH_SetMACConfig+0x94>
 8002552:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002554:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	7fdb      	ldrb	r3, [r3, #31]
 800255a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800255c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002564:	2a00      	cmp	r2, #0
 8002566:	d102      	bne.n	800256e <ETH_SetMACConfig+0xae>
 8002568:	f44f 7280 	mov.w	r2, #256	; 0x100
 800256c:	e000      	b.n	8002570 <ETH_SetMACConfig+0xb0>
 800256e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002570:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002576:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800257e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002580:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b56      	ldr	r3, [pc, #344]	; (80026ec <ETH_SetMACConfig+0x22c>)
 8002592:	4013      	ands	r3, r2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	68f9      	ldr	r1, [r7, #12]
 800259a:	430b      	orrs	r3, r1
 800259c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025aa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80025ac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025b4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80025b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80025be:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80025c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80025c8:	2a00      	cmp	r2, #0
 80025ca:	d102      	bne.n	80025d2 <ETH_SetMACConfig+0x112>
 80025cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025d0:	e000      	b.n	80025d4 <ETH_SetMACConfig+0x114>
 80025d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80025d4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	4b42      	ldr	r3, [pc, #264]	; (80026f0 <ETH_SetMACConfig+0x230>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	68f9      	ldr	r1, [r7, #12]
 80025ee:	430b      	orrs	r3, r1
 80025f0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025f8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	4b3a      	ldr	r3, [pc, #232]	; (80026f4 <ETH_SetMACConfig+0x234>)
 800260a:	4013      	ands	r3, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	68f9      	ldr	r1, [r7, #12]
 8002612:	430b      	orrs	r3, r1
 8002614:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800261c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002622:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800262a:	2a00      	cmp	r2, #0
 800262c:	d101      	bne.n	8002632 <ETH_SetMACConfig+0x172>
 800262e:	2280      	movs	r2, #128	; 0x80
 8002630:	e000      	b.n	8002634 <ETH_SetMACConfig+0x174>
 8002632:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002634:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002646:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800264a:	4013      	ands	r3, r2
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	68f9      	ldr	r1, [r7, #12]
 8002652:	430b      	orrs	r3, r1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800265c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002664:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002672:	f023 0103 	bic.w	r1, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	430a      	orrs	r2, r1
 800267e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800268a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80026a6:	2a00      	cmp	r2, #0
 80026a8:	d101      	bne.n	80026ae <ETH_SetMACConfig+0x1ee>
 80026aa:	2240      	movs	r2, #64	; 0x40
 80026ac:	e000      	b.n	80026b0 <ETH_SetMACConfig+0x1f0>
 80026ae:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80026b0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80026b8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80026ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80026c2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80026d0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	430a      	orrs	r2, r1
 80026dc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	00048083 	.word	0x00048083
 80026f0:	c0f88000 	.word	0xc0f88000
 80026f4:	fffffef0 	.word	0xfffffef0

080026f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b38      	ldr	r3, [pc, #224]	; (80027f0 <ETH_SetDMAConfig+0xf8>)
 800270e:	4013      	ands	r3, r2
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	6811      	ldr	r1, [r2, #0]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	430b      	orrs	r3, r1
 800271a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800271e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	791b      	ldrb	r3, [r3, #4]
 8002724:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800272a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	7b1b      	ldrb	r3, [r3, #12]
 8002730:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	4b2c      	ldr	r3, [pc, #176]	; (80027f4 <ETH_SetDMAConfig+0xfc>)
 8002742:	4013      	ands	r3, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	68f9      	ldr	r1, [r7, #12]
 800274a:	430b      	orrs	r3, r1
 800274c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002750:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	7b5b      	ldrb	r3, [r3, #13]
 8002756:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800275c:	4313      	orrs	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002768:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800276c:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <ETH_SetDMAConfig+0x100>)
 800276e:	4013      	ands	r3, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	68f9      	ldr	r1, [r7, #12]
 8002776:	430b      	orrs	r3, r1
 8002778:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800277c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	7d1b      	ldrb	r3, [r3, #20]
 8002788:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800278a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	7f5b      	ldrb	r3, [r3, #29]
 8002790:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800279e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80027a2:	4b16      	ldr	r3, [pc, #88]	; (80027fc <ETH_SetDMAConfig+0x104>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	68f9      	ldr	r1, [r7, #12]
 80027ac:	430b      	orrs	r3, r1
 80027ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027b2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	7f1b      	ldrb	r3, [r3, #28]
 80027ba:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027cc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <ETH_SetDMAConfig+0x108>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	68f9      	ldr	r1, [r7, #12]
 80027da:	430b      	orrs	r3, r1
 80027dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027e0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	ffff87fd 	.word	0xffff87fd
 80027f4:	ffff2ffe 	.word	0xffff2ffe
 80027f8:	fffec000 	.word	0xfffec000
 80027fc:	ffc0efef 	.word	0xffc0efef
 8002800:	7fc0ffff 	.word	0x7fc0ffff

08002804 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b0a4      	sub	sp, #144	; 0x90
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800280c:	2301      	movs	r3, #1
 800280e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002812:	2300      	movs	r3, #0
 8002814:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002816:	2300      	movs	r3, #0
 8002818:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800281c:	2300      	movs	r3, #0
 800281e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002822:	2301      	movs	r3, #1
 8002824:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002828:	2301      	movs	r3, #1
 800282a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800282e:	2301      	movs	r3, #1
 8002830:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800283a:	2301      	movs	r3, #1
 800283c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002844:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800284c:	2300      	movs	r3, #0
 800284e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002850:	2300      	movs	r3, #0
 8002852:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800285c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002860:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002862:	2300      	movs	r3, #0
 8002864:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002868:	2300      	movs	r3, #0
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800286c:	2301      	movs	r3, #1
 800286e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002878:	2300      	movs	r3, #0
 800287a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800287e:	2300      	movs	r3, #0
 8002880:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002882:	2300      	movs	r3, #0
 8002884:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002886:	2300      	movs	r3, #0
 8002888:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002896:	2301      	movs	r3, #1
 8002898:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800289c:	2320      	movs	r3, #32
 800289e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80028a2:	2301      	movs	r3, #1
 80028a4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80028ae:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80028b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028b8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80028c0:	2302      	movs	r3, #2
 80028c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80028d8:	2301      	movs	r3, #1
 80028da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80028de:	2300      	movs	r3, #0
 80028e0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80028e2:	2301      	movs	r3, #1
 80028e4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80028e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028ec:	4619      	mov	r1, r3
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff fde6 	bl	80024c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028f4:	2301      	movs	r3, #1
 80028f6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028f8:	2301      	movs	r3, #1
 80028fa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002900:	2300      	movs	r3, #0
 8002902:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002906:	2300      	movs	r3, #0
 8002908:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800290a:	2300      	movs	r3, #0
 800290c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800290e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002912:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002914:	2300      	movs	r3, #0
 8002916:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002918:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800291c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002924:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800292a:	f107 0308 	add.w	r3, r7, #8
 800292e:	4619      	mov	r1, r3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff fee1 	bl	80026f8 <ETH_SetDMAConfig>
}
 8002936:	bf00      	nop
 8002938:	3790      	adds	r7, #144	; 0x90
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800293e:	b480      	push	{r7}
 8002940:	b085      	sub	sp, #20
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	e01d      	b.n	8002988 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68d9      	ldr	r1, [r3, #12]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	440b      	add	r3, r1
 800295c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2200      	movs	r2, #0
 8002968:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	3206      	adds	r2, #6
 800297e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	3301      	adds	r3, #1
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b03      	cmp	r3, #3
 800298c:	d9de      	bls.n	800294c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800299c:	461a      	mov	r2, r3
 800299e:	2303      	movs	r3, #3
 80029a0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	e023      	b.n	8002a26 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6919      	ldr	r1, [r3, #16]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4613      	mov	r3, r2
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4413      	add	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	440b      	add	r3, r1
 80029ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2200      	movs	r2, #0
 80029fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2200      	movs	r2, #0
 8002a06:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2200      	movs	r2, #0
 8002a12:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	3212      	adds	r2, #18
 8002a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3301      	adds	r3, #1
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d9d8      	bls.n	80029de <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a52:	461a      	mov	r2, r3
 8002a54:	2303      	movs	r3, #3
 8002a56:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691a      	ldr	r2, [r3, #16]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a66:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a7a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b08d      	sub	sp, #52	; 0x34
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	3318      	adds	r3, #24
 8002a9c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ace:	d007      	beq.n	8002ae0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e259      	b.n	8002f98 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d044      	beq.n	8002b7a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	4b75      	ldr	r3, [pc, #468]	; (8002ccc <ETH_Prepare_Tx_Descriptors+0x240>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002afc:	431a      	orrs	r2, r3
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b1c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d027      	beq.n	8002b7a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	041b      	lsls	r3, r3, #16
 8002b36:	431a      	orrs	r2, r3
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	431a      	orrs	r2, r3
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b68:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002b78:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00e      	beq.n	8002ba4 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	4b51      	ldr	r3, [pc, #324]	; (8002cd0 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	6992      	ldr	r2, [r2, #24]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d036      	beq.n	8002c2a <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002bc8:	f3bf 8f5f 	dmb	sy
}
 8002bcc:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	3301      	adds	r3, #1
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d902      	bls.n	8002bec <ETH_Prepare_Tx_Descriptors+0x160>
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	3b04      	subs	r3, #4
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf4:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c08:	d10f      	bne.n	8002c2a <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c14:	f3bf 8f5f 	dmb	sy
}
 8002c18:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002c26:	2302      	movs	r3, #2
 8002c28:	e1b6      	b.n	8002f98 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	6852      	ldr	r2, [r2, #4]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d012      	beq.n	8002c7a <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	6852      	ldr	r2, [r2, #4]
 8002c70:	0412      	lsls	r2, r2, #16
 8002c72:	431a      	orrs	r2, r3
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	e008      	b.n	8002c8c <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	6a3a      	ldr	r2, [r7, #32]
 8002c8a:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d021      	beq.n	8002cdc <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	04db      	lsls	r3, r3, #19
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	69d2      	ldr	r2, [r2, #28]
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	e02e      	b.n	8002d2a <ETH_Prepare_Tx_Descriptors+0x29e>
 8002ccc:	ffff0000 	.word	0xffff0000
 8002cd0:	ffffc000 	.word	0xffffc000
 8002cd4:	c000ffff 	.word	0xc000ffff
 8002cd8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	4b7b      	ldr	r3, [pc, #492]	; (8002ed0 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	6852      	ldr	r2, [r2, #4]
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	431a      	orrs	r2, r3
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	431a      	orrs	r2, r3
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d008      	beq.n	8002d48 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	431a      	orrs	r2, r3
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d60:	f3bf 8f5f 	dmb	sy
}
 8002d64:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 80da 	beq.w	8002f34 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002d92:	e0cf      	b.n	8002f34 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da2:	3301      	adds	r3, #1
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d902      	bls.n	8002db2 <ETH_Prepare_Tx_Descriptors+0x326>
 8002dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dae:	3b04      	subs	r3, #4
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dba:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dd4:	d007      	beq.n	8002de6 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dda:	3304      	adds	r3, #4
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d029      	beq.n	8002e3a <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df2:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df8:	e019      	b.n	8002e2e <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002dfa:	f3bf 8f5f 	dmb	sy
}
 8002dfe:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0e:	3301      	adds	r3, #1
 8002e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d902      	bls.n	8002e1e <ETH_Prepare_Tx_Descriptors+0x392>
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e26:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d3e1      	bcc.n	8002dfa <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002e36:	2302      	movs	r3, #2
 8002e38:	e0ae      	b.n	8002f98 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <ETH_Prepare_Tx_Descriptors+0x448>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	6852      	ldr	r2, [r2, #4]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d012      	beq.n	8002e90 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	6852      	ldr	r2, [r2, #4]
 8002e86:	0412      	lsls	r2, r2, #16
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	e008      	b.n	8002ea2 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	2200      	movs	r2, #0
 8002e94:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	6a3a      	ldr	r2, [r7, #32]
 8002ea0:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d018      	beq.n	8002ee0 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <ETH_Prepare_Tx_Descriptors+0x450>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	69d2      	ldr	r2, [r2, #28]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	60da      	str	r2, [r3, #12]
 8002ecc:	e020      	b.n	8002f10 <ETH_Prepare_Tx_Descriptors+0x484>
 8002ece:	bf00      	nop
 8002ed0:	ffff8000 	.word	0xffff8000
 8002ed4:	ffffc000 	.word	0xffffc000
 8002ed8:	c000ffff 	.word	0xc000ffff
 8002edc:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <ETH_Prepare_Tx_Descriptors+0x518>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	6852      	ldr	r2, [r2, #4]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	3301      	adds	r3, #1
 8002f14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002f16:	f3bf 8f5f 	dmb	sy
}
 8002f1a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f47f af2b 	bne.w	8002d94 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d006      	beq.n	8002f52 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	e005      	b.n	8002f5e <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f6e:	6979      	ldr	r1, [r7, #20]
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f72:	3304      	adds	r3, #4
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f7e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f80:	b672      	cpsid	i
}
 8002f82:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002f92:	b662      	cpsie	i
}
 8002f94:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3734      	adds	r7, #52	; 0x34
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	ffff8000 	.word	0xffff8000

08002fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002fb6:	4b86      	ldr	r3, [pc, #536]	; (80031d0 <HAL_GPIO_Init+0x228>)
 8002fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fba:	e18c      	b.n	80032d6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 817e 	beq.w	80032d0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d005      	beq.n	8002fec <HAL_GPIO_Init+0x44>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d130      	bne.n	800304e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003022:	2201      	movs	r2, #1
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	091b      	lsrs	r3, r3, #4
 8003038:	f003 0201 	and.w	r2, r3, #1
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b03      	cmp	r3, #3
 8003058:	d017      	beq.n	800308a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	2203      	movs	r2, #3
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d123      	bne.n	80030de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	08da      	lsrs	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3208      	adds	r2, #8
 800309e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	220f      	movs	r2, #15
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	08da      	lsrs	r2, r3, #3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3208      	adds	r2, #8
 80030d8:	69b9      	ldr	r1, [r7, #24]
 80030da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	2203      	movs	r2, #3
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4013      	ands	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 0203 	and.w	r2, r3, #3
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 80d8 	beq.w	80032d0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003120:	4b2c      	ldr	r3, [pc, #176]	; (80031d4 <HAL_GPIO_Init+0x22c>)
 8003122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003126:	4a2b      	ldr	r2, [pc, #172]	; (80031d4 <HAL_GPIO_Init+0x22c>)
 8003128:	f043 0302 	orr.w	r3, r3, #2
 800312c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003130:	4b28      	ldr	r3, [pc, #160]	; (80031d4 <HAL_GPIO_Init+0x22c>)
 8003132:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800313e:	4a26      	ldr	r2, [pc, #152]	; (80031d8 <HAL_GPIO_Init+0x230>)
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	089b      	lsrs	r3, r3, #2
 8003144:	3302      	adds	r3, #2
 8003146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	220f      	movs	r2, #15
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4013      	ands	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a1d      	ldr	r2, [pc, #116]	; (80031dc <HAL_GPIO_Init+0x234>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d04a      	beq.n	8003200 <HAL_GPIO_Init+0x258>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a1c      	ldr	r2, [pc, #112]	; (80031e0 <HAL_GPIO_Init+0x238>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d02b      	beq.n	80031ca <HAL_GPIO_Init+0x222>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <HAL_GPIO_Init+0x23c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d025      	beq.n	80031c6 <HAL_GPIO_Init+0x21e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a1a      	ldr	r2, [pc, #104]	; (80031e8 <HAL_GPIO_Init+0x240>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d01f      	beq.n	80031c2 <HAL_GPIO_Init+0x21a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a19      	ldr	r2, [pc, #100]	; (80031ec <HAL_GPIO_Init+0x244>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d019      	beq.n	80031be <HAL_GPIO_Init+0x216>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a18      	ldr	r2, [pc, #96]	; (80031f0 <HAL_GPIO_Init+0x248>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d013      	beq.n	80031ba <HAL_GPIO_Init+0x212>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a17      	ldr	r2, [pc, #92]	; (80031f4 <HAL_GPIO_Init+0x24c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d00d      	beq.n	80031b6 <HAL_GPIO_Init+0x20e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a16      	ldr	r2, [pc, #88]	; (80031f8 <HAL_GPIO_Init+0x250>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d007      	beq.n	80031b2 <HAL_GPIO_Init+0x20a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a15      	ldr	r2, [pc, #84]	; (80031fc <HAL_GPIO_Init+0x254>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d101      	bne.n	80031ae <HAL_GPIO_Init+0x206>
 80031aa:	2309      	movs	r3, #9
 80031ac:	e029      	b.n	8003202 <HAL_GPIO_Init+0x25a>
 80031ae:	230a      	movs	r3, #10
 80031b0:	e027      	b.n	8003202 <HAL_GPIO_Init+0x25a>
 80031b2:	2307      	movs	r3, #7
 80031b4:	e025      	b.n	8003202 <HAL_GPIO_Init+0x25a>
 80031b6:	2306      	movs	r3, #6
 80031b8:	e023      	b.n	8003202 <HAL_GPIO_Init+0x25a>
 80031ba:	2305      	movs	r3, #5
 80031bc:	e021      	b.n	8003202 <HAL_GPIO_Init+0x25a>
 80031be:	2304      	movs	r3, #4
 80031c0:	e01f      	b.n	8003202 <HAL_GPIO_Init+0x25a>
 80031c2:	2303      	movs	r3, #3
 80031c4:	e01d      	b.n	8003202 <HAL_GPIO_Init+0x25a>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e01b      	b.n	8003202 <HAL_GPIO_Init+0x25a>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e019      	b.n	8003202 <HAL_GPIO_Init+0x25a>
 80031ce:	bf00      	nop
 80031d0:	58000080 	.word	0x58000080
 80031d4:	58024400 	.word	0x58024400
 80031d8:	58000400 	.word	0x58000400
 80031dc:	58020000 	.word	0x58020000
 80031e0:	58020400 	.word	0x58020400
 80031e4:	58020800 	.word	0x58020800
 80031e8:	58020c00 	.word	0x58020c00
 80031ec:	58021000 	.word	0x58021000
 80031f0:	58021400 	.word	0x58021400
 80031f4:	58021800 	.word	0x58021800
 80031f8:	58021c00 	.word	0x58021c00
 80031fc:	58022400 	.word	0x58022400
 8003200:	2300      	movs	r3, #0
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	f002 0203 	and.w	r2, r2, #3
 8003208:	0092      	lsls	r2, r2, #2
 800320a:	4093      	lsls	r3, r2
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003212:	4938      	ldr	r1, [pc, #224]	; (80032f4 <HAL_GPIO_Init+0x34c>)
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	089b      	lsrs	r3, r3, #2
 8003218:	3302      	adds	r3, #2
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800324e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	43db      	mvns	r3, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4013      	ands	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	3301      	adds	r3, #1
 80032d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f47f ae6b 	bne.w	8002fbc <HAL_GPIO_Init+0x14>
  }
}
 80032e6:	bf00      	nop
 80032e8:	bf00      	nop
 80032ea:	3724      	adds	r7, #36	; 0x24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	58000400 	.word	0x58000400

080032f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	807b      	strh	r3, [r7, #2]
 8003304:	4613      	mov	r3, r2
 8003306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003308:	787b      	ldrb	r3, [r7, #1]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800330e:	887a      	ldrh	r2, [r7, #2]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003314:	e003      	b.n	800331e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003316:	887b      	ldrh	r3, [r7, #2]
 8003318:	041a      	lsls	r2, r3, #16
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	619a      	str	r2, [r3, #24]
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800332a:	b480      	push	{r7}
 800332c:	b085      	sub	sp, #20
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	460b      	mov	r3, r1
 8003334:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800333c:	887a      	ldrh	r2, [r7, #2]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4013      	ands	r3, r2
 8003342:	041a      	lsls	r2, r3, #16
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	43d9      	mvns	r1, r3
 8003348:	887b      	ldrh	r3, [r7, #2]
 800334a:	400b      	ands	r3, r1
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	619a      	str	r2, [r3, #24]
}
 8003352:	bf00      	nop
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003368:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <HAL_PWREx_ConfigSupply+0x70>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b04      	cmp	r3, #4
 8003372:	d00a      	beq.n	800338a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003374:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <HAL_PWREx_ConfigSupply+0x70>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	429a      	cmp	r2, r3
 8003380:	d001      	beq.n	8003386 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e01f      	b.n	80033c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	e01d      	b.n	80033c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800338a:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <HAL_PWREx_ConfigSupply+0x70>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f023 0207 	bic.w	r2, r3, #7
 8003392:	490f      	ldr	r1, [pc, #60]	; (80033d0 <HAL_PWREx_ConfigSupply+0x70>)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4313      	orrs	r3, r2
 8003398:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800339a:	f7fd ff4d 	bl	8001238 <HAL_GetTick>
 800339e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80033a0:	e009      	b.n	80033b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80033a2:	f7fd ff49 	bl	8001238 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033b0:	d901      	bls.n	80033b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e007      	b.n	80033c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80033b6:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_PWREx_ConfigSupply+0x70>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c2:	d1ee      	bne.n	80033a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	58024800 	.word	0x58024800

080033d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08c      	sub	sp, #48	; 0x30
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e39d      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 8087 	beq.w	8003502 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f4:	4b88      	ldr	r3, [pc, #544]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033fe:	4b86      	ldr	r3, [pc, #536]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003406:	2b10      	cmp	r3, #16
 8003408:	d007      	beq.n	800341a <HAL_RCC_OscConfig+0x46>
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	2b18      	cmp	r3, #24
 800340e:	d110      	bne.n	8003432 <HAL_RCC_OscConfig+0x5e>
 8003410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d10b      	bne.n	8003432 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341a:	4b7f      	ldr	r3, [pc, #508]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d06c      	beq.n	8003500 <HAL_RCC_OscConfig+0x12c>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d168      	bne.n	8003500 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e377      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343a:	d106      	bne.n	800344a <HAL_RCC_OscConfig+0x76>
 800343c:	4b76      	ldr	r3, [pc, #472]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a75      	ldr	r2, [pc, #468]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 8003442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	e02e      	b.n	80034a8 <HAL_RCC_OscConfig+0xd4>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10c      	bne.n	800346c <HAL_RCC_OscConfig+0x98>
 8003452:	4b71      	ldr	r3, [pc, #452]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a70      	ldr	r2, [pc, #448]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 8003458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	4b6e      	ldr	r3, [pc, #440]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a6d      	ldr	r2, [pc, #436]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 8003464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e01d      	b.n	80034a8 <HAL_RCC_OscConfig+0xd4>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003474:	d10c      	bne.n	8003490 <HAL_RCC_OscConfig+0xbc>
 8003476:	4b68      	ldr	r3, [pc, #416]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a67      	ldr	r2, [pc, #412]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 800347c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	4b65      	ldr	r3, [pc, #404]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a64      	ldr	r2, [pc, #400]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	e00b      	b.n	80034a8 <HAL_RCC_OscConfig+0xd4>
 8003490:	4b61      	ldr	r3, [pc, #388]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a60      	ldr	r2, [pc, #384]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 8003496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	4b5e      	ldr	r3, [pc, #376]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a5d      	ldr	r2, [pc, #372]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 80034a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d013      	beq.n	80034d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fd fec2 	bl	8001238 <HAL_GetTick>
 80034b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b8:	f7fd febe 	bl	8001238 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	; 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e32b      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034ca:	4b53      	ldr	r3, [pc, #332]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0xe4>
 80034d6:	e014      	b.n	8003502 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fd feae 	bl	8001238 <HAL_GetTick>
 80034dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e0:	f7fd feaa 	bl	8001238 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b64      	cmp	r3, #100	; 0x64
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e317      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034f2:	4b49      	ldr	r3, [pc, #292]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x10c>
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 808c 	beq.w	8003628 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003510:	4b41      	ldr	r3, [pc, #260]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003518:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800351a:	4b3f      	ldr	r3, [pc, #252]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d007      	beq.n	8003536 <HAL_RCC_OscConfig+0x162>
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	2b18      	cmp	r3, #24
 800352a:	d137      	bne.n	800359c <HAL_RCC_OscConfig+0x1c8>
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d132      	bne.n	800359c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003536:	4b38      	ldr	r3, [pc, #224]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <HAL_RCC_OscConfig+0x17a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e2e9      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800354e:	4b32      	ldr	r3, [pc, #200]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f023 0219 	bic.w	r2, r3, #25
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	492f      	ldr	r1, [pc, #188]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 800355c:	4313      	orrs	r3, r2
 800355e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003560:	f7fd fe6a 	bl	8001238 <HAL_GetTick>
 8003564:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003568:	f7fd fe66 	bl	8001238 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e2d3      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800357a:	4b27      	ldr	r3, [pc, #156]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003586:	4b24      	ldr	r3, [pc, #144]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	061b      	lsls	r3, r3, #24
 8003594:	4920      	ldr	r1, [pc, #128]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 8003596:	4313      	orrs	r3, r2
 8003598:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800359a:	e045      	b.n	8003628 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d026      	beq.n	80035f2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80035a4:	4b1c      	ldr	r3, [pc, #112]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f023 0219 	bic.w	r2, r3, #25
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	4919      	ldr	r1, [pc, #100]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b6:	f7fd fe3f 	bl	8001238 <HAL_GetTick>
 80035ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035be:	f7fd fe3b 	bl	8001238 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e2a8      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035d0:	4b11      	ldr	r3, [pc, #68]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035dc:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	061b      	lsls	r3, r3, #24
 80035ea:	490b      	ldr	r1, [pc, #44]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]
 80035f0:	e01a      	b.n	8003628 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035f2:	4b09      	ldr	r3, [pc, #36]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a08      	ldr	r2, [pc, #32]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fd fe1b 	bl	8001238 <HAL_GetTick>
 8003602:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003604:	e00a      	b.n	800361c <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003606:	f7fd fe17 	bl	8001238 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d903      	bls.n	800361c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e284      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
 8003618:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800361c:	4b96      	ldr	r3, [pc, #600]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1ee      	bne.n	8003606 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0310 	and.w	r3, r3, #16
 8003630:	2b00      	cmp	r3, #0
 8003632:	d06a      	beq.n	800370a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003634:	4b90      	ldr	r3, [pc, #576]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800363c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800363e:	4b8e      	ldr	r3, [pc, #568]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b08      	cmp	r3, #8
 8003648:	d007      	beq.n	800365a <HAL_RCC_OscConfig+0x286>
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	2b18      	cmp	r3, #24
 800364e:	d11b      	bne.n	8003688 <HAL_RCC_OscConfig+0x2b4>
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	2b01      	cmp	r3, #1
 8003658:	d116      	bne.n	8003688 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800365a:	4b87      	ldr	r3, [pc, #540]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <HAL_RCC_OscConfig+0x29e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	2b80      	cmp	r3, #128	; 0x80
 800366c:	d001      	beq.n	8003672 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e257      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003672:	4b81      	ldr	r3, [pc, #516]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	061b      	lsls	r3, r3, #24
 8003680:	497d      	ldr	r1, [pc, #500]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 8003682:	4313      	orrs	r3, r2
 8003684:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003686:	e040      	b.n	800370a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d023      	beq.n	80036d8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003690:	4b79      	ldr	r3, [pc, #484]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a78      	ldr	r2, [pc, #480]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 8003696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800369a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fd fdcc 	bl	8001238 <HAL_GetTick>
 80036a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80036a4:	f7fd fdc8 	bl	8001238 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e235      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036b6:	4b70      	ldr	r3, [pc, #448]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036c2:	4b6d      	ldr	r3, [pc, #436]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	061b      	lsls	r3, r3, #24
 80036d0:	4969      	ldr	r1, [pc, #420]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60cb      	str	r3, [r1, #12]
 80036d6:	e018      	b.n	800370a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80036d8:	4b67      	ldr	r3, [pc, #412]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a66      	ldr	r2, [pc, #408]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 80036de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fd fda8 	bl	8001238 <HAL_GetTick>
 80036e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80036ec:	f7fd fda4 	bl	8001238 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e211      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036fe:	4b5e      	ldr	r3, [pc, #376]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d036      	beq.n	8003784 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d019      	beq.n	8003752 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800371e:	4b56      	ldr	r3, [pc, #344]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 8003720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003722:	4a55      	ldr	r2, [pc, #340]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372a:	f7fd fd85 	bl	8001238 <HAL_GetTick>
 800372e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003732:	f7fd fd81 	bl	8001238 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e1ee      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003744:	4b4c      	ldr	r3, [pc, #304]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 8003746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x35e>
 8003750:	e018      	b.n	8003784 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003752:	4b49      	ldr	r3, [pc, #292]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 8003754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003756:	4a48      	ldr	r2, [pc, #288]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375e:	f7fd fd6b 	bl	8001238 <HAL_GetTick>
 8003762:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003766:	f7fd fd67 	bl	8001238 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e1d4      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003778:	4b3f      	ldr	r3, [pc, #252]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 800377a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f0      	bne.n	8003766 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b00      	cmp	r3, #0
 800378e:	d036      	beq.n	80037fe <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d019      	beq.n	80037cc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003798:	4b37      	ldr	r3, [pc, #220]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a36      	ldr	r2, [pc, #216]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 800379e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037a4:	f7fd fd48 	bl	8001238 <HAL_GetTick>
 80037a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80037ac:	f7fd fd44 	bl	8001238 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e1b1      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037be:	4b2e      	ldr	r3, [pc, #184]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0x3d8>
 80037ca:	e018      	b.n	80037fe <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037cc:	4b2a      	ldr	r3, [pc, #168]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a29      	ldr	r2, [pc, #164]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 80037d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037d8:	f7fd fd2e 	bl	8001238 <HAL_GetTick>
 80037dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80037e0:	f7fd fd2a 	bl	8001238 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e197      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037f2:	4b21      	ldr	r3, [pc, #132]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8086 	beq.w	8003918 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800380c:	4b1b      	ldr	r3, [pc, #108]	; (800387c <HAL_RCC_OscConfig+0x4a8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a1a      	ldr	r2, [pc, #104]	; (800387c <HAL_RCC_OscConfig+0x4a8>)
 8003812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003816:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003818:	f7fd fd0e 	bl	8001238 <HAL_GetTick>
 800381c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003820:	f7fd fd0a 	bl	8001238 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	; 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e177      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003832:	4b12      	ldr	r3, [pc, #72]	; (800387c <HAL_RCC_OscConfig+0x4a8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d106      	bne.n	8003854 <HAL_RCC_OscConfig+0x480>
 8003846:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	4a0b      	ldr	r2, [pc, #44]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	6713      	str	r3, [r2, #112]	; 0x70
 8003852:	e032      	b.n	80038ba <HAL_RCC_OscConfig+0x4e6>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d111      	bne.n	8003880 <HAL_RCC_OscConfig+0x4ac>
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003860:	4a05      	ldr	r2, [pc, #20]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 8003862:	f023 0301 	bic.w	r3, r3, #1
 8003866:	6713      	str	r3, [r2, #112]	; 0x70
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	4a02      	ldr	r2, [pc, #8]	; (8003878 <HAL_RCC_OscConfig+0x4a4>)
 800386e:	f023 0304 	bic.w	r3, r3, #4
 8003872:	6713      	str	r3, [r2, #112]	; 0x70
 8003874:	e021      	b.n	80038ba <HAL_RCC_OscConfig+0x4e6>
 8003876:	bf00      	nop
 8003878:	58024400 	.word	0x58024400
 800387c:	58024800 	.word	0x58024800
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b05      	cmp	r3, #5
 8003886:	d10c      	bne.n	80038a2 <HAL_RCC_OscConfig+0x4ce>
 8003888:	4b83      	ldr	r3, [pc, #524]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388c:	4a82      	ldr	r2, [pc, #520]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 800388e:	f043 0304 	orr.w	r3, r3, #4
 8003892:	6713      	str	r3, [r2, #112]	; 0x70
 8003894:	4b80      	ldr	r3, [pc, #512]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003898:	4a7f      	ldr	r2, [pc, #508]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6713      	str	r3, [r2, #112]	; 0x70
 80038a0:	e00b      	b.n	80038ba <HAL_RCC_OscConfig+0x4e6>
 80038a2:	4b7d      	ldr	r3, [pc, #500]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	4a7c      	ldr	r2, [pc, #496]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 80038a8:	f023 0301 	bic.w	r3, r3, #1
 80038ac:	6713      	str	r3, [r2, #112]	; 0x70
 80038ae:	4b7a      	ldr	r3, [pc, #488]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 80038b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b2:	4a79      	ldr	r2, [pc, #484]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 80038b4:	f023 0304 	bic.w	r3, r3, #4
 80038b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d015      	beq.n	80038ee <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c2:	f7fd fcb9 	bl	8001238 <HAL_GetTick>
 80038c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038c8:	e00a      	b.n	80038e0 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ca:	f7fd fcb5 	bl	8001238 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d8:	4293      	cmp	r3, r2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e120      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038e0:	4b6d      	ldr	r3, [pc, #436]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 80038e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0ee      	beq.n	80038ca <HAL_RCC_OscConfig+0x4f6>
 80038ec:	e014      	b.n	8003918 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ee:	f7fd fca3 	bl	8001238 <HAL_GetTick>
 80038f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038f4:	e00a      	b.n	800390c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f6:	f7fd fc9f 	bl	8001238 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	f241 3288 	movw	r2, #5000	; 0x1388
 8003904:	4293      	cmp	r3, r2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e10a      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800390c:	4b62      	ldr	r3, [pc, #392]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 800390e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1ee      	bne.n	80038f6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80ff 	beq.w	8003b20 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003922:	4b5d      	ldr	r3, [pc, #372]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800392a:	2b18      	cmp	r3, #24
 800392c:	f000 80ba 	beq.w	8003aa4 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	2b02      	cmp	r3, #2
 8003936:	f040 8095 	bne.w	8003a64 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	4b57      	ldr	r3, [pc, #348]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a56      	ldr	r2, [pc, #344]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003940:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003946:	f7fd fc77 	bl	8001238 <HAL_GetTick>
 800394a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394e:	f7fd fc73 	bl	8001238 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e0e0      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003960:	4b4d      	ldr	r3, [pc, #308]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1f0      	bne.n	800394e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800396c:	4b4a      	ldr	r3, [pc, #296]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 800396e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003970:	4b4a      	ldr	r3, [pc, #296]	; (8003a9c <HAL_RCC_OscConfig+0x6c8>)
 8003972:	4013      	ands	r3, r2
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800397c:	0112      	lsls	r2, r2, #4
 800397e:	430a      	orrs	r2, r1
 8003980:	4945      	ldr	r1, [pc, #276]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003982:	4313      	orrs	r3, r2
 8003984:	628b      	str	r3, [r1, #40]	; 0x28
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	3b01      	subs	r3, #1
 800398c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003994:	3b01      	subs	r3, #1
 8003996:	025b      	lsls	r3, r3, #9
 8003998:	b29b      	uxth	r3, r3
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a0:	3b01      	subs	r3, #1
 80039a2:	041b      	lsls	r3, r3, #16
 80039a4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	3b01      	subs	r3, #1
 80039b0:	061b      	lsls	r3, r3, #24
 80039b2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039b6:	4938      	ldr	r1, [pc, #224]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80039bc:	4b36      	ldr	r3, [pc, #216]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	4a35      	ldr	r2, [pc, #212]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 80039c2:	f023 0301 	bic.w	r3, r3, #1
 80039c6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80039c8:	4b33      	ldr	r3, [pc, #204]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 80039ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039cc:	4b34      	ldr	r3, [pc, #208]	; (8003aa0 <HAL_RCC_OscConfig+0x6cc>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80039d4:	00d2      	lsls	r2, r2, #3
 80039d6:	4930      	ldr	r1, [pc, #192]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80039dc:	4b2e      	ldr	r3, [pc, #184]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	f023 020c 	bic.w	r2, r3, #12
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	492b      	ldr	r1, [pc, #172]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80039ee:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	f023 0202 	bic.w	r2, r3, #2
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	4927      	ldr	r1, [pc, #156]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a00:	4b25      	ldr	r3, [pc, #148]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	4a24      	ldr	r2, [pc, #144]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a0c:	4b22      	ldr	r3, [pc, #136]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	4a21      	ldr	r2, [pc, #132]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a18:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	4a1e      	ldr	r2, [pc, #120]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003a24:	4b1c      	ldr	r3, [pc, #112]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	4a1b      	ldr	r2, [pc, #108]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a30:	4b19      	ldr	r3, [pc, #100]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a18      	ldr	r2, [pc, #96]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3c:	f7fd fbfc 	bl	8001238 <HAL_GetTick>
 8003a40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a44:	f7fd fbf8 	bl	8001238 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e065      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a56:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0x670>
 8003a62:	e05d      	b.n	8003b20 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a64:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a0b      	ldr	r2, [pc, #44]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7fd fbe2 	bl	8001238 <HAL_GetTick>
 8003a74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a78:	f7fd fbde 	bl	8001238 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e04b      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a8a:	4b03      	ldr	r3, [pc, #12]	; (8003a98 <HAL_RCC_OscConfig+0x6c4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x6a4>
 8003a96:	e043      	b.n	8003b20 <HAL_RCC_OscConfig+0x74c>
 8003a98:	58024400 	.word	0x58024400
 8003a9c:	fffffc0c 	.word	0xfffffc0c
 8003aa0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003aa4:	4b21      	ldr	r3, [pc, #132]	; (8003b2c <HAL_RCC_OscConfig+0x758>)
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003aaa:	4b20      	ldr	r3, [pc, #128]	; (8003b2c <HAL_RCC_OscConfig+0x758>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d031      	beq.n	8003b1c <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f003 0203 	and.w	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d12a      	bne.n	8003b1c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	091b      	lsrs	r3, r3, #4
 8003aca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d122      	bne.n	8003b1c <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d11a      	bne.n	8003b1c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	0a5b      	lsrs	r3, r3, #9
 8003aea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d111      	bne.n	8003b1c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	0c1b      	lsrs	r3, r3, #16
 8003afc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d108      	bne.n	8003b1c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	0e1b      	lsrs	r3, r3, #24
 8003b0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b16:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3730      	adds	r7, #48	; 0x30
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	58024400 	.word	0x58024400

08003b30 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e19c      	b.n	8003e7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b44:	4b8a      	ldr	r3, [pc, #552]	; (8003d70 <HAL_RCC_ClockConfig+0x240>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d910      	bls.n	8003b74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b52:	4b87      	ldr	r3, [pc, #540]	; (8003d70 <HAL_RCC_ClockConfig+0x240>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f023 020f 	bic.w	r2, r3, #15
 8003b5a:	4985      	ldr	r1, [pc, #532]	; (8003d70 <HAL_RCC_ClockConfig+0x240>)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b62:	4b83      	ldr	r3, [pc, #524]	; (8003d70 <HAL_RCC_ClockConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d001      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e184      	b.n	8003e7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d010      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	4b7b      	ldr	r3, [pc, #492]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d908      	bls.n	8003ba2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b90:	4b78      	ldr	r3, [pc, #480]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	4975      	ldr	r1, [pc, #468]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d010      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	4b70      	ldr	r3, [pc, #448]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d908      	bls.n	8003bd0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003bbe:	4b6d      	ldr	r3, [pc, #436]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	496a      	ldr	r1, [pc, #424]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d010      	beq.n	8003bfe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699a      	ldr	r2, [r3, #24]
 8003be0:	4b64      	ldr	r3, [pc, #400]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d908      	bls.n	8003bfe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003bec:	4b61      	ldr	r3, [pc, #388]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	495e      	ldr	r1, [pc, #376]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d010      	beq.n	8003c2c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69da      	ldr	r2, [r3, #28]
 8003c0e:	4b59      	ldr	r3, [pc, #356]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d908      	bls.n	8003c2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c1a:	4b56      	ldr	r3, [pc, #344]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	4953      	ldr	r1, [pc, #332]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d010      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	4b4d      	ldr	r3, [pc, #308]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d908      	bls.n	8003c5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c48:	4b4a      	ldr	r3, [pc, #296]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	f023 020f 	bic.w	r2, r3, #15
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4947      	ldr	r1, [pc, #284]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d055      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003c66:	4b43      	ldr	r3, [pc, #268]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	4940      	ldr	r1, [pc, #256]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d107      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c80:	4b3c      	ldr	r3, [pc, #240]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d121      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0f6      	b.n	8003e7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d107      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c98:	4b36      	ldr	r3, [pc, #216]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d115      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0ea      	b.n	8003e7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d107      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cb0:	4b30      	ldr	r3, [pc, #192]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d109      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e0de      	b.n	8003e7e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cc0:	4b2c      	ldr	r3, [pc, #176]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e0d6      	b.n	8003e7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cd0:	4b28      	ldr	r3, [pc, #160]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f023 0207 	bic.w	r2, r3, #7
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4925      	ldr	r1, [pc, #148]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce2:	f7fd faa9 	bl	8001238 <HAL_GetTick>
 8003ce6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce8:	e00a      	b.n	8003d00 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cea:	f7fd faa5 	bl	8001238 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e0be      	b.n	8003e7e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d00:	4b1c      	ldr	r3, [pc, #112]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d1eb      	bne.n	8003cea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d010      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	4b14      	ldr	r3, [pc, #80]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d208      	bcs.n	8003d40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f023 020f 	bic.w	r2, r3, #15
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	490e      	ldr	r1, [pc, #56]	; (8003d74 <HAL_RCC_ClockConfig+0x244>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_RCC_ClockConfig+0x240>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 030f 	and.w	r3, r3, #15
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d214      	bcs.n	8003d78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4e:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <HAL_RCC_ClockConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f023 020f 	bic.w	r2, r3, #15
 8003d56:	4906      	ldr	r1, [pc, #24]	; (8003d70 <HAL_RCC_ClockConfig+0x240>)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5e:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <HAL_RCC_ClockConfig+0x240>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d005      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e086      	b.n	8003e7e <HAL_RCC_ClockConfig+0x34e>
 8003d70:	52002000 	.word	0x52002000
 8003d74:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d010      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	4b3f      	ldr	r3, [pc, #252]	; (8003e88 <HAL_RCC_ClockConfig+0x358>)
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d208      	bcs.n	8003da6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d94:	4b3c      	ldr	r3, [pc, #240]	; (8003e88 <HAL_RCC_ClockConfig+0x358>)
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	4939      	ldr	r1, [pc, #228]	; (8003e88 <HAL_RCC_ClockConfig+0x358>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d010      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	4b34      	ldr	r3, [pc, #208]	; (8003e88 <HAL_RCC_ClockConfig+0x358>)
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d208      	bcs.n	8003dd4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003dc2:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <HAL_RCC_ClockConfig+0x358>)
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	492e      	ldr	r1, [pc, #184]	; (8003e88 <HAL_RCC_ClockConfig+0x358>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0310 	and.w	r3, r3, #16
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d010      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	699a      	ldr	r2, [r3, #24]
 8003de4:	4b28      	ldr	r3, [pc, #160]	; (8003e88 <HAL_RCC_ClockConfig+0x358>)
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d208      	bcs.n	8003e02 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003df0:	4b25      	ldr	r3, [pc, #148]	; (8003e88 <HAL_RCC_ClockConfig+0x358>)
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	4922      	ldr	r1, [pc, #136]	; (8003e88 <HAL_RCC_ClockConfig+0x358>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0320 	and.w	r3, r3, #32
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d010      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69da      	ldr	r2, [r3, #28]
 8003e12:	4b1d      	ldr	r3, [pc, #116]	; (8003e88 <HAL_RCC_ClockConfig+0x358>)
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d208      	bcs.n	8003e30 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e1e:	4b1a      	ldr	r3, [pc, #104]	; (8003e88 <HAL_RCC_ClockConfig+0x358>)
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	4917      	ldr	r1, [pc, #92]	; (8003e88 <HAL_RCC_ClockConfig+0x358>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e30:	f000 f834 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 8003e34:	4602      	mov	r2, r0
 8003e36:	4b14      	ldr	r3, [pc, #80]	; (8003e88 <HAL_RCC_ClockConfig+0x358>)
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	0a1b      	lsrs	r3, r3, #8
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	4912      	ldr	r1, [pc, #72]	; (8003e8c <HAL_RCC_ClockConfig+0x35c>)
 8003e42:	5ccb      	ldrb	r3, [r1, r3]
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e4e:	4b0e      	ldr	r3, [pc, #56]	; (8003e88 <HAL_RCC_ClockConfig+0x358>)
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	4a0d      	ldr	r2, [pc, #52]	; (8003e8c <HAL_RCC_ClockConfig+0x35c>)
 8003e58:	5cd3      	ldrb	r3, [r2, r3]
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	fa22 f303 	lsr.w	r3, r2, r3
 8003e64:	4a0a      	ldr	r2, [pc, #40]	; (8003e90 <HAL_RCC_ClockConfig+0x360>)
 8003e66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e68:	4a0a      	ldr	r2, [pc, #40]	; (8003e94 <HAL_RCC_ClockConfig+0x364>)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <HAL_RCC_ClockConfig+0x368>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fd f996 	bl	80011a4 <HAL_InitTick>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	58024400 	.word	0x58024400
 8003e8c:	08013970 	.word	0x08013970
 8003e90:	24000004 	.word	0x24000004
 8003e94:	24000000 	.word	0x24000000
 8003e98:	24000008 	.word	0x24000008

08003e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b089      	sub	sp, #36	; 0x24
 8003ea0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ea2:	4bb3      	ldr	r3, [pc, #716]	; (8004170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eaa:	2b18      	cmp	r3, #24
 8003eac:	f200 8155 	bhi.w	800415a <HAL_RCC_GetSysClockFreq+0x2be>
 8003eb0:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb6:	bf00      	nop
 8003eb8:	08003f1d 	.word	0x08003f1d
 8003ebc:	0800415b 	.word	0x0800415b
 8003ec0:	0800415b 	.word	0x0800415b
 8003ec4:	0800415b 	.word	0x0800415b
 8003ec8:	0800415b 	.word	0x0800415b
 8003ecc:	0800415b 	.word	0x0800415b
 8003ed0:	0800415b 	.word	0x0800415b
 8003ed4:	0800415b 	.word	0x0800415b
 8003ed8:	08003f43 	.word	0x08003f43
 8003edc:	0800415b 	.word	0x0800415b
 8003ee0:	0800415b 	.word	0x0800415b
 8003ee4:	0800415b 	.word	0x0800415b
 8003ee8:	0800415b 	.word	0x0800415b
 8003eec:	0800415b 	.word	0x0800415b
 8003ef0:	0800415b 	.word	0x0800415b
 8003ef4:	0800415b 	.word	0x0800415b
 8003ef8:	08003f49 	.word	0x08003f49
 8003efc:	0800415b 	.word	0x0800415b
 8003f00:	0800415b 	.word	0x0800415b
 8003f04:	0800415b 	.word	0x0800415b
 8003f08:	0800415b 	.word	0x0800415b
 8003f0c:	0800415b 	.word	0x0800415b
 8003f10:	0800415b 	.word	0x0800415b
 8003f14:	0800415b 	.word	0x0800415b
 8003f18:	08003f4f 	.word	0x08003f4f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f1c:	4b94      	ldr	r3, [pc, #592]	; (8004170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d009      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f28:	4b91      	ldr	r3, [pc, #580]	; (8004170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	08db      	lsrs	r3, r3, #3
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	4a90      	ldr	r2, [pc, #576]	; (8004174 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
 8003f38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003f3a:	e111      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f3c:	4b8d      	ldr	r3, [pc, #564]	; (8004174 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f3e:	61bb      	str	r3, [r7, #24]
    break;
 8003f40:	e10e      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003f42:	4b8d      	ldr	r3, [pc, #564]	; (8004178 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f44:	61bb      	str	r3, [r7, #24]
    break;
 8003f46:	e10b      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003f48:	4b8c      	ldr	r3, [pc, #560]	; (800417c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003f4a:	61bb      	str	r3, [r7, #24]
    break;
 8003f4c:	e108      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f4e:	4b88      	ldr	r3, [pc, #544]	; (8004170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003f58:	4b85      	ldr	r3, [pc, #532]	; (8004170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f62:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003f64:	4b82      	ldr	r3, [pc, #520]	; (8004170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003f6e:	4b80      	ldr	r3, [pc, #512]	; (8004170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f72:	08db      	lsrs	r3, r3, #3
 8003f74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	fb02 f303 	mul.w	r3, r2, r3
 8003f7e:	ee07 3a90 	vmov	s15, r3
 8003f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f86:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80e1 	beq.w	8004154 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	f000 8083 	beq.w	80040a0 <HAL_RCC_GetSysClockFreq+0x204>
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	f200 80a1 	bhi.w	80040e4 <HAL_RCC_GetSysClockFreq+0x248>
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x114>
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d056      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003fae:	e099      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fb0:	4b6f      	ldr	r3, [pc, #444]	; (8004170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0320 	and.w	r3, r3, #32
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d02d      	beq.n	8004018 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fbc:	4b6c      	ldr	r3, [pc, #432]	; (8004170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	08db      	lsrs	r3, r3, #3
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	4a6b      	ldr	r2, [pc, #428]	; (8004174 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fcc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	ee07 3a90 	vmov	s15, r3
 8003fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	ee07 3a90 	vmov	s15, r3
 8003fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fe6:	4b62      	ldr	r3, [pc, #392]	; (8004170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ffa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004180 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800400a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800400e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004012:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004016:	e087      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004022:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004184 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800402a:	4b51      	ldr	r3, [pc, #324]	; (8004170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004032:	ee07 3a90 	vmov	s15, r3
 8004036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800403a:	ed97 6a02 	vldr	s12, [r7, #8]
 800403e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004180 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800404a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800404e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800405a:	e065      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004066:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004188 <HAL_RCC_GetSysClockFreq+0x2ec>
 800406a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800406e:	4b40      	ldr	r3, [pc, #256]	; (8004170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800407e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004082:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004180 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800408a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800408e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800409e:	e043      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800418c <HAL_RCC_GetSysClockFreq+0x2f0>
 80040ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040b2:	4b2f      	ldr	r3, [pc, #188]	; (8004170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80040c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004180 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040e2:	e021      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004188 <HAL_RCC_GetSysClockFreq+0x2ec>
 80040f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040f6:	4b1e      	ldr	r3, [pc, #120]	; (8004170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004106:	ed97 6a02 	vldr	s12, [r7, #8]
 800410a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004180 <HAL_RCC_GetSysClockFreq+0x2e4>
 800410e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800411a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800411e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004126:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004128:	4b11      	ldr	r3, [pc, #68]	; (8004170 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	0a5b      	lsrs	r3, r3, #9
 800412e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004132:	3301      	adds	r3, #1
 8004134:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	ee07 3a90 	vmov	s15, r3
 800413c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004140:	edd7 6a07 	vldr	s13, [r7, #28]
 8004144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800414c:	ee17 3a90 	vmov	r3, s15
 8004150:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004152:	e005      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	61bb      	str	r3, [r7, #24]
    break;
 8004158:	e002      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800415a:	4b07      	ldr	r3, [pc, #28]	; (8004178 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800415c:	61bb      	str	r3, [r7, #24]
    break;
 800415e:	bf00      	nop
  }

  return sysclockfreq;
 8004160:	69bb      	ldr	r3, [r7, #24]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3724      	adds	r7, #36	; 0x24
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	58024400 	.word	0x58024400
 8004174:	03d09000 	.word	0x03d09000
 8004178:	003d0900 	.word	0x003d0900
 800417c:	007a1200 	.word	0x007a1200
 8004180:	46000000 	.word	0x46000000
 8004184:	4c742400 	.word	0x4c742400
 8004188:	4a742400 	.word	0x4a742400
 800418c:	4af42400 	.word	0x4af42400

08004190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004196:	f7ff fe81 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 800419a:	4602      	mov	r2, r0
 800419c:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	0a1b      	lsrs	r3, r3, #8
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	490f      	ldr	r1, [pc, #60]	; (80041e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80041a8:	5ccb      	ldrb	r3, [r1, r3]
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	fa22 f303 	lsr.w	r3, r2, r3
 80041b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041b4:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f003 030f 	and.w	r3, r3, #15
 80041bc:	4a09      	ldr	r2, [pc, #36]	; (80041e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80041be:	5cd3      	ldrb	r3, [r2, r3]
 80041c0:	f003 031f 	and.w	r3, r3, #31
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ca:	4a07      	ldr	r2, [pc, #28]	; (80041e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80041cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041ce:	4a07      	ldr	r2, [pc, #28]	; (80041ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80041d4:	4b04      	ldr	r3, [pc, #16]	; (80041e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80041d6:	681b      	ldr	r3, [r3, #0]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	58024400 	.word	0x58024400
 80041e4:	08013970 	.word	0x08013970
 80041e8:	24000004 	.word	0x24000004
 80041ec:	24000000 	.word	0x24000000

080041f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e049      	b.n	8004296 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fc fb98 	bl	800094c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3304      	adds	r3, #4
 800422c:	4619      	mov	r1, r3
 800422e:	4610      	mov	r0, r2
 8004230:	f000 fafc 	bl	800482c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d001      	beq.n	80042b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e05e      	b.n	8004376 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0201 	orr.w	r2, r2, #1
 80042ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a2b      	ldr	r2, [pc, #172]	; (8004384 <HAL_TIM_Base_Start_IT+0xe4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d02c      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x94>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e2:	d027      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x94>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a27      	ldr	r2, [pc, #156]	; (8004388 <HAL_TIM_Base_Start_IT+0xe8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d022      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x94>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a26      	ldr	r2, [pc, #152]	; (800438c <HAL_TIM_Base_Start_IT+0xec>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d01d      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x94>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a24      	ldr	r2, [pc, #144]	; (8004390 <HAL_TIM_Base_Start_IT+0xf0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d018      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x94>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a23      	ldr	r2, [pc, #140]	; (8004394 <HAL_TIM_Base_Start_IT+0xf4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d013      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x94>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a21      	ldr	r2, [pc, #132]	; (8004398 <HAL_TIM_Base_Start_IT+0xf8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00e      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x94>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a20      	ldr	r2, [pc, #128]	; (800439c <HAL_TIM_Base_Start_IT+0xfc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d009      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x94>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a1e      	ldr	r2, [pc, #120]	; (80043a0 <HAL_TIM_Base_Start_IT+0x100>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x94>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a1d      	ldr	r2, [pc, #116]	; (80043a4 <HAL_TIM_Base_Start_IT+0x104>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d115      	bne.n	8004360 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <HAL_TIM_Base_Start_IT+0x108>)
 800433c:	4013      	ands	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b06      	cmp	r3, #6
 8004344:	d015      	beq.n	8004372 <HAL_TIM_Base_Start_IT+0xd2>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800434c:	d011      	beq.n	8004372 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f042 0201 	orr.w	r2, r2, #1
 800435c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435e:	e008      	b.n	8004372 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	e000      	b.n	8004374 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004372:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40010000 	.word	0x40010000
 8004388:	40000400 	.word	0x40000400
 800438c:	40000800 	.word	0x40000800
 8004390:	40000c00 	.word	0x40000c00
 8004394:	40010400 	.word	0x40010400
 8004398:	40001800 	.word	0x40001800
 800439c:	40014000 	.word	0x40014000
 80043a0:	4000e000 	.word	0x4000e000
 80043a4:	4000e400 	.word	0x4000e400
 80043a8:	00010007 	.word	0x00010007

080043ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d122      	bne.n	8004408 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d11b      	bne.n	8004408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0202 	mvn.w	r2, #2
 80043d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f9fe 	bl	80047f0 <HAL_TIM_IC_CaptureCallback>
 80043f4:	e005      	b.n	8004402 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f9f0 	bl	80047dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fa01 	bl	8004804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b04      	cmp	r3, #4
 8004414:	d122      	bne.n	800445c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b04      	cmp	r3, #4
 8004422:	d11b      	bne.n	800445c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0204 	mvn.w	r2, #4
 800442c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2202      	movs	r2, #2
 8004432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f9d4 	bl	80047f0 <HAL_TIM_IC_CaptureCallback>
 8004448:	e005      	b.n	8004456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f9c6 	bl	80047dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f9d7 	bl	8004804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b08      	cmp	r3, #8
 8004468:	d122      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b08      	cmp	r3, #8
 8004476:	d11b      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0208 	mvn.w	r2, #8
 8004480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2204      	movs	r2, #4
 8004486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f9aa 	bl	80047f0 <HAL_TIM_IC_CaptureCallback>
 800449c:	e005      	b.n	80044aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f99c 	bl	80047dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f9ad 	bl	8004804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b10      	cmp	r3, #16
 80044bc:	d122      	bne.n	8004504 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d11b      	bne.n	8004504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0210 	mvn.w	r2, #16
 80044d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2208      	movs	r2, #8
 80044da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f980 	bl	80047f0 <HAL_TIM_IC_CaptureCallback>
 80044f0:	e005      	b.n	80044fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f972 	bl	80047dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f983 	bl	8004804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b01      	cmp	r3, #1
 8004510:	d10e      	bne.n	8004530 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b01      	cmp	r3, #1
 800451e:	d107      	bne.n	8004530 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0201 	mvn.w	r2, #1
 8004528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fc fbbe 	bl	8000cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	2b80      	cmp	r3, #128	; 0x80
 800453c:	d10e      	bne.n	800455c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004548:	2b80      	cmp	r3, #128	; 0x80
 800454a:	d107      	bne.n	800455c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fb52 	bl	8004c00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456a:	d10e      	bne.n	800458a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004576:	2b80      	cmp	r3, #128	; 0x80
 8004578:	d107      	bne.n	800458a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fb45 	bl	8004c14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004594:	2b40      	cmp	r3, #64	; 0x40
 8004596:	d10e      	bne.n	80045b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a2:	2b40      	cmp	r3, #64	; 0x40
 80045a4:	d107      	bne.n	80045b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f931 	bl	8004818 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	d10e      	bne.n	80045e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	d107      	bne.n	80045e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f06f 0220 	mvn.w	r2, #32
 80045da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fb05 	bl	8004bec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_TIM_ConfigClockSource+0x1c>
 8004604:	2302      	movs	r3, #2
 8004606:	e0dc      	b.n	80047c2 <HAL_TIM_ConfigClockSource+0x1d6>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	4b6a      	ldr	r3, [pc, #424]	; (80047cc <HAL_TIM_ConfigClockSource+0x1e0>)
 8004624:	4013      	ands	r3, r2
 8004626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800462e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a64      	ldr	r2, [pc, #400]	; (80047d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	f000 80a9 	beq.w	8004796 <HAL_TIM_ConfigClockSource+0x1aa>
 8004644:	4a62      	ldr	r2, [pc, #392]	; (80047d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	f200 80ae 	bhi.w	80047a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800464c:	4a61      	ldr	r2, [pc, #388]	; (80047d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	f000 80a1 	beq.w	8004796 <HAL_TIM_ConfigClockSource+0x1aa>
 8004654:	4a5f      	ldr	r2, [pc, #380]	; (80047d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004656:	4293      	cmp	r3, r2
 8004658:	f200 80a6 	bhi.w	80047a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800465c:	4a5e      	ldr	r2, [pc, #376]	; (80047d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800465e:	4293      	cmp	r3, r2
 8004660:	f000 8099 	beq.w	8004796 <HAL_TIM_ConfigClockSource+0x1aa>
 8004664:	4a5c      	ldr	r2, [pc, #368]	; (80047d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004666:	4293      	cmp	r3, r2
 8004668:	f200 809e 	bhi.w	80047a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800466c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004670:	f000 8091 	beq.w	8004796 <HAL_TIM_ConfigClockSource+0x1aa>
 8004674:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004678:	f200 8096 	bhi.w	80047a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800467c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004680:	f000 8089 	beq.w	8004796 <HAL_TIM_ConfigClockSource+0x1aa>
 8004684:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004688:	f200 808e 	bhi.w	80047a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800468c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004690:	d03e      	beq.n	8004710 <HAL_TIM_ConfigClockSource+0x124>
 8004692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004696:	f200 8087 	bhi.w	80047a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800469a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469e:	f000 8086 	beq.w	80047ae <HAL_TIM_ConfigClockSource+0x1c2>
 80046a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a6:	d87f      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80046a8:	2b70      	cmp	r3, #112	; 0x70
 80046aa:	d01a      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0xf6>
 80046ac:	2b70      	cmp	r3, #112	; 0x70
 80046ae:	d87b      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80046b0:	2b60      	cmp	r3, #96	; 0x60
 80046b2:	d050      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x16a>
 80046b4:	2b60      	cmp	r3, #96	; 0x60
 80046b6:	d877      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80046b8:	2b50      	cmp	r3, #80	; 0x50
 80046ba:	d03c      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x14a>
 80046bc:	2b50      	cmp	r3, #80	; 0x50
 80046be:	d873      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d058      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x18a>
 80046c4:	2b40      	cmp	r3, #64	; 0x40
 80046c6:	d86f      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80046c8:	2b30      	cmp	r3, #48	; 0x30
 80046ca:	d064      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x1aa>
 80046cc:	2b30      	cmp	r3, #48	; 0x30
 80046ce:	d86b      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d060      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x1aa>
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d867      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d05c      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x1aa>
 80046dc:	2b10      	cmp	r3, #16
 80046de:	d05a      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x1aa>
 80046e0:	e062      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6818      	ldr	r0, [r3, #0]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	6899      	ldr	r1, [r3, #8]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f000 f9bf 	bl	8004a74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004704:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	609a      	str	r2, [r3, #8]
      break;
 800470e:	e04f      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6818      	ldr	r0, [r3, #0]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	6899      	ldr	r1, [r3, #8]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f000 f9a8 	bl	8004a74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004732:	609a      	str	r2, [r3, #8]
      break;
 8004734:	e03c      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6859      	ldr	r1, [r3, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	461a      	mov	r2, r3
 8004744:	f000 f918 	bl	8004978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2150      	movs	r1, #80	; 0x50
 800474e:	4618      	mov	r0, r3
 8004750:	f000 f972 	bl	8004a38 <TIM_ITRx_SetConfig>
      break;
 8004754:	e02c      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	6859      	ldr	r1, [r3, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	461a      	mov	r2, r3
 8004764:	f000 f937 	bl	80049d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2160      	movs	r1, #96	; 0x60
 800476e:	4618      	mov	r0, r3
 8004770:	f000 f962 	bl	8004a38 <TIM_ITRx_SetConfig>
      break;
 8004774:	e01c      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6818      	ldr	r0, [r3, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6859      	ldr	r1, [r3, #4]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	461a      	mov	r2, r3
 8004784:	f000 f8f8 	bl	8004978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2140      	movs	r1, #64	; 0x40
 800478e:	4618      	mov	r0, r3
 8004790:	f000 f952 	bl	8004a38 <TIM_ITRx_SetConfig>
      break;
 8004794:	e00c      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4619      	mov	r1, r3
 80047a0:	4610      	mov	r0, r2
 80047a2:	f000 f949 	bl	8004a38 <TIM_ITRx_SetConfig>
      break;
 80047a6:	e003      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	73fb      	strb	r3, [r7, #15]
      break;
 80047ac:	e000      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80047ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	ffceff88 	.word	0xffceff88
 80047d0:	00100040 	.word	0x00100040
 80047d4:	00100030 	.word	0x00100030
 80047d8:	00100020 	.word	0x00100020

080047dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a44      	ldr	r2, [pc, #272]	; (8004950 <TIM_Base_SetConfig+0x124>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d013      	beq.n	800486c <TIM_Base_SetConfig+0x40>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484a:	d00f      	beq.n	800486c <TIM_Base_SetConfig+0x40>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a41      	ldr	r2, [pc, #260]	; (8004954 <TIM_Base_SetConfig+0x128>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00b      	beq.n	800486c <TIM_Base_SetConfig+0x40>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a40      	ldr	r2, [pc, #256]	; (8004958 <TIM_Base_SetConfig+0x12c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d007      	beq.n	800486c <TIM_Base_SetConfig+0x40>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a3f      	ldr	r2, [pc, #252]	; (800495c <TIM_Base_SetConfig+0x130>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d003      	beq.n	800486c <TIM_Base_SetConfig+0x40>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a3e      	ldr	r2, [pc, #248]	; (8004960 <TIM_Base_SetConfig+0x134>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d108      	bne.n	800487e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a33      	ldr	r2, [pc, #204]	; (8004950 <TIM_Base_SetConfig+0x124>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d027      	beq.n	80048d6 <TIM_Base_SetConfig+0xaa>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800488c:	d023      	beq.n	80048d6 <TIM_Base_SetConfig+0xaa>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a30      	ldr	r2, [pc, #192]	; (8004954 <TIM_Base_SetConfig+0x128>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d01f      	beq.n	80048d6 <TIM_Base_SetConfig+0xaa>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a2f      	ldr	r2, [pc, #188]	; (8004958 <TIM_Base_SetConfig+0x12c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d01b      	beq.n	80048d6 <TIM_Base_SetConfig+0xaa>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a2e      	ldr	r2, [pc, #184]	; (800495c <TIM_Base_SetConfig+0x130>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d017      	beq.n	80048d6 <TIM_Base_SetConfig+0xaa>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a2d      	ldr	r2, [pc, #180]	; (8004960 <TIM_Base_SetConfig+0x134>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <TIM_Base_SetConfig+0xaa>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a2c      	ldr	r2, [pc, #176]	; (8004964 <TIM_Base_SetConfig+0x138>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00f      	beq.n	80048d6 <TIM_Base_SetConfig+0xaa>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a2b      	ldr	r2, [pc, #172]	; (8004968 <TIM_Base_SetConfig+0x13c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00b      	beq.n	80048d6 <TIM_Base_SetConfig+0xaa>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a2a      	ldr	r2, [pc, #168]	; (800496c <TIM_Base_SetConfig+0x140>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d007      	beq.n	80048d6 <TIM_Base_SetConfig+0xaa>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a29      	ldr	r2, [pc, #164]	; (8004970 <TIM_Base_SetConfig+0x144>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d003      	beq.n	80048d6 <TIM_Base_SetConfig+0xaa>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a28      	ldr	r2, [pc, #160]	; (8004974 <TIM_Base_SetConfig+0x148>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d108      	bne.n	80048e8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a10      	ldr	r2, [pc, #64]	; (8004950 <TIM_Base_SetConfig+0x124>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00f      	beq.n	8004934 <TIM_Base_SetConfig+0x108>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a12      	ldr	r2, [pc, #72]	; (8004960 <TIM_Base_SetConfig+0x134>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00b      	beq.n	8004934 <TIM_Base_SetConfig+0x108>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a11      	ldr	r2, [pc, #68]	; (8004964 <TIM_Base_SetConfig+0x138>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d007      	beq.n	8004934 <TIM_Base_SetConfig+0x108>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a10      	ldr	r2, [pc, #64]	; (8004968 <TIM_Base_SetConfig+0x13c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d003      	beq.n	8004934 <TIM_Base_SetConfig+0x108>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a0f      	ldr	r2, [pc, #60]	; (800496c <TIM_Base_SetConfig+0x140>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d103      	bne.n	800493c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	615a      	str	r2, [r3, #20]
}
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40010000 	.word	0x40010000
 8004954:	40000400 	.word	0x40000400
 8004958:	40000800 	.word	0x40000800
 800495c:	40000c00 	.word	0x40000c00
 8004960:	40010400 	.word	0x40010400
 8004964:	40014000 	.word	0x40014000
 8004968:	40014400 	.word	0x40014400
 800496c:	40014800 	.word	0x40014800
 8004970:	4000e000 	.word	0x4000e000
 8004974:	4000e400 	.word	0x4000e400

08004978 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	f023 0201 	bic.w	r2, r3, #1
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f023 030a 	bic.w	r3, r3, #10
 80049b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	621a      	str	r2, [r3, #32]
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b087      	sub	sp, #28
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	60b9      	str	r1, [r7, #8]
 80049e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	f023 0210 	bic.w	r2, r3, #16
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	031b      	lsls	r3, r3, #12
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	621a      	str	r2, [r3, #32]
}
 8004a2a:	bf00      	nop
 8004a2c:	371c      	adds	r7, #28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
	...

08004a38 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <TIM_ITRx_SetConfig+0x38>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f043 0307 	orr.w	r3, r3, #7
 8004a5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	609a      	str	r2, [r3, #8]
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	ffcfff8f 	.word	0xffcfff8f

08004a74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	021a      	lsls	r2, r3, #8
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	431a      	orrs	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	609a      	str	r2, [r3, #8]
}
 8004aa8:	bf00      	nop
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e077      	b.n	8004bbc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a35      	ldr	r2, [pc, #212]	; (8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d004      	beq.n	8004b00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a34      	ldr	r2, [pc, #208]	; (8004bcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d108      	bne.n	8004b12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a25      	ldr	r2, [pc, #148]	; (8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d02c      	beq.n	8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3e:	d027      	beq.n	8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a22      	ldr	r2, [pc, #136]	; (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d022      	beq.n	8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a21      	ldr	r2, [pc, #132]	; (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d01d      	beq.n	8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a1f      	ldr	r2, [pc, #124]	; (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d018      	beq.n	8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1a      	ldr	r2, [pc, #104]	; (8004bcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d013      	beq.n	8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1b      	ldr	r2, [pc, #108]	; (8004bdc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00e      	beq.n	8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1a      	ldr	r2, [pc, #104]	; (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d009      	beq.n	8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d004      	beq.n	8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a17      	ldr	r2, [pc, #92]	; (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d10c      	bne.n	8004baa <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	40010000 	.word	0x40010000
 8004bcc:	40010400 	.word	0x40010400
 8004bd0:	40000400 	.word	0x40000400
 8004bd4:	40000800 	.word	0x40000800
 8004bd8:	40000c00 	.word	0x40000c00
 8004bdc:	40001800 	.word	0x40001800
 8004be0:	40014000 	.word	0x40014000
 8004be4:	4000e000 	.word	0x4000e000
 8004be8:	4000e400 	.word	0x4000e400

08004bec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004c2e:	4b8d      	ldr	r3, [pc, #564]	; (8004e64 <MX_LWIP_Init+0x23c>)
 8004c30:	22c0      	movs	r2, #192	; 0xc0
 8004c32:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004c34:	4b8b      	ldr	r3, [pc, #556]	; (8004e64 <MX_LWIP_Init+0x23c>)
 8004c36:	22a8      	movs	r2, #168	; 0xa8
 8004c38:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004c3a:	4b8a      	ldr	r3, [pc, #552]	; (8004e64 <MX_LWIP_Init+0x23c>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8004c40:	4b88      	ldr	r3, [pc, #544]	; (8004e64 <MX_LWIP_Init+0x23c>)
 8004c42:	227b      	movs	r2, #123	; 0x7b
 8004c44:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004c46:	4b88      	ldr	r3, [pc, #544]	; (8004e68 <MX_LWIP_Init+0x240>)
 8004c48:	22ff      	movs	r2, #255	; 0xff
 8004c4a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004c4c:	4b86      	ldr	r3, [pc, #536]	; (8004e68 <MX_LWIP_Init+0x240>)
 8004c4e:	22ff      	movs	r2, #255	; 0xff
 8004c50:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004c52:	4b85      	ldr	r3, [pc, #532]	; (8004e68 <MX_LWIP_Init+0x240>)
 8004c54:	22ff      	movs	r2, #255	; 0xff
 8004c56:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004c58:	4b83      	ldr	r3, [pc, #524]	; (8004e68 <MX_LWIP_Init+0x240>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004c5e:	4b83      	ldr	r3, [pc, #524]	; (8004e6c <MX_LWIP_Init+0x244>)
 8004c60:	22c0      	movs	r2, #192	; 0xc0
 8004c62:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004c64:	4b81      	ldr	r3, [pc, #516]	; (8004e6c <MX_LWIP_Init+0x244>)
 8004c66:	22a8      	movs	r2, #168	; 0xa8
 8004c68:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004c6a:	4b80      	ldr	r3, [pc, #512]	; (8004e6c <MX_LWIP_Init+0x244>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004c70:	4b7e      	ldr	r3, [pc, #504]	; (8004e6c <MX_LWIP_Init+0x244>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004c76:	f000 fde7 	bl	8005848 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004c7a:	4b7a      	ldr	r3, [pc, #488]	; (8004e64 <MX_LWIP_Init+0x23c>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	061a      	lsls	r2, r3, #24
 8004c80:	4b78      	ldr	r3, [pc, #480]	; (8004e64 <MX_LWIP_Init+0x23c>)
 8004c82:	785b      	ldrb	r3, [r3, #1]
 8004c84:	041b      	lsls	r3, r3, #16
 8004c86:	431a      	orrs	r2, r3
 8004c88:	4b76      	ldr	r3, [pc, #472]	; (8004e64 <MX_LWIP_Init+0x23c>)
 8004c8a:	789b      	ldrb	r3, [r3, #2]
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	4a74      	ldr	r2, [pc, #464]	; (8004e64 <MX_LWIP_Init+0x23c>)
 8004c92:	78d2      	ldrb	r2, [r2, #3]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	061a      	lsls	r2, r3, #24
 8004c98:	4b72      	ldr	r3, [pc, #456]	; (8004e64 <MX_LWIP_Init+0x23c>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	0619      	lsls	r1, r3, #24
 8004c9e:	4b71      	ldr	r3, [pc, #452]	; (8004e64 <MX_LWIP_Init+0x23c>)
 8004ca0:	785b      	ldrb	r3, [r3, #1]
 8004ca2:	041b      	lsls	r3, r3, #16
 8004ca4:	4319      	orrs	r1, r3
 8004ca6:	4b6f      	ldr	r3, [pc, #444]	; (8004e64 <MX_LWIP_Init+0x23c>)
 8004ca8:	789b      	ldrb	r3, [r3, #2]
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	430b      	orrs	r3, r1
 8004cae:	496d      	ldr	r1, [pc, #436]	; (8004e64 <MX_LWIP_Init+0x23c>)
 8004cb0:	78c9      	ldrb	r1, [r1, #3]
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	4b69      	ldr	r3, [pc, #420]	; (8004e64 <MX_LWIP_Init+0x23c>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	0619      	lsls	r1, r3, #24
 8004cc2:	4b68      	ldr	r3, [pc, #416]	; (8004e64 <MX_LWIP_Init+0x23c>)
 8004cc4:	785b      	ldrb	r3, [r3, #1]
 8004cc6:	041b      	lsls	r3, r3, #16
 8004cc8:	4319      	orrs	r1, r3
 8004cca:	4b66      	ldr	r3, [pc, #408]	; (8004e64 <MX_LWIP_Init+0x23c>)
 8004ccc:	789b      	ldrb	r3, [r3, #2]
 8004cce:	021b      	lsls	r3, r3, #8
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	4964      	ldr	r1, [pc, #400]	; (8004e64 <MX_LWIP_Init+0x23c>)
 8004cd4:	78c9      	ldrb	r1, [r1, #3]
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	0a1b      	lsrs	r3, r3, #8
 8004cda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	4b60      	ldr	r3, [pc, #384]	; (8004e64 <MX_LWIP_Init+0x23c>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	0619      	lsls	r1, r3, #24
 8004ce6:	4b5f      	ldr	r3, [pc, #380]	; (8004e64 <MX_LWIP_Init+0x23c>)
 8004ce8:	785b      	ldrb	r3, [r3, #1]
 8004cea:	041b      	lsls	r3, r3, #16
 8004cec:	4319      	orrs	r1, r3
 8004cee:	4b5d      	ldr	r3, [pc, #372]	; (8004e64 <MX_LWIP_Init+0x23c>)
 8004cf0:	789b      	ldrb	r3, [r3, #2]
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	495b      	ldr	r1, [pc, #364]	; (8004e64 <MX_LWIP_Init+0x23c>)
 8004cf8:	78c9      	ldrb	r1, [r1, #3]
 8004cfa:	430b      	orrs	r3, r1
 8004cfc:	0e1b      	lsrs	r3, r3, #24
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	4a5b      	ldr	r2, [pc, #364]	; (8004e70 <MX_LWIP_Init+0x248>)
 8004d02:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004d04:	4b58      	ldr	r3, [pc, #352]	; (8004e68 <MX_LWIP_Init+0x240>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	061a      	lsls	r2, r3, #24
 8004d0a:	4b57      	ldr	r3, [pc, #348]	; (8004e68 <MX_LWIP_Init+0x240>)
 8004d0c:	785b      	ldrb	r3, [r3, #1]
 8004d0e:	041b      	lsls	r3, r3, #16
 8004d10:	431a      	orrs	r2, r3
 8004d12:	4b55      	ldr	r3, [pc, #340]	; (8004e68 <MX_LWIP_Init+0x240>)
 8004d14:	789b      	ldrb	r3, [r3, #2]
 8004d16:	021b      	lsls	r3, r3, #8
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	4a53      	ldr	r2, [pc, #332]	; (8004e68 <MX_LWIP_Init+0x240>)
 8004d1c:	78d2      	ldrb	r2, [r2, #3]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	061a      	lsls	r2, r3, #24
 8004d22:	4b51      	ldr	r3, [pc, #324]	; (8004e68 <MX_LWIP_Init+0x240>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	0619      	lsls	r1, r3, #24
 8004d28:	4b4f      	ldr	r3, [pc, #316]	; (8004e68 <MX_LWIP_Init+0x240>)
 8004d2a:	785b      	ldrb	r3, [r3, #1]
 8004d2c:	041b      	lsls	r3, r3, #16
 8004d2e:	4319      	orrs	r1, r3
 8004d30:	4b4d      	ldr	r3, [pc, #308]	; (8004e68 <MX_LWIP_Init+0x240>)
 8004d32:	789b      	ldrb	r3, [r3, #2]
 8004d34:	021b      	lsls	r3, r3, #8
 8004d36:	430b      	orrs	r3, r1
 8004d38:	494b      	ldr	r1, [pc, #300]	; (8004e68 <MX_LWIP_Init+0x240>)
 8004d3a:	78c9      	ldrb	r1, [r1, #3]
 8004d3c:	430b      	orrs	r3, r1
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d44:	431a      	orrs	r2, r3
 8004d46:	4b48      	ldr	r3, [pc, #288]	; (8004e68 <MX_LWIP_Init+0x240>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	0619      	lsls	r1, r3, #24
 8004d4c:	4b46      	ldr	r3, [pc, #280]	; (8004e68 <MX_LWIP_Init+0x240>)
 8004d4e:	785b      	ldrb	r3, [r3, #1]
 8004d50:	041b      	lsls	r3, r3, #16
 8004d52:	4319      	orrs	r1, r3
 8004d54:	4b44      	ldr	r3, [pc, #272]	; (8004e68 <MX_LWIP_Init+0x240>)
 8004d56:	789b      	ldrb	r3, [r3, #2]
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	4942      	ldr	r1, [pc, #264]	; (8004e68 <MX_LWIP_Init+0x240>)
 8004d5e:	78c9      	ldrb	r1, [r1, #3]
 8004d60:	430b      	orrs	r3, r1
 8004d62:	0a1b      	lsrs	r3, r3, #8
 8004d64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	4b3f      	ldr	r3, [pc, #252]	; (8004e68 <MX_LWIP_Init+0x240>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	0619      	lsls	r1, r3, #24
 8004d70:	4b3d      	ldr	r3, [pc, #244]	; (8004e68 <MX_LWIP_Init+0x240>)
 8004d72:	785b      	ldrb	r3, [r3, #1]
 8004d74:	041b      	lsls	r3, r3, #16
 8004d76:	4319      	orrs	r1, r3
 8004d78:	4b3b      	ldr	r3, [pc, #236]	; (8004e68 <MX_LWIP_Init+0x240>)
 8004d7a:	789b      	ldrb	r3, [r3, #2]
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	4939      	ldr	r1, [pc, #228]	; (8004e68 <MX_LWIP_Init+0x240>)
 8004d82:	78c9      	ldrb	r1, [r1, #3]
 8004d84:	430b      	orrs	r3, r1
 8004d86:	0e1b      	lsrs	r3, r3, #24
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	4a3a      	ldr	r2, [pc, #232]	; (8004e74 <MX_LWIP_Init+0x24c>)
 8004d8c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004d8e:	4b37      	ldr	r3, [pc, #220]	; (8004e6c <MX_LWIP_Init+0x244>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	061a      	lsls	r2, r3, #24
 8004d94:	4b35      	ldr	r3, [pc, #212]	; (8004e6c <MX_LWIP_Init+0x244>)
 8004d96:	785b      	ldrb	r3, [r3, #1]
 8004d98:	041b      	lsls	r3, r3, #16
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	4b33      	ldr	r3, [pc, #204]	; (8004e6c <MX_LWIP_Init+0x244>)
 8004d9e:	789b      	ldrb	r3, [r3, #2]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	4313      	orrs	r3, r2
 8004da4:	4a31      	ldr	r2, [pc, #196]	; (8004e6c <MX_LWIP_Init+0x244>)
 8004da6:	78d2      	ldrb	r2, [r2, #3]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	061a      	lsls	r2, r3, #24
 8004dac:	4b2f      	ldr	r3, [pc, #188]	; (8004e6c <MX_LWIP_Init+0x244>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	0619      	lsls	r1, r3, #24
 8004db2:	4b2e      	ldr	r3, [pc, #184]	; (8004e6c <MX_LWIP_Init+0x244>)
 8004db4:	785b      	ldrb	r3, [r3, #1]
 8004db6:	041b      	lsls	r3, r3, #16
 8004db8:	4319      	orrs	r1, r3
 8004dba:	4b2c      	ldr	r3, [pc, #176]	; (8004e6c <MX_LWIP_Init+0x244>)
 8004dbc:	789b      	ldrb	r3, [r3, #2]
 8004dbe:	021b      	lsls	r3, r3, #8
 8004dc0:	430b      	orrs	r3, r1
 8004dc2:	492a      	ldr	r1, [pc, #168]	; (8004e6c <MX_LWIP_Init+0x244>)
 8004dc4:	78c9      	ldrb	r1, [r1, #3]
 8004dc6:	430b      	orrs	r3, r1
 8004dc8:	021b      	lsls	r3, r3, #8
 8004dca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	4b26      	ldr	r3, [pc, #152]	; (8004e6c <MX_LWIP_Init+0x244>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	0619      	lsls	r1, r3, #24
 8004dd6:	4b25      	ldr	r3, [pc, #148]	; (8004e6c <MX_LWIP_Init+0x244>)
 8004dd8:	785b      	ldrb	r3, [r3, #1]
 8004dda:	041b      	lsls	r3, r3, #16
 8004ddc:	4319      	orrs	r1, r3
 8004dde:	4b23      	ldr	r3, [pc, #140]	; (8004e6c <MX_LWIP_Init+0x244>)
 8004de0:	789b      	ldrb	r3, [r3, #2]
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	430b      	orrs	r3, r1
 8004de6:	4921      	ldr	r1, [pc, #132]	; (8004e6c <MX_LWIP_Init+0x244>)
 8004de8:	78c9      	ldrb	r1, [r1, #3]
 8004dea:	430b      	orrs	r3, r1
 8004dec:	0a1b      	lsrs	r3, r3, #8
 8004dee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004df2:	431a      	orrs	r2, r3
 8004df4:	4b1d      	ldr	r3, [pc, #116]	; (8004e6c <MX_LWIP_Init+0x244>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	0619      	lsls	r1, r3, #24
 8004dfa:	4b1c      	ldr	r3, [pc, #112]	; (8004e6c <MX_LWIP_Init+0x244>)
 8004dfc:	785b      	ldrb	r3, [r3, #1]
 8004dfe:	041b      	lsls	r3, r3, #16
 8004e00:	4319      	orrs	r1, r3
 8004e02:	4b1a      	ldr	r3, [pc, #104]	; (8004e6c <MX_LWIP_Init+0x244>)
 8004e04:	789b      	ldrb	r3, [r3, #2]
 8004e06:	021b      	lsls	r3, r3, #8
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	4918      	ldr	r1, [pc, #96]	; (8004e6c <MX_LWIP_Init+0x244>)
 8004e0c:	78c9      	ldrb	r1, [r1, #3]
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	0e1b      	lsrs	r3, r3, #24
 8004e12:	4313      	orrs	r3, r2
 8004e14:	4a18      	ldr	r2, [pc, #96]	; (8004e78 <MX_LWIP_Init+0x250>)
 8004e16:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004e18:	4b18      	ldr	r3, [pc, #96]	; (8004e7c <MX_LWIP_Init+0x254>)
 8004e1a:	9302      	str	r3, [sp, #8]
 8004e1c:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <MX_LWIP_Init+0x258>)
 8004e1e:	9301      	str	r3, [sp, #4]
 8004e20:	2300      	movs	r3, #0
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	4b14      	ldr	r3, [pc, #80]	; (8004e78 <MX_LWIP_Init+0x250>)
 8004e26:	4a13      	ldr	r2, [pc, #76]	; (8004e74 <MX_LWIP_Init+0x24c>)
 8004e28:	4911      	ldr	r1, [pc, #68]	; (8004e70 <MX_LWIP_Init+0x248>)
 8004e2a:	4816      	ldr	r0, [pc, #88]	; (8004e84 <MX_LWIP_Init+0x25c>)
 8004e2c:	f001 f9f4 	bl	8006218 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004e30:	4814      	ldr	r0, [pc, #80]	; (8004e84 <MX_LWIP_Init+0x25c>)
 8004e32:	f001 fba3 	bl	800657c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004e36:	4b13      	ldr	r3, [pc, #76]	; (8004e84 <MX_LWIP_Init+0x25c>)
 8004e38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e3c:	089b      	lsrs	r3, r3, #2
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004e48:	480e      	ldr	r0, [pc, #56]	; (8004e84 <MX_LWIP_Init+0x25c>)
 8004e4a:	f001 fba7 	bl	800659c <netif_set_up>
 8004e4e:	e002      	b.n	8004e56 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004e50:	480c      	ldr	r0, [pc, #48]	; (8004e84 <MX_LWIP_Init+0x25c>)
 8004e52:	f001 fc0f 	bl	8006674 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004e56:	490c      	ldr	r1, [pc, #48]	; (8004e88 <MX_LWIP_Init+0x260>)
 8004e58:	480a      	ldr	r0, [pc, #40]	; (8004e84 <MX_LWIP_Init+0x25c>)
 8004e5a:	f001 fca1 	bl	80067a0 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004e5e:	bf00      	nop
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	240001b0 	.word	0x240001b0
 8004e68:	240001b4 	.word	0x240001b4
 8004e6c:	240001b8 	.word	0x240001b8
 8004e70:	240001a4 	.word	0x240001a4
 8004e74:	240001a8 	.word	0x240001a8
 8004e78:	240001ac 	.word	0x240001ac
 8004e7c:	0800f88d 	.word	0x0800f88d
 8004e80:	08005145 	.word	0x08005145
 8004e84:	24000170 	.word	0x24000170
 8004e88:	08004e8d 	.word	0x08004e8d

08004e8c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004eac:	4b3f      	ldr	r3, [pc, #252]	; (8004fac <low_level_init+0x10c>)
 8004eae:	4a40      	ldr	r2, [pc, #256]	; (8004fb0 <low_level_init+0x110>)
 8004eb0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004eb6:	2380      	movs	r3, #128	; 0x80
 8004eb8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004eba:	23e1      	movs	r3, #225	; 0xe1
 8004ebc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004eca:	4a38      	ldr	r2, [pc, #224]	; (8004fac <low_level_init+0x10c>)
 8004ecc:	f107 0308 	add.w	r3, r7, #8
 8004ed0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004ed2:	4b36      	ldr	r3, [pc, #216]	; (8004fac <low_level_init+0x10c>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004ed8:	4b34      	ldr	r3, [pc, #208]	; (8004fac <low_level_init+0x10c>)
 8004eda:	4a36      	ldr	r2, [pc, #216]	; (8004fb4 <low_level_init+0x114>)
 8004edc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004ede:	4b33      	ldr	r3, [pc, #204]	; (8004fac <low_level_init+0x10c>)
 8004ee0:	4a35      	ldr	r2, [pc, #212]	; (8004fb8 <low_level_init+0x118>)
 8004ee2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8004ee4:	4b31      	ldr	r3, [pc, #196]	; (8004fac <low_level_init+0x10c>)
 8004ee6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004eea:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004eec:	482f      	ldr	r0, [pc, #188]	; (8004fac <low_level_init+0x10c>)
 8004eee:	f7fc fb4f 	bl	8001590 <HAL_ETH_Init>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004ef6:	2238      	movs	r2, #56	; 0x38
 8004ef8:	2100      	movs	r1, #0
 8004efa:	4830      	ldr	r0, [pc, #192]	; (8004fbc <low_level_init+0x11c>)
 8004efc:	f00a fdf8 	bl	800faf0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004f00:	4b2e      	ldr	r3, [pc, #184]	; (8004fbc <low_level_init+0x11c>)
 8004f02:	2221      	movs	r2, #33	; 0x21
 8004f04:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004f06:	4b2d      	ldr	r3, [pc, #180]	; (8004fbc <low_level_init+0x11c>)
 8004f08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004f0c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004f0e:	4b2b      	ldr	r3, [pc, #172]	; (8004fbc <low_level_init+0x11c>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004f14:	482a      	ldr	r0, [pc, #168]	; (8004fc0 <low_level_init+0x120>)
 8004f16:	f001 f847 	bl	8005fa8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2206      	movs	r2, #6
 8004f1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004f22:	4b22      	ldr	r3, [pc, #136]	; (8004fac <low_level_init+0x10c>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	781a      	ldrb	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004f2e:	4b1f      	ldr	r3, [pc, #124]	; (8004fac <low_level_init+0x10c>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	785a      	ldrb	r2, [r3, #1]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004f3a:	4b1c      	ldr	r3, [pc, #112]	; (8004fac <low_level_init+0x10c>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	789a      	ldrb	r2, [r3, #2]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004f46:	4b19      	ldr	r3, [pc, #100]	; (8004fac <low_level_init+0x10c>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	78da      	ldrb	r2, [r3, #3]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004f52:	4b16      	ldr	r3, [pc, #88]	; (8004fac <low_level_init+0x10c>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	791a      	ldrb	r2, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004f5e:	4b13      	ldr	r3, [pc, #76]	; (8004fac <low_level_init+0x10c>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	795a      	ldrb	r2, [r3, #5]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004f70:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f78:	f043 030a 	orr.w	r3, r3, #10
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004f84:	490f      	ldr	r1, [pc, #60]	; (8004fc4 <low_level_init+0x124>)
 8004f86:	4810      	ldr	r0, [pc, #64]	; (8004fc8 <low_level_init+0x128>)
 8004f88:	f7fb ff6f 	bl	8000e6a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004f8c:	480e      	ldr	r0, [pc, #56]	; (8004fc8 <low_level_init+0x128>)
 8004f8e:	f7fb ff9e 	bl	8000ece <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d103      	bne.n	8004fa0 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 fa47 	bl	800542c <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004f9e:	e001      	b.n	8004fa4 <low_level_init+0x104>
    Error_Handler();
 8004fa0:	f7fb fcb4 	bl	800090c <Error_Handler>
}
 8004fa4:	bf00      	nop
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	240001c4 	.word	0x240001c4
 8004fb0:	40028000 	.word	0x40028000
 8004fb4:	30000200 	.word	0x30000200
 8004fb8:	30000000 	.word	0x30000000
 8004fbc:	24000274 	.word	0x24000274
 8004fc0:	08013980 	.word	0x08013980
 8004fc4:	24000010 	.word	0x24000010
 8004fc8:	240002ac 	.word	0x240002ac

08004fcc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b092      	sub	sp, #72	; 0x48
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004fe4:	f107 030c 	add.w	r3, r7, #12
 8004fe8:	2230      	movs	r2, #48	; 0x30
 8004fea:	2100      	movs	r1, #0
 8004fec:	4618      	mov	r0, r3
 8004fee:	f00a fd7f 	bl	800faf0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004ff2:	f107 030c 	add.w	r3, r7, #12
 8004ff6:	2230      	movs	r2, #48	; 0x30
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f00a fd78 	bl	800faf0 <memset>

  for(q = p; q != NULL; q = q->next)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	643b      	str	r3, [r7, #64]	; 0x40
 8005004:	e045      	b.n	8005092 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005008:	2b03      	cmp	r3, #3
 800500a:	d902      	bls.n	8005012 <low_level_output+0x46>
      return ERR_IF;
 800500c:	f06f 030b 	mvn.w	r3, #11
 8005010:	e055      	b.n	80050be <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005014:	6859      	ldr	r1, [r3, #4]
 8005016:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005018:	4613      	mov	r3, r2
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	3348      	adds	r3, #72	; 0x48
 8005022:	443b      	add	r3, r7
 8005024:	3b3c      	subs	r3, #60	; 0x3c
 8005026:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800502a:	895b      	ldrh	r3, [r3, #10]
 800502c:	4619      	mov	r1, r3
 800502e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005030:	4613      	mov	r3, r2
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	3348      	adds	r3, #72	; 0x48
 800503a:	443b      	add	r3, r7
 800503c:	3b38      	subs	r3, #56	; 0x38
 800503e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005042:	2b00      	cmp	r3, #0
 8005044:	d011      	beq.n	800506a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005048:	1e5a      	subs	r2, r3, #1
 800504a:	f107 000c 	add.w	r0, r7, #12
 800504e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005050:	460b      	mov	r3, r1
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	440b      	add	r3, r1
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	18c1      	adds	r1, r0, r3
 800505a:	4613      	mov	r3, r2
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	3348      	adds	r3, #72	; 0x48
 8005064:	443b      	add	r3, r7
 8005066:	3b34      	subs	r3, #52	; 0x34
 8005068:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800506a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005072:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005074:	4613      	mov	r3, r2
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	3348      	adds	r3, #72	; 0x48
 800507e:	443b      	add	r3, r7
 8005080:	3b34      	subs	r3, #52	; 0x34
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005088:	3301      	adds	r3, #1
 800508a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800508c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	643b      	str	r3, [r7, #64]	; 0x40
 8005092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1b6      	bne.n	8005006 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	891b      	ldrh	r3, [r3, #8]
 800509c:	461a      	mov	r2, r3
 800509e:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <low_level_output+0xfc>)
 80050a0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80050a2:	4a09      	ldr	r2, [pc, #36]	; (80050c8 <low_level_output+0xfc>)
 80050a4:	f107 030c 	add.w	r3, r7, #12
 80050a8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80050aa:	4a07      	ldr	r2, [pc, #28]	; (80050c8 <low_level_output+0xfc>)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80050b0:	2214      	movs	r2, #20
 80050b2:	4905      	ldr	r1, [pc, #20]	; (80050c8 <low_level_output+0xfc>)
 80050b4:	4805      	ldr	r0, [pc, #20]	; (80050cc <low_level_output+0x100>)
 80050b6:	f7fc fc03 	bl	80018c0 <HAL_ETH_Transmit>

  return errval;
 80050ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3748      	adds	r7, #72	; 0x48
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	24000274 	.word	0x24000274
 80050cc:	240001c4 	.word	0x240001c4

080050d0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80050dc:	4b07      	ldr	r3, [pc, #28]	; (80050fc <low_level_input+0x2c>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d105      	bne.n	80050f0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80050e4:	f107 030c 	add.w	r3, r7, #12
 80050e8:	4619      	mov	r1, r3
 80050ea:	4805      	ldr	r0, [pc, #20]	; (8005100 <low_level_input+0x30>)
 80050ec:	f7fc fc7f 	bl	80019ee <HAL_ETH_ReadData>
  }

  return p;
 80050f0:	68fb      	ldr	r3, [r7, #12]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	240001c0 	.word	0x240001c0
 8005100:	240001c4 	.word	0x240001c4

08005104 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800510c:	2300      	movs	r3, #0
 800510e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff ffdd 	bl	80050d0 <low_level_input>
 8005116:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	4798      	blx	r3
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f001 feb6 	bl	8006ea0 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1ea      	bne.n	8005110 <ethernetif_input+0xc>
}
 800513a:	bf00      	nop
 800513c:	bf00      	nop
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <ethernetif_init+0x1c>
 8005152:	4b0e      	ldr	r3, [pc, #56]	; (800518c <ethernetif_init+0x48>)
 8005154:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8005158:	490d      	ldr	r1, [pc, #52]	; (8005190 <ethernetif_init+0x4c>)
 800515a:	480e      	ldr	r0, [pc, #56]	; (8005194 <ethernetif_init+0x50>)
 800515c:	f00a fcd0 	bl	800fb00 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2273      	movs	r2, #115	; 0x73
 8005164:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2274      	movs	r2, #116	; 0x74
 800516c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a09      	ldr	r2, [pc, #36]	; (8005198 <ethernetif_init+0x54>)
 8005174:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a08      	ldr	r2, [pc, #32]	; (800519c <ethernetif_init+0x58>)
 800517a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff fe8f 	bl	8004ea0 <low_level_init>

  return ERR_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	08010f90 	.word	0x08010f90
 8005190:	08010fac 	.word	0x08010fac
 8005194:	08010fbc 	.word	0x08010fbc
 8005198:	0800dcf9 	.word	0x0800dcf9
 800519c:	08004fcd 	.word	0x08004fcd

080051a0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80051ac:	68f9      	ldr	r1, [r7, #12]
 80051ae:	4807      	ldr	r0, [pc, #28]	; (80051cc <pbuf_free_custom+0x2c>)
 80051b0:	f000 ffdc 	bl	800616c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80051b4:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <pbuf_free_custom+0x30>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d102      	bne.n	80051c2 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80051bc:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <pbuf_free_custom+0x30>)
 80051be:	2200      	movs	r2, #0
 80051c0:	701a      	strb	r2, [r3, #0]
  }
}
 80051c2:	bf00      	nop
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	08013980 	.word	0x08013980
 80051d0:	240001c0 	.word	0x240001c0

080051d4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80051d8:	f7fc f82e 	bl	8001238 <HAL_GetTick>
 80051dc:	4603      	mov	r3, r0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	bd80      	pop	{r7, pc}
	...

080051e4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08e      	sub	sp, #56	; 0x38
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	605a      	str	r2, [r3, #4]
 80051f6:	609a      	str	r2, [r3, #8]
 80051f8:	60da      	str	r2, [r3, #12]
 80051fa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a5d      	ldr	r2, [pc, #372]	; (8005378 <HAL_ETH_MspInit+0x194>)
 8005202:	4293      	cmp	r3, r2
 8005204:	f040 80b3 	bne.w	800536e <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8005208:	4b5c      	ldr	r3, [pc, #368]	; (800537c <HAL_ETH_MspInit+0x198>)
 800520a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800520e:	4a5b      	ldr	r2, [pc, #364]	; (800537c <HAL_ETH_MspInit+0x198>)
 8005210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005214:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005218:	4b58      	ldr	r3, [pc, #352]	; (800537c <HAL_ETH_MspInit+0x198>)
 800521a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800521e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005222:	623b      	str	r3, [r7, #32]
 8005224:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8005226:	4b55      	ldr	r3, [pc, #340]	; (800537c <HAL_ETH_MspInit+0x198>)
 8005228:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800522c:	4a53      	ldr	r2, [pc, #332]	; (800537c <HAL_ETH_MspInit+0x198>)
 800522e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005232:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005236:	4b51      	ldr	r3, [pc, #324]	; (800537c <HAL_ETH_MspInit+0x198>)
 8005238:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800523c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8005244:	4b4d      	ldr	r3, [pc, #308]	; (800537c <HAL_ETH_MspInit+0x198>)
 8005246:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800524a:	4a4c      	ldr	r2, [pc, #304]	; (800537c <HAL_ETH_MspInit+0x198>)
 800524c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005250:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005254:	4b49      	ldr	r3, [pc, #292]	; (800537c <HAL_ETH_MspInit+0x198>)
 8005256:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800525a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525e:	61bb      	str	r3, [r7, #24]
 8005260:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005262:	4b46      	ldr	r3, [pc, #280]	; (800537c <HAL_ETH_MspInit+0x198>)
 8005264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005268:	4a44      	ldr	r2, [pc, #272]	; (800537c <HAL_ETH_MspInit+0x198>)
 800526a:	f043 0304 	orr.w	r3, r3, #4
 800526e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005272:	4b42      	ldr	r3, [pc, #264]	; (800537c <HAL_ETH_MspInit+0x198>)
 8005274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005280:	4b3e      	ldr	r3, [pc, #248]	; (800537c <HAL_ETH_MspInit+0x198>)
 8005282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005286:	4a3d      	ldr	r2, [pc, #244]	; (800537c <HAL_ETH_MspInit+0x198>)
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005290:	4b3a      	ldr	r3, [pc, #232]	; (800537c <HAL_ETH_MspInit+0x198>)
 8005292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800529e:	4b37      	ldr	r3, [pc, #220]	; (800537c <HAL_ETH_MspInit+0x198>)
 80052a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052a4:	4a35      	ldr	r2, [pc, #212]	; (800537c <HAL_ETH_MspInit+0x198>)
 80052a6:	f043 0302 	orr.w	r3, r3, #2
 80052aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052ae:	4b33      	ldr	r3, [pc, #204]	; (800537c <HAL_ETH_MspInit+0x198>)
 80052b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80052bc:	4b2f      	ldr	r3, [pc, #188]	; (800537c <HAL_ETH_MspInit+0x198>)
 80052be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052c2:	4a2e      	ldr	r2, [pc, #184]	; (800537c <HAL_ETH_MspInit+0x198>)
 80052c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052cc:	4b2b      	ldr	r3, [pc, #172]	; (800537c <HAL_ETH_MspInit+0x198>)
 80052ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d6:	60bb      	str	r3, [r7, #8]
 80052d8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80052da:	2332      	movs	r3, #50	; 0x32
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052de:	2302      	movs	r3, #2
 80052e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052e6:	2303      	movs	r3, #3
 80052e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80052ea:	230b      	movs	r3, #11
 80052ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052f2:	4619      	mov	r1, r3
 80052f4:	4822      	ldr	r0, [pc, #136]	; (8005380 <HAL_ETH_MspInit+0x19c>)
 80052f6:	f7fd fe57 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80052fa:	2386      	movs	r3, #134	; 0x86
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052fe:	2302      	movs	r3, #2
 8005300:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005302:	2300      	movs	r3, #0
 8005304:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005306:	2303      	movs	r3, #3
 8005308:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800530a:	230b      	movs	r3, #11
 800530c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800530e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005312:	4619      	mov	r1, r3
 8005314:	481b      	ldr	r0, [pc, #108]	; (8005384 <HAL_ETH_MspInit+0x1a0>)
 8005316:	f7fd fe47 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800531a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005320:	2302      	movs	r3, #2
 8005322:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005324:	2300      	movs	r3, #0
 8005326:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005328:	2303      	movs	r3, #3
 800532a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800532c:	230b      	movs	r3, #11
 800532e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005334:	4619      	mov	r1, r3
 8005336:	4814      	ldr	r0, [pc, #80]	; (8005388 <HAL_ETH_MspInit+0x1a4>)
 8005338:	f7fd fe36 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800533c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005340:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005342:	2302      	movs	r3, #2
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005346:	2300      	movs	r3, #0
 8005348:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800534a:	2303      	movs	r3, #3
 800534c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800534e:	230b      	movs	r3, #11
 8005350:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005356:	4619      	mov	r1, r3
 8005358:	480c      	ldr	r0, [pc, #48]	; (800538c <HAL_ETH_MspInit+0x1a8>)
 800535a:	f7fd fe25 	bl	8002fa8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800535e:	2200      	movs	r2, #0
 8005360:	2100      	movs	r1, #0
 8005362:	203d      	movs	r0, #61	; 0x3d
 8005364:	f7fc f863 	bl	800142e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005368:	203d      	movs	r0, #61	; 0x3d
 800536a:	f7fc f87a 	bl	8001462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800536e:	bf00      	nop
 8005370:	3738      	adds	r7, #56	; 0x38
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	40028000 	.word	0x40028000
 800537c:	58024400 	.word	0x58024400
 8005380:	58020800 	.word	0x58020800
 8005384:	58020000 	.word	0x58020000
 8005388:	58020400 	.word	0x58020400
 800538c:	58021800 	.word	0x58021800

08005390 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005394:	4802      	ldr	r0, [pc, #8]	; (80053a0 <ETH_PHY_IO_Init+0x10>)
 8005396:	f7fd f83b 	bl	8002410 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	240001c4 	.word	0x240001c4

080053a4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  return 0;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	68f9      	ldr	r1, [r7, #12]
 80053c6:	4807      	ldr	r0, [pc, #28]	; (80053e4 <ETH_PHY_IO_ReadReg+0x30>)
 80053c8:	f7fc fd8c 	bl	8001ee4 <HAL_ETH_ReadPHYRegister>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80053d2:	f04f 33ff 	mov.w	r3, #4294967295
 80053d6:	e000      	b.n	80053da <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	240001c4 	.word	0x240001c4

080053e8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	68f9      	ldr	r1, [r7, #12]
 80053fa:	4807      	ldr	r0, [pc, #28]	; (8005418 <ETH_PHY_IO_WriteReg+0x30>)
 80053fc:	f7fc fdc6 	bl	8001f8c <HAL_ETH_WritePHYRegister>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005406:	f04f 33ff 	mov.w	r3, #4294967295
 800540a:	e000      	b.n	800540e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	240001c4 	.word	0x240001c4

0800541c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005420:	f7fb ff0a 	bl	8001238 <HAL_GetTick>
 8005424:	4603      	mov	r3, r0
}
 8005426:	4618      	mov	r0, r3
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b0a0      	sub	sp, #128	; 0x80
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005434:	f107 030c 	add.w	r3, r7, #12
 8005438:	2264      	movs	r2, #100	; 0x64
 800543a:	2100      	movs	r1, #0
 800543c:	4618      	mov	r0, r3
 800543e:	f00a fb57 	bl	800faf0 <memset>
  int32_t PHYLinkState = 0;
 8005442:	2300      	movs	r3, #0
 8005444:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	67fb      	str	r3, [r7, #124]	; 0x7c
 800544a:	2300      	movs	r3, #0
 800544c:	67bb      	str	r3, [r7, #120]	; 0x78
 800544e:	2300      	movs	r3, #0
 8005450:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005452:	483a      	ldr	r0, [pc, #232]	; (800553c <ethernet_link_check_state+0x110>)
 8005454:	f7fb fde3 	bl	800101e <LAN8742_GetLinkState>
 8005458:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005460:	089b      	lsrs	r3, r3, #2
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00c      	beq.n	8005486 <ethernet_link_check_state+0x5a>
 800546c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800546e:	2b01      	cmp	r3, #1
 8005470:	dc09      	bgt.n	8005486 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8005472:	4833      	ldr	r0, [pc, #204]	; (8005540 <ethernet_link_check_state+0x114>)
 8005474:	f7fc f9d4 	bl	8001820 <HAL_ETH_Stop>
    netif_set_down(netif);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f001 f8fb 	bl	8006674 <netif_set_down>
    netif_set_link_down(netif);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f001 f95e 	bl	8006740 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8005484:	e055      	b.n	8005532 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d14e      	bne.n	8005532 <ethernet_link_check_state+0x106>
 8005494:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005496:	2b01      	cmp	r3, #1
 8005498:	dd4b      	ble.n	8005532 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800549a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800549c:	3b02      	subs	r3, #2
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d82a      	bhi.n	80054f8 <ethernet_link_check_state+0xcc>
 80054a2:	a201      	add	r2, pc, #4	; (adr r2, 80054a8 <ethernet_link_check_state+0x7c>)
 80054a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a8:	080054b9 	.word	0x080054b9
 80054ac:	080054cb 	.word	0x080054cb
 80054b0:	080054db 	.word	0x080054db
 80054b4:	080054eb 	.word	0x080054eb
      duplex = ETH_FULLDUPLEX_MODE;
 80054b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054bc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80054be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054c2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80054c4:	2301      	movs	r3, #1
 80054c6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80054c8:	e017      	b.n	80054fa <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80054ca:	2300      	movs	r3, #0
 80054cc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80054ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054d2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80054d4:	2301      	movs	r3, #1
 80054d6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80054d8:	e00f      	b.n	80054fa <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80054da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054de:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80054e0:	2300      	movs	r3, #0
 80054e2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80054e4:	2301      	movs	r3, #1
 80054e6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80054e8:	e007      	b.n	80054fa <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80054ee:	2300      	movs	r3, #0
 80054f0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80054f2:	2301      	movs	r3, #1
 80054f4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80054f6:	e000      	b.n	80054fa <ethernet_link_check_state+0xce>
      break;
 80054f8:	bf00      	nop
    if(linkchanged)
 80054fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d018      	beq.n	8005532 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005500:	f107 030c 	add.w	r3, r7, #12
 8005504:	4619      	mov	r1, r3
 8005506:	480e      	ldr	r0, [pc, #56]	; (8005540 <ethernet_link_check_state+0x114>)
 8005508:	f7fc fd94 	bl	8002034 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800550c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8005510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005512:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005514:	f107 030c 	add.w	r3, r7, #12
 8005518:	4619      	mov	r1, r3
 800551a:	4809      	ldr	r0, [pc, #36]	; (8005540 <ethernet_link_check_state+0x114>)
 800551c:	f7fc ff5e 	bl	80023dc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005520:	4807      	ldr	r0, [pc, #28]	; (8005540 <ethernet_link_check_state+0x114>)
 8005522:	f7fc f91b 	bl	800175c <HAL_ETH_Start>
      netif_set_up(netif);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f001 f838 	bl	800659c <netif_set_up>
      netif_set_link_up(netif);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f001 f8d3 	bl	80066d8 <netif_set_link_up>
}
 8005532:	bf00      	nop
 8005534:	3780      	adds	r7, #128	; 0x80
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	240002ac 	.word	0x240002ac
 8005540:	240001c4 	.word	0x240001c4

08005544 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af02      	add	r7, sp, #8
 800554a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800554c:	4812      	ldr	r0, [pc, #72]	; (8005598 <HAL_ETH_RxAllocateCallback+0x54>)
 800554e:	f000 fd9f 	bl	8006090 <memp_malloc_pool>
 8005552:	60f8      	str	r0, [r7, #12]
  if (p)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d014      	beq.n	8005584 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f103 0220 	add.w	r2, r3, #32
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4a0d      	ldr	r2, [pc, #52]	; (800559c <HAL_ETH_RxAllocateCallback+0x58>)
 8005568:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005572:	9201      	str	r2, [sp, #4]
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2241      	movs	r2, #65	; 0x41
 800557a:	2100      	movs	r1, #0
 800557c:	2000      	movs	r0, #0
 800557e:	f001 fad5 	bl	8006b2c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005582:	e005      	b.n	8005590 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005584:	4b06      	ldr	r3, [pc, #24]	; (80055a0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8005586:	2201      	movs	r2, #1
 8005588:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]
}
 8005590:	bf00      	nop
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	08013980 	.word	0x08013980
 800559c:	080051a1 	.word	0x080051a1
 80055a0:	240001c0 	.word	0x240001c0

080055a4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b08d      	sub	sp, #52	; 0x34
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3b20      	subs	r3, #32
 80055c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 80055c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c6:	2200      	movs	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80055ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055cc:	2200      	movs	r2, #0
 80055ce:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80055d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d2:	887a      	ldrh	r2, [r7, #2]
 80055d4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80055d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d103      	bne.n	80055e6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	e003      	b.n	80055ee <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055ec:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055f2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055fa:	e009      	b.n	8005610 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80055fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fe:	891a      	ldrh	r2, [r3, #8]
 8005600:	887b      	ldrh	r3, [r7, #2]
 8005602:	4413      	add	r3, r2
 8005604:	b29a      	uxth	r2, r3
 8005606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005608:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f2      	bne.n	80055fc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8005616:	887b      	ldrh	r3, [r7, #2]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	623a      	str	r2, [r7, #32]
 800561c:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	2b00      	cmp	r3, #0
 8005622:	dd1d      	ble.n	8005660 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	f003 021f 	and.w	r2, r3, #31
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	4413      	add	r3, r2
 800562e:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005634:	f3bf 8f4f 	dsb	sy
}
 8005638:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800563a:	4a0d      	ldr	r2, [pc, #52]	; (8005670 <HAL_ETH_RxLinkCallback+0xcc>)
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	3320      	adds	r3, #32
 8005646:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	3b20      	subs	r3, #32
 800564c:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	2b00      	cmp	r3, #0
 8005652:	dcf2      	bgt.n	800563a <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8005654:	f3bf 8f4f 	dsb	sy
}
 8005658:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800565a:	f3bf 8f6f 	isb	sy
}
 800565e:	bf00      	nop
}
 8005660:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005662:	bf00      	nop
 8005664:	3734      	adds	r7, #52	; 0x34
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	e000ed00 	.word	0xe000ed00

08005674 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	4603      	mov	r3, r0
 800567c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800567e:	88fb      	ldrh	r3, [r7, #6]
 8005680:	021b      	lsls	r3, r3, #8
 8005682:	b21a      	sxth	r2, r3
 8005684:	88fb      	ldrh	r3, [r7, #6]
 8005686:	0a1b      	lsrs	r3, r3, #8
 8005688:	b29b      	uxth	r3, r3
 800568a:	b21b      	sxth	r3, r3
 800568c:	4313      	orrs	r3, r2
 800568e:	b21b      	sxth	r3, r3
 8005690:	b29b      	uxth	r3, r3
}
 8005692:	4618      	mov	r0, r3
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	061a      	lsls	r2, r3, #24
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	0a1b      	lsrs	r3, r3, #8
 80056b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	0e1b      	lsrs	r3, r3, #24
 80056c2:	4313      	orrs	r3, r2
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b089      	sub	sp, #36	; 0x24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80056de:	2300      	movs	r3, #0
 80056e0:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80056e2:	2300      	movs	r3, #0
 80056e4:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00d      	beq.n	8005710 <lwip_standard_chksum+0x40>
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	dd0a      	ble.n	8005710 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	1c53      	adds	r3, r2, #1
 80056fe:	61fb      	str	r3, [r7, #28]
 8005700:	f107 030e 	add.w	r3, r7, #14
 8005704:	3301      	adds	r3, #1
 8005706:	7812      	ldrb	r2, [r2, #0]
 8005708:	701a      	strb	r2, [r3, #0]
    len--;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	3b01      	subs	r3, #1
 800570e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8005714:	e00a      	b.n	800572c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	1c9a      	adds	r2, r3, #2
 800571a:	61ba      	str	r2, [r7, #24]
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	4413      	add	r3, r2
 8005724:	617b      	str	r3, [r7, #20]
    len -= 2;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	3b02      	subs	r3, #2
 800572a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	2b01      	cmp	r3, #1
 8005730:	dcf1      	bgt.n	8005716 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	dd04      	ble.n	8005742 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8005738:	f107 030e 	add.w	r3, r7, #14
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	7812      	ldrb	r2, [r2, #0]
 8005740:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8005742:	89fb      	ldrh	r3, [r7, #14]
 8005744:	461a      	mov	r2, r3
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	4413      	add	r3, r2
 800574a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	0c1a      	lsrs	r2, r3, #16
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	b29b      	uxth	r3, r3
 8005754:	4413      	add	r3, r2
 8005756:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	0c1a      	lsrs	r2, r3, #16
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	b29b      	uxth	r3, r3
 8005760:	4413      	add	r3, r2
 8005762:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d007      	beq.n	800577a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	021b      	lsls	r3, r3, #8
 800576e:	b29a      	uxth	r2, r3
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	0a1b      	lsrs	r3, r3, #8
 8005774:	b2db      	uxtb	r3, r3
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	b29b      	uxth	r3, r3
}
 800577e:	4618      	mov	r0, r3
 8005780:	3724      	adds	r7, #36	; 0x24
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b082      	sub	sp, #8
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	460b      	mov	r3, r1
 8005794:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8005796:	887b      	ldrh	r3, [r7, #2]
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7ff ff98 	bl	80056d0 <lwip_standard_chksum>
 80057a0:	4603      	mov	r3, r0
 80057a2:	43db      	mvns	r3, r3
 80057a4:	b29b      	uxth	r3, r3
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b086      	sub	sp, #24
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80057ba:	2300      	movs	r3, #0
 80057bc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	e02b      	b.n	800581c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	895b      	ldrh	r3, [r3, #10]
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f7ff ff7e 	bl	80056d0 <lwip_standard_chksum>
 80057d4:	4603      	mov	r3, r0
 80057d6:	461a      	mov	r2, r3
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	4413      	add	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	0c1a      	lsrs	r2, r3, #16
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	4413      	add	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	895b      	ldrh	r3, [r3, #10]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00e      	beq.n	8005816 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	bf0c      	ite	eq
 80057fe:	2301      	moveq	r3, #1
 8005800:	2300      	movne	r3, #0
 8005802:	b2db      	uxtb	r3, r3
 8005804:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	021b      	lsls	r3, r3, #8
 800580a:	b29a      	uxth	r2, r3
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	0a1b      	lsrs	r3, r3, #8
 8005810:	b2db      	uxtb	r3, r3
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	613b      	str	r3, [r7, #16]
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1d0      	bne.n	80057c4 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d007      	beq.n	8005838 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	021b      	lsls	r3, r3, #8
 800582c:	b29a      	uxth	r2, r3
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	0a1b      	lsrs	r3, r3, #8
 8005832:	b2db      	uxtb	r3, r3
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	b29b      	uxth	r3, r3
 800583c:	43db      	mvns	r3, r3
 800583e:	b29b      	uxth	r3, r3
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800584e:	2300      	movs	r3, #0
 8005850:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005852:	f000 f8d5 	bl	8005a00 <mem_init>
  memp_init();
 8005856:	f000 fbd7 	bl	8006008 <memp_init>
  pbuf_init();
  netif_init();
 800585a:	f000 fcd5 	bl	8006208 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800585e:	f007 f8f5 	bl	800ca4c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005862:	f001 fe4d 	bl	8007500 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005866:	f007 f867 	bl	800c938 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800586a:	bf00      	nop
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <ptr_to_mem+0x20>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	88fb      	ldrh	r3, [r7, #6]
 8005884:	4413      	add	r3, r2
}
 8005886:	4618      	mov	r0, r3
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	240002e4 	.word	0x240002e4

08005898 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80058a0:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <mem_to_ptr+0x20>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	b29b      	uxth	r3, r3
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	240002e4 	.word	0x240002e4

080058bc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80058bc:	b590      	push	{r4, r7, lr}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80058c4:	4b45      	ldr	r3, [pc, #276]	; (80059dc <plug_holes+0x120>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d206      	bcs.n	80058dc <plug_holes+0x20>
 80058ce:	4b44      	ldr	r3, [pc, #272]	; (80059e0 <plug_holes+0x124>)
 80058d0:	f240 12df 	movw	r2, #479	; 0x1df
 80058d4:	4943      	ldr	r1, [pc, #268]	; (80059e4 <plug_holes+0x128>)
 80058d6:	4844      	ldr	r0, [pc, #272]	; (80059e8 <plug_holes+0x12c>)
 80058d8:	f00a f912 	bl	800fb00 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80058dc:	4b43      	ldr	r3, [pc, #268]	; (80059ec <plug_holes+0x130>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d306      	bcc.n	80058f4 <plug_holes+0x38>
 80058e6:	4b3e      	ldr	r3, [pc, #248]	; (80059e0 <plug_holes+0x124>)
 80058e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80058ec:	4940      	ldr	r1, [pc, #256]	; (80059f0 <plug_holes+0x134>)
 80058ee:	483e      	ldr	r0, [pc, #248]	; (80059e8 <plug_holes+0x12c>)
 80058f0:	f00a f906 	bl	800fb00 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	791b      	ldrb	r3, [r3, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d006      	beq.n	800590a <plug_holes+0x4e>
 80058fc:	4b38      	ldr	r3, [pc, #224]	; (80059e0 <plug_holes+0x124>)
 80058fe:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005902:	493c      	ldr	r1, [pc, #240]	; (80059f4 <plug_holes+0x138>)
 8005904:	4838      	ldr	r0, [pc, #224]	; (80059e8 <plug_holes+0x12c>)
 8005906:	f00a f8fb 	bl	800fb00 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005912:	d906      	bls.n	8005922 <plug_holes+0x66>
 8005914:	4b32      	ldr	r3, [pc, #200]	; (80059e0 <plug_holes+0x124>)
 8005916:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800591a:	4937      	ldr	r1, [pc, #220]	; (80059f8 <plug_holes+0x13c>)
 800591c:	4832      	ldr	r0, [pc, #200]	; (80059e8 <plug_holes+0x12c>)
 800591e:	f00a f8ef 	bl	800fb00 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff ffa4 	bl	8005874 <ptr_to_mem>
 800592c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	429a      	cmp	r2, r3
 8005934:	d024      	beq.n	8005980 <plug_holes+0xc4>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	791b      	ldrb	r3, [r3, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d120      	bne.n	8005980 <plug_holes+0xc4>
 800593e:	4b2b      	ldr	r3, [pc, #172]	; (80059ec <plug_holes+0x130>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	429a      	cmp	r2, r3
 8005946:	d01b      	beq.n	8005980 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005948:	4b2c      	ldr	r3, [pc, #176]	; (80059fc <plug_holes+0x140>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	429a      	cmp	r2, r3
 8005950:	d102      	bne.n	8005958 <plug_holes+0x9c>
      lfree = mem;
 8005952:	4a2a      	ldr	r2, [pc, #168]	; (80059fc <plug_holes+0x140>)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	881a      	ldrh	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005968:	d00a      	beq.n	8005980 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff ff80 	bl	8005874 <ptr_to_mem>
 8005974:	4604      	mov	r4, r0
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff ff8e 	bl	8005898 <mem_to_ptr>
 800597c:	4603      	mov	r3, r0
 800597e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	885b      	ldrh	r3, [r3, #2]
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff ff75 	bl	8005874 <ptr_to_mem>
 800598a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	429a      	cmp	r2, r3
 8005992:	d01f      	beq.n	80059d4 <plug_holes+0x118>
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	791b      	ldrb	r3, [r3, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d11b      	bne.n	80059d4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800599c:	4b17      	ldr	r3, [pc, #92]	; (80059fc <plug_holes+0x140>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d102      	bne.n	80059ac <plug_holes+0xf0>
      lfree = pmem;
 80059a6:	4a15      	ldr	r2, [pc, #84]	; (80059fc <plug_holes+0x140>)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	881a      	ldrh	r2, [r3, #0]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80059bc:	d00a      	beq.n	80059d4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7ff ff56 	bl	8005874 <ptr_to_mem>
 80059c8:	4604      	mov	r4, r0
 80059ca:	68b8      	ldr	r0, [r7, #8]
 80059cc:	f7ff ff64 	bl	8005898 <mem_to_ptr>
 80059d0:	4603      	mov	r3, r0
 80059d2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80059d4:	bf00      	nop
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd90      	pop	{r4, r7, pc}
 80059dc:	240002e4 	.word	0x240002e4
 80059e0:	08010fe4 	.word	0x08010fe4
 80059e4:	08011014 	.word	0x08011014
 80059e8:	0801102c 	.word	0x0801102c
 80059ec:	240002e8 	.word	0x240002e8
 80059f0:	08011054 	.word	0x08011054
 80059f4:	08011070 	.word	0x08011070
 80059f8:	0801108c 	.word	0x0801108c
 80059fc:	240002ec 	.word	0x240002ec

08005a00 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005a06:	4b16      	ldr	r3, [pc, #88]	; (8005a60 <mem_init+0x60>)
 8005a08:	4a16      	ldr	r2, [pc, #88]	; (8005a64 <mem_init+0x64>)
 8005a0a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005a0c:	4b14      	ldr	r3, [pc, #80]	; (8005a60 <mem_init+0x60>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005a18:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005a26:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8005a2a:	f7ff ff23 	bl	8005874 <ptr_to_mem>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	4a0d      	ldr	r2, [pc, #52]	; (8005a68 <mem_init+0x68>)
 8005a32:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005a34:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <mem_init+0x68>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <mem_init+0x68>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005a44:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005a46:	4b08      	ldr	r3, [pc, #32]	; (8005a68 <mem_init+0x68>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005a4e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005a50:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <mem_init+0x60>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a05      	ldr	r2, [pc, #20]	; (8005a6c <mem_init+0x6c>)
 8005a56:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005a58:	bf00      	nop
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	240002e4 	.word	0x240002e4
 8005a64:	30004000 	.word	0x30004000
 8005a68:	240002e8 	.word	0x240002e8
 8005a6c:	240002ec 	.word	0x240002ec

08005a70 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7ff ff0d 	bl	8005898 <mem_to_ptr>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7ff fef4 	bl	8005874 <ptr_to_mem>
 8005a8c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	885b      	ldrh	r3, [r3, #2]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff feee 	bl	8005874 <ptr_to_mem>
 8005a98:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005aa2:	d818      	bhi.n	8005ad6 <mem_link_valid+0x66>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	885b      	ldrh	r3, [r3, #2]
 8005aa8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005aac:	d813      	bhi.n	8005ad6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005ab2:	8afa      	ldrh	r2, [r7, #22]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d004      	beq.n	8005ac2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	8afa      	ldrh	r2, [r7, #22]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d109      	bne.n	8005ad6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005ac2:	4b08      	ldr	r3, [pc, #32]	; (8005ae4 <mem_link_valid+0x74>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d006      	beq.n	8005ada <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	885b      	ldrh	r3, [r3, #2]
 8005ad0:	8afa      	ldrh	r2, [r7, #22]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d001      	beq.n	8005ada <mem_link_valid+0x6a>
    return 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e000      	b.n	8005adc <mem_link_valid+0x6c>
  }
  return 1;
 8005ada:	2301      	movs	r3, #1
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3718      	adds	r7, #24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	240002e8 	.word	0x240002e8

08005ae8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d04c      	beq.n	8005b90 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f003 0303 	and.w	r3, r3, #3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d007      	beq.n	8005b10 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005b00:	4b25      	ldr	r3, [pc, #148]	; (8005b98 <mem_free+0xb0>)
 8005b02:	f240 2273 	movw	r2, #627	; 0x273
 8005b06:	4925      	ldr	r1, [pc, #148]	; (8005b9c <mem_free+0xb4>)
 8005b08:	4825      	ldr	r0, [pc, #148]	; (8005ba0 <mem_free+0xb8>)
 8005b0a:	f009 fff9 	bl	800fb00 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005b0e:	e040      	b.n	8005b92 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3b08      	subs	r3, #8
 8005b14:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005b16:	4b23      	ldr	r3, [pc, #140]	; (8005ba4 <mem_free+0xbc>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d306      	bcc.n	8005b2e <mem_free+0x46>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f103 020c 	add.w	r2, r3, #12
 8005b26:	4b20      	ldr	r3, [pc, #128]	; (8005ba8 <mem_free+0xc0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d907      	bls.n	8005b3e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005b2e:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <mem_free+0xb0>)
 8005b30:	f240 227f 	movw	r2, #639	; 0x27f
 8005b34:	491d      	ldr	r1, [pc, #116]	; (8005bac <mem_free+0xc4>)
 8005b36:	481a      	ldr	r0, [pc, #104]	; (8005ba0 <mem_free+0xb8>)
 8005b38:	f009 ffe2 	bl	800fb00 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005b3c:	e029      	b.n	8005b92 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	791b      	ldrb	r3, [r3, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d107      	bne.n	8005b56 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005b46:	4b14      	ldr	r3, [pc, #80]	; (8005b98 <mem_free+0xb0>)
 8005b48:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005b4c:	4918      	ldr	r1, [pc, #96]	; (8005bb0 <mem_free+0xc8>)
 8005b4e:	4814      	ldr	r0, [pc, #80]	; (8005ba0 <mem_free+0xb8>)
 8005b50:	f009 ffd6 	bl	800fb00 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005b54:	e01d      	b.n	8005b92 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7ff ff8a 	bl	8005a70 <mem_link_valid>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d107      	bne.n	8005b72 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005b62:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <mem_free+0xb0>)
 8005b64:	f240 2295 	movw	r2, #661	; 0x295
 8005b68:	4912      	ldr	r1, [pc, #72]	; (8005bb4 <mem_free+0xcc>)
 8005b6a:	480d      	ldr	r0, [pc, #52]	; (8005ba0 <mem_free+0xb8>)
 8005b6c:	f009 ffc8 	bl	800fb00 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005b70:	e00f      	b.n	8005b92 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005b78:	4b0f      	ldr	r3, [pc, #60]	; (8005bb8 <mem_free+0xd0>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d202      	bcs.n	8005b88 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005b82:	4a0d      	ldr	r2, [pc, #52]	; (8005bb8 <mem_free+0xd0>)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f7ff fe97 	bl	80058bc <plug_holes>
 8005b8e:	e000      	b.n	8005b92 <mem_free+0xaa>
    return;
 8005b90:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	08010fe4 	.word	0x08010fe4
 8005b9c:	080110b8 	.word	0x080110b8
 8005ba0:	0801102c 	.word	0x0801102c
 8005ba4:	240002e4 	.word	0x240002e4
 8005ba8:	240002e8 	.word	0x240002e8
 8005bac:	080110dc 	.word	0x080110dc
 8005bb0:	080110f8 	.word	0x080110f8
 8005bb4:	08011120 	.word	0x08011120
 8005bb8:	240002ec 	.word	0x240002ec

08005bbc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b088      	sub	sp, #32
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005bc8:	887b      	ldrh	r3, [r7, #2]
 8005bca:	3303      	adds	r3, #3
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f023 0303 	bic.w	r3, r3, #3
 8005bd2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005bd4:	8bfb      	ldrh	r3, [r7, #30]
 8005bd6:	2b0b      	cmp	r3, #11
 8005bd8:	d801      	bhi.n	8005bde <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005bda:	230c      	movs	r3, #12
 8005bdc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005bde:	8bfb      	ldrh	r3, [r7, #30]
 8005be0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005be4:	d803      	bhi.n	8005bee <mem_trim+0x32>
 8005be6:	8bfa      	ldrh	r2, [r7, #30]
 8005be8:	887b      	ldrh	r3, [r7, #2]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d201      	bcs.n	8005bf2 <mem_trim+0x36>
    return NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e0cc      	b.n	8005d8c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005bf2:	4b68      	ldr	r3, [pc, #416]	; (8005d94 <mem_trim+0x1d8>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d304      	bcc.n	8005c06 <mem_trim+0x4a>
 8005bfc:	4b66      	ldr	r3, [pc, #408]	; (8005d98 <mem_trim+0x1dc>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d306      	bcc.n	8005c14 <mem_trim+0x58>
 8005c06:	4b65      	ldr	r3, [pc, #404]	; (8005d9c <mem_trim+0x1e0>)
 8005c08:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005c0c:	4964      	ldr	r1, [pc, #400]	; (8005da0 <mem_trim+0x1e4>)
 8005c0e:	4865      	ldr	r0, [pc, #404]	; (8005da4 <mem_trim+0x1e8>)
 8005c10:	f009 ff76 	bl	800fb00 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005c14:	4b5f      	ldr	r3, [pc, #380]	; (8005d94 <mem_trim+0x1d8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d304      	bcc.n	8005c28 <mem_trim+0x6c>
 8005c1e:	4b5e      	ldr	r3, [pc, #376]	; (8005d98 <mem_trim+0x1dc>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d301      	bcc.n	8005c2c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	e0af      	b.n	8005d8c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3b08      	subs	r3, #8
 8005c30:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005c32:	69b8      	ldr	r0, [r7, #24]
 8005c34:	f7ff fe30 	bl	8005898 <mem_to_ptr>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	881a      	ldrh	r2, [r3, #0]
 8005c40:	8afb      	ldrh	r3, [r7, #22]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b08      	subs	r3, #8
 8005c48:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005c4a:	8bfa      	ldrh	r2, [r7, #30]
 8005c4c:	8abb      	ldrh	r3, [r7, #20]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d906      	bls.n	8005c60 <mem_trim+0xa4>
 8005c52:	4b52      	ldr	r3, [pc, #328]	; (8005d9c <mem_trim+0x1e0>)
 8005c54:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005c58:	4953      	ldr	r1, [pc, #332]	; (8005da8 <mem_trim+0x1ec>)
 8005c5a:	4852      	ldr	r0, [pc, #328]	; (8005da4 <mem_trim+0x1e8>)
 8005c5c:	f009 ff50 	bl	800fb00 <iprintf>
  if (newsize > size) {
 8005c60:	8bfa      	ldrh	r2, [r7, #30]
 8005c62:	8abb      	ldrh	r3, [r7, #20]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d901      	bls.n	8005c6c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e08f      	b.n	8005d8c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005c6c:	8bfa      	ldrh	r2, [r7, #30]
 8005c6e:	8abb      	ldrh	r3, [r7, #20]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d101      	bne.n	8005c78 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	e089      	b.n	8005d8c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7ff fdf9 	bl	8005874 <ptr_to_mem>
 8005c82:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	791b      	ldrb	r3, [r3, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d13f      	bne.n	8005d0c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005c94:	d106      	bne.n	8005ca4 <mem_trim+0xe8>
 8005c96:	4b41      	ldr	r3, [pc, #260]	; (8005d9c <mem_trim+0x1e0>)
 8005c98:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005c9c:	4943      	ldr	r1, [pc, #268]	; (8005dac <mem_trim+0x1f0>)
 8005c9e:	4841      	ldr	r0, [pc, #260]	; (8005da4 <mem_trim+0x1e8>)
 8005ca0:	f009 ff2e 	bl	800fb00 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005caa:	8afa      	ldrh	r2, [r7, #22]
 8005cac:	8bfb      	ldrh	r3, [r7, #30]
 8005cae:	4413      	add	r3, r2
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005cb6:	4b3e      	ldr	r3, [pc, #248]	; (8005db0 <mem_trim+0x1f4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d106      	bne.n	8005cce <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005cc0:	89fb      	ldrh	r3, [r7, #14]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7ff fdd6 	bl	8005874 <ptr_to_mem>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	4a39      	ldr	r2, [pc, #228]	; (8005db0 <mem_trim+0x1f4>)
 8005ccc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005cce:	89fb      	ldrh	r3, [r7, #14]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff fdcf 	bl	8005874 <ptr_to_mem>
 8005cd6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	89ba      	ldrh	r2, [r7, #12]
 8005ce2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	8afa      	ldrh	r2, [r7, #22]
 8005ce8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	89fa      	ldrh	r2, [r7, #14]
 8005cee:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005cf8:	d047      	beq.n	8005d8a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff fdb8 	bl	8005874 <ptr_to_mem>
 8005d04:	4602      	mov	r2, r0
 8005d06:	89fb      	ldrh	r3, [r7, #14]
 8005d08:	8053      	strh	r3, [r2, #2]
 8005d0a:	e03e      	b.n	8005d8a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005d0c:	8bfb      	ldrh	r3, [r7, #30]
 8005d0e:	f103 0214 	add.w	r2, r3, #20
 8005d12:	8abb      	ldrh	r3, [r7, #20]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d838      	bhi.n	8005d8a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005d18:	8afa      	ldrh	r2, [r7, #22]
 8005d1a:	8bfb      	ldrh	r3, [r7, #30]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3308      	adds	r3, #8
 8005d22:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005d2c:	d106      	bne.n	8005d3c <mem_trim+0x180>
 8005d2e:	4b1b      	ldr	r3, [pc, #108]	; (8005d9c <mem_trim+0x1e0>)
 8005d30:	f240 3216 	movw	r2, #790	; 0x316
 8005d34:	491d      	ldr	r1, [pc, #116]	; (8005dac <mem_trim+0x1f0>)
 8005d36:	481b      	ldr	r0, [pc, #108]	; (8005da4 <mem_trim+0x1e8>)
 8005d38:	f009 fee2 	bl	800fb00 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005d3c:	89fb      	ldrh	r3, [r7, #14]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff fd98 	bl	8005874 <ptr_to_mem>
 8005d44:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005d46:	4b1a      	ldr	r3, [pc, #104]	; (8005db0 <mem_trim+0x1f4>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d202      	bcs.n	8005d56 <mem_trim+0x19a>
      lfree = mem2;
 8005d50:	4a17      	ldr	r2, [pc, #92]	; (8005db0 <mem_trim+0x1f4>)
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	881a      	ldrh	r2, [r3, #0]
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	8afa      	ldrh	r2, [r7, #22]
 8005d68:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	89fa      	ldrh	r2, [r7, #14]
 8005d6e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005d78:	d007      	beq.n	8005d8a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7ff fd78 	bl	8005874 <ptr_to_mem>
 8005d84:	4602      	mov	r2, r0
 8005d86:	89fb      	ldrh	r3, [r7, #14]
 8005d88:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005d8a:	687b      	ldr	r3, [r7, #4]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3720      	adds	r7, #32
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	240002e4 	.word	0x240002e4
 8005d98:	240002e8 	.word	0x240002e8
 8005d9c:	08010fe4 	.word	0x08010fe4
 8005da0:	08011154 	.word	0x08011154
 8005da4:	0801102c 	.word	0x0801102c
 8005da8:	0801116c 	.word	0x0801116c
 8005dac:	0801118c 	.word	0x0801118c
 8005db0:	240002ec 	.word	0x240002ec

08005db4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b088      	sub	sp, #32
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	4603      	mov	r3, r0
 8005dbc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005dbe:	88fb      	ldrh	r3, [r7, #6]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <mem_malloc+0x14>
    return NULL;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	e0d9      	b.n	8005f7c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005dc8:	88fb      	ldrh	r3, [r7, #6]
 8005dca:	3303      	adds	r3, #3
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	f023 0303 	bic.w	r3, r3, #3
 8005dd2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005dd4:	8bbb      	ldrh	r3, [r7, #28]
 8005dd6:	2b0b      	cmp	r3, #11
 8005dd8:	d801      	bhi.n	8005dde <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005dda:	230c      	movs	r3, #12
 8005ddc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005dde:	8bbb      	ldrh	r3, [r7, #28]
 8005de0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005de4:	d803      	bhi.n	8005dee <mem_malloc+0x3a>
 8005de6:	8bba      	ldrh	r2, [r7, #28]
 8005de8:	88fb      	ldrh	r3, [r7, #6]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d201      	bcs.n	8005df2 <mem_malloc+0x3e>
    return NULL;
 8005dee:	2300      	movs	r3, #0
 8005df0:	e0c4      	b.n	8005f7c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005df2:	4b64      	ldr	r3, [pc, #400]	; (8005f84 <mem_malloc+0x1d0>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7ff fd4e 	bl	8005898 <mem_to_ptr>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	83fb      	strh	r3, [r7, #30]
 8005e00:	e0b4      	b.n	8005f6c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005e02:	8bfb      	ldrh	r3, [r7, #30]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff fd35 	bl	8005874 <ptr_to_mem>
 8005e0a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	791b      	ldrb	r3, [r3, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f040 80a4 	bne.w	8005f5e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	8bfb      	ldrh	r3, [r7, #30]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	f1a3 0208 	sub.w	r2, r3, #8
 8005e24:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005e26:	429a      	cmp	r2, r3
 8005e28:	f0c0 8099 	bcc.w	8005f5e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	461a      	mov	r2, r3
 8005e32:	8bfb      	ldrh	r3, [r7, #30]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	f1a3 0208 	sub.w	r2, r3, #8
 8005e3a:	8bbb      	ldrh	r3, [r7, #28]
 8005e3c:	3314      	adds	r3, #20
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d333      	bcc.n	8005eaa <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005e42:	8bfa      	ldrh	r2, [r7, #30]
 8005e44:	8bbb      	ldrh	r3, [r7, #28]
 8005e46:	4413      	add	r3, r2
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005e4e:	8a7b      	ldrh	r3, [r7, #18]
 8005e50:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005e54:	d106      	bne.n	8005e64 <mem_malloc+0xb0>
 8005e56:	4b4c      	ldr	r3, [pc, #304]	; (8005f88 <mem_malloc+0x1d4>)
 8005e58:	f240 3287 	movw	r2, #903	; 0x387
 8005e5c:	494b      	ldr	r1, [pc, #300]	; (8005f8c <mem_malloc+0x1d8>)
 8005e5e:	484c      	ldr	r0, [pc, #304]	; (8005f90 <mem_malloc+0x1dc>)
 8005e60:	f009 fe4e 	bl	800fb00 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005e64:	8a7b      	ldrh	r3, [r7, #18]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff fd04 	bl	8005874 <ptr_to_mem>
 8005e6c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	881a      	ldrh	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8bfa      	ldrh	r2, [r7, #30]
 8005e80:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	8a7a      	ldrh	r2, [r7, #18]
 8005e86:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005e96:	d00b      	beq.n	8005eb0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7ff fce9 	bl	8005874 <ptr_to_mem>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	8a7b      	ldrh	r3, [r7, #18]
 8005ea6:	8053      	strh	r3, [r2, #2]
 8005ea8:	e002      	b.n	8005eb0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2201      	movs	r2, #1
 8005eae:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005eb0:	4b34      	ldr	r3, [pc, #208]	; (8005f84 <mem_malloc+0x1d0>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d127      	bne.n	8005f0a <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005eba:	4b32      	ldr	r3, [pc, #200]	; (8005f84 <mem_malloc+0x1d0>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005ec0:	e005      	b.n	8005ece <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff fcd4 	bl	8005874 <ptr_to_mem>
 8005ecc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	791b      	ldrb	r3, [r3, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d004      	beq.n	8005ee0 <mem_malloc+0x12c>
 8005ed6:	4b2f      	ldr	r3, [pc, #188]	; (8005f94 <mem_malloc+0x1e0>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d1f0      	bne.n	8005ec2 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005ee0:	4a28      	ldr	r2, [pc, #160]	; (8005f84 <mem_malloc+0x1d0>)
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005ee6:	4b27      	ldr	r3, [pc, #156]	; (8005f84 <mem_malloc+0x1d0>)
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	4b2a      	ldr	r3, [pc, #168]	; (8005f94 <mem_malloc+0x1e0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d00b      	beq.n	8005f0a <mem_malloc+0x156>
 8005ef2:	4b24      	ldr	r3, [pc, #144]	; (8005f84 <mem_malloc+0x1d0>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	791b      	ldrb	r3, [r3, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d006      	beq.n	8005f0a <mem_malloc+0x156>
 8005efc:	4b22      	ldr	r3, [pc, #136]	; (8005f88 <mem_malloc+0x1d4>)
 8005efe:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005f02:	4925      	ldr	r1, [pc, #148]	; (8005f98 <mem_malloc+0x1e4>)
 8005f04:	4822      	ldr	r0, [pc, #136]	; (8005f90 <mem_malloc+0x1dc>)
 8005f06:	f009 fdfb 	bl	800fb00 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005f0a:	8bba      	ldrh	r2, [r7, #28]
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	4413      	add	r3, r2
 8005f10:	3308      	adds	r3, #8
 8005f12:	4a20      	ldr	r2, [pc, #128]	; (8005f94 <mem_malloc+0x1e0>)
 8005f14:	6812      	ldr	r2, [r2, #0]
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d906      	bls.n	8005f28 <mem_malloc+0x174>
 8005f1a:	4b1b      	ldr	r3, [pc, #108]	; (8005f88 <mem_malloc+0x1d4>)
 8005f1c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005f20:	491e      	ldr	r1, [pc, #120]	; (8005f9c <mem_malloc+0x1e8>)
 8005f22:	481b      	ldr	r0, [pc, #108]	; (8005f90 <mem_malloc+0x1dc>)
 8005f24:	f009 fdec 	bl	800fb00 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d006      	beq.n	8005f40 <mem_malloc+0x18c>
 8005f32:	4b15      	ldr	r3, [pc, #84]	; (8005f88 <mem_malloc+0x1d4>)
 8005f34:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005f38:	4919      	ldr	r1, [pc, #100]	; (8005fa0 <mem_malloc+0x1ec>)
 8005f3a:	4815      	ldr	r0, [pc, #84]	; (8005f90 <mem_malloc+0x1dc>)
 8005f3c:	f009 fde0 	bl	800fb00 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d006      	beq.n	8005f58 <mem_malloc+0x1a4>
 8005f4a:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <mem_malloc+0x1d4>)
 8005f4c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005f50:	4914      	ldr	r1, [pc, #80]	; (8005fa4 <mem_malloc+0x1f0>)
 8005f52:	480f      	ldr	r0, [pc, #60]	; (8005f90 <mem_malloc+0x1dc>)
 8005f54:	f009 fdd4 	bl	800fb00 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	e00e      	b.n	8005f7c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005f5e:	8bfb      	ldrh	r3, [r7, #30]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff fc87 	bl	8005874 <ptr_to_mem>
 8005f66:	4603      	mov	r3, r0
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005f6c:	8bfa      	ldrh	r2, [r7, #30]
 8005f6e:	8bbb      	ldrh	r3, [r7, #28]
 8005f70:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8005f74:	429a      	cmp	r2, r3
 8005f76:	f4ff af44 	bcc.w	8005e02 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3720      	adds	r7, #32
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	240002ec 	.word	0x240002ec
 8005f88:	08010fe4 	.word	0x08010fe4
 8005f8c:	0801118c 	.word	0x0801118c
 8005f90:	0801102c 	.word	0x0801102c
 8005f94:	240002e8 	.word	0x240002e8
 8005f98:	080111a0 	.word	0x080111a0
 8005f9c:	080111bc 	.word	0x080111bc
 8005fa0:	080111ec 	.word	0x080111ec
 8005fa4:	0801121c 	.word	0x0801121c

08005fa8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	3303      	adds	r3, #3
 8005fbe:	f023 0303 	bic.w	r3, r3, #3
 8005fc2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	e011      	b.n	8005fee <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3301      	adds	r3, #1
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	885b      	ldrh	r3, [r3, #2]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	dbe7      	blt.n	8005fca <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005ffa:	bf00      	nop
 8005ffc:	bf00      	nop
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800600e:	2300      	movs	r3, #0
 8006010:	80fb      	strh	r3, [r7, #6]
 8006012:	e009      	b.n	8006028 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006014:	88fb      	ldrh	r3, [r7, #6]
 8006016:	4a08      	ldr	r2, [pc, #32]	; (8006038 <memp_init+0x30>)
 8006018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff ffc3 	bl	8005fa8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006022:	88fb      	ldrh	r3, [r7, #6]
 8006024:	3301      	adds	r3, #1
 8006026:	80fb      	strh	r3, [r7, #6]
 8006028:	88fb      	ldrh	r3, [r7, #6]
 800602a:	2b08      	cmp	r3, #8
 800602c:	d9f2      	bls.n	8006014 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	080139f8 	.word	0x080139f8

0800603c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d012      	beq.n	8006078 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	6812      	ldr	r2, [r2, #0]
 800605a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d006      	beq.n	8006074 <do_memp_malloc_pool+0x38>
 8006066:	4b07      	ldr	r3, [pc, #28]	; (8006084 <do_memp_malloc_pool+0x48>)
 8006068:	f44f 728c 	mov.w	r2, #280	; 0x118
 800606c:	4906      	ldr	r1, [pc, #24]	; (8006088 <do_memp_malloc_pool+0x4c>)
 800606e:	4807      	ldr	r0, [pc, #28]	; (800608c <do_memp_malloc_pool+0x50>)
 8006070:	f009 fd46 	bl	800fb00 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	e000      	b.n	800607a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	08011240 	.word	0x08011240
 8006088:	08011270 	.word	0x08011270
 800608c:	08011294 	.word	0x08011294

08006090 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <memp_malloc_pool+0x1c>
 800609e:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <memp_malloc_pool+0x38>)
 80060a0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80060a4:	4909      	ldr	r1, [pc, #36]	; (80060cc <memp_malloc_pool+0x3c>)
 80060a6:	480a      	ldr	r0, [pc, #40]	; (80060d0 <memp_malloc_pool+0x40>)
 80060a8:	f009 fd2a 	bl	800fb00 <iprintf>
  if (desc == NULL) {
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <memp_malloc_pool+0x26>
    return NULL;
 80060b2:	2300      	movs	r3, #0
 80060b4:	e003      	b.n	80060be <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff ffc0 	bl	800603c <do_memp_malloc_pool>
 80060bc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	08011240 	.word	0x08011240
 80060cc:	080112bc 	.word	0x080112bc
 80060d0:	08011294 	.word	0x08011294

080060d4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	4603      	mov	r3, r0
 80060dc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80060de:	79fb      	ldrb	r3, [r7, #7]
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d908      	bls.n	80060f6 <memp_malloc+0x22>
 80060e4:	4b0a      	ldr	r3, [pc, #40]	; (8006110 <memp_malloc+0x3c>)
 80060e6:	f240 1257 	movw	r2, #343	; 0x157
 80060ea:	490a      	ldr	r1, [pc, #40]	; (8006114 <memp_malloc+0x40>)
 80060ec:	480a      	ldr	r0, [pc, #40]	; (8006118 <memp_malloc+0x44>)
 80060ee:	f009 fd07 	bl	800fb00 <iprintf>
 80060f2:	2300      	movs	r3, #0
 80060f4:	e008      	b.n	8006108 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	4a08      	ldr	r2, [pc, #32]	; (800611c <memp_malloc+0x48>)
 80060fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060fe:	4618      	mov	r0, r3
 8006100:	f7ff ff9c 	bl	800603c <do_memp_malloc_pool>
 8006104:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006106:	68fb      	ldr	r3, [r7, #12]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	08011240 	.word	0x08011240
 8006114:	080112d0 	.word	0x080112d0
 8006118:	08011294 	.word	0x08011294
 800611c:	080139f8 	.word	0x080139f8

08006120 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	f003 0303 	and.w	r3, r3, #3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d006      	beq.n	8006142 <do_memp_free_pool+0x22>
 8006134:	4b0a      	ldr	r3, [pc, #40]	; (8006160 <do_memp_free_pool+0x40>)
 8006136:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800613a:	490a      	ldr	r1, [pc, #40]	; (8006164 <do_memp_free_pool+0x44>)
 800613c:	480a      	ldr	r0, [pc, #40]	; (8006168 <do_memp_free_pool+0x48>)
 800613e:	f009 fcdf 	bl	800fb00 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	08011240 	.word	0x08011240
 8006164:	080112f0 	.word	0x080112f0
 8006168:	08011294 	.word	0x08011294

0800616c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d106      	bne.n	800618a <memp_free_pool+0x1e>
 800617c:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <memp_free_pool+0x3c>)
 800617e:	f240 1295 	movw	r2, #405	; 0x195
 8006182:	490a      	ldr	r1, [pc, #40]	; (80061ac <memp_free_pool+0x40>)
 8006184:	480a      	ldr	r0, [pc, #40]	; (80061b0 <memp_free_pool+0x44>)
 8006186:	f009 fcbb 	bl	800fb00 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d007      	beq.n	80061a0 <memp_free_pool+0x34>
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d004      	beq.n	80061a0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006196:	6839      	ldr	r1, [r7, #0]
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7ff ffc1 	bl	8006120 <do_memp_free_pool>
 800619e:	e000      	b.n	80061a2 <memp_free_pool+0x36>
    return;
 80061a0:	bf00      	nop
}
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	08011240 	.word	0x08011240
 80061ac:	080112bc 	.word	0x080112bc
 80061b0:	08011294 	.word	0x08011294

080061b4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	6039      	str	r1, [r7, #0]
 80061be:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	d907      	bls.n	80061d6 <memp_free+0x22>
 80061c6:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <memp_free+0x44>)
 80061c8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80061cc:	490b      	ldr	r1, [pc, #44]	; (80061fc <memp_free+0x48>)
 80061ce:	480c      	ldr	r0, [pc, #48]	; (8006200 <memp_free+0x4c>)
 80061d0:	f009 fc96 	bl	800fb00 <iprintf>
 80061d4:	e00c      	b.n	80061f0 <memp_free+0x3c>

  if (mem == NULL) {
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d008      	beq.n	80061ee <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80061dc:	79fb      	ldrb	r3, [r7, #7]
 80061de:	4a09      	ldr	r2, [pc, #36]	; (8006204 <memp_free+0x50>)
 80061e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff ff9a 	bl	8006120 <do_memp_free_pool>
 80061ec:	e000      	b.n	80061f0 <memp_free+0x3c>
    return;
 80061ee:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	08011240 	.word	0x08011240
 80061fc:	08011310 	.word	0x08011310
 8006200:	08011294 	.word	0x08011294
 8006204:	080139f8 	.word	0x080139f8

08006208 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006208:	b480      	push	{r7}
 800620a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800620c:	bf00      	nop
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
	...

08006218 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d108      	bne.n	800623e <netif_add+0x26>
 800622c:	4b57      	ldr	r3, [pc, #348]	; (800638c <netif_add+0x174>)
 800622e:	f240 1227 	movw	r2, #295	; 0x127
 8006232:	4957      	ldr	r1, [pc, #348]	; (8006390 <netif_add+0x178>)
 8006234:	4857      	ldr	r0, [pc, #348]	; (8006394 <netif_add+0x17c>)
 8006236:	f009 fc63 	bl	800fb00 <iprintf>
 800623a:	2300      	movs	r3, #0
 800623c:	e0a2      	b.n	8006384 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	2b00      	cmp	r3, #0
 8006242:	d108      	bne.n	8006256 <netif_add+0x3e>
 8006244:	4b51      	ldr	r3, [pc, #324]	; (800638c <netif_add+0x174>)
 8006246:	f44f 7294 	mov.w	r2, #296	; 0x128
 800624a:	4953      	ldr	r1, [pc, #332]	; (8006398 <netif_add+0x180>)
 800624c:	4851      	ldr	r0, [pc, #324]	; (8006394 <netif_add+0x17c>)
 800624e:	f009 fc57 	bl	800fb00 <iprintf>
 8006252:	2300      	movs	r3, #0
 8006254:	e096      	b.n	8006384 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800625c:	4b4f      	ldr	r3, [pc, #316]	; (800639c <netif_add+0x184>)
 800625e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006266:	4b4d      	ldr	r3, [pc, #308]	; (800639c <netif_add+0x184>)
 8006268:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006270:	4b4a      	ldr	r3, [pc, #296]	; (800639c <netif_add+0x184>)
 8006272:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4a45      	ldr	r2, [pc, #276]	; (80063a0 <netif_add+0x188>)
 800628a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a3a      	ldr	r2, [r7, #32]
 80062a4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80062a6:	4b3f      	ldr	r3, [pc, #252]	; (80063a4 <netif_add+0x18c>)
 80062a8:	781a      	ldrb	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062b4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 f913 	bl	80064e8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	4798      	blx	r3
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <netif_add+0xba>
    return NULL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	e058      	b.n	8006384 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062d8:	2bff      	cmp	r3, #255	; 0xff
 80062da:	d103      	bne.n	80062e4 <netif_add+0xcc>
        netif->num = 0;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80062e4:	2300      	movs	r3, #0
 80062e6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80062e8:	4b2f      	ldr	r3, [pc, #188]	; (80063a8 <netif_add+0x190>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	e02b      	b.n	8006348 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d106      	bne.n	8006306 <netif_add+0xee>
 80062f8:	4b24      	ldr	r3, [pc, #144]	; (800638c <netif_add+0x174>)
 80062fa:	f240 128b 	movw	r2, #395	; 0x18b
 80062fe:	492b      	ldr	r1, [pc, #172]	; (80063ac <netif_add+0x194>)
 8006300:	4824      	ldr	r0, [pc, #144]	; (8006394 <netif_add+0x17c>)
 8006302:	f009 fbfd 	bl	800fb00 <iprintf>
        num_netifs++;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	3301      	adds	r3, #1
 800630a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	2bff      	cmp	r3, #255	; 0xff
 8006310:	dd06      	ble.n	8006320 <netif_add+0x108>
 8006312:	4b1e      	ldr	r3, [pc, #120]	; (800638c <netif_add+0x174>)
 8006314:	f240 128d 	movw	r2, #397	; 0x18d
 8006318:	4925      	ldr	r1, [pc, #148]	; (80063b0 <netif_add+0x198>)
 800631a:	481e      	ldr	r0, [pc, #120]	; (8006394 <netif_add+0x17c>)
 800631c:	f009 fbf0 	bl	800fb00 <iprintf>
        if (netif2->num == netif->num) {
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800632c:	429a      	cmp	r2, r3
 800632e:	d108      	bne.n	8006342 <netif_add+0x12a>
          netif->num++;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006336:	3301      	adds	r3, #1
 8006338:	b2da      	uxtb	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8006340:	e005      	b.n	800634e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	617b      	str	r3, [r7, #20]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1d0      	bne.n	80062f0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1be      	bne.n	80062d2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800635a:	2bfe      	cmp	r3, #254	; 0xfe
 800635c:	d103      	bne.n	8006366 <netif_add+0x14e>
    netif_num = 0;
 800635e:	4b11      	ldr	r3, [pc, #68]	; (80063a4 <netif_add+0x18c>)
 8006360:	2200      	movs	r2, #0
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	e006      	b.n	8006374 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800636c:	3301      	adds	r3, #1
 800636e:	b2da      	uxtb	r2, r3
 8006370:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <netif_add+0x18c>)
 8006372:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006374:	4b0c      	ldr	r3, [pc, #48]	; (80063a8 <netif_add+0x190>)
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800637c:	4a0a      	ldr	r2, [pc, #40]	; (80063a8 <netif_add+0x190>)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006382:	68fb      	ldr	r3, [r7, #12]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	0801132c 	.word	0x0801132c
 8006390:	080113c0 	.word	0x080113c0
 8006394:	0801137c 	.word	0x0801137c
 8006398:	080113dc 	.word	0x080113dc
 800639c:	08013a5c 	.word	0x08013a5c
 80063a0:	080067c3 	.word	0x080067c3
 80063a4:	240031e4 	.word	0x240031e4
 80063a8:	240031dc 	.word	0x240031dc
 80063ac:	08011400 	.word	0x08011400
 80063b0:	08011414 	.word	0x08011414

080063b4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f002 fbe5 	bl	8008b90 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f007 f819 	bl	800d400 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80063ce:	bf00      	nop
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
	...

080063d8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d106      	bne.n	80063f8 <netif_do_set_ipaddr+0x20>
 80063ea:	4b1d      	ldr	r3, [pc, #116]	; (8006460 <netif_do_set_ipaddr+0x88>)
 80063ec:	f240 12cb 	movw	r2, #459	; 0x1cb
 80063f0:	491c      	ldr	r1, [pc, #112]	; (8006464 <netif_do_set_ipaddr+0x8c>)
 80063f2:	481d      	ldr	r0, [pc, #116]	; (8006468 <netif_do_set_ipaddr+0x90>)
 80063f4:	f009 fb84 	bl	800fb00 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <netif_do_set_ipaddr+0x34>
 80063fe:	4b18      	ldr	r3, [pc, #96]	; (8006460 <netif_do_set_ipaddr+0x88>)
 8006400:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006404:	4917      	ldr	r1, [pc, #92]	; (8006464 <netif_do_set_ipaddr+0x8c>)
 8006406:	4818      	ldr	r0, [pc, #96]	; (8006468 <netif_do_set_ipaddr+0x90>)
 8006408:	f009 fb7a 	bl	800fb00 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	3304      	adds	r3, #4
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d01c      	beq.n	8006454 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3304      	adds	r3, #4
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800642a:	f107 0314 	add.w	r3, r7, #20
 800642e:	4619      	mov	r1, r3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff ffbf 	bl	80063b4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <netif_do_set_ipaddr+0x6a>
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	e000      	b.n	8006444 <netif_do_set_ipaddr+0x6c>
 8006442:	2300      	movs	r3, #0
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006448:	2101      	movs	r1, #1
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 f8d2 	bl	80065f4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006450:	2301      	movs	r3, #1
 8006452:	e000      	b.n	8006456 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	0801132c 	.word	0x0801132c
 8006464:	08011444 	.word	0x08011444
 8006468:	0801137c 	.word	0x0801137c

0800646c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	3308      	adds	r3, #8
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	429a      	cmp	r2, r3
 8006484:	d00a      	beq.n	800649c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <netif_do_set_netmask+0x26>
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	e000      	b.n	8006494 <netif_do_set_netmask+0x28>
 8006492:	2300      	movs	r3, #0
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006498:	2301      	movs	r3, #1
 800649a:	e000      	b.n	800649e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b085      	sub	sp, #20
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	60f8      	str	r0, [r7, #12]
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	330c      	adds	r3, #12
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d00a      	beq.n	80064da <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <netif_do_set_gw+0x26>
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	e000      	b.n	80064d2 <netif_do_set_gw+0x28>
 80064d0:	2300      	movs	r3, #0
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b088      	sub	sp, #32
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80064f6:	2300      	movs	r3, #0
 80064f8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80064fa:	2300      	movs	r3, #0
 80064fc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006504:	4b1c      	ldr	r3, [pc, #112]	; (8006578 <netif_set_addr+0x90>)
 8006506:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800650e:	4b1a      	ldr	r3, [pc, #104]	; (8006578 <netif_set_addr+0x90>)
 8006510:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006518:	4b17      	ldr	r3, [pc, #92]	; (8006578 <netif_set_addr+0x90>)
 800651a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <netif_set_addr+0x42>
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <netif_set_addr+0x46>
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <netif_set_addr+0x48>
 800652e:	2300      	movs	r3, #0
 8006530:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d006      	beq.n	8006546 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006538:	f107 0310 	add.w	r3, r7, #16
 800653c:	461a      	mov	r2, r3
 800653e:	68b9      	ldr	r1, [r7, #8]
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f7ff ff49 	bl	80063d8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006546:	69fa      	ldr	r2, [r7, #28]
 8006548:	6879      	ldr	r1, [r7, #4]
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f7ff ff8e 	bl	800646c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f7ff ffa8 	bl	80064aa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d106      	bne.n	800656e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006560:	f107 0310 	add.w	r3, r7, #16
 8006564:	461a      	mov	r2, r3
 8006566:	68b9      	ldr	r1, [r7, #8]
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f7ff ff35 	bl	80063d8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800656e:	bf00      	nop
 8006570:	3720      	adds	r7, #32
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	08013a5c 	.word	0x08013a5c

0800657c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006584:	4a04      	ldr	r2, [pc, #16]	; (8006598 <netif_set_default+0x1c>)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	240031e0 	.word	0x240031e0

0800659c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d107      	bne.n	80065ba <netif_set_up+0x1e>
 80065aa:	4b0f      	ldr	r3, [pc, #60]	; (80065e8 <netif_set_up+0x4c>)
 80065ac:	f44f 7254 	mov.w	r2, #848	; 0x350
 80065b0:	490e      	ldr	r1, [pc, #56]	; (80065ec <netif_set_up+0x50>)
 80065b2:	480f      	ldr	r0, [pc, #60]	; (80065f0 <netif_set_up+0x54>)
 80065b4:	f009 faa4 	bl	800fb00 <iprintf>
 80065b8:	e013      	b.n	80065e2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10c      	bne.n	80065e2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80065ce:	f043 0301 	orr.w	r3, r3, #1
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80065da:	2103      	movs	r1, #3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f809 	bl	80065f4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	0801132c 	.word	0x0801132c
 80065ec:	080114b4 	.word	0x080114b4
 80065f0:	0801137c 	.word	0x0801137c

080065f4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	460b      	mov	r3, r1
 80065fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d106      	bne.n	8006614 <netif_issue_reports+0x20>
 8006606:	4b18      	ldr	r3, [pc, #96]	; (8006668 <netif_issue_reports+0x74>)
 8006608:	f240 326d 	movw	r2, #877	; 0x36d
 800660c:	4917      	ldr	r1, [pc, #92]	; (800666c <netif_issue_reports+0x78>)
 800660e:	4818      	ldr	r0, [pc, #96]	; (8006670 <netif_issue_reports+0x7c>)
 8006610:	f009 fa76 	bl	800fb00 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800661a:	f003 0304 	and.w	r3, r3, #4
 800661e:	2b00      	cmp	r3, #0
 8006620:	d01e      	beq.n	8006660 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006628:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800662c:	2b00      	cmp	r3, #0
 800662e:	d017      	beq.n	8006660 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d013      	beq.n	8006662 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3304      	adds	r3, #4
 800663e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00e      	beq.n	8006662 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d007      	beq.n	8006662 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3304      	adds	r3, #4
 8006656:	4619      	mov	r1, r3
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f007 fe3b 	bl	800e2d4 <etharp_request>
 800665e:	e000      	b.n	8006662 <netif_issue_reports+0x6e>
    return;
 8006660:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	0801132c 	.word	0x0801132c
 800666c:	080114d0 	.word	0x080114d0
 8006670:	0801137c 	.word	0x0801137c

08006674 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d107      	bne.n	8006692 <netif_set_down+0x1e>
 8006682:	4b12      	ldr	r3, [pc, #72]	; (80066cc <netif_set_down+0x58>)
 8006684:	f240 329b 	movw	r2, #923	; 0x39b
 8006688:	4911      	ldr	r1, [pc, #68]	; (80066d0 <netif_set_down+0x5c>)
 800668a:	4812      	ldr	r0, [pc, #72]	; (80066d4 <netif_set_down+0x60>)
 800668c:	f009 fa38 	bl	800fb00 <iprintf>
 8006690:	e019      	b.n	80066c6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b00      	cmp	r3, #0
 800669e:	d012      	beq.n	80066c6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80066a6:	f023 0301 	bic.w	r3, r3, #1
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f007 f9c5 	bl	800da50 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	0801132c 	.word	0x0801132c
 80066d0:	080114f4 	.word	0x080114f4
 80066d4:	0801137c 	.word	0x0801137c

080066d8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d107      	bne.n	80066f6 <netif_set_link_up+0x1e>
 80066e6:	4b13      	ldr	r3, [pc, #76]	; (8006734 <netif_set_link_up+0x5c>)
 80066e8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80066ec:	4912      	ldr	r1, [pc, #72]	; (8006738 <netif_set_link_up+0x60>)
 80066ee:	4813      	ldr	r0, [pc, #76]	; (800673c <netif_set_link_up+0x64>)
 80066f0:	f009 fa06 	bl	800fb00 <iprintf>
 80066f4:	e01b      	b.n	800672e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80066fc:	f003 0304 	and.w	r3, r3, #4
 8006700:	2b00      	cmp	r3, #0
 8006702:	d114      	bne.n	800672e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800670a:	f043 0304 	orr.w	r3, r3, #4
 800670e:	b2da      	uxtb	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006716:	2103      	movs	r1, #3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff ff6b 	bl	80065f4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <netif_set_link_up+0x56>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	0801132c 	.word	0x0801132c
 8006738:	08011514 	.word	0x08011514
 800673c:	0801137c 	.word	0x0801137c

08006740 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d107      	bne.n	800675e <netif_set_link_down+0x1e>
 800674e:	4b11      	ldr	r3, [pc, #68]	; (8006794 <netif_set_link_down+0x54>)
 8006750:	f240 4206 	movw	r2, #1030	; 0x406
 8006754:	4910      	ldr	r1, [pc, #64]	; (8006798 <netif_set_link_down+0x58>)
 8006756:	4811      	ldr	r0, [pc, #68]	; (800679c <netif_set_link_down+0x5c>)
 8006758:	f009 f9d2 	bl	800fb00 <iprintf>
 800675c:	e017      	b.n	800678e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006764:	f003 0304 	and.w	r3, r3, #4
 8006768:	2b00      	cmp	r3, #0
 800676a:	d010      	beq.n	800678e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006772:	f023 0304 	bic.w	r3, r3, #4
 8006776:	b2da      	uxtb	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <netif_set_link_down+0x4e>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	0801132c 	.word	0x0801132c
 8006798:	08011538 	.word	0x08011538
 800679c:	0801137c 	.word	0x0801137c

080067a0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	61da      	str	r2, [r3, #28]
  }
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b085      	sub	sp, #20
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	60f8      	str	r0, [r7, #12]
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80067ce:	f06f 030b 	mvn.w	r3, #11
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
	...

080067e0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	4603      	mov	r3, r0
 80067e8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80067ea:	79fb      	ldrb	r3, [r7, #7]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d013      	beq.n	8006818 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80067f0:	4b0d      	ldr	r3, [pc, #52]	; (8006828 <netif_get_by_index+0x48>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	60fb      	str	r3, [r7, #12]
 80067f6:	e00c      	b.n	8006812 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067fe:	3301      	adds	r3, #1
 8006800:	b2db      	uxtb	r3, r3
 8006802:	79fa      	ldrb	r2, [r7, #7]
 8006804:	429a      	cmp	r2, r3
 8006806:	d101      	bne.n	800680c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	e006      	b.n	800681a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	60fb      	str	r3, [r7, #12]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1ef      	bne.n	80067f8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	240031dc 	.word	0x240031dc

0800682c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006832:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <pbuf_free_ooseq+0x38>)
 8006834:	2200      	movs	r2, #0
 8006836:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006838:	4b0b      	ldr	r3, [pc, #44]	; (8006868 <pbuf_free_ooseq+0x3c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	607b      	str	r3, [r7, #4]
 800683e:	e00a      	b.n	8006856 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006844:	2b00      	cmp	r3, #0
 8006846:	d003      	beq.n	8006850 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f002 f9df 	bl	8008c0c <tcp_free_ooseq>
      return;
 800684e:	e005      	b.n	800685c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	607b      	str	r3, [r7, #4]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1f1      	bne.n	8006840 <pbuf_free_ooseq+0x14>
    }
  }
}
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	240031e5 	.word	0x240031e5
 8006868:	240031f4 	.word	0x240031f4

0800686c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006870:	4b03      	ldr	r3, [pc, #12]	; (8006880 <pbuf_pool_is_empty+0x14>)
 8006872:	2201      	movs	r2, #1
 8006874:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006876:	bf00      	nop
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	240031e5 	.word	0x240031e5

08006884 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	4611      	mov	r1, r2
 8006890:	461a      	mov	r2, r3
 8006892:	460b      	mov	r3, r1
 8006894:	80fb      	strh	r3, [r7, #6]
 8006896:	4613      	mov	r3, r2
 8006898:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	88fa      	ldrh	r2, [r7, #6]
 80068aa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	88ba      	ldrh	r2, [r7, #4]
 80068b0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80068b2:	8b3b      	ldrh	r3, [r7, #24]
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	7f3a      	ldrb	r2, [r7, #28]
 80068be:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2201      	movs	r2, #1
 80068c4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	73da      	strb	r2, [r3, #15]
}
 80068cc:	bf00      	nop
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08c      	sub	sp, #48	; 0x30
 80068dc:	af02      	add	r7, sp, #8
 80068de:	4603      	mov	r3, r0
 80068e0:	71fb      	strb	r3, [r7, #7]
 80068e2:	460b      	mov	r3, r1
 80068e4:	80bb      	strh	r3, [r7, #4]
 80068e6:	4613      	mov	r3, r2
 80068e8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80068ea:	79fb      	ldrb	r3, [r7, #7]
 80068ec:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80068ee:	887b      	ldrh	r3, [r7, #2]
 80068f0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80068f4:	d07f      	beq.n	80069f6 <pbuf_alloc+0x11e>
 80068f6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80068fa:	f300 80c8 	bgt.w	8006a8e <pbuf_alloc+0x1b6>
 80068fe:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006902:	d010      	beq.n	8006926 <pbuf_alloc+0x4e>
 8006904:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006908:	f300 80c1 	bgt.w	8006a8e <pbuf_alloc+0x1b6>
 800690c:	2b01      	cmp	r3, #1
 800690e:	d002      	beq.n	8006916 <pbuf_alloc+0x3e>
 8006910:	2b41      	cmp	r3, #65	; 0x41
 8006912:	f040 80bc 	bne.w	8006a8e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006916:	887a      	ldrh	r2, [r7, #2]
 8006918:	88bb      	ldrh	r3, [r7, #4]
 800691a:	4619      	mov	r1, r3
 800691c:	2000      	movs	r0, #0
 800691e:	f000 f8d1 	bl	8006ac4 <pbuf_alloc_reference>
 8006922:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8006924:	e0bd      	b.n	8006aa2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006926:	2300      	movs	r3, #0
 8006928:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800692a:	2300      	movs	r3, #0
 800692c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800692e:	88bb      	ldrh	r3, [r7, #4]
 8006930:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006932:	2008      	movs	r0, #8
 8006934:	f7ff fbce 	bl	80060d4 <memp_malloc>
 8006938:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d109      	bne.n	8006954 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8006940:	f7ff ff94 	bl	800686c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	2b00      	cmp	r3, #0
 8006948:	d002      	beq.n	8006950 <pbuf_alloc+0x78>
            pbuf_free(p);
 800694a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800694c:	f000 faa8 	bl	8006ea0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006950:	2300      	movs	r3, #0
 8006952:	e0a7      	b.n	8006aa4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006954:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006956:	3303      	adds	r3, #3
 8006958:	b29b      	uxth	r3, r3
 800695a:	f023 0303 	bic.w	r3, r3, #3
 800695e:	b29b      	uxth	r3, r3
 8006960:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8006964:	b29b      	uxth	r3, r3
 8006966:	8b7a      	ldrh	r2, [r7, #26]
 8006968:	4293      	cmp	r3, r2
 800696a:	bf28      	it	cs
 800696c:	4613      	movcs	r3, r2
 800696e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006970:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006972:	3310      	adds	r3, #16
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	4413      	add	r3, r2
 8006978:	3303      	adds	r3, #3
 800697a:	f023 0303 	bic.w	r3, r3, #3
 800697e:	4618      	mov	r0, r3
 8006980:	89f9      	ldrh	r1, [r7, #14]
 8006982:	8b7a      	ldrh	r2, [r7, #26]
 8006984:	2300      	movs	r3, #0
 8006986:	9301      	str	r3, [sp, #4]
 8006988:	887b      	ldrh	r3, [r7, #2]
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	460b      	mov	r3, r1
 800698e:	4601      	mov	r1, r0
 8006990:	6938      	ldr	r0, [r7, #16]
 8006992:	f7ff ff77 	bl	8006884 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f003 0303 	and.w	r3, r3, #3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d006      	beq.n	80069b0 <pbuf_alloc+0xd8>
 80069a2:	4b42      	ldr	r3, [pc, #264]	; (8006aac <pbuf_alloc+0x1d4>)
 80069a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069a8:	4941      	ldr	r1, [pc, #260]	; (8006ab0 <pbuf_alloc+0x1d8>)
 80069aa:	4842      	ldr	r0, [pc, #264]	; (8006ab4 <pbuf_alloc+0x1dc>)
 80069ac:	f009 f8a8 	bl	800fb00 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80069b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069b2:	3303      	adds	r3, #3
 80069b4:	f023 0303 	bic.w	r3, r3, #3
 80069b8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80069bc:	d106      	bne.n	80069cc <pbuf_alloc+0xf4>
 80069be:	4b3b      	ldr	r3, [pc, #236]	; (8006aac <pbuf_alloc+0x1d4>)
 80069c0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80069c4:	493c      	ldr	r1, [pc, #240]	; (8006ab8 <pbuf_alloc+0x1e0>)
 80069c6:	483b      	ldr	r0, [pc, #236]	; (8006ab4 <pbuf_alloc+0x1dc>)
 80069c8:	f009 f89a 	bl	800fb00 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d102      	bne.n	80069d8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	627b      	str	r3, [r7, #36]	; 0x24
 80069d6:	e002      	b.n	80069de <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80069e2:	8b7a      	ldrh	r2, [r7, #26]
 80069e4:	89fb      	ldrh	r3, [r7, #14]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80069ea:	2300      	movs	r3, #0
 80069ec:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80069ee:	8b7b      	ldrh	r3, [r7, #26]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d19e      	bne.n	8006932 <pbuf_alloc+0x5a>
      break;
 80069f4:	e055      	b.n	8006aa2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80069f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069f8:	3303      	adds	r3, #3
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	f023 0303 	bic.w	r3, r3, #3
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	88bb      	ldrh	r3, [r7, #4]
 8006a04:	3303      	adds	r3, #3
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	f023 0303 	bic.w	r3, r3, #3
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	4413      	add	r3, r2
 8006a10:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006a12:	8b3b      	ldrh	r3, [r7, #24]
 8006a14:	3310      	adds	r3, #16
 8006a16:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006a18:	8b3a      	ldrh	r2, [r7, #24]
 8006a1a:	88bb      	ldrh	r3, [r7, #4]
 8006a1c:	3303      	adds	r3, #3
 8006a1e:	f023 0303 	bic.w	r3, r3, #3
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d306      	bcc.n	8006a34 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006a26:	8afa      	ldrh	r2, [r7, #22]
 8006a28:	88bb      	ldrh	r3, [r7, #4]
 8006a2a:	3303      	adds	r3, #3
 8006a2c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d201      	bcs.n	8006a38 <pbuf_alloc+0x160>
        return NULL;
 8006a34:	2300      	movs	r3, #0
 8006a36:	e035      	b.n	8006aa4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006a38:	8afb      	ldrh	r3, [r7, #22]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff f9ba 	bl	8005db4 <mem_malloc>
 8006a40:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8006a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <pbuf_alloc+0x174>
        return NULL;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	e02b      	b.n	8006aa4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006a4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a4e:	3310      	adds	r3, #16
 8006a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a52:	4413      	add	r3, r2
 8006a54:	3303      	adds	r3, #3
 8006a56:	f023 0303 	bic.w	r3, r3, #3
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	88b9      	ldrh	r1, [r7, #4]
 8006a5e:	88ba      	ldrh	r2, [r7, #4]
 8006a60:	2300      	movs	r3, #0
 8006a62:	9301      	str	r3, [sp, #4]
 8006a64:	887b      	ldrh	r3, [r7, #2]
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4601      	mov	r1, r0
 8006a6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a6e:	f7ff ff09 	bl	8006884 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d010      	beq.n	8006aa0 <pbuf_alloc+0x1c8>
 8006a7e:	4b0b      	ldr	r3, [pc, #44]	; (8006aac <pbuf_alloc+0x1d4>)
 8006a80:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006a84:	490d      	ldr	r1, [pc, #52]	; (8006abc <pbuf_alloc+0x1e4>)
 8006a86:	480b      	ldr	r0, [pc, #44]	; (8006ab4 <pbuf_alloc+0x1dc>)
 8006a88:	f009 f83a 	bl	800fb00 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006a8c:	e008      	b.n	8006aa0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006a8e:	4b07      	ldr	r3, [pc, #28]	; (8006aac <pbuf_alloc+0x1d4>)
 8006a90:	f240 1227 	movw	r2, #295	; 0x127
 8006a94:	490a      	ldr	r1, [pc, #40]	; (8006ac0 <pbuf_alloc+0x1e8>)
 8006a96:	4807      	ldr	r0, [pc, #28]	; (8006ab4 <pbuf_alloc+0x1dc>)
 8006a98:	f009 f832 	bl	800fb00 <iprintf>
      return NULL;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	e001      	b.n	8006aa4 <pbuf_alloc+0x1cc>
      break;
 8006aa0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3728      	adds	r7, #40	; 0x28
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	0801155c 	.word	0x0801155c
 8006ab0:	0801158c 	.word	0x0801158c
 8006ab4:	080115bc 	.word	0x080115bc
 8006ab8:	080115e4 	.word	0x080115e4
 8006abc:	08011618 	.word	0x08011618
 8006ac0:	08011644 	.word	0x08011644

08006ac4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af02      	add	r7, sp, #8
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	807b      	strh	r3, [r7, #2]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006ad4:	883b      	ldrh	r3, [r7, #0]
 8006ad6:	2b41      	cmp	r3, #65	; 0x41
 8006ad8:	d009      	beq.n	8006aee <pbuf_alloc_reference+0x2a>
 8006ada:	883b      	ldrh	r3, [r7, #0]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d006      	beq.n	8006aee <pbuf_alloc_reference+0x2a>
 8006ae0:	4b0f      	ldr	r3, [pc, #60]	; (8006b20 <pbuf_alloc_reference+0x5c>)
 8006ae2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006ae6:	490f      	ldr	r1, [pc, #60]	; (8006b24 <pbuf_alloc_reference+0x60>)
 8006ae8:	480f      	ldr	r0, [pc, #60]	; (8006b28 <pbuf_alloc_reference+0x64>)
 8006aea:	f009 f809 	bl	800fb00 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006aee:	2007      	movs	r0, #7
 8006af0:	f7ff faf0 	bl	80060d4 <memp_malloc>
 8006af4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006afc:	2300      	movs	r3, #0
 8006afe:	e00b      	b.n	8006b18 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006b00:	8879      	ldrh	r1, [r7, #2]
 8006b02:	887a      	ldrh	r2, [r7, #2]
 8006b04:	2300      	movs	r3, #0
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	883b      	ldrh	r3, [r7, #0]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	6879      	ldr	r1, [r7, #4]
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f7ff feb7 	bl	8006884 <pbuf_init_alloced_pbuf>
  return p;
 8006b16:	68fb      	ldr	r3, [r7, #12]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	0801155c 	.word	0x0801155c
 8006b24:	08011660 	.word	0x08011660
 8006b28:	080115bc 	.word	0x080115bc

08006b2c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b088      	sub	sp, #32
 8006b30:	af02      	add	r7, sp, #8
 8006b32:	607b      	str	r3, [r7, #4]
 8006b34:	4603      	mov	r3, r0
 8006b36:	73fb      	strb	r3, [r7, #15]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	81bb      	strh	r3, [r7, #12]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006b44:	8a7b      	ldrh	r3, [r7, #18]
 8006b46:	3303      	adds	r3, #3
 8006b48:	f023 0203 	bic.w	r2, r3, #3
 8006b4c:	89bb      	ldrh	r3, [r7, #12]
 8006b4e:	441a      	add	r2, r3
 8006b50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d901      	bls.n	8006b5a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006b56:	2300      	movs	r3, #0
 8006b58:	e018      	b.n	8006b8c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d007      	beq.n	8006b70 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006b60:	8a7b      	ldrh	r3, [r7, #18]
 8006b62:	3303      	adds	r3, #3
 8006b64:	f023 0303 	bic.w	r3, r3, #3
 8006b68:	6a3a      	ldr	r2, [r7, #32]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	e001      	b.n	8006b74 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006b70:	2300      	movs	r3, #0
 8006b72:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	89b9      	ldrh	r1, [r7, #12]
 8006b78:	89ba      	ldrh	r2, [r7, #12]
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	9301      	str	r3, [sp, #4]
 8006b7e:	897b      	ldrh	r3, [r7, #10]
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	460b      	mov	r3, r1
 8006b84:	6979      	ldr	r1, [r7, #20]
 8006b86:	f7ff fe7d 	bl	8006884 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006b8a:	687b      	ldr	r3, [r7, #4]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d106      	bne.n	8006bb4 <pbuf_realloc+0x20>
 8006ba6:	4b3a      	ldr	r3, [pc, #232]	; (8006c90 <pbuf_realloc+0xfc>)
 8006ba8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006bac:	4939      	ldr	r1, [pc, #228]	; (8006c94 <pbuf_realloc+0x100>)
 8006bae:	483a      	ldr	r0, [pc, #232]	; (8006c98 <pbuf_realloc+0x104>)
 8006bb0:	f008 ffa6 	bl	800fb00 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	891b      	ldrh	r3, [r3, #8]
 8006bb8:	887a      	ldrh	r2, [r7, #2]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d263      	bcs.n	8006c86 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	891a      	ldrh	r2, [r3, #8]
 8006bc2:	887b      	ldrh	r3, [r7, #2]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006bc8:	887b      	ldrh	r3, [r7, #2]
 8006bca:	817b      	strh	r3, [r7, #10]
  q = p;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006bd0:	e018      	b.n	8006c04 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	895b      	ldrh	r3, [r3, #10]
 8006bd6:	897a      	ldrh	r2, [r7, #10]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	891a      	ldrh	r2, [r3, #8]
 8006be0:	893b      	ldrh	r3, [r7, #8]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d106      	bne.n	8006c04 <pbuf_realloc+0x70>
 8006bf6:	4b26      	ldr	r3, [pc, #152]	; (8006c90 <pbuf_realloc+0xfc>)
 8006bf8:	f240 12af 	movw	r2, #431	; 0x1af
 8006bfc:	4927      	ldr	r1, [pc, #156]	; (8006c9c <pbuf_realloc+0x108>)
 8006bfe:	4826      	ldr	r0, [pc, #152]	; (8006c98 <pbuf_realloc+0x104>)
 8006c00:	f008 ff7e 	bl	800fb00 <iprintf>
  while (rem_len > q->len) {
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	895b      	ldrh	r3, [r3, #10]
 8006c08:	897a      	ldrh	r2, [r7, #10]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d8e1      	bhi.n	8006bd2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	7b1b      	ldrb	r3, [r3, #12]
 8006c12:	f003 030f 	and.w	r3, r3, #15
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d121      	bne.n	8006c5e <pbuf_realloc+0xca>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	895b      	ldrh	r3, [r3, #10]
 8006c1e:	897a      	ldrh	r2, [r7, #10]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d01c      	beq.n	8006c5e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	7b5b      	ldrb	r3, [r3, #13]
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d116      	bne.n	8006c5e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	897b      	ldrh	r3, [r7, #10]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	4619      	mov	r1, r3
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f7fe ffba 	bl	8005bbc <mem_trim>
 8006c48:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d106      	bne.n	8006c5e <pbuf_realloc+0xca>
 8006c50:	4b0f      	ldr	r3, [pc, #60]	; (8006c90 <pbuf_realloc+0xfc>)
 8006c52:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006c56:	4912      	ldr	r1, [pc, #72]	; (8006ca0 <pbuf_realloc+0x10c>)
 8006c58:	480f      	ldr	r0, [pc, #60]	; (8006c98 <pbuf_realloc+0x104>)
 8006c5a:	f008 ff51 	bl	800fb00 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	897a      	ldrh	r2, [r7, #10]
 8006c62:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	895a      	ldrh	r2, [r3, #10]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 f911 	bl	8006ea0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	e000      	b.n	8006c88 <pbuf_realloc+0xf4>
    return;
 8006c86:	bf00      	nop

}
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	0801155c 	.word	0x0801155c
 8006c94:	08011674 	.word	0x08011674
 8006c98:	080115bc 	.word	0x080115bc
 8006c9c:	0801168c 	.word	0x0801168c
 8006ca0:	080116a4 	.word	0x080116a4

08006ca4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d106      	bne.n	8006cc6 <pbuf_add_header_impl+0x22>
 8006cb8:	4b2b      	ldr	r3, [pc, #172]	; (8006d68 <pbuf_add_header_impl+0xc4>)
 8006cba:	f240 12df 	movw	r2, #479	; 0x1df
 8006cbe:	492b      	ldr	r1, [pc, #172]	; (8006d6c <pbuf_add_header_impl+0xc8>)
 8006cc0:	482b      	ldr	r0, [pc, #172]	; (8006d70 <pbuf_add_header_impl+0xcc>)
 8006cc2:	f008 ff1d 	bl	800fb00 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <pbuf_add_header_impl+0x30>
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cd2:	d301      	bcc.n	8006cd8 <pbuf_add_header_impl+0x34>
    return 1;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e043      	b.n	8006d60 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <pbuf_add_header_impl+0x3e>
    return 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	e03e      	b.n	8006d60 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	891a      	ldrh	r2, [r3, #8]
 8006cea:	8a7b      	ldrh	r3, [r7, #18]
 8006cec:	4413      	add	r3, r2
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	8a7a      	ldrh	r2, [r7, #18]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d901      	bls.n	8006cfa <pbuf_add_header_impl+0x56>
    return 1;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e032      	b.n	8006d60 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	7b1b      	ldrb	r3, [r3, #12]
 8006cfe:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006d00:	8a3b      	ldrh	r3, [r7, #16]
 8006d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00c      	beq.n	8006d24 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	425b      	negs	r3, r3
 8006d12:	4413      	add	r3, r2
 8006d14:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	3310      	adds	r3, #16
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d20d      	bcs.n	8006d3c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e01d      	b.n	8006d60 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006d24:	79fb      	ldrb	r3, [r7, #7]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d006      	beq.n	8006d38 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	425b      	negs	r3, r3
 8006d32:	4413      	add	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]
 8006d36:	e001      	b.n	8006d3c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e011      	b.n	8006d60 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	895a      	ldrh	r2, [r3, #10]
 8006d46:	8a7b      	ldrh	r3, [r7, #18]
 8006d48:	4413      	add	r3, r2
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	891a      	ldrh	r2, [r3, #8]
 8006d54:	8a7b      	ldrh	r3, [r7, #18]
 8006d56:	4413      	add	r3, r2
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	811a      	strh	r2, [r3, #8]


  return 0;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3718      	adds	r7, #24
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	0801155c 	.word	0x0801155c
 8006d6c:	080116c0 	.word	0x080116c0
 8006d70:	080115bc 	.word	0x080115bc

08006d74 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006d7e:	2200      	movs	r2, #0
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff ff8e 	bl	8006ca4 <pbuf_add_header_impl>
 8006d88:	4603      	mov	r3, r0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
	...

08006d94 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d106      	bne.n	8006db2 <pbuf_remove_header+0x1e>
 8006da4:	4b20      	ldr	r3, [pc, #128]	; (8006e28 <pbuf_remove_header+0x94>)
 8006da6:	f240 224b 	movw	r2, #587	; 0x24b
 8006daa:	4920      	ldr	r1, [pc, #128]	; (8006e2c <pbuf_remove_header+0x98>)
 8006dac:	4820      	ldr	r0, [pc, #128]	; (8006e30 <pbuf_remove_header+0x9c>)
 8006dae:	f008 fea7 	bl	800fb00 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d003      	beq.n	8006dc0 <pbuf_remove_header+0x2c>
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dbe:	d301      	bcc.n	8006dc4 <pbuf_remove_header+0x30>
    return 1;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e02c      	b.n	8006e1e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <pbuf_remove_header+0x3a>
    return 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e027      	b.n	8006e1e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	895b      	ldrh	r3, [r3, #10]
 8006dd6:	89fa      	ldrh	r2, [r7, #14]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d908      	bls.n	8006dee <pbuf_remove_header+0x5a>
 8006ddc:	4b12      	ldr	r3, [pc, #72]	; (8006e28 <pbuf_remove_header+0x94>)
 8006dde:	f240 2255 	movw	r2, #597	; 0x255
 8006de2:	4914      	ldr	r1, [pc, #80]	; (8006e34 <pbuf_remove_header+0xa0>)
 8006de4:	4812      	ldr	r0, [pc, #72]	; (8006e30 <pbuf_remove_header+0x9c>)
 8006de6:	f008 fe8b 	bl	800fb00 <iprintf>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e017      	b.n	8006e1e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	441a      	add	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	895a      	ldrh	r2, [r3, #10]
 8006e04:	89fb      	ldrh	r3, [r7, #14]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	891a      	ldrh	r2, [r3, #8]
 8006e12:	89fb      	ldrh	r3, [r7, #14]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	0801155c 	.word	0x0801155c
 8006e2c:	080116c0 	.word	0x080116c0
 8006e30:	080115bc 	.word	0x080115bc
 8006e34:	080116cc 	.word	0x080116cc

08006e38 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	807b      	strh	r3, [r7, #2]
 8006e44:	4613      	mov	r3, r2
 8006e46:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006e48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	da08      	bge.n	8006e62 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006e50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006e54:	425b      	negs	r3, r3
 8006e56:	4619      	mov	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f7ff ff9b 	bl	8006d94 <pbuf_remove_header>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	e007      	b.n	8006e72 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006e62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006e66:	787a      	ldrb	r2, [r7, #1]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff ff1a 	bl	8006ca4 <pbuf_add_header_impl>
 8006e70:	4603      	mov	r3, r0
  }
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	460b      	mov	r3, r1
 8006e84:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006e86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7ff ffd2 	bl	8006e38 <pbuf_header_impl>
 8006e94:	4603      	mov	r3, r0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
	...

08006ea0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10b      	bne.n	8006ec6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d106      	bne.n	8006ec2 <pbuf_free+0x22>
 8006eb4:	4b38      	ldr	r3, [pc, #224]	; (8006f98 <pbuf_free+0xf8>)
 8006eb6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006eba:	4938      	ldr	r1, [pc, #224]	; (8006f9c <pbuf_free+0xfc>)
 8006ebc:	4838      	ldr	r0, [pc, #224]	; (8006fa0 <pbuf_free+0x100>)
 8006ebe:	f008 fe1f 	bl	800fb00 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e063      	b.n	8006f8e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006eca:	e05c      	b.n	8006f86 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	7b9b      	ldrb	r3, [r3, #14]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d106      	bne.n	8006ee2 <pbuf_free+0x42>
 8006ed4:	4b30      	ldr	r3, [pc, #192]	; (8006f98 <pbuf_free+0xf8>)
 8006ed6:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006eda:	4932      	ldr	r1, [pc, #200]	; (8006fa4 <pbuf_free+0x104>)
 8006edc:	4830      	ldr	r0, [pc, #192]	; (8006fa0 <pbuf_free+0x100>)
 8006ede:	f008 fe0f 	bl	800fb00 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	7b9b      	ldrb	r3, [r3, #14]
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	739a      	strb	r2, [r3, #14]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	7b9b      	ldrb	r3, [r3, #14]
 8006ef2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006ef4:	7dbb      	ldrb	r3, [r7, #22]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d143      	bne.n	8006f82 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	7b1b      	ldrb	r3, [r3, #12]
 8006f04:	f003 030f 	and.w	r3, r3, #15
 8006f08:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	7b5b      	ldrb	r3, [r3, #13]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d011      	beq.n	8006f3a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d106      	bne.n	8006f30 <pbuf_free+0x90>
 8006f22:	4b1d      	ldr	r3, [pc, #116]	; (8006f98 <pbuf_free+0xf8>)
 8006f24:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006f28:	491f      	ldr	r1, [pc, #124]	; (8006fa8 <pbuf_free+0x108>)
 8006f2a:	481d      	ldr	r0, [pc, #116]	; (8006fa0 <pbuf_free+0x100>)
 8006f2c:	f008 fde8 	bl	800fb00 <iprintf>
        pc->custom_free_function(p);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	4798      	blx	r3
 8006f38:	e01d      	b.n	8006f76 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d104      	bne.n	8006f4a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	2008      	movs	r0, #8
 8006f44:	f7ff f936 	bl	80061b4 <memp_free>
 8006f48:	e015      	b.n	8006f76 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d104      	bne.n	8006f5a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006f50:	6879      	ldr	r1, [r7, #4]
 8006f52:	2007      	movs	r0, #7
 8006f54:	f7ff f92e 	bl	80061b4 <memp_free>
 8006f58:	e00d      	b.n	8006f76 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d103      	bne.n	8006f68 <pbuf_free+0xc8>
          mem_free(p);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7fe fdc1 	bl	8005ae8 <mem_free>
 8006f66:	e006      	b.n	8006f76 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006f68:	4b0b      	ldr	r3, [pc, #44]	; (8006f98 <pbuf_free+0xf8>)
 8006f6a:	f240 320f 	movw	r2, #783	; 0x30f
 8006f6e:	490f      	ldr	r1, [pc, #60]	; (8006fac <pbuf_free+0x10c>)
 8006f70:	480b      	ldr	r0, [pc, #44]	; (8006fa0 <pbuf_free+0x100>)
 8006f72:	f008 fdc5 	bl	800fb00 <iprintf>
        }
      }
      count++;
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	607b      	str	r3, [r7, #4]
 8006f80:	e001      	b.n	8006f86 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d19f      	bne.n	8006ecc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	0801155c 	.word	0x0801155c
 8006f9c:	080116c0 	.word	0x080116c0
 8006fa0:	080115bc 	.word	0x080115bc
 8006fa4:	080116ec 	.word	0x080116ec
 8006fa8:	08011704 	.word	0x08011704
 8006fac:	08011728 	.word	0x08011728

08006fb0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006fbc:	e005      	b.n	8006fca <pbuf_clen+0x1a>
    ++len;
 8006fbe:	89fb      	ldrh	r3, [r7, #14]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1f6      	bne.n	8006fbe <pbuf_clen+0xe>
  }
  return len;
 8006fd0:	89fb      	ldrh	r3, [r7, #14]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
	...

08006fe0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d010      	beq.n	8007010 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	7b9b      	ldrb	r3, [r3, #14]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	7b9b      	ldrb	r3, [r3, #14]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d106      	bne.n	8007010 <pbuf_ref+0x30>
 8007002:	4b05      	ldr	r3, [pc, #20]	; (8007018 <pbuf_ref+0x38>)
 8007004:	f240 3242 	movw	r2, #834	; 0x342
 8007008:	4904      	ldr	r1, [pc, #16]	; (800701c <pbuf_ref+0x3c>)
 800700a:	4805      	ldr	r0, [pc, #20]	; (8007020 <pbuf_ref+0x40>)
 800700c:	f008 fd78 	bl	800fb00 <iprintf>
  }
}
 8007010:	bf00      	nop
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	0801155c 	.word	0x0801155c
 800701c:	0801173c 	.word	0x0801173c
 8007020:	080115bc 	.word	0x080115bc

08007024 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <pbuf_cat+0x16>
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d107      	bne.n	800704a <pbuf_cat+0x26>
 800703a:	4b20      	ldr	r3, [pc, #128]	; (80070bc <pbuf_cat+0x98>)
 800703c:	f240 3259 	movw	r2, #857	; 0x359
 8007040:	491f      	ldr	r1, [pc, #124]	; (80070c0 <pbuf_cat+0x9c>)
 8007042:	4820      	ldr	r0, [pc, #128]	; (80070c4 <pbuf_cat+0xa0>)
 8007044:	f008 fd5c 	bl	800fb00 <iprintf>
 8007048:	e034      	b.n	80070b4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	e00a      	b.n	8007066 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	891a      	ldrh	r2, [r3, #8]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	891b      	ldrh	r3, [r3, #8]
 8007058:	4413      	add	r3, r2
 800705a:	b29a      	uxth	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	60fb      	str	r3, [r7, #12]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1f0      	bne.n	8007050 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	891a      	ldrh	r2, [r3, #8]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	895b      	ldrh	r3, [r3, #10]
 8007076:	429a      	cmp	r2, r3
 8007078:	d006      	beq.n	8007088 <pbuf_cat+0x64>
 800707a:	4b10      	ldr	r3, [pc, #64]	; (80070bc <pbuf_cat+0x98>)
 800707c:	f240 3262 	movw	r2, #866	; 0x362
 8007080:	4911      	ldr	r1, [pc, #68]	; (80070c8 <pbuf_cat+0xa4>)
 8007082:	4810      	ldr	r0, [pc, #64]	; (80070c4 <pbuf_cat+0xa0>)
 8007084:	f008 fd3c 	bl	800fb00 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d006      	beq.n	800709e <pbuf_cat+0x7a>
 8007090:	4b0a      	ldr	r3, [pc, #40]	; (80070bc <pbuf_cat+0x98>)
 8007092:	f240 3263 	movw	r2, #867	; 0x363
 8007096:	490d      	ldr	r1, [pc, #52]	; (80070cc <pbuf_cat+0xa8>)
 8007098:	480a      	ldr	r0, [pc, #40]	; (80070c4 <pbuf_cat+0xa0>)
 800709a:	f008 fd31 	bl	800fb00 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	891a      	ldrh	r2, [r3, #8]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	891b      	ldrh	r3, [r3, #8]
 80070a6:	4413      	add	r3, r2
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	0801155c 	.word	0x0801155c
 80070c0:	08011750 	.word	0x08011750
 80070c4:	080115bc 	.word	0x080115bc
 80070c8:	08011788 	.word	0x08011788
 80070cc:	080117b8 	.word	0x080117b8

080070d0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff ffa1 	bl	8007024 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80070e2:	6838      	ldr	r0, [r7, #0]
 80070e4:	f7ff ff7c 	bl	8006fe0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80070e8:	bf00      	nop
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80070fa:	2300      	movs	r3, #0
 80070fc:	617b      	str	r3, [r7, #20]
 80070fe:	2300      	movs	r3, #0
 8007100:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d008      	beq.n	800711a <pbuf_copy+0x2a>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <pbuf_copy+0x2a>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	891a      	ldrh	r2, [r3, #8]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	891b      	ldrh	r3, [r3, #8]
 8007116:	429a      	cmp	r2, r3
 8007118:	d209      	bcs.n	800712e <pbuf_copy+0x3e>
 800711a:	4b57      	ldr	r3, [pc, #348]	; (8007278 <pbuf_copy+0x188>)
 800711c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007120:	4956      	ldr	r1, [pc, #344]	; (800727c <pbuf_copy+0x18c>)
 8007122:	4857      	ldr	r0, [pc, #348]	; (8007280 <pbuf_copy+0x190>)
 8007124:	f008 fcec 	bl	800fb00 <iprintf>
 8007128:	f06f 030f 	mvn.w	r3, #15
 800712c:	e09f      	b.n	800726e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	895b      	ldrh	r3, [r3, #10]
 8007132:	461a      	mov	r2, r3
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	1ad2      	subs	r2, r2, r3
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	895b      	ldrh	r3, [r3, #10]
 800713c:	4619      	mov	r1, r3
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	1acb      	subs	r3, r1, r3
 8007142:	429a      	cmp	r2, r3
 8007144:	d306      	bcc.n	8007154 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	895b      	ldrh	r3, [r3, #10]
 800714a:	461a      	mov	r2, r3
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	e005      	b.n	8007160 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	895b      	ldrh	r3, [r3, #10]
 8007158:	461a      	mov	r2, r3
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	18d0      	adds	r0, r2, r3
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	4413      	add	r3, r2
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	4619      	mov	r1, r3
 8007174:	f008 fc94 	bl	800faa0 <memcpy>
    offset_to += len;
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	4413      	add	r3, r2
 800717e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	4413      	add	r3, r2
 8007186:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	895b      	ldrh	r3, [r3, #10]
 800718c:	461a      	mov	r2, r3
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	4293      	cmp	r3, r2
 8007192:	d906      	bls.n	80071a2 <pbuf_copy+0xb2>
 8007194:	4b38      	ldr	r3, [pc, #224]	; (8007278 <pbuf_copy+0x188>)
 8007196:	f240 32d9 	movw	r2, #985	; 0x3d9
 800719a:	493a      	ldr	r1, [pc, #232]	; (8007284 <pbuf_copy+0x194>)
 800719c:	4838      	ldr	r0, [pc, #224]	; (8007280 <pbuf_copy+0x190>)
 800719e:	f008 fcaf 	bl	800fb00 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	895b      	ldrh	r3, [r3, #10]
 80071a6:	461a      	mov	r2, r3
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d906      	bls.n	80071bc <pbuf_copy+0xcc>
 80071ae:	4b32      	ldr	r3, [pc, #200]	; (8007278 <pbuf_copy+0x188>)
 80071b0:	f240 32da 	movw	r2, #986	; 0x3da
 80071b4:	4934      	ldr	r1, [pc, #208]	; (8007288 <pbuf_copy+0x198>)
 80071b6:	4832      	ldr	r0, [pc, #200]	; (8007280 <pbuf_copy+0x190>)
 80071b8:	f008 fca2 	bl	800fb00 <iprintf>
    if (offset_from >= p_from->len) {
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	895b      	ldrh	r3, [r3, #10]
 80071c0:	461a      	mov	r2, r3
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d304      	bcc.n	80071d2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80071c8:	2300      	movs	r3, #0
 80071ca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	895b      	ldrh	r3, [r3, #10]
 80071d6:	461a      	mov	r2, r3
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	4293      	cmp	r3, r2
 80071dc:	d114      	bne.n	8007208 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10c      	bne.n	8007208 <pbuf_copy+0x118>
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d009      	beq.n	8007208 <pbuf_copy+0x118>
 80071f4:	4b20      	ldr	r3, [pc, #128]	; (8007278 <pbuf_copy+0x188>)
 80071f6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80071fa:	4924      	ldr	r1, [pc, #144]	; (800728c <pbuf_copy+0x19c>)
 80071fc:	4820      	ldr	r0, [pc, #128]	; (8007280 <pbuf_copy+0x190>)
 80071fe:	f008 fc7f 	bl	800fb00 <iprintf>
 8007202:	f06f 030f 	mvn.w	r3, #15
 8007206:	e032      	b.n	800726e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d013      	beq.n	8007236 <pbuf_copy+0x146>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	895a      	ldrh	r2, [r3, #10]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	891b      	ldrh	r3, [r3, #8]
 8007216:	429a      	cmp	r2, r3
 8007218:	d10d      	bne.n	8007236 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d009      	beq.n	8007236 <pbuf_copy+0x146>
 8007222:	4b15      	ldr	r3, [pc, #84]	; (8007278 <pbuf_copy+0x188>)
 8007224:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007228:	4919      	ldr	r1, [pc, #100]	; (8007290 <pbuf_copy+0x1a0>)
 800722a:	4815      	ldr	r0, [pc, #84]	; (8007280 <pbuf_copy+0x190>)
 800722c:	f008 fc68 	bl	800fb00 <iprintf>
 8007230:	f06f 0305 	mvn.w	r3, #5
 8007234:	e01b      	b.n	800726e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d013      	beq.n	8007264 <pbuf_copy+0x174>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	895a      	ldrh	r2, [r3, #10]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	891b      	ldrh	r3, [r3, #8]
 8007244:	429a      	cmp	r2, r3
 8007246:	d10d      	bne.n	8007264 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d009      	beq.n	8007264 <pbuf_copy+0x174>
 8007250:	4b09      	ldr	r3, [pc, #36]	; (8007278 <pbuf_copy+0x188>)
 8007252:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007256:	490e      	ldr	r1, [pc, #56]	; (8007290 <pbuf_copy+0x1a0>)
 8007258:	4809      	ldr	r0, [pc, #36]	; (8007280 <pbuf_copy+0x190>)
 800725a:	f008 fc51 	bl	800fb00 <iprintf>
 800725e:	f06f 0305 	mvn.w	r3, #5
 8007262:	e004      	b.n	800726e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	f47f af61 	bne.w	800712e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	0801155c 	.word	0x0801155c
 800727c:	08011804 	.word	0x08011804
 8007280:	080115bc 	.word	0x080115bc
 8007284:	08011834 	.word	0x08011834
 8007288:	0801184c 	.word	0x0801184c
 800728c:	08011868 	.word	0x08011868
 8007290:	08011878 	.word	0x08011878

08007294 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	4611      	mov	r1, r2
 80072a0:	461a      	mov	r2, r3
 80072a2:	460b      	mov	r3, r1
 80072a4:	80fb      	strh	r3, [r7, #6]
 80072a6:	4613      	mov	r3, r2
 80072a8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80072ae:	2300      	movs	r3, #0
 80072b0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d108      	bne.n	80072ca <pbuf_copy_partial+0x36>
 80072b8:	4b2b      	ldr	r3, [pc, #172]	; (8007368 <pbuf_copy_partial+0xd4>)
 80072ba:	f240 420a 	movw	r2, #1034	; 0x40a
 80072be:	492b      	ldr	r1, [pc, #172]	; (800736c <pbuf_copy_partial+0xd8>)
 80072c0:	482b      	ldr	r0, [pc, #172]	; (8007370 <pbuf_copy_partial+0xdc>)
 80072c2:	f008 fc1d 	bl	800fb00 <iprintf>
 80072c6:	2300      	movs	r3, #0
 80072c8:	e04a      	b.n	8007360 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d108      	bne.n	80072e2 <pbuf_copy_partial+0x4e>
 80072d0:	4b25      	ldr	r3, [pc, #148]	; (8007368 <pbuf_copy_partial+0xd4>)
 80072d2:	f240 420b 	movw	r2, #1035	; 0x40b
 80072d6:	4927      	ldr	r1, [pc, #156]	; (8007374 <pbuf_copy_partial+0xe0>)
 80072d8:	4825      	ldr	r0, [pc, #148]	; (8007370 <pbuf_copy_partial+0xdc>)
 80072da:	f008 fc11 	bl	800fb00 <iprintf>
 80072de:	2300      	movs	r3, #0
 80072e0:	e03e      	b.n	8007360 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	61fb      	str	r3, [r7, #28]
 80072e6:	e034      	b.n	8007352 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80072e8:	88bb      	ldrh	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00a      	beq.n	8007304 <pbuf_copy_partial+0x70>
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	895b      	ldrh	r3, [r3, #10]
 80072f2:	88ba      	ldrh	r2, [r7, #4]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d305      	bcc.n	8007304 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	895b      	ldrh	r3, [r3, #10]
 80072fc:	88ba      	ldrh	r2, [r7, #4]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	80bb      	strh	r3, [r7, #4]
 8007302:	e023      	b.n	800734c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	895a      	ldrh	r2, [r3, #10]
 8007308:	88bb      	ldrh	r3, [r7, #4]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800730e:	8b3a      	ldrh	r2, [r7, #24]
 8007310:	88fb      	ldrh	r3, [r7, #6]
 8007312:	429a      	cmp	r2, r3
 8007314:	d901      	bls.n	800731a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007316:	88fb      	ldrh	r3, [r7, #6]
 8007318:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800731a:	8b7b      	ldrh	r3, [r7, #26]
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	18d0      	adds	r0, r2, r3
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	685a      	ldr	r2, [r3, #4]
 8007324:	88bb      	ldrh	r3, [r7, #4]
 8007326:	4413      	add	r3, r2
 8007328:	8b3a      	ldrh	r2, [r7, #24]
 800732a:	4619      	mov	r1, r3
 800732c:	f008 fbb8 	bl	800faa0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007330:	8afa      	ldrh	r2, [r7, #22]
 8007332:	8b3b      	ldrh	r3, [r7, #24]
 8007334:	4413      	add	r3, r2
 8007336:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007338:	8b7a      	ldrh	r2, [r7, #26]
 800733a:	8b3b      	ldrh	r3, [r7, #24]
 800733c:	4413      	add	r3, r2
 800733e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007340:	88fa      	ldrh	r2, [r7, #6]
 8007342:	8b3b      	ldrh	r3, [r7, #24]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	61fb      	str	r3, [r7, #28]
 8007352:	88fb      	ldrh	r3, [r7, #6]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <pbuf_copy_partial+0xca>
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1c4      	bne.n	80072e8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800735e:	8afb      	ldrh	r3, [r7, #22]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3720      	adds	r7, #32
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	0801155c 	.word	0x0801155c
 800736c:	080118a4 	.word	0x080118a4
 8007370:	080115bc 	.word	0x080115bc
 8007374:	080118c4 	.word	0x080118c4

08007378 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b088      	sub	sp, #32
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	4613      	mov	r3, r2
 8007384:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8007386:	88fb      	ldrh	r3, [r7, #6]
 8007388:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800738a:	2300      	movs	r3, #0
 800738c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d109      	bne.n	80073a8 <pbuf_take+0x30>
 8007394:	4b3a      	ldr	r3, [pc, #232]	; (8007480 <pbuf_take+0x108>)
 8007396:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800739a:	493a      	ldr	r1, [pc, #232]	; (8007484 <pbuf_take+0x10c>)
 800739c:	483a      	ldr	r0, [pc, #232]	; (8007488 <pbuf_take+0x110>)
 800739e:	f008 fbaf 	bl	800fb00 <iprintf>
 80073a2:	f06f 030f 	mvn.w	r3, #15
 80073a6:	e067      	b.n	8007478 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d109      	bne.n	80073c2 <pbuf_take+0x4a>
 80073ae:	4b34      	ldr	r3, [pc, #208]	; (8007480 <pbuf_take+0x108>)
 80073b0:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80073b4:	4935      	ldr	r1, [pc, #212]	; (800748c <pbuf_take+0x114>)
 80073b6:	4834      	ldr	r0, [pc, #208]	; (8007488 <pbuf_take+0x110>)
 80073b8:	f008 fba2 	bl	800fb00 <iprintf>
 80073bc:	f06f 030f 	mvn.w	r3, #15
 80073c0:	e05a      	b.n	8007478 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	891b      	ldrh	r3, [r3, #8]
 80073c6:	88fa      	ldrh	r2, [r7, #6]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d909      	bls.n	80073e0 <pbuf_take+0x68>
 80073cc:	4b2c      	ldr	r3, [pc, #176]	; (8007480 <pbuf_take+0x108>)
 80073ce:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80073d2:	492f      	ldr	r1, [pc, #188]	; (8007490 <pbuf_take+0x118>)
 80073d4:	482c      	ldr	r0, [pc, #176]	; (8007488 <pbuf_take+0x110>)
 80073d6:	f008 fb93 	bl	800fb00 <iprintf>
 80073da:	f04f 33ff 	mov.w	r3, #4294967295
 80073de:	e04b      	b.n	8007478 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d007      	beq.n	80073f6 <pbuf_take+0x7e>
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d004      	beq.n	80073f6 <pbuf_take+0x7e>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	891b      	ldrh	r3, [r3, #8]
 80073f0:	88fa      	ldrh	r2, [r7, #6]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d902      	bls.n	80073fc <pbuf_take+0x84>
    return ERR_ARG;
 80073f6:	f06f 030f 	mvn.w	r3, #15
 80073fa:	e03d      	b.n	8007478 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	61fb      	str	r3, [r7, #28]
 8007400:	e028      	b.n	8007454 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d106      	bne.n	8007416 <pbuf_take+0x9e>
 8007408:	4b1d      	ldr	r3, [pc, #116]	; (8007480 <pbuf_take+0x108>)
 800740a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800740e:	4921      	ldr	r1, [pc, #132]	; (8007494 <pbuf_take+0x11c>)
 8007410:	481d      	ldr	r0, [pc, #116]	; (8007488 <pbuf_take+0x110>)
 8007412:	f008 fb75 	bl	800fb00 <iprintf>
    buf_copy_len = total_copy_len;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	895b      	ldrh	r3, [r3, #10]
 800741e:	461a      	mov	r2, r3
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	4293      	cmp	r3, r2
 8007424:	d902      	bls.n	800742c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	895b      	ldrh	r3, [r3, #10]
 800742a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	6858      	ldr	r0, [r3, #4]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	4413      	add	r3, r2
 8007436:	69ba      	ldr	r2, [r7, #24]
 8007438:	4619      	mov	r1, r3
 800743a:	f008 fb31 	bl	800faa0 <memcpy>
    total_copy_len -= buf_copy_len;
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	4413      	add	r3, r2
 800744c:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	61fb      	str	r3, [r7, #28]
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1d3      	bne.n	8007402 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d103      	bne.n	8007468 <pbuf_take+0xf0>
 8007460:	88fb      	ldrh	r3, [r7, #6]
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	429a      	cmp	r2, r3
 8007466:	d006      	beq.n	8007476 <pbuf_take+0xfe>
 8007468:	4b05      	ldr	r3, [pc, #20]	; (8007480 <pbuf_take+0x108>)
 800746a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800746e:	490a      	ldr	r1, [pc, #40]	; (8007498 <pbuf_take+0x120>)
 8007470:	4805      	ldr	r0, [pc, #20]	; (8007488 <pbuf_take+0x110>)
 8007472:	f008 fb45 	bl	800fb00 <iprintf>
  return ERR_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3720      	adds	r7, #32
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	0801155c 	.word	0x0801155c
 8007484:	08011934 	.word	0x08011934
 8007488:	080115bc 	.word	0x080115bc
 800748c:	0801194c 	.word	0x0801194c
 8007490:	08011968 	.word	0x08011968
 8007494:	08011988 	.word	0x08011988
 8007498:	080119a0 	.word	0x080119a0

0800749c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	4603      	mov	r3, r0
 80074a4:	603a      	str	r2, [r7, #0]
 80074a6:	71fb      	strb	r3, [r7, #7]
 80074a8:	460b      	mov	r3, r1
 80074aa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	8919      	ldrh	r1, [r3, #8]
 80074b0:	88ba      	ldrh	r2, [r7, #4]
 80074b2:	79fb      	ldrb	r3, [r7, #7]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff fa0f 	bl	80068d8 <pbuf_alloc>
 80074ba:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <pbuf_clone+0x2a>
    return NULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	e011      	b.n	80074ea <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f7ff fe11 	bl	80070f0 <pbuf_copy>
 80074ce:	4603      	mov	r3, r0
 80074d0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80074d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d006      	beq.n	80074e8 <pbuf_clone+0x4c>
 80074da:	4b06      	ldr	r3, [pc, #24]	; (80074f4 <pbuf_clone+0x58>)
 80074dc:	f240 5224 	movw	r2, #1316	; 0x524
 80074e0:	4905      	ldr	r1, [pc, #20]	; (80074f8 <pbuf_clone+0x5c>)
 80074e2:	4806      	ldr	r0, [pc, #24]	; (80074fc <pbuf_clone+0x60>)
 80074e4:	f008 fb0c 	bl	800fb00 <iprintf>
  return q;
 80074e8:	68fb      	ldr	r3, [r7, #12]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	0801155c 	.word	0x0801155c
 80074f8:	080119d0 	.word	0x080119d0
 80074fc:	080115bc 	.word	0x080115bc

08007500 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007504:	f008 fb14 	bl	800fb30 <rand>
 8007508:	4603      	mov	r3, r0
 800750a:	b29b      	uxth	r3, r3
 800750c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007510:	b29b      	uxth	r3, r3
 8007512:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007516:	b29a      	uxth	r2, r3
 8007518:	4b01      	ldr	r3, [pc, #4]	; (8007520 <tcp_init+0x20>)
 800751a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800751c:	bf00      	nop
 800751e:	bd80      	pop	{r7, pc}
 8007520:	24000024 	.word	0x24000024

08007524 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	7d1b      	ldrb	r3, [r3, #20]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d105      	bne.n	8007540 <tcp_free+0x1c>
 8007534:	4b06      	ldr	r3, [pc, #24]	; (8007550 <tcp_free+0x2c>)
 8007536:	22d4      	movs	r2, #212	; 0xd4
 8007538:	4906      	ldr	r1, [pc, #24]	; (8007554 <tcp_free+0x30>)
 800753a:	4807      	ldr	r0, [pc, #28]	; (8007558 <tcp_free+0x34>)
 800753c:	f008 fae0 	bl	800fb00 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007540:	6879      	ldr	r1, [r7, #4]
 8007542:	2001      	movs	r0, #1
 8007544:	f7fe fe36 	bl	80061b4 <memp_free>
}
 8007548:	bf00      	nop
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	08011a5c 	.word	0x08011a5c
 8007554:	08011a8c 	.word	0x08011a8c
 8007558:	08011aa0 	.word	0x08011aa0

0800755c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	7d1b      	ldrb	r3, [r3, #20]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d105      	bne.n	8007578 <tcp_free_listen+0x1c>
 800756c:	4b06      	ldr	r3, [pc, #24]	; (8007588 <tcp_free_listen+0x2c>)
 800756e:	22df      	movs	r2, #223	; 0xdf
 8007570:	4906      	ldr	r1, [pc, #24]	; (800758c <tcp_free_listen+0x30>)
 8007572:	4807      	ldr	r0, [pc, #28]	; (8007590 <tcp_free_listen+0x34>)
 8007574:	f008 fac4 	bl	800fb00 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007578:	6879      	ldr	r1, [r7, #4]
 800757a:	2002      	movs	r0, #2
 800757c:	f7fe fe1a 	bl	80061b4 <memp_free>
}
 8007580:	bf00      	nop
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	08011a5c 	.word	0x08011a5c
 800758c:	08011ac8 	.word	0x08011ac8
 8007590:	08011aa0 	.word	0x08011aa0

08007594 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007598:	f000 fea2 	bl	80082e0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800759c:	4b07      	ldr	r3, [pc, #28]	; (80075bc <tcp_tmr+0x28>)
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	3301      	adds	r3, #1
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	4b05      	ldr	r3, [pc, #20]	; (80075bc <tcp_tmr+0x28>)
 80075a6:	701a      	strb	r2, [r3, #0]
 80075a8:	4b04      	ldr	r3, [pc, #16]	; (80075bc <tcp_tmr+0x28>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80075b4:	f000 fb54 	bl	8007c60 <tcp_slowtmr>
  }
}
 80075b8:	bf00      	nop
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	240031fd 	.word	0x240031fd

080075c0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d105      	bne.n	80075dc <tcp_remove_listener+0x1c>
 80075d0:	4b0d      	ldr	r3, [pc, #52]	; (8007608 <tcp_remove_listener+0x48>)
 80075d2:	22ff      	movs	r2, #255	; 0xff
 80075d4:	490d      	ldr	r1, [pc, #52]	; (800760c <tcp_remove_listener+0x4c>)
 80075d6:	480e      	ldr	r0, [pc, #56]	; (8007610 <tcp_remove_listener+0x50>)
 80075d8:	f008 fa92 	bl	800fb00 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	e00a      	b.n	80075f8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d102      	bne.n	80075f2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	60fb      	str	r3, [r7, #12]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1f1      	bne.n	80075e2 <tcp_remove_listener+0x22>
    }
  }
}
 80075fe:	bf00      	nop
 8007600:	bf00      	nop
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	08011a5c 	.word	0x08011a5c
 800760c:	08011ae4 	.word	0x08011ae4
 8007610:	08011aa0 	.word	0x08011aa0

08007614 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d106      	bne.n	8007630 <tcp_listen_closed+0x1c>
 8007622:	4b14      	ldr	r3, [pc, #80]	; (8007674 <tcp_listen_closed+0x60>)
 8007624:	f240 1211 	movw	r2, #273	; 0x111
 8007628:	4913      	ldr	r1, [pc, #76]	; (8007678 <tcp_listen_closed+0x64>)
 800762a:	4814      	ldr	r0, [pc, #80]	; (800767c <tcp_listen_closed+0x68>)
 800762c:	f008 fa68 	bl	800fb00 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	7d1b      	ldrb	r3, [r3, #20]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d006      	beq.n	8007646 <tcp_listen_closed+0x32>
 8007638:	4b0e      	ldr	r3, [pc, #56]	; (8007674 <tcp_listen_closed+0x60>)
 800763a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800763e:	4910      	ldr	r1, [pc, #64]	; (8007680 <tcp_listen_closed+0x6c>)
 8007640:	480e      	ldr	r0, [pc, #56]	; (800767c <tcp_listen_closed+0x68>)
 8007642:	f008 fa5d 	bl	800fb00 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007646:	2301      	movs	r3, #1
 8007648:	60fb      	str	r3, [r7, #12]
 800764a:	e00b      	b.n	8007664 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800764c:	4a0d      	ldr	r2, [pc, #52]	; (8007684 <tcp_listen_closed+0x70>)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	6879      	ldr	r1, [r7, #4]
 8007658:	4618      	mov	r0, r3
 800765a:	f7ff ffb1 	bl	80075c0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3301      	adds	r3, #1
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b03      	cmp	r3, #3
 8007668:	d9f0      	bls.n	800764c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800766a:	bf00      	nop
 800766c:	bf00      	nop
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	08011a5c 	.word	0x08011a5c
 8007678:	08011b0c 	.word	0x08011b0c
 800767c:	08011aa0 	.word	0x08011aa0
 8007680:	08011b18 	.word	0x08011b18
 8007684:	08013a34 	.word	0x08013a34

08007688 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007688:	b5b0      	push	{r4, r5, r7, lr}
 800768a:	b088      	sub	sp, #32
 800768c:	af04      	add	r7, sp, #16
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d106      	bne.n	80076a8 <tcp_close_shutdown+0x20>
 800769a:	4b63      	ldr	r3, [pc, #396]	; (8007828 <tcp_close_shutdown+0x1a0>)
 800769c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80076a0:	4962      	ldr	r1, [pc, #392]	; (800782c <tcp_close_shutdown+0x1a4>)
 80076a2:	4863      	ldr	r0, [pc, #396]	; (8007830 <tcp_close_shutdown+0x1a8>)
 80076a4:	f008 fa2c 	bl	800fb00 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80076a8:	78fb      	ldrb	r3, [r7, #3]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d066      	beq.n	800777c <tcp_close_shutdown+0xf4>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	7d1b      	ldrb	r3, [r3, #20]
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d003      	beq.n	80076be <tcp_close_shutdown+0x36>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	7d1b      	ldrb	r3, [r3, #20]
 80076ba:	2b07      	cmp	r3, #7
 80076bc:	d15e      	bne.n	800777c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d104      	bne.n	80076d0 <tcp_close_shutdown+0x48>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80076ce:	d055      	beq.n	800777c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	8b5b      	ldrh	r3, [r3, #26]
 80076d4:	f003 0310 	and.w	r3, r3, #16
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d106      	bne.n	80076ea <tcp_close_shutdown+0x62>
 80076dc:	4b52      	ldr	r3, [pc, #328]	; (8007828 <tcp_close_shutdown+0x1a0>)
 80076de:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80076e2:	4954      	ldr	r1, [pc, #336]	; (8007834 <tcp_close_shutdown+0x1ac>)
 80076e4:	4852      	ldr	r0, [pc, #328]	; (8007830 <tcp_close_shutdown+0x1a8>)
 80076e6:	f008 fa0b 	bl	800fb00 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80076f2:	687d      	ldr	r5, [r7, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3304      	adds	r3, #4
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	8ad2      	ldrh	r2, [r2, #22]
 80076fc:	6879      	ldr	r1, [r7, #4]
 80076fe:	8b09      	ldrh	r1, [r1, #24]
 8007700:	9102      	str	r1, [sp, #8]
 8007702:	9201      	str	r2, [sp, #4]
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	462b      	mov	r3, r5
 8007708:	4622      	mov	r2, r4
 800770a:	4601      	mov	r1, r0
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f004 fe91 	bl	800c434 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f001 f8c6 	bl	80088a4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007718:	4b47      	ldr	r3, [pc, #284]	; (8007838 <tcp_close_shutdown+0x1b0>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	429a      	cmp	r2, r3
 8007720:	d105      	bne.n	800772e <tcp_close_shutdown+0xa6>
 8007722:	4b45      	ldr	r3, [pc, #276]	; (8007838 <tcp_close_shutdown+0x1b0>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	4a43      	ldr	r2, [pc, #268]	; (8007838 <tcp_close_shutdown+0x1b0>)
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	e013      	b.n	8007756 <tcp_close_shutdown+0xce>
 800772e:	4b42      	ldr	r3, [pc, #264]	; (8007838 <tcp_close_shutdown+0x1b0>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	e00c      	b.n	8007750 <tcp_close_shutdown+0xc8>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	429a      	cmp	r2, r3
 800773e:	d104      	bne.n	800774a <tcp_close_shutdown+0xc2>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	60da      	str	r2, [r3, #12]
 8007748:	e005      	b.n	8007756 <tcp_close_shutdown+0xce>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1ef      	bne.n	8007736 <tcp_close_shutdown+0xae>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	60da      	str	r2, [r3, #12]
 800775c:	4b37      	ldr	r3, [pc, #220]	; (800783c <tcp_close_shutdown+0x1b4>)
 800775e:	2201      	movs	r2, #1
 8007760:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007762:	4b37      	ldr	r3, [pc, #220]	; (8007840 <tcp_close_shutdown+0x1b8>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	429a      	cmp	r2, r3
 800776a:	d102      	bne.n	8007772 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800776c:	f003 fd5e 	bl	800b22c <tcp_trigger_input_pcb_close>
 8007770:	e002      	b.n	8007778 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff fed6 	bl	8007524 <tcp_free>
      }
      return ERR_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	e050      	b.n	800781e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	7d1b      	ldrb	r3, [r3, #20]
 8007780:	2b02      	cmp	r3, #2
 8007782:	d03b      	beq.n	80077fc <tcp_close_shutdown+0x174>
 8007784:	2b02      	cmp	r3, #2
 8007786:	dc44      	bgt.n	8007812 <tcp_close_shutdown+0x18a>
 8007788:	2b00      	cmp	r3, #0
 800778a:	d002      	beq.n	8007792 <tcp_close_shutdown+0x10a>
 800778c:	2b01      	cmp	r3, #1
 800778e:	d02a      	beq.n	80077e6 <tcp_close_shutdown+0x15e>
 8007790:	e03f      	b.n	8007812 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	8adb      	ldrh	r3, [r3, #22]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d021      	beq.n	80077de <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800779a:	4b2a      	ldr	r3, [pc, #168]	; (8007844 <tcp_close_shutdown+0x1bc>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d105      	bne.n	80077b0 <tcp_close_shutdown+0x128>
 80077a4:	4b27      	ldr	r3, [pc, #156]	; (8007844 <tcp_close_shutdown+0x1bc>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	4a26      	ldr	r2, [pc, #152]	; (8007844 <tcp_close_shutdown+0x1bc>)
 80077ac:	6013      	str	r3, [r2, #0]
 80077ae:	e013      	b.n	80077d8 <tcp_close_shutdown+0x150>
 80077b0:	4b24      	ldr	r3, [pc, #144]	; (8007844 <tcp_close_shutdown+0x1bc>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	60bb      	str	r3, [r7, #8]
 80077b6:	e00c      	b.n	80077d2 <tcp_close_shutdown+0x14a>
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d104      	bne.n	80077cc <tcp_close_shutdown+0x144>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68da      	ldr	r2, [r3, #12]
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	60da      	str	r2, [r3, #12]
 80077ca:	e005      	b.n	80077d8 <tcp_close_shutdown+0x150>
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	60bb      	str	r3, [r7, #8]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1ef      	bne.n	80077b8 <tcp_close_shutdown+0x130>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7ff fea0 	bl	8007524 <tcp_free>
      break;
 80077e4:	e01a      	b.n	800781c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7ff ff14 	bl	8007614 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80077ec:	6879      	ldr	r1, [r7, #4]
 80077ee:	4816      	ldr	r0, [pc, #88]	; (8007848 <tcp_close_shutdown+0x1c0>)
 80077f0:	f001 f8a8 	bl	8008944 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff feb1 	bl	800755c <tcp_free_listen>
      break;
 80077fa:	e00f      	b.n	800781c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80077fc:	6879      	ldr	r1, [r7, #4]
 80077fe:	480e      	ldr	r0, [pc, #56]	; (8007838 <tcp_close_shutdown+0x1b0>)
 8007800:	f001 f8a0 	bl	8008944 <tcp_pcb_remove>
 8007804:	4b0d      	ldr	r3, [pc, #52]	; (800783c <tcp_close_shutdown+0x1b4>)
 8007806:	2201      	movs	r2, #1
 8007808:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7ff fe8a 	bl	8007524 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007810:	e004      	b.n	800781c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f81a 	bl	800784c <tcp_close_shutdown_fin>
 8007818:	4603      	mov	r3, r0
 800781a:	e000      	b.n	800781e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bdb0      	pop	{r4, r5, r7, pc}
 8007826:	bf00      	nop
 8007828:	08011a5c 	.word	0x08011a5c
 800782c:	08011b30 	.word	0x08011b30
 8007830:	08011aa0 	.word	0x08011aa0
 8007834:	08011b50 	.word	0x08011b50
 8007838:	240031f4 	.word	0x240031f4
 800783c:	240031fc 	.word	0x240031fc
 8007840:	24003234 	.word	0x24003234
 8007844:	240031ec 	.word	0x240031ec
 8007848:	240031f0 	.word	0x240031f0

0800784c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d106      	bne.n	8007868 <tcp_close_shutdown_fin+0x1c>
 800785a:	4b2e      	ldr	r3, [pc, #184]	; (8007914 <tcp_close_shutdown_fin+0xc8>)
 800785c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007860:	492d      	ldr	r1, [pc, #180]	; (8007918 <tcp_close_shutdown_fin+0xcc>)
 8007862:	482e      	ldr	r0, [pc, #184]	; (800791c <tcp_close_shutdown_fin+0xd0>)
 8007864:	f008 f94c 	bl	800fb00 <iprintf>

  switch (pcb->state) {
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	7d1b      	ldrb	r3, [r3, #20]
 800786c:	2b07      	cmp	r3, #7
 800786e:	d020      	beq.n	80078b2 <tcp_close_shutdown_fin+0x66>
 8007870:	2b07      	cmp	r3, #7
 8007872:	dc2b      	bgt.n	80078cc <tcp_close_shutdown_fin+0x80>
 8007874:	2b03      	cmp	r3, #3
 8007876:	d002      	beq.n	800787e <tcp_close_shutdown_fin+0x32>
 8007878:	2b04      	cmp	r3, #4
 800787a:	d00d      	beq.n	8007898 <tcp_close_shutdown_fin+0x4c>
 800787c:	e026      	b.n	80078cc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f003 fee6 	bl	800b650 <tcp_send_fin>
 8007884:	4603      	mov	r3, r0
 8007886:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d11f      	bne.n	80078d0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2205      	movs	r2, #5
 8007894:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007896:	e01b      	b.n	80078d0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f003 fed9 	bl	800b650 <tcp_send_fin>
 800789e:	4603      	mov	r3, r0
 80078a0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80078a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d114      	bne.n	80078d4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2205      	movs	r2, #5
 80078ae:	751a      	strb	r2, [r3, #20]
      }
      break;
 80078b0:	e010      	b.n	80078d4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f003 fecc 	bl	800b650 <tcp_send_fin>
 80078b8:	4603      	mov	r3, r0
 80078ba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80078bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d109      	bne.n	80078d8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2209      	movs	r2, #9
 80078c8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80078ca:	e005      	b.n	80078d8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	e01c      	b.n	800790a <tcp_close_shutdown_fin+0xbe>
      break;
 80078d0:	bf00      	nop
 80078d2:	e002      	b.n	80078da <tcp_close_shutdown_fin+0x8e>
      break;
 80078d4:	bf00      	nop
 80078d6:	e000      	b.n	80078da <tcp_close_shutdown_fin+0x8e>
      break;
 80078d8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80078da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d103      	bne.n	80078ea <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f003 fff2 	bl	800b8cc <tcp_output>
 80078e8:	e00d      	b.n	8007906 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80078ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f2:	d108      	bne.n	8007906 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	8b5b      	ldrh	r3, [r3, #26]
 80078f8:	f043 0308 	orr.w	r3, r3, #8
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	e001      	b.n	800790a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8007906:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	08011a5c 	.word	0x08011a5c
 8007918:	08011b0c 	.word	0x08011b0c
 800791c:	08011aa0 	.word	0x08011aa0

08007920 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d109      	bne.n	8007942 <tcp_close+0x22>
 800792e:	4b0f      	ldr	r3, [pc, #60]	; (800796c <tcp_close+0x4c>)
 8007930:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007934:	490e      	ldr	r1, [pc, #56]	; (8007970 <tcp_close+0x50>)
 8007936:	480f      	ldr	r0, [pc, #60]	; (8007974 <tcp_close+0x54>)
 8007938:	f008 f8e2 	bl	800fb00 <iprintf>
 800793c:	f06f 030f 	mvn.w	r3, #15
 8007940:	e00f      	b.n	8007962 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	7d1b      	ldrb	r3, [r3, #20]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d006      	beq.n	8007958 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	8b5b      	ldrh	r3, [r3, #26]
 800794e:	f043 0310 	orr.w	r3, r3, #16
 8007952:	b29a      	uxth	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007958:	2101      	movs	r1, #1
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7ff fe94 	bl	8007688 <tcp_close_shutdown>
 8007960:	4603      	mov	r3, r0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	08011a5c 	.word	0x08011a5c
 8007970:	08011b6c 	.word	0x08011b6c
 8007974:	08011aa0 	.word	0x08011aa0

08007978 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b08e      	sub	sp, #56	; 0x38
 800797c:	af04      	add	r7, sp, #16
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d107      	bne.n	8007998 <tcp_abandon+0x20>
 8007988:	4b52      	ldr	r3, [pc, #328]	; (8007ad4 <tcp_abandon+0x15c>)
 800798a:	f240 223d 	movw	r2, #573	; 0x23d
 800798e:	4952      	ldr	r1, [pc, #328]	; (8007ad8 <tcp_abandon+0x160>)
 8007990:	4852      	ldr	r0, [pc, #328]	; (8007adc <tcp_abandon+0x164>)
 8007992:	f008 f8b5 	bl	800fb00 <iprintf>
 8007996:	e099      	b.n	8007acc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	7d1b      	ldrb	r3, [r3, #20]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d106      	bne.n	80079ae <tcp_abandon+0x36>
 80079a0:	4b4c      	ldr	r3, [pc, #304]	; (8007ad4 <tcp_abandon+0x15c>)
 80079a2:	f44f 7210 	mov.w	r2, #576	; 0x240
 80079a6:	494e      	ldr	r1, [pc, #312]	; (8007ae0 <tcp_abandon+0x168>)
 80079a8:	484c      	ldr	r0, [pc, #304]	; (8007adc <tcp_abandon+0x164>)
 80079aa:	f008 f8a9 	bl	800fb00 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	7d1b      	ldrb	r3, [r3, #20]
 80079b2:	2b0a      	cmp	r3, #10
 80079b4:	d107      	bne.n	80079c6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	484a      	ldr	r0, [pc, #296]	; (8007ae4 <tcp_abandon+0x16c>)
 80079ba:	f000 ffc3 	bl	8008944 <tcp_pcb_remove>
    tcp_free(pcb);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7ff fdb0 	bl	8007524 <tcp_free>
 80079c4:	e082      	b.n	8007acc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80079c6:	2300      	movs	r3, #0
 80079c8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80079ca:	2300      	movs	r3, #0
 80079cc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079e0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	7d1b      	ldrb	r3, [r3, #20]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d126      	bne.n	8007a3e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	8adb      	ldrh	r3, [r3, #22]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d02e      	beq.n	8007a56 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80079f8:	4b3b      	ldr	r3, [pc, #236]	; (8007ae8 <tcp_abandon+0x170>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d105      	bne.n	8007a0e <tcp_abandon+0x96>
 8007a02:	4b39      	ldr	r3, [pc, #228]	; (8007ae8 <tcp_abandon+0x170>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	4a37      	ldr	r2, [pc, #220]	; (8007ae8 <tcp_abandon+0x170>)
 8007a0a:	6013      	str	r3, [r2, #0]
 8007a0c:	e013      	b.n	8007a36 <tcp_abandon+0xbe>
 8007a0e:	4b36      	ldr	r3, [pc, #216]	; (8007ae8 <tcp_abandon+0x170>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	61fb      	str	r3, [r7, #28]
 8007a14:	e00c      	b.n	8007a30 <tcp_abandon+0xb8>
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d104      	bne.n	8007a2a <tcp_abandon+0xb2>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68da      	ldr	r2, [r3, #12]
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	60da      	str	r2, [r3, #12]
 8007a28:	e005      	b.n	8007a36 <tcp_abandon+0xbe>
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	61fb      	str	r3, [r7, #28]
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1ef      	bne.n	8007a16 <tcp_abandon+0x9e>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	60da      	str	r2, [r3, #12]
 8007a3c:	e00b      	b.n	8007a56 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	8adb      	ldrh	r3, [r3, #22]
 8007a46:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007a48:	6879      	ldr	r1, [r7, #4]
 8007a4a:	4828      	ldr	r0, [pc, #160]	; (8007aec <tcp_abandon+0x174>)
 8007a4c:	f000 ff7a 	bl	8008944 <tcp_pcb_remove>
 8007a50:	4b27      	ldr	r3, [pc, #156]	; (8007af0 <tcp_abandon+0x178>)
 8007a52:	2201      	movs	r2, #1
 8007a54:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d004      	beq.n	8007a68 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 fd1c 	bl	80084a0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d004      	beq.n	8007a7a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 fd13 	bl	80084a0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d004      	beq.n	8007a8c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 fd0a 	bl	80084a0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00e      	beq.n	8007ab0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007a92:	6879      	ldr	r1, [r7, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	3304      	adds	r3, #4
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	8b12      	ldrh	r2, [r2, #24]
 8007a9c:	9202      	str	r2, [sp, #8]
 8007a9e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007aa0:	9201      	str	r2, [sp, #4]
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	69b9      	ldr	r1, [r7, #24]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f004 fcc2 	bl	800c434 <tcp_rst>
    }
    last_state = pcb->state;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	7d1b      	ldrb	r3, [r3, #20]
 8007ab4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7ff fd34 	bl	8007524 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d004      	beq.n	8007acc <tcp_abandon+0x154>
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f06f 010c 	mvn.w	r1, #12
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	4798      	blx	r3
  }
}
 8007acc:	3728      	adds	r7, #40	; 0x28
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	08011a5c 	.word	0x08011a5c
 8007ad8:	08011ba0 	.word	0x08011ba0
 8007adc:	08011aa0 	.word	0x08011aa0
 8007ae0:	08011bbc 	.word	0x08011bbc
 8007ae4:	240031f8 	.word	0x240031f8
 8007ae8:	240031ec 	.word	0x240031ec
 8007aec:	240031f4 	.word	0x240031f4
 8007af0:	240031fc 	.word	0x240031fc

08007af4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007afc:	2101      	movs	r1, #1
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff ff3a 	bl	8007978 <tcp_abandon>
}
 8007b04:	bf00      	nop
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d106      	bne.n	8007b28 <tcp_update_rcv_ann_wnd+0x1c>
 8007b1a:	4b25      	ldr	r3, [pc, #148]	; (8007bb0 <tcp_update_rcv_ann_wnd+0xa4>)
 8007b1c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007b20:	4924      	ldr	r1, [pc, #144]	; (8007bb4 <tcp_update_rcv_ann_wnd+0xa8>)
 8007b22:	4825      	ldr	r0, [pc, #148]	; (8007bb8 <tcp_update_rcv_ann_wnd+0xac>)
 8007b24:	f007 ffec 	bl	800fb00 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007b30:	4413      	add	r3, r2
 8007b32:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007b3c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007b40:	bf28      	it	cs
 8007b42:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007b46:	b292      	uxth	r2, r2
 8007b48:	4413      	add	r3, r2
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	1ad3      	subs	r3, r2, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	db08      	blt.n	8007b64 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	e020      	b.n	8007ba6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	dd03      	ble.n	8007b7a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b78:	e014      	b.n	8007ba4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b8c:	d306      	bcc.n	8007b9c <tcp_update_rcv_ann_wnd+0x90>
 8007b8e:	4b08      	ldr	r3, [pc, #32]	; (8007bb0 <tcp_update_rcv_ann_wnd+0xa4>)
 8007b90:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007b94:	4909      	ldr	r1, [pc, #36]	; (8007bbc <tcp_update_rcv_ann_wnd+0xb0>)
 8007b96:	4808      	ldr	r0, [pc, #32]	; (8007bb8 <tcp_update_rcv_ann_wnd+0xac>)
 8007b98:	f007 ffb2 	bl	800fb00 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007ba4:	2300      	movs	r3, #0
  }
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	08011a5c 	.word	0x08011a5c
 8007bb4:	08011cb8 	.word	0x08011cb8
 8007bb8:	08011aa0 	.word	0x08011aa0
 8007bbc:	08011cdc 	.word	0x08011cdc

08007bc0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d107      	bne.n	8007be2 <tcp_recved+0x22>
 8007bd2:	4b1f      	ldr	r3, [pc, #124]	; (8007c50 <tcp_recved+0x90>)
 8007bd4:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007bd8:	491e      	ldr	r1, [pc, #120]	; (8007c54 <tcp_recved+0x94>)
 8007bda:	481f      	ldr	r0, [pc, #124]	; (8007c58 <tcp_recved+0x98>)
 8007bdc:	f007 ff90 	bl	800fb00 <iprintf>
 8007be0:	e032      	b.n	8007c48 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	7d1b      	ldrb	r3, [r3, #20]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d106      	bne.n	8007bf8 <tcp_recved+0x38>
 8007bea:	4b19      	ldr	r3, [pc, #100]	; (8007c50 <tcp_recved+0x90>)
 8007bec:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007bf0:	491a      	ldr	r1, [pc, #104]	; (8007c5c <tcp_recved+0x9c>)
 8007bf2:	4819      	ldr	r0, [pc, #100]	; (8007c58 <tcp_recved+0x98>)
 8007bf4:	f007 ff84 	bl	800fb00 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007bfc:	887b      	ldrh	r3, [r7, #2]
 8007bfe:	4413      	add	r3, r2
 8007c00:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007c02:	89fb      	ldrh	r3, [r7, #14]
 8007c04:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007c08:	d804      	bhi.n	8007c14 <tcp_recved+0x54>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c0e:	89fa      	ldrh	r2, [r7, #14]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d204      	bcs.n	8007c1e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007c1a:	851a      	strh	r2, [r3, #40]	; 0x28
 8007c1c:	e002      	b.n	8007c24 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	89fa      	ldrh	r2, [r7, #14]
 8007c22:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7ff ff71 	bl	8007b0c <tcp_update_rcv_ann_wnd>
 8007c2a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007c32:	d309      	bcc.n	8007c48 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	8b5b      	ldrh	r3, [r3, #26]
 8007c38:	f043 0302 	orr.w	r3, r3, #2
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f003 fe42 	bl	800b8cc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	08011a5c 	.word	0x08011a5c
 8007c54:	08011cf8 	.word	0x08011cf8
 8007c58:	08011aa0 	.word	0x08011aa0
 8007c5c:	08011d10 	.word	0x08011d10

08007c60 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007c60:	b5b0      	push	{r4, r5, r7, lr}
 8007c62:	b090      	sub	sp, #64	; 0x40
 8007c64:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007c6c:	4b94      	ldr	r3, [pc, #592]	; (8007ec0 <tcp_slowtmr+0x260>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3301      	adds	r3, #1
 8007c72:	4a93      	ldr	r2, [pc, #588]	; (8007ec0 <tcp_slowtmr+0x260>)
 8007c74:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007c76:	4b93      	ldr	r3, [pc, #588]	; (8007ec4 <tcp_slowtmr+0x264>)
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	4b91      	ldr	r3, [pc, #580]	; (8007ec4 <tcp_slowtmr+0x264>)
 8007c80:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007c82:	2300      	movs	r3, #0
 8007c84:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007c86:	4b90      	ldr	r3, [pc, #576]	; (8007ec8 <tcp_slowtmr+0x268>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007c8c:	e29d      	b.n	80081ca <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c90:	7d1b      	ldrb	r3, [r3, #20]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d106      	bne.n	8007ca4 <tcp_slowtmr+0x44>
 8007c96:	4b8d      	ldr	r3, [pc, #564]	; (8007ecc <tcp_slowtmr+0x26c>)
 8007c98:	f240 42be 	movw	r2, #1214	; 0x4be
 8007c9c:	498c      	ldr	r1, [pc, #560]	; (8007ed0 <tcp_slowtmr+0x270>)
 8007c9e:	488d      	ldr	r0, [pc, #564]	; (8007ed4 <tcp_slowtmr+0x274>)
 8007ca0:	f007 ff2e 	bl	800fb00 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca6:	7d1b      	ldrb	r3, [r3, #20]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d106      	bne.n	8007cba <tcp_slowtmr+0x5a>
 8007cac:	4b87      	ldr	r3, [pc, #540]	; (8007ecc <tcp_slowtmr+0x26c>)
 8007cae:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007cb2:	4989      	ldr	r1, [pc, #548]	; (8007ed8 <tcp_slowtmr+0x278>)
 8007cb4:	4887      	ldr	r0, [pc, #540]	; (8007ed4 <tcp_slowtmr+0x274>)
 8007cb6:	f007 ff23 	bl	800fb00 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbc:	7d1b      	ldrb	r3, [r3, #20]
 8007cbe:	2b0a      	cmp	r3, #10
 8007cc0:	d106      	bne.n	8007cd0 <tcp_slowtmr+0x70>
 8007cc2:	4b82      	ldr	r3, [pc, #520]	; (8007ecc <tcp_slowtmr+0x26c>)
 8007cc4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007cc8:	4984      	ldr	r1, [pc, #528]	; (8007edc <tcp_slowtmr+0x27c>)
 8007cca:	4882      	ldr	r0, [pc, #520]	; (8007ed4 <tcp_slowtmr+0x274>)
 8007ccc:	f007 ff18 	bl	800fb00 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd2:	7f9a      	ldrb	r2, [r3, #30]
 8007cd4:	4b7b      	ldr	r3, [pc, #492]	; (8007ec4 <tcp_slowtmr+0x264>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d105      	bne.n	8007ce8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cde:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007ce6:	e270      	b.n	80081ca <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007ce8:	4b76      	ldr	r3, [pc, #472]	; (8007ec4 <tcp_slowtmr+0x264>)
 8007cea:	781a      	ldrb	r2, [r3, #0]
 8007cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cee:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfe:	7d1b      	ldrb	r3, [r3, #20]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d10a      	bne.n	8007d1a <tcp_slowtmr+0xba>
 8007d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d0a:	2b05      	cmp	r3, #5
 8007d0c:	d905      	bls.n	8007d1a <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d12:	3301      	adds	r3, #1
 8007d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d18:	e11e      	b.n	8007f58 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d20:	2b0b      	cmp	r3, #11
 8007d22:	d905      	bls.n	8007d30 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d28:	3301      	adds	r3, #1
 8007d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d2e:	e113      	b.n	8007f58 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d32:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d075      	beq.n	8007e26 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d006      	beq.n	8007d50 <tcp_slowtmr+0xf0>
 8007d42:	4b62      	ldr	r3, [pc, #392]	; (8007ecc <tcp_slowtmr+0x26c>)
 8007d44:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007d48:	4965      	ldr	r1, [pc, #404]	; (8007ee0 <tcp_slowtmr+0x280>)
 8007d4a:	4862      	ldr	r0, [pc, #392]	; (8007ed4 <tcp_slowtmr+0x274>)
 8007d4c:	f007 fed8 	bl	800fb00 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d106      	bne.n	8007d66 <tcp_slowtmr+0x106>
 8007d58:	4b5c      	ldr	r3, [pc, #368]	; (8007ecc <tcp_slowtmr+0x26c>)
 8007d5a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007d5e:	4961      	ldr	r1, [pc, #388]	; (8007ee4 <tcp_slowtmr+0x284>)
 8007d60:	485c      	ldr	r0, [pc, #368]	; (8007ed4 <tcp_slowtmr+0x274>)
 8007d62:	f007 fecd 	bl	800fb00 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d68:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007d6c:	2b0b      	cmp	r3, #11
 8007d6e:	d905      	bls.n	8007d7c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d74:	3301      	adds	r3, #1
 8007d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d7a:	e0ed      	b.n	8007f58 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007d82:	3b01      	subs	r3, #1
 8007d84:	4a58      	ldr	r2, [pc, #352]	; (8007ee8 <tcp_slowtmr+0x288>)
 8007d86:	5cd3      	ldrb	r3, [r2, r3]
 8007d88:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007d90:	7c7a      	ldrb	r2, [r7, #17]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d907      	bls.n	8007da6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d98:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007dac:	7c7a      	ldrb	r2, [r7, #17]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	f200 80d2 	bhi.w	8007f58 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007db4:	2301      	movs	r3, #1
 8007db6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d108      	bne.n	8007dd4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007dc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dc4:	f004 fc2a 	bl	800c61c <tcp_zero_window_probe>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d014      	beq.n	8007df8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007dce:	2300      	movs	r3, #0
 8007dd0:	623b      	str	r3, [r7, #32]
 8007dd2:	e011      	b.n	8007df8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dde:	f003 faef 	bl	800b3c0 <tcp_split_unsent_seg>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d107      	bne.n	8007df8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007de8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dea:	f003 fd6f 	bl	800b8cc <tcp_output>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007df4:	2300      	movs	r3, #0
 8007df6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f000 80ac 	beq.w	8007f58 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007e0e:	2b06      	cmp	r3, #6
 8007e10:	f200 80a2 	bhi.w	8007f58 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e16:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e20:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007e24:	e098      	b.n	8007f58 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	db0f      	blt.n	8007e50 <tcp_slowtmr+0x1f0>
 8007e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e32:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007e36:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d008      	beq.n	8007e50 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e40:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	3301      	adds	r3, #1
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	b21a      	sxth	r2, r3
 8007e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e52:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e58:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	db7b      	blt.n	8007f58 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007e60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e62:	f004 f825 	bl	800beb0 <tcp_rexmit_rto_prepare>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d007      	beq.n	8007e7c <tcp_slowtmr+0x21c>
 8007e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d171      	bne.n	8007f58 <tcp_slowtmr+0x2f8>
 8007e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d06d      	beq.n	8007f58 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7e:	7d1b      	ldrb	r3, [r3, #20]
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d03a      	beq.n	8007efa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e8a:	2b0c      	cmp	r3, #12
 8007e8c:	bf28      	it	cs
 8007e8e:	230c      	movcs	r3, #12
 8007e90:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e94:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007e98:	10db      	asrs	r3, r3, #3
 8007e9a:	b21b      	sxth	r3, r3
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007ea4:	4413      	add	r3, r2
 8007ea6:	7efa      	ldrb	r2, [r7, #27]
 8007ea8:	4910      	ldr	r1, [pc, #64]	; (8007eec <tcp_slowtmr+0x28c>)
 8007eaa:	5c8a      	ldrb	r2, [r1, r2]
 8007eac:	4093      	lsls	r3, r2
 8007eae:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	dc1a      	bgt.n	8007ef0 <tcp_slowtmr+0x290>
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	b21a      	sxth	r2, r3
 8007ebe:	e019      	b.n	8007ef4 <tcp_slowtmr+0x294>
 8007ec0:	240031e8 	.word	0x240031e8
 8007ec4:	240031fe 	.word	0x240031fe
 8007ec8:	240031f4 	.word	0x240031f4
 8007ecc:	08011a5c 	.word	0x08011a5c
 8007ed0:	08011da0 	.word	0x08011da0
 8007ed4:	08011aa0 	.word	0x08011aa0
 8007ed8:	08011dcc 	.word	0x08011dcc
 8007edc:	08011df8 	.word	0x08011df8
 8007ee0:	08011e28 	.word	0x08011e28
 8007ee4:	08011e5c 	.word	0x08011e5c
 8007ee8:	08013a2c 	.word	0x08013a2c
 8007eec:	08013a1c 	.word	0x08013a1c
 8007ef0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efc:	2200      	movs	r2, #0
 8007efe:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	bf28      	it	cs
 8007f10:	4613      	movcs	r3, r2
 8007f12:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007f14:	8a7b      	ldrh	r3, [r7, #18]
 8007f16:	085b      	lsrs	r3, r3, #1
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f22:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d206      	bcs.n	8007f40 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f42:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007f52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f54:	f004 f81c 	bl	800bf90 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5a:	7d1b      	ldrb	r3, [r3, #20]
 8007f5c:	2b06      	cmp	r3, #6
 8007f5e:	d111      	bne.n	8007f84 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f62:	8b5b      	ldrh	r3, [r3, #26]
 8007f64:	f003 0310 	and.w	r3, r3, #16
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00b      	beq.n	8007f84 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007f6c:	4b9c      	ldr	r3, [pc, #624]	; (80081e0 <tcp_slowtmr+0x580>)
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f72:	6a1b      	ldr	r3, [r3, #32]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	2b28      	cmp	r3, #40	; 0x28
 8007f78:	d904      	bls.n	8007f84 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f7e:	3301      	adds	r3, #1
 8007f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f86:	7a5b      	ldrb	r3, [r3, #9]
 8007f88:	f003 0308 	and.w	r3, r3, #8
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d04a      	beq.n	8008026 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8007f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f92:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007f94:	2b04      	cmp	r3, #4
 8007f96:	d003      	beq.n	8007fa0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007f9c:	2b07      	cmp	r3, #7
 8007f9e:	d142      	bne.n	8008026 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007fa0:	4b8f      	ldr	r3, [pc, #572]	; (80081e0 <tcp_slowtmr+0x580>)
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fac:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007fb0:	4b8c      	ldr	r3, [pc, #560]	; (80081e4 <tcp_slowtmr+0x584>)
 8007fb2:	440b      	add	r3, r1
 8007fb4:	498c      	ldr	r1, [pc, #560]	; (80081e8 <tcp_slowtmr+0x588>)
 8007fb6:	fba1 1303 	umull	r1, r3, r1, r3
 8007fba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d90a      	bls.n	8007fd6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007fca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fce:	3301      	adds	r3, #1
 8007fd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007fd4:	e027      	b.n	8008026 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007fd6:	4b82      	ldr	r3, [pc, #520]	; (80081e0 <tcp_slowtmr+0x580>)
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007fec:	4618      	mov	r0, r3
 8007fee:	4b7f      	ldr	r3, [pc, #508]	; (80081ec <tcp_slowtmr+0x58c>)
 8007ff0:	fb00 f303 	mul.w	r3, r0, r3
 8007ff4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007ff6:	497c      	ldr	r1, [pc, #496]	; (80081e8 <tcp_slowtmr+0x588>)
 8007ff8:	fba1 1303 	umull	r1, r3, r1, r3
 8007ffc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d911      	bls.n	8008026 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8008002:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008004:	f004 faca 	bl	800c59c <tcp_keepalive>
 8008008:	4603      	mov	r3, r0
 800800a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800800e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008012:	2b00      	cmp	r3, #0
 8008014:	d107      	bne.n	8008026 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8008016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008018:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800801c:	3301      	adds	r3, #1
 800801e:	b2da      	uxtb	r2, r3
 8008020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008022:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800802a:	2b00      	cmp	r3, #0
 800802c:	d011      	beq.n	8008052 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800802e:	4b6c      	ldr	r3, [pc, #432]	; (80081e0 <tcp_slowtmr+0x580>)
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	1ad2      	subs	r2, r2, r3
 8008038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800803e:	4619      	mov	r1, r3
 8008040:	460b      	mov	r3, r1
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	440b      	add	r3, r1
 8008046:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008048:	429a      	cmp	r2, r3
 800804a:	d302      	bcc.n	8008052 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800804c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800804e:	f000 fddd 	bl	8008c0c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008054:	7d1b      	ldrb	r3, [r3, #20]
 8008056:	2b03      	cmp	r3, #3
 8008058:	d10b      	bne.n	8008072 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800805a:	4b61      	ldr	r3, [pc, #388]	; (80081e0 <tcp_slowtmr+0x580>)
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	2b28      	cmp	r3, #40	; 0x28
 8008066:	d904      	bls.n	8008072 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800806c:	3301      	adds	r3, #1
 800806e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008074:	7d1b      	ldrb	r3, [r3, #20]
 8008076:	2b09      	cmp	r3, #9
 8008078:	d10b      	bne.n	8008092 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800807a:	4b59      	ldr	r3, [pc, #356]	; (80081e0 <tcp_slowtmr+0x580>)
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	2bf0      	cmp	r3, #240	; 0xf0
 8008086:	d904      	bls.n	8008092 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8008088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800808c:	3301      	adds	r3, #1
 800808e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008096:	2b00      	cmp	r3, #0
 8008098:	d060      	beq.n	800815c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800809a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080a0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80080a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080a4:	f000 fbfe 	bl	80088a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d010      	beq.n	80080d0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80080ae:	4b50      	ldr	r3, [pc, #320]	; (80081f0 <tcp_slowtmr+0x590>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d106      	bne.n	80080c6 <tcp_slowtmr+0x466>
 80080b8:	4b4e      	ldr	r3, [pc, #312]	; (80081f4 <tcp_slowtmr+0x594>)
 80080ba:	f240 526d 	movw	r2, #1389	; 0x56d
 80080be:	494e      	ldr	r1, [pc, #312]	; (80081f8 <tcp_slowtmr+0x598>)
 80080c0:	484e      	ldr	r0, [pc, #312]	; (80081fc <tcp_slowtmr+0x59c>)
 80080c2:	f007 fd1d 	bl	800fb00 <iprintf>
        prev->next = pcb->next;
 80080c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c8:	68da      	ldr	r2, [r3, #12]
 80080ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080cc:	60da      	str	r2, [r3, #12]
 80080ce:	e00f      	b.n	80080f0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80080d0:	4b47      	ldr	r3, [pc, #284]	; (80081f0 <tcp_slowtmr+0x590>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d006      	beq.n	80080e8 <tcp_slowtmr+0x488>
 80080da:	4b46      	ldr	r3, [pc, #280]	; (80081f4 <tcp_slowtmr+0x594>)
 80080dc:	f240 5271 	movw	r2, #1393	; 0x571
 80080e0:	4947      	ldr	r1, [pc, #284]	; (8008200 <tcp_slowtmr+0x5a0>)
 80080e2:	4846      	ldr	r0, [pc, #280]	; (80081fc <tcp_slowtmr+0x59c>)
 80080e4:	f007 fd0c 	bl	800fb00 <iprintf>
        tcp_active_pcbs = pcb->next;
 80080e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	4a40      	ldr	r2, [pc, #256]	; (80081f0 <tcp_slowtmr+0x590>)
 80080ee:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80080f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d013      	beq.n	8008120 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80080f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80080fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008100:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8008102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008104:	3304      	adds	r3, #4
 8008106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008108:	8ad2      	ldrh	r2, [r2, #22]
 800810a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800810c:	8b09      	ldrh	r1, [r1, #24]
 800810e:	9102      	str	r1, [sp, #8]
 8008110:	9201      	str	r2, [sp, #4]
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	462b      	mov	r3, r5
 8008116:	4622      	mov	r2, r4
 8008118:	4601      	mov	r1, r0
 800811a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800811c:	f004 f98a 	bl	800c434 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008128:	7d1b      	ldrb	r3, [r3, #20]
 800812a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800812c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008136:	6838      	ldr	r0, [r7, #0]
 8008138:	f7ff f9f4 	bl	8007524 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800813c:	4b31      	ldr	r3, [pc, #196]	; (8008204 <tcp_slowtmr+0x5a4>)
 800813e:	2200      	movs	r2, #0
 8008140:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d004      	beq.n	8008152 <tcp_slowtmr+0x4f2>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f06f 010c 	mvn.w	r1, #12
 800814e:	68b8      	ldr	r0, [r7, #8]
 8008150:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008152:	4b2c      	ldr	r3, [pc, #176]	; (8008204 <tcp_slowtmr+0x5a4>)
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d037      	beq.n	80081ca <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800815a:	e592      	b.n	8007c82 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800815c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008168:	7f1b      	ldrb	r3, [r3, #28]
 800816a:	3301      	adds	r3, #1
 800816c:	b2da      	uxtb	r2, r3
 800816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008170:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008174:	7f1a      	ldrb	r2, [r3, #28]
 8008176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008178:	7f5b      	ldrb	r3, [r3, #29]
 800817a:	429a      	cmp	r2, r3
 800817c:	d325      	bcc.n	80081ca <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008180:	2200      	movs	r2, #0
 8008182:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008184:	4b1f      	ldr	r3, [pc, #124]	; (8008204 <tcp_slowtmr+0x5a4>)
 8008186:	2200      	movs	r2, #0
 8008188:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00b      	beq.n	80081ac <tcp_slowtmr+0x54c>
 8008194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800819a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800819c:	6912      	ldr	r2, [r2, #16]
 800819e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081a0:	4610      	mov	r0, r2
 80081a2:	4798      	blx	r3
 80081a4:	4603      	mov	r3, r0
 80081a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80081aa:	e002      	b.n	80081b2 <tcp_slowtmr+0x552>
 80081ac:	2300      	movs	r3, #0
 80081ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80081b2:	4b14      	ldr	r3, [pc, #80]	; (8008204 <tcp_slowtmr+0x5a4>)
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d000      	beq.n	80081bc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80081ba:	e562      	b.n	8007c82 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80081bc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d102      	bne.n	80081ca <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80081c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081c6:	f003 fb81 	bl	800b8cc <tcp_output>
  while (pcb != NULL) {
 80081ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f47f ad5e 	bne.w	8007c8e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80081d2:	2300      	movs	r3, #0
 80081d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80081d6:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <tcp_slowtmr+0x5a8>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80081dc:	e069      	b.n	80082b2 <tcp_slowtmr+0x652>
 80081de:	bf00      	nop
 80081e0:	240031e8 	.word	0x240031e8
 80081e4:	000a4cb8 	.word	0x000a4cb8
 80081e8:	10624dd3 	.word	0x10624dd3
 80081ec:	000124f8 	.word	0x000124f8
 80081f0:	240031f4 	.word	0x240031f4
 80081f4:	08011a5c 	.word	0x08011a5c
 80081f8:	08011e94 	.word	0x08011e94
 80081fc:	08011aa0 	.word	0x08011aa0
 8008200:	08011ec0 	.word	0x08011ec0
 8008204:	240031fc 	.word	0x240031fc
 8008208:	240031f8 	.word	0x240031f8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820e:	7d1b      	ldrb	r3, [r3, #20]
 8008210:	2b0a      	cmp	r3, #10
 8008212:	d006      	beq.n	8008222 <tcp_slowtmr+0x5c2>
 8008214:	4b2b      	ldr	r3, [pc, #172]	; (80082c4 <tcp_slowtmr+0x664>)
 8008216:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800821a:	492b      	ldr	r1, [pc, #172]	; (80082c8 <tcp_slowtmr+0x668>)
 800821c:	482b      	ldr	r0, [pc, #172]	; (80082cc <tcp_slowtmr+0x66c>)
 800821e:	f007 fc6f 	bl	800fb00 <iprintf>
    pcb_remove = 0;
 8008222:	2300      	movs	r3, #0
 8008224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008228:	4b29      	ldr	r3, [pc, #164]	; (80082d0 <tcp_slowtmr+0x670>)
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822e:	6a1b      	ldr	r3, [r3, #32]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	2bf0      	cmp	r3, #240	; 0xf0
 8008234:	d904      	bls.n	8008240 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8008236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800823a:	3301      	adds	r3, #1
 800823c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008244:	2b00      	cmp	r3, #0
 8008246:	d02f      	beq.n	80082a8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800824a:	f000 fb2b 	bl	80088a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800824e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008250:	2b00      	cmp	r3, #0
 8008252:	d010      	beq.n	8008276 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008254:	4b1f      	ldr	r3, [pc, #124]	; (80082d4 <tcp_slowtmr+0x674>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800825a:	429a      	cmp	r2, r3
 800825c:	d106      	bne.n	800826c <tcp_slowtmr+0x60c>
 800825e:	4b19      	ldr	r3, [pc, #100]	; (80082c4 <tcp_slowtmr+0x664>)
 8008260:	f240 52af 	movw	r2, #1455	; 0x5af
 8008264:	491c      	ldr	r1, [pc, #112]	; (80082d8 <tcp_slowtmr+0x678>)
 8008266:	4819      	ldr	r0, [pc, #100]	; (80082cc <tcp_slowtmr+0x66c>)
 8008268:	f007 fc4a 	bl	800fb00 <iprintf>
        prev->next = pcb->next;
 800826c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008272:	60da      	str	r2, [r3, #12]
 8008274:	e00f      	b.n	8008296 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008276:	4b17      	ldr	r3, [pc, #92]	; (80082d4 <tcp_slowtmr+0x674>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800827c:	429a      	cmp	r2, r3
 800827e:	d006      	beq.n	800828e <tcp_slowtmr+0x62e>
 8008280:	4b10      	ldr	r3, [pc, #64]	; (80082c4 <tcp_slowtmr+0x664>)
 8008282:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008286:	4915      	ldr	r1, [pc, #84]	; (80082dc <tcp_slowtmr+0x67c>)
 8008288:	4810      	ldr	r0, [pc, #64]	; (80082cc <tcp_slowtmr+0x66c>)
 800828a:	f007 fc39 	bl	800fb00 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800828e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	4a10      	ldr	r2, [pc, #64]	; (80082d4 <tcp_slowtmr+0x674>)
 8008294:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008298:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800829a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80082a0:	69f8      	ldr	r0, [r7, #28]
 80082a2:	f7ff f93f 	bl	8007524 <tcp_free>
 80082a6:	e004      	b.n	80082b2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80082a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80082ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80082b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1a9      	bne.n	800820c <tcp_slowtmr+0x5ac>
    }
  }
}
 80082b8:	bf00      	nop
 80082ba:	bf00      	nop
 80082bc:	3730      	adds	r7, #48	; 0x30
 80082be:	46bd      	mov	sp, r7
 80082c0:	bdb0      	pop	{r4, r5, r7, pc}
 80082c2:	bf00      	nop
 80082c4:	08011a5c 	.word	0x08011a5c
 80082c8:	08011eec 	.word	0x08011eec
 80082cc:	08011aa0 	.word	0x08011aa0
 80082d0:	240031e8 	.word	0x240031e8
 80082d4:	240031f8 	.word	0x240031f8
 80082d8:	08011f1c 	.word	0x08011f1c
 80082dc:	08011f44 	.word	0x08011f44

080082e0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80082e6:	4b2d      	ldr	r3, [pc, #180]	; (800839c <tcp_fasttmr+0xbc>)
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	3301      	adds	r3, #1
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	4b2b      	ldr	r3, [pc, #172]	; (800839c <tcp_fasttmr+0xbc>)
 80082f0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80082f2:	4b2b      	ldr	r3, [pc, #172]	; (80083a0 <tcp_fasttmr+0xc0>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80082f8:	e048      	b.n	800838c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	7f9a      	ldrb	r2, [r3, #30]
 80082fe:	4b27      	ldr	r3, [pc, #156]	; (800839c <tcp_fasttmr+0xbc>)
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	429a      	cmp	r2, r3
 8008304:	d03f      	beq.n	8008386 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008306:	4b25      	ldr	r3, [pc, #148]	; (800839c <tcp_fasttmr+0xbc>)
 8008308:	781a      	ldrb	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	8b5b      	ldrh	r3, [r3, #26]
 8008312:	f003 0301 	and.w	r3, r3, #1
 8008316:	2b00      	cmp	r3, #0
 8008318:	d010      	beq.n	800833c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	8b5b      	ldrh	r3, [r3, #26]
 800831e:	f043 0302 	orr.w	r3, r3, #2
 8008322:	b29a      	uxth	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f003 facf 	bl	800b8cc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	8b5b      	ldrh	r3, [r3, #26]
 8008332:	f023 0303 	bic.w	r3, r3, #3
 8008336:	b29a      	uxth	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	8b5b      	ldrh	r3, [r3, #26]
 8008340:	f003 0308 	and.w	r3, r3, #8
 8008344:	2b00      	cmp	r3, #0
 8008346:	d009      	beq.n	800835c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	8b5b      	ldrh	r3, [r3, #26]
 800834c:	f023 0308 	bic.w	r3, r3, #8
 8008350:	b29a      	uxth	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7ff fa78 	bl	800784c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00a      	beq.n	8008380 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800836a:	4b0e      	ldr	r3, [pc, #56]	; (80083a4 <tcp_fasttmr+0xc4>)
 800836c:	2200      	movs	r2, #0
 800836e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f819 	bl	80083a8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008376:	4b0b      	ldr	r3, [pc, #44]	; (80083a4 <tcp_fasttmr+0xc4>)
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d000      	beq.n	8008380 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800837e:	e7b8      	b.n	80082f2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	607b      	str	r3, [r7, #4]
 8008384:	e002      	b.n	800838c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1b3      	bne.n	80082fa <tcp_fasttmr+0x1a>
    }
  }
}
 8008392:	bf00      	nop
 8008394:	bf00      	nop
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	240031fe 	.word	0x240031fe
 80083a0:	240031f4 	.word	0x240031f4
 80083a4:	240031fc 	.word	0x240031fc

080083a8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80083a8:	b590      	push	{r4, r7, lr}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d109      	bne.n	80083ca <tcp_process_refused_data+0x22>
 80083b6:	4b37      	ldr	r3, [pc, #220]	; (8008494 <tcp_process_refused_data+0xec>)
 80083b8:	f240 6209 	movw	r2, #1545	; 0x609
 80083bc:	4936      	ldr	r1, [pc, #216]	; (8008498 <tcp_process_refused_data+0xf0>)
 80083be:	4837      	ldr	r0, [pc, #220]	; (800849c <tcp_process_refused_data+0xf4>)
 80083c0:	f007 fb9e 	bl	800fb00 <iprintf>
 80083c4:	f06f 030f 	mvn.w	r3, #15
 80083c8:	e060      	b.n	800848c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083ce:	7b5b      	ldrb	r3, [r3, #13]
 80083d0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083d6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00b      	beq.n	8008400 <tcp_process_refused_data+0x58>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6918      	ldr	r0, [r3, #16]
 80083f2:	2300      	movs	r3, #0
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	47a0      	blx	r4
 80083fa:	4603      	mov	r3, r0
 80083fc:	73fb      	strb	r3, [r7, #15]
 80083fe:	e007      	b.n	8008410 <tcp_process_refused_data+0x68>
 8008400:	2300      	movs	r3, #0
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	6879      	ldr	r1, [r7, #4]
 8008406:	2000      	movs	r0, #0
 8008408:	f000 f8a4 	bl	8008554 <tcp_recv_null>
 800840c:	4603      	mov	r3, r0
 800840e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d12a      	bne.n	800846e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008418:	7bbb      	ldrb	r3, [r7, #14]
 800841a:	f003 0320 	and.w	r3, r3, #32
 800841e:	2b00      	cmp	r3, #0
 8008420:	d033      	beq.n	800848a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008426:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800842a:	d005      	beq.n	8008438 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008430:	3301      	adds	r3, #1
 8008432:	b29a      	uxth	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00b      	beq.n	800845a <tcp_process_refused_data+0xb2>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6918      	ldr	r0, [r3, #16]
 800844c:	2300      	movs	r3, #0
 800844e:	2200      	movs	r2, #0
 8008450:	6879      	ldr	r1, [r7, #4]
 8008452:	47a0      	blx	r4
 8008454:	4603      	mov	r3, r0
 8008456:	73fb      	strb	r3, [r7, #15]
 8008458:	e001      	b.n	800845e <tcp_process_refused_data+0xb6>
 800845a:	2300      	movs	r3, #0
 800845c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800845e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008462:	f113 0f0d 	cmn.w	r3, #13
 8008466:	d110      	bne.n	800848a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008468:	f06f 030c 	mvn.w	r3, #12
 800846c:	e00e      	b.n	800848c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800846e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008472:	f113 0f0d 	cmn.w	r3, #13
 8008476:	d102      	bne.n	800847e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008478:	f06f 030c 	mvn.w	r3, #12
 800847c:	e006      	b.n	800848c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8008484:	f06f 0304 	mvn.w	r3, #4
 8008488:	e000      	b.n	800848c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3714      	adds	r7, #20
 8008490:	46bd      	mov	sp, r7
 8008492:	bd90      	pop	{r4, r7, pc}
 8008494:	08011a5c 	.word	0x08011a5c
 8008498:	08011f6c 	.word	0x08011f6c
 800849c:	08011aa0 	.word	0x08011aa0

080084a0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80084a8:	e007      	b.n	80084ba <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f80a 	bl	80084ca <tcp_seg_free>
    seg = next;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1f4      	bne.n	80084aa <tcp_segs_free+0xa>
  }
}
 80084c0:	bf00      	nop
 80084c2:	bf00      	nop
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b082      	sub	sp, #8
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00c      	beq.n	80084f2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d004      	beq.n	80084ea <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fe fcdb 	bl	8006ea0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80084ea:	6879      	ldr	r1, [r7, #4]
 80084ec:	2003      	movs	r0, #3
 80084ee:	f7fd fe61 	bl	80061b4 <memp_free>
  }
}
 80084f2:	bf00      	nop
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
	...

080084fc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d106      	bne.n	8008518 <tcp_seg_copy+0x1c>
 800850a:	4b0f      	ldr	r3, [pc, #60]	; (8008548 <tcp_seg_copy+0x4c>)
 800850c:	f240 6282 	movw	r2, #1666	; 0x682
 8008510:	490e      	ldr	r1, [pc, #56]	; (800854c <tcp_seg_copy+0x50>)
 8008512:	480f      	ldr	r0, [pc, #60]	; (8008550 <tcp_seg_copy+0x54>)
 8008514:	f007 faf4 	bl	800fb00 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008518:	2003      	movs	r0, #3
 800851a:	f7fd fddb 	bl	80060d4 <memp_malloc>
 800851e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <tcp_seg_copy+0x2e>
    return NULL;
 8008526:	2300      	movs	r3, #0
 8008528:	e00a      	b.n	8008540 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800852a:	2210      	movs	r2, #16
 800852c:	6879      	ldr	r1, [r7, #4]
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f007 fab6 	bl	800faa0 <memcpy>
  pbuf_ref(cseg->p);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	4618      	mov	r0, r3
 800853a:	f7fe fd51 	bl	8006fe0 <pbuf_ref>
  return cseg;
 800853e:	68fb      	ldr	r3, [r7, #12]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	08011a5c 	.word	0x08011a5c
 800854c:	08011fb0 	.word	0x08011fb0
 8008550:	08011aa0 	.word	0x08011aa0

08008554 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
 8008560:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d109      	bne.n	800857c <tcp_recv_null+0x28>
 8008568:	4b12      	ldr	r3, [pc, #72]	; (80085b4 <tcp_recv_null+0x60>)
 800856a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800856e:	4912      	ldr	r1, [pc, #72]	; (80085b8 <tcp_recv_null+0x64>)
 8008570:	4812      	ldr	r0, [pc, #72]	; (80085bc <tcp_recv_null+0x68>)
 8008572:	f007 fac5 	bl	800fb00 <iprintf>
 8008576:	f06f 030f 	mvn.w	r3, #15
 800857a:	e016      	b.n	80085aa <tcp_recv_null+0x56>

  if (p != NULL) {
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d009      	beq.n	8008596 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	891b      	ldrh	r3, [r3, #8]
 8008586:	4619      	mov	r1, r3
 8008588:	68b8      	ldr	r0, [r7, #8]
 800858a:	f7ff fb19 	bl	8007bc0 <tcp_recved>
    pbuf_free(p);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7fe fc86 	bl	8006ea0 <pbuf_free>
 8008594:	e008      	b.n	80085a8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8008596:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d104      	bne.n	80085a8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800859e:	68b8      	ldr	r0, [r7, #8]
 80085a0:	f7ff f9be 	bl	8007920 <tcp_close>
 80085a4:	4603      	mov	r3, r0
 80085a6:	e000      	b.n	80085aa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	08011a5c 	.word	0x08011a5c
 80085b8:	08011fcc 	.word	0x08011fcc
 80085bc:	08011aa0 	.word	0x08011aa0

080085c0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	4603      	mov	r3, r0
 80085c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80085ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	db01      	blt.n	80085d6 <tcp_kill_prio+0x16>
 80085d2:	79fb      	ldrb	r3, [r7, #7]
 80085d4:	e000      	b.n	80085d8 <tcp_kill_prio+0x18>
 80085d6:	237f      	movs	r3, #127	; 0x7f
 80085d8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80085da:	7afb      	ldrb	r3, [r7, #11]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d034      	beq.n	800864a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80085e0:	7afb      	ldrb	r3, [r7, #11]
 80085e2:	3b01      	subs	r3, #1
 80085e4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80085e6:	2300      	movs	r3, #0
 80085e8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80085ea:	2300      	movs	r3, #0
 80085ec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80085ee:	4b19      	ldr	r3, [pc, #100]	; (8008654 <tcp_kill_prio+0x94>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	617b      	str	r3, [r7, #20]
 80085f4:	e01f      	b.n	8008636 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	7d5b      	ldrb	r3, [r3, #21]
 80085fa:	7afa      	ldrb	r2, [r7, #11]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d80c      	bhi.n	800861a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008604:	7afa      	ldrb	r2, [r7, #11]
 8008606:	429a      	cmp	r2, r3
 8008608:	d112      	bne.n	8008630 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800860a:	4b13      	ldr	r3, [pc, #76]	; (8008658 <tcp_kill_prio+0x98>)
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	6a1b      	ldr	r3, [r3, #32]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	429a      	cmp	r2, r3
 8008618:	d80a      	bhi.n	8008630 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800861a:	4b0f      	ldr	r3, [pc, #60]	; (8008658 <tcp_kill_prio+0x98>)
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	7d5b      	ldrb	r3, [r3, #21]
 800862e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	617b      	str	r3, [r7, #20]
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1dc      	bne.n	80085f6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d004      	beq.n	800864c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008642:	6938      	ldr	r0, [r7, #16]
 8008644:	f7ff fa56 	bl	8007af4 <tcp_abort>
 8008648:	e000      	b.n	800864c <tcp_kill_prio+0x8c>
    return;
 800864a:	bf00      	nop
  }
}
 800864c:	3718      	adds	r7, #24
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	240031f4 	.word	0x240031f4
 8008658:	240031e8 	.word	0x240031e8

0800865c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b086      	sub	sp, #24
 8008660:	af00      	add	r7, sp, #0
 8008662:	4603      	mov	r3, r0
 8008664:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008666:	79fb      	ldrb	r3, [r7, #7]
 8008668:	2b08      	cmp	r3, #8
 800866a:	d009      	beq.n	8008680 <tcp_kill_state+0x24>
 800866c:	79fb      	ldrb	r3, [r7, #7]
 800866e:	2b09      	cmp	r3, #9
 8008670:	d006      	beq.n	8008680 <tcp_kill_state+0x24>
 8008672:	4b1a      	ldr	r3, [pc, #104]	; (80086dc <tcp_kill_state+0x80>)
 8008674:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008678:	4919      	ldr	r1, [pc, #100]	; (80086e0 <tcp_kill_state+0x84>)
 800867a:	481a      	ldr	r0, [pc, #104]	; (80086e4 <tcp_kill_state+0x88>)
 800867c:	f007 fa40 	bl	800fb00 <iprintf>

  inactivity = 0;
 8008680:	2300      	movs	r3, #0
 8008682:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008684:	2300      	movs	r3, #0
 8008686:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008688:	4b17      	ldr	r3, [pc, #92]	; (80086e8 <tcp_kill_state+0x8c>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	617b      	str	r3, [r7, #20]
 800868e:	e017      	b.n	80086c0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	7d1b      	ldrb	r3, [r3, #20]
 8008694:	79fa      	ldrb	r2, [r7, #7]
 8008696:	429a      	cmp	r2, r3
 8008698:	d10f      	bne.n	80086ba <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800869a:	4b14      	ldr	r3, [pc, #80]	; (80086ec <tcp_kill_state+0x90>)
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d807      	bhi.n	80086ba <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80086aa:	4b10      	ldr	r3, [pc, #64]	; (80086ec <tcp_kill_state+0x90>)
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	617b      	str	r3, [r7, #20]
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1e4      	bne.n	8008690 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80086cc:	2100      	movs	r1, #0
 80086ce:	6938      	ldr	r0, [r7, #16]
 80086d0:	f7ff f952 	bl	8007978 <tcp_abandon>
  }
}
 80086d4:	bf00      	nop
 80086d6:	3718      	adds	r7, #24
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	08011a5c 	.word	0x08011a5c
 80086e0:	08011fe8 	.word	0x08011fe8
 80086e4:	08011aa0 	.word	0x08011aa0
 80086e8:	240031f4 	.word	0x240031f4
 80086ec:	240031e8 	.word	0x240031e8

080086f0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80086fa:	2300      	movs	r3, #0
 80086fc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80086fe:	4b12      	ldr	r3, [pc, #72]	; (8008748 <tcp_kill_timewait+0x58>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	e012      	b.n	800872c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008706:	4b11      	ldr	r3, [pc, #68]	; (800874c <tcp_kill_timewait+0x5c>)
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	429a      	cmp	r2, r3
 8008714:	d807      	bhi.n	8008726 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008716:	4b0d      	ldr	r3, [pc, #52]	; (800874c <tcp_kill_timewait+0x5c>)
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	60fb      	str	r3, [r7, #12]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1e9      	bne.n	8008706 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d002      	beq.n	800873e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008738:	68b8      	ldr	r0, [r7, #8]
 800873a:	f7ff f9db 	bl	8007af4 <tcp_abort>
  }
}
 800873e:	bf00      	nop
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	240031f8 	.word	0x240031f8
 800874c:	240031e8 	.word	0x240031e8

08008750 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008756:	4b10      	ldr	r3, [pc, #64]	; (8008798 <tcp_handle_closepend+0x48>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800875c:	e014      	b.n	8008788 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	8b5b      	ldrh	r3, [r3, #26]
 8008768:	f003 0308 	and.w	r3, r3, #8
 800876c:	2b00      	cmp	r3, #0
 800876e:	d009      	beq.n	8008784 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	8b5b      	ldrh	r3, [r3, #26]
 8008774:	f023 0308 	bic.w	r3, r3, #8
 8008778:	b29a      	uxth	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7ff f864 	bl	800784c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e7      	bne.n	800875e <tcp_handle_closepend+0xe>
  }
}
 800878e:	bf00      	nop
 8008790:	bf00      	nop
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	240031f4 	.word	0x240031f4

0800879c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	4603      	mov	r3, r0
 80087a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80087a6:	2001      	movs	r0, #1
 80087a8:	f7fd fc94 	bl	80060d4 <memp_malloc>
 80087ac:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d126      	bne.n	8008802 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80087b4:	f7ff ffcc 	bl	8008750 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80087b8:	f7ff ff9a 	bl	80086f0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80087bc:	2001      	movs	r0, #1
 80087be:	f7fd fc89 	bl	80060d4 <memp_malloc>
 80087c2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d11b      	bne.n	8008802 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80087ca:	2009      	movs	r0, #9
 80087cc:	f7ff ff46 	bl	800865c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80087d0:	2001      	movs	r0, #1
 80087d2:	f7fd fc7f 	bl	80060d4 <memp_malloc>
 80087d6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d111      	bne.n	8008802 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80087de:	2008      	movs	r0, #8
 80087e0:	f7ff ff3c 	bl	800865c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80087e4:	2001      	movs	r0, #1
 80087e6:	f7fd fc75 	bl	80060d4 <memp_malloc>
 80087ea:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d107      	bne.n	8008802 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7ff fee3 	bl	80085c0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80087fa:	2001      	movs	r0, #1
 80087fc:	f7fd fc6a 	bl	80060d4 <memp_malloc>
 8008800:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d03f      	beq.n	8008888 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008808:	229c      	movs	r2, #156	; 0x9c
 800880a:	2100      	movs	r1, #0
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f007 f96f 	bl	800faf0 <memset>
    pcb->prio = prio;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	79fa      	ldrb	r2, [r7, #7]
 8008816:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800881e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008828:	855a      	strh	r2, [r3, #42]	; 0x2a
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	22ff      	movs	r2, #255	; 0xff
 8008836:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800883e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2206      	movs	r2, #6
 8008844:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2206      	movs	r2, #6
 800884c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008854:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2201      	movs	r2, #1
 800885a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800885e:	4b0d      	ldr	r3, [pc, #52]	; (8008894 <tcp_alloc+0xf8>)
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008866:	4b0c      	ldr	r3, [pc, #48]	; (8008898 <tcp_alloc+0xfc>)
 8008868:	781a      	ldrb	r2, [r3, #0]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008874:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	4a08      	ldr	r2, [pc, #32]	; (800889c <tcp_alloc+0x100>)
 800887c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4a07      	ldr	r2, [pc, #28]	; (80088a0 <tcp_alloc+0x104>)
 8008884:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008888:	68fb      	ldr	r3, [r7, #12]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	240031e8 	.word	0x240031e8
 8008898:	240031fe 	.word	0x240031fe
 800889c:	08008555 	.word	0x08008555
 80088a0:	006ddd00 	.word	0x006ddd00

080088a4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d107      	bne.n	80088c2 <tcp_pcb_purge+0x1e>
 80088b2:	4b21      	ldr	r3, [pc, #132]	; (8008938 <tcp_pcb_purge+0x94>)
 80088b4:	f640 0251 	movw	r2, #2129	; 0x851
 80088b8:	4920      	ldr	r1, [pc, #128]	; (800893c <tcp_pcb_purge+0x98>)
 80088ba:	4821      	ldr	r0, [pc, #132]	; (8008940 <tcp_pcb_purge+0x9c>)
 80088bc:	f007 f920 	bl	800fb00 <iprintf>
 80088c0:	e037      	b.n	8008932 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	7d1b      	ldrb	r3, [r3, #20]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d033      	beq.n	8008932 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80088ce:	2b0a      	cmp	r3, #10
 80088d0:	d02f      	beq.n	8008932 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d02b      	beq.n	8008932 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d007      	beq.n	80088f2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fe fada 	bl	8006ea0 <pbuf_free>
      pcb->refused_data = NULL;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f986 	bl	8008c0c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008906:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800890c:	4618      	mov	r0, r3
 800890e:	f7ff fdc7 	bl	80084a0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008916:	4618      	mov	r0, r3
 8008918:	f7ff fdc2 	bl	80084a0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	66da      	str	r2, [r3, #108]	; 0x6c
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	08011a5c 	.word	0x08011a5c
 800893c:	080120a8 	.word	0x080120a8
 8008940:	08011aa0 	.word	0x08011aa0

08008944 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d106      	bne.n	8008962 <tcp_pcb_remove+0x1e>
 8008954:	4b3e      	ldr	r3, [pc, #248]	; (8008a50 <tcp_pcb_remove+0x10c>)
 8008956:	f640 0283 	movw	r2, #2179	; 0x883
 800895a:	493e      	ldr	r1, [pc, #248]	; (8008a54 <tcp_pcb_remove+0x110>)
 800895c:	483e      	ldr	r0, [pc, #248]	; (8008a58 <tcp_pcb_remove+0x114>)
 800895e:	f007 f8cf 	bl	800fb00 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d106      	bne.n	8008976 <tcp_pcb_remove+0x32>
 8008968:	4b39      	ldr	r3, [pc, #228]	; (8008a50 <tcp_pcb_remove+0x10c>)
 800896a:	f640 0284 	movw	r2, #2180	; 0x884
 800896e:	493b      	ldr	r1, [pc, #236]	; (8008a5c <tcp_pcb_remove+0x118>)
 8008970:	4839      	ldr	r0, [pc, #228]	; (8008a58 <tcp_pcb_remove+0x114>)
 8008972:	f007 f8c5 	bl	800fb00 <iprintf>

  TCP_RMV(pcblist, pcb);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	429a      	cmp	r2, r3
 800897e:	d105      	bne.n	800898c <tcp_pcb_remove+0x48>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68da      	ldr	r2, [r3, #12]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	601a      	str	r2, [r3, #0]
 800898a:	e013      	b.n	80089b4 <tcp_pcb_remove+0x70>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	60fb      	str	r3, [r7, #12]
 8008992:	e00c      	b.n	80089ae <tcp_pcb_remove+0x6a>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	683a      	ldr	r2, [r7, #0]
 800899a:	429a      	cmp	r2, r3
 800899c:	d104      	bne.n	80089a8 <tcp_pcb_remove+0x64>
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	68da      	ldr	r2, [r3, #12]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	60da      	str	r2, [r3, #12]
 80089a6:	e005      	b.n	80089b4 <tcp_pcb_remove+0x70>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	60fb      	str	r3, [r7, #12]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1ef      	bne.n	8008994 <tcp_pcb_remove+0x50>
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	2200      	movs	r2, #0
 80089b8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80089ba:	6838      	ldr	r0, [r7, #0]
 80089bc:	f7ff ff72 	bl	80088a4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	7d1b      	ldrb	r3, [r3, #20]
 80089c4:	2b0a      	cmp	r3, #10
 80089c6:	d013      	beq.n	80089f0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d00f      	beq.n	80089f0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	8b5b      	ldrh	r3, [r3, #26]
 80089d4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d009      	beq.n	80089f0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	8b5b      	ldrh	r3, [r3, #26]
 80089e0:	f043 0302 	orr.w	r3, r3, #2
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80089ea:	6838      	ldr	r0, [r7, #0]
 80089ec:	f002 ff6e 	bl	800b8cc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	7d1b      	ldrb	r3, [r3, #20]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d020      	beq.n	8008a3a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d006      	beq.n	8008a0e <tcp_pcb_remove+0xca>
 8008a00:	4b13      	ldr	r3, [pc, #76]	; (8008a50 <tcp_pcb_remove+0x10c>)
 8008a02:	f640 0293 	movw	r2, #2195	; 0x893
 8008a06:	4916      	ldr	r1, [pc, #88]	; (8008a60 <tcp_pcb_remove+0x11c>)
 8008a08:	4813      	ldr	r0, [pc, #76]	; (8008a58 <tcp_pcb_remove+0x114>)
 8008a0a:	f007 f879 	bl	800fb00 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d006      	beq.n	8008a24 <tcp_pcb_remove+0xe0>
 8008a16:	4b0e      	ldr	r3, [pc, #56]	; (8008a50 <tcp_pcb_remove+0x10c>)
 8008a18:	f640 0294 	movw	r2, #2196	; 0x894
 8008a1c:	4911      	ldr	r1, [pc, #68]	; (8008a64 <tcp_pcb_remove+0x120>)
 8008a1e:	480e      	ldr	r0, [pc, #56]	; (8008a58 <tcp_pcb_remove+0x114>)
 8008a20:	f007 f86e 	bl	800fb00 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d006      	beq.n	8008a3a <tcp_pcb_remove+0xf6>
 8008a2c:	4b08      	ldr	r3, [pc, #32]	; (8008a50 <tcp_pcb_remove+0x10c>)
 8008a2e:	f640 0296 	movw	r2, #2198	; 0x896
 8008a32:	490d      	ldr	r1, [pc, #52]	; (8008a68 <tcp_pcb_remove+0x124>)
 8008a34:	4808      	ldr	r0, [pc, #32]	; (8008a58 <tcp_pcb_remove+0x114>)
 8008a36:	f007 f863 	bl	800fb00 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	2200      	movs	r2, #0
 8008a44:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008a46:	bf00      	nop
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	08011a5c 	.word	0x08011a5c
 8008a54:	080120c4 	.word	0x080120c4
 8008a58:	08011aa0 	.word	0x08011aa0
 8008a5c:	080120e0 	.word	0x080120e0
 8008a60:	08012100 	.word	0x08012100
 8008a64:	08012118 	.word	0x08012118
 8008a68:	08012134 	.word	0x08012134

08008a6c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d106      	bne.n	8008a88 <tcp_next_iss+0x1c>
 8008a7a:	4b0a      	ldr	r3, [pc, #40]	; (8008aa4 <tcp_next_iss+0x38>)
 8008a7c:	f640 02af 	movw	r2, #2223	; 0x8af
 8008a80:	4909      	ldr	r1, [pc, #36]	; (8008aa8 <tcp_next_iss+0x3c>)
 8008a82:	480a      	ldr	r0, [pc, #40]	; (8008aac <tcp_next_iss+0x40>)
 8008a84:	f007 f83c 	bl	800fb00 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008a88:	4b09      	ldr	r3, [pc, #36]	; (8008ab0 <tcp_next_iss+0x44>)
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	4b09      	ldr	r3, [pc, #36]	; (8008ab4 <tcp_next_iss+0x48>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4413      	add	r3, r2
 8008a92:	4a07      	ldr	r2, [pc, #28]	; (8008ab0 <tcp_next_iss+0x44>)
 8008a94:	6013      	str	r3, [r2, #0]
  return iss;
 8008a96:	4b06      	ldr	r3, [pc, #24]	; (8008ab0 <tcp_next_iss+0x44>)
 8008a98:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	08011a5c 	.word	0x08011a5c
 8008aa8:	0801214c 	.word	0x0801214c
 8008aac:	08011aa0 	.word	0x08011aa0
 8008ab0:	24000028 	.word	0x24000028
 8008ab4:	240031e8 	.word	0x240031e8

08008ab8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	4603      	mov	r3, r0
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
 8008ac4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d106      	bne.n	8008ada <tcp_eff_send_mss_netif+0x22>
 8008acc:	4b14      	ldr	r3, [pc, #80]	; (8008b20 <tcp_eff_send_mss_netif+0x68>)
 8008ace:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008ad2:	4914      	ldr	r1, [pc, #80]	; (8008b24 <tcp_eff_send_mss_netif+0x6c>)
 8008ad4:	4814      	ldr	r0, [pc, #80]	; (8008b28 <tcp_eff_send_mss_netif+0x70>)
 8008ad6:	f007 f813 	bl	800fb00 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008ae0:	89fb      	ldrh	r3, [r7, #14]
 8008ae2:	e019      	b.n	8008b18 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008ae8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008aea:	8afb      	ldrh	r3, [r7, #22]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d012      	beq.n	8008b16 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008af0:	2328      	movs	r3, #40	; 0x28
 8008af2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008af4:	8afa      	ldrh	r2, [r7, #22]
 8008af6:	8abb      	ldrh	r3, [r7, #20]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d904      	bls.n	8008b06 <tcp_eff_send_mss_netif+0x4e>
 8008afc:	8afa      	ldrh	r2, [r7, #22]
 8008afe:	8abb      	ldrh	r3, [r7, #20]
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	e000      	b.n	8008b08 <tcp_eff_send_mss_netif+0x50>
 8008b06:	2300      	movs	r3, #0
 8008b08:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008b0a:	8a7a      	ldrh	r2, [r7, #18]
 8008b0c:	89fb      	ldrh	r3, [r7, #14]
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	bf28      	it	cs
 8008b12:	4613      	movcs	r3, r2
 8008b14:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008b16:	89fb      	ldrh	r3, [r7, #14]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3718      	adds	r7, #24
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	08011a5c 	.word	0x08011a5c
 8008b24:	08012168 	.word	0x08012168
 8008b28:	08011aa0 	.word	0x08011aa0

08008b2c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d119      	bne.n	8008b74 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008b40:	4b10      	ldr	r3, [pc, #64]	; (8008b84 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008b42:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008b46:	4910      	ldr	r1, [pc, #64]	; (8008b88 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008b48:	4810      	ldr	r0, [pc, #64]	; (8008b8c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008b4a:	f006 ffd9 	bl	800fb00 <iprintf>

  while (pcb != NULL) {
 8008b4e:	e011      	b.n	8008b74 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d108      	bne.n	8008b6e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f7fe ffc6 	bl	8007af4 <tcp_abort>
      pcb = next;
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	60fb      	str	r3, [r7, #12]
 8008b6c:	e002      	b.n	8008b74 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1ea      	bne.n	8008b50 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008b7a:	bf00      	nop
 8008b7c:	bf00      	nop
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	08011a5c 	.word	0x08011a5c
 8008b88:	08012190 	.word	0x08012190
 8008b8c:	08011aa0 	.word	0x08011aa0

08008b90 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d02a      	beq.n	8008bf6 <tcp_netif_ip_addr_changed+0x66>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d026      	beq.n	8008bf6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008ba8:	4b15      	ldr	r3, [pc, #84]	; (8008c00 <tcp_netif_ip_addr_changed+0x70>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f7ff ffbc 	bl	8008b2c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008bb4:	4b13      	ldr	r3, [pc, #76]	; (8008c04 <tcp_netif_ip_addr_changed+0x74>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7ff ffb6 	bl	8008b2c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d017      	beq.n	8008bf6 <tcp_netif_ip_addr_changed+0x66>
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d013      	beq.n	8008bf6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008bce:	4b0e      	ldr	r3, [pc, #56]	; (8008c08 <tcp_netif_ip_addr_changed+0x78>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	e00c      	b.n	8008bf0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d103      	bne.n	8008bea <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1ef      	bne.n	8008bd6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008bf6:	bf00      	nop
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	240031f4 	.word	0x240031f4
 8008c04:	240031ec 	.word	0x240031ec
 8008c08:	240031f0 	.word	0x240031f0

08008c0c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d007      	beq.n	8008c2c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7ff fc3d 	bl	80084a0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008c2c:	bf00      	nop
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008c34:	b590      	push	{r4, r7, lr}
 8008c36:	b08d      	sub	sp, #52	; 0x34
 8008c38:	af04      	add	r7, sp, #16
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d105      	bne.n	8008c50 <tcp_input+0x1c>
 8008c44:	4b9b      	ldr	r3, [pc, #620]	; (8008eb4 <tcp_input+0x280>)
 8008c46:	2283      	movs	r2, #131	; 0x83
 8008c48:	499b      	ldr	r1, [pc, #620]	; (8008eb8 <tcp_input+0x284>)
 8008c4a:	489c      	ldr	r0, [pc, #624]	; (8008ebc <tcp_input+0x288>)
 8008c4c:	f006 ff58 	bl	800fb00 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	4a9a      	ldr	r2, [pc, #616]	; (8008ec0 <tcp_input+0x28c>)
 8008c56:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	895b      	ldrh	r3, [r3, #10]
 8008c5c:	2b13      	cmp	r3, #19
 8008c5e:	f240 83d1 	bls.w	8009404 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008c62:	4b98      	ldr	r3, [pc, #608]	; (8008ec4 <tcp_input+0x290>)
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	4a97      	ldr	r2, [pc, #604]	; (8008ec4 <tcp_input+0x290>)
 8008c68:	6812      	ldr	r2, [r2, #0]
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f005 ff8d 	bl	800eb8c <ip4_addr_isbroadcast_u32>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f040 83c7 	bne.w	8009408 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008c7a:	4b92      	ldr	r3, [pc, #584]	; (8008ec4 <tcp_input+0x290>)
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008c82:	2be0      	cmp	r3, #224	; 0xe0
 8008c84:	f000 83c0 	beq.w	8009408 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008c88:	4b8d      	ldr	r3, [pc, #564]	; (8008ec0 <tcp_input+0x28c>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	899b      	ldrh	r3, [r3, #12]
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fc fcef 	bl	8005674 <lwip_htons>
 8008c96:	4603      	mov	r3, r0
 8008c98:	0b1b      	lsrs	r3, r3, #12
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008ca2:	7cbb      	ldrb	r3, [r7, #18]
 8008ca4:	2b13      	cmp	r3, #19
 8008ca6:	f240 83b1 	bls.w	800940c <tcp_input+0x7d8>
 8008caa:	7cbb      	ldrb	r3, [r7, #18]
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	891b      	ldrh	r3, [r3, #8]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	f200 83aa 	bhi.w	800940c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008cb8:	7cbb      	ldrb	r3, [r7, #18]
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	3b14      	subs	r3, #20
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	4b81      	ldr	r3, [pc, #516]	; (8008ec8 <tcp_input+0x294>)
 8008cc2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008cc4:	4b81      	ldr	r3, [pc, #516]	; (8008ecc <tcp_input+0x298>)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	895a      	ldrh	r2, [r3, #10]
 8008cce:	7cbb      	ldrb	r3, [r7, #18]
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d309      	bcc.n	8008cea <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008cd6:	4b7c      	ldr	r3, [pc, #496]	; (8008ec8 <tcp_input+0x294>)
 8008cd8:	881a      	ldrh	r2, [r3, #0]
 8008cda:	4b7d      	ldr	r3, [pc, #500]	; (8008ed0 <tcp_input+0x29c>)
 8008cdc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008cde:	7cbb      	ldrb	r3, [r7, #18]
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7fe f856 	bl	8006d94 <pbuf_remove_header>
 8008ce8:	e04e      	b.n	8008d88 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d105      	bne.n	8008cfe <tcp_input+0xca>
 8008cf2:	4b70      	ldr	r3, [pc, #448]	; (8008eb4 <tcp_input+0x280>)
 8008cf4:	22c2      	movs	r2, #194	; 0xc2
 8008cf6:	4977      	ldr	r1, [pc, #476]	; (8008ed4 <tcp_input+0x2a0>)
 8008cf8:	4870      	ldr	r0, [pc, #448]	; (8008ebc <tcp_input+0x288>)
 8008cfa:	f006 ff01 	bl	800fb00 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008cfe:	2114      	movs	r1, #20
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7fe f847 	bl	8006d94 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	895a      	ldrh	r2, [r3, #10]
 8008d0a:	4b71      	ldr	r3, [pc, #452]	; (8008ed0 <tcp_input+0x29c>)
 8008d0c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008d0e:	4b6e      	ldr	r3, [pc, #440]	; (8008ec8 <tcp_input+0x294>)
 8008d10:	881a      	ldrh	r2, [r3, #0]
 8008d12:	4b6f      	ldr	r3, [pc, #444]	; (8008ed0 <tcp_input+0x29c>)
 8008d14:	881b      	ldrh	r3, [r3, #0]
 8008d16:	1ad3      	subs	r3, r2, r3
 8008d18:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008d1a:	4b6d      	ldr	r3, [pc, #436]	; (8008ed0 <tcp_input+0x29c>)
 8008d1c:	881b      	ldrh	r3, [r3, #0]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7fe f837 	bl	8006d94 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	895b      	ldrh	r3, [r3, #10]
 8008d2c:	8a3a      	ldrh	r2, [r7, #16]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	f200 836e 	bhi.w	8009410 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	4a64      	ldr	r2, [pc, #400]	; (8008ecc <tcp_input+0x298>)
 8008d3c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	8a3a      	ldrh	r2, [r7, #16]
 8008d44:	4611      	mov	r1, r2
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fe f824 	bl	8006d94 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	891a      	ldrh	r2, [r3, #8]
 8008d50:	8a3b      	ldrh	r3, [r7, #16]
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	895b      	ldrh	r3, [r3, #10]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d005      	beq.n	8008d6e <tcp_input+0x13a>
 8008d62:	4b54      	ldr	r3, [pc, #336]	; (8008eb4 <tcp_input+0x280>)
 8008d64:	22df      	movs	r2, #223	; 0xdf
 8008d66:	495c      	ldr	r1, [pc, #368]	; (8008ed8 <tcp_input+0x2a4>)
 8008d68:	4854      	ldr	r0, [pc, #336]	; (8008ebc <tcp_input+0x288>)
 8008d6a:	f006 fec9 	bl	800fb00 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	891a      	ldrh	r2, [r3, #8]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	891b      	ldrh	r3, [r3, #8]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d005      	beq.n	8008d88 <tcp_input+0x154>
 8008d7c:	4b4d      	ldr	r3, [pc, #308]	; (8008eb4 <tcp_input+0x280>)
 8008d7e:	22e0      	movs	r2, #224	; 0xe0
 8008d80:	4956      	ldr	r1, [pc, #344]	; (8008edc <tcp_input+0x2a8>)
 8008d82:	484e      	ldr	r0, [pc, #312]	; (8008ebc <tcp_input+0x288>)
 8008d84:	f006 febc 	bl	800fb00 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008d88:	4b4d      	ldr	r3, [pc, #308]	; (8008ec0 <tcp_input+0x28c>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	881b      	ldrh	r3, [r3, #0]
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	4a4b      	ldr	r2, [pc, #300]	; (8008ec0 <tcp_input+0x28c>)
 8008d92:	6814      	ldr	r4, [r2, #0]
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fc fc6d 	bl	8005674 <lwip_htons>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008d9e:	4b48      	ldr	r3, [pc, #288]	; (8008ec0 <tcp_input+0x28c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	885b      	ldrh	r3, [r3, #2]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	4a46      	ldr	r2, [pc, #280]	; (8008ec0 <tcp_input+0x28c>)
 8008da8:	6814      	ldr	r4, [r2, #0]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fc fc62 	bl	8005674 <lwip_htons>
 8008db0:	4603      	mov	r3, r0
 8008db2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008db4:	4b42      	ldr	r3, [pc, #264]	; (8008ec0 <tcp_input+0x28c>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	4a41      	ldr	r2, [pc, #260]	; (8008ec0 <tcp_input+0x28c>)
 8008dbc:	6814      	ldr	r4, [r2, #0]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fc fc6d 	bl	800569e <lwip_htonl>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	6063      	str	r3, [r4, #4]
 8008dc8:	6863      	ldr	r3, [r4, #4]
 8008dca:	4a45      	ldr	r2, [pc, #276]	; (8008ee0 <tcp_input+0x2ac>)
 8008dcc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008dce:	4b3c      	ldr	r3, [pc, #240]	; (8008ec0 <tcp_input+0x28c>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	4a3a      	ldr	r2, [pc, #232]	; (8008ec0 <tcp_input+0x28c>)
 8008dd6:	6814      	ldr	r4, [r2, #0]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fc fc60 	bl	800569e <lwip_htonl>
 8008dde:	4603      	mov	r3, r0
 8008de0:	60a3      	str	r3, [r4, #8]
 8008de2:	68a3      	ldr	r3, [r4, #8]
 8008de4:	4a3f      	ldr	r2, [pc, #252]	; (8008ee4 <tcp_input+0x2b0>)
 8008de6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008de8:	4b35      	ldr	r3, [pc, #212]	; (8008ec0 <tcp_input+0x28c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	89db      	ldrh	r3, [r3, #14]
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	4a33      	ldr	r2, [pc, #204]	; (8008ec0 <tcp_input+0x28c>)
 8008df2:	6814      	ldr	r4, [r2, #0]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7fc fc3d 	bl	8005674 <lwip_htons>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008dfe:	4b30      	ldr	r3, [pc, #192]	; (8008ec0 <tcp_input+0x28c>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	899b      	ldrh	r3, [r3, #12]
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fc fc34 	bl	8005674 <lwip_htons>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e14:	b2da      	uxtb	r2, r3
 8008e16:	4b34      	ldr	r3, [pc, #208]	; (8008ee8 <tcp_input+0x2b4>)
 8008e18:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	891a      	ldrh	r2, [r3, #8]
 8008e1e:	4b33      	ldr	r3, [pc, #204]	; (8008eec <tcp_input+0x2b8>)
 8008e20:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008e22:	4b31      	ldr	r3, [pc, #196]	; (8008ee8 <tcp_input+0x2b4>)
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	f003 0303 	and.w	r3, r3, #3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00c      	beq.n	8008e48 <tcp_input+0x214>
    tcplen++;
 8008e2e:	4b2f      	ldr	r3, [pc, #188]	; (8008eec <tcp_input+0x2b8>)
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	3301      	adds	r3, #1
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	4b2d      	ldr	r3, [pc, #180]	; (8008eec <tcp_input+0x2b8>)
 8008e38:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	891a      	ldrh	r2, [r3, #8]
 8008e3e:	4b2b      	ldr	r3, [pc, #172]	; (8008eec <tcp_input+0x2b8>)
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	f200 82e6 	bhi.w	8009414 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e4c:	4b28      	ldr	r3, [pc, #160]	; (8008ef0 <tcp_input+0x2bc>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	61fb      	str	r3, [r7, #28]
 8008e52:	e09d      	b.n	8008f90 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	7d1b      	ldrb	r3, [r3, #20]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d105      	bne.n	8008e68 <tcp_input+0x234>
 8008e5c:	4b15      	ldr	r3, [pc, #84]	; (8008eb4 <tcp_input+0x280>)
 8008e5e:	22fb      	movs	r2, #251	; 0xfb
 8008e60:	4924      	ldr	r1, [pc, #144]	; (8008ef4 <tcp_input+0x2c0>)
 8008e62:	4816      	ldr	r0, [pc, #88]	; (8008ebc <tcp_input+0x288>)
 8008e64:	f006 fe4c 	bl	800fb00 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	7d1b      	ldrb	r3, [r3, #20]
 8008e6c:	2b0a      	cmp	r3, #10
 8008e6e:	d105      	bne.n	8008e7c <tcp_input+0x248>
 8008e70:	4b10      	ldr	r3, [pc, #64]	; (8008eb4 <tcp_input+0x280>)
 8008e72:	22fc      	movs	r2, #252	; 0xfc
 8008e74:	4920      	ldr	r1, [pc, #128]	; (8008ef8 <tcp_input+0x2c4>)
 8008e76:	4811      	ldr	r0, [pc, #68]	; (8008ebc <tcp_input+0x288>)
 8008e78:	f006 fe42 	bl	800fb00 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	7d1b      	ldrb	r3, [r3, #20]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d105      	bne.n	8008e90 <tcp_input+0x25c>
 8008e84:	4b0b      	ldr	r3, [pc, #44]	; (8008eb4 <tcp_input+0x280>)
 8008e86:	22fd      	movs	r2, #253	; 0xfd
 8008e88:	491c      	ldr	r1, [pc, #112]	; (8008efc <tcp_input+0x2c8>)
 8008e8a:	480c      	ldr	r0, [pc, #48]	; (8008ebc <tcp_input+0x288>)
 8008e8c:	f006 fe38 	bl	800fb00 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	7a1b      	ldrb	r3, [r3, #8]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d033      	beq.n	8008f00 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	7a1a      	ldrb	r2, [r3, #8]
 8008e9c:	4b09      	ldr	r3, [pc, #36]	; (8008ec4 <tcp_input+0x290>)
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d029      	beq.n	8008f00 <tcp_input+0x2cc>
      prev = pcb;
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	61bb      	str	r3, [r7, #24]
      continue;
 8008eb0:	e06b      	b.n	8008f8a <tcp_input+0x356>
 8008eb2:	bf00      	nop
 8008eb4:	080121c4 	.word	0x080121c4
 8008eb8:	080121f8 	.word	0x080121f8
 8008ebc:	08012210 	.word	0x08012210
 8008ec0:	24003210 	.word	0x24003210
 8008ec4:	240002cc 	.word	0x240002cc
 8008ec8:	24003214 	.word	0x24003214
 8008ecc:	24003218 	.word	0x24003218
 8008ed0:	24003216 	.word	0x24003216
 8008ed4:	08012238 	.word	0x08012238
 8008ed8:	08012248 	.word	0x08012248
 8008edc:	08012254 	.word	0x08012254
 8008ee0:	24003220 	.word	0x24003220
 8008ee4:	24003224 	.word	0x24003224
 8008ee8:	2400322c 	.word	0x2400322c
 8008eec:	2400322a 	.word	0x2400322a
 8008ef0:	240031f4 	.word	0x240031f4
 8008ef4:	08012274 	.word	0x08012274
 8008ef8:	0801229c 	.word	0x0801229c
 8008efc:	080122c8 	.word	0x080122c8
    }

    if (pcb->remote_port == tcphdr->src &&
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	8b1a      	ldrh	r2, [r3, #24]
 8008f04:	4b72      	ldr	r3, [pc, #456]	; (80090d0 <tcp_input+0x49c>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	881b      	ldrh	r3, [r3, #0]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d13a      	bne.n	8008f86 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	8ada      	ldrh	r2, [r3, #22]
 8008f14:	4b6e      	ldr	r3, [pc, #440]	; (80090d0 <tcp_input+0x49c>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	885b      	ldrh	r3, [r3, #2]
 8008f1a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d132      	bne.n	8008f86 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	4b6b      	ldr	r3, [pc, #428]	; (80090d4 <tcp_input+0x4a0>)
 8008f26:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d12c      	bne.n	8008f86 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	4b68      	ldr	r3, [pc, #416]	; (80090d4 <tcp_input+0x4a0>)
 8008f32:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d126      	bne.n	8008f86 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	69fa      	ldr	r2, [r7, #28]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d106      	bne.n	8008f50 <tcp_input+0x31c>
 8008f42:	4b65      	ldr	r3, [pc, #404]	; (80090d8 <tcp_input+0x4a4>)
 8008f44:	f240 120d 	movw	r2, #269	; 0x10d
 8008f48:	4964      	ldr	r1, [pc, #400]	; (80090dc <tcp_input+0x4a8>)
 8008f4a:	4865      	ldr	r0, [pc, #404]	; (80090e0 <tcp_input+0x4ac>)
 8008f4c:	f006 fdd8 	bl	800fb00 <iprintf>
      if (prev != NULL) {
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00a      	beq.n	8008f6c <tcp_input+0x338>
        prev->next = pcb->next;
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	68da      	ldr	r2, [r3, #12]
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008f5e:	4b61      	ldr	r3, [pc, #388]	; (80090e4 <tcp_input+0x4b0>)
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008f66:	4a5f      	ldr	r2, [pc, #380]	; (80090e4 <tcp_input+0x4b0>)
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	69fa      	ldr	r2, [r7, #28]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d111      	bne.n	8008f9a <tcp_input+0x366>
 8008f76:	4b58      	ldr	r3, [pc, #352]	; (80090d8 <tcp_input+0x4a4>)
 8008f78:	f240 1215 	movw	r2, #277	; 0x115
 8008f7c:	495a      	ldr	r1, [pc, #360]	; (80090e8 <tcp_input+0x4b4>)
 8008f7e:	4858      	ldr	r0, [pc, #352]	; (80090e0 <tcp_input+0x4ac>)
 8008f80:	f006 fdbe 	bl	800fb00 <iprintf>
      break;
 8008f84:	e009      	b.n	8008f9a <tcp_input+0x366>
    }
    prev = pcb;
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	61fb      	str	r3, [r7, #28]
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f47f af5e 	bne.w	8008e54 <tcp_input+0x220>
 8008f98:	e000      	b.n	8008f9c <tcp_input+0x368>
      break;
 8008f9a:	bf00      	nop
  }

  if (pcb == NULL) {
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f040 80aa 	bne.w	80090f8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008fa4:	4b51      	ldr	r3, [pc, #324]	; (80090ec <tcp_input+0x4b8>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	61fb      	str	r3, [r7, #28]
 8008faa:	e03f      	b.n	800902c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	7d1b      	ldrb	r3, [r3, #20]
 8008fb0:	2b0a      	cmp	r3, #10
 8008fb2:	d006      	beq.n	8008fc2 <tcp_input+0x38e>
 8008fb4:	4b48      	ldr	r3, [pc, #288]	; (80090d8 <tcp_input+0x4a4>)
 8008fb6:	f240 121f 	movw	r2, #287	; 0x11f
 8008fba:	494d      	ldr	r1, [pc, #308]	; (80090f0 <tcp_input+0x4bc>)
 8008fbc:	4848      	ldr	r0, [pc, #288]	; (80090e0 <tcp_input+0x4ac>)
 8008fbe:	f006 fd9f 	bl	800fb00 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	7a1b      	ldrb	r3, [r3, #8]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d009      	beq.n	8008fde <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	7a1a      	ldrb	r2, [r3, #8]
 8008fce:	4b41      	ldr	r3, [pc, #260]	; (80090d4 <tcp_input+0x4a0>)
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d122      	bne.n	8009024 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	8b1a      	ldrh	r2, [r3, #24]
 8008fe2:	4b3b      	ldr	r3, [pc, #236]	; (80090d0 <tcp_input+0x49c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	881b      	ldrh	r3, [r3, #0]
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d11b      	bne.n	8009026 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	8ada      	ldrh	r2, [r3, #22]
 8008ff2:	4b37      	ldr	r3, [pc, #220]	; (80090d0 <tcp_input+0x49c>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	885b      	ldrh	r3, [r3, #2]
 8008ff8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d113      	bne.n	8009026 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	685a      	ldr	r2, [r3, #4]
 8009002:	4b34      	ldr	r3, [pc, #208]	; (80090d4 <tcp_input+0x4a0>)
 8009004:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009006:	429a      	cmp	r2, r3
 8009008:	d10d      	bne.n	8009026 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	4b31      	ldr	r3, [pc, #196]	; (80090d4 <tcp_input+0x4a0>)
 8009010:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009012:	429a      	cmp	r2, r3
 8009014:	d107      	bne.n	8009026 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009016:	69f8      	ldr	r0, [r7, #28]
 8009018:	f000 fb56 	bl	80096c8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f7fd ff3f 	bl	8006ea0 <pbuf_free>
        return;
 8009022:	e1fd      	b.n	8009420 <tcp_input+0x7ec>
        continue;
 8009024:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	61fb      	str	r3, [r7, #28]
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1bc      	bne.n	8008fac <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009032:	2300      	movs	r3, #0
 8009034:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009036:	4b2f      	ldr	r3, [pc, #188]	; (80090f4 <tcp_input+0x4c0>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	617b      	str	r3, [r7, #20]
 800903c:	e02a      	b.n	8009094 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	7a1b      	ldrb	r3, [r3, #8]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00c      	beq.n	8009060 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	7a1a      	ldrb	r2, [r3, #8]
 800904a:	4b22      	ldr	r3, [pc, #136]	; (80090d4 <tcp_input+0x4a0>)
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009052:	3301      	adds	r3, #1
 8009054:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009056:	429a      	cmp	r2, r3
 8009058:	d002      	beq.n	8009060 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	61bb      	str	r3, [r7, #24]
        continue;
 800905e:	e016      	b.n	800908e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	8ada      	ldrh	r2, [r3, #22]
 8009064:	4b1a      	ldr	r3, [pc, #104]	; (80090d0 <tcp_input+0x49c>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	885b      	ldrh	r3, [r3, #2]
 800906a:	b29b      	uxth	r3, r3
 800906c:	429a      	cmp	r2, r3
 800906e:	d10c      	bne.n	800908a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	4b17      	ldr	r3, [pc, #92]	; (80090d4 <tcp_input+0x4a0>)
 8009076:	695b      	ldr	r3, [r3, #20]
 8009078:	429a      	cmp	r2, r3
 800907a:	d00f      	beq.n	800909c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00d      	beq.n	800909e <tcp_input+0x46a>
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d009      	beq.n	800909e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	617b      	str	r3, [r7, #20]
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1d1      	bne.n	800903e <tcp_input+0x40a>
 800909a:	e000      	b.n	800909e <tcp_input+0x46a>
            break;
 800909c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d029      	beq.n	80090f8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00a      	beq.n	80090c0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	68da      	ldr	r2, [r3, #12]
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80090b2:	4b10      	ldr	r3, [pc, #64]	; (80090f4 <tcp_input+0x4c0>)
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80090ba:	4a0e      	ldr	r2, [pc, #56]	; (80090f4 <tcp_input+0x4c0>)
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80090c0:	6978      	ldr	r0, [r7, #20]
 80090c2:	f000 fa03 	bl	80094cc <tcp_listen_input>
      }
      pbuf_free(p);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7fd feea 	bl	8006ea0 <pbuf_free>
      return;
 80090cc:	e1a8      	b.n	8009420 <tcp_input+0x7ec>
 80090ce:	bf00      	nop
 80090d0:	24003210 	.word	0x24003210
 80090d4:	240002cc 	.word	0x240002cc
 80090d8:	080121c4 	.word	0x080121c4
 80090dc:	080122f0 	.word	0x080122f0
 80090e0:	08012210 	.word	0x08012210
 80090e4:	240031f4 	.word	0x240031f4
 80090e8:	0801231c 	.word	0x0801231c
 80090ec:	240031f8 	.word	0x240031f8
 80090f0:	08012348 	.word	0x08012348
 80090f4:	240031f0 	.word	0x240031f0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f000 8158 	beq.w	80093b0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009100:	4b95      	ldr	r3, [pc, #596]	; (8009358 <tcp_input+0x724>)
 8009102:	2200      	movs	r2, #0
 8009104:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	891a      	ldrh	r2, [r3, #8]
 800910a:	4b93      	ldr	r3, [pc, #588]	; (8009358 <tcp_input+0x724>)
 800910c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800910e:	4a92      	ldr	r2, [pc, #584]	; (8009358 <tcp_input+0x724>)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009114:	4b91      	ldr	r3, [pc, #580]	; (800935c <tcp_input+0x728>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a8f      	ldr	r2, [pc, #572]	; (8009358 <tcp_input+0x724>)
 800911a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800911c:	4b90      	ldr	r3, [pc, #576]	; (8009360 <tcp_input+0x72c>)
 800911e:	2200      	movs	r2, #0
 8009120:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009122:	4b90      	ldr	r3, [pc, #576]	; (8009364 <tcp_input+0x730>)
 8009124:	2200      	movs	r2, #0
 8009126:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009128:	4b8f      	ldr	r3, [pc, #572]	; (8009368 <tcp_input+0x734>)
 800912a:	2200      	movs	r2, #0
 800912c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800912e:	4b8f      	ldr	r3, [pc, #572]	; (800936c <tcp_input+0x738>)
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	f003 0308 	and.w	r3, r3, #8
 8009136:	2b00      	cmp	r3, #0
 8009138:	d006      	beq.n	8009148 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	7b5b      	ldrb	r3, [r3, #13]
 800913e:	f043 0301 	orr.w	r3, r3, #1
 8009142:	b2da      	uxtb	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800914c:	2b00      	cmp	r3, #0
 800914e:	d017      	beq.n	8009180 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009150:	69f8      	ldr	r0, [r7, #28]
 8009152:	f7ff f929 	bl	80083a8 <tcp_process_refused_data>
 8009156:	4603      	mov	r3, r0
 8009158:	f113 0f0d 	cmn.w	r3, #13
 800915c:	d007      	beq.n	800916e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00c      	beq.n	8009180 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009166:	4b82      	ldr	r3, [pc, #520]	; (8009370 <tcp_input+0x73c>)
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d008      	beq.n	8009180 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009172:	2b00      	cmp	r3, #0
 8009174:	f040 80e3 	bne.w	800933e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009178:	69f8      	ldr	r0, [r7, #28]
 800917a:	f003 f9ad 	bl	800c4d8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800917e:	e0de      	b.n	800933e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009180:	4a7c      	ldr	r2, [pc, #496]	; (8009374 <tcp_input+0x740>)
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009186:	69f8      	ldr	r0, [r7, #28]
 8009188:	f000 fb18 	bl	80097bc <tcp_process>
 800918c:	4603      	mov	r3, r0
 800918e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009190:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009194:	f113 0f0d 	cmn.w	r3, #13
 8009198:	f000 80d3 	beq.w	8009342 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800919c:	4b71      	ldr	r3, [pc, #452]	; (8009364 <tcp_input+0x730>)
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	f003 0308 	and.w	r3, r3, #8
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d015      	beq.n	80091d4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d008      	beq.n	80091c4 <tcp_input+0x590>
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091b8:	69fa      	ldr	r2, [r7, #28]
 80091ba:	6912      	ldr	r2, [r2, #16]
 80091bc:	f06f 010d 	mvn.w	r1, #13
 80091c0:	4610      	mov	r0, r2
 80091c2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80091c4:	69f9      	ldr	r1, [r7, #28]
 80091c6:	486c      	ldr	r0, [pc, #432]	; (8009378 <tcp_input+0x744>)
 80091c8:	f7ff fbbc 	bl	8008944 <tcp_pcb_remove>
        tcp_free(pcb);
 80091cc:	69f8      	ldr	r0, [r7, #28]
 80091ce:	f7fe f9a9 	bl	8007524 <tcp_free>
 80091d2:	e0da      	b.n	800938a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80091d8:	4b63      	ldr	r3, [pc, #396]	; (8009368 <tcp_input+0x734>)
 80091da:	881b      	ldrh	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d01d      	beq.n	800921c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80091e0:	4b61      	ldr	r3, [pc, #388]	; (8009368 <tcp_input+0x734>)
 80091e2:	881b      	ldrh	r3, [r3, #0]
 80091e4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00a      	beq.n	8009206 <tcp_input+0x5d2>
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091f6:	69fa      	ldr	r2, [r7, #28]
 80091f8:	6910      	ldr	r0, [r2, #16]
 80091fa:	89fa      	ldrh	r2, [r7, #14]
 80091fc:	69f9      	ldr	r1, [r7, #28]
 80091fe:	4798      	blx	r3
 8009200:	4603      	mov	r3, r0
 8009202:	74fb      	strb	r3, [r7, #19]
 8009204:	e001      	b.n	800920a <tcp_input+0x5d6>
 8009206:	2300      	movs	r3, #0
 8009208:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800920a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800920e:	f113 0f0d 	cmn.w	r3, #13
 8009212:	f000 8098 	beq.w	8009346 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009216:	4b54      	ldr	r3, [pc, #336]	; (8009368 <tcp_input+0x734>)
 8009218:	2200      	movs	r2, #0
 800921a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800921c:	69f8      	ldr	r0, [r7, #28]
 800921e:	f000 f915 	bl	800944c <tcp_input_delayed_close>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	f040 8090 	bne.w	800934a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800922a:	4b4d      	ldr	r3, [pc, #308]	; (8009360 <tcp_input+0x72c>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d041      	beq.n	80092b6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009236:	2b00      	cmp	r3, #0
 8009238:	d006      	beq.n	8009248 <tcp_input+0x614>
 800923a:	4b50      	ldr	r3, [pc, #320]	; (800937c <tcp_input+0x748>)
 800923c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009240:	494f      	ldr	r1, [pc, #316]	; (8009380 <tcp_input+0x74c>)
 8009242:	4850      	ldr	r0, [pc, #320]	; (8009384 <tcp_input+0x750>)
 8009244:	f006 fc5c 	bl	800fb00 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	8b5b      	ldrh	r3, [r3, #26]
 800924c:	f003 0310 	and.w	r3, r3, #16
 8009250:	2b00      	cmp	r3, #0
 8009252:	d008      	beq.n	8009266 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009254:	4b42      	ldr	r3, [pc, #264]	; (8009360 <tcp_input+0x72c>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4618      	mov	r0, r3
 800925a:	f7fd fe21 	bl	8006ea0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800925e:	69f8      	ldr	r0, [r7, #28]
 8009260:	f7fe fc48 	bl	8007af4 <tcp_abort>
            goto aborted;
 8009264:	e091      	b.n	800938a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00c      	beq.n	800928a <tcp_input+0x656>
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	6918      	ldr	r0, [r3, #16]
 800927a:	4b39      	ldr	r3, [pc, #228]	; (8009360 <tcp_input+0x72c>)
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	2300      	movs	r3, #0
 8009280:	69f9      	ldr	r1, [r7, #28]
 8009282:	47a0      	blx	r4
 8009284:	4603      	mov	r3, r0
 8009286:	74fb      	strb	r3, [r7, #19]
 8009288:	e008      	b.n	800929c <tcp_input+0x668>
 800928a:	4b35      	ldr	r3, [pc, #212]	; (8009360 <tcp_input+0x72c>)
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	2300      	movs	r3, #0
 8009290:	69f9      	ldr	r1, [r7, #28]
 8009292:	2000      	movs	r0, #0
 8009294:	f7ff f95e 	bl	8008554 <tcp_recv_null>
 8009298:	4603      	mov	r3, r0
 800929a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800929c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80092a0:	f113 0f0d 	cmn.w	r3, #13
 80092a4:	d053      	beq.n	800934e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80092a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d003      	beq.n	80092b6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80092ae:	4b2c      	ldr	r3, [pc, #176]	; (8009360 <tcp_input+0x72c>)
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80092b6:	4b2b      	ldr	r3, [pc, #172]	; (8009364 <tcp_input+0x730>)
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	f003 0320 	and.w	r3, r3, #32
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d030      	beq.n	8009324 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d009      	beq.n	80092de <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092ce:	7b5a      	ldrb	r2, [r3, #13]
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092d4:	f042 0220 	orr.w	r2, r2, #32
 80092d8:	b2d2      	uxtb	r2, r2
 80092da:	735a      	strb	r2, [r3, #13]
 80092dc:	e022      	b.n	8009324 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80092e6:	d005      	beq.n	80092f4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ec:	3301      	adds	r3, #1
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00b      	beq.n	8009316 <tcp_input+0x6e2>
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	6918      	ldr	r0, [r3, #16]
 8009308:	2300      	movs	r3, #0
 800930a:	2200      	movs	r2, #0
 800930c:	69f9      	ldr	r1, [r7, #28]
 800930e:	47a0      	blx	r4
 8009310:	4603      	mov	r3, r0
 8009312:	74fb      	strb	r3, [r7, #19]
 8009314:	e001      	b.n	800931a <tcp_input+0x6e6>
 8009316:	2300      	movs	r3, #0
 8009318:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800931a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800931e:	f113 0f0d 	cmn.w	r3, #13
 8009322:	d016      	beq.n	8009352 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009324:	4b13      	ldr	r3, [pc, #76]	; (8009374 <tcp_input+0x740>)
 8009326:	2200      	movs	r2, #0
 8009328:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800932a:	69f8      	ldr	r0, [r7, #28]
 800932c:	f000 f88e 	bl	800944c <tcp_input_delayed_close>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d128      	bne.n	8009388 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009336:	69f8      	ldr	r0, [r7, #28]
 8009338:	f002 fac8 	bl	800b8cc <tcp_output>
 800933c:	e025      	b.n	800938a <tcp_input+0x756>
        goto aborted;
 800933e:	bf00      	nop
 8009340:	e023      	b.n	800938a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009342:	bf00      	nop
 8009344:	e021      	b.n	800938a <tcp_input+0x756>
              goto aborted;
 8009346:	bf00      	nop
 8009348:	e01f      	b.n	800938a <tcp_input+0x756>
          goto aborted;
 800934a:	bf00      	nop
 800934c:	e01d      	b.n	800938a <tcp_input+0x756>
            goto aborted;
 800934e:	bf00      	nop
 8009350:	e01b      	b.n	800938a <tcp_input+0x756>
              goto aborted;
 8009352:	bf00      	nop
 8009354:	e019      	b.n	800938a <tcp_input+0x756>
 8009356:	bf00      	nop
 8009358:	24003200 	.word	0x24003200
 800935c:	24003210 	.word	0x24003210
 8009360:	24003230 	.word	0x24003230
 8009364:	2400322d 	.word	0x2400322d
 8009368:	24003228 	.word	0x24003228
 800936c:	2400322c 	.word	0x2400322c
 8009370:	2400322a 	.word	0x2400322a
 8009374:	24003234 	.word	0x24003234
 8009378:	240031f4 	.word	0x240031f4
 800937c:	080121c4 	.word	0x080121c4
 8009380:	08012378 	.word	0x08012378
 8009384:	08012210 	.word	0x08012210
          goto aborted;
 8009388:	bf00      	nop
    tcp_input_pcb = NULL;
 800938a:	4b27      	ldr	r3, [pc, #156]	; (8009428 <tcp_input+0x7f4>)
 800938c:	2200      	movs	r2, #0
 800938e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009390:	4b26      	ldr	r3, [pc, #152]	; (800942c <tcp_input+0x7f8>)
 8009392:	2200      	movs	r2, #0
 8009394:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009396:	4b26      	ldr	r3, [pc, #152]	; (8009430 <tcp_input+0x7fc>)
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d03f      	beq.n	800941e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800939e:	4b24      	ldr	r3, [pc, #144]	; (8009430 <tcp_input+0x7fc>)
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fd fd7c 	bl	8006ea0 <pbuf_free>
      inseg.p = NULL;
 80093a8:	4b21      	ldr	r3, [pc, #132]	; (8009430 <tcp_input+0x7fc>)
 80093aa:	2200      	movs	r2, #0
 80093ac:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80093ae:	e036      	b.n	800941e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80093b0:	4b20      	ldr	r3, [pc, #128]	; (8009434 <tcp_input+0x800>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	899b      	ldrh	r3, [r3, #12]
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fc f95b 	bl	8005674 <lwip_htons>
 80093be:	4603      	mov	r3, r0
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	f003 0304 	and.w	r3, r3, #4
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d118      	bne.n	80093fc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093ca:	4b1b      	ldr	r3, [pc, #108]	; (8009438 <tcp_input+0x804>)
 80093cc:	6819      	ldr	r1, [r3, #0]
 80093ce:	4b1b      	ldr	r3, [pc, #108]	; (800943c <tcp_input+0x808>)
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	461a      	mov	r2, r3
 80093d4:	4b1a      	ldr	r3, [pc, #104]	; (8009440 <tcp_input+0x80c>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093da:	4b16      	ldr	r3, [pc, #88]	; (8009434 <tcp_input+0x800>)
 80093dc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093de:	885b      	ldrh	r3, [r3, #2]
 80093e0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093e2:	4a14      	ldr	r2, [pc, #80]	; (8009434 <tcp_input+0x800>)
 80093e4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093e6:	8812      	ldrh	r2, [r2, #0]
 80093e8:	b292      	uxth	r2, r2
 80093ea:	9202      	str	r2, [sp, #8]
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	4b15      	ldr	r3, [pc, #84]	; (8009444 <tcp_input+0x810>)
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	4b15      	ldr	r3, [pc, #84]	; (8009448 <tcp_input+0x814>)
 80093f4:	4602      	mov	r2, r0
 80093f6:	2000      	movs	r0, #0
 80093f8:	f003 f81c 	bl	800c434 <tcp_rst>
    pbuf_free(p);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7fd fd4f 	bl	8006ea0 <pbuf_free>
  return;
 8009402:	e00c      	b.n	800941e <tcp_input+0x7ea>
    goto dropped;
 8009404:	bf00      	nop
 8009406:	e006      	b.n	8009416 <tcp_input+0x7e2>
    goto dropped;
 8009408:	bf00      	nop
 800940a:	e004      	b.n	8009416 <tcp_input+0x7e2>
    goto dropped;
 800940c:	bf00      	nop
 800940e:	e002      	b.n	8009416 <tcp_input+0x7e2>
      goto dropped;
 8009410:	bf00      	nop
 8009412:	e000      	b.n	8009416 <tcp_input+0x7e2>
      goto dropped;
 8009414:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7fd fd42 	bl	8006ea0 <pbuf_free>
 800941c:	e000      	b.n	8009420 <tcp_input+0x7ec>
  return;
 800941e:	bf00      	nop
}
 8009420:	3724      	adds	r7, #36	; 0x24
 8009422:	46bd      	mov	sp, r7
 8009424:	bd90      	pop	{r4, r7, pc}
 8009426:	bf00      	nop
 8009428:	24003234 	.word	0x24003234
 800942c:	24003230 	.word	0x24003230
 8009430:	24003200 	.word	0x24003200
 8009434:	24003210 	.word	0x24003210
 8009438:	24003224 	.word	0x24003224
 800943c:	2400322a 	.word	0x2400322a
 8009440:	24003220 	.word	0x24003220
 8009444:	240002dc 	.word	0x240002dc
 8009448:	240002e0 	.word	0x240002e0

0800944c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d106      	bne.n	8009468 <tcp_input_delayed_close+0x1c>
 800945a:	4b17      	ldr	r3, [pc, #92]	; (80094b8 <tcp_input_delayed_close+0x6c>)
 800945c:	f240 225a 	movw	r2, #602	; 0x25a
 8009460:	4916      	ldr	r1, [pc, #88]	; (80094bc <tcp_input_delayed_close+0x70>)
 8009462:	4817      	ldr	r0, [pc, #92]	; (80094c0 <tcp_input_delayed_close+0x74>)
 8009464:	f006 fb4c 	bl	800fb00 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009468:	4b16      	ldr	r3, [pc, #88]	; (80094c4 <tcp_input_delayed_close+0x78>)
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	f003 0310 	and.w	r3, r3, #16
 8009470:	2b00      	cmp	r3, #0
 8009472:	d01c      	beq.n	80094ae <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	8b5b      	ldrh	r3, [r3, #26]
 8009478:	f003 0310 	and.w	r3, r3, #16
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10d      	bne.n	800949c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009486:	2b00      	cmp	r3, #0
 8009488:	d008      	beq.n	800949c <tcp_input_delayed_close+0x50>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	6912      	ldr	r2, [r2, #16]
 8009494:	f06f 010e 	mvn.w	r1, #14
 8009498:	4610      	mov	r0, r2
 800949a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800949c:	6879      	ldr	r1, [r7, #4]
 800949e:	480a      	ldr	r0, [pc, #40]	; (80094c8 <tcp_input_delayed_close+0x7c>)
 80094a0:	f7ff fa50 	bl	8008944 <tcp_pcb_remove>
    tcp_free(pcb);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f7fe f83d 	bl	8007524 <tcp_free>
    return 1;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e000      	b.n	80094b0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	080121c4 	.word	0x080121c4
 80094bc:	08012394 	.word	0x08012394
 80094c0:	08012210 	.word	0x08012210
 80094c4:	2400322d 	.word	0x2400322d
 80094c8:	240031f4 	.word	0x240031f4

080094cc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80094cc:	b590      	push	{r4, r7, lr}
 80094ce:	b08b      	sub	sp, #44	; 0x2c
 80094d0:	af04      	add	r7, sp, #16
 80094d2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80094d4:	4b6f      	ldr	r3, [pc, #444]	; (8009694 <tcp_listen_input+0x1c8>)
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	f003 0304 	and.w	r3, r3, #4
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f040 80d2 	bne.w	8009686 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d106      	bne.n	80094f6 <tcp_listen_input+0x2a>
 80094e8:	4b6b      	ldr	r3, [pc, #428]	; (8009698 <tcp_listen_input+0x1cc>)
 80094ea:	f240 2281 	movw	r2, #641	; 0x281
 80094ee:	496b      	ldr	r1, [pc, #428]	; (800969c <tcp_listen_input+0x1d0>)
 80094f0:	486b      	ldr	r0, [pc, #428]	; (80096a0 <tcp_listen_input+0x1d4>)
 80094f2:	f006 fb05 	bl	800fb00 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80094f6:	4b67      	ldr	r3, [pc, #412]	; (8009694 <tcp_listen_input+0x1c8>)
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	f003 0310 	and.w	r3, r3, #16
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d019      	beq.n	8009536 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009502:	4b68      	ldr	r3, [pc, #416]	; (80096a4 <tcp_listen_input+0x1d8>)
 8009504:	6819      	ldr	r1, [r3, #0]
 8009506:	4b68      	ldr	r3, [pc, #416]	; (80096a8 <tcp_listen_input+0x1dc>)
 8009508:	881b      	ldrh	r3, [r3, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	4b67      	ldr	r3, [pc, #412]	; (80096ac <tcp_listen_input+0x1e0>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009512:	4b67      	ldr	r3, [pc, #412]	; (80096b0 <tcp_listen_input+0x1e4>)
 8009514:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009516:	885b      	ldrh	r3, [r3, #2]
 8009518:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800951a:	4a65      	ldr	r2, [pc, #404]	; (80096b0 <tcp_listen_input+0x1e4>)
 800951c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800951e:	8812      	ldrh	r2, [r2, #0]
 8009520:	b292      	uxth	r2, r2
 8009522:	9202      	str	r2, [sp, #8]
 8009524:	9301      	str	r3, [sp, #4]
 8009526:	4b63      	ldr	r3, [pc, #396]	; (80096b4 <tcp_listen_input+0x1e8>)
 8009528:	9300      	str	r3, [sp, #0]
 800952a:	4b63      	ldr	r3, [pc, #396]	; (80096b8 <tcp_listen_input+0x1ec>)
 800952c:	4602      	mov	r2, r0
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f002 ff80 	bl	800c434 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009534:	e0a9      	b.n	800968a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8009536:	4b57      	ldr	r3, [pc, #348]	; (8009694 <tcp_listen_input+0x1c8>)
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	f003 0302 	and.w	r3, r3, #2
 800953e:	2b00      	cmp	r3, #0
 8009540:	f000 80a3 	beq.w	800968a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	7d5b      	ldrb	r3, [r3, #21]
 8009548:	4618      	mov	r0, r3
 800954a:	f7ff f927 	bl	800879c <tcp_alloc>
 800954e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d111      	bne.n	800957a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	699b      	ldr	r3, [r3, #24]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00a      	beq.n	8009574 <tcp_listen_input+0xa8>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	6910      	ldr	r0, [r2, #16]
 8009566:	f04f 32ff 	mov.w	r2, #4294967295
 800956a:	2100      	movs	r1, #0
 800956c:	4798      	blx	r3
 800956e:	4603      	mov	r3, r0
 8009570:	73bb      	strb	r3, [r7, #14]
      return;
 8009572:	e08b      	b.n	800968c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009574:	23f0      	movs	r3, #240	; 0xf0
 8009576:	73bb      	strb	r3, [r7, #14]
      return;
 8009578:	e088      	b.n	800968c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800957a:	4b50      	ldr	r3, [pc, #320]	; (80096bc <tcp_listen_input+0x1f0>)
 800957c:	695a      	ldr	r2, [r3, #20]
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009582:	4b4e      	ldr	r3, [pc, #312]	; (80096bc <tcp_listen_input+0x1f0>)
 8009584:	691a      	ldr	r2, [r3, #16]
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	8ada      	ldrh	r2, [r3, #22]
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009592:	4b47      	ldr	r3, [pc, #284]	; (80096b0 <tcp_listen_input+0x1e4>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	881b      	ldrh	r3, [r3, #0]
 8009598:	b29a      	uxth	r2, r3
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	2203      	movs	r2, #3
 80095a2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80095a4:	4b41      	ldr	r3, [pc, #260]	; (80096ac <tcp_listen_input+0x1e0>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	1c5a      	adds	r2, r3, #1
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80095b6:	6978      	ldr	r0, [r7, #20]
 80095b8:	f7ff fa58 	bl	8008a6c <tcp_next_iss>
 80095bc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	693a      	ldr	r2, [r7, #16]
 80095d4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80095d6:	4b35      	ldr	r3, [pc, #212]	; (80096ac <tcp_listen_input+0x1e0>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	1e5a      	subs	r2, r3, #1
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	691a      	ldr	r2, [r3, #16]
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	7a5b      	ldrb	r3, [r3, #9]
 80095f2:	f003 030c 	and.w	r3, r3, #12
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	7a1a      	ldrb	r2, [r3, #8]
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009604:	4b2e      	ldr	r3, [pc, #184]	; (80096c0 <tcp_listen_input+0x1f4>)
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	60da      	str	r2, [r3, #12]
 800960c:	4a2c      	ldr	r2, [pc, #176]	; (80096c0 <tcp_listen_input+0x1f4>)
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	6013      	str	r3, [r2, #0]
 8009612:	f003 f8d1 	bl	800c7b8 <tcp_timer_needed>
 8009616:	4b2b      	ldr	r3, [pc, #172]	; (80096c4 <tcp_listen_input+0x1f8>)
 8009618:	2201      	movs	r2, #1
 800961a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800961c:	6978      	ldr	r0, [r7, #20]
 800961e:	f001 fd8f 	bl	800b140 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009622:	4b23      	ldr	r3, [pc, #140]	; (80096b0 <tcp_listen_input+0x1e4>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	89db      	ldrh	r3, [r3, #14]
 8009628:	b29a      	uxth	r2, r3
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	3304      	adds	r3, #4
 8009644:	4618      	mov	r0, r3
 8009646:	f005 f80b 	bl	800e660 <ip4_route>
 800964a:	4601      	mov	r1, r0
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	3304      	adds	r3, #4
 8009650:	461a      	mov	r2, r3
 8009652:	4620      	mov	r0, r4
 8009654:	f7ff fa30 	bl	8008ab8 <tcp_eff_send_mss_netif>
 8009658:	4603      	mov	r3, r0
 800965a:	461a      	mov	r2, r3
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009660:	2112      	movs	r1, #18
 8009662:	6978      	ldr	r0, [r7, #20]
 8009664:	f002 f844 	bl	800b6f0 <tcp_enqueue_flags>
 8009668:	4603      	mov	r3, r0
 800966a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800966c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d004      	beq.n	800967e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009674:	2100      	movs	r1, #0
 8009676:	6978      	ldr	r0, [r7, #20]
 8009678:	f7fe f97e 	bl	8007978 <tcp_abandon>
      return;
 800967c:	e006      	b.n	800968c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800967e:	6978      	ldr	r0, [r7, #20]
 8009680:	f002 f924 	bl	800b8cc <tcp_output>
  return;
 8009684:	e001      	b.n	800968a <tcp_listen_input+0x1be>
    return;
 8009686:	bf00      	nop
 8009688:	e000      	b.n	800968c <tcp_listen_input+0x1c0>
  return;
 800968a:	bf00      	nop
}
 800968c:	371c      	adds	r7, #28
 800968e:	46bd      	mov	sp, r7
 8009690:	bd90      	pop	{r4, r7, pc}
 8009692:	bf00      	nop
 8009694:	2400322c 	.word	0x2400322c
 8009698:	080121c4 	.word	0x080121c4
 800969c:	080123bc 	.word	0x080123bc
 80096a0:	08012210 	.word	0x08012210
 80096a4:	24003224 	.word	0x24003224
 80096a8:	2400322a 	.word	0x2400322a
 80096ac:	24003220 	.word	0x24003220
 80096b0:	24003210 	.word	0x24003210
 80096b4:	240002dc 	.word	0x240002dc
 80096b8:	240002e0 	.word	0x240002e0
 80096bc:	240002cc 	.word	0x240002cc
 80096c0:	240031f4 	.word	0x240031f4
 80096c4:	240031fc 	.word	0x240031fc

080096c8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af04      	add	r7, sp, #16
 80096ce:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80096d0:	4b2f      	ldr	r3, [pc, #188]	; (8009790 <tcp_timewait_input+0xc8>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	f003 0304 	and.w	r3, r3, #4
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d153      	bne.n	8009784 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d106      	bne.n	80096f0 <tcp_timewait_input+0x28>
 80096e2:	4b2c      	ldr	r3, [pc, #176]	; (8009794 <tcp_timewait_input+0xcc>)
 80096e4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80096e8:	492b      	ldr	r1, [pc, #172]	; (8009798 <tcp_timewait_input+0xd0>)
 80096ea:	482c      	ldr	r0, [pc, #176]	; (800979c <tcp_timewait_input+0xd4>)
 80096ec:	f006 fa08 	bl	800fb00 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80096f0:	4b27      	ldr	r3, [pc, #156]	; (8009790 <tcp_timewait_input+0xc8>)
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	f003 0302 	and.w	r3, r3, #2
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d02a      	beq.n	8009752 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80096fc:	4b28      	ldr	r3, [pc, #160]	; (80097a0 <tcp_timewait_input+0xd8>)
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009704:	1ad3      	subs	r3, r2, r3
 8009706:	2b00      	cmp	r3, #0
 8009708:	db2d      	blt.n	8009766 <tcp_timewait_input+0x9e>
 800970a:	4b25      	ldr	r3, [pc, #148]	; (80097a0 <tcp_timewait_input+0xd8>)
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009712:	6879      	ldr	r1, [r7, #4]
 8009714:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009716:	440b      	add	r3, r1
 8009718:	1ad3      	subs	r3, r2, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	dc23      	bgt.n	8009766 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800971e:	4b21      	ldr	r3, [pc, #132]	; (80097a4 <tcp_timewait_input+0xdc>)
 8009720:	6819      	ldr	r1, [r3, #0]
 8009722:	4b21      	ldr	r3, [pc, #132]	; (80097a8 <tcp_timewait_input+0xe0>)
 8009724:	881b      	ldrh	r3, [r3, #0]
 8009726:	461a      	mov	r2, r3
 8009728:	4b1d      	ldr	r3, [pc, #116]	; (80097a0 <tcp_timewait_input+0xd8>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800972e:	4b1f      	ldr	r3, [pc, #124]	; (80097ac <tcp_timewait_input+0xe4>)
 8009730:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009732:	885b      	ldrh	r3, [r3, #2]
 8009734:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009736:	4a1d      	ldr	r2, [pc, #116]	; (80097ac <tcp_timewait_input+0xe4>)
 8009738:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800973a:	8812      	ldrh	r2, [r2, #0]
 800973c:	b292      	uxth	r2, r2
 800973e:	9202      	str	r2, [sp, #8]
 8009740:	9301      	str	r3, [sp, #4]
 8009742:	4b1b      	ldr	r3, [pc, #108]	; (80097b0 <tcp_timewait_input+0xe8>)
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	4b1b      	ldr	r3, [pc, #108]	; (80097b4 <tcp_timewait_input+0xec>)
 8009748:	4602      	mov	r2, r0
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f002 fe72 	bl	800c434 <tcp_rst>
      return;
 8009750:	e01b      	b.n	800978a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8009752:	4b0f      	ldr	r3, [pc, #60]	; (8009790 <tcp_timewait_input+0xc8>)
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	f003 0301 	and.w	r3, r3, #1
 800975a:	2b00      	cmp	r3, #0
 800975c:	d003      	beq.n	8009766 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800975e:	4b16      	ldr	r3, [pc, #88]	; (80097b8 <tcp_timewait_input+0xf0>)
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009766:	4b10      	ldr	r3, [pc, #64]	; (80097a8 <tcp_timewait_input+0xe0>)
 8009768:	881b      	ldrh	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00c      	beq.n	8009788 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	8b5b      	ldrh	r3, [r3, #26]
 8009772:	f043 0302 	orr.w	r3, r3, #2
 8009776:	b29a      	uxth	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f002 f8a5 	bl	800b8cc <tcp_output>
  }
  return;
 8009782:	e001      	b.n	8009788 <tcp_timewait_input+0xc0>
    return;
 8009784:	bf00      	nop
 8009786:	e000      	b.n	800978a <tcp_timewait_input+0xc2>
  return;
 8009788:	bf00      	nop
}
 800978a:	3708      	adds	r7, #8
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	2400322c 	.word	0x2400322c
 8009794:	080121c4 	.word	0x080121c4
 8009798:	080123dc 	.word	0x080123dc
 800979c:	08012210 	.word	0x08012210
 80097a0:	24003220 	.word	0x24003220
 80097a4:	24003224 	.word	0x24003224
 80097a8:	2400322a 	.word	0x2400322a
 80097ac:	24003210 	.word	0x24003210
 80097b0:	240002dc 	.word	0x240002dc
 80097b4:	240002e0 	.word	0x240002e0
 80097b8:	240031e8 	.word	0x240031e8

080097bc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80097bc:	b590      	push	{r4, r7, lr}
 80097be:	b08d      	sub	sp, #52	; 0x34
 80097c0:	af04      	add	r7, sp, #16
 80097c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80097c4:	2300      	movs	r3, #0
 80097c6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d106      	bne.n	80097e0 <tcp_process+0x24>
 80097d2:	4b9d      	ldr	r3, [pc, #628]	; (8009a48 <tcp_process+0x28c>)
 80097d4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80097d8:	499c      	ldr	r1, [pc, #624]	; (8009a4c <tcp_process+0x290>)
 80097da:	489d      	ldr	r0, [pc, #628]	; (8009a50 <tcp_process+0x294>)
 80097dc:	f006 f990 	bl	800fb00 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80097e0:	4b9c      	ldr	r3, [pc, #624]	; (8009a54 <tcp_process+0x298>)
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	f003 0304 	and.w	r3, r3, #4
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d04e      	beq.n	800988a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	7d1b      	ldrb	r3, [r3, #20]
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d108      	bne.n	8009806 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097f8:	4b97      	ldr	r3, [pc, #604]	; (8009a58 <tcp_process+0x29c>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d123      	bne.n	8009848 <tcp_process+0x8c>
        acceptable = 1;
 8009800:	2301      	movs	r3, #1
 8009802:	76fb      	strb	r3, [r7, #27]
 8009804:	e020      	b.n	8009848 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800980a:	4b94      	ldr	r3, [pc, #592]	; (8009a5c <tcp_process+0x2a0>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	429a      	cmp	r2, r3
 8009810:	d102      	bne.n	8009818 <tcp_process+0x5c>
        acceptable = 1;
 8009812:	2301      	movs	r3, #1
 8009814:	76fb      	strb	r3, [r7, #27]
 8009816:	e017      	b.n	8009848 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009818:	4b90      	ldr	r3, [pc, #576]	; (8009a5c <tcp_process+0x2a0>)
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	2b00      	cmp	r3, #0
 8009824:	db10      	blt.n	8009848 <tcp_process+0x8c>
 8009826:	4b8d      	ldr	r3, [pc, #564]	; (8009a5c <tcp_process+0x2a0>)
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982e:	6879      	ldr	r1, [r7, #4]
 8009830:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009832:	440b      	add	r3, r1
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	2b00      	cmp	r3, #0
 8009838:	dc06      	bgt.n	8009848 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	8b5b      	ldrh	r3, [r3, #26]
 800983e:	f043 0302 	orr.w	r3, r3, #2
 8009842:	b29a      	uxth	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009848:	7efb      	ldrb	r3, [r7, #27]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d01b      	beq.n	8009886 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	7d1b      	ldrb	r3, [r3, #20]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d106      	bne.n	8009864 <tcp_process+0xa8>
 8009856:	4b7c      	ldr	r3, [pc, #496]	; (8009a48 <tcp_process+0x28c>)
 8009858:	f44f 724e 	mov.w	r2, #824	; 0x338
 800985c:	4980      	ldr	r1, [pc, #512]	; (8009a60 <tcp_process+0x2a4>)
 800985e:	487c      	ldr	r0, [pc, #496]	; (8009a50 <tcp_process+0x294>)
 8009860:	f006 f94e 	bl	800fb00 <iprintf>
      recv_flags |= TF_RESET;
 8009864:	4b7f      	ldr	r3, [pc, #508]	; (8009a64 <tcp_process+0x2a8>)
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	f043 0308 	orr.w	r3, r3, #8
 800986c:	b2da      	uxtb	r2, r3
 800986e:	4b7d      	ldr	r3, [pc, #500]	; (8009a64 <tcp_process+0x2a8>)
 8009870:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	8b5b      	ldrh	r3, [r3, #26]
 8009876:	f023 0301 	bic.w	r3, r3, #1
 800987a:	b29a      	uxth	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009880:	f06f 030d 	mvn.w	r3, #13
 8009884:	e37a      	b.n	8009f7c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	e378      	b.n	8009f7c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800988a:	4b72      	ldr	r3, [pc, #456]	; (8009a54 <tcp_process+0x298>)
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b00      	cmp	r3, #0
 8009894:	d010      	beq.n	80098b8 <tcp_process+0xfc>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	7d1b      	ldrb	r3, [r3, #20]
 800989a:	2b02      	cmp	r3, #2
 800989c:	d00c      	beq.n	80098b8 <tcp_process+0xfc>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	7d1b      	ldrb	r3, [r3, #20]
 80098a2:	2b03      	cmp	r3, #3
 80098a4:	d008      	beq.n	80098b8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	8b5b      	ldrh	r3, [r3, #26]
 80098aa:	f043 0302 	orr.w	r3, r3, #2
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80098b4:	2300      	movs	r3, #0
 80098b6:	e361      	b.n	8009f7c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	8b5b      	ldrh	r3, [r3, #26]
 80098bc:	f003 0310 	and.w	r3, r3, #16
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d103      	bne.n	80098cc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80098c4:	4b68      	ldr	r3, [pc, #416]	; (8009a68 <tcp_process+0x2ac>)
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f001 fc2f 	bl	800b140 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	7d1b      	ldrb	r3, [r3, #20]
 80098e6:	3b02      	subs	r3, #2
 80098e8:	2b07      	cmp	r3, #7
 80098ea:	f200 8337 	bhi.w	8009f5c <tcp_process+0x7a0>
 80098ee:	a201      	add	r2, pc, #4	; (adr r2, 80098f4 <tcp_process+0x138>)
 80098f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f4:	08009915 	.word	0x08009915
 80098f8:	08009b45 	.word	0x08009b45
 80098fc:	08009cbd 	.word	0x08009cbd
 8009900:	08009ce7 	.word	0x08009ce7
 8009904:	08009e0b 	.word	0x08009e0b
 8009908:	08009cbd 	.word	0x08009cbd
 800990c:	08009e97 	.word	0x08009e97
 8009910:	08009f27 	.word	0x08009f27
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009914:	4b4f      	ldr	r3, [pc, #316]	; (8009a54 <tcp_process+0x298>)
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	f003 0310 	and.w	r3, r3, #16
 800991c:	2b00      	cmp	r3, #0
 800991e:	f000 80e4 	beq.w	8009aea <tcp_process+0x32e>
 8009922:	4b4c      	ldr	r3, [pc, #304]	; (8009a54 <tcp_process+0x298>)
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	f003 0302 	and.w	r3, r3, #2
 800992a:	2b00      	cmp	r3, #0
 800992c:	f000 80dd 	beq.w	8009aea <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009934:	1c5a      	adds	r2, r3, #1
 8009936:	4b48      	ldr	r3, [pc, #288]	; (8009a58 <tcp_process+0x29c>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	429a      	cmp	r2, r3
 800993c:	f040 80d5 	bne.w	8009aea <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009940:	4b46      	ldr	r3, [pc, #280]	; (8009a5c <tcp_process+0x2a0>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	1c5a      	adds	r2, r3, #1
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009952:	4b41      	ldr	r3, [pc, #260]	; (8009a58 <tcp_process+0x29c>)
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800995a:	4b44      	ldr	r3, [pc, #272]	; (8009a6c <tcp_process+0x2b0>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	89db      	ldrh	r3, [r3, #14]
 8009960:	b29a      	uxth	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009974:	4b39      	ldr	r3, [pc, #228]	; (8009a5c <tcp_process+0x2a0>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	1e5a      	subs	r2, r3, #1
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2204      	movs	r2, #4
 8009982:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	3304      	adds	r3, #4
 800998c:	4618      	mov	r0, r3
 800998e:	f004 fe67 	bl	800e660 <ip4_route>
 8009992:	4601      	mov	r1, r0
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	3304      	adds	r3, #4
 8009998:	461a      	mov	r2, r3
 800999a:	4620      	mov	r0, r4
 800999c:	f7ff f88c 	bl	8008ab8 <tcp_eff_send_mss_netif>
 80099a0:	4603      	mov	r3, r0
 80099a2:	461a      	mov	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099ac:	009a      	lsls	r2, r3, #2
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099b2:	005b      	lsls	r3, r3, #1
 80099b4:	f241 111c 	movw	r1, #4380	; 0x111c
 80099b8:	428b      	cmp	r3, r1
 80099ba:	bf38      	it	cc
 80099bc:	460b      	movcc	r3, r1
 80099be:	429a      	cmp	r2, r3
 80099c0:	d204      	bcs.n	80099cc <tcp_process+0x210>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	e00d      	b.n	80099e8 <tcp_process+0x22c>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099d0:	005b      	lsls	r3, r3, #1
 80099d2:	f241 121c 	movw	r2, #4380	; 0x111c
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d904      	bls.n	80099e4 <tcp_process+0x228>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099de:	005b      	lsls	r3, r3, #1
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	e001      	b.n	80099e8 <tcp_process+0x22c>
 80099e4:	f241 131c 	movw	r3, #4380	; 0x111c
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d106      	bne.n	8009a06 <tcp_process+0x24a>
 80099f8:	4b13      	ldr	r3, [pc, #76]	; (8009a48 <tcp_process+0x28c>)
 80099fa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80099fe:	491c      	ldr	r1, [pc, #112]	; (8009a70 <tcp_process+0x2b4>)
 8009a00:	4813      	ldr	r0, [pc, #76]	; (8009a50 <tcp_process+0x294>)
 8009a02:	f006 f87d 	bl	800fb00 <iprintf>
        --pcb->snd_queuelen;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a1a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d12a      	bne.n	8009a78 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a26:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d106      	bne.n	8009a3c <tcp_process+0x280>
 8009a2e:	4b06      	ldr	r3, [pc, #24]	; (8009a48 <tcp_process+0x28c>)
 8009a30:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009a34:	490f      	ldr	r1, [pc, #60]	; (8009a74 <tcp_process+0x2b8>)
 8009a36:	4806      	ldr	r0, [pc, #24]	; (8009a50 <tcp_process+0x294>)
 8009a38:	f006 f862 	bl	800fb00 <iprintf>
          pcb->unsent = rseg->next;
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	66da      	str	r2, [r3, #108]	; 0x6c
 8009a44:	e01c      	b.n	8009a80 <tcp_process+0x2c4>
 8009a46:	bf00      	nop
 8009a48:	080121c4 	.word	0x080121c4
 8009a4c:	080123fc 	.word	0x080123fc
 8009a50:	08012210 	.word	0x08012210
 8009a54:	2400322c 	.word	0x2400322c
 8009a58:	24003224 	.word	0x24003224
 8009a5c:	24003220 	.word	0x24003220
 8009a60:	08012418 	.word	0x08012418
 8009a64:	2400322d 	.word	0x2400322d
 8009a68:	240031e8 	.word	0x240031e8
 8009a6c:	24003210 	.word	0x24003210
 8009a70:	08012438 	.word	0x08012438
 8009a74:	08012450 	.word	0x08012450
        } else {
          pcb->unacked = rseg->next;
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009a80:	69f8      	ldr	r0, [r7, #28]
 8009a82:	f7fe fd22 	bl	80084ca <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d104      	bne.n	8009a98 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a94:	861a      	strh	r2, [r3, #48]	; 0x30
 8009a96:	e006      	b.n	8009aa6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00a      	beq.n	8009ac6 <tcp_process+0x30a>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	6910      	ldr	r0, [r2, #16]
 8009aba:	2200      	movs	r2, #0
 8009abc:	6879      	ldr	r1, [r7, #4]
 8009abe:	4798      	blx	r3
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	76bb      	strb	r3, [r7, #26]
 8009ac4:	e001      	b.n	8009aca <tcp_process+0x30e>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009aca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009ace:	f113 0f0d 	cmn.w	r3, #13
 8009ad2:	d102      	bne.n	8009ada <tcp_process+0x31e>
          return ERR_ABRT;
 8009ad4:	f06f 030c 	mvn.w	r3, #12
 8009ad8:	e250      	b.n	8009f7c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	8b5b      	ldrh	r3, [r3, #26]
 8009ade:	f043 0302 	orr.w	r3, r3, #2
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009ae8:	e23a      	b.n	8009f60 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009aea:	4b98      	ldr	r3, [pc, #608]	; (8009d4c <tcp_process+0x590>)
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	f003 0310 	and.w	r3, r3, #16
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 8234 	beq.w	8009f60 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009af8:	4b95      	ldr	r3, [pc, #596]	; (8009d50 <tcp_process+0x594>)
 8009afa:	6819      	ldr	r1, [r3, #0]
 8009afc:	4b95      	ldr	r3, [pc, #596]	; (8009d54 <tcp_process+0x598>)
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	461a      	mov	r2, r3
 8009b02:	4b95      	ldr	r3, [pc, #596]	; (8009d58 <tcp_process+0x59c>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b08:	4b94      	ldr	r3, [pc, #592]	; (8009d5c <tcp_process+0x5a0>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b0c:	885b      	ldrh	r3, [r3, #2]
 8009b0e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b10:	4a92      	ldr	r2, [pc, #584]	; (8009d5c <tcp_process+0x5a0>)
 8009b12:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b14:	8812      	ldrh	r2, [r2, #0]
 8009b16:	b292      	uxth	r2, r2
 8009b18:	9202      	str	r2, [sp, #8]
 8009b1a:	9301      	str	r3, [sp, #4]
 8009b1c:	4b90      	ldr	r3, [pc, #576]	; (8009d60 <tcp_process+0x5a4>)
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	4b90      	ldr	r3, [pc, #576]	; (8009d64 <tcp_process+0x5a8>)
 8009b22:	4602      	mov	r2, r0
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f002 fc85 	bl	800c434 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b30:	2b05      	cmp	r3, #5
 8009b32:	f200 8215 	bhi.w	8009f60 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f002 fa4f 	bl	800bfe0 <tcp_rexmit_rto>
      break;
 8009b42:	e20d      	b.n	8009f60 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009b44:	4b81      	ldr	r3, [pc, #516]	; (8009d4c <tcp_process+0x590>)
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	f003 0310 	and.w	r3, r3, #16
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f000 80a1 	beq.w	8009c94 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009b52:	4b7f      	ldr	r3, [pc, #508]	; (8009d50 <tcp_process+0x594>)
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	db7e      	blt.n	8009c60 <tcp_process+0x4a4>
 8009b62:	4b7b      	ldr	r3, [pc, #492]	; (8009d50 <tcp_process+0x594>)
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	dc77      	bgt.n	8009c60 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2204      	movs	r2, #4
 8009b74:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d102      	bne.n	8009b84 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009b7e:	23fa      	movs	r3, #250	; 0xfa
 8009b80:	76bb      	strb	r3, [r7, #26]
 8009b82:	e01d      	b.n	8009bc0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d106      	bne.n	8009b9c <tcp_process+0x3e0>
 8009b8e:	4b76      	ldr	r3, [pc, #472]	; (8009d68 <tcp_process+0x5ac>)
 8009b90:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009b94:	4975      	ldr	r1, [pc, #468]	; (8009d6c <tcp_process+0x5b0>)
 8009b96:	4876      	ldr	r0, [pc, #472]	; (8009d70 <tcp_process+0x5b4>)
 8009b98:	f005 ffb2 	bl	800fb00 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ba0:	699b      	ldr	r3, [r3, #24]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00a      	beq.n	8009bbc <tcp_process+0x400>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009baa:	699b      	ldr	r3, [r3, #24]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	6910      	ldr	r0, [r2, #16]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	6879      	ldr	r1, [r7, #4]
 8009bb4:	4798      	blx	r3
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	76bb      	strb	r3, [r7, #26]
 8009bba:	e001      	b.n	8009bc0 <tcp_process+0x404>
 8009bbc:	23f0      	movs	r3, #240	; 0xf0
 8009bbe:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009bc0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00a      	beq.n	8009bde <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009bc8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009bcc:	f113 0f0d 	cmn.w	r3, #13
 8009bd0:	d002      	beq.n	8009bd8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7fd ff8e 	bl	8007af4 <tcp_abort>
            }
            return ERR_ABRT;
 8009bd8:	f06f 030c 	mvn.w	r3, #12
 8009bdc:	e1ce      	b.n	8009f7c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fae0 	bl	800a1a4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009be4:	4b63      	ldr	r3, [pc, #396]	; (8009d74 <tcp_process+0x5b8>)
 8009be6:	881b      	ldrh	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d005      	beq.n	8009bf8 <tcp_process+0x43c>
            recv_acked--;
 8009bec:	4b61      	ldr	r3, [pc, #388]	; (8009d74 <tcp_process+0x5b8>)
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	4b5f      	ldr	r3, [pc, #380]	; (8009d74 <tcp_process+0x5b8>)
 8009bf6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009bfc:	009a      	lsls	r2, r3, #2
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c02:	005b      	lsls	r3, r3, #1
 8009c04:	f241 111c 	movw	r1, #4380	; 0x111c
 8009c08:	428b      	cmp	r3, r1
 8009c0a:	bf38      	it	cc
 8009c0c:	460b      	movcc	r3, r1
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d204      	bcs.n	8009c1c <tcp_process+0x460>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	e00d      	b.n	8009c38 <tcp_process+0x47c>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c20:	005b      	lsls	r3, r3, #1
 8009c22:	f241 121c 	movw	r2, #4380	; 0x111c
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d904      	bls.n	8009c34 <tcp_process+0x478>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c2e:	005b      	lsls	r3, r3, #1
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	e001      	b.n	8009c38 <tcp_process+0x47c>
 8009c34:	f241 131c 	movw	r3, #4380	; 0x111c
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009c3e:	4b4e      	ldr	r3, [pc, #312]	; (8009d78 <tcp_process+0x5bc>)
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	f003 0320 	and.w	r3, r3, #32
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d037      	beq.n	8009cba <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	8b5b      	ldrh	r3, [r3, #26]
 8009c4e:	f043 0302 	orr.w	r3, r3, #2
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2207      	movs	r2, #7
 8009c5c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009c5e:	e02c      	b.n	8009cba <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c60:	4b3b      	ldr	r3, [pc, #236]	; (8009d50 <tcp_process+0x594>)
 8009c62:	6819      	ldr	r1, [r3, #0]
 8009c64:	4b3b      	ldr	r3, [pc, #236]	; (8009d54 <tcp_process+0x598>)
 8009c66:	881b      	ldrh	r3, [r3, #0]
 8009c68:	461a      	mov	r2, r3
 8009c6a:	4b3b      	ldr	r3, [pc, #236]	; (8009d58 <tcp_process+0x59c>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009c70:	4b3a      	ldr	r3, [pc, #232]	; (8009d5c <tcp_process+0x5a0>)
 8009c72:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c74:	885b      	ldrh	r3, [r3, #2]
 8009c76:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009c78:	4a38      	ldr	r2, [pc, #224]	; (8009d5c <tcp_process+0x5a0>)
 8009c7a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c7c:	8812      	ldrh	r2, [r2, #0]
 8009c7e:	b292      	uxth	r2, r2
 8009c80:	9202      	str	r2, [sp, #8]
 8009c82:	9301      	str	r3, [sp, #4]
 8009c84:	4b36      	ldr	r3, [pc, #216]	; (8009d60 <tcp_process+0x5a4>)
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	4b36      	ldr	r3, [pc, #216]	; (8009d64 <tcp_process+0x5a8>)
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f002 fbd1 	bl	800c434 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009c92:	e167      	b.n	8009f64 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009c94:	4b2d      	ldr	r3, [pc, #180]	; (8009d4c <tcp_process+0x590>)
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	f003 0302 	and.w	r3, r3, #2
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f000 8161 	beq.w	8009f64 <tcp_process+0x7a8>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca6:	1e5a      	subs	r2, r3, #1
 8009ca8:	4b2b      	ldr	r3, [pc, #172]	; (8009d58 <tcp_process+0x59c>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	f040 8159 	bne.w	8009f64 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f002 f9b6 	bl	800c024 <tcp_rexmit>
      break;
 8009cb8:	e154      	b.n	8009f64 <tcp_process+0x7a8>
 8009cba:	e153      	b.n	8009f64 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fa71 	bl	800a1a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009cc2:	4b2d      	ldr	r3, [pc, #180]	; (8009d78 <tcp_process+0x5bc>)
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	f003 0320 	and.w	r3, r3, #32
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f000 814c 	beq.w	8009f68 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	8b5b      	ldrh	r3, [r3, #26]
 8009cd4:	f043 0302 	orr.w	r3, r3, #2
 8009cd8:	b29a      	uxth	r2, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2207      	movs	r2, #7
 8009ce2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009ce4:	e140      	b.n	8009f68 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fa5c 	bl	800a1a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009cec:	4b22      	ldr	r3, [pc, #136]	; (8009d78 <tcp_process+0x5bc>)
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	f003 0320 	and.w	r3, r3, #32
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d071      	beq.n	8009ddc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009cf8:	4b14      	ldr	r3, [pc, #80]	; (8009d4c <tcp_process+0x590>)
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	f003 0310 	and.w	r3, r3, #16
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d060      	beq.n	8009dc6 <tcp_process+0x60a>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d08:	4b11      	ldr	r3, [pc, #68]	; (8009d50 <tcp_process+0x594>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d15a      	bne.n	8009dc6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d156      	bne.n	8009dc6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	8b5b      	ldrh	r3, [r3, #26]
 8009d1c:	f043 0302 	orr.w	r3, r3, #2
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7fe fdbc 	bl	80088a4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009d2c:	4b13      	ldr	r3, [pc, #76]	; (8009d7c <tcp_process+0x5c0>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d105      	bne.n	8009d42 <tcp_process+0x586>
 8009d36:	4b11      	ldr	r3, [pc, #68]	; (8009d7c <tcp_process+0x5c0>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	4a0f      	ldr	r2, [pc, #60]	; (8009d7c <tcp_process+0x5c0>)
 8009d3e:	6013      	str	r3, [r2, #0]
 8009d40:	e02e      	b.n	8009da0 <tcp_process+0x5e4>
 8009d42:	4b0e      	ldr	r3, [pc, #56]	; (8009d7c <tcp_process+0x5c0>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	617b      	str	r3, [r7, #20]
 8009d48:	e027      	b.n	8009d9a <tcp_process+0x5de>
 8009d4a:	bf00      	nop
 8009d4c:	2400322c 	.word	0x2400322c
 8009d50:	24003224 	.word	0x24003224
 8009d54:	2400322a 	.word	0x2400322a
 8009d58:	24003220 	.word	0x24003220
 8009d5c:	24003210 	.word	0x24003210
 8009d60:	240002dc 	.word	0x240002dc
 8009d64:	240002e0 	.word	0x240002e0
 8009d68:	080121c4 	.word	0x080121c4
 8009d6c:	08012464 	.word	0x08012464
 8009d70:	08012210 	.word	0x08012210
 8009d74:	24003228 	.word	0x24003228
 8009d78:	2400322d 	.word	0x2400322d
 8009d7c:	240031f4 	.word	0x240031f4
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d104      	bne.n	8009d94 <tcp_process+0x5d8>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	68da      	ldr	r2, [r3, #12]
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	60da      	str	r2, [r3, #12]
 8009d92:	e005      	b.n	8009da0 <tcp_process+0x5e4>
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	617b      	str	r3, [r7, #20]
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d1ef      	bne.n	8009d80 <tcp_process+0x5c4>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	60da      	str	r2, [r3, #12]
 8009da6:	4b77      	ldr	r3, [pc, #476]	; (8009f84 <tcp_process+0x7c8>)
 8009da8:	2201      	movs	r2, #1
 8009daa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	220a      	movs	r2, #10
 8009db0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009db2:	4b75      	ldr	r3, [pc, #468]	; (8009f88 <tcp_process+0x7cc>)
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	60da      	str	r2, [r3, #12]
 8009dba:	4a73      	ldr	r2, [pc, #460]	; (8009f88 <tcp_process+0x7cc>)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6013      	str	r3, [r2, #0]
 8009dc0:	f002 fcfa 	bl	800c7b8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009dc4:	e0d2      	b.n	8009f6c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	8b5b      	ldrh	r3, [r3, #26]
 8009dca:	f043 0302 	orr.w	r3, r3, #2
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2208      	movs	r2, #8
 8009dd8:	751a      	strb	r2, [r3, #20]
      break;
 8009dda:	e0c7      	b.n	8009f6c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009ddc:	4b6b      	ldr	r3, [pc, #428]	; (8009f8c <tcp_process+0x7d0>)
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	f003 0310 	and.w	r3, r3, #16
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f000 80c1 	beq.w	8009f6c <tcp_process+0x7b0>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009dee:	4b68      	ldr	r3, [pc, #416]	; (8009f90 <tcp_process+0x7d4>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	f040 80ba 	bne.w	8009f6c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f040 80b5 	bne.w	8009f6c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2206      	movs	r2, #6
 8009e06:	751a      	strb	r2, [r3, #20]
      break;
 8009e08:	e0b0      	b.n	8009f6c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f9ca 	bl	800a1a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009e10:	4b60      	ldr	r3, [pc, #384]	; (8009f94 <tcp_process+0x7d8>)
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	f003 0320 	and.w	r3, r3, #32
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f000 80a9 	beq.w	8009f70 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	8b5b      	ldrh	r3, [r3, #26]
 8009e22:	f043 0302 	orr.w	r3, r3, #2
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f7fe fd39 	bl	80088a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009e32:	4b59      	ldr	r3, [pc, #356]	; (8009f98 <tcp_process+0x7dc>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d105      	bne.n	8009e48 <tcp_process+0x68c>
 8009e3c:	4b56      	ldr	r3, [pc, #344]	; (8009f98 <tcp_process+0x7dc>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	4a55      	ldr	r2, [pc, #340]	; (8009f98 <tcp_process+0x7dc>)
 8009e44:	6013      	str	r3, [r2, #0]
 8009e46:	e013      	b.n	8009e70 <tcp_process+0x6b4>
 8009e48:	4b53      	ldr	r3, [pc, #332]	; (8009f98 <tcp_process+0x7dc>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	613b      	str	r3, [r7, #16]
 8009e4e:	e00c      	b.n	8009e6a <tcp_process+0x6ae>
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d104      	bne.n	8009e64 <tcp_process+0x6a8>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68da      	ldr	r2, [r3, #12]
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	60da      	str	r2, [r3, #12]
 8009e62:	e005      	b.n	8009e70 <tcp_process+0x6b4>
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	613b      	str	r3, [r7, #16]
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1ef      	bne.n	8009e50 <tcp_process+0x694>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	60da      	str	r2, [r3, #12]
 8009e76:	4b43      	ldr	r3, [pc, #268]	; (8009f84 <tcp_process+0x7c8>)
 8009e78:	2201      	movs	r2, #1
 8009e7a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	220a      	movs	r2, #10
 8009e80:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009e82:	4b41      	ldr	r3, [pc, #260]	; (8009f88 <tcp_process+0x7cc>)
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	60da      	str	r2, [r3, #12]
 8009e8a:	4a3f      	ldr	r2, [pc, #252]	; (8009f88 <tcp_process+0x7cc>)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6013      	str	r3, [r2, #0]
 8009e90:	f002 fc92 	bl	800c7b8 <tcp_timer_needed>
      }
      break;
 8009e94:	e06c      	b.n	8009f70 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 f984 	bl	800a1a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009e9c:	4b3b      	ldr	r3, [pc, #236]	; (8009f8c <tcp_process+0x7d0>)
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	f003 0310 	and.w	r3, r3, #16
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d065      	beq.n	8009f74 <tcp_process+0x7b8>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009eac:	4b38      	ldr	r3, [pc, #224]	; (8009f90 <tcp_process+0x7d4>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d15f      	bne.n	8009f74 <tcp_process+0x7b8>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d15b      	bne.n	8009f74 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f7fe fcf1 	bl	80088a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009ec2:	4b35      	ldr	r3, [pc, #212]	; (8009f98 <tcp_process+0x7dc>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d105      	bne.n	8009ed8 <tcp_process+0x71c>
 8009ecc:	4b32      	ldr	r3, [pc, #200]	; (8009f98 <tcp_process+0x7dc>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	4a31      	ldr	r2, [pc, #196]	; (8009f98 <tcp_process+0x7dc>)
 8009ed4:	6013      	str	r3, [r2, #0]
 8009ed6:	e013      	b.n	8009f00 <tcp_process+0x744>
 8009ed8:	4b2f      	ldr	r3, [pc, #188]	; (8009f98 <tcp_process+0x7dc>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	60fb      	str	r3, [r7, #12]
 8009ede:	e00c      	b.n	8009efa <tcp_process+0x73e>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d104      	bne.n	8009ef4 <tcp_process+0x738>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	68da      	ldr	r2, [r3, #12]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	60da      	str	r2, [r3, #12]
 8009ef2:	e005      	b.n	8009f00 <tcp_process+0x744>
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	60fb      	str	r3, [r7, #12]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1ef      	bne.n	8009ee0 <tcp_process+0x724>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	60da      	str	r2, [r3, #12]
 8009f06:	4b1f      	ldr	r3, [pc, #124]	; (8009f84 <tcp_process+0x7c8>)
 8009f08:	2201      	movs	r2, #1
 8009f0a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	220a      	movs	r2, #10
 8009f10:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009f12:	4b1d      	ldr	r3, [pc, #116]	; (8009f88 <tcp_process+0x7cc>)
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	60da      	str	r2, [r3, #12]
 8009f1a:	4a1b      	ldr	r2, [pc, #108]	; (8009f88 <tcp_process+0x7cc>)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	f002 fc4a 	bl	800c7b8 <tcp_timer_needed>
      }
      break;
 8009f24:	e026      	b.n	8009f74 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f93c 	bl	800a1a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009f2c:	4b17      	ldr	r3, [pc, #92]	; (8009f8c <tcp_process+0x7d0>)
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	f003 0310 	and.w	r3, r3, #16
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d01f      	beq.n	8009f78 <tcp_process+0x7bc>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f3c:	4b14      	ldr	r3, [pc, #80]	; (8009f90 <tcp_process+0x7d4>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d119      	bne.n	8009f78 <tcp_process+0x7bc>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d115      	bne.n	8009f78 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009f4c:	4b11      	ldr	r3, [pc, #68]	; (8009f94 <tcp_process+0x7d8>)
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	f043 0310 	orr.w	r3, r3, #16
 8009f54:	b2da      	uxtb	r2, r3
 8009f56:	4b0f      	ldr	r3, [pc, #60]	; (8009f94 <tcp_process+0x7d8>)
 8009f58:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009f5a:	e00d      	b.n	8009f78 <tcp_process+0x7bc>
    default:
      break;
 8009f5c:	bf00      	nop
 8009f5e:	e00c      	b.n	8009f7a <tcp_process+0x7be>
      break;
 8009f60:	bf00      	nop
 8009f62:	e00a      	b.n	8009f7a <tcp_process+0x7be>
      break;
 8009f64:	bf00      	nop
 8009f66:	e008      	b.n	8009f7a <tcp_process+0x7be>
      break;
 8009f68:	bf00      	nop
 8009f6a:	e006      	b.n	8009f7a <tcp_process+0x7be>
      break;
 8009f6c:	bf00      	nop
 8009f6e:	e004      	b.n	8009f7a <tcp_process+0x7be>
      break;
 8009f70:	bf00      	nop
 8009f72:	e002      	b.n	8009f7a <tcp_process+0x7be>
      break;
 8009f74:	bf00      	nop
 8009f76:	e000      	b.n	8009f7a <tcp_process+0x7be>
      break;
 8009f78:	bf00      	nop
  }
  return ERR_OK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3724      	adds	r7, #36	; 0x24
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd90      	pop	{r4, r7, pc}
 8009f84:	240031fc 	.word	0x240031fc
 8009f88:	240031f8 	.word	0x240031f8
 8009f8c:	2400322c 	.word	0x2400322c
 8009f90:	24003224 	.word	0x24003224
 8009f94:	2400322d 	.word	0x2400322d
 8009f98:	240031f4 	.word	0x240031f4

08009f9c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009f9c:	b590      	push	{r4, r7, lr}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d106      	bne.n	8009fba <tcp_oos_insert_segment+0x1e>
 8009fac:	4b3b      	ldr	r3, [pc, #236]	; (800a09c <tcp_oos_insert_segment+0x100>)
 8009fae:	f240 421f 	movw	r2, #1055	; 0x41f
 8009fb2:	493b      	ldr	r1, [pc, #236]	; (800a0a0 <tcp_oos_insert_segment+0x104>)
 8009fb4:	483b      	ldr	r0, [pc, #236]	; (800a0a4 <tcp_oos_insert_segment+0x108>)
 8009fb6:	f005 fda3 	bl	800fb00 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	899b      	ldrh	r3, [r3, #12]
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7fb fb56 	bl	8005674 <lwip_htons>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	f003 0301 	and.w	r3, r3, #1
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d028      	beq.n	800a026 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009fd4:	6838      	ldr	r0, [r7, #0]
 8009fd6:	f7fe fa63 	bl	80084a0 <tcp_segs_free>
    next = NULL;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	603b      	str	r3, [r7, #0]
 8009fde:	e056      	b.n	800a08e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	899b      	ldrh	r3, [r3, #12]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7fb fb43 	bl	8005674 <lwip_htons>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	f003 0301 	and.w	r3, r3, #1
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00d      	beq.n	800a016 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	899b      	ldrh	r3, [r3, #12]
 800a000:	b29c      	uxth	r4, r3
 800a002:	2001      	movs	r0, #1
 800a004:	f7fb fb36 	bl	8005674 <lwip_htons>
 800a008:	4603      	mov	r3, r0
 800a00a:	461a      	mov	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	4322      	orrs	r2, r4
 800a012:	b292      	uxth	r2, r2
 800a014:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f7fe fa52 	bl	80084ca <tcp_seg_free>
    while (next &&
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00e      	beq.n	800a04a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	891b      	ldrh	r3, [r3, #8]
 800a030:	461a      	mov	r2, r3
 800a032:	4b1d      	ldr	r3, [pc, #116]	; (800a0a8 <tcp_oos_insert_segment+0x10c>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	441a      	add	r2, r3
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	6839      	ldr	r1, [r7, #0]
 800a040:	8909      	ldrh	r1, [r1, #8]
 800a042:	440b      	add	r3, r1
 800a044:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a046:	2b00      	cmp	r3, #0
 800a048:	daca      	bge.n	8009fe0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d01e      	beq.n	800a08e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	891b      	ldrh	r3, [r3, #8]
 800a054:	461a      	mov	r2, r3
 800a056:	4b14      	ldr	r3, [pc, #80]	; (800a0a8 <tcp_oos_insert_segment+0x10c>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	441a      	add	r2, r3
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a064:	2b00      	cmp	r3, #0
 800a066:	dd12      	ble.n	800a08e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	b29a      	uxth	r2, r3
 800a070:	4b0d      	ldr	r3, [pc, #52]	; (800a0a8 <tcp_oos_insert_segment+0x10c>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	b29b      	uxth	r3, r3
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	b29a      	uxth	r2, r3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	685a      	ldr	r2, [r3, #4]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	891b      	ldrh	r3, [r3, #8]
 800a086:	4619      	mov	r1, r3
 800a088:	4610      	mov	r0, r2
 800a08a:	f7fc fd83 	bl	8006b94 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	601a      	str	r2, [r3, #0]
}
 800a094:	bf00      	nop
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd90      	pop	{r4, r7, pc}
 800a09c:	080121c4 	.word	0x080121c4
 800a0a0:	08012484 	.word	0x08012484
 800a0a4:	08012210 	.word	0x08012210
 800a0a8:	24003220 	.word	0x24003220

0800a0ac <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a0ac:	b5b0      	push	{r4, r5, r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
 800a0b8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a0ba:	e03e      	b.n	800a13a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fc ff70 	bl	8006fb0 <pbuf_clen>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a0da:	8a7a      	ldrh	r2, [r7, #18]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d906      	bls.n	800a0ee <tcp_free_acked_segments+0x42>
 800a0e0:	4b2a      	ldr	r3, [pc, #168]	; (800a18c <tcp_free_acked_segments+0xe0>)
 800a0e2:	f240 4257 	movw	r2, #1111	; 0x457
 800a0e6:	492a      	ldr	r1, [pc, #168]	; (800a190 <tcp_free_acked_segments+0xe4>)
 800a0e8:	482a      	ldr	r0, [pc, #168]	; (800a194 <tcp_free_acked_segments+0xe8>)
 800a0ea:	f005 fd09 	bl	800fb00 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800a0f4:	8a7b      	ldrh	r3, [r7, #18]
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	891a      	ldrh	r2, [r3, #8]
 800a104:	4b24      	ldr	r3, [pc, #144]	; (800a198 <tcp_free_acked_segments+0xec>)
 800a106:	881b      	ldrh	r3, [r3, #0]
 800a108:	4413      	add	r3, r2
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	4b22      	ldr	r3, [pc, #136]	; (800a198 <tcp_free_acked_segments+0xec>)
 800a10e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a110:	6978      	ldr	r0, [r7, #20]
 800a112:	f7fe f9da 	bl	80084ca <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00c      	beq.n	800a13a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d109      	bne.n	800a13a <tcp_free_acked_segments+0x8e>
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d106      	bne.n	800a13a <tcp_free_acked_segments+0x8e>
 800a12c:	4b17      	ldr	r3, [pc, #92]	; (800a18c <tcp_free_acked_segments+0xe0>)
 800a12e:	f240 4261 	movw	r2, #1121	; 0x461
 800a132:	491a      	ldr	r1, [pc, #104]	; (800a19c <tcp_free_acked_segments+0xf0>)
 800a134:	4817      	ldr	r0, [pc, #92]	; (800a194 <tcp_free_acked_segments+0xe8>)
 800a136:	f005 fce3 	bl	800fb00 <iprintf>
  while (seg_list != NULL &&
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d020      	beq.n	800a182 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	4618      	mov	r0, r3
 800a148:	f7fb faa9 	bl	800569e <lwip_htonl>
 800a14c:	4604      	mov	r4, r0
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	891b      	ldrh	r3, [r3, #8]
 800a152:	461d      	mov	r5, r3
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	899b      	ldrh	r3, [r3, #12]
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7fb fa89 	bl	8005674 <lwip_htons>
 800a162:	4603      	mov	r3, r0
 800a164:	b2db      	uxtb	r3, r3
 800a166:	f003 0303 	and.w	r3, r3, #3
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d001      	beq.n	800a172 <tcp_free_acked_segments+0xc6>
 800a16e:	2301      	movs	r3, #1
 800a170:	e000      	b.n	800a174 <tcp_free_acked_segments+0xc8>
 800a172:	2300      	movs	r3, #0
 800a174:	442b      	add	r3, r5
 800a176:	18e2      	adds	r2, r4, r3
 800a178:	4b09      	ldr	r3, [pc, #36]	; (800a1a0 <tcp_free_acked_segments+0xf4>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a17e:	2b00      	cmp	r3, #0
 800a180:	dd9c      	ble.n	800a0bc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a182:	68bb      	ldr	r3, [r7, #8]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3718      	adds	r7, #24
 800a188:	46bd      	mov	sp, r7
 800a18a:	bdb0      	pop	{r4, r5, r7, pc}
 800a18c:	080121c4 	.word	0x080121c4
 800a190:	080124ac 	.word	0x080124ac
 800a194:	08012210 	.word	0x08012210
 800a198:	24003228 	.word	0x24003228
 800a19c:	080124d4 	.word	0x080124d4
 800a1a0:	24003224 	.word	0x24003224

0800a1a4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a1a4:	b5b0      	push	{r4, r5, r7, lr}
 800a1a6:	b094      	sub	sp, #80	; 0x50
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d106      	bne.n	800a1c4 <tcp_receive+0x20>
 800a1b6:	4b91      	ldr	r3, [pc, #580]	; (800a3fc <tcp_receive+0x258>)
 800a1b8:	f240 427b 	movw	r2, #1147	; 0x47b
 800a1bc:	4990      	ldr	r1, [pc, #576]	; (800a400 <tcp_receive+0x25c>)
 800a1be:	4891      	ldr	r0, [pc, #580]	; (800a404 <tcp_receive+0x260>)
 800a1c0:	f005 fc9e 	bl	800fb00 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	7d1b      	ldrb	r3, [r3, #20]
 800a1c8:	2b03      	cmp	r3, #3
 800a1ca:	d806      	bhi.n	800a1da <tcp_receive+0x36>
 800a1cc:	4b8b      	ldr	r3, [pc, #556]	; (800a3fc <tcp_receive+0x258>)
 800a1ce:	f240 427c 	movw	r2, #1148	; 0x47c
 800a1d2:	498d      	ldr	r1, [pc, #564]	; (800a408 <tcp_receive+0x264>)
 800a1d4:	488b      	ldr	r0, [pc, #556]	; (800a404 <tcp_receive+0x260>)
 800a1d6:	f005 fc93 	bl	800fb00 <iprintf>

  if (flags & TCP_ACK) {
 800a1da:	4b8c      	ldr	r3, [pc, #560]	; (800a40c <tcp_receive+0x268>)
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	f003 0310 	and.w	r3, r3, #16
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f000 8264 	beq.w	800a6b0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1f4:	4413      	add	r3, r2
 800a1f6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1fc:	4b84      	ldr	r3, [pc, #528]	; (800a410 <tcp_receive+0x26c>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	2b00      	cmp	r3, #0
 800a204:	db1b      	blt.n	800a23e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a20a:	4b81      	ldr	r3, [pc, #516]	; (800a410 <tcp_receive+0x26c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a20e:	429a      	cmp	r2, r3
 800a210:	d106      	bne.n	800a220 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a216:	4b7f      	ldr	r3, [pc, #508]	; (800a414 <tcp_receive+0x270>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	1ad3      	subs	r3, r2, r3
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	db0e      	blt.n	800a23e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a224:	4b7b      	ldr	r3, [pc, #492]	; (800a414 <tcp_receive+0x270>)
 800a226:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a228:	429a      	cmp	r2, r3
 800a22a:	d125      	bne.n	800a278 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a22c:	4b7a      	ldr	r3, [pc, #488]	; (800a418 <tcp_receive+0x274>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	89db      	ldrh	r3, [r3, #14]
 800a232:	b29a      	uxth	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d91c      	bls.n	800a278 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a23e:	4b76      	ldr	r3, [pc, #472]	; (800a418 <tcp_receive+0x274>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	89db      	ldrh	r3, [r3, #14]
 800a244:	b29a      	uxth	r2, r3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a258:	429a      	cmp	r2, r3
 800a25a:	d205      	bcs.n	800a268 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a268:	4b69      	ldr	r3, [pc, #420]	; (800a410 <tcp_receive+0x26c>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a270:	4b68      	ldr	r3, [pc, #416]	; (800a414 <tcp_receive+0x270>)
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a278:	4b66      	ldr	r3, [pc, #408]	; (800a414 <tcp_receive+0x270>)
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	2b00      	cmp	r3, #0
 800a284:	dc58      	bgt.n	800a338 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a286:	4b65      	ldr	r3, [pc, #404]	; (800a41c <tcp_receive+0x278>)
 800a288:	881b      	ldrh	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d14b      	bne.n	800a326 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a298:	4413      	add	r3, r2
 800a29a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d142      	bne.n	800a326 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	db3d      	blt.n	800a326 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2ae:	4b59      	ldr	r3, [pc, #356]	; (800a414 <tcp_receive+0x270>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d137      	bne.n	800a326 <tcp_receive+0x182>
              found_dupack = 1;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a2c0:	2bff      	cmp	r3, #255	; 0xff
 800a2c2:	d007      	beq.n	800a2d4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	b2da      	uxtb	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a2da:	2b03      	cmp	r3, #3
 800a2dc:	d91b      	bls.n	800a316 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2e8:	4413      	add	r3, r2
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d30a      	bcc.n	800a30c <tcp_receive+0x168>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a300:	4413      	add	r3, r2
 800a302:	b29a      	uxth	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a30a:	e004      	b.n	800a316 <tcp_receive+0x172>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a312:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	d902      	bls.n	800a326 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f001 feeb 	bl	800c0fc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f040 8161 	bne.w	800a5f0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a336:	e15b      	b.n	800a5f0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a338:	4b36      	ldr	r3, [pc, #216]	; (800a414 <tcp_receive+0x270>)
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	3b01      	subs	r3, #1
 800a344:	2b00      	cmp	r3, #0
 800a346:	f2c0 814e 	blt.w	800a5e6 <tcp_receive+0x442>
 800a34a:	4b32      	ldr	r3, [pc, #200]	; (800a414 <tcp_receive+0x270>)
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a352:	1ad3      	subs	r3, r2, r3
 800a354:	2b00      	cmp	r3, #0
 800a356:	f300 8146 	bgt.w	800a5e6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	8b5b      	ldrh	r3, [r3, #26]
 800a35e:	f003 0304 	and.w	r3, r3, #4
 800a362:	2b00      	cmp	r3, #0
 800a364:	d010      	beq.n	800a388 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	8b5b      	ldrh	r3, [r3, #26]
 800a36a:	f023 0304 	bic.w	r3, r3, #4
 800a36e:	b29a      	uxth	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a396:	10db      	asrs	r3, r3, #3
 800a398:	b21b      	sxth	r3, r3
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	4413      	add	r3, r2
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	b21a      	sxth	r2, r3
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a3b0:	4b18      	ldr	r3, [pc, #96]	; (800a414 <tcp_receive+0x270>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a3c8:	4b12      	ldr	r3, [pc, #72]	; (800a414 <tcp_receive+0x270>)
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	7d1b      	ldrb	r3, [r3, #20]
 800a3d4:	2b03      	cmp	r3, #3
 800a3d6:	f240 8097 	bls.w	800a508 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d245      	bcs.n	800a476 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	8b5b      	ldrh	r3, [r3, #26]
 800a3ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d014      	beq.n	800a420 <tcp_receive+0x27c>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e013      	b.n	800a422 <tcp_receive+0x27e>
 800a3fa:	bf00      	nop
 800a3fc:	080121c4 	.word	0x080121c4
 800a400:	080124f4 	.word	0x080124f4
 800a404:	08012210 	.word	0x08012210
 800a408:	08012510 	.word	0x08012510
 800a40c:	2400322c 	.word	0x2400322c
 800a410:	24003220 	.word	0x24003220
 800a414:	24003224 	.word	0x24003224
 800a418:	24003210 	.word	0x24003210
 800a41c:	2400322a 	.word	0x2400322a
 800a420:	2302      	movs	r3, #2
 800a422:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a426:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a42a:	b29a      	uxth	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a430:	fb12 f303 	smulbb	r3, r2, r3
 800a434:	b29b      	uxth	r3, r3
 800a436:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a438:	4293      	cmp	r3, r2
 800a43a:	bf28      	it	cs
 800a43c:	4613      	movcs	r3, r2
 800a43e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a446:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a448:	4413      	add	r3, r2
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a452:	429a      	cmp	r2, r3
 800a454:	d309      	bcc.n	800a46a <tcp_receive+0x2c6>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a45c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a45e:	4413      	add	r3, r2
 800a460:	b29a      	uxth	r2, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a468:	e04e      	b.n	800a508 <tcp_receive+0x364>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a470:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a474:	e048      	b.n	800a508 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a47c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a47e:	4413      	add	r3, r2
 800a480:	b29a      	uxth	r2, r3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a488:	429a      	cmp	r2, r3
 800a48a:	d309      	bcc.n	800a4a0 <tcp_receive+0x2fc>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a492:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a494:	4413      	add	r3, r2
 800a496:	b29a      	uxth	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a49e:	e004      	b.n	800a4aa <tcp_receive+0x306>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d326      	bcc.n	800a508 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a4c6:	1ad3      	subs	r3, r2, r3
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a4da:	4413      	add	r3, r2
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d30a      	bcc.n	800a4fe <tcp_receive+0x35a>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a4f2:	4413      	add	r3, r2
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a4fc:	e004      	b.n	800a508 <tcp_receive+0x364>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a504:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a510:	4a98      	ldr	r2, [pc, #608]	; (800a774 <tcp_receive+0x5d0>)
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f7ff fdca 	bl	800a0ac <tcp_free_acked_segments>
 800a518:	4602      	mov	r2, r0
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a526:	4a94      	ldr	r2, [pc, #592]	; (800a778 <tcp_receive+0x5d4>)
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f7ff fdbf 	bl	800a0ac <tcp_free_acked_segments>
 800a52e:	4602      	mov	r2, r0
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d104      	bne.n	800a546 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a542:	861a      	strh	r2, [r3, #48]	; 0x30
 800a544:	e002      	b.n	800a54c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a556:	2b00      	cmp	r3, #0
 800a558:	d103      	bne.n	800a562 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a568:	4b84      	ldr	r3, [pc, #528]	; (800a77c <tcp_receive+0x5d8>)
 800a56a:	881b      	ldrh	r3, [r3, #0]
 800a56c:	4413      	add	r3, r2
 800a56e:	b29a      	uxth	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	8b5b      	ldrh	r3, [r3, #26]
 800a57a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d035      	beq.n	800a5ee <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a586:	2b00      	cmp	r3, #0
 800a588:	d118      	bne.n	800a5bc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00c      	beq.n	800a5ac <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7fb f87d 	bl	800569e <lwip_htonl>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	dc20      	bgt.n	800a5ee <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	8b5b      	ldrh	r3, [r3, #26]
 800a5b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a5ba:	e018      	b.n	800a5ee <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fb f868 	bl	800569e <lwip_htonl>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	1ae3      	subs	r3, r4, r3
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	dc0b      	bgt.n	800a5ee <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	8b5b      	ldrh	r3, [r3, #26]
 800a5da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a5e4:	e003      	b.n	800a5ee <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f001 ff76 	bl	800c4d8 <tcp_send_empty_ack>
 800a5ec:	e000      	b.n	800a5f0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a5ee:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d05b      	beq.n	800a6b0 <tcp_receive+0x50c>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5fc:	4b60      	ldr	r3, [pc, #384]	; (800a780 <tcp_receive+0x5dc>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	1ad3      	subs	r3, r2, r3
 800a602:	2b00      	cmp	r3, #0
 800a604:	da54      	bge.n	800a6b0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a606:	4b5f      	ldr	r3, [pc, #380]	; (800a784 <tcp_receive+0x5e0>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a610:	b29b      	uxth	r3, r3
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	b29b      	uxth	r3, r3
 800a616:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a61a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a624:	10db      	asrs	r3, r3, #3
 800a626:	b21b      	sxth	r3, r3
 800a628:	b29b      	uxth	r3, r3
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a638:	b29a      	uxth	r2, r3
 800a63a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a63e:	4413      	add	r3, r2
 800a640:	b29b      	uxth	r3, r3
 800a642:	b21a      	sxth	r2, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a648:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	da05      	bge.n	800a65c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800a650:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a654:	425b      	negs	r3, r3
 800a656:	b29b      	uxth	r3, r3
 800a658:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a65c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a666:	109b      	asrs	r3, r3, #2
 800a668:	b21b      	sxth	r3, r3
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	b29b      	uxth	r3, r3
 800a670:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a680:	4413      	add	r3, r2
 800a682:	b29b      	uxth	r3, r3
 800a684:	b21a      	sxth	r2, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a690:	10db      	asrs	r3, r3, #3
 800a692:	b21b      	sxth	r3, r3
 800a694:	b29a      	uxth	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	4413      	add	r3, r2
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	b21a      	sxth	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a6b0:	4b35      	ldr	r3, [pc, #212]	; (800a788 <tcp_receive+0x5e4>)
 800a6b2:	881b      	ldrh	r3, [r3, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f000 84e2 	beq.w	800b07e <tcp_receive+0xeda>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	7d1b      	ldrb	r3, [r3, #20]
 800a6be:	2b06      	cmp	r3, #6
 800a6c0:	f200 84dd 	bhi.w	800b07e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6c8:	4b30      	ldr	r3, [pc, #192]	; (800a78c <tcp_receive+0x5e8>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	f2c0 808f 	blt.w	800a7f4 <tcp_receive+0x650>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6da:	4b2b      	ldr	r3, [pc, #172]	; (800a788 <tcp_receive+0x5e4>)
 800a6dc:	881b      	ldrh	r3, [r3, #0]
 800a6de:	4619      	mov	r1, r3
 800a6e0:	4b2a      	ldr	r3, [pc, #168]	; (800a78c <tcp_receive+0x5e8>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	440b      	add	r3, r1
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f300 8082 	bgt.w	800a7f4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a6f0:	4b27      	ldr	r3, [pc, #156]	; (800a790 <tcp_receive+0x5ec>)
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6fa:	4b24      	ldr	r3, [pc, #144]	; (800a78c <tcp_receive+0x5e8>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a702:	4b23      	ldr	r3, [pc, #140]	; (800a790 <tcp_receive+0x5ec>)
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d106      	bne.n	800a718 <tcp_receive+0x574>
 800a70a:	4b22      	ldr	r3, [pc, #136]	; (800a794 <tcp_receive+0x5f0>)
 800a70c:	f240 5294 	movw	r2, #1428	; 0x594
 800a710:	4921      	ldr	r1, [pc, #132]	; (800a798 <tcp_receive+0x5f4>)
 800a712:	4822      	ldr	r0, [pc, #136]	; (800a79c <tcp_receive+0x5f8>)
 800a714:	f005 f9f4 	bl	800fb00 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a71e:	4293      	cmp	r3, r2
 800a720:	d906      	bls.n	800a730 <tcp_receive+0x58c>
 800a722:	4b1c      	ldr	r3, [pc, #112]	; (800a794 <tcp_receive+0x5f0>)
 800a724:	f240 5295 	movw	r2, #1429	; 0x595
 800a728:	491d      	ldr	r1, [pc, #116]	; (800a7a0 <tcp_receive+0x5fc>)
 800a72a:	481c      	ldr	r0, [pc, #112]	; (800a79c <tcp_receive+0x5f8>)
 800a72c:	f005 f9e8 	bl	800fb00 <iprintf>
      off = (u16_t)off32;
 800a730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a732:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a736:	4b16      	ldr	r3, [pc, #88]	; (800a790 <tcp_receive+0x5ec>)
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	891b      	ldrh	r3, [r3, #8]
 800a73c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a740:	429a      	cmp	r2, r3
 800a742:	d906      	bls.n	800a752 <tcp_receive+0x5ae>
 800a744:	4b13      	ldr	r3, [pc, #76]	; (800a794 <tcp_receive+0x5f0>)
 800a746:	f240 5297 	movw	r2, #1431	; 0x597
 800a74a:	4916      	ldr	r1, [pc, #88]	; (800a7a4 <tcp_receive+0x600>)
 800a74c:	4813      	ldr	r0, [pc, #76]	; (800a79c <tcp_receive+0x5f8>)
 800a74e:	f005 f9d7 	bl	800fb00 <iprintf>
      inseg.len -= off;
 800a752:	4b0f      	ldr	r3, [pc, #60]	; (800a790 <tcp_receive+0x5ec>)
 800a754:	891a      	ldrh	r2, [r3, #8]
 800a756:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	b29a      	uxth	r2, r3
 800a75e:	4b0c      	ldr	r3, [pc, #48]	; (800a790 <tcp_receive+0x5ec>)
 800a760:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a762:	4b0b      	ldr	r3, [pc, #44]	; (800a790 <tcp_receive+0x5ec>)
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	891a      	ldrh	r2, [r3, #8]
 800a768:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a76c:	1ad3      	subs	r3, r2, r3
 800a76e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a770:	e02a      	b.n	800a7c8 <tcp_receive+0x624>
 800a772:	bf00      	nop
 800a774:	0801252c 	.word	0x0801252c
 800a778:	08012534 	.word	0x08012534
 800a77c:	24003228 	.word	0x24003228
 800a780:	24003224 	.word	0x24003224
 800a784:	240031e8 	.word	0x240031e8
 800a788:	2400322a 	.word	0x2400322a
 800a78c:	24003220 	.word	0x24003220
 800a790:	24003200 	.word	0x24003200
 800a794:	080121c4 	.word	0x080121c4
 800a798:	0801253c 	.word	0x0801253c
 800a79c:	08012210 	.word	0x08012210
 800a7a0:	0801254c 	.word	0x0801254c
 800a7a4:	0801255c 	.word	0x0801255c
        off -= p->len;
 800a7a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7aa:	895b      	ldrh	r3, [r3, #10]
 800a7ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a7b0:	1ad3      	subs	r3, r2, r3
 800a7b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a7b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a7ba:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a7bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7be:	2200      	movs	r2, #0
 800a7c0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a7c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a7c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7ca:	895b      	ldrh	r3, [r3, #10]
 800a7cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d8e9      	bhi.n	800a7a8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a7d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a7d8:	4619      	mov	r1, r3
 800a7da:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a7dc:	f7fc fada 	bl	8006d94 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e4:	4a91      	ldr	r2, [pc, #580]	; (800aa2c <tcp_receive+0x888>)
 800a7e6:	6013      	str	r3, [r2, #0]
 800a7e8:	4b91      	ldr	r3, [pc, #580]	; (800aa30 <tcp_receive+0x88c>)
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	4a8f      	ldr	r2, [pc, #572]	; (800aa2c <tcp_receive+0x888>)
 800a7ee:	6812      	ldr	r2, [r2, #0]
 800a7f0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a7f2:	e00d      	b.n	800a810 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a7f4:	4b8d      	ldr	r3, [pc, #564]	; (800aa2c <tcp_receive+0x888>)
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	da06      	bge.n	800a810 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	8b5b      	ldrh	r3, [r3, #26]
 800a806:	f043 0302 	orr.w	r3, r3, #2
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a810:	4b86      	ldr	r3, [pc, #536]	; (800aa2c <tcp_receive+0x888>)
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	f2c0 842a 	blt.w	800b074 <tcp_receive+0xed0>
 800a820:	4b82      	ldr	r3, [pc, #520]	; (800aa2c <tcp_receive+0x888>)
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a828:	6879      	ldr	r1, [r7, #4]
 800a82a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a82c:	440b      	add	r3, r1
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	3301      	adds	r3, #1
 800a832:	2b00      	cmp	r3, #0
 800a834:	f300 841e 	bgt.w	800b074 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a83c:	4b7b      	ldr	r3, [pc, #492]	; (800aa2c <tcp_receive+0x888>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	429a      	cmp	r2, r3
 800a842:	f040 829a 	bne.w	800ad7a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a846:	4b7a      	ldr	r3, [pc, #488]	; (800aa30 <tcp_receive+0x88c>)
 800a848:	891c      	ldrh	r4, [r3, #8]
 800a84a:	4b79      	ldr	r3, [pc, #484]	; (800aa30 <tcp_receive+0x88c>)
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	899b      	ldrh	r3, [r3, #12]
 800a850:	b29b      	uxth	r3, r3
 800a852:	4618      	mov	r0, r3
 800a854:	f7fa ff0e 	bl	8005674 <lwip_htons>
 800a858:	4603      	mov	r3, r0
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	f003 0303 	and.w	r3, r3, #3
 800a860:	2b00      	cmp	r3, #0
 800a862:	d001      	beq.n	800a868 <tcp_receive+0x6c4>
 800a864:	2301      	movs	r3, #1
 800a866:	e000      	b.n	800a86a <tcp_receive+0x6c6>
 800a868:	2300      	movs	r3, #0
 800a86a:	4423      	add	r3, r4
 800a86c:	b29a      	uxth	r2, r3
 800a86e:	4b71      	ldr	r3, [pc, #452]	; (800aa34 <tcp_receive+0x890>)
 800a870:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a876:	4b6f      	ldr	r3, [pc, #444]	; (800aa34 <tcp_receive+0x890>)
 800a878:	881b      	ldrh	r3, [r3, #0]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d275      	bcs.n	800a96a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a87e:	4b6c      	ldr	r3, [pc, #432]	; (800aa30 <tcp_receive+0x88c>)
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	899b      	ldrh	r3, [r3, #12]
 800a884:	b29b      	uxth	r3, r3
 800a886:	4618      	mov	r0, r3
 800a888:	f7fa fef4 	bl	8005674 <lwip_htons>
 800a88c:	4603      	mov	r3, r0
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	f003 0301 	and.w	r3, r3, #1
 800a894:	2b00      	cmp	r3, #0
 800a896:	d01f      	beq.n	800a8d8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a898:	4b65      	ldr	r3, [pc, #404]	; (800aa30 <tcp_receive+0x88c>)
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	899b      	ldrh	r3, [r3, #12]
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	b21b      	sxth	r3, r3
 800a8a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a8a6:	b21c      	sxth	r4, r3
 800a8a8:	4b61      	ldr	r3, [pc, #388]	; (800aa30 <tcp_receive+0x88c>)
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	899b      	ldrh	r3, [r3, #12]
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fa fedf 	bl	8005674 <lwip_htons>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fa fed6 	bl	8005674 <lwip_htons>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	b21b      	sxth	r3, r3
 800a8cc:	4323      	orrs	r3, r4
 800a8ce:	b21a      	sxth	r2, r3
 800a8d0:	4b57      	ldr	r3, [pc, #348]	; (800aa30 <tcp_receive+0x88c>)
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	b292      	uxth	r2, r2
 800a8d6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a8dc:	4b54      	ldr	r3, [pc, #336]	; (800aa30 <tcp_receive+0x88c>)
 800a8de:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a8e0:	4b53      	ldr	r3, [pc, #332]	; (800aa30 <tcp_receive+0x88c>)
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	899b      	ldrh	r3, [r3, #12]
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fa fec3 	bl	8005674 <lwip_htons>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	f003 0302 	and.w	r3, r3, #2
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d005      	beq.n	800a906 <tcp_receive+0x762>
            inseg.len -= 1;
 800a8fa:	4b4d      	ldr	r3, [pc, #308]	; (800aa30 <tcp_receive+0x88c>)
 800a8fc:	891b      	ldrh	r3, [r3, #8]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	b29a      	uxth	r2, r3
 800a902:	4b4b      	ldr	r3, [pc, #300]	; (800aa30 <tcp_receive+0x88c>)
 800a904:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a906:	4b4a      	ldr	r3, [pc, #296]	; (800aa30 <tcp_receive+0x88c>)
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	4a49      	ldr	r2, [pc, #292]	; (800aa30 <tcp_receive+0x88c>)
 800a90c:	8912      	ldrh	r2, [r2, #8]
 800a90e:	4611      	mov	r1, r2
 800a910:	4618      	mov	r0, r3
 800a912:	f7fc f93f 	bl	8006b94 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a916:	4b46      	ldr	r3, [pc, #280]	; (800aa30 <tcp_receive+0x88c>)
 800a918:	891c      	ldrh	r4, [r3, #8]
 800a91a:	4b45      	ldr	r3, [pc, #276]	; (800aa30 <tcp_receive+0x88c>)
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	899b      	ldrh	r3, [r3, #12]
 800a920:	b29b      	uxth	r3, r3
 800a922:	4618      	mov	r0, r3
 800a924:	f7fa fea6 	bl	8005674 <lwip_htons>
 800a928:	4603      	mov	r3, r0
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	f003 0303 	and.w	r3, r3, #3
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <tcp_receive+0x794>
 800a934:	2301      	movs	r3, #1
 800a936:	e000      	b.n	800a93a <tcp_receive+0x796>
 800a938:	2300      	movs	r3, #0
 800a93a:	4423      	add	r3, r4
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	4b3d      	ldr	r3, [pc, #244]	; (800aa34 <tcp_receive+0x890>)
 800a940:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a942:	4b3c      	ldr	r3, [pc, #240]	; (800aa34 <tcp_receive+0x890>)
 800a944:	881b      	ldrh	r3, [r3, #0]
 800a946:	461a      	mov	r2, r3
 800a948:	4b38      	ldr	r3, [pc, #224]	; (800aa2c <tcp_receive+0x888>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	441a      	add	r2, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a952:	6879      	ldr	r1, [r7, #4]
 800a954:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a956:	440b      	add	r3, r1
 800a958:	429a      	cmp	r2, r3
 800a95a:	d006      	beq.n	800a96a <tcp_receive+0x7c6>
 800a95c:	4b36      	ldr	r3, [pc, #216]	; (800aa38 <tcp_receive+0x894>)
 800a95e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a962:	4936      	ldr	r1, [pc, #216]	; (800aa3c <tcp_receive+0x898>)
 800a964:	4836      	ldr	r0, [pc, #216]	; (800aa40 <tcp_receive+0x89c>)
 800a966:	f005 f8cb 	bl	800fb00 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f000 80e7 	beq.w	800ab42 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a974:	4b2e      	ldr	r3, [pc, #184]	; (800aa30 <tcp_receive+0x88c>)
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	899b      	ldrh	r3, [r3, #12]
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7fa fe79 	bl	8005674 <lwip_htons>
 800a982:	4603      	mov	r3, r0
 800a984:	b2db      	uxtb	r3, r3
 800a986:	f003 0301 	and.w	r3, r3, #1
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d010      	beq.n	800a9b0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a98e:	e00a      	b.n	800a9a6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a994:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f7fd fd92 	bl	80084ca <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1f0      	bne.n	800a990 <tcp_receive+0x7ec>
 800a9ae:	e0c8      	b.n	800ab42 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a9b6:	e052      	b.n	800aa5e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a9b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	899b      	ldrh	r3, [r3, #12]
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7fa fe57 	bl	8005674 <lwip_htons>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	f003 0301 	and.w	r3, r3, #1
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d03d      	beq.n	800aa4e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a9d2:	4b17      	ldr	r3, [pc, #92]	; (800aa30 <tcp_receive+0x88c>)
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	899b      	ldrh	r3, [r3, #12]
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fa fe4a 	bl	8005674 <lwip_htons>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d130      	bne.n	800aa4e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a9ec:	4b10      	ldr	r3, [pc, #64]	; (800aa30 <tcp_receive+0x88c>)
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	899b      	ldrh	r3, [r3, #12]
 800a9f2:	b29c      	uxth	r4, r3
 800a9f4:	2001      	movs	r0, #1
 800a9f6:	f7fa fe3d 	bl	8005674 <lwip_htons>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	4b0c      	ldr	r3, [pc, #48]	; (800aa30 <tcp_receive+0x88c>)
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	4322      	orrs	r2, r4
 800aa04:	b292      	uxth	r2, r2
 800aa06:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800aa08:	4b09      	ldr	r3, [pc, #36]	; (800aa30 <tcp_receive+0x88c>)
 800aa0a:	891c      	ldrh	r4, [r3, #8]
 800aa0c:	4b08      	ldr	r3, [pc, #32]	; (800aa30 <tcp_receive+0x88c>)
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	899b      	ldrh	r3, [r3, #12]
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7fa fe2d 	bl	8005674 <lwip_htons>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	f003 0303 	and.w	r3, r3, #3
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00e      	beq.n	800aa44 <tcp_receive+0x8a0>
 800aa26:	2301      	movs	r3, #1
 800aa28:	e00d      	b.n	800aa46 <tcp_receive+0x8a2>
 800aa2a:	bf00      	nop
 800aa2c:	24003220 	.word	0x24003220
 800aa30:	24003200 	.word	0x24003200
 800aa34:	2400322a 	.word	0x2400322a
 800aa38:	080121c4 	.word	0x080121c4
 800aa3c:	0801256c 	.word	0x0801256c
 800aa40:	08012210 	.word	0x08012210
 800aa44:	2300      	movs	r3, #0
 800aa46:	4423      	add	r3, r4
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	4b98      	ldr	r3, [pc, #608]	; (800acac <tcp_receive+0xb08>)
 800aa4c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800aa4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa50:	613b      	str	r3, [r7, #16]
              next = next->next;
 800aa52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800aa58:	6938      	ldr	r0, [r7, #16]
 800aa5a:	f7fd fd36 	bl	80084ca <tcp_seg_free>
            while (next &&
 800aa5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00e      	beq.n	800aa82 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800aa64:	4b91      	ldr	r3, [pc, #580]	; (800acac <tcp_receive+0xb08>)
 800aa66:	881b      	ldrh	r3, [r3, #0]
 800aa68:	461a      	mov	r2, r3
 800aa6a:	4b91      	ldr	r3, [pc, #580]	; (800acb0 <tcp_receive+0xb0c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	441a      	add	r2, r3
 800aa70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa78:	8909      	ldrh	r1, [r1, #8]
 800aa7a:	440b      	add	r3, r1
 800aa7c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	da9a      	bge.n	800a9b8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800aa82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d059      	beq.n	800ab3c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800aa88:	4b88      	ldr	r3, [pc, #544]	; (800acac <tcp_receive+0xb08>)
 800aa8a:	881b      	ldrh	r3, [r3, #0]
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	4b88      	ldr	r3, [pc, #544]	; (800acb0 <tcp_receive+0xb0c>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	441a      	add	r2, r3
 800aa94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	dd4d      	ble.n	800ab3c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800aaa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	b29a      	uxth	r2, r3
 800aaa8:	4b81      	ldr	r3, [pc, #516]	; (800acb0 <tcp_receive+0xb0c>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	4b80      	ldr	r3, [pc, #512]	; (800acb4 <tcp_receive+0xb10>)
 800aab4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aab6:	4b7f      	ldr	r3, [pc, #508]	; (800acb4 <tcp_receive+0xb10>)
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	899b      	ldrh	r3, [r3, #12]
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fa fdd8 	bl	8005674 <lwip_htons>
 800aac4:	4603      	mov	r3, r0
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	f003 0302 	and.w	r3, r3, #2
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d005      	beq.n	800aadc <tcp_receive+0x938>
                inseg.len -= 1;
 800aad0:	4b78      	ldr	r3, [pc, #480]	; (800acb4 <tcp_receive+0xb10>)
 800aad2:	891b      	ldrh	r3, [r3, #8]
 800aad4:	3b01      	subs	r3, #1
 800aad6:	b29a      	uxth	r2, r3
 800aad8:	4b76      	ldr	r3, [pc, #472]	; (800acb4 <tcp_receive+0xb10>)
 800aada:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800aadc:	4b75      	ldr	r3, [pc, #468]	; (800acb4 <tcp_receive+0xb10>)
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	4a74      	ldr	r2, [pc, #464]	; (800acb4 <tcp_receive+0xb10>)
 800aae2:	8912      	ldrh	r2, [r2, #8]
 800aae4:	4611      	mov	r1, r2
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7fc f854 	bl	8006b94 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800aaec:	4b71      	ldr	r3, [pc, #452]	; (800acb4 <tcp_receive+0xb10>)
 800aaee:	891c      	ldrh	r4, [r3, #8]
 800aaf0:	4b70      	ldr	r3, [pc, #448]	; (800acb4 <tcp_receive+0xb10>)
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	899b      	ldrh	r3, [r3, #12]
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fa fdbb 	bl	8005674 <lwip_htons>
 800aafe:	4603      	mov	r3, r0
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	f003 0303 	and.w	r3, r3, #3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d001      	beq.n	800ab0e <tcp_receive+0x96a>
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e000      	b.n	800ab10 <tcp_receive+0x96c>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	4423      	add	r3, r4
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	4b65      	ldr	r3, [pc, #404]	; (800acac <tcp_receive+0xb08>)
 800ab16:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ab18:	4b64      	ldr	r3, [pc, #400]	; (800acac <tcp_receive+0xb08>)
 800ab1a:	881b      	ldrh	r3, [r3, #0]
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	4b64      	ldr	r3, [pc, #400]	; (800acb0 <tcp_receive+0xb0c>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	441a      	add	r2, r3
 800ab24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d006      	beq.n	800ab3c <tcp_receive+0x998>
 800ab2e:	4b62      	ldr	r3, [pc, #392]	; (800acb8 <tcp_receive+0xb14>)
 800ab30:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ab34:	4961      	ldr	r1, [pc, #388]	; (800acbc <tcp_receive+0xb18>)
 800ab36:	4862      	ldr	r0, [pc, #392]	; (800acc0 <tcp_receive+0xb1c>)
 800ab38:	f004 ffe2 	bl	800fb00 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ab40:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ab42:	4b5a      	ldr	r3, [pc, #360]	; (800acac <tcp_receive+0xb08>)
 800ab44:	881b      	ldrh	r3, [r3, #0]
 800ab46:	461a      	mov	r2, r3
 800ab48:	4b59      	ldr	r3, [pc, #356]	; (800acb0 <tcp_receive+0xb0c>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	441a      	add	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ab56:	4b55      	ldr	r3, [pc, #340]	; (800acac <tcp_receive+0xb08>)
 800ab58:	881b      	ldrh	r3, [r3, #0]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d206      	bcs.n	800ab6c <tcp_receive+0x9c8>
 800ab5e:	4b56      	ldr	r3, [pc, #344]	; (800acb8 <tcp_receive+0xb14>)
 800ab60:	f240 6207 	movw	r2, #1543	; 0x607
 800ab64:	4957      	ldr	r1, [pc, #348]	; (800acc4 <tcp_receive+0xb20>)
 800ab66:	4856      	ldr	r0, [pc, #344]	; (800acc0 <tcp_receive+0xb1c>)
 800ab68:	f004 ffca 	bl	800fb00 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ab70:	4b4e      	ldr	r3, [pc, #312]	; (800acac <tcp_receive+0xb08>)
 800ab72:	881b      	ldrh	r3, [r3, #0]
 800ab74:	1ad3      	subs	r3, r2, r3
 800ab76:	b29a      	uxth	r2, r3
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f7fc ffc5 	bl	8007b0c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ab82:	4b4c      	ldr	r3, [pc, #304]	; (800acb4 <tcp_receive+0xb10>)
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	891b      	ldrh	r3, [r3, #8]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d006      	beq.n	800ab9a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800ab8c:	4b49      	ldr	r3, [pc, #292]	; (800acb4 <tcp_receive+0xb10>)
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	4a4d      	ldr	r2, [pc, #308]	; (800acc8 <tcp_receive+0xb24>)
 800ab92:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ab94:	4b47      	ldr	r3, [pc, #284]	; (800acb4 <tcp_receive+0xb10>)
 800ab96:	2200      	movs	r2, #0
 800ab98:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ab9a:	4b46      	ldr	r3, [pc, #280]	; (800acb4 <tcp_receive+0xb10>)
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	899b      	ldrh	r3, [r3, #12]
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fa fd66 	bl	8005674 <lwip_htons>
 800aba8:	4603      	mov	r3, r0
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	f003 0301 	and.w	r3, r3, #1
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f000 80b8 	beq.w	800ad26 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800abb6:	4b45      	ldr	r3, [pc, #276]	; (800accc <tcp_receive+0xb28>)
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	f043 0320 	orr.w	r3, r3, #32
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	4b42      	ldr	r3, [pc, #264]	; (800accc <tcp_receive+0xb28>)
 800abc2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800abc4:	e0af      	b.n	800ad26 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abca:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	4a36      	ldr	r2, [pc, #216]	; (800acb0 <tcp_receive+0xb0c>)
 800abd6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	891b      	ldrh	r3, [r3, #8]
 800abdc:	461c      	mov	r4, r3
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	899b      	ldrh	r3, [r3, #12]
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7fa fd44 	bl	8005674 <lwip_htons>
 800abec:	4603      	mov	r3, r0
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	f003 0303 	and.w	r3, r3, #3
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d001      	beq.n	800abfc <tcp_receive+0xa58>
 800abf8:	2301      	movs	r3, #1
 800abfa:	e000      	b.n	800abfe <tcp_receive+0xa5a>
 800abfc:	2300      	movs	r3, #0
 800abfe:	191a      	adds	r2, r3, r4
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac04:	441a      	add	r2, r3
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac0e:	461c      	mov	r4, r3
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	891b      	ldrh	r3, [r3, #8]
 800ac14:	461d      	mov	r5, r3
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	899b      	ldrh	r3, [r3, #12]
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7fa fd28 	bl	8005674 <lwip_htons>
 800ac24:	4603      	mov	r3, r0
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	f003 0303 	and.w	r3, r3, #3
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d001      	beq.n	800ac34 <tcp_receive+0xa90>
 800ac30:	2301      	movs	r3, #1
 800ac32:	e000      	b.n	800ac36 <tcp_receive+0xa92>
 800ac34:	2300      	movs	r3, #0
 800ac36:	442b      	add	r3, r5
 800ac38:	429c      	cmp	r4, r3
 800ac3a:	d206      	bcs.n	800ac4a <tcp_receive+0xaa6>
 800ac3c:	4b1e      	ldr	r3, [pc, #120]	; (800acb8 <tcp_receive+0xb14>)
 800ac3e:	f240 622b 	movw	r2, #1579	; 0x62b
 800ac42:	4923      	ldr	r1, [pc, #140]	; (800acd0 <tcp_receive+0xb2c>)
 800ac44:	481e      	ldr	r0, [pc, #120]	; (800acc0 <tcp_receive+0xb1c>)
 800ac46:	f004 ff5b 	bl	800fb00 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	891b      	ldrh	r3, [r3, #8]
 800ac4e:	461c      	mov	r4, r3
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	899b      	ldrh	r3, [r3, #12]
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7fa fd0b 	bl	8005674 <lwip_htons>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	f003 0303 	and.w	r3, r3, #3
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d001      	beq.n	800ac6e <tcp_receive+0xaca>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e000      	b.n	800ac70 <tcp_receive+0xacc>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	1919      	adds	r1, r3, r4
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ac76:	b28b      	uxth	r3, r1
 800ac78:	1ad3      	subs	r3, r2, r3
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f7fc ff43 	bl	8007b0c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	891b      	ldrh	r3, [r3, #8]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d028      	beq.n	800ace2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ac90:	4b0d      	ldr	r3, [pc, #52]	; (800acc8 <tcp_receive+0xb24>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d01d      	beq.n	800acd4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800ac98:	4b0b      	ldr	r3, [pc, #44]	; (800acc8 <tcp_receive+0xb24>)
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	4619      	mov	r1, r3
 800aca2:	4610      	mov	r0, r2
 800aca4:	f7fc f9be 	bl	8007024 <pbuf_cat>
 800aca8:	e018      	b.n	800acdc <tcp_receive+0xb38>
 800acaa:	bf00      	nop
 800acac:	2400322a 	.word	0x2400322a
 800acb0:	24003220 	.word	0x24003220
 800acb4:	24003200 	.word	0x24003200
 800acb8:	080121c4 	.word	0x080121c4
 800acbc:	080125a4 	.word	0x080125a4
 800acc0:	08012210 	.word	0x08012210
 800acc4:	080125e0 	.word	0x080125e0
 800acc8:	24003230 	.word	0x24003230
 800accc:	2400322d 	.word	0x2400322d
 800acd0:	08012600 	.word	0x08012600
            } else {
              recv_data = cseg->p;
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	4a70      	ldr	r2, [pc, #448]	; (800ae9c <tcp_receive+0xcf8>)
 800acda:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	2200      	movs	r2, #0
 800ace0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	899b      	ldrh	r3, [r3, #12]
 800ace8:	b29b      	uxth	r3, r3
 800acea:	4618      	mov	r0, r3
 800acec:	f7fa fcc2 	bl	8005674 <lwip_htons>
 800acf0:	4603      	mov	r3, r0
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	f003 0301 	and.w	r3, r3, #1
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00d      	beq.n	800ad18 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800acfc:	4b68      	ldr	r3, [pc, #416]	; (800aea0 <tcp_receive+0xcfc>)
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	f043 0320 	orr.w	r3, r3, #32
 800ad04:	b2da      	uxtb	r2, r3
 800ad06:	4b66      	ldr	r3, [pc, #408]	; (800aea0 <tcp_receive+0xcfc>)
 800ad08:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	7d1b      	ldrb	r3, [r3, #20]
 800ad0e:	2b04      	cmp	r3, #4
 800ad10:	d102      	bne.n	800ad18 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2207      	movs	r2, #7
 800ad16:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ad20:	68b8      	ldr	r0, [r7, #8]
 800ad22:	f7fd fbd2 	bl	80084ca <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d008      	beq.n	800ad40 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	f43f af43 	beq.w	800abc6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	8b5b      	ldrh	r3, [r3, #26]
 800ad44:	f003 0301 	and.w	r3, r3, #1
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00e      	beq.n	800ad6a <tcp_receive+0xbc6>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	8b5b      	ldrh	r3, [r3, #26]
 800ad50:	f023 0301 	bic.w	r3, r3, #1
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	835a      	strh	r2, [r3, #26]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	8b5b      	ldrh	r3, [r3, #26]
 800ad5e:	f043 0302 	orr.w	r3, r3, #2
 800ad62:	b29a      	uxth	r2, r3
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ad68:	e188      	b.n	800b07c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	8b5b      	ldrh	r3, [r3, #26]
 800ad6e:	f043 0301 	orr.w	r3, r3, #1
 800ad72:	b29a      	uxth	r2, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ad78:	e180      	b.n	800b07c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d106      	bne.n	800ad90 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ad82:	4848      	ldr	r0, [pc, #288]	; (800aea4 <tcp_receive+0xd00>)
 800ad84:	f7fd fbba 	bl	80084fc <tcp_seg_copy>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	675a      	str	r2, [r3, #116]	; 0x74
 800ad8e:	e16d      	b.n	800b06c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ad90:	2300      	movs	r3, #0
 800ad92:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad98:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad9a:	e157      	b.n	800b04c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800ad9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	685a      	ldr	r2, [r3, #4]
 800ada2:	4b41      	ldr	r3, [pc, #260]	; (800aea8 <tcp_receive+0xd04>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d11d      	bne.n	800ade6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800adaa:	4b3e      	ldr	r3, [pc, #248]	; (800aea4 <tcp_receive+0xd00>)
 800adac:	891a      	ldrh	r2, [r3, #8]
 800adae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb0:	891b      	ldrh	r3, [r3, #8]
 800adb2:	429a      	cmp	r2, r3
 800adb4:	f240 814f 	bls.w	800b056 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800adb8:	483a      	ldr	r0, [pc, #232]	; (800aea4 <tcp_receive+0xd00>)
 800adba:	f7fd fb9f 	bl	80084fc <tcp_seg_copy>
 800adbe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f000 8149 	beq.w	800b05a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800adc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d003      	beq.n	800add6 <tcp_receive+0xc32>
                    prev->next = cseg;
 800adce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add0:	697a      	ldr	r2, [r7, #20]
 800add2:	601a      	str	r2, [r3, #0]
 800add4:	e002      	b.n	800addc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	697a      	ldr	r2, [r7, #20]
 800adda:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800addc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800adde:	6978      	ldr	r0, [r7, #20]
 800ade0:	f7ff f8dc 	bl	8009f9c <tcp_oos_insert_segment>
                }
                break;
 800ade4:	e139      	b.n	800b05a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ade6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d117      	bne.n	800ae1c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800adec:	4b2e      	ldr	r3, [pc, #184]	; (800aea8 <tcp_receive+0xd04>)
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	1ad3      	subs	r3, r2, r3
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	da57      	bge.n	800aeac <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800adfc:	4829      	ldr	r0, [pc, #164]	; (800aea4 <tcp_receive+0xd00>)
 800adfe:	f7fd fb7d 	bl	80084fc <tcp_seg_copy>
 800ae02:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f000 8129 	beq.w	800b05e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	69ba      	ldr	r2, [r7, #24]
 800ae10:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ae12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae14:	69b8      	ldr	r0, [r7, #24]
 800ae16:	f7ff f8c1 	bl	8009f9c <tcp_oos_insert_segment>
                  }
                  break;
 800ae1a:	e120      	b.n	800b05e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ae1c:	4b22      	ldr	r3, [pc, #136]	; (800aea8 <tcp_receive+0xd04>)
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	1ad3      	subs	r3, r2, r3
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	db3e      	blt.n	800aeac <tcp_receive+0xd08>
 800ae2e:	4b1e      	ldr	r3, [pc, #120]	; (800aea8 <tcp_receive+0xd04>)
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	dc35      	bgt.n	800aeac <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ae40:	4818      	ldr	r0, [pc, #96]	; (800aea4 <tcp_receive+0xd00>)
 800ae42:	f7fd fb5b 	bl	80084fc <tcp_seg_copy>
 800ae46:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	f000 8109 	beq.w	800b062 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ae50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae58:	8912      	ldrh	r2, [r2, #8]
 800ae5a:	441a      	add	r2, r3
 800ae5c:	4b12      	ldr	r3, [pc, #72]	; (800aea8 <tcp_receive+0xd04>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	dd12      	ble.n	800ae8c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ae66:	4b10      	ldr	r3, [pc, #64]	; (800aea8 <tcp_receive+0xd04>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	b29a      	uxth	r2, r3
 800ae6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	b29a      	uxth	r2, r3
 800ae78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae7a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ae7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae7e:	685a      	ldr	r2, [r3, #4]
 800ae80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae82:	891b      	ldrh	r3, [r3, #8]
 800ae84:	4619      	mov	r1, r3
 800ae86:	4610      	mov	r0, r2
 800ae88:	f7fb fe84 	bl	8006b94 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ae8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8e:	69fa      	ldr	r2, [r7, #28]
 800ae90:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ae92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae94:	69f8      	ldr	r0, [r7, #28]
 800ae96:	f7ff f881 	bl	8009f9c <tcp_oos_insert_segment>
                  }
                  break;
 800ae9a:	e0e2      	b.n	800b062 <tcp_receive+0xebe>
 800ae9c:	24003230 	.word	0x24003230
 800aea0:	2400322d 	.word	0x2400322d
 800aea4:	24003200 	.word	0x24003200
 800aea8:	24003220 	.word	0x24003220
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800aeac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeae:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800aeb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f040 80c6 	bne.w	800b046 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800aeba:	4b80      	ldr	r3, [pc, #512]	; (800b0bc <tcp_receive+0xf18>)
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f340 80bd 	ble.w	800b046 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800aecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	899b      	ldrh	r3, [r3, #12]
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7fa fbcd 	bl	8005674 <lwip_htons>
 800aeda:	4603      	mov	r3, r0
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	f003 0301 	and.w	r3, r3, #1
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	f040 80bf 	bne.w	800b066 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800aee8:	4875      	ldr	r0, [pc, #468]	; (800b0c0 <tcp_receive+0xf1c>)
 800aeea:	f7fd fb07 	bl	80084fc <tcp_seg_copy>
 800aeee:	4602      	mov	r2, r0
 800aef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800aef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f000 80b6 	beq.w	800b06a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800aefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af06:	8912      	ldrh	r2, [r2, #8]
 800af08:	441a      	add	r2, r3
 800af0a:	4b6c      	ldr	r3, [pc, #432]	; (800b0bc <tcp_receive+0xf18>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	1ad3      	subs	r3, r2, r3
 800af10:	2b00      	cmp	r3, #0
 800af12:	dd12      	ble.n	800af3a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800af14:	4b69      	ldr	r3, [pc, #420]	; (800b0bc <tcp_receive+0xf18>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	b29a      	uxth	r2, r3
 800af1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	b29b      	uxth	r3, r3
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	b29a      	uxth	r2, r3
 800af26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af28:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800af2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2c:	685a      	ldr	r2, [r3, #4]
 800af2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af30:	891b      	ldrh	r3, [r3, #8]
 800af32:	4619      	mov	r1, r3
 800af34:	4610      	mov	r0, r2
 800af36:	f7fb fe2d 	bl	8006b94 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800af3a:	4b62      	ldr	r3, [pc, #392]	; (800b0c4 <tcp_receive+0xf20>)
 800af3c:	881b      	ldrh	r3, [r3, #0]
 800af3e:	461a      	mov	r2, r3
 800af40:	4b5e      	ldr	r3, [pc, #376]	; (800b0bc <tcp_receive+0xf18>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	441a      	add	r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4a:	6879      	ldr	r1, [r7, #4]
 800af4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800af4e:	440b      	add	r3, r1
 800af50:	1ad3      	subs	r3, r2, r3
 800af52:	2b00      	cmp	r3, #0
 800af54:	f340 8089 	ble.w	800b06a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800af58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	899b      	ldrh	r3, [r3, #12]
 800af60:	b29b      	uxth	r3, r3
 800af62:	4618      	mov	r0, r3
 800af64:	f7fa fb86 	bl	8005674 <lwip_htons>
 800af68:	4603      	mov	r3, r0
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	f003 0301 	and.w	r3, r3, #1
 800af70:	2b00      	cmp	r3, #0
 800af72:	d022      	beq.n	800afba <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800af74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	899b      	ldrh	r3, [r3, #12]
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	b21b      	sxth	r3, r3
 800af80:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800af84:	b21c      	sxth	r4, r3
 800af86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	899b      	ldrh	r3, [r3, #12]
 800af8e:	b29b      	uxth	r3, r3
 800af90:	4618      	mov	r0, r3
 800af92:	f7fa fb6f 	bl	8005674 <lwip_htons>
 800af96:	4603      	mov	r3, r0
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7fa fb66 	bl	8005674 <lwip_htons>
 800afa8:	4603      	mov	r3, r0
 800afaa:	b21b      	sxth	r3, r3
 800afac:	4323      	orrs	r3, r4
 800afae:	b21a      	sxth	r2, r3
 800afb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	68db      	ldr	r3, [r3, #12]
 800afb6:	b292      	uxth	r2, r2
 800afb8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afc4:	4413      	add	r3, r2
 800afc6:	b299      	uxth	r1, r3
 800afc8:	4b3c      	ldr	r3, [pc, #240]	; (800b0bc <tcp_receive+0xf18>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	b29a      	uxth	r2, r3
 800afce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	1a8a      	subs	r2, r1, r2
 800afd4:	b292      	uxth	r2, r2
 800afd6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800afd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	685a      	ldr	r2, [r3, #4]
 800afde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	891b      	ldrh	r3, [r3, #8]
 800afe4:	4619      	mov	r1, r3
 800afe6:	4610      	mov	r0, r2
 800afe8:	f7fb fdd4 	bl	8006b94 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800afec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	891c      	ldrh	r4, [r3, #8]
 800aff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	899b      	ldrh	r3, [r3, #12]
 800affa:	b29b      	uxth	r3, r3
 800affc:	4618      	mov	r0, r3
 800affe:	f7fa fb39 	bl	8005674 <lwip_htons>
 800b002:	4603      	mov	r3, r0
 800b004:	b2db      	uxtb	r3, r3
 800b006:	f003 0303 	and.w	r3, r3, #3
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d001      	beq.n	800b012 <tcp_receive+0xe6e>
 800b00e:	2301      	movs	r3, #1
 800b010:	e000      	b.n	800b014 <tcp_receive+0xe70>
 800b012:	2300      	movs	r3, #0
 800b014:	4423      	add	r3, r4
 800b016:	b29a      	uxth	r2, r3
 800b018:	4b2a      	ldr	r3, [pc, #168]	; (800b0c4 <tcp_receive+0xf20>)
 800b01a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b01c:	4b29      	ldr	r3, [pc, #164]	; (800b0c4 <tcp_receive+0xf20>)
 800b01e:	881b      	ldrh	r3, [r3, #0]
 800b020:	461a      	mov	r2, r3
 800b022:	4b26      	ldr	r3, [pc, #152]	; (800b0bc <tcp_receive+0xf18>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	441a      	add	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02c:	6879      	ldr	r1, [r7, #4]
 800b02e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b030:	440b      	add	r3, r1
 800b032:	429a      	cmp	r2, r3
 800b034:	d019      	beq.n	800b06a <tcp_receive+0xec6>
 800b036:	4b24      	ldr	r3, [pc, #144]	; (800b0c8 <tcp_receive+0xf24>)
 800b038:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800b03c:	4923      	ldr	r1, [pc, #140]	; (800b0cc <tcp_receive+0xf28>)
 800b03e:	4824      	ldr	r0, [pc, #144]	; (800b0d0 <tcp_receive+0xf2c>)
 800b040:	f004 fd5e 	bl	800fb00 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b044:	e011      	b.n	800b06a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04e:	2b00      	cmp	r3, #0
 800b050:	f47f aea4 	bne.w	800ad9c <tcp_receive+0xbf8>
 800b054:	e00a      	b.n	800b06c <tcp_receive+0xec8>
                break;
 800b056:	bf00      	nop
 800b058:	e008      	b.n	800b06c <tcp_receive+0xec8>
                break;
 800b05a:	bf00      	nop
 800b05c:	e006      	b.n	800b06c <tcp_receive+0xec8>
                  break;
 800b05e:	bf00      	nop
 800b060:	e004      	b.n	800b06c <tcp_receive+0xec8>
                  break;
 800b062:	bf00      	nop
 800b064:	e002      	b.n	800b06c <tcp_receive+0xec8>
                  break;
 800b066:	bf00      	nop
 800b068:	e000      	b.n	800b06c <tcp_receive+0xec8>
                break;
 800b06a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f001 fa33 	bl	800c4d8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b072:	e003      	b.n	800b07c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f001 fa2f 	bl	800c4d8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b07a:	e01a      	b.n	800b0b2 <tcp_receive+0xf0e>
 800b07c:	e019      	b.n	800b0b2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b07e:	4b0f      	ldr	r3, [pc, #60]	; (800b0bc <tcp_receive+0xf18>)
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b086:	1ad3      	subs	r3, r2, r3
 800b088:	2b00      	cmp	r3, #0
 800b08a:	db0a      	blt.n	800b0a2 <tcp_receive+0xefe>
 800b08c:	4b0b      	ldr	r3, [pc, #44]	; (800b0bc <tcp_receive+0xf18>)
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b094:	6879      	ldr	r1, [r7, #4]
 800b096:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b098:	440b      	add	r3, r1
 800b09a:	1ad3      	subs	r3, r2, r3
 800b09c:	3301      	adds	r3, #1
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	dd07      	ble.n	800b0b2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	8b5b      	ldrh	r3, [r3, #26]
 800b0a6:	f043 0302 	orr.w	r3, r3, #2
 800b0aa:	b29a      	uxth	r2, r3
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b0b0:	e7ff      	b.n	800b0b2 <tcp_receive+0xf0e>
 800b0b2:	bf00      	nop
 800b0b4:	3750      	adds	r7, #80	; 0x50
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bdb0      	pop	{r4, r5, r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	24003220 	.word	0x24003220
 800b0c0:	24003200 	.word	0x24003200
 800b0c4:	2400322a 	.word	0x2400322a
 800b0c8:	080121c4 	.word	0x080121c4
 800b0cc:	0801256c 	.word	0x0801256c
 800b0d0:	08012210 	.word	0x08012210

0800b0d4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b0da:	4b15      	ldr	r3, [pc, #84]	; (800b130 <tcp_get_next_optbyte+0x5c>)
 800b0dc:	881b      	ldrh	r3, [r3, #0]
 800b0de:	1c5a      	adds	r2, r3, #1
 800b0e0:	b291      	uxth	r1, r2
 800b0e2:	4a13      	ldr	r2, [pc, #76]	; (800b130 <tcp_get_next_optbyte+0x5c>)
 800b0e4:	8011      	strh	r1, [r2, #0]
 800b0e6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b0e8:	4b12      	ldr	r3, [pc, #72]	; (800b134 <tcp_get_next_optbyte+0x60>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d004      	beq.n	800b0fa <tcp_get_next_optbyte+0x26>
 800b0f0:	4b11      	ldr	r3, [pc, #68]	; (800b138 <tcp_get_next_optbyte+0x64>)
 800b0f2:	881b      	ldrh	r3, [r3, #0]
 800b0f4:	88fa      	ldrh	r2, [r7, #6]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d208      	bcs.n	800b10c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b0fa:	4b10      	ldr	r3, [pc, #64]	; (800b13c <tcp_get_next_optbyte+0x68>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	3314      	adds	r3, #20
 800b100:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b102:	88fb      	ldrh	r3, [r7, #6]
 800b104:	683a      	ldr	r2, [r7, #0]
 800b106:	4413      	add	r3, r2
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	e00b      	b.n	800b124 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b10c:	88fb      	ldrh	r3, [r7, #6]
 800b10e:	b2da      	uxtb	r2, r3
 800b110:	4b09      	ldr	r3, [pc, #36]	; (800b138 <tcp_get_next_optbyte+0x64>)
 800b112:	881b      	ldrh	r3, [r3, #0]
 800b114:	b2db      	uxtb	r3, r3
 800b116:	1ad3      	subs	r3, r2, r3
 800b118:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b11a:	4b06      	ldr	r3, [pc, #24]	; (800b134 <tcp_get_next_optbyte+0x60>)
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	797b      	ldrb	r3, [r7, #5]
 800b120:	4413      	add	r3, r2
 800b122:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b124:	4618      	mov	r0, r3
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr
 800b130:	2400321c 	.word	0x2400321c
 800b134:	24003218 	.word	0x24003218
 800b138:	24003216 	.word	0x24003216
 800b13c:	24003210 	.word	0x24003210

0800b140 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d106      	bne.n	800b15c <tcp_parseopt+0x1c>
 800b14e:	4b32      	ldr	r3, [pc, #200]	; (800b218 <tcp_parseopt+0xd8>)
 800b150:	f240 727d 	movw	r2, #1917	; 0x77d
 800b154:	4931      	ldr	r1, [pc, #196]	; (800b21c <tcp_parseopt+0xdc>)
 800b156:	4832      	ldr	r0, [pc, #200]	; (800b220 <tcp_parseopt+0xe0>)
 800b158:	f004 fcd2 	bl	800fb00 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b15c:	4b31      	ldr	r3, [pc, #196]	; (800b224 <tcp_parseopt+0xe4>)
 800b15e:	881b      	ldrh	r3, [r3, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d055      	beq.n	800b210 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b164:	4b30      	ldr	r3, [pc, #192]	; (800b228 <tcp_parseopt+0xe8>)
 800b166:	2200      	movs	r2, #0
 800b168:	801a      	strh	r2, [r3, #0]
 800b16a:	e045      	b.n	800b1f8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800b16c:	f7ff ffb2 	bl	800b0d4 <tcp_get_next_optbyte>
 800b170:	4603      	mov	r3, r0
 800b172:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b174:	7bfb      	ldrb	r3, [r7, #15]
 800b176:	2b02      	cmp	r3, #2
 800b178:	d006      	beq.n	800b188 <tcp_parseopt+0x48>
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	dc2b      	bgt.n	800b1d6 <tcp_parseopt+0x96>
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d041      	beq.n	800b206 <tcp_parseopt+0xc6>
 800b182:	2b01      	cmp	r3, #1
 800b184:	d127      	bne.n	800b1d6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800b186:	e037      	b.n	800b1f8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b188:	f7ff ffa4 	bl	800b0d4 <tcp_get_next_optbyte>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b04      	cmp	r3, #4
 800b190:	d13b      	bne.n	800b20a <tcp_parseopt+0xca>
 800b192:	4b25      	ldr	r3, [pc, #148]	; (800b228 <tcp_parseopt+0xe8>)
 800b194:	881b      	ldrh	r3, [r3, #0]
 800b196:	3301      	adds	r3, #1
 800b198:	4a22      	ldr	r2, [pc, #136]	; (800b224 <tcp_parseopt+0xe4>)
 800b19a:	8812      	ldrh	r2, [r2, #0]
 800b19c:	4293      	cmp	r3, r2
 800b19e:	da34      	bge.n	800b20a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b1a0:	f7ff ff98 	bl	800b0d4 <tcp_get_next_optbyte>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	021b      	lsls	r3, r3, #8
 800b1aa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b1ac:	f7ff ff92 	bl	800b0d4 <tcp_get_next_optbyte>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	b29a      	uxth	r2, r3
 800b1b4:	89bb      	ldrh	r3, [r7, #12]
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b1ba:	89bb      	ldrh	r3, [r7, #12]
 800b1bc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b1c0:	d804      	bhi.n	800b1cc <tcp_parseopt+0x8c>
 800b1c2:	89bb      	ldrh	r3, [r7, #12]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d001      	beq.n	800b1cc <tcp_parseopt+0x8c>
 800b1c8:	89ba      	ldrh	r2, [r7, #12]
 800b1ca:	e001      	b.n	800b1d0 <tcp_parseopt+0x90>
 800b1cc:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b1d4:	e010      	b.n	800b1f8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b1d6:	f7ff ff7d 	bl	800b0d4 <tcp_get_next_optbyte>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b1de:	7afb      	ldrb	r3, [r7, #11]
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d914      	bls.n	800b20e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b1e4:	7afb      	ldrb	r3, [r7, #11]
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	4b0f      	ldr	r3, [pc, #60]	; (800b228 <tcp_parseopt+0xe8>)
 800b1ea:	881b      	ldrh	r3, [r3, #0]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	3b02      	subs	r3, #2
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	4b0c      	ldr	r3, [pc, #48]	; (800b228 <tcp_parseopt+0xe8>)
 800b1f6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b1f8:	4b0b      	ldr	r3, [pc, #44]	; (800b228 <tcp_parseopt+0xe8>)
 800b1fa:	881a      	ldrh	r2, [r3, #0]
 800b1fc:	4b09      	ldr	r3, [pc, #36]	; (800b224 <tcp_parseopt+0xe4>)
 800b1fe:	881b      	ldrh	r3, [r3, #0]
 800b200:	429a      	cmp	r2, r3
 800b202:	d3b3      	bcc.n	800b16c <tcp_parseopt+0x2c>
 800b204:	e004      	b.n	800b210 <tcp_parseopt+0xd0>
          return;
 800b206:	bf00      	nop
 800b208:	e002      	b.n	800b210 <tcp_parseopt+0xd0>
            return;
 800b20a:	bf00      	nop
 800b20c:	e000      	b.n	800b210 <tcp_parseopt+0xd0>
            return;
 800b20e:	bf00      	nop
      }
    }
  }
}
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	080121c4 	.word	0x080121c4
 800b21c:	08012628 	.word	0x08012628
 800b220:	08012210 	.word	0x08012210
 800b224:	24003214 	.word	0x24003214
 800b228:	2400321c 	.word	0x2400321c

0800b22c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b22c:	b480      	push	{r7}
 800b22e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b230:	4b05      	ldr	r3, [pc, #20]	; (800b248 <tcp_trigger_input_pcb_close+0x1c>)
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	f043 0310 	orr.w	r3, r3, #16
 800b238:	b2da      	uxtb	r2, r3
 800b23a:	4b03      	ldr	r3, [pc, #12]	; (800b248 <tcp_trigger_input_pcb_close+0x1c>)
 800b23c:	701a      	strb	r2, [r3, #0]
}
 800b23e:	bf00      	nop
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr
 800b248:	2400322d 	.word	0x2400322d

0800b24c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00a      	beq.n	800b274 <tcp_route+0x28>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	7a1b      	ldrb	r3, [r3, #8]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d006      	beq.n	800b274 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	7a1b      	ldrb	r3, [r3, #8]
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7fb fab8 	bl	80067e0 <netif_get_by_index>
 800b270:	4603      	mov	r3, r0
 800b272:	e003      	b.n	800b27c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f003 f9f3 	bl	800e660 <ip4_route>
 800b27a:	4603      	mov	r3, r0
  }
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b284:	b590      	push	{r4, r7, lr}
 800b286:	b087      	sub	sp, #28
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	603b      	str	r3, [r7, #0]
 800b290:	4613      	mov	r3, r2
 800b292:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d105      	bne.n	800b2a6 <tcp_create_segment+0x22>
 800b29a:	4b44      	ldr	r3, [pc, #272]	; (800b3ac <tcp_create_segment+0x128>)
 800b29c:	22a3      	movs	r2, #163	; 0xa3
 800b29e:	4944      	ldr	r1, [pc, #272]	; (800b3b0 <tcp_create_segment+0x12c>)
 800b2a0:	4844      	ldr	r0, [pc, #272]	; (800b3b4 <tcp_create_segment+0x130>)
 800b2a2:	f004 fc2d 	bl	800fb00 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d105      	bne.n	800b2b8 <tcp_create_segment+0x34>
 800b2ac:	4b3f      	ldr	r3, [pc, #252]	; (800b3ac <tcp_create_segment+0x128>)
 800b2ae:	22a4      	movs	r2, #164	; 0xa4
 800b2b0:	4941      	ldr	r1, [pc, #260]	; (800b3b8 <tcp_create_segment+0x134>)
 800b2b2:	4840      	ldr	r0, [pc, #256]	; (800b3b4 <tcp_create_segment+0x130>)
 800b2b4:	f004 fc24 	bl	800fb00 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b2b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	f003 0304 	and.w	r3, r3, #4
 800b2c4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b2c6:	2003      	movs	r0, #3
 800b2c8:	f7fa ff04 	bl	80060d4 <memp_malloc>
 800b2cc:	6138      	str	r0, [r7, #16]
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d104      	bne.n	800b2de <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b2d4:	68b8      	ldr	r0, [r7, #8]
 800b2d6:	f7fb fde3 	bl	8006ea0 <pbuf_free>
    return NULL;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	e061      	b.n	800b3a2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b2e4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	891a      	ldrh	r2, [r3, #8]
 800b2f6:	7dfb      	ldrb	r3, [r7, #23]
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d205      	bcs.n	800b30a <tcp_create_segment+0x86>
 800b2fe:	4b2b      	ldr	r3, [pc, #172]	; (800b3ac <tcp_create_segment+0x128>)
 800b300:	22b0      	movs	r2, #176	; 0xb0
 800b302:	492e      	ldr	r1, [pc, #184]	; (800b3bc <tcp_create_segment+0x138>)
 800b304:	482b      	ldr	r0, [pc, #172]	; (800b3b4 <tcp_create_segment+0x130>)
 800b306:	f004 fbfb 	bl	800fb00 <iprintf>
  seg->len = p->tot_len - optlen;
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	891a      	ldrh	r2, [r3, #8]
 800b30e:	7dfb      	ldrb	r3, [r7, #23]
 800b310:	b29b      	uxth	r3, r3
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	b29a      	uxth	r2, r3
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b31a:	2114      	movs	r1, #20
 800b31c:	68b8      	ldr	r0, [r7, #8]
 800b31e:	f7fb fd29 	bl	8006d74 <pbuf_add_header>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d004      	beq.n	800b332 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b328:	6938      	ldr	r0, [r7, #16]
 800b32a:	f7fd f8ce 	bl	80084ca <tcp_seg_free>
    return NULL;
 800b32e:	2300      	movs	r3, #0
 800b330:	e037      	b.n	800b3a2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	685a      	ldr	r2, [r3, #4]
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	8ada      	ldrh	r2, [r3, #22]
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	68dc      	ldr	r4, [r3, #12]
 800b344:	4610      	mov	r0, r2
 800b346:	f7fa f995 	bl	8005674 <lwip_htons>
 800b34a:	4603      	mov	r3, r0
 800b34c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	8b1a      	ldrh	r2, [r3, #24]
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	68dc      	ldr	r4, [r3, #12]
 800b356:	4610      	mov	r0, r2
 800b358:	f7fa f98c 	bl	8005674 <lwip_htons>
 800b35c:	4603      	mov	r3, r0
 800b35e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	68dc      	ldr	r4, [r3, #12]
 800b364:	6838      	ldr	r0, [r7, #0]
 800b366:	f7fa f99a 	bl	800569e <lwip_htonl>
 800b36a:	4603      	mov	r3, r0
 800b36c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b36e:	7dfb      	ldrb	r3, [r7, #23]
 800b370:	089b      	lsrs	r3, r3, #2
 800b372:	b2db      	uxtb	r3, r3
 800b374:	b29b      	uxth	r3, r3
 800b376:	3305      	adds	r3, #5
 800b378:	b29b      	uxth	r3, r3
 800b37a:	031b      	lsls	r3, r3, #12
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	79fb      	ldrb	r3, [r7, #7]
 800b380:	b29b      	uxth	r3, r3
 800b382:	4313      	orrs	r3, r2
 800b384:	b29a      	uxth	r2, r3
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	68dc      	ldr	r4, [r3, #12]
 800b38a:	4610      	mov	r0, r2
 800b38c:	f7fa f972 	bl	8005674 <lwip_htons>
 800b390:	4603      	mov	r3, r0
 800b392:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	749a      	strb	r2, [r3, #18]
 800b39c:	2200      	movs	r2, #0
 800b39e:	74da      	strb	r2, [r3, #19]
  return seg;
 800b3a0:	693b      	ldr	r3, [r7, #16]
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	371c      	adds	r7, #28
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd90      	pop	{r4, r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	08012644 	.word	0x08012644
 800b3b0:	08012678 	.word	0x08012678
 800b3b4:	08012698 	.word	0x08012698
 800b3b8:	080126c0 	.word	0x080126c0
 800b3bc:	080126e4 	.word	0x080126e4

0800b3c0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b3c0:	b590      	push	{r4, r7, lr}
 800b3c2:	b08b      	sub	sp, #44	; 0x2c
 800b3c4:	af02      	add	r7, sp, #8
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	61fb      	str	r3, [r7, #28]
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d106      	bne.n	800b3ec <tcp_split_unsent_seg+0x2c>
 800b3de:	4b95      	ldr	r3, [pc, #596]	; (800b634 <tcp_split_unsent_seg+0x274>)
 800b3e0:	f240 324b 	movw	r2, #843	; 0x34b
 800b3e4:	4994      	ldr	r1, [pc, #592]	; (800b638 <tcp_split_unsent_seg+0x278>)
 800b3e6:	4895      	ldr	r0, [pc, #596]	; (800b63c <tcp_split_unsent_seg+0x27c>)
 800b3e8:	f004 fb8a 	bl	800fb00 <iprintf>

  useg = pcb->unsent;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3f0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d102      	bne.n	800b3fe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b3f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3fc:	e116      	b.n	800b62c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b3fe:	887b      	ldrh	r3, [r7, #2]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d109      	bne.n	800b418 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b404:	4b8b      	ldr	r3, [pc, #556]	; (800b634 <tcp_split_unsent_seg+0x274>)
 800b406:	f240 3253 	movw	r2, #851	; 0x353
 800b40a:	498d      	ldr	r1, [pc, #564]	; (800b640 <tcp_split_unsent_seg+0x280>)
 800b40c:	488b      	ldr	r0, [pc, #556]	; (800b63c <tcp_split_unsent_seg+0x27c>)
 800b40e:	f004 fb77 	bl	800fb00 <iprintf>
    return ERR_VAL;
 800b412:	f06f 0305 	mvn.w	r3, #5
 800b416:	e109      	b.n	800b62c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	891b      	ldrh	r3, [r3, #8]
 800b41c:	887a      	ldrh	r2, [r7, #2]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d301      	bcc.n	800b426 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b422:	2300      	movs	r3, #0
 800b424:	e102      	b.n	800b62c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b42a:	887a      	ldrh	r2, [r7, #2]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d906      	bls.n	800b43e <tcp_split_unsent_seg+0x7e>
 800b430:	4b80      	ldr	r3, [pc, #512]	; (800b634 <tcp_split_unsent_seg+0x274>)
 800b432:	f240 325b 	movw	r2, #859	; 0x35b
 800b436:	4983      	ldr	r1, [pc, #524]	; (800b644 <tcp_split_unsent_seg+0x284>)
 800b438:	4880      	ldr	r0, [pc, #512]	; (800b63c <tcp_split_unsent_seg+0x27c>)
 800b43a:	f004 fb61 	bl	800fb00 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	891b      	ldrh	r3, [r3, #8]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d106      	bne.n	800b454 <tcp_split_unsent_seg+0x94>
 800b446:	4b7b      	ldr	r3, [pc, #492]	; (800b634 <tcp_split_unsent_seg+0x274>)
 800b448:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b44c:	497e      	ldr	r1, [pc, #504]	; (800b648 <tcp_split_unsent_seg+0x288>)
 800b44e:	487b      	ldr	r0, [pc, #492]	; (800b63c <tcp_split_unsent_seg+0x27c>)
 800b450:	f004 fb56 	bl	800fb00 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	7a9b      	ldrb	r3, [r3, #10]
 800b458:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	f003 0304 	and.w	r3, r3, #4
 800b464:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	891a      	ldrh	r2, [r3, #8]
 800b46a:	887b      	ldrh	r3, [r7, #2]
 800b46c:	1ad3      	subs	r3, r2, r3
 800b46e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b470:	7bbb      	ldrb	r3, [r7, #14]
 800b472:	b29a      	uxth	r2, r3
 800b474:	89bb      	ldrh	r3, [r7, #12]
 800b476:	4413      	add	r3, r2
 800b478:	b29b      	uxth	r3, r3
 800b47a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b47e:	4619      	mov	r1, r3
 800b480:	2036      	movs	r0, #54	; 0x36
 800b482:	f7fb fa29 	bl	80068d8 <pbuf_alloc>
 800b486:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	f000 80b7 	beq.w	800b5fe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	891a      	ldrh	r2, [r3, #8]
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	891b      	ldrh	r3, [r3, #8]
 800b49a:	1ad3      	subs	r3, r2, r3
 800b49c:	b29a      	uxth	r2, r3
 800b49e:	887b      	ldrh	r3, [r7, #2]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	6858      	ldr	r0, [r3, #4]
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	685a      	ldr	r2, [r3, #4]
 800b4ac:	7bbb      	ldrb	r3, [r7, #14]
 800b4ae:	18d1      	adds	r1, r2, r3
 800b4b0:	897b      	ldrh	r3, [r7, #10]
 800b4b2:	89ba      	ldrh	r2, [r7, #12]
 800b4b4:	f7fb feee 	bl	8007294 <pbuf_copy_partial>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	89bb      	ldrh	r3, [r7, #12]
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	f040 809f 	bne.w	800b602 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	899b      	ldrh	r3, [r3, #12]
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7fa f8d1 	bl	8005674 <lwip_htons>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	b2db      	uxtb	r3, r3
 800b4d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4da:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b4dc:	2300      	movs	r3, #0
 800b4de:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b4e0:	7efb      	ldrb	r3, [r7, #27]
 800b4e2:	f003 0308 	and.w	r3, r3, #8
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d007      	beq.n	800b4fa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b4ea:	7efb      	ldrb	r3, [r7, #27]
 800b4ec:	f023 0308 	bic.w	r3, r3, #8
 800b4f0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b4f2:	7ebb      	ldrb	r3, [r7, #26]
 800b4f4:	f043 0308 	orr.w	r3, r3, #8
 800b4f8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b4fa:	7efb      	ldrb	r3, [r7, #27]
 800b4fc:	f003 0301 	and.w	r3, r3, #1
 800b500:	2b00      	cmp	r3, #0
 800b502:	d007      	beq.n	800b514 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b504:	7efb      	ldrb	r3, [r7, #27]
 800b506:	f023 0301 	bic.w	r3, r3, #1
 800b50a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b50c:	7ebb      	ldrb	r3, [r7, #26]
 800b50e:	f043 0301 	orr.w	r3, r3, #1
 800b512:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7fa f8bf 	bl	800569e <lwip_htonl>
 800b520:	4602      	mov	r2, r0
 800b522:	887b      	ldrh	r3, [r7, #2]
 800b524:	18d1      	adds	r1, r2, r3
 800b526:	7eba      	ldrb	r2, [r7, #26]
 800b528:	7bfb      	ldrb	r3, [r7, #15]
 800b52a:	9300      	str	r3, [sp, #0]
 800b52c:	460b      	mov	r3, r1
 800b52e:	6939      	ldr	r1, [r7, #16]
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7ff fea7 	bl	800b284 <tcp_create_segment>
 800b536:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b538:	69fb      	ldr	r3, [r7, #28]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d063      	beq.n	800b606 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	4618      	mov	r0, r3
 800b544:	f7fb fd34 	bl	8006fb0 <pbuf_clen>
 800b548:	4603      	mov	r3, r0
 800b54a:	461a      	mov	r2, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b552:	1a9b      	subs	r3, r3, r2
 800b554:	b29a      	uxth	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	6858      	ldr	r0, [r3, #4]
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	891a      	ldrh	r2, [r3, #8]
 800b566:	89bb      	ldrh	r3, [r7, #12]
 800b568:	1ad3      	subs	r3, r2, r3
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	4619      	mov	r1, r3
 800b56e:	f7fb fb11 	bl	8006b94 <pbuf_realloc>
  useg->len -= remainder;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	891a      	ldrh	r2, [r3, #8]
 800b576:	89bb      	ldrh	r3, [r7, #12]
 800b578:	1ad3      	subs	r3, r2, r3
 800b57a:	b29a      	uxth	r2, r3
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	899b      	ldrh	r3, [r3, #12]
 800b586:	b29c      	uxth	r4, r3
 800b588:	7efb      	ldrb	r3, [r7, #27]
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7fa f871 	bl	8005674 <lwip_htons>
 800b592:	4603      	mov	r3, r0
 800b594:	461a      	mov	r2, r3
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	4322      	orrs	r2, r4
 800b59c:	b292      	uxth	r2, r2
 800b59e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7fb fd03 	bl	8006fb0 <pbuf_clen>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b5b4:	4413      	add	r3, r2
 800b5b6:	b29a      	uxth	r2, r3
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7fb fcf4 	bl	8006fb0 <pbuf_clen>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b5d2:	4413      	add	r3, r2
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	69fa      	ldr	r2, [r7, #28]
 800b5e8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d103      	bne.n	800b5fa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	e016      	b.n	800b62c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b5fe:	bf00      	nop
 800b600:	e002      	b.n	800b608 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b602:	bf00      	nop
 800b604:	e000      	b.n	800b608 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b606:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d006      	beq.n	800b61c <tcp_split_unsent_seg+0x25c>
 800b60e:	4b09      	ldr	r3, [pc, #36]	; (800b634 <tcp_split_unsent_seg+0x274>)
 800b610:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b614:	490d      	ldr	r1, [pc, #52]	; (800b64c <tcp_split_unsent_seg+0x28c>)
 800b616:	4809      	ldr	r0, [pc, #36]	; (800b63c <tcp_split_unsent_seg+0x27c>)
 800b618:	f004 fa72 	bl	800fb00 <iprintf>
  if (p != NULL) {
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d002      	beq.n	800b628 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b622:	6938      	ldr	r0, [r7, #16]
 800b624:	f7fb fc3c 	bl	8006ea0 <pbuf_free>
  }

  return ERR_MEM;
 800b628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3724      	adds	r7, #36	; 0x24
 800b630:	46bd      	mov	sp, r7
 800b632:	bd90      	pop	{r4, r7, pc}
 800b634:	08012644 	.word	0x08012644
 800b638:	080129d8 	.word	0x080129d8
 800b63c:	08012698 	.word	0x08012698
 800b640:	080129fc 	.word	0x080129fc
 800b644:	08012a20 	.word	0x08012a20
 800b648:	08012a30 	.word	0x08012a30
 800b64c:	08012a40 	.word	0x08012a40

0800b650 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b650:	b590      	push	{r4, r7, lr}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d106      	bne.n	800b66c <tcp_send_fin+0x1c>
 800b65e:	4b21      	ldr	r3, [pc, #132]	; (800b6e4 <tcp_send_fin+0x94>)
 800b660:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b664:	4920      	ldr	r1, [pc, #128]	; (800b6e8 <tcp_send_fin+0x98>)
 800b666:	4821      	ldr	r0, [pc, #132]	; (800b6ec <tcp_send_fin+0x9c>)
 800b668:	f004 fa4a 	bl	800fb00 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b670:	2b00      	cmp	r3, #0
 800b672:	d02e      	beq.n	800b6d2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b678:	60fb      	str	r3, [r7, #12]
 800b67a:	e002      	b.n	800b682 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d1f8      	bne.n	800b67c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	899b      	ldrh	r3, [r3, #12]
 800b690:	b29b      	uxth	r3, r3
 800b692:	4618      	mov	r0, r3
 800b694:	f7f9 ffee 	bl	8005674 <lwip_htons>
 800b698:	4603      	mov	r3, r0
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	f003 0307 	and.w	r3, r3, #7
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d116      	bne.n	800b6d2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	899b      	ldrh	r3, [r3, #12]
 800b6aa:	b29c      	uxth	r4, r3
 800b6ac:	2001      	movs	r0, #1
 800b6ae:	f7f9 ffe1 	bl	8005674 <lwip_htons>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	68db      	ldr	r3, [r3, #12]
 800b6ba:	4322      	orrs	r2, r4
 800b6bc:	b292      	uxth	r2, r2
 800b6be:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	8b5b      	ldrh	r3, [r3, #26]
 800b6c4:	f043 0320 	orr.w	r3, r3, #32
 800b6c8:	b29a      	uxth	r2, r3
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	e004      	b.n	800b6dc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b6d2:	2101      	movs	r1, #1
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 f80b 	bl	800b6f0 <tcp_enqueue_flags>
 800b6da:	4603      	mov	r3, r0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3714      	adds	r7, #20
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd90      	pop	{r4, r7, pc}
 800b6e4:	08012644 	.word	0x08012644
 800b6e8:	08012a4c 	.word	0x08012a4c
 800b6ec:	08012698 	.word	0x08012698

0800b6f0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b08a      	sub	sp, #40	; 0x28
 800b6f4:	af02      	add	r7, sp, #8
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b700:	2300      	movs	r3, #0
 800b702:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b704:	78fb      	ldrb	r3, [r7, #3]
 800b706:	f003 0303 	and.w	r3, r3, #3
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d106      	bne.n	800b71c <tcp_enqueue_flags+0x2c>
 800b70e:	4b67      	ldr	r3, [pc, #412]	; (800b8ac <tcp_enqueue_flags+0x1bc>)
 800b710:	f240 4211 	movw	r2, #1041	; 0x411
 800b714:	4966      	ldr	r1, [pc, #408]	; (800b8b0 <tcp_enqueue_flags+0x1c0>)
 800b716:	4867      	ldr	r0, [pc, #412]	; (800b8b4 <tcp_enqueue_flags+0x1c4>)
 800b718:	f004 f9f2 	bl	800fb00 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d106      	bne.n	800b730 <tcp_enqueue_flags+0x40>
 800b722:	4b62      	ldr	r3, [pc, #392]	; (800b8ac <tcp_enqueue_flags+0x1bc>)
 800b724:	f240 4213 	movw	r2, #1043	; 0x413
 800b728:	4963      	ldr	r1, [pc, #396]	; (800b8b8 <tcp_enqueue_flags+0x1c8>)
 800b72a:	4862      	ldr	r0, [pc, #392]	; (800b8b4 <tcp_enqueue_flags+0x1c4>)
 800b72c:	f004 f9e8 	bl	800fb00 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b730:	78fb      	ldrb	r3, [r7, #3]
 800b732:	f003 0302 	and.w	r3, r3, #2
 800b736:	2b00      	cmp	r3, #0
 800b738:	d001      	beq.n	800b73e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b73a:	2301      	movs	r3, #1
 800b73c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b73e:	7ffb      	ldrb	r3, [r7, #31]
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	b2db      	uxtb	r3, r3
 800b744:	f003 0304 	and.w	r3, r3, #4
 800b748:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b74a:	7dfb      	ldrb	r3, [r7, #23]
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b752:	4619      	mov	r1, r3
 800b754:	2036      	movs	r0, #54	; 0x36
 800b756:	f7fb f8bf 	bl	80068d8 <pbuf_alloc>
 800b75a:	6138      	str	r0, [r7, #16]
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d109      	bne.n	800b776 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	8b5b      	ldrh	r3, [r3, #26]
 800b766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b76a:	b29a      	uxth	r2, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b770:	f04f 33ff 	mov.w	r3, #4294967295
 800b774:	e095      	b.n	800b8a2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	895a      	ldrh	r2, [r3, #10]
 800b77a:	7dfb      	ldrb	r3, [r7, #23]
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	429a      	cmp	r2, r3
 800b780:	d206      	bcs.n	800b790 <tcp_enqueue_flags+0xa0>
 800b782:	4b4a      	ldr	r3, [pc, #296]	; (800b8ac <tcp_enqueue_flags+0x1bc>)
 800b784:	f240 4239 	movw	r2, #1081	; 0x439
 800b788:	494c      	ldr	r1, [pc, #304]	; (800b8bc <tcp_enqueue_flags+0x1cc>)
 800b78a:	484a      	ldr	r0, [pc, #296]	; (800b8b4 <tcp_enqueue_flags+0x1c4>)
 800b78c:	f004 f9b8 	bl	800fb00 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b794:	78fa      	ldrb	r2, [r7, #3]
 800b796:	7ffb      	ldrb	r3, [r7, #31]
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	460b      	mov	r3, r1
 800b79c:	6939      	ldr	r1, [r7, #16]
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f7ff fd70 	bl	800b284 <tcp_create_segment>
 800b7a4:	60f8      	str	r0, [r7, #12]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d109      	bne.n	800b7c0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	8b5b      	ldrh	r3, [r3, #26]
 800b7b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7b4:	b29a      	uxth	r2, r3
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b7ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b7be:	e070      	b.n	800b8a2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	f003 0303 	and.w	r3, r3, #3
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d006      	beq.n	800b7da <tcp_enqueue_flags+0xea>
 800b7cc:	4b37      	ldr	r3, [pc, #220]	; (800b8ac <tcp_enqueue_flags+0x1bc>)
 800b7ce:	f240 4242 	movw	r2, #1090	; 0x442
 800b7d2:	493b      	ldr	r1, [pc, #236]	; (800b8c0 <tcp_enqueue_flags+0x1d0>)
 800b7d4:	4837      	ldr	r0, [pc, #220]	; (800b8b4 <tcp_enqueue_flags+0x1c4>)
 800b7d6:	f004 f993 	bl	800fb00 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	891b      	ldrh	r3, [r3, #8]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d006      	beq.n	800b7f0 <tcp_enqueue_flags+0x100>
 800b7e2:	4b32      	ldr	r3, [pc, #200]	; (800b8ac <tcp_enqueue_flags+0x1bc>)
 800b7e4:	f240 4243 	movw	r2, #1091	; 0x443
 800b7e8:	4936      	ldr	r1, [pc, #216]	; (800b8c4 <tcp_enqueue_flags+0x1d4>)
 800b7ea:	4832      	ldr	r0, [pc, #200]	; (800b8b4 <tcp_enqueue_flags+0x1c4>)
 800b7ec:	f004 f988 	bl	800fb00 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d103      	bne.n	800b800 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	68fa      	ldr	r2, [r7, #12]
 800b7fc:	66da      	str	r2, [r3, #108]	; 0x6c
 800b7fe:	e00d      	b.n	800b81c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b804:	61bb      	str	r3, [r7, #24]
 800b806:	e002      	b.n	800b80e <tcp_enqueue_flags+0x11e>
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	61bb      	str	r3, [r7, #24]
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d1f8      	bne.n	800b808 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2200      	movs	r2, #0
 800b820:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b824:	78fb      	ldrb	r3, [r7, #3]
 800b826:	f003 0302 	and.w	r3, r3, #2
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d104      	bne.n	800b838 <tcp_enqueue_flags+0x148>
 800b82e:	78fb      	ldrb	r3, [r7, #3]
 800b830:	f003 0301 	and.w	r3, r3, #1
 800b834:	2b00      	cmp	r3, #0
 800b836:	d004      	beq.n	800b842 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b83c:	1c5a      	adds	r2, r3, #1
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b842:	78fb      	ldrb	r3, [r7, #3]
 800b844:	f003 0301 	and.w	r3, r3, #1
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d006      	beq.n	800b85a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	8b5b      	ldrh	r3, [r3, #26]
 800b850:	f043 0320 	orr.w	r3, r3, #32
 800b854:	b29a      	uxth	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	4618      	mov	r0, r3
 800b860:	f7fb fba6 	bl	8006fb0 <pbuf_clen>
 800b864:	4603      	mov	r3, r0
 800b866:	461a      	mov	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b86e:	4413      	add	r3, r2
 800b870:	b29a      	uxth	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00e      	beq.n	800b8a0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b886:	2b00      	cmp	r3, #0
 800b888:	d10a      	bne.n	800b8a0 <tcp_enqueue_flags+0x1b0>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d106      	bne.n	800b8a0 <tcp_enqueue_flags+0x1b0>
 800b892:	4b06      	ldr	r3, [pc, #24]	; (800b8ac <tcp_enqueue_flags+0x1bc>)
 800b894:	f240 4265 	movw	r2, #1125	; 0x465
 800b898:	490b      	ldr	r1, [pc, #44]	; (800b8c8 <tcp_enqueue_flags+0x1d8>)
 800b89a:	4806      	ldr	r0, [pc, #24]	; (800b8b4 <tcp_enqueue_flags+0x1c4>)
 800b89c:	f004 f930 	bl	800fb00 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b8a0:	2300      	movs	r3, #0
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3720      	adds	r7, #32
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	08012644 	.word	0x08012644
 800b8b0:	08012a68 	.word	0x08012a68
 800b8b4:	08012698 	.word	0x08012698
 800b8b8:	08012ac0 	.word	0x08012ac0
 800b8bc:	08012ae0 	.word	0x08012ae0
 800b8c0:	08012b1c 	.word	0x08012b1c
 800b8c4:	08012b34 	.word	0x08012b34
 800b8c8:	08012b60 	.word	0x08012b60

0800b8cc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b8cc:	b5b0      	push	{r4, r5, r7, lr}
 800b8ce:	b08a      	sub	sp, #40	; 0x28
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d106      	bne.n	800b8e8 <tcp_output+0x1c>
 800b8da:	4b8a      	ldr	r3, [pc, #552]	; (800bb04 <tcp_output+0x238>)
 800b8dc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b8e0:	4989      	ldr	r1, [pc, #548]	; (800bb08 <tcp_output+0x23c>)
 800b8e2:	488a      	ldr	r0, [pc, #552]	; (800bb0c <tcp_output+0x240>)
 800b8e4:	f004 f90c 	bl	800fb00 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	7d1b      	ldrb	r3, [r3, #20]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d106      	bne.n	800b8fe <tcp_output+0x32>
 800b8f0:	4b84      	ldr	r3, [pc, #528]	; (800bb04 <tcp_output+0x238>)
 800b8f2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800b8f6:	4986      	ldr	r1, [pc, #536]	; (800bb10 <tcp_output+0x244>)
 800b8f8:	4884      	ldr	r0, [pc, #528]	; (800bb0c <tcp_output+0x240>)
 800b8fa:	f004 f901 	bl	800fb00 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b8fe:	4b85      	ldr	r3, [pc, #532]	; (800bb14 <tcp_output+0x248>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	429a      	cmp	r2, r3
 800b906:	d101      	bne.n	800b90c <tcp_output+0x40>
    return ERR_OK;
 800b908:	2300      	movs	r3, #0
 800b90a:	e1ce      	b.n	800bcaa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b918:	4293      	cmp	r3, r2
 800b91a:	bf28      	it	cs
 800b91c:	4613      	movcs	r3, r2
 800b91e:	b29b      	uxth	r3, r3
 800b920:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b926:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d10b      	bne.n	800b946 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	8b5b      	ldrh	r3, [r3, #26]
 800b932:	f003 0302 	and.w	r3, r3, #2
 800b936:	2b00      	cmp	r3, #0
 800b938:	f000 81aa 	beq.w	800bc90 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 fdcb 	bl	800c4d8 <tcp_send_empty_ack>
 800b942:	4603      	mov	r3, r0
 800b944:	e1b1      	b.n	800bcaa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b946:	6879      	ldr	r1, [r7, #4]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	3304      	adds	r3, #4
 800b94c:	461a      	mov	r2, r3
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f7ff fc7c 	bl	800b24c <tcp_route>
 800b954:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d102      	bne.n	800b962 <tcp_output+0x96>
    return ERR_RTE;
 800b95c:	f06f 0303 	mvn.w	r3, #3
 800b960:	e1a3      	b.n	800bcaa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d003      	beq.n	800b970 <tcp_output+0xa4>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d111      	bne.n	800b994 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d002      	beq.n	800b97c <tcp_output+0xb0>
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	3304      	adds	r3, #4
 800b97a:	e000      	b.n	800b97e <tcp_output+0xb2>
 800b97c:	2300      	movs	r3, #0
 800b97e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d102      	bne.n	800b98c <tcp_output+0xc0>
      return ERR_RTE;
 800b986:	f06f 0303 	mvn.w	r3, #3
 800b98a:	e18e      	b.n	800bcaa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7f9 fe7f 	bl	800569e <lwip_htonl>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9aa:	8912      	ldrh	r2, [r2, #8]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	69ba      	ldr	r2, [r7, #24]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d227      	bcs.n	800ba04 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d114      	bne.n	800b9ec <tcp_output+0x120>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d110      	bne.n	800b9ec <tcp_output+0x120>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d10b      	bne.n	800b9ec <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2201      	movs	r2, #1
 800b9e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	8b5b      	ldrh	r3, [r3, #26]
 800b9f0:	f003 0302 	and.w	r3, r3, #2
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f000 814d 	beq.w	800bc94 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 fd6c 	bl	800c4d8 <tcp_send_empty_ack>
 800ba00:	4603      	mov	r3, r0
 800ba02:	e152      	b.n	800bcaa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2200      	movs	r2, #0
 800ba08:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba10:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ba12:	6a3b      	ldr	r3, [r7, #32]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f000 811c 	beq.w	800bc52 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ba1a:	e002      	b.n	800ba22 <tcp_output+0x156>
 800ba1c:	6a3b      	ldr	r3, [r7, #32]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	623b      	str	r3, [r7, #32]
 800ba22:	6a3b      	ldr	r3, [r7, #32]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1f8      	bne.n	800ba1c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ba2a:	e112      	b.n	800bc52 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	899b      	ldrh	r3, [r3, #12]
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7f9 fe1d 	bl	8005674 <lwip_htons>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	f003 0304 	and.w	r3, r3, #4
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d006      	beq.n	800ba54 <tcp_output+0x188>
 800ba46:	4b2f      	ldr	r3, [pc, #188]	; (800bb04 <tcp_output+0x238>)
 800ba48:	f240 5236 	movw	r2, #1334	; 0x536
 800ba4c:	4932      	ldr	r1, [pc, #200]	; (800bb18 <tcp_output+0x24c>)
 800ba4e:	482f      	ldr	r0, [pc, #188]	; (800bb0c <tcp_output+0x240>)
 800ba50:	f004 f856 	bl	800fb00 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d01f      	beq.n	800ba9c <tcp_output+0x1d0>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	8b5b      	ldrh	r3, [r3, #26]
 800ba60:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d119      	bne.n	800ba9c <tcp_output+0x1d0>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d00b      	beq.n	800ba88 <tcp_output+0x1bc>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d110      	bne.n	800ba9c <tcp_output+0x1d0>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba7e:	891a      	ldrh	r2, [r3, #8]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d209      	bcs.n	800ba9c <tcp_output+0x1d0>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d004      	beq.n	800ba9c <tcp_output+0x1d0>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ba98:	2b08      	cmp	r3, #8
 800ba9a:	d901      	bls.n	800baa0 <tcp_output+0x1d4>
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e000      	b.n	800baa2 <tcp_output+0x1d6>
 800baa0:	2300      	movs	r3, #0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d106      	bne.n	800bab4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	8b5b      	ldrh	r3, [r3, #26]
 800baaa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800baae:	2b00      	cmp	r3, #0
 800bab0:	f000 80e4 	beq.w	800bc7c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	7d1b      	ldrb	r3, [r3, #20]
 800bab8:	2b02      	cmp	r3, #2
 800baba:	d00d      	beq.n	800bad8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800babc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	899b      	ldrh	r3, [r3, #12]
 800bac2:	b29c      	uxth	r4, r3
 800bac4:	2010      	movs	r0, #16
 800bac6:	f7f9 fdd5 	bl	8005674 <lwip_htons>
 800baca:	4603      	mov	r3, r0
 800bacc:	461a      	mov	r2, r3
 800bace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	4322      	orrs	r2, r4
 800bad4:	b292      	uxth	r2, r2
 800bad6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800bad8:	697a      	ldr	r2, [r7, #20]
 800bada:	6879      	ldr	r1, [r7, #4]
 800badc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bade:	f000 f909 	bl	800bcf4 <tcp_output_segment>
 800bae2:	4603      	mov	r3, r0
 800bae4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800bae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d016      	beq.n	800bb1c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	8b5b      	ldrh	r3, [r3, #26]
 800baf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baf6:	b29a      	uxth	r2, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	835a      	strh	r2, [r3, #26]
      return err;
 800bafc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb00:	e0d3      	b.n	800bcaa <tcp_output+0x3de>
 800bb02:	bf00      	nop
 800bb04:	08012644 	.word	0x08012644
 800bb08:	08012b88 	.word	0x08012b88
 800bb0c:	08012698 	.word	0x08012698
 800bb10:	08012ba0 	.word	0x08012ba0
 800bb14:	24003234 	.word	0x24003234
 800bb18:	08012bc8 	.word	0x08012bc8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	7d1b      	ldrb	r3, [r3, #20]
 800bb28:	2b02      	cmp	r3, #2
 800bb2a:	d006      	beq.n	800bb3a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	8b5b      	ldrh	r3, [r3, #26]
 800bb30:	f023 0303 	bic.w	r3, r3, #3
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3c:	68db      	ldr	r3, [r3, #12]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7f9 fdac 	bl	800569e <lwip_htonl>
 800bb46:	4604      	mov	r4, r0
 800bb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4a:	891b      	ldrh	r3, [r3, #8]
 800bb4c:	461d      	mov	r5, r3
 800bb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	899b      	ldrh	r3, [r3, #12]
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7f9 fd8c 	bl	8005674 <lwip_htons>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	f003 0303 	and.w	r3, r3, #3
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d001      	beq.n	800bb6c <tcp_output+0x2a0>
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e000      	b.n	800bb6e <tcp_output+0x2a2>
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	442b      	add	r3, r5
 800bb70:	4423      	add	r3, r4
 800bb72:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	1ad3      	subs	r3, r2, r3
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	da02      	bge.n	800bb86 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800bb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb88:	891b      	ldrh	r3, [r3, #8]
 800bb8a:	461c      	mov	r4, r3
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	899b      	ldrh	r3, [r3, #12]
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7f9 fd6d 	bl	8005674 <lwip_htons>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	f003 0303 	and.w	r3, r3, #3
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d001      	beq.n	800bbaa <tcp_output+0x2de>
 800bba6:	2301      	movs	r3, #1
 800bba8:	e000      	b.n	800bbac <tcp_output+0x2e0>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	4423      	add	r3, r4
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d049      	beq.n	800bc46 <tcp_output+0x37a>
      seg->next = NULL;
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d105      	bne.n	800bbcc <tcp_output+0x300>
        pcb->unacked = seg;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbc4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc8:	623b      	str	r3, [r7, #32]
 800bbca:	e03f      	b.n	800bc4c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7f9 fd63 	bl	800569e <lwip_htonl>
 800bbd8:	4604      	mov	r4, r0
 800bbda:	6a3b      	ldr	r3, [r7, #32]
 800bbdc:	68db      	ldr	r3, [r3, #12]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7f9 fd5c 	bl	800569e <lwip_htonl>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	1ae3      	subs	r3, r4, r3
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	da24      	bge.n	800bc38 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	3370      	adds	r3, #112	; 0x70
 800bbf2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bbf4:	e002      	b.n	800bbfc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800bbf6:	69fb      	ldr	r3, [r7, #28]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bbfc:	69fb      	ldr	r3, [r7, #28]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d011      	beq.n	800bc28 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bc04:	69fb      	ldr	r3, [r7, #28]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7f9 fd46 	bl	800569e <lwip_htonl>
 800bc12:	4604      	mov	r4, r0
 800bc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7f9 fd3f 	bl	800569e <lwip_htonl>
 800bc20:	4603      	mov	r3, r0
 800bc22:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	dbe6      	blt.n	800bbf6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800bc28:	69fb      	ldr	r3, [r7, #28]
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc34:	601a      	str	r2, [r3, #0]
 800bc36:	e009      	b.n	800bc4c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800bc38:	6a3b      	ldr	r3, [r7, #32]
 800bc3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc3c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800bc3e:	6a3b      	ldr	r3, [r7, #32]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	623b      	str	r3, [r7, #32]
 800bc44:	e002      	b.n	800bc4c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800bc46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc48:	f7fc fc3f 	bl	80084ca <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc50:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800bc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d012      	beq.n	800bc7e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7f9 fd1d 	bl	800569e <lwip_htonl>
 800bc64:	4602      	mov	r2, r0
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc6a:	1ad3      	subs	r3, r2, r3
 800bc6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc6e:	8912      	ldrh	r2, [r2, #8]
 800bc70:	4413      	add	r3, r2
  while (seg != NULL &&
 800bc72:	69ba      	ldr	r2, [r7, #24]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	f4bf aed9 	bcs.w	800ba2c <tcp_output+0x160>
 800bc7a:	e000      	b.n	800bc7e <tcp_output+0x3b2>
      break;
 800bc7c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d108      	bne.n	800bc98 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800bc8e:	e004      	b.n	800bc9a <tcp_output+0x3ce>
    goto output_done;
 800bc90:	bf00      	nop
 800bc92:	e002      	b.n	800bc9a <tcp_output+0x3ce>
    goto output_done;
 800bc94:	bf00      	nop
 800bc96:	e000      	b.n	800bc9a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800bc98:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	8b5b      	ldrh	r3, [r3, #26]
 800bc9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bca2:	b29a      	uxth	r2, r3
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800bca8:	2300      	movs	r3, #0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3728      	adds	r7, #40	; 0x28
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bdb0      	pop	{r4, r5, r7, pc}
 800bcb2:	bf00      	nop

0800bcb4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d106      	bne.n	800bcd0 <tcp_output_segment_busy+0x1c>
 800bcc2:	4b09      	ldr	r3, [pc, #36]	; (800bce8 <tcp_output_segment_busy+0x34>)
 800bcc4:	f240 529a 	movw	r2, #1434	; 0x59a
 800bcc8:	4908      	ldr	r1, [pc, #32]	; (800bcec <tcp_output_segment_busy+0x38>)
 800bcca:	4809      	ldr	r0, [pc, #36]	; (800bcf0 <tcp_output_segment_busy+0x3c>)
 800bccc:	f003 ff18 	bl	800fb00 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	7b9b      	ldrb	r3, [r3, #14]
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d001      	beq.n	800bcde <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e000      	b.n	800bce0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3708      	adds	r7, #8
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	08012644 	.word	0x08012644
 800bcec:	08012be0 	.word	0x08012be0
 800bcf0:	08012698 	.word	0x08012698

0800bcf4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800bcf4:	b5b0      	push	{r4, r5, r7, lr}
 800bcf6:	b08c      	sub	sp, #48	; 0x30
 800bcf8:	af04      	add	r7, sp, #16
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d106      	bne.n	800bd14 <tcp_output_segment+0x20>
 800bd06:	4b63      	ldr	r3, [pc, #396]	; (800be94 <tcp_output_segment+0x1a0>)
 800bd08:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800bd0c:	4962      	ldr	r1, [pc, #392]	; (800be98 <tcp_output_segment+0x1a4>)
 800bd0e:	4863      	ldr	r0, [pc, #396]	; (800be9c <tcp_output_segment+0x1a8>)
 800bd10:	f003 fef6 	bl	800fb00 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d106      	bne.n	800bd28 <tcp_output_segment+0x34>
 800bd1a:	4b5e      	ldr	r3, [pc, #376]	; (800be94 <tcp_output_segment+0x1a0>)
 800bd1c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bd20:	495f      	ldr	r1, [pc, #380]	; (800bea0 <tcp_output_segment+0x1ac>)
 800bd22:	485e      	ldr	r0, [pc, #376]	; (800be9c <tcp_output_segment+0x1a8>)
 800bd24:	f003 feec 	bl	800fb00 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d106      	bne.n	800bd3c <tcp_output_segment+0x48>
 800bd2e:	4b59      	ldr	r3, [pc, #356]	; (800be94 <tcp_output_segment+0x1a0>)
 800bd30:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800bd34:	495b      	ldr	r1, [pc, #364]	; (800bea4 <tcp_output_segment+0x1b0>)
 800bd36:	4859      	ldr	r0, [pc, #356]	; (800be9c <tcp_output_segment+0x1a8>)
 800bd38:	f003 fee2 	bl	800fb00 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800bd3c:	68f8      	ldr	r0, [r7, #12]
 800bd3e:	f7ff ffb9 	bl	800bcb4 <tcp_output_segment_busy>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d001      	beq.n	800bd4c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	e09f      	b.n	800be8c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	68dc      	ldr	r4, [r3, #12]
 800bd54:	4610      	mov	r0, r2
 800bd56:	f7f9 fca2 	bl	800569e <lwip_htonl>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	68dc      	ldr	r4, [r3, #12]
 800bd66:	4610      	mov	r0, r2
 800bd68:	f7f9 fc84 	bl	8005674 <lwip_htons>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd74:	68ba      	ldr	r2, [r7, #8]
 800bd76:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bd78:	441a      	add	r2, r3
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	3314      	adds	r3, #20
 800bd84:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	7a9b      	ldrb	r3, [r3, #10]
 800bd8a:	f003 0301 	and.w	r3, r3, #1
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d015      	beq.n	800bdbe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	3304      	adds	r3, #4
 800bd96:	461a      	mov	r2, r3
 800bd98:	6879      	ldr	r1, [r7, #4]
 800bd9a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800bd9e:	f7fc fe8b 	bl	8008ab8 <tcp_eff_send_mss_netif>
 800bda2:	4603      	mov	r3, r0
 800bda4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bda6:	8b7b      	ldrh	r3, [r7, #26]
 800bda8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800bdac:	4618      	mov	r0, r3
 800bdae:	f7f9 fc76 	bl	800569e <lwip_htonl>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	3304      	adds	r3, #4
 800bdbc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	da02      	bge.n	800bdce <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d10c      	bne.n	800bdf0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bdd6:	4b34      	ldr	r3, [pc, #208]	; (800bea8 <tcp_output_segment+0x1b4>)
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7f9 fc5a 	bl	800569e <lwip_htonl>
 800bdea:	4602      	mov	r2, r0
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	68da      	ldr	r2, [r3, #12]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	1ad3      	subs	r3, r2, r3
 800bdfc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	8959      	ldrh	r1, [r3, #10]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	8b3a      	ldrh	r2, [r7, #24]
 800be0a:	1a8a      	subs	r2, r1, r2
 800be0c:	b292      	uxth	r2, r2
 800be0e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	8919      	ldrh	r1, [r3, #8]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	8b3a      	ldrh	r2, [r7, #24]
 800be1c:	1a8a      	subs	r2, r1, r2
 800be1e:	b292      	uxth	r2, r2
 800be20:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	68fa      	ldr	r2, [r7, #12]
 800be28:	68d2      	ldr	r2, [r2, #12]
 800be2a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	2200      	movs	r2, #0
 800be32:	741a      	strb	r2, [r3, #16]
 800be34:	2200      	movs	r2, #0
 800be36:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	f103 0214 	add.w	r2, r3, #20
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	7a9b      	ldrb	r3, [r3, #10]
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	f003 0304 	and.w	r3, r3, #4
 800be4a:	4413      	add	r3, r2
 800be4c:	69fa      	ldr	r2, [r7, #28]
 800be4e:	429a      	cmp	r2, r3
 800be50:	d006      	beq.n	800be60 <tcp_output_segment+0x16c>
 800be52:	4b10      	ldr	r3, [pc, #64]	; (800be94 <tcp_output_segment+0x1a0>)
 800be54:	f240 621c 	movw	r2, #1564	; 0x61c
 800be58:	4914      	ldr	r1, [pc, #80]	; (800beac <tcp_output_segment+0x1b8>)
 800be5a:	4810      	ldr	r0, [pc, #64]	; (800be9c <tcp_output_segment+0x1a8>)
 800be5c:	f003 fe50 	bl	800fb00 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6858      	ldr	r0, [r3, #4]
 800be64:	68b9      	ldr	r1, [r7, #8]
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	1d1c      	adds	r4, r3, #4
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	7add      	ldrb	r5, [r3, #11]
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	7a9b      	ldrb	r3, [r3, #10]
 800be72:	687a      	ldr	r2, [r7, #4]
 800be74:	9202      	str	r2, [sp, #8]
 800be76:	2206      	movs	r2, #6
 800be78:	9201      	str	r2, [sp, #4]
 800be7a:	9300      	str	r3, [sp, #0]
 800be7c:	462b      	mov	r3, r5
 800be7e:	4622      	mov	r2, r4
 800be80:	f002 fdac 	bl	800e9dc <ip4_output_if>
 800be84:	4603      	mov	r3, r0
 800be86:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800be88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3720      	adds	r7, #32
 800be90:	46bd      	mov	sp, r7
 800be92:	bdb0      	pop	{r4, r5, r7, pc}
 800be94:	08012644 	.word	0x08012644
 800be98:	08012c08 	.word	0x08012c08
 800be9c:	08012698 	.word	0x08012698
 800bea0:	08012c28 	.word	0x08012c28
 800bea4:	08012c48 	.word	0x08012c48
 800bea8:	240031e8 	.word	0x240031e8
 800beac:	08012c6c 	.word	0x08012c6c

0800beb0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800beb0:	b5b0      	push	{r4, r5, r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d106      	bne.n	800becc <tcp_rexmit_rto_prepare+0x1c>
 800bebe:	4b31      	ldr	r3, [pc, #196]	; (800bf84 <tcp_rexmit_rto_prepare+0xd4>)
 800bec0:	f240 6263 	movw	r2, #1635	; 0x663
 800bec4:	4930      	ldr	r1, [pc, #192]	; (800bf88 <tcp_rexmit_rto_prepare+0xd8>)
 800bec6:	4831      	ldr	r0, [pc, #196]	; (800bf8c <tcp_rexmit_rto_prepare+0xdc>)
 800bec8:	f003 fe1a 	bl	800fb00 <iprintf>

  if (pcb->unacked == NULL) {
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d102      	bne.n	800beda <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800bed4:	f06f 0305 	mvn.w	r3, #5
 800bed8:	e050      	b.n	800bf7c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bede:	60fb      	str	r3, [r7, #12]
 800bee0:	e00b      	b.n	800befa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800bee2:	68f8      	ldr	r0, [r7, #12]
 800bee4:	f7ff fee6 	bl	800bcb4 <tcp_output_segment_busy>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d002      	beq.n	800bef4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800beee:	f06f 0305 	mvn.w	r3, #5
 800bef2:	e043      	b.n	800bf7c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	60fb      	str	r3, [r7, #12]
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d1ef      	bne.n	800bee2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800bf02:	68f8      	ldr	r0, [r7, #12]
 800bf04:	f7ff fed6 	bl	800bcb4 <tcp_output_segment_busy>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d002      	beq.n	800bf14 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800bf0e:	f06f 0305 	mvn.w	r3, #5
 800bf12:	e033      	b.n	800bf7c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	8b5b      	ldrh	r3, [r3, #26]
 800bf2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bf32:	b29a      	uxth	r2, r3
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	68db      	ldr	r3, [r3, #12]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7f9 fbad 	bl	800569e <lwip_htonl>
 800bf44:	4604      	mov	r4, r0
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	891b      	ldrh	r3, [r3, #8]
 800bf4a:	461d      	mov	r5, r3
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	899b      	ldrh	r3, [r3, #12]
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7f9 fb8d 	bl	8005674 <lwip_htons>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	f003 0303 	and.w	r3, r3, #3
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d001      	beq.n	800bf6a <tcp_rexmit_rto_prepare+0xba>
 800bf66:	2301      	movs	r3, #1
 800bf68:	e000      	b.n	800bf6c <tcp_rexmit_rto_prepare+0xbc>
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	442b      	add	r3, r5
 800bf6e:	18e2      	adds	r2, r4, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2200      	movs	r2, #0
 800bf78:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800bf7a:	2300      	movs	r3, #0
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bdb0      	pop	{r4, r5, r7, pc}
 800bf84:	08012644 	.word	0x08012644
 800bf88:	08012c80 	.word	0x08012c80
 800bf8c:	08012698 	.word	0x08012698

0800bf90 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d106      	bne.n	800bfac <tcp_rexmit_rto_commit+0x1c>
 800bf9e:	4b0d      	ldr	r3, [pc, #52]	; (800bfd4 <tcp_rexmit_rto_commit+0x44>)
 800bfa0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bfa4:	490c      	ldr	r1, [pc, #48]	; (800bfd8 <tcp_rexmit_rto_commit+0x48>)
 800bfa6:	480d      	ldr	r0, [pc, #52]	; (800bfdc <tcp_rexmit_rto_commit+0x4c>)
 800bfa8:	f003 fdaa 	bl	800fb00 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bfb2:	2bff      	cmp	r3, #255	; 0xff
 800bfb4:	d007      	beq.n	800bfc6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	b2da      	uxtb	r2, r3
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f7ff fc80 	bl	800b8cc <tcp_output>
}
 800bfcc:	bf00      	nop
 800bfce:	3708      	adds	r7, #8
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	08012644 	.word	0x08012644
 800bfd8:	08012ca4 	.word	0x08012ca4
 800bfdc:	08012698 	.word	0x08012698

0800bfe0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d106      	bne.n	800bffc <tcp_rexmit_rto+0x1c>
 800bfee:	4b0a      	ldr	r3, [pc, #40]	; (800c018 <tcp_rexmit_rto+0x38>)
 800bff0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800bff4:	4909      	ldr	r1, [pc, #36]	; (800c01c <tcp_rexmit_rto+0x3c>)
 800bff6:	480a      	ldr	r0, [pc, #40]	; (800c020 <tcp_rexmit_rto+0x40>)
 800bff8:	f003 fd82 	bl	800fb00 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f7ff ff57 	bl	800beb0 <tcp_rexmit_rto_prepare>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d102      	bne.n	800c00e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f7ff ffc1 	bl	800bf90 <tcp_rexmit_rto_commit>
  }
}
 800c00e:	bf00      	nop
 800c010:	3708      	adds	r7, #8
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	08012644 	.word	0x08012644
 800c01c:	08012cc8 	.word	0x08012cc8
 800c020:	08012698 	.word	0x08012698

0800c024 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c024:	b590      	push	{r4, r7, lr}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d106      	bne.n	800c040 <tcp_rexmit+0x1c>
 800c032:	4b2f      	ldr	r3, [pc, #188]	; (800c0f0 <tcp_rexmit+0xcc>)
 800c034:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c038:	492e      	ldr	r1, [pc, #184]	; (800c0f4 <tcp_rexmit+0xd0>)
 800c03a:	482f      	ldr	r0, [pc, #188]	; (800c0f8 <tcp_rexmit+0xd4>)
 800c03c:	f003 fd60 	bl	800fb00 <iprintf>

  if (pcb->unacked == NULL) {
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c044:	2b00      	cmp	r3, #0
 800c046:	d102      	bne.n	800c04e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c048:	f06f 0305 	mvn.w	r3, #5
 800c04c:	e04c      	b.n	800c0e8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c052:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c054:	68b8      	ldr	r0, [r7, #8]
 800c056:	f7ff fe2d 	bl	800bcb4 <tcp_output_segment_busy>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d002      	beq.n	800c066 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c060:	f06f 0305 	mvn.w	r3, #5
 800c064:	e040      	b.n	800c0e8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	336c      	adds	r3, #108	; 0x6c
 800c072:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c074:	e002      	b.n	800c07c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d011      	beq.n	800c0a8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7f9 fb06 	bl	800569e <lwip_htonl>
 800c092:	4604      	mov	r4, r0
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7f9 faff 	bl	800569e <lwip_htonl>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	dbe6      	blt.n	800c076 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	68ba      	ldr	r2, [r7, #8]
 800c0b4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d103      	bne.n	800c0c6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c0cc:	2bff      	cmp	r3, #255	; 0xff
 800c0ce:	d007      	beq.n	800c0e0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	b2da      	uxtb	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c0e6:	2300      	movs	r3, #0
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3714      	adds	r7, #20
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd90      	pop	{r4, r7, pc}
 800c0f0:	08012644 	.word	0x08012644
 800c0f4:	08012ce4 	.word	0x08012ce4
 800c0f8:	08012698 	.word	0x08012698

0800c0fc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d106      	bne.n	800c118 <tcp_rexmit_fast+0x1c>
 800c10a:	4b2a      	ldr	r3, [pc, #168]	; (800c1b4 <tcp_rexmit_fast+0xb8>)
 800c10c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c110:	4929      	ldr	r1, [pc, #164]	; (800c1b8 <tcp_rexmit_fast+0xbc>)
 800c112:	482a      	ldr	r0, [pc, #168]	; (800c1bc <tcp_rexmit_fast+0xc0>)
 800c114:	f003 fcf4 	bl	800fb00 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d045      	beq.n	800c1ac <tcp_rexmit_fast+0xb0>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	8b5b      	ldrh	r3, [r3, #26]
 800c124:	f003 0304 	and.w	r3, r3, #4
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d13f      	bne.n	800c1ac <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f7ff ff79 	bl	800c024 <tcp_rexmit>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d139      	bne.n	800c1ac <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c144:	4293      	cmp	r3, r2
 800c146:	bf28      	it	cs
 800c148:	4613      	movcs	r3, r2
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	da00      	bge.n	800c152 <tcp_rexmit_fast+0x56>
 800c150:	3301      	adds	r3, #1
 800c152:	105b      	asrs	r3, r3, #1
 800c154:	b29a      	uxth	r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c162:	461a      	mov	r2, r3
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c168:	005b      	lsls	r3, r3, #1
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d206      	bcs.n	800c17c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c172:	005b      	lsls	r3, r3, #1
 800c174:	b29a      	uxth	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c186:	4619      	mov	r1, r3
 800c188:	0049      	lsls	r1, r1, #1
 800c18a:	440b      	add	r3, r1
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	4413      	add	r3, r2
 800c190:	b29a      	uxth	r2, r3
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	8b5b      	ldrh	r3, [r3, #26]
 800c19c:	f043 0304 	orr.w	r3, r3, #4
 800c1a0:	b29a      	uxth	r2, r3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c1ac:	bf00      	nop
 800c1ae:	3708      	adds	r7, #8
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	08012644 	.word	0x08012644
 800c1b8:	08012cfc 	.word	0x08012cfc
 800c1bc:	08012698 	.word	0x08012698

0800c1c0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	607b      	str	r3, [r7, #4]
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	817b      	strh	r3, [r7, #10]
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c1d2:	897a      	ldrh	r2, [r7, #10]
 800c1d4:	893b      	ldrh	r3, [r7, #8]
 800c1d6:	4413      	add	r3, r2
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	3314      	adds	r3, #20
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	2022      	movs	r0, #34	; 0x22
 800c1e6:	f7fa fb77 	bl	80068d8 <pbuf_alloc>
 800c1ea:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d04d      	beq.n	800c28e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c1f2:	897b      	ldrh	r3, [r7, #10]
 800c1f4:	3313      	adds	r3, #19
 800c1f6:	697a      	ldr	r2, [r7, #20]
 800c1f8:	8952      	ldrh	r2, [r2, #10]
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	db06      	blt.n	800c20c <tcp_output_alloc_header_common+0x4c>
 800c1fe:	4b26      	ldr	r3, [pc, #152]	; (800c298 <tcp_output_alloc_header_common+0xd8>)
 800c200:	f240 7223 	movw	r2, #1827	; 0x723
 800c204:	4925      	ldr	r1, [pc, #148]	; (800c29c <tcp_output_alloc_header_common+0xdc>)
 800c206:	4826      	ldr	r0, [pc, #152]	; (800c2a0 <tcp_output_alloc_header_common+0xe0>)
 800c208:	f003 fc7a 	bl	800fb00 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c212:	8c3b      	ldrh	r3, [r7, #32]
 800c214:	4618      	mov	r0, r3
 800c216:	f7f9 fa2d 	bl	8005674 <lwip_htons>
 800c21a:	4603      	mov	r3, r0
 800c21c:	461a      	mov	r2, r3
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c222:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c224:	4618      	mov	r0, r3
 800c226:	f7f9 fa25 	bl	8005674 <lwip_htons>
 800c22a:	4603      	mov	r3, r0
 800c22c:	461a      	mov	r2, r3
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f7f9 fa30 	bl	800569e <lwip_htonl>
 800c23e:	4602      	mov	r2, r0
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c244:	897b      	ldrh	r3, [r7, #10]
 800c246:	089b      	lsrs	r3, r3, #2
 800c248:	b29b      	uxth	r3, r3
 800c24a:	3305      	adds	r3, #5
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	031b      	lsls	r3, r3, #12
 800c250:	b29a      	uxth	r2, r3
 800c252:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c256:	b29b      	uxth	r3, r3
 800c258:	4313      	orrs	r3, r2
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7f9 fa09 	bl	8005674 <lwip_htons>
 800c262:	4603      	mov	r3, r0
 800c264:	461a      	mov	r2, r3
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c26a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7f9 fa01 	bl	8005674 <lwip_htons>
 800c272:	4603      	mov	r3, r0
 800c274:	461a      	mov	r2, r3
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	2200      	movs	r2, #0
 800c27e:	741a      	strb	r2, [r3, #16]
 800c280:	2200      	movs	r2, #0
 800c282:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	2200      	movs	r2, #0
 800c288:	749a      	strb	r2, [r3, #18]
 800c28a:	2200      	movs	r2, #0
 800c28c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c28e:	697b      	ldr	r3, [r7, #20]
}
 800c290:	4618      	mov	r0, r3
 800c292:	3718      	adds	r7, #24
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	08012644 	.word	0x08012644
 800c29c:	08012d1c 	.word	0x08012d1c
 800c2a0:	08012698 	.word	0x08012698

0800c2a4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c2a4:	b5b0      	push	{r4, r5, r7, lr}
 800c2a6:	b08a      	sub	sp, #40	; 0x28
 800c2a8:	af04      	add	r7, sp, #16
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	607b      	str	r3, [r7, #4]
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	817b      	strh	r3, [r7, #10]
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d106      	bne.n	800c2ca <tcp_output_alloc_header+0x26>
 800c2bc:	4b15      	ldr	r3, [pc, #84]	; (800c314 <tcp_output_alloc_header+0x70>)
 800c2be:	f240 7242 	movw	r2, #1858	; 0x742
 800c2c2:	4915      	ldr	r1, [pc, #84]	; (800c318 <tcp_output_alloc_header+0x74>)
 800c2c4:	4815      	ldr	r0, [pc, #84]	; (800c31c <tcp_output_alloc_header+0x78>)
 800c2c6:	f003 fc1b 	bl	800fb00 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	8adb      	ldrh	r3, [r3, #22]
 800c2d2:	68fa      	ldr	r2, [r7, #12]
 800c2d4:	8b12      	ldrh	r2, [r2, #24]
 800c2d6:	68f9      	ldr	r1, [r7, #12]
 800c2d8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c2da:	893d      	ldrh	r5, [r7, #8]
 800c2dc:	897c      	ldrh	r4, [r7, #10]
 800c2de:	9103      	str	r1, [sp, #12]
 800c2e0:	2110      	movs	r1, #16
 800c2e2:	9102      	str	r1, [sp, #8]
 800c2e4:	9201      	str	r2, [sp, #4]
 800c2e6:	9300      	str	r3, [sp, #0]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	462a      	mov	r2, r5
 800c2ec:	4621      	mov	r1, r4
 800c2ee:	f7ff ff67 	bl	800c1c0 <tcp_output_alloc_header_common>
 800c2f2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d006      	beq.n	800c308 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2fe:	68fa      	ldr	r2, [r7, #12]
 800c300:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c302:	441a      	add	r2, r3
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c308:	697b      	ldr	r3, [r7, #20]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3718      	adds	r7, #24
 800c30e:	46bd      	mov	sp, r7
 800c310:	bdb0      	pop	{r4, r5, r7, pc}
 800c312:	bf00      	nop
 800c314:	08012644 	.word	0x08012644
 800c318:	08012d4c 	.word	0x08012d4c
 800c31c:	08012698 	.word	0x08012698

0800c320 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b088      	sub	sp, #32
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	4611      	mov	r1, r2
 800c32c:	461a      	mov	r2, r3
 800c32e:	460b      	mov	r3, r1
 800c330:	71fb      	strb	r3, [r7, #7]
 800c332:	4613      	mov	r3, r2
 800c334:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c336:	2300      	movs	r3, #0
 800c338:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d106      	bne.n	800c34e <tcp_output_fill_options+0x2e>
 800c340:	4b13      	ldr	r3, [pc, #76]	; (800c390 <tcp_output_fill_options+0x70>)
 800c342:	f240 7256 	movw	r2, #1878	; 0x756
 800c346:	4913      	ldr	r1, [pc, #76]	; (800c394 <tcp_output_fill_options+0x74>)
 800c348:	4813      	ldr	r0, [pc, #76]	; (800c398 <tcp_output_fill_options+0x78>)
 800c34a:	f003 fbd9 	bl	800fb00 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c354:	69bb      	ldr	r3, [r7, #24]
 800c356:	3314      	adds	r3, #20
 800c358:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	f103 0214 	add.w	r2, r3, #20
 800c360:	8bfb      	ldrh	r3, [r7, #30]
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	4619      	mov	r1, r3
 800c366:	79fb      	ldrb	r3, [r7, #7]
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	f003 0304 	and.w	r3, r3, #4
 800c36e:	440b      	add	r3, r1
 800c370:	4413      	add	r3, r2
 800c372:	697a      	ldr	r2, [r7, #20]
 800c374:	429a      	cmp	r2, r3
 800c376:	d006      	beq.n	800c386 <tcp_output_fill_options+0x66>
 800c378:	4b05      	ldr	r3, [pc, #20]	; (800c390 <tcp_output_fill_options+0x70>)
 800c37a:	f240 7275 	movw	r2, #1909	; 0x775
 800c37e:	4907      	ldr	r1, [pc, #28]	; (800c39c <tcp_output_fill_options+0x7c>)
 800c380:	4805      	ldr	r0, [pc, #20]	; (800c398 <tcp_output_fill_options+0x78>)
 800c382:	f003 fbbd 	bl	800fb00 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c386:	bf00      	nop
 800c388:	3720      	adds	r7, #32
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	08012644 	.word	0x08012644
 800c394:	08012d74 	.word	0x08012d74
 800c398:	08012698 	.word	0x08012698
 800c39c:	08012c6c 	.word	0x08012c6c

0800c3a0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b08a      	sub	sp, #40	; 0x28
 800c3a4:	af04      	add	r7, sp, #16
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	607a      	str	r2, [r7, #4]
 800c3ac:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d106      	bne.n	800c3c2 <tcp_output_control_segment+0x22>
 800c3b4:	4b1c      	ldr	r3, [pc, #112]	; (800c428 <tcp_output_control_segment+0x88>)
 800c3b6:	f240 7287 	movw	r2, #1927	; 0x787
 800c3ba:	491c      	ldr	r1, [pc, #112]	; (800c42c <tcp_output_control_segment+0x8c>)
 800c3bc:	481c      	ldr	r0, [pc, #112]	; (800c430 <tcp_output_control_segment+0x90>)
 800c3be:	f003 fb9f 	bl	800fb00 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c3c2:	683a      	ldr	r2, [r7, #0]
 800c3c4:	6879      	ldr	r1, [r7, #4]
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f7fe ff40 	bl	800b24c <tcp_route>
 800c3cc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d102      	bne.n	800c3da <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c3d4:	23fc      	movs	r3, #252	; 0xfc
 800c3d6:	75fb      	strb	r3, [r7, #23]
 800c3d8:	e01c      	b.n	800c414 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d006      	beq.n	800c3ee <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	7adb      	ldrb	r3, [r3, #11]
 800c3e4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	7a9b      	ldrb	r3, [r3, #10]
 800c3ea:	757b      	strb	r3, [r7, #21]
 800c3ec:	e003      	b.n	800c3f6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c3ee:	23ff      	movs	r3, #255	; 0xff
 800c3f0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c3f6:	7dba      	ldrb	r2, [r7, #22]
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	9302      	str	r3, [sp, #8]
 800c3fc:	2306      	movs	r3, #6
 800c3fe:	9301      	str	r3, [sp, #4]
 800c400:	7d7b      	ldrb	r3, [r7, #21]
 800c402:	9300      	str	r3, [sp, #0]
 800c404:	4613      	mov	r3, r2
 800c406:	683a      	ldr	r2, [r7, #0]
 800c408:	6879      	ldr	r1, [r7, #4]
 800c40a:	68b8      	ldr	r0, [r7, #8]
 800c40c:	f002 fae6 	bl	800e9dc <ip4_output_if>
 800c410:	4603      	mov	r3, r0
 800c412:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c414:	68b8      	ldr	r0, [r7, #8]
 800c416:	f7fa fd43 	bl	8006ea0 <pbuf_free>
  return err;
 800c41a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3718      	adds	r7, #24
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	08012644 	.word	0x08012644
 800c42c:	08012d9c 	.word	0x08012d9c
 800c430:	08012698 	.word	0x08012698

0800c434 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c434:	b590      	push	{r4, r7, lr}
 800c436:	b08b      	sub	sp, #44	; 0x2c
 800c438:	af04      	add	r7, sp, #16
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	607a      	str	r2, [r7, #4]
 800c440:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d106      	bne.n	800c456 <tcp_rst+0x22>
 800c448:	4b1f      	ldr	r3, [pc, #124]	; (800c4c8 <tcp_rst+0x94>)
 800c44a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c44e:	491f      	ldr	r1, [pc, #124]	; (800c4cc <tcp_rst+0x98>)
 800c450:	481f      	ldr	r0, [pc, #124]	; (800c4d0 <tcp_rst+0x9c>)
 800c452:	f003 fb55 	bl	800fb00 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d106      	bne.n	800c46a <tcp_rst+0x36>
 800c45c:	4b1a      	ldr	r3, [pc, #104]	; (800c4c8 <tcp_rst+0x94>)
 800c45e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c462:	491c      	ldr	r1, [pc, #112]	; (800c4d4 <tcp_rst+0xa0>)
 800c464:	481a      	ldr	r0, [pc, #104]	; (800c4d0 <tcp_rst+0x9c>)
 800c466:	f003 fb4b 	bl	800fb00 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c46a:	2300      	movs	r3, #0
 800c46c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c46e:	f246 0308 	movw	r3, #24584	; 0x6008
 800c472:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c474:	7dfb      	ldrb	r3, [r7, #23]
 800c476:	b29c      	uxth	r4, r3
 800c478:	68b8      	ldr	r0, [r7, #8]
 800c47a:	f7f9 f910 	bl	800569e <lwip_htonl>
 800c47e:	4602      	mov	r2, r0
 800c480:	8abb      	ldrh	r3, [r7, #20]
 800c482:	9303      	str	r3, [sp, #12]
 800c484:	2314      	movs	r3, #20
 800c486:	9302      	str	r3, [sp, #8]
 800c488:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c48a:	9301      	str	r3, [sp, #4]
 800c48c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c48e:	9300      	str	r3, [sp, #0]
 800c490:	4613      	mov	r3, r2
 800c492:	2200      	movs	r2, #0
 800c494:	4621      	mov	r1, r4
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f7ff fe92 	bl	800c1c0 <tcp_output_alloc_header_common>
 800c49c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00c      	beq.n	800c4be <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c4a4:	7dfb      	ldrb	r3, [r7, #23]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	6939      	ldr	r1, [r7, #16]
 800c4aa:	68f8      	ldr	r0, [r7, #12]
 800c4ac:	f7ff ff38 	bl	800c320 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b2:	683a      	ldr	r2, [r7, #0]
 800c4b4:	6939      	ldr	r1, [r7, #16]
 800c4b6:	68f8      	ldr	r0, [r7, #12]
 800c4b8:	f7ff ff72 	bl	800c3a0 <tcp_output_control_segment>
 800c4bc:	e000      	b.n	800c4c0 <tcp_rst+0x8c>
    return;
 800c4be:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c4c0:	371c      	adds	r7, #28
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd90      	pop	{r4, r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	08012644 	.word	0x08012644
 800c4cc:	08012dc8 	.word	0x08012dc8
 800c4d0:	08012698 	.word	0x08012698
 800c4d4:	08012de4 	.word	0x08012de4

0800c4d8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c4d8:	b590      	push	{r4, r7, lr}
 800c4da:	b087      	sub	sp, #28
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d106      	bne.n	800c4fc <tcp_send_empty_ack+0x24>
 800c4ee:	4b28      	ldr	r3, [pc, #160]	; (800c590 <tcp_send_empty_ack+0xb8>)
 800c4f0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c4f4:	4927      	ldr	r1, [pc, #156]	; (800c594 <tcp_send_empty_ack+0xbc>)
 800c4f6:	4828      	ldr	r0, [pc, #160]	; (800c598 <tcp_send_empty_ack+0xc0>)
 800c4f8:	f003 fb02 	bl	800fb00 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c4fc:	7dfb      	ldrb	r3, [r7, #23]
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	b2db      	uxtb	r3, r3
 800c502:	f003 0304 	and.w	r3, r3, #4
 800c506:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c508:	7d7b      	ldrb	r3, [r7, #21]
 800c50a:	b29c      	uxth	r4, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c510:	4618      	mov	r0, r3
 800c512:	f7f9 f8c4 	bl	800569e <lwip_htonl>
 800c516:	4603      	mov	r3, r0
 800c518:	2200      	movs	r2, #0
 800c51a:	4621      	mov	r1, r4
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f7ff fec1 	bl	800c2a4 <tcp_output_alloc_header>
 800c522:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d109      	bne.n	800c53e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	8b5b      	ldrh	r3, [r3, #26]
 800c52e:	f043 0303 	orr.w	r3, r3, #3
 800c532:	b29a      	uxth	r2, r3
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c538:	f06f 0301 	mvn.w	r3, #1
 800c53c:	e023      	b.n	800c586 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c53e:	7dbb      	ldrb	r3, [r7, #22]
 800c540:	7dfa      	ldrb	r2, [r7, #23]
 800c542:	6939      	ldr	r1, [r7, #16]
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f7ff feeb 	bl	800c320 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	3304      	adds	r3, #4
 800c550:	6939      	ldr	r1, [r7, #16]
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f7ff ff24 	bl	800c3a0 <tcp_output_control_segment>
 800c558:	4603      	mov	r3, r0
 800c55a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c55c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d007      	beq.n	800c574 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	8b5b      	ldrh	r3, [r3, #26]
 800c568:	f043 0303 	orr.w	r3, r3, #3
 800c56c:	b29a      	uxth	r2, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	835a      	strh	r2, [r3, #26]
 800c572:	e006      	b.n	800c582 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	8b5b      	ldrh	r3, [r3, #26]
 800c578:	f023 0303 	bic.w	r3, r3, #3
 800c57c:	b29a      	uxth	r2, r3
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c582:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c586:	4618      	mov	r0, r3
 800c588:	371c      	adds	r7, #28
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd90      	pop	{r4, r7, pc}
 800c58e:	bf00      	nop
 800c590:	08012644 	.word	0x08012644
 800c594:	08012e00 	.word	0x08012e00
 800c598:	08012698 	.word	0x08012698

0800c59c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c59c:	b590      	push	{r4, r7, lr}
 800c59e:	b087      	sub	sp, #28
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d106      	bne.n	800c5bc <tcp_keepalive+0x20>
 800c5ae:	4b18      	ldr	r3, [pc, #96]	; (800c610 <tcp_keepalive+0x74>)
 800c5b0:	f640 0224 	movw	r2, #2084	; 0x824
 800c5b4:	4917      	ldr	r1, [pc, #92]	; (800c614 <tcp_keepalive+0x78>)
 800c5b6:	4818      	ldr	r0, [pc, #96]	; (800c618 <tcp_keepalive+0x7c>)
 800c5b8:	f003 faa2 	bl	800fb00 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c5bc:	7dfb      	ldrb	r3, [r7, #23]
 800c5be:	b29c      	uxth	r4, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5c4:	3b01      	subs	r3, #1
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7f9 f869 	bl	800569e <lwip_htonl>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	4621      	mov	r1, r4
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f7ff fe66 	bl	800c2a4 <tcp_output_alloc_header>
 800c5d8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d102      	bne.n	800c5e6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c5e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c5e4:	e010      	b.n	800c608 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c5e6:	7dfb      	ldrb	r3, [r7, #23]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	6939      	ldr	r1, [r7, #16]
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7ff fe97 	bl	800c320 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	3304      	adds	r3, #4
 800c5f8:	6939      	ldr	r1, [r7, #16]
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f7ff fed0 	bl	800c3a0 <tcp_output_control_segment>
 800c600:	4603      	mov	r3, r0
 800c602:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c604:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	371c      	adds	r7, #28
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd90      	pop	{r4, r7, pc}
 800c610:	08012644 	.word	0x08012644
 800c614:	08012e20 	.word	0x08012e20
 800c618:	08012698 	.word	0x08012698

0800c61c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c61c:	b590      	push	{r4, r7, lr}
 800c61e:	b08b      	sub	sp, #44	; 0x2c
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c624:	2300      	movs	r3, #0
 800c626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d106      	bne.n	800c63e <tcp_zero_window_probe+0x22>
 800c630:	4b4c      	ldr	r3, [pc, #304]	; (800c764 <tcp_zero_window_probe+0x148>)
 800c632:	f640 024f 	movw	r2, #2127	; 0x84f
 800c636:	494c      	ldr	r1, [pc, #304]	; (800c768 <tcp_zero_window_probe+0x14c>)
 800c638:	484c      	ldr	r0, [pc, #304]	; (800c76c <tcp_zero_window_probe+0x150>)
 800c63a:	f003 fa61 	bl	800fb00 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c642:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c644:	6a3b      	ldr	r3, [r7, #32]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d101      	bne.n	800c64e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c64a:	2300      	movs	r3, #0
 800c64c:	e086      	b.n	800c75c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c654:	2bff      	cmp	r3, #255	; 0xff
 800c656:	d007      	beq.n	800c668 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c65e:	3301      	adds	r3, #1
 800c660:	b2da      	uxtb	r2, r3
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c668:	6a3b      	ldr	r3, [r7, #32]
 800c66a:	68db      	ldr	r3, [r3, #12]
 800c66c:	899b      	ldrh	r3, [r3, #12]
 800c66e:	b29b      	uxth	r3, r3
 800c670:	4618      	mov	r0, r3
 800c672:	f7f8 ffff 	bl	8005674 <lwip_htons>
 800c676:	4603      	mov	r3, r0
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	f003 0301 	and.w	r3, r3, #1
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d005      	beq.n	800c68e <tcp_zero_window_probe+0x72>
 800c682:	6a3b      	ldr	r3, [r7, #32]
 800c684:	891b      	ldrh	r3, [r3, #8]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d101      	bne.n	800c68e <tcp_zero_window_probe+0x72>
 800c68a:	2301      	movs	r3, #1
 800c68c:	e000      	b.n	800c690 <tcp_zero_window_probe+0x74>
 800c68e:	2300      	movs	r3, #0
 800c690:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c692:	7ffb      	ldrb	r3, [r7, #31]
 800c694:	2b00      	cmp	r3, #0
 800c696:	bf0c      	ite	eq
 800c698:	2301      	moveq	r3, #1
 800c69a:	2300      	movne	r3, #0
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c6a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6a4:	b299      	uxth	r1, r3
 800c6a6:	6a3b      	ldr	r3, [r7, #32]
 800c6a8:	68db      	ldr	r3, [r3, #12]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	8bba      	ldrh	r2, [r7, #28]
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f7ff fdf8 	bl	800c2a4 <tcp_output_alloc_header>
 800c6b4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d102      	bne.n	800c6c2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c6bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c6c0:	e04c      	b.n	800c75c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c6c2:	69bb      	ldr	r3, [r7, #24]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c6c8:	7ffb      	ldrb	r3, [r7, #31]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d011      	beq.n	800c6f2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	899b      	ldrh	r3, [r3, #12]
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	b21b      	sxth	r3, r3
 800c6d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c6da:	b21c      	sxth	r4, r3
 800c6dc:	2011      	movs	r0, #17
 800c6de:	f7f8 ffc9 	bl	8005674 <lwip_htons>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	b21b      	sxth	r3, r3
 800c6e6:	4323      	orrs	r3, r4
 800c6e8:	b21b      	sxth	r3, r3
 800c6ea:	b29a      	uxth	r2, r3
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	819a      	strh	r2, [r3, #12]
 800c6f0:	e010      	b.n	800c714 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	3314      	adds	r3, #20
 800c6f8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c6fa:	6a3b      	ldr	r3, [r7, #32]
 800c6fc:	6858      	ldr	r0, [r3, #4]
 800c6fe:	6a3b      	ldr	r3, [r7, #32]
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	891a      	ldrh	r2, [r3, #8]
 800c704:	6a3b      	ldr	r3, [r7, #32]
 800c706:	891b      	ldrh	r3, [r3, #8]
 800c708:	1ad3      	subs	r3, r2, r3
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	2201      	movs	r2, #1
 800c70e:	6939      	ldr	r1, [r7, #16]
 800c710:	f7fa fdc0 	bl	8007294 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c714:	6a3b      	ldr	r3, [r7, #32]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7f8 ffbf 	bl	800569e <lwip_htonl>
 800c720:	4603      	mov	r3, r0
 800c722:	3301      	adds	r3, #1
 800c724:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	1ad3      	subs	r3, r2, r3
 800c72e:	2b00      	cmp	r3, #0
 800c730:	da02      	bge.n	800c738 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	68fa      	ldr	r2, [r7, #12]
 800c736:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c73c:	2200      	movs	r2, #0
 800c73e:	69b9      	ldr	r1, [r7, #24]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f7ff fded 	bl	800c320 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	3304      	adds	r3, #4
 800c74c:	69b9      	ldr	r1, [r7, #24]
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f7ff fe26 	bl	800c3a0 <tcp_output_control_segment>
 800c754:	4603      	mov	r3, r0
 800c756:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c758:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	372c      	adds	r7, #44	; 0x2c
 800c760:	46bd      	mov	sp, r7
 800c762:	bd90      	pop	{r4, r7, pc}
 800c764:	08012644 	.word	0x08012644
 800c768:	08012e3c 	.word	0x08012e3c
 800c76c:	08012698 	.word	0x08012698

0800c770 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c778:	f7fa ff0c 	bl	8007594 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c77c:	4b0a      	ldr	r3, [pc, #40]	; (800c7a8 <tcpip_tcp_timer+0x38>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d103      	bne.n	800c78c <tcpip_tcp_timer+0x1c>
 800c784:	4b09      	ldr	r3, [pc, #36]	; (800c7ac <tcpip_tcp_timer+0x3c>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d005      	beq.n	800c798 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c78c:	2200      	movs	r2, #0
 800c78e:	4908      	ldr	r1, [pc, #32]	; (800c7b0 <tcpip_tcp_timer+0x40>)
 800c790:	20fa      	movs	r0, #250	; 0xfa
 800c792:	f000 f8f3 	bl	800c97c <sys_timeout>
 800c796:	e003      	b.n	800c7a0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c798:	4b06      	ldr	r3, [pc, #24]	; (800c7b4 <tcpip_tcp_timer+0x44>)
 800c79a:	2200      	movs	r2, #0
 800c79c:	601a      	str	r2, [r3, #0]
  }
}
 800c79e:	bf00      	nop
 800c7a0:	bf00      	nop
 800c7a2:	3708      	adds	r7, #8
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	240031f4 	.word	0x240031f4
 800c7ac:	240031f8 	.word	0x240031f8
 800c7b0:	0800c771 	.word	0x0800c771
 800c7b4:	24003240 	.word	0x24003240

0800c7b8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c7bc:	4b0a      	ldr	r3, [pc, #40]	; (800c7e8 <tcp_timer_needed+0x30>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d10f      	bne.n	800c7e4 <tcp_timer_needed+0x2c>
 800c7c4:	4b09      	ldr	r3, [pc, #36]	; (800c7ec <tcp_timer_needed+0x34>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d103      	bne.n	800c7d4 <tcp_timer_needed+0x1c>
 800c7cc:	4b08      	ldr	r3, [pc, #32]	; (800c7f0 <tcp_timer_needed+0x38>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d007      	beq.n	800c7e4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c7d4:	4b04      	ldr	r3, [pc, #16]	; (800c7e8 <tcp_timer_needed+0x30>)
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c7da:	2200      	movs	r2, #0
 800c7dc:	4905      	ldr	r1, [pc, #20]	; (800c7f4 <tcp_timer_needed+0x3c>)
 800c7de:	20fa      	movs	r0, #250	; 0xfa
 800c7e0:	f000 f8cc 	bl	800c97c <sys_timeout>
  }
}
 800c7e4:	bf00      	nop
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	24003240 	.word	0x24003240
 800c7ec:	240031f4 	.word	0x240031f4
 800c7f0:	240031f8 	.word	0x240031f8
 800c7f4:	0800c771 	.word	0x0800c771

0800c7f8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b086      	sub	sp, #24
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c804:	2006      	movs	r0, #6
 800c806:	f7f9 fc65 	bl	80060d4 <memp_malloc>
 800c80a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d109      	bne.n	800c826 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d151      	bne.n	800c8bc <sys_timeout_abs+0xc4>
 800c818:	4b2a      	ldr	r3, [pc, #168]	; (800c8c4 <sys_timeout_abs+0xcc>)
 800c81a:	22be      	movs	r2, #190	; 0xbe
 800c81c:	492a      	ldr	r1, [pc, #168]	; (800c8c8 <sys_timeout_abs+0xd0>)
 800c81e:	482b      	ldr	r0, [pc, #172]	; (800c8cc <sys_timeout_abs+0xd4>)
 800c820:	f003 f96e 	bl	800fb00 <iprintf>
    return;
 800c824:	e04a      	b.n	800c8bc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	2200      	movs	r2, #0
 800c82a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	68ba      	ldr	r2, [r7, #8]
 800c830:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	68fa      	ldr	r2, [r7, #12]
 800c83c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c83e:	4b24      	ldr	r3, [pc, #144]	; (800c8d0 <sys_timeout_abs+0xd8>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d103      	bne.n	800c84e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c846:	4a22      	ldr	r2, [pc, #136]	; (800c8d0 <sys_timeout_abs+0xd8>)
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	6013      	str	r3, [r2, #0]
    return;
 800c84c:	e037      	b.n	800c8be <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	685a      	ldr	r2, [r3, #4]
 800c852:	4b1f      	ldr	r3, [pc, #124]	; (800c8d0 <sys_timeout_abs+0xd8>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	1ad3      	subs	r3, r2, r3
 800c85a:	0fdb      	lsrs	r3, r3, #31
 800c85c:	f003 0301 	and.w	r3, r3, #1
 800c860:	b2db      	uxtb	r3, r3
 800c862:	2b00      	cmp	r3, #0
 800c864:	d007      	beq.n	800c876 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c866:	4b1a      	ldr	r3, [pc, #104]	; (800c8d0 <sys_timeout_abs+0xd8>)
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c86e:	4a18      	ldr	r2, [pc, #96]	; (800c8d0 <sys_timeout_abs+0xd8>)
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	6013      	str	r3, [r2, #0]
 800c874:	e023      	b.n	800c8be <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c876:	4b16      	ldr	r3, [pc, #88]	; (800c8d0 <sys_timeout_abs+0xd8>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	617b      	str	r3, [r7, #20]
 800c87c:	e01a      	b.n	800c8b4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00b      	beq.n	800c89e <sys_timeout_abs+0xa6>
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	685a      	ldr	r2, [r3, #4]
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	1ad3      	subs	r3, r2, r3
 800c892:	0fdb      	lsrs	r3, r3, #31
 800c894:	f003 0301 	and.w	r3, r3, #1
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d007      	beq.n	800c8ae <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	693a      	ldr	r2, [r7, #16]
 800c8aa:	601a      	str	r2, [r3, #0]
        break;
 800c8ac:	e007      	b.n	800c8be <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	617b      	str	r3, [r7, #20]
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1e1      	bne.n	800c87e <sys_timeout_abs+0x86>
 800c8ba:	e000      	b.n	800c8be <sys_timeout_abs+0xc6>
    return;
 800c8bc:	bf00      	nop
      }
    }
  }
}
 800c8be:	3718      	adds	r7, #24
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	08012e60 	.word	0x08012e60
 800c8c8:	08012e94 	.word	0x08012e94
 800c8cc:	08012ed4 	.word	0x08012ed4
 800c8d0:	24003238 	.word	0x24003238

0800c8d4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b086      	sub	sp, #24
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	4798      	blx	r3

  now = sys_now();
 800c8e6:	f7f8 fc75 	bl	80051d4 <sys_now>
 800c8ea:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	4b0f      	ldr	r3, [pc, #60]	; (800c930 <lwip_cyclic_timer+0x5c>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4413      	add	r3, r2
 800c8f6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c8f8:	68fa      	ldr	r2, [r7, #12]
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	1ad3      	subs	r3, r2, r3
 800c8fe:	0fdb      	lsrs	r3, r3, #31
 800c900:	f003 0301 	and.w	r3, r3, #1
 800c904:	b2db      	uxtb	r3, r3
 800c906:	2b00      	cmp	r3, #0
 800c908:	d009      	beq.n	800c91e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	4413      	add	r3, r2
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	4907      	ldr	r1, [pc, #28]	; (800c934 <lwip_cyclic_timer+0x60>)
 800c916:	4618      	mov	r0, r3
 800c918:	f7ff ff6e 	bl	800c7f8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c91c:	e004      	b.n	800c928 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	4904      	ldr	r1, [pc, #16]	; (800c934 <lwip_cyclic_timer+0x60>)
 800c922:	68f8      	ldr	r0, [r7, #12]
 800c924:	f7ff ff68 	bl	800c7f8 <sys_timeout_abs>
}
 800c928:	bf00      	nop
 800c92a:	3718      	adds	r7, #24
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	2400323c 	.word	0x2400323c
 800c934:	0800c8d5 	.word	0x0800c8d5

0800c938 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c93e:	2301      	movs	r3, #1
 800c940:	607b      	str	r3, [r7, #4]
 800c942:	e00e      	b.n	800c962 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c944:	4a0b      	ldr	r2, [pc, #44]	; (800c974 <sys_timeouts_init+0x3c>)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	00db      	lsls	r3, r3, #3
 800c950:	4a08      	ldr	r2, [pc, #32]	; (800c974 <sys_timeouts_init+0x3c>)
 800c952:	4413      	add	r3, r2
 800c954:	461a      	mov	r2, r3
 800c956:	4908      	ldr	r1, [pc, #32]	; (800c978 <sys_timeouts_init+0x40>)
 800c958:	f000 f810 	bl	800c97c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	3301      	adds	r3, #1
 800c960:	607b      	str	r3, [r7, #4]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2b02      	cmp	r3, #2
 800c966:	d9ed      	bls.n	800c944 <sys_timeouts_init+0xc>
  }
}
 800c968:	bf00      	nop
 800c96a:	bf00      	nop
 800c96c:	3708      	adds	r7, #8
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	08013a44 	.word	0x08013a44
 800c978:	0800c8d5 	.word	0x0800c8d5

0800c97c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b086      	sub	sp, #24
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c98e:	d306      	bcc.n	800c99e <sys_timeout+0x22>
 800c990:	4b0a      	ldr	r3, [pc, #40]	; (800c9bc <sys_timeout+0x40>)
 800c992:	f240 1229 	movw	r2, #297	; 0x129
 800c996:	490a      	ldr	r1, [pc, #40]	; (800c9c0 <sys_timeout+0x44>)
 800c998:	480a      	ldr	r0, [pc, #40]	; (800c9c4 <sys_timeout+0x48>)
 800c99a:	f003 f8b1 	bl	800fb00 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c99e:	f7f8 fc19 	bl	80051d4 <sys_now>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	4413      	add	r3, r2
 800c9a8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	68b9      	ldr	r1, [r7, #8]
 800c9ae:	6978      	ldr	r0, [r7, #20]
 800c9b0:	f7ff ff22 	bl	800c7f8 <sys_timeout_abs>
#endif
}
 800c9b4:	bf00      	nop
 800c9b6:	3718      	adds	r7, #24
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	08012e60 	.word	0x08012e60
 800c9c0:	08012efc 	.word	0x08012efc
 800c9c4:	08012ed4 	.word	0x08012ed4

0800c9c8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c9ce:	f7f8 fc01 	bl	80051d4 <sys_now>
 800c9d2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c9d4:	4b1a      	ldr	r3, [pc, #104]	; (800ca40 <sys_check_timeouts+0x78>)
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d001      	beq.n	800c9e2 <sys_check_timeouts+0x1a>
 800c9de:	f7f9 ff25 	bl	800682c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c9e2:	4b18      	ldr	r3, [pc, #96]	; (800ca44 <sys_check_timeouts+0x7c>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d022      	beq.n	800ca34 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	68fa      	ldr	r2, [r7, #12]
 800c9f4:	1ad3      	subs	r3, r2, r3
 800c9f6:	0fdb      	lsrs	r3, r3, #31
 800c9f8:	f003 0301 	and.w	r3, r3, #1
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d11a      	bne.n	800ca38 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a0f      	ldr	r2, [pc, #60]	; (800ca44 <sys_check_timeouts+0x7c>)
 800ca08:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	689b      	ldr	r3, [r3, #8]
 800ca0e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	4a0b      	ldr	r2, [pc, #44]	; (800ca48 <sys_check_timeouts+0x80>)
 800ca1c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ca1e:	68b9      	ldr	r1, [r7, #8]
 800ca20:	2006      	movs	r0, #6
 800ca22:	f7f9 fbc7 	bl	80061b4 <memp_free>
    if (handler != NULL) {
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d0d3      	beq.n	800c9d4 <sys_check_timeouts+0xc>
      handler(arg);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6838      	ldr	r0, [r7, #0]
 800ca30:	4798      	blx	r3
  do {
 800ca32:	e7cf      	b.n	800c9d4 <sys_check_timeouts+0xc>
      return;
 800ca34:	bf00      	nop
 800ca36:	e000      	b.n	800ca3a <sys_check_timeouts+0x72>
      return;
 800ca38:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ca3a:	3710      	adds	r7, #16
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	240031e5 	.word	0x240031e5
 800ca44:	24003238 	.word	0x24003238
 800ca48:	2400323c 	.word	0x2400323c

0800ca4c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ca50:	f003 f86e 	bl	800fb30 <rand>
 800ca54:	4603      	mov	r3, r0
 800ca56:	b29b      	uxth	r3, r3
 800ca58:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ca5c:	b29b      	uxth	r3, r3
 800ca5e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ca62:	b29a      	uxth	r2, r3
 800ca64:	4b01      	ldr	r3, [pc, #4]	; (800ca6c <udp_init+0x20>)
 800ca66:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ca68:	bf00      	nop
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	2400002c 	.word	0x2400002c

0800ca70 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ca76:	2300      	movs	r3, #0
 800ca78:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ca7a:	4b17      	ldr	r3, [pc, #92]	; (800cad8 <udp_new_port+0x68>)
 800ca7c:	881b      	ldrh	r3, [r3, #0]
 800ca7e:	1c5a      	adds	r2, r3, #1
 800ca80:	b291      	uxth	r1, r2
 800ca82:	4a15      	ldr	r2, [pc, #84]	; (800cad8 <udp_new_port+0x68>)
 800ca84:	8011      	strh	r1, [r2, #0]
 800ca86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d103      	bne.n	800ca96 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ca8e:	4b12      	ldr	r3, [pc, #72]	; (800cad8 <udp_new_port+0x68>)
 800ca90:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ca94:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca96:	4b11      	ldr	r3, [pc, #68]	; (800cadc <udp_new_port+0x6c>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	603b      	str	r3, [r7, #0]
 800ca9c:	e011      	b.n	800cac2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	8a5a      	ldrh	r2, [r3, #18]
 800caa2:	4b0d      	ldr	r3, [pc, #52]	; (800cad8 <udp_new_port+0x68>)
 800caa4:	881b      	ldrh	r3, [r3, #0]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d108      	bne.n	800cabc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800caaa:	88fb      	ldrh	r3, [r7, #6]
 800caac:	3301      	adds	r3, #1
 800caae:	80fb      	strh	r3, [r7, #6]
 800cab0:	88fb      	ldrh	r3, [r7, #6]
 800cab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cab6:	d3e0      	bcc.n	800ca7a <udp_new_port+0xa>
        return 0;
 800cab8:	2300      	movs	r3, #0
 800caba:	e007      	b.n	800cacc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	603b      	str	r3, [r7, #0]
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d1ea      	bne.n	800ca9e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800cac8:	4b03      	ldr	r3, [pc, #12]	; (800cad8 <udp_new_port+0x68>)
 800caca:	881b      	ldrh	r3, [r3, #0]
}
 800cacc:	4618      	mov	r0, r3
 800cace:	370c      	adds	r7, #12
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr
 800cad8:	2400002c 	.word	0x2400002c
 800cadc:	24003244 	.word	0x24003244

0800cae0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	4613      	mov	r3, r2
 800caec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d105      	bne.n	800cb00 <udp_input_local_match+0x20>
 800caf4:	4b27      	ldr	r3, [pc, #156]	; (800cb94 <udp_input_local_match+0xb4>)
 800caf6:	2287      	movs	r2, #135	; 0x87
 800caf8:	4927      	ldr	r1, [pc, #156]	; (800cb98 <udp_input_local_match+0xb8>)
 800cafa:	4828      	ldr	r0, [pc, #160]	; (800cb9c <udp_input_local_match+0xbc>)
 800cafc:	f003 f800 	bl	800fb00 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d105      	bne.n	800cb12 <udp_input_local_match+0x32>
 800cb06:	4b23      	ldr	r3, [pc, #140]	; (800cb94 <udp_input_local_match+0xb4>)
 800cb08:	2288      	movs	r2, #136	; 0x88
 800cb0a:	4925      	ldr	r1, [pc, #148]	; (800cba0 <udp_input_local_match+0xc0>)
 800cb0c:	4823      	ldr	r0, [pc, #140]	; (800cb9c <udp_input_local_match+0xbc>)
 800cb0e:	f002 fff7 	bl	800fb00 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	7a1b      	ldrb	r3, [r3, #8]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d00b      	beq.n	800cb32 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	7a1a      	ldrb	r2, [r3, #8]
 800cb1e:	4b21      	ldr	r3, [pc, #132]	; (800cba4 <udp_input_local_match+0xc4>)
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb26:	3301      	adds	r3, #1
 800cb28:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d001      	beq.n	800cb32 <udp_input_local_match+0x52>
    return 0;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	e02b      	b.n	800cb8a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800cb32:	79fb      	ldrb	r3, [r7, #7]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d018      	beq.n	800cb6a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d013      	beq.n	800cb66 <udp_input_local_match+0x86>
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d00f      	beq.n	800cb66 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cb46:	4b17      	ldr	r3, [pc, #92]	; (800cba4 <udp_input_local_match+0xc4>)
 800cb48:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cb4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb4e:	d00a      	beq.n	800cb66 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	4b13      	ldr	r3, [pc, #76]	; (800cba4 <udp_input_local_match+0xc4>)
 800cb56:	695b      	ldr	r3, [r3, #20]
 800cb58:	405a      	eors	r2, r3
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	3308      	adds	r3, #8
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d110      	bne.n	800cb88 <udp_input_local_match+0xa8>
          return 1;
 800cb66:	2301      	movs	r3, #1
 800cb68:	e00f      	b.n	800cb8a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d009      	beq.n	800cb84 <udp_input_local_match+0xa4>
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d005      	beq.n	800cb84 <udp_input_local_match+0xa4>
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681a      	ldr	r2, [r3, #0]
 800cb7c:	4b09      	ldr	r3, [pc, #36]	; (800cba4 <udp_input_local_match+0xc4>)
 800cb7e:	695b      	ldr	r3, [r3, #20]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d101      	bne.n	800cb88 <udp_input_local_match+0xa8>
        return 1;
 800cb84:	2301      	movs	r3, #1
 800cb86:	e000      	b.n	800cb8a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800cb88:	2300      	movs	r3, #0
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3710      	adds	r7, #16
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	08012f48 	.word	0x08012f48
 800cb98:	08012f78 	.word	0x08012f78
 800cb9c:	08012f9c 	.word	0x08012f9c
 800cba0:	08012fc4 	.word	0x08012fc4
 800cba4:	240002cc 	.word	0x240002cc

0800cba8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800cba8:	b590      	push	{r4, r7, lr}
 800cbaa:	b08d      	sub	sp, #52	; 0x34
 800cbac:	af02      	add	r7, sp, #8
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d105      	bne.n	800cbc8 <udp_input+0x20>
 800cbbc:	4b7c      	ldr	r3, [pc, #496]	; (800cdb0 <udp_input+0x208>)
 800cbbe:	22cf      	movs	r2, #207	; 0xcf
 800cbc0:	497c      	ldr	r1, [pc, #496]	; (800cdb4 <udp_input+0x20c>)
 800cbc2:	487d      	ldr	r0, [pc, #500]	; (800cdb8 <udp_input+0x210>)
 800cbc4:	f002 ff9c 	bl	800fb00 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d105      	bne.n	800cbda <udp_input+0x32>
 800cbce:	4b78      	ldr	r3, [pc, #480]	; (800cdb0 <udp_input+0x208>)
 800cbd0:	22d0      	movs	r2, #208	; 0xd0
 800cbd2:	497a      	ldr	r1, [pc, #488]	; (800cdbc <udp_input+0x214>)
 800cbd4:	4878      	ldr	r0, [pc, #480]	; (800cdb8 <udp_input+0x210>)
 800cbd6:	f002 ff93 	bl	800fb00 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	895b      	ldrh	r3, [r3, #10]
 800cbde:	2b07      	cmp	r3, #7
 800cbe0:	d803      	bhi.n	800cbea <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f7fa f95c 	bl	8006ea0 <pbuf_free>
    goto end;
 800cbe8:	e0de      	b.n	800cda8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cbf0:	4b73      	ldr	r3, [pc, #460]	; (800cdc0 <udp_input+0x218>)
 800cbf2:	695b      	ldr	r3, [r3, #20]
 800cbf4:	4a72      	ldr	r2, [pc, #456]	; (800cdc0 <udp_input+0x218>)
 800cbf6:	6812      	ldr	r2, [r2, #0]
 800cbf8:	4611      	mov	r1, r2
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f001 ffc6 	bl	800eb8c <ip4_addr_isbroadcast_u32>
 800cc00:	4603      	mov	r3, r0
 800cc02:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	881b      	ldrh	r3, [r3, #0]
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7f8 fd32 	bl	8005674 <lwip_htons>
 800cc10:	4603      	mov	r3, r0
 800cc12:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	885b      	ldrh	r3, [r3, #2]
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7f8 fd2a 	bl	8005674 <lwip_htons>
 800cc20:	4603      	mov	r3, r0
 800cc22:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800cc24:	2300      	movs	r3, #0
 800cc26:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc30:	4b64      	ldr	r3, [pc, #400]	; (800cdc4 <udp_input+0x21c>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	627b      	str	r3, [r7, #36]	; 0x24
 800cc36:	e054      	b.n	800cce2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800cc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3a:	8a5b      	ldrh	r3, [r3, #18]
 800cc3c:	89fa      	ldrh	r2, [r7, #14]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d14a      	bne.n	800ccd8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800cc42:	7cfb      	ldrb	r3, [r7, #19]
 800cc44:	461a      	mov	r2, r3
 800cc46:	6839      	ldr	r1, [r7, #0]
 800cc48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc4a:	f7ff ff49 	bl	800cae0 <udp_input_local_match>
 800cc4e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d041      	beq.n	800ccd8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc56:	7c1b      	ldrb	r3, [r3, #16]
 800cc58:	f003 0304 	and.w	r3, r3, #4
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d11d      	bne.n	800cc9c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d102      	bne.n	800cc6c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800cc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc68:	61fb      	str	r3, [r7, #28]
 800cc6a:	e017      	b.n	800cc9c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800cc6c:	7cfb      	ldrb	r3, [r7, #19]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d014      	beq.n	800cc9c <udp_input+0xf4>
 800cc72:	4b53      	ldr	r3, [pc, #332]	; (800cdc0 <udp_input+0x218>)
 800cc74:	695b      	ldr	r3, [r3, #20]
 800cc76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc7a:	d10f      	bne.n	800cc9c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	681a      	ldr	r2, [r3, #0]
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	3304      	adds	r3, #4
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d008      	beq.n	800cc9c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800cc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8c:	681a      	ldr	r2, [r3, #0]
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	3304      	adds	r3, #4
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d101      	bne.n	800cc9c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800cc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9e:	8a9b      	ldrh	r3, [r3, #20]
 800cca0:	8a3a      	ldrh	r2, [r7, #16]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d118      	bne.n	800ccd8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d005      	beq.n	800ccba <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ccae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb0:	685a      	ldr	r2, [r3, #4]
 800ccb2:	4b43      	ldr	r3, [pc, #268]	; (800cdc0 <udp_input+0x218>)
 800ccb4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d10e      	bne.n	800ccd8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ccba:	6a3b      	ldr	r3, [r7, #32]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d014      	beq.n	800ccea <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc2:	68da      	ldr	r2, [r3, #12]
 800ccc4:	6a3b      	ldr	r3, [r7, #32]
 800ccc6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ccc8:	4b3e      	ldr	r3, [pc, #248]	; (800cdc4 <udp_input+0x21c>)
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccce:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ccd0:	4a3c      	ldr	r2, [pc, #240]	; (800cdc4 <udp_input+0x21c>)
 800ccd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ccd6:	e008      	b.n	800ccea <udp_input+0x142>
      }
    }

    prev = pcb;
 800ccd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccda:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccde:	68db      	ldr	r3, [r3, #12]
 800cce0:	627b      	str	r3, [r7, #36]	; 0x24
 800cce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1a7      	bne.n	800cc38 <udp_input+0x90>
 800cce8:	e000      	b.n	800ccec <udp_input+0x144>
        break;
 800ccea:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ccec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d101      	bne.n	800ccf6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ccf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d002      	beq.n	800cd02 <udp_input+0x15a>
    for_us = 1;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	76fb      	strb	r3, [r7, #27]
 800cd00:	e00a      	b.n	800cd18 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	3304      	adds	r3, #4
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	4b2d      	ldr	r3, [pc, #180]	; (800cdc0 <udp_input+0x218>)
 800cd0a:	695b      	ldr	r3, [r3, #20]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	bf0c      	ite	eq
 800cd10:	2301      	moveq	r3, #1
 800cd12:	2300      	movne	r3, #0
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800cd18:	7efb      	ldrb	r3, [r7, #27]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d041      	beq.n	800cda2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800cd1e:	2108      	movs	r1, #8
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f7fa f837 	bl	8006d94 <pbuf_remove_header>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d00a      	beq.n	800cd42 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800cd2c:	4b20      	ldr	r3, [pc, #128]	; (800cdb0 <udp_input+0x208>)
 800cd2e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800cd32:	4925      	ldr	r1, [pc, #148]	; (800cdc8 <udp_input+0x220>)
 800cd34:	4820      	ldr	r0, [pc, #128]	; (800cdb8 <udp_input+0x210>)
 800cd36:	f002 fee3 	bl	800fb00 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f7fa f8b0 	bl	8006ea0 <pbuf_free>
      goto end;
 800cd40:	e032      	b.n	800cda8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800cd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d012      	beq.n	800cd6e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800cd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4a:	699b      	ldr	r3, [r3, #24]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d00a      	beq.n	800cd66 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd52:	699c      	ldr	r4, [r3, #24]
 800cd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd56:	69d8      	ldr	r0, [r3, #28]
 800cd58:	8a3b      	ldrh	r3, [r7, #16]
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	4b1b      	ldr	r3, [pc, #108]	; (800cdcc <udp_input+0x224>)
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd62:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800cd64:	e021      	b.n	800cdaa <udp_input+0x202>
        pbuf_free(p);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f7fa f89a 	bl	8006ea0 <pbuf_free>
        goto end;
 800cd6c:	e01c      	b.n	800cda8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cd6e:	7cfb      	ldrb	r3, [r7, #19]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d112      	bne.n	800cd9a <udp_input+0x1f2>
 800cd74:	4b12      	ldr	r3, [pc, #72]	; (800cdc0 <udp_input+0x218>)
 800cd76:	695b      	ldr	r3, [r3, #20]
 800cd78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd7c:	2be0      	cmp	r3, #224	; 0xe0
 800cd7e:	d00c      	beq.n	800cd9a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cd80:	4b0f      	ldr	r3, [pc, #60]	; (800cdc0 <udp_input+0x218>)
 800cd82:	899b      	ldrh	r3, [r3, #12]
 800cd84:	3308      	adds	r3, #8
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	b21b      	sxth	r3, r3
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f7fa f874 	bl	8006e7a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cd92:	2103      	movs	r1, #3
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f001 fbcf 	bl	800e538 <icmp_dest_unreach>
      pbuf_free(p);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f7fa f880 	bl	8006ea0 <pbuf_free>
  return;
 800cda0:	e003      	b.n	800cdaa <udp_input+0x202>
    pbuf_free(p);
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f7fa f87c 	bl	8006ea0 <pbuf_free>
  return;
 800cda8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cdaa:	372c      	adds	r7, #44	; 0x2c
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd90      	pop	{r4, r7, pc}
 800cdb0:	08012f48 	.word	0x08012f48
 800cdb4:	08012fec 	.word	0x08012fec
 800cdb8:	08012f9c 	.word	0x08012f9c
 800cdbc:	08013004 	.word	0x08013004
 800cdc0:	240002cc 	.word	0x240002cc
 800cdc4:	24003244 	.word	0x24003244
 800cdc8:	08013020 	.word	0x08013020
 800cdcc:	240002dc 	.word	0x240002dc

0800cdd0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d109      	bne.n	800cdf4 <udp_send+0x24>
 800cde0:	4b11      	ldr	r3, [pc, #68]	; (800ce28 <udp_send+0x58>)
 800cde2:	f240 12d5 	movw	r2, #469	; 0x1d5
 800cde6:	4911      	ldr	r1, [pc, #68]	; (800ce2c <udp_send+0x5c>)
 800cde8:	4811      	ldr	r0, [pc, #68]	; (800ce30 <udp_send+0x60>)
 800cdea:	f002 fe89 	bl	800fb00 <iprintf>
 800cdee:	f06f 030f 	mvn.w	r3, #15
 800cdf2:	e015      	b.n	800ce20 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d109      	bne.n	800ce0e <udp_send+0x3e>
 800cdfa:	4b0b      	ldr	r3, [pc, #44]	; (800ce28 <udp_send+0x58>)
 800cdfc:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800ce00:	490c      	ldr	r1, [pc, #48]	; (800ce34 <udp_send+0x64>)
 800ce02:	480b      	ldr	r0, [pc, #44]	; (800ce30 <udp_send+0x60>)
 800ce04:	f002 fe7c 	bl	800fb00 <iprintf>
 800ce08:	f06f 030f 	mvn.w	r3, #15
 800ce0c:	e008      	b.n	800ce20 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	1d1a      	adds	r2, r3, #4
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	8a9b      	ldrh	r3, [r3, #20]
 800ce16:	6839      	ldr	r1, [r7, #0]
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 f80d 	bl	800ce38 <udp_sendto>
 800ce1e:	4603      	mov	r3, r0
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3708      	adds	r7, #8
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	08012f48 	.word	0x08012f48
 800ce2c:	0801303c 	.word	0x0801303c
 800ce30:	08012f9c 	.word	0x08012f9c
 800ce34:	08013054 	.word	0x08013054

0800ce38 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b088      	sub	sp, #32
 800ce3c:	af02      	add	r7, sp, #8
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
 800ce44:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d109      	bne.n	800ce60 <udp_sendto+0x28>
 800ce4c:	4b23      	ldr	r3, [pc, #140]	; (800cedc <udp_sendto+0xa4>)
 800ce4e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ce52:	4923      	ldr	r1, [pc, #140]	; (800cee0 <udp_sendto+0xa8>)
 800ce54:	4823      	ldr	r0, [pc, #140]	; (800cee4 <udp_sendto+0xac>)
 800ce56:	f002 fe53 	bl	800fb00 <iprintf>
 800ce5a:	f06f 030f 	mvn.w	r3, #15
 800ce5e:	e038      	b.n	800ced2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d109      	bne.n	800ce7a <udp_sendto+0x42>
 800ce66:	4b1d      	ldr	r3, [pc, #116]	; (800cedc <udp_sendto+0xa4>)
 800ce68:	f240 2219 	movw	r2, #537	; 0x219
 800ce6c:	491e      	ldr	r1, [pc, #120]	; (800cee8 <udp_sendto+0xb0>)
 800ce6e:	481d      	ldr	r0, [pc, #116]	; (800cee4 <udp_sendto+0xac>)
 800ce70:	f002 fe46 	bl	800fb00 <iprintf>
 800ce74:	f06f 030f 	mvn.w	r3, #15
 800ce78:	e02b      	b.n	800ced2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d109      	bne.n	800ce94 <udp_sendto+0x5c>
 800ce80:	4b16      	ldr	r3, [pc, #88]	; (800cedc <udp_sendto+0xa4>)
 800ce82:	f240 221a 	movw	r2, #538	; 0x21a
 800ce86:	4919      	ldr	r1, [pc, #100]	; (800ceec <udp_sendto+0xb4>)
 800ce88:	4816      	ldr	r0, [pc, #88]	; (800cee4 <udp_sendto+0xac>)
 800ce8a:	f002 fe39 	bl	800fb00 <iprintf>
 800ce8e:	f06f 030f 	mvn.w	r3, #15
 800ce92:	e01e      	b.n	800ced2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	7a1b      	ldrb	r3, [r3, #8]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d006      	beq.n	800ceaa <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	7a1b      	ldrb	r3, [r3, #8]
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7f9 fc9d 	bl	80067e0 <netif_get_by_index>
 800cea6:	6178      	str	r0, [r7, #20]
 800cea8:	e003      	b.n	800ceb2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f001 fbd8 	bl	800e660 <ip4_route>
 800ceb0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d102      	bne.n	800cebe <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800ceb8:	f06f 0303 	mvn.w	r3, #3
 800cebc:	e009      	b.n	800ced2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800cebe:	887a      	ldrh	r2, [r7, #2]
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	9300      	str	r3, [sp, #0]
 800cec4:	4613      	mov	r3, r2
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	68b9      	ldr	r1, [r7, #8]
 800ceca:	68f8      	ldr	r0, [r7, #12]
 800cecc:	f000 f810 	bl	800cef0 <udp_sendto_if>
 800ced0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3718      	adds	r7, #24
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	08012f48 	.word	0x08012f48
 800cee0:	0801306c 	.word	0x0801306c
 800cee4:	08012f9c 	.word	0x08012f9c
 800cee8:	08013084 	.word	0x08013084
 800ceec:	080130a0 	.word	0x080130a0

0800cef0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b088      	sub	sp, #32
 800cef4:	af02      	add	r7, sp, #8
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]
 800cefc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d109      	bne.n	800cf18 <udp_sendto_if+0x28>
 800cf04:	4b2e      	ldr	r3, [pc, #184]	; (800cfc0 <udp_sendto_if+0xd0>)
 800cf06:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cf0a:	492e      	ldr	r1, [pc, #184]	; (800cfc4 <udp_sendto_if+0xd4>)
 800cf0c:	482e      	ldr	r0, [pc, #184]	; (800cfc8 <udp_sendto_if+0xd8>)
 800cf0e:	f002 fdf7 	bl	800fb00 <iprintf>
 800cf12:	f06f 030f 	mvn.w	r3, #15
 800cf16:	e04f      	b.n	800cfb8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d109      	bne.n	800cf32 <udp_sendto_if+0x42>
 800cf1e:	4b28      	ldr	r3, [pc, #160]	; (800cfc0 <udp_sendto_if+0xd0>)
 800cf20:	f240 2281 	movw	r2, #641	; 0x281
 800cf24:	4929      	ldr	r1, [pc, #164]	; (800cfcc <udp_sendto_if+0xdc>)
 800cf26:	4828      	ldr	r0, [pc, #160]	; (800cfc8 <udp_sendto_if+0xd8>)
 800cf28:	f002 fdea 	bl	800fb00 <iprintf>
 800cf2c:	f06f 030f 	mvn.w	r3, #15
 800cf30:	e042      	b.n	800cfb8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d109      	bne.n	800cf4c <udp_sendto_if+0x5c>
 800cf38:	4b21      	ldr	r3, [pc, #132]	; (800cfc0 <udp_sendto_if+0xd0>)
 800cf3a:	f240 2282 	movw	r2, #642	; 0x282
 800cf3e:	4924      	ldr	r1, [pc, #144]	; (800cfd0 <udp_sendto_if+0xe0>)
 800cf40:	4821      	ldr	r0, [pc, #132]	; (800cfc8 <udp_sendto_if+0xd8>)
 800cf42:	f002 fddd 	bl	800fb00 <iprintf>
 800cf46:	f06f 030f 	mvn.w	r3, #15
 800cf4a:	e035      	b.n	800cfb8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800cf4c:	6a3b      	ldr	r3, [r7, #32]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d109      	bne.n	800cf66 <udp_sendto_if+0x76>
 800cf52:	4b1b      	ldr	r3, [pc, #108]	; (800cfc0 <udp_sendto_if+0xd0>)
 800cf54:	f240 2283 	movw	r2, #643	; 0x283
 800cf58:	491e      	ldr	r1, [pc, #120]	; (800cfd4 <udp_sendto_if+0xe4>)
 800cf5a:	481b      	ldr	r0, [pc, #108]	; (800cfc8 <udp_sendto_if+0xd8>)
 800cf5c:	f002 fdd0 	bl	800fb00 <iprintf>
 800cf60:	f06f 030f 	mvn.w	r3, #15
 800cf64:	e028      	b.n	800cfb8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d009      	beq.n	800cf80 <udp_sendto_if+0x90>
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d005      	beq.n	800cf80 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cf7c:	2be0      	cmp	r3, #224	; 0xe0
 800cf7e:	d103      	bne.n	800cf88 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800cf80:	6a3b      	ldr	r3, [r7, #32]
 800cf82:	3304      	adds	r3, #4
 800cf84:	617b      	str	r3, [r7, #20]
 800cf86:	e00b      	b.n	800cfa0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	6a3b      	ldr	r3, [r7, #32]
 800cf8e:	3304      	adds	r3, #4
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d002      	beq.n	800cf9c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800cf96:	f06f 0303 	mvn.w	r3, #3
 800cf9a:	e00d      	b.n	800cfb8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800cfa0:	887a      	ldrh	r2, [r7, #2]
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	9301      	str	r3, [sp, #4]
 800cfa6:	6a3b      	ldr	r3, [r7, #32]
 800cfa8:	9300      	str	r3, [sp, #0]
 800cfaa:	4613      	mov	r3, r2
 800cfac:	687a      	ldr	r2, [r7, #4]
 800cfae:	68b9      	ldr	r1, [r7, #8]
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f000 f811 	bl	800cfd8 <udp_sendto_if_src>
 800cfb6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3718      	adds	r7, #24
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	08012f48 	.word	0x08012f48
 800cfc4:	080130bc 	.word	0x080130bc
 800cfc8:	08012f9c 	.word	0x08012f9c
 800cfcc:	080130d8 	.word	0x080130d8
 800cfd0:	080130f4 	.word	0x080130f4
 800cfd4:	08013114 	.word	0x08013114

0800cfd8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b08c      	sub	sp, #48	; 0x30
 800cfdc:	af04      	add	r7, sp, #16
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	607a      	str	r2, [r7, #4]
 800cfe4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d109      	bne.n	800d000 <udp_sendto_if_src+0x28>
 800cfec:	4b65      	ldr	r3, [pc, #404]	; (800d184 <udp_sendto_if_src+0x1ac>)
 800cfee:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cff2:	4965      	ldr	r1, [pc, #404]	; (800d188 <udp_sendto_if_src+0x1b0>)
 800cff4:	4865      	ldr	r0, [pc, #404]	; (800d18c <udp_sendto_if_src+0x1b4>)
 800cff6:	f002 fd83 	bl	800fb00 <iprintf>
 800cffa:	f06f 030f 	mvn.w	r3, #15
 800cffe:	e0bc      	b.n	800d17a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d109      	bne.n	800d01a <udp_sendto_if_src+0x42>
 800d006:	4b5f      	ldr	r3, [pc, #380]	; (800d184 <udp_sendto_if_src+0x1ac>)
 800d008:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d00c:	4960      	ldr	r1, [pc, #384]	; (800d190 <udp_sendto_if_src+0x1b8>)
 800d00e:	485f      	ldr	r0, [pc, #380]	; (800d18c <udp_sendto_if_src+0x1b4>)
 800d010:	f002 fd76 	bl	800fb00 <iprintf>
 800d014:	f06f 030f 	mvn.w	r3, #15
 800d018:	e0af      	b.n	800d17a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d109      	bne.n	800d034 <udp_sendto_if_src+0x5c>
 800d020:	4b58      	ldr	r3, [pc, #352]	; (800d184 <udp_sendto_if_src+0x1ac>)
 800d022:	f240 22d3 	movw	r2, #723	; 0x2d3
 800d026:	495b      	ldr	r1, [pc, #364]	; (800d194 <udp_sendto_if_src+0x1bc>)
 800d028:	4858      	ldr	r0, [pc, #352]	; (800d18c <udp_sendto_if_src+0x1b4>)
 800d02a:	f002 fd69 	bl	800fb00 <iprintf>
 800d02e:	f06f 030f 	mvn.w	r3, #15
 800d032:	e0a2      	b.n	800d17a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800d034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d036:	2b00      	cmp	r3, #0
 800d038:	d109      	bne.n	800d04e <udp_sendto_if_src+0x76>
 800d03a:	4b52      	ldr	r3, [pc, #328]	; (800d184 <udp_sendto_if_src+0x1ac>)
 800d03c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800d040:	4955      	ldr	r1, [pc, #340]	; (800d198 <udp_sendto_if_src+0x1c0>)
 800d042:	4852      	ldr	r0, [pc, #328]	; (800d18c <udp_sendto_if_src+0x1b4>)
 800d044:	f002 fd5c 	bl	800fb00 <iprintf>
 800d048:	f06f 030f 	mvn.w	r3, #15
 800d04c:	e095      	b.n	800d17a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800d04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d050:	2b00      	cmp	r3, #0
 800d052:	d109      	bne.n	800d068 <udp_sendto_if_src+0x90>
 800d054:	4b4b      	ldr	r3, [pc, #300]	; (800d184 <udp_sendto_if_src+0x1ac>)
 800d056:	f240 22d5 	movw	r2, #725	; 0x2d5
 800d05a:	4950      	ldr	r1, [pc, #320]	; (800d19c <udp_sendto_if_src+0x1c4>)
 800d05c:	484b      	ldr	r0, [pc, #300]	; (800d18c <udp_sendto_if_src+0x1b4>)
 800d05e:	f002 fd4f 	bl	800fb00 <iprintf>
 800d062:	f06f 030f 	mvn.w	r3, #15
 800d066:	e088      	b.n	800d17a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	8a5b      	ldrh	r3, [r3, #18]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d10f      	bne.n	800d090 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d070:	68f9      	ldr	r1, [r7, #12]
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	8a5b      	ldrh	r3, [r3, #18]
 800d076:	461a      	mov	r2, r3
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	f000 f893 	bl	800d1a4 <udp_bind>
 800d07e:	4603      	mov	r3, r0
 800d080:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800d082:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d002      	beq.n	800d090 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800d08a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d08e:	e074      	b.n	800d17a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	891b      	ldrh	r3, [r3, #8]
 800d094:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800d098:	4293      	cmp	r3, r2
 800d09a:	d902      	bls.n	800d0a2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800d09c:	f04f 33ff 	mov.w	r3, #4294967295
 800d0a0:	e06b      	b.n	800d17a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800d0a2:	2108      	movs	r1, #8
 800d0a4:	68b8      	ldr	r0, [r7, #8]
 800d0a6:	f7f9 fe65 	bl	8006d74 <pbuf_add_header>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d015      	beq.n	800d0dc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d0b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d0b4:	2108      	movs	r1, #8
 800d0b6:	2022      	movs	r0, #34	; 0x22
 800d0b8:	f7f9 fc0e 	bl	80068d8 <pbuf_alloc>
 800d0bc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800d0be:	69fb      	ldr	r3, [r7, #28]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d102      	bne.n	800d0ca <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800d0c4:	f04f 33ff 	mov.w	r3, #4294967295
 800d0c8:	e057      	b.n	800d17a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	891b      	ldrh	r3, [r3, #8]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d006      	beq.n	800d0e0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800d0d2:	68b9      	ldr	r1, [r7, #8]
 800d0d4:	69f8      	ldr	r0, [r7, #28]
 800d0d6:	f7f9 fffb 	bl	80070d0 <pbuf_chain>
 800d0da:	e001      	b.n	800d0e0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d0e0:	69fb      	ldr	r3, [r7, #28]
 800d0e2:	895b      	ldrh	r3, [r3, #10]
 800d0e4:	2b07      	cmp	r3, #7
 800d0e6:	d806      	bhi.n	800d0f6 <udp_sendto_if_src+0x11e>
 800d0e8:	4b26      	ldr	r3, [pc, #152]	; (800d184 <udp_sendto_if_src+0x1ac>)
 800d0ea:	f240 320d 	movw	r2, #781	; 0x30d
 800d0ee:	492c      	ldr	r1, [pc, #176]	; (800d1a0 <udp_sendto_if_src+0x1c8>)
 800d0f0:	4826      	ldr	r0, [pc, #152]	; (800d18c <udp_sendto_if_src+0x1b4>)
 800d0f2:	f002 fd05 	bl	800fb00 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800d0f6:	69fb      	ldr	r3, [r7, #28]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	8a5b      	ldrh	r3, [r3, #18]
 800d100:	4618      	mov	r0, r3
 800d102:	f7f8 fab7 	bl	8005674 <lwip_htons>
 800d106:	4603      	mov	r3, r0
 800d108:	461a      	mov	r2, r3
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800d10e:	887b      	ldrh	r3, [r7, #2]
 800d110:	4618      	mov	r0, r3
 800d112:	f7f8 faaf 	bl	8005674 <lwip_htons>
 800d116:	4603      	mov	r3, r0
 800d118:	461a      	mov	r2, r3
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	2200      	movs	r2, #0
 800d122:	719a      	strb	r2, [r3, #6]
 800d124:	2200      	movs	r2, #0
 800d126:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	891b      	ldrh	r3, [r3, #8]
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7f8 faa1 	bl	8005674 <lwip_htons>
 800d132:	4603      	mov	r3, r0
 800d134:	461a      	mov	r2, r3
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800d13a:	2311      	movs	r3, #17
 800d13c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	7adb      	ldrb	r3, [r3, #11]
 800d142:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	7a9b      	ldrb	r3, [r3, #10]
 800d148:	7cb9      	ldrb	r1, [r7, #18]
 800d14a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d14c:	9202      	str	r2, [sp, #8]
 800d14e:	7cfa      	ldrb	r2, [r7, #19]
 800d150:	9201      	str	r2, [sp, #4]
 800d152:	9300      	str	r3, [sp, #0]
 800d154:	460b      	mov	r3, r1
 800d156:	687a      	ldr	r2, [r7, #4]
 800d158:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d15a:	69f8      	ldr	r0, [r7, #28]
 800d15c:	f001 fc68 	bl	800ea30 <ip4_output_if_src>
 800d160:	4603      	mov	r3, r0
 800d162:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800d164:	69fa      	ldr	r2, [r7, #28]
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d004      	beq.n	800d176 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800d16c:	69f8      	ldr	r0, [r7, #28]
 800d16e:	f7f9 fe97 	bl	8006ea0 <pbuf_free>
    q = NULL;
 800d172:	2300      	movs	r3, #0
 800d174:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800d176:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3720      	adds	r7, #32
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	08012f48 	.word	0x08012f48
 800d188:	08013134 	.word	0x08013134
 800d18c:	08012f9c 	.word	0x08012f9c
 800d190:	08013154 	.word	0x08013154
 800d194:	08013174 	.word	0x08013174
 800d198:	08013198 	.word	0x08013198
 800d19c:	080131bc 	.word	0x080131bc
 800d1a0:	080131e0 	.word	0x080131e0

0800d1a4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b086      	sub	sp, #24
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	60f8      	str	r0, [r7, #12]
 800d1ac:	60b9      	str	r1, [r7, #8]
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d101      	bne.n	800d1bc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800d1b8:	4b39      	ldr	r3, [pc, #228]	; (800d2a0 <udp_bind+0xfc>)
 800d1ba:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d109      	bne.n	800d1d6 <udp_bind+0x32>
 800d1c2:	4b38      	ldr	r3, [pc, #224]	; (800d2a4 <udp_bind+0x100>)
 800d1c4:	f240 32b7 	movw	r2, #951	; 0x3b7
 800d1c8:	4937      	ldr	r1, [pc, #220]	; (800d2a8 <udp_bind+0x104>)
 800d1ca:	4838      	ldr	r0, [pc, #224]	; (800d2ac <udp_bind+0x108>)
 800d1cc:	f002 fc98 	bl	800fb00 <iprintf>
 800d1d0:	f06f 030f 	mvn.w	r3, #15
 800d1d4:	e060      	b.n	800d298 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d1da:	4b35      	ldr	r3, [pc, #212]	; (800d2b0 <udp_bind+0x10c>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	617b      	str	r3, [r7, #20]
 800d1e0:	e009      	b.n	800d1f6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d1e2:	68fa      	ldr	r2, [r7, #12]
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d102      	bne.n	800d1f0 <udp_bind+0x4c>
      rebind = 1;
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	74fb      	strb	r3, [r7, #19]
      break;
 800d1ee:	e005      	b.n	800d1fc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	68db      	ldr	r3, [r3, #12]
 800d1f4:	617b      	str	r3, [r7, #20]
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d1f2      	bne.n	800d1e2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800d1fc:	88fb      	ldrh	r3, [r7, #6]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d109      	bne.n	800d216 <udp_bind+0x72>
    port = udp_new_port();
 800d202:	f7ff fc35 	bl	800ca70 <udp_new_port>
 800d206:	4603      	mov	r3, r0
 800d208:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d20a:	88fb      	ldrh	r3, [r7, #6]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d12c      	bne.n	800d26a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800d210:	f06f 0307 	mvn.w	r3, #7
 800d214:	e040      	b.n	800d298 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d216:	4b26      	ldr	r3, [pc, #152]	; (800d2b0 <udp_bind+0x10c>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	617b      	str	r3, [r7, #20]
 800d21c:	e022      	b.n	800d264 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800d21e:	68fa      	ldr	r2, [r7, #12]
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	429a      	cmp	r2, r3
 800d224:	d01b      	beq.n	800d25e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	8a5b      	ldrh	r3, [r3, #18]
 800d22a:	88fa      	ldrh	r2, [r7, #6]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d116      	bne.n	800d25e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800d238:	429a      	cmp	r2, r3
 800d23a:	d00d      	beq.n	800d258 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00a      	beq.n	800d258 <udp_bind+0xb4>
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d006      	beq.n	800d258 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d24a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d003      	beq.n	800d258 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d102      	bne.n	800d25e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800d258:	f06f 0307 	mvn.w	r3, #7
 800d25c:	e01c      	b.n	800d298 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	617b      	str	r3, [r7, #20]
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1d9      	bne.n	800d21e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d002      	beq.n	800d276 <udp_bind+0xd2>
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	e000      	b.n	800d278 <udp_bind+0xd4>
 800d276:	2300      	movs	r3, #0
 800d278:	68fa      	ldr	r2, [r7, #12]
 800d27a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	88fa      	ldrh	r2, [r7, #6]
 800d280:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d282:	7cfb      	ldrb	r3, [r7, #19]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d106      	bne.n	800d296 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d288:	4b09      	ldr	r3, [pc, #36]	; (800d2b0 <udp_bind+0x10c>)
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800d290:	4a07      	ldr	r2, [pc, #28]	; (800d2b0 <udp_bind+0x10c>)
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d296:	2300      	movs	r3, #0
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3718      	adds	r7, #24
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	08013a5c 	.word	0x08013a5c
 800d2a4:	08012f48 	.word	0x08012f48
 800d2a8:	08013210 	.word	0x08013210
 800d2ac:	08012f9c 	.word	0x08012f9c
 800d2b0:	24003244 	.word	0x24003244

0800d2b4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b086      	sub	sp, #24
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	60f8      	str	r0, [r7, #12]
 800d2bc:	60b9      	str	r1, [r7, #8]
 800d2be:	4613      	mov	r3, r2
 800d2c0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d109      	bne.n	800d2dc <udp_connect+0x28>
 800d2c8:	4b2c      	ldr	r3, [pc, #176]	; (800d37c <udp_connect+0xc8>)
 800d2ca:	f240 4235 	movw	r2, #1077	; 0x435
 800d2ce:	492c      	ldr	r1, [pc, #176]	; (800d380 <udp_connect+0xcc>)
 800d2d0:	482c      	ldr	r0, [pc, #176]	; (800d384 <udp_connect+0xd0>)
 800d2d2:	f002 fc15 	bl	800fb00 <iprintf>
 800d2d6:	f06f 030f 	mvn.w	r3, #15
 800d2da:	e04b      	b.n	800d374 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d109      	bne.n	800d2f6 <udp_connect+0x42>
 800d2e2:	4b26      	ldr	r3, [pc, #152]	; (800d37c <udp_connect+0xc8>)
 800d2e4:	f240 4236 	movw	r2, #1078	; 0x436
 800d2e8:	4927      	ldr	r1, [pc, #156]	; (800d388 <udp_connect+0xd4>)
 800d2ea:	4826      	ldr	r0, [pc, #152]	; (800d384 <udp_connect+0xd0>)
 800d2ec:	f002 fc08 	bl	800fb00 <iprintf>
 800d2f0:	f06f 030f 	mvn.w	r3, #15
 800d2f4:	e03e      	b.n	800d374 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	8a5b      	ldrh	r3, [r3, #18]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d10f      	bne.n	800d31e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d2fe:	68f9      	ldr	r1, [r7, #12]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	8a5b      	ldrh	r3, [r3, #18]
 800d304:	461a      	mov	r2, r3
 800d306:	68f8      	ldr	r0, [r7, #12]
 800d308:	f7ff ff4c 	bl	800d1a4 <udp_bind>
 800d30c:	4603      	mov	r3, r0
 800d30e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d310:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d002      	beq.n	800d31e <udp_connect+0x6a>
      return err;
 800d318:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d31c:	e02a      	b.n	800d374 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d002      	beq.n	800d32a <udp_connect+0x76>
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	e000      	b.n	800d32c <udp_connect+0x78>
 800d32a:	2300      	movs	r3, #0
 800d32c:	68fa      	ldr	r2, [r7, #12]
 800d32e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	88fa      	ldrh	r2, [r7, #6]
 800d334:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	7c1b      	ldrb	r3, [r3, #16]
 800d33a:	f043 0304 	orr.w	r3, r3, #4
 800d33e:	b2da      	uxtb	r2, r3
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d344:	4b11      	ldr	r3, [pc, #68]	; (800d38c <udp_connect+0xd8>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	617b      	str	r3, [r7, #20]
 800d34a:	e008      	b.n	800d35e <udp_connect+0xaa>
    if (pcb == ipcb) {
 800d34c:	68fa      	ldr	r2, [r7, #12]
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	429a      	cmp	r2, r3
 800d352:	d101      	bne.n	800d358 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800d354:	2300      	movs	r3, #0
 800d356:	e00d      	b.n	800d374 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	68db      	ldr	r3, [r3, #12]
 800d35c:	617b      	str	r3, [r7, #20]
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d1f3      	bne.n	800d34c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800d364:	4b09      	ldr	r3, [pc, #36]	; (800d38c <udp_connect+0xd8>)
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800d36c:	4a07      	ldr	r2, [pc, #28]	; (800d38c <udp_connect+0xd8>)
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800d372:	2300      	movs	r3, #0
}
 800d374:	4618      	mov	r0, r3
 800d376:	3718      	adds	r7, #24
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	08012f48 	.word	0x08012f48
 800d380:	08013228 	.word	0x08013228
 800d384:	08012f9c 	.word	0x08012f9c
 800d388:	08013244 	.word	0x08013244
 800d38c:	24003244 	.word	0x24003244

0800d390 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d107      	bne.n	800d3b2 <udp_recv+0x22>
 800d3a2:	4b08      	ldr	r3, [pc, #32]	; (800d3c4 <udp_recv+0x34>)
 800d3a4:	f240 428a 	movw	r2, #1162	; 0x48a
 800d3a8:	4907      	ldr	r1, [pc, #28]	; (800d3c8 <udp_recv+0x38>)
 800d3aa:	4808      	ldr	r0, [pc, #32]	; (800d3cc <udp_recv+0x3c>)
 800d3ac:	f002 fba8 	bl	800fb00 <iprintf>
 800d3b0:	e005      	b.n	800d3be <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	68ba      	ldr	r2, [r7, #8]
 800d3b6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	687a      	ldr	r2, [r7, #4]
 800d3bc:	61da      	str	r2, [r3, #28]
}
 800d3be:	3710      	adds	r7, #16
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	08012f48 	.word	0x08012f48
 800d3c8:	0801327c 	.word	0x0801327c
 800d3cc:	08012f9c 	.word	0x08012f9c

0800d3d0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d3d6:	2000      	movs	r0, #0
 800d3d8:	f7f8 fe7c 	bl	80060d4 <memp_malloc>
 800d3dc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d007      	beq.n	800d3f4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d3e4:	2220      	movs	r2, #32
 800d3e6:	2100      	movs	r1, #0
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f002 fb81 	bl	800faf0 <memset>
    pcb->ttl = UDP_TTL;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	22ff      	movs	r2, #255	; 0xff
 800d3f2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800d3f4:	687b      	ldr	r3, [r7, #4]
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3708      	adds	r7, #8
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
	...

0800d400 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d400:	b480      	push	{r7}
 800d402:	b085      	sub	sp, #20
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d01e      	beq.n	800d44e <udp_netif_ip_addr_changed+0x4e>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d01a      	beq.n	800d44e <udp_netif_ip_addr_changed+0x4e>
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d017      	beq.n	800d44e <udp_netif_ip_addr_changed+0x4e>
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d013      	beq.n	800d44e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d426:	4b0d      	ldr	r3, [pc, #52]	; (800d45c <udp_netif_ip_addr_changed+0x5c>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	60fb      	str	r3, [r7, #12]
 800d42c:	e00c      	b.n	800d448 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	429a      	cmp	r2, r3
 800d438:	d103      	bne.n	800d442 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	68db      	ldr	r3, [r3, #12]
 800d446:	60fb      	str	r3, [r7, #12]
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d1ef      	bne.n	800d42e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d44e:	bf00      	nop
 800d450:	3714      	adds	r7, #20
 800d452:	46bd      	mov	sp, r7
 800d454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop
 800d45c:	24003244 	.word	0x24003244

0800d460 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d468:	4915      	ldr	r1, [pc, #84]	; (800d4c0 <etharp_free_entry+0x60>)
 800d46a:	687a      	ldr	r2, [r7, #4]
 800d46c:	4613      	mov	r3, r2
 800d46e:	005b      	lsls	r3, r3, #1
 800d470:	4413      	add	r3, r2
 800d472:	00db      	lsls	r3, r3, #3
 800d474:	440b      	add	r3, r1
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d013      	beq.n	800d4a4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d47c:	4910      	ldr	r1, [pc, #64]	; (800d4c0 <etharp_free_entry+0x60>)
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	4613      	mov	r3, r2
 800d482:	005b      	lsls	r3, r3, #1
 800d484:	4413      	add	r3, r2
 800d486:	00db      	lsls	r3, r3, #3
 800d488:	440b      	add	r3, r1
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7f9 fd07 	bl	8006ea0 <pbuf_free>
    arp_table[i].q = NULL;
 800d492:	490b      	ldr	r1, [pc, #44]	; (800d4c0 <etharp_free_entry+0x60>)
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	4613      	mov	r3, r2
 800d498:	005b      	lsls	r3, r3, #1
 800d49a:	4413      	add	r3, r2
 800d49c:	00db      	lsls	r3, r3, #3
 800d49e:	440b      	add	r3, r1
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d4a4:	4906      	ldr	r1, [pc, #24]	; (800d4c0 <etharp_free_entry+0x60>)
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	4613      	mov	r3, r2
 800d4aa:	005b      	lsls	r3, r3, #1
 800d4ac:	4413      	add	r3, r2
 800d4ae:	00db      	lsls	r3, r3, #3
 800d4b0:	440b      	add	r3, r1
 800d4b2:	3314      	adds	r3, #20
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d4b8:	bf00      	nop
 800d4ba:	3708      	adds	r7, #8
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	24003248 	.word	0x24003248

0800d4c4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	607b      	str	r3, [r7, #4]
 800d4ce:	e096      	b.n	800d5fe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d4d0:	494f      	ldr	r1, [pc, #316]	; (800d610 <etharp_tmr+0x14c>)
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	4613      	mov	r3, r2
 800d4d6:	005b      	lsls	r3, r3, #1
 800d4d8:	4413      	add	r3, r2
 800d4da:	00db      	lsls	r3, r3, #3
 800d4dc:	440b      	add	r3, r1
 800d4de:	3314      	adds	r3, #20
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d4e4:	78fb      	ldrb	r3, [r7, #3]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	f000 8086 	beq.w	800d5f8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d4ec:	4948      	ldr	r1, [pc, #288]	; (800d610 <etharp_tmr+0x14c>)
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	4613      	mov	r3, r2
 800d4f2:	005b      	lsls	r3, r3, #1
 800d4f4:	4413      	add	r3, r2
 800d4f6:	00db      	lsls	r3, r3, #3
 800d4f8:	440b      	add	r3, r1
 800d4fa:	3312      	adds	r3, #18
 800d4fc:	881b      	ldrh	r3, [r3, #0]
 800d4fe:	3301      	adds	r3, #1
 800d500:	b298      	uxth	r0, r3
 800d502:	4943      	ldr	r1, [pc, #268]	; (800d610 <etharp_tmr+0x14c>)
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	4613      	mov	r3, r2
 800d508:	005b      	lsls	r3, r3, #1
 800d50a:	4413      	add	r3, r2
 800d50c:	00db      	lsls	r3, r3, #3
 800d50e:	440b      	add	r3, r1
 800d510:	3312      	adds	r3, #18
 800d512:	4602      	mov	r2, r0
 800d514:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d516:	493e      	ldr	r1, [pc, #248]	; (800d610 <etharp_tmr+0x14c>)
 800d518:	687a      	ldr	r2, [r7, #4]
 800d51a:	4613      	mov	r3, r2
 800d51c:	005b      	lsls	r3, r3, #1
 800d51e:	4413      	add	r3, r2
 800d520:	00db      	lsls	r3, r3, #3
 800d522:	440b      	add	r3, r1
 800d524:	3312      	adds	r3, #18
 800d526:	881b      	ldrh	r3, [r3, #0]
 800d528:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d52c:	d215      	bcs.n	800d55a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d52e:	4938      	ldr	r1, [pc, #224]	; (800d610 <etharp_tmr+0x14c>)
 800d530:	687a      	ldr	r2, [r7, #4]
 800d532:	4613      	mov	r3, r2
 800d534:	005b      	lsls	r3, r3, #1
 800d536:	4413      	add	r3, r2
 800d538:	00db      	lsls	r3, r3, #3
 800d53a:	440b      	add	r3, r1
 800d53c:	3314      	adds	r3, #20
 800d53e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d540:	2b01      	cmp	r3, #1
 800d542:	d10e      	bne.n	800d562 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d544:	4932      	ldr	r1, [pc, #200]	; (800d610 <etharp_tmr+0x14c>)
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	4613      	mov	r3, r2
 800d54a:	005b      	lsls	r3, r3, #1
 800d54c:	4413      	add	r3, r2
 800d54e:	00db      	lsls	r3, r3, #3
 800d550:	440b      	add	r3, r1
 800d552:	3312      	adds	r3, #18
 800d554:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d556:	2b04      	cmp	r3, #4
 800d558:	d903      	bls.n	800d562 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f7ff ff80 	bl	800d460 <etharp_free_entry>
 800d560:	e04a      	b.n	800d5f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d562:	492b      	ldr	r1, [pc, #172]	; (800d610 <etharp_tmr+0x14c>)
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	4613      	mov	r3, r2
 800d568:	005b      	lsls	r3, r3, #1
 800d56a:	4413      	add	r3, r2
 800d56c:	00db      	lsls	r3, r3, #3
 800d56e:	440b      	add	r3, r1
 800d570:	3314      	adds	r3, #20
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	2b03      	cmp	r3, #3
 800d576:	d10a      	bne.n	800d58e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d578:	4925      	ldr	r1, [pc, #148]	; (800d610 <etharp_tmr+0x14c>)
 800d57a:	687a      	ldr	r2, [r7, #4]
 800d57c:	4613      	mov	r3, r2
 800d57e:	005b      	lsls	r3, r3, #1
 800d580:	4413      	add	r3, r2
 800d582:	00db      	lsls	r3, r3, #3
 800d584:	440b      	add	r3, r1
 800d586:	3314      	adds	r3, #20
 800d588:	2204      	movs	r2, #4
 800d58a:	701a      	strb	r2, [r3, #0]
 800d58c:	e034      	b.n	800d5f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d58e:	4920      	ldr	r1, [pc, #128]	; (800d610 <etharp_tmr+0x14c>)
 800d590:	687a      	ldr	r2, [r7, #4]
 800d592:	4613      	mov	r3, r2
 800d594:	005b      	lsls	r3, r3, #1
 800d596:	4413      	add	r3, r2
 800d598:	00db      	lsls	r3, r3, #3
 800d59a:	440b      	add	r3, r1
 800d59c:	3314      	adds	r3, #20
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	2b04      	cmp	r3, #4
 800d5a2:	d10a      	bne.n	800d5ba <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d5a4:	491a      	ldr	r1, [pc, #104]	; (800d610 <etharp_tmr+0x14c>)
 800d5a6:	687a      	ldr	r2, [r7, #4]
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	005b      	lsls	r3, r3, #1
 800d5ac:	4413      	add	r3, r2
 800d5ae:	00db      	lsls	r3, r3, #3
 800d5b0:	440b      	add	r3, r1
 800d5b2:	3314      	adds	r3, #20
 800d5b4:	2202      	movs	r2, #2
 800d5b6:	701a      	strb	r2, [r3, #0]
 800d5b8:	e01e      	b.n	800d5f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d5ba:	4915      	ldr	r1, [pc, #84]	; (800d610 <etharp_tmr+0x14c>)
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	4613      	mov	r3, r2
 800d5c0:	005b      	lsls	r3, r3, #1
 800d5c2:	4413      	add	r3, r2
 800d5c4:	00db      	lsls	r3, r3, #3
 800d5c6:	440b      	add	r3, r1
 800d5c8:	3314      	adds	r3, #20
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d113      	bne.n	800d5f8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d5d0:	490f      	ldr	r1, [pc, #60]	; (800d610 <etharp_tmr+0x14c>)
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	4613      	mov	r3, r2
 800d5d6:	005b      	lsls	r3, r3, #1
 800d5d8:	4413      	add	r3, r2
 800d5da:	00db      	lsls	r3, r3, #3
 800d5dc:	440b      	add	r3, r1
 800d5de:	3308      	adds	r3, #8
 800d5e0:	6818      	ldr	r0, [r3, #0]
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	4613      	mov	r3, r2
 800d5e6:	005b      	lsls	r3, r3, #1
 800d5e8:	4413      	add	r3, r2
 800d5ea:	00db      	lsls	r3, r3, #3
 800d5ec:	4a08      	ldr	r2, [pc, #32]	; (800d610 <etharp_tmr+0x14c>)
 800d5ee:	4413      	add	r3, r2
 800d5f0:	3304      	adds	r3, #4
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	f000 fe6e 	bl	800e2d4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	607b      	str	r3, [r7, #4]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2b09      	cmp	r3, #9
 800d602:	f77f af65 	ble.w	800d4d0 <etharp_tmr+0xc>
      }
    }
  }
}
 800d606:	bf00      	nop
 800d608:	bf00      	nop
 800d60a:	3708      	adds	r7, #8
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	24003248 	.word	0x24003248

0800d614 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b08a      	sub	sp, #40	; 0x28
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	460b      	mov	r3, r1
 800d61e:	607a      	str	r2, [r7, #4]
 800d620:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d622:	230a      	movs	r3, #10
 800d624:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d626:	230a      	movs	r3, #10
 800d628:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d62a:	230a      	movs	r3, #10
 800d62c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800d62e:	2300      	movs	r3, #0
 800d630:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d632:	230a      	movs	r3, #10
 800d634:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d636:	2300      	movs	r3, #0
 800d638:	83bb      	strh	r3, [r7, #28]
 800d63a:	2300      	movs	r3, #0
 800d63c:	837b      	strh	r3, [r7, #26]
 800d63e:	2300      	movs	r3, #0
 800d640:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d642:	2300      	movs	r3, #0
 800d644:	843b      	strh	r3, [r7, #32]
 800d646:	e0ae      	b.n	800d7a6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d648:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d64c:	49a6      	ldr	r1, [pc, #664]	; (800d8e8 <etharp_find_entry+0x2d4>)
 800d64e:	4613      	mov	r3, r2
 800d650:	005b      	lsls	r3, r3, #1
 800d652:	4413      	add	r3, r2
 800d654:	00db      	lsls	r3, r3, #3
 800d656:	440b      	add	r3, r1
 800d658:	3314      	adds	r3, #20
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d65e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d662:	2b0a      	cmp	r3, #10
 800d664:	d105      	bne.n	800d672 <etharp_find_entry+0x5e>
 800d666:	7dfb      	ldrb	r3, [r7, #23]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d102      	bne.n	800d672 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d66c:	8c3b      	ldrh	r3, [r7, #32]
 800d66e:	847b      	strh	r3, [r7, #34]	; 0x22
 800d670:	e095      	b.n	800d79e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d672:	7dfb      	ldrb	r3, [r7, #23]
 800d674:	2b00      	cmp	r3, #0
 800d676:	f000 8092 	beq.w	800d79e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d67a:	7dfb      	ldrb	r3, [r7, #23]
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	d009      	beq.n	800d694 <etharp_find_entry+0x80>
 800d680:	7dfb      	ldrb	r3, [r7, #23]
 800d682:	2b01      	cmp	r3, #1
 800d684:	d806      	bhi.n	800d694 <etharp_find_entry+0x80>
 800d686:	4b99      	ldr	r3, [pc, #612]	; (800d8ec <etharp_find_entry+0x2d8>)
 800d688:	f240 1223 	movw	r2, #291	; 0x123
 800d68c:	4998      	ldr	r1, [pc, #608]	; (800d8f0 <etharp_find_entry+0x2dc>)
 800d68e:	4899      	ldr	r0, [pc, #612]	; (800d8f4 <etharp_find_entry+0x2e0>)
 800d690:	f002 fa36 	bl	800fb00 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d020      	beq.n	800d6dc <etharp_find_entry+0xc8>
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	6819      	ldr	r1, [r3, #0]
 800d69e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6a2:	4891      	ldr	r0, [pc, #580]	; (800d8e8 <etharp_find_entry+0x2d4>)
 800d6a4:	4613      	mov	r3, r2
 800d6a6:	005b      	lsls	r3, r3, #1
 800d6a8:	4413      	add	r3, r2
 800d6aa:	00db      	lsls	r3, r3, #3
 800d6ac:	4403      	add	r3, r0
 800d6ae:	3304      	adds	r3, #4
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4299      	cmp	r1, r3
 800d6b4:	d112      	bne.n	800d6dc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d00c      	beq.n	800d6d6 <etharp_find_entry+0xc2>
 800d6bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6c0:	4989      	ldr	r1, [pc, #548]	; (800d8e8 <etharp_find_entry+0x2d4>)
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	005b      	lsls	r3, r3, #1
 800d6c6:	4413      	add	r3, r2
 800d6c8:	00db      	lsls	r3, r3, #3
 800d6ca:	440b      	add	r3, r1
 800d6cc:	3308      	adds	r3, #8
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d102      	bne.n	800d6dc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d6d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d6da:	e100      	b.n	800d8de <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d6dc:	7dfb      	ldrb	r3, [r7, #23]
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d140      	bne.n	800d764 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d6e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6e6:	4980      	ldr	r1, [pc, #512]	; (800d8e8 <etharp_find_entry+0x2d4>)
 800d6e8:	4613      	mov	r3, r2
 800d6ea:	005b      	lsls	r3, r3, #1
 800d6ec:	4413      	add	r3, r2
 800d6ee:	00db      	lsls	r3, r3, #3
 800d6f0:	440b      	add	r3, r1
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d01a      	beq.n	800d72e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d6f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6fc:	497a      	ldr	r1, [pc, #488]	; (800d8e8 <etharp_find_entry+0x2d4>)
 800d6fe:	4613      	mov	r3, r2
 800d700:	005b      	lsls	r3, r3, #1
 800d702:	4413      	add	r3, r2
 800d704:	00db      	lsls	r3, r3, #3
 800d706:	440b      	add	r3, r1
 800d708:	3312      	adds	r3, #18
 800d70a:	881b      	ldrh	r3, [r3, #0]
 800d70c:	8bba      	ldrh	r2, [r7, #28]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d845      	bhi.n	800d79e <etharp_find_entry+0x18a>
            old_queue = i;
 800d712:	8c3b      	ldrh	r3, [r7, #32]
 800d714:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d716:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d71a:	4973      	ldr	r1, [pc, #460]	; (800d8e8 <etharp_find_entry+0x2d4>)
 800d71c:	4613      	mov	r3, r2
 800d71e:	005b      	lsls	r3, r3, #1
 800d720:	4413      	add	r3, r2
 800d722:	00db      	lsls	r3, r3, #3
 800d724:	440b      	add	r3, r1
 800d726:	3312      	adds	r3, #18
 800d728:	881b      	ldrh	r3, [r3, #0]
 800d72a:	83bb      	strh	r3, [r7, #28]
 800d72c:	e037      	b.n	800d79e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d72e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d732:	496d      	ldr	r1, [pc, #436]	; (800d8e8 <etharp_find_entry+0x2d4>)
 800d734:	4613      	mov	r3, r2
 800d736:	005b      	lsls	r3, r3, #1
 800d738:	4413      	add	r3, r2
 800d73a:	00db      	lsls	r3, r3, #3
 800d73c:	440b      	add	r3, r1
 800d73e:	3312      	adds	r3, #18
 800d740:	881b      	ldrh	r3, [r3, #0]
 800d742:	8b7a      	ldrh	r2, [r7, #26]
 800d744:	429a      	cmp	r2, r3
 800d746:	d82a      	bhi.n	800d79e <etharp_find_entry+0x18a>
            old_pending = i;
 800d748:	8c3b      	ldrh	r3, [r7, #32]
 800d74a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d74c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d750:	4965      	ldr	r1, [pc, #404]	; (800d8e8 <etharp_find_entry+0x2d4>)
 800d752:	4613      	mov	r3, r2
 800d754:	005b      	lsls	r3, r3, #1
 800d756:	4413      	add	r3, r2
 800d758:	00db      	lsls	r3, r3, #3
 800d75a:	440b      	add	r3, r1
 800d75c:	3312      	adds	r3, #18
 800d75e:	881b      	ldrh	r3, [r3, #0]
 800d760:	837b      	strh	r3, [r7, #26]
 800d762:	e01c      	b.n	800d79e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d764:	7dfb      	ldrb	r3, [r7, #23]
 800d766:	2b01      	cmp	r3, #1
 800d768:	d919      	bls.n	800d79e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d76a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d76e:	495e      	ldr	r1, [pc, #376]	; (800d8e8 <etharp_find_entry+0x2d4>)
 800d770:	4613      	mov	r3, r2
 800d772:	005b      	lsls	r3, r3, #1
 800d774:	4413      	add	r3, r2
 800d776:	00db      	lsls	r3, r3, #3
 800d778:	440b      	add	r3, r1
 800d77a:	3312      	adds	r3, #18
 800d77c:	881b      	ldrh	r3, [r3, #0]
 800d77e:	8b3a      	ldrh	r2, [r7, #24]
 800d780:	429a      	cmp	r2, r3
 800d782:	d80c      	bhi.n	800d79e <etharp_find_entry+0x18a>
            old_stable = i;
 800d784:	8c3b      	ldrh	r3, [r7, #32]
 800d786:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d788:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d78c:	4956      	ldr	r1, [pc, #344]	; (800d8e8 <etharp_find_entry+0x2d4>)
 800d78e:	4613      	mov	r3, r2
 800d790:	005b      	lsls	r3, r3, #1
 800d792:	4413      	add	r3, r2
 800d794:	00db      	lsls	r3, r3, #3
 800d796:	440b      	add	r3, r1
 800d798:	3312      	adds	r3, #18
 800d79a:	881b      	ldrh	r3, [r3, #0]
 800d79c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d79e:	8c3b      	ldrh	r3, [r7, #32]
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	b29b      	uxth	r3, r3
 800d7a4:	843b      	strh	r3, [r7, #32]
 800d7a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d7aa:	2b09      	cmp	r3, #9
 800d7ac:	f77f af4c 	ble.w	800d648 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d7b0:	7afb      	ldrb	r3, [r7, #11]
 800d7b2:	f003 0302 	and.w	r3, r3, #2
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d108      	bne.n	800d7cc <etharp_find_entry+0x1b8>
 800d7ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d7be:	2b0a      	cmp	r3, #10
 800d7c0:	d107      	bne.n	800d7d2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d7c2:	7afb      	ldrb	r3, [r7, #11]
 800d7c4:	f003 0301 	and.w	r3, r3, #1
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d102      	bne.n	800d7d2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d7cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d7d0:	e085      	b.n	800d8de <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d7d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d7d6:	2b09      	cmp	r3, #9
 800d7d8:	dc02      	bgt.n	800d7e0 <etharp_find_entry+0x1cc>
    i = empty;
 800d7da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7dc:	843b      	strh	r3, [r7, #32]
 800d7de:	e039      	b.n	800d854 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d7e0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d7e4:	2b09      	cmp	r3, #9
 800d7e6:	dc14      	bgt.n	800d812 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d7e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7ea:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d7ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7f0:	493d      	ldr	r1, [pc, #244]	; (800d8e8 <etharp_find_entry+0x2d4>)
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	005b      	lsls	r3, r3, #1
 800d7f6:	4413      	add	r3, r2
 800d7f8:	00db      	lsls	r3, r3, #3
 800d7fa:	440b      	add	r3, r1
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d018      	beq.n	800d834 <etharp_find_entry+0x220>
 800d802:	4b3a      	ldr	r3, [pc, #232]	; (800d8ec <etharp_find_entry+0x2d8>)
 800d804:	f240 126d 	movw	r2, #365	; 0x16d
 800d808:	493b      	ldr	r1, [pc, #236]	; (800d8f8 <etharp_find_entry+0x2e4>)
 800d80a:	483a      	ldr	r0, [pc, #232]	; (800d8f4 <etharp_find_entry+0x2e0>)
 800d80c:	f002 f978 	bl	800fb00 <iprintf>
 800d810:	e010      	b.n	800d834 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d812:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d816:	2b09      	cmp	r3, #9
 800d818:	dc02      	bgt.n	800d820 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d81a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d81c:	843b      	strh	r3, [r7, #32]
 800d81e:	e009      	b.n	800d834 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d820:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d824:	2b09      	cmp	r3, #9
 800d826:	dc02      	bgt.n	800d82e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d828:	8bfb      	ldrh	r3, [r7, #30]
 800d82a:	843b      	strh	r3, [r7, #32]
 800d82c:	e002      	b.n	800d834 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d82e:	f04f 33ff 	mov.w	r3, #4294967295
 800d832:	e054      	b.n	800d8de <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d834:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d838:	2b09      	cmp	r3, #9
 800d83a:	dd06      	ble.n	800d84a <etharp_find_entry+0x236>
 800d83c:	4b2b      	ldr	r3, [pc, #172]	; (800d8ec <etharp_find_entry+0x2d8>)
 800d83e:	f240 127f 	movw	r2, #383	; 0x17f
 800d842:	492e      	ldr	r1, [pc, #184]	; (800d8fc <etharp_find_entry+0x2e8>)
 800d844:	482b      	ldr	r0, [pc, #172]	; (800d8f4 <etharp_find_entry+0x2e0>)
 800d846:	f002 f95b 	bl	800fb00 <iprintf>
    etharp_free_entry(i);
 800d84a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d84e:	4618      	mov	r0, r3
 800d850:	f7ff fe06 	bl	800d460 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d854:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d858:	2b09      	cmp	r3, #9
 800d85a:	dd06      	ble.n	800d86a <etharp_find_entry+0x256>
 800d85c:	4b23      	ldr	r3, [pc, #140]	; (800d8ec <etharp_find_entry+0x2d8>)
 800d85e:	f240 1283 	movw	r2, #387	; 0x183
 800d862:	4926      	ldr	r1, [pc, #152]	; (800d8fc <etharp_find_entry+0x2e8>)
 800d864:	4823      	ldr	r0, [pc, #140]	; (800d8f4 <etharp_find_entry+0x2e0>)
 800d866:	f002 f94b 	bl	800fb00 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d86a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d86e:	491e      	ldr	r1, [pc, #120]	; (800d8e8 <etharp_find_entry+0x2d4>)
 800d870:	4613      	mov	r3, r2
 800d872:	005b      	lsls	r3, r3, #1
 800d874:	4413      	add	r3, r2
 800d876:	00db      	lsls	r3, r3, #3
 800d878:	440b      	add	r3, r1
 800d87a:	3314      	adds	r3, #20
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d006      	beq.n	800d890 <etharp_find_entry+0x27c>
 800d882:	4b1a      	ldr	r3, [pc, #104]	; (800d8ec <etharp_find_entry+0x2d8>)
 800d884:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d888:	491d      	ldr	r1, [pc, #116]	; (800d900 <etharp_find_entry+0x2ec>)
 800d88a:	481a      	ldr	r0, [pc, #104]	; (800d8f4 <etharp_find_entry+0x2e0>)
 800d88c:	f002 f938 	bl	800fb00 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d00b      	beq.n	800d8ae <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d896:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	6819      	ldr	r1, [r3, #0]
 800d89e:	4812      	ldr	r0, [pc, #72]	; (800d8e8 <etharp_find_entry+0x2d4>)
 800d8a0:	4613      	mov	r3, r2
 800d8a2:	005b      	lsls	r3, r3, #1
 800d8a4:	4413      	add	r3, r2
 800d8a6:	00db      	lsls	r3, r3, #3
 800d8a8:	4403      	add	r3, r0
 800d8aa:	3304      	adds	r3, #4
 800d8ac:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d8ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8b2:	490d      	ldr	r1, [pc, #52]	; (800d8e8 <etharp_find_entry+0x2d4>)
 800d8b4:	4613      	mov	r3, r2
 800d8b6:	005b      	lsls	r3, r3, #1
 800d8b8:	4413      	add	r3, r2
 800d8ba:	00db      	lsls	r3, r3, #3
 800d8bc:	440b      	add	r3, r1
 800d8be:	3312      	adds	r3, #18
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d8c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8c8:	4907      	ldr	r1, [pc, #28]	; (800d8e8 <etharp_find_entry+0x2d4>)
 800d8ca:	4613      	mov	r3, r2
 800d8cc:	005b      	lsls	r3, r3, #1
 800d8ce:	4413      	add	r3, r2
 800d8d0:	00db      	lsls	r3, r3, #3
 800d8d2:	440b      	add	r3, r1
 800d8d4:	3308      	adds	r3, #8
 800d8d6:	687a      	ldr	r2, [r7, #4]
 800d8d8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d8da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3728      	adds	r7, #40	; 0x28
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	24003248 	.word	0x24003248
 800d8ec:	080132ac 	.word	0x080132ac
 800d8f0:	080132e4 	.word	0x080132e4
 800d8f4:	08013324 	.word	0x08013324
 800d8f8:	0801334c 	.word	0x0801334c
 800d8fc:	08013364 	.word	0x08013364
 800d900:	08013378 	.word	0x08013378

0800d904 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b088      	sub	sp, #32
 800d908:	af02      	add	r7, sp, #8
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	60b9      	str	r1, [r7, #8]
 800d90e:	607a      	str	r2, [r7, #4]
 800d910:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d918:	2b06      	cmp	r3, #6
 800d91a:	d006      	beq.n	800d92a <etharp_update_arp_entry+0x26>
 800d91c:	4b48      	ldr	r3, [pc, #288]	; (800da40 <etharp_update_arp_entry+0x13c>)
 800d91e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d922:	4948      	ldr	r1, [pc, #288]	; (800da44 <etharp_update_arp_entry+0x140>)
 800d924:	4848      	ldr	r0, [pc, #288]	; (800da48 <etharp_update_arp_entry+0x144>)
 800d926:	f002 f8eb 	bl	800fb00 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d012      	beq.n	800d956 <etharp_update_arp_entry+0x52>
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00e      	beq.n	800d956 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	68f9      	ldr	r1, [r7, #12]
 800d93e:	4618      	mov	r0, r3
 800d940:	f001 f924 	bl	800eb8c <ip4_addr_isbroadcast_u32>
 800d944:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d946:	2b00      	cmp	r3, #0
 800d948:	d105      	bne.n	800d956 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d952:	2be0      	cmp	r3, #224	; 0xe0
 800d954:	d102      	bne.n	800d95c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d956:	f06f 030f 	mvn.w	r3, #15
 800d95a:	e06c      	b.n	800da36 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d95c:	78fb      	ldrb	r3, [r7, #3]
 800d95e:	68fa      	ldr	r2, [r7, #12]
 800d960:	4619      	mov	r1, r3
 800d962:	68b8      	ldr	r0, [r7, #8]
 800d964:	f7ff fe56 	bl	800d614 <etharp_find_entry>
 800d968:	4603      	mov	r3, r0
 800d96a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d96c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d970:	2b00      	cmp	r3, #0
 800d972:	da02      	bge.n	800d97a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d974:	8afb      	ldrh	r3, [r7, #22]
 800d976:	b25b      	sxtb	r3, r3
 800d978:	e05d      	b.n	800da36 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d97a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d97e:	4933      	ldr	r1, [pc, #204]	; (800da4c <etharp_update_arp_entry+0x148>)
 800d980:	4613      	mov	r3, r2
 800d982:	005b      	lsls	r3, r3, #1
 800d984:	4413      	add	r3, r2
 800d986:	00db      	lsls	r3, r3, #3
 800d988:	440b      	add	r3, r1
 800d98a:	3314      	adds	r3, #20
 800d98c:	2202      	movs	r2, #2
 800d98e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d990:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d994:	492d      	ldr	r1, [pc, #180]	; (800da4c <etharp_update_arp_entry+0x148>)
 800d996:	4613      	mov	r3, r2
 800d998:	005b      	lsls	r3, r3, #1
 800d99a:	4413      	add	r3, r2
 800d99c:	00db      	lsls	r3, r3, #3
 800d99e:	440b      	add	r3, r1
 800d9a0:	3308      	adds	r3, #8
 800d9a2:	68fa      	ldr	r2, [r7, #12]
 800d9a4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d9a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9aa:	4613      	mov	r3, r2
 800d9ac:	005b      	lsls	r3, r3, #1
 800d9ae:	4413      	add	r3, r2
 800d9b0:	00db      	lsls	r3, r3, #3
 800d9b2:	3308      	adds	r3, #8
 800d9b4:	4a25      	ldr	r2, [pc, #148]	; (800da4c <etharp_update_arp_entry+0x148>)
 800d9b6:	4413      	add	r3, r2
 800d9b8:	3304      	adds	r3, #4
 800d9ba:	2206      	movs	r2, #6
 800d9bc:	6879      	ldr	r1, [r7, #4]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f002 f86e 	bl	800faa0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d9c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9c8:	4920      	ldr	r1, [pc, #128]	; (800da4c <etharp_update_arp_entry+0x148>)
 800d9ca:	4613      	mov	r3, r2
 800d9cc:	005b      	lsls	r3, r3, #1
 800d9ce:	4413      	add	r3, r2
 800d9d0:	00db      	lsls	r3, r3, #3
 800d9d2:	440b      	add	r3, r1
 800d9d4:	3312      	adds	r3, #18
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d9da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9de:	491b      	ldr	r1, [pc, #108]	; (800da4c <etharp_update_arp_entry+0x148>)
 800d9e0:	4613      	mov	r3, r2
 800d9e2:	005b      	lsls	r3, r3, #1
 800d9e4:	4413      	add	r3, r2
 800d9e6:	00db      	lsls	r3, r3, #3
 800d9e8:	440b      	add	r3, r1
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d021      	beq.n	800da34 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d9f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9f4:	4915      	ldr	r1, [pc, #84]	; (800da4c <etharp_update_arp_entry+0x148>)
 800d9f6:	4613      	mov	r3, r2
 800d9f8:	005b      	lsls	r3, r3, #1
 800d9fa:	4413      	add	r3, r2
 800d9fc:	00db      	lsls	r3, r3, #3
 800d9fe:	440b      	add	r3, r1
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800da04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800da08:	4910      	ldr	r1, [pc, #64]	; (800da4c <etharp_update_arp_entry+0x148>)
 800da0a:	4613      	mov	r3, r2
 800da0c:	005b      	lsls	r3, r3, #1
 800da0e:	4413      	add	r3, r2
 800da10:	00db      	lsls	r3, r3, #3
 800da12:	440b      	add	r3, r1
 800da14:	2200      	movs	r2, #0
 800da16:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800da1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da22:	9300      	str	r3, [sp, #0]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6939      	ldr	r1, [r7, #16]
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	f001 ffbd 	bl	800f9a8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800da2e:	6938      	ldr	r0, [r7, #16]
 800da30:	f7f9 fa36 	bl	8006ea0 <pbuf_free>
  }
  return ERR_OK;
 800da34:	2300      	movs	r3, #0
}
 800da36:	4618      	mov	r0, r3
 800da38:	3718      	adds	r7, #24
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	080132ac 	.word	0x080132ac
 800da44:	080133a4 	.word	0x080133a4
 800da48:	08013324 	.word	0x08013324
 800da4c:	24003248 	.word	0x24003248

0800da50 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800da58:	2300      	movs	r3, #0
 800da5a:	60fb      	str	r3, [r7, #12]
 800da5c:	e01e      	b.n	800da9c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800da5e:	4913      	ldr	r1, [pc, #76]	; (800daac <etharp_cleanup_netif+0x5c>)
 800da60:	68fa      	ldr	r2, [r7, #12]
 800da62:	4613      	mov	r3, r2
 800da64:	005b      	lsls	r3, r3, #1
 800da66:	4413      	add	r3, r2
 800da68:	00db      	lsls	r3, r3, #3
 800da6a:	440b      	add	r3, r1
 800da6c:	3314      	adds	r3, #20
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800da72:	7afb      	ldrb	r3, [r7, #11]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d00e      	beq.n	800da96 <etharp_cleanup_netif+0x46>
 800da78:	490c      	ldr	r1, [pc, #48]	; (800daac <etharp_cleanup_netif+0x5c>)
 800da7a:	68fa      	ldr	r2, [r7, #12]
 800da7c:	4613      	mov	r3, r2
 800da7e:	005b      	lsls	r3, r3, #1
 800da80:	4413      	add	r3, r2
 800da82:	00db      	lsls	r3, r3, #3
 800da84:	440b      	add	r3, r1
 800da86:	3308      	adds	r3, #8
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	687a      	ldr	r2, [r7, #4]
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d102      	bne.n	800da96 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800da90:	68f8      	ldr	r0, [r7, #12]
 800da92:	f7ff fce5 	bl	800d460 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	3301      	adds	r3, #1
 800da9a:	60fb      	str	r3, [r7, #12]
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2b09      	cmp	r3, #9
 800daa0:	dddd      	ble.n	800da5e <etharp_cleanup_netif+0xe>
    }
  }
}
 800daa2:	bf00      	nop
 800daa4:	bf00      	nop
 800daa6:	3710      	adds	r7, #16
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}
 800daac:	24003248 	.word	0x24003248

0800dab0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800dab0:	b5b0      	push	{r4, r5, r7, lr}
 800dab2:	b08a      	sub	sp, #40	; 0x28
 800dab4:	af04      	add	r7, sp, #16
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d107      	bne.n	800dad0 <etharp_input+0x20>
 800dac0:	4b3d      	ldr	r3, [pc, #244]	; (800dbb8 <etharp_input+0x108>)
 800dac2:	f240 228a 	movw	r2, #650	; 0x28a
 800dac6:	493d      	ldr	r1, [pc, #244]	; (800dbbc <etharp_input+0x10c>)
 800dac8:	483d      	ldr	r0, [pc, #244]	; (800dbc0 <etharp_input+0x110>)
 800daca:	f002 f819 	bl	800fb00 <iprintf>
 800dace:	e06f      	b.n	800dbb0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	881b      	ldrh	r3, [r3, #0]
 800dada:	b29b      	uxth	r3, r3
 800dadc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dae0:	d10c      	bne.n	800dafc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dae6:	2b06      	cmp	r3, #6
 800dae8:	d108      	bne.n	800dafc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800daee:	2b04      	cmp	r3, #4
 800daf0:	d104      	bne.n	800dafc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	885b      	ldrh	r3, [r3, #2]
 800daf6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800daf8:	2b08      	cmp	r3, #8
 800dafa:	d003      	beq.n	800db04 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f7f9 f9cf 	bl	8006ea0 <pbuf_free>
    return;
 800db02:	e055      	b.n	800dbb0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	330e      	adds	r3, #14
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	3318      	adds	r3, #24
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	3304      	adds	r3, #4
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d102      	bne.n	800db24 <etharp_input+0x74>
    for_us = 0;
 800db1e:	2300      	movs	r3, #0
 800db20:	75fb      	strb	r3, [r7, #23]
 800db22:	e009      	b.n	800db38 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800db24:	68ba      	ldr	r2, [r7, #8]
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	3304      	adds	r3, #4
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	bf0c      	ite	eq
 800db30:	2301      	moveq	r3, #1
 800db32:	2300      	movne	r3, #0
 800db34:	b2db      	uxtb	r3, r3
 800db36:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	f103 0208 	add.w	r2, r3, #8
 800db3e:	7dfb      	ldrb	r3, [r7, #23]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d001      	beq.n	800db48 <etharp_input+0x98>
 800db44:	2301      	movs	r3, #1
 800db46:	e000      	b.n	800db4a <etharp_input+0x9a>
 800db48:	2302      	movs	r3, #2
 800db4a:	f107 010c 	add.w	r1, r7, #12
 800db4e:	6838      	ldr	r0, [r7, #0]
 800db50:	f7ff fed8 	bl	800d904 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	88db      	ldrh	r3, [r3, #6]
 800db58:	b29b      	uxth	r3, r3
 800db5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db5e:	d003      	beq.n	800db68 <etharp_input+0xb8>
 800db60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db64:	d01e      	beq.n	800dba4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800db66:	e020      	b.n	800dbaa <etharp_input+0xfa>
      if (for_us) {
 800db68:	7dfb      	ldrb	r3, [r7, #23]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d01c      	beq.n	800dba8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800db84:	693a      	ldr	r2, [r7, #16]
 800db86:	3208      	adds	r2, #8
        etharp_raw(netif,
 800db88:	2102      	movs	r1, #2
 800db8a:	9103      	str	r1, [sp, #12]
 800db8c:	f107 010c 	add.w	r1, r7, #12
 800db90:	9102      	str	r1, [sp, #8]
 800db92:	9201      	str	r2, [sp, #4]
 800db94:	9300      	str	r3, [sp, #0]
 800db96:	462b      	mov	r3, r5
 800db98:	4622      	mov	r2, r4
 800db9a:	4601      	mov	r1, r0
 800db9c:	6838      	ldr	r0, [r7, #0]
 800db9e:	f000 faeb 	bl	800e178 <etharp_raw>
      break;
 800dba2:	e001      	b.n	800dba8 <etharp_input+0xf8>
      break;
 800dba4:	bf00      	nop
 800dba6:	e000      	b.n	800dbaa <etharp_input+0xfa>
      break;
 800dba8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f7f9 f978 	bl	8006ea0 <pbuf_free>
}
 800dbb0:	3718      	adds	r7, #24
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bdb0      	pop	{r4, r5, r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	080132ac 	.word	0x080132ac
 800dbbc:	080133fc 	.word	0x080133fc
 800dbc0:	08013324 	.word	0x08013324

0800dbc4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b086      	sub	sp, #24
 800dbc8:	af02      	add	r7, sp, #8
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	60b9      	str	r1, [r7, #8]
 800dbce:	4613      	mov	r3, r2
 800dbd0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800dbd2:	79fa      	ldrb	r2, [r7, #7]
 800dbd4:	4944      	ldr	r1, [pc, #272]	; (800dce8 <etharp_output_to_arp_index+0x124>)
 800dbd6:	4613      	mov	r3, r2
 800dbd8:	005b      	lsls	r3, r3, #1
 800dbda:	4413      	add	r3, r2
 800dbdc:	00db      	lsls	r3, r3, #3
 800dbde:	440b      	add	r3, r1
 800dbe0:	3314      	adds	r3, #20
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d806      	bhi.n	800dbf6 <etharp_output_to_arp_index+0x32>
 800dbe8:	4b40      	ldr	r3, [pc, #256]	; (800dcec <etharp_output_to_arp_index+0x128>)
 800dbea:	f240 22ee 	movw	r2, #750	; 0x2ee
 800dbee:	4940      	ldr	r1, [pc, #256]	; (800dcf0 <etharp_output_to_arp_index+0x12c>)
 800dbf0:	4840      	ldr	r0, [pc, #256]	; (800dcf4 <etharp_output_to_arp_index+0x130>)
 800dbf2:	f001 ff85 	bl	800fb00 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800dbf6:	79fa      	ldrb	r2, [r7, #7]
 800dbf8:	493b      	ldr	r1, [pc, #236]	; (800dce8 <etharp_output_to_arp_index+0x124>)
 800dbfa:	4613      	mov	r3, r2
 800dbfc:	005b      	lsls	r3, r3, #1
 800dbfe:	4413      	add	r3, r2
 800dc00:	00db      	lsls	r3, r3, #3
 800dc02:	440b      	add	r3, r1
 800dc04:	3314      	adds	r3, #20
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	2b02      	cmp	r3, #2
 800dc0a:	d153      	bne.n	800dcb4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800dc0c:	79fa      	ldrb	r2, [r7, #7]
 800dc0e:	4936      	ldr	r1, [pc, #216]	; (800dce8 <etharp_output_to_arp_index+0x124>)
 800dc10:	4613      	mov	r3, r2
 800dc12:	005b      	lsls	r3, r3, #1
 800dc14:	4413      	add	r3, r2
 800dc16:	00db      	lsls	r3, r3, #3
 800dc18:	440b      	add	r3, r1
 800dc1a:	3312      	adds	r3, #18
 800dc1c:	881b      	ldrh	r3, [r3, #0]
 800dc1e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800dc22:	d919      	bls.n	800dc58 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800dc24:	79fa      	ldrb	r2, [r7, #7]
 800dc26:	4613      	mov	r3, r2
 800dc28:	005b      	lsls	r3, r3, #1
 800dc2a:	4413      	add	r3, r2
 800dc2c:	00db      	lsls	r3, r3, #3
 800dc2e:	4a2e      	ldr	r2, [pc, #184]	; (800dce8 <etharp_output_to_arp_index+0x124>)
 800dc30:	4413      	add	r3, r2
 800dc32:	3304      	adds	r3, #4
 800dc34:	4619      	mov	r1, r3
 800dc36:	68f8      	ldr	r0, [r7, #12]
 800dc38:	f000 fb4c 	bl	800e2d4 <etharp_request>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d138      	bne.n	800dcb4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dc42:	79fa      	ldrb	r2, [r7, #7]
 800dc44:	4928      	ldr	r1, [pc, #160]	; (800dce8 <etharp_output_to_arp_index+0x124>)
 800dc46:	4613      	mov	r3, r2
 800dc48:	005b      	lsls	r3, r3, #1
 800dc4a:	4413      	add	r3, r2
 800dc4c:	00db      	lsls	r3, r3, #3
 800dc4e:	440b      	add	r3, r1
 800dc50:	3314      	adds	r3, #20
 800dc52:	2203      	movs	r2, #3
 800dc54:	701a      	strb	r2, [r3, #0]
 800dc56:	e02d      	b.n	800dcb4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800dc58:	79fa      	ldrb	r2, [r7, #7]
 800dc5a:	4923      	ldr	r1, [pc, #140]	; (800dce8 <etharp_output_to_arp_index+0x124>)
 800dc5c:	4613      	mov	r3, r2
 800dc5e:	005b      	lsls	r3, r3, #1
 800dc60:	4413      	add	r3, r2
 800dc62:	00db      	lsls	r3, r3, #3
 800dc64:	440b      	add	r3, r1
 800dc66:	3312      	adds	r3, #18
 800dc68:	881b      	ldrh	r3, [r3, #0]
 800dc6a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800dc6e:	d321      	bcc.n	800dcb4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800dc70:	79fa      	ldrb	r2, [r7, #7]
 800dc72:	4613      	mov	r3, r2
 800dc74:	005b      	lsls	r3, r3, #1
 800dc76:	4413      	add	r3, r2
 800dc78:	00db      	lsls	r3, r3, #3
 800dc7a:	4a1b      	ldr	r2, [pc, #108]	; (800dce8 <etharp_output_to_arp_index+0x124>)
 800dc7c:	4413      	add	r3, r2
 800dc7e:	1d19      	adds	r1, r3, #4
 800dc80:	79fa      	ldrb	r2, [r7, #7]
 800dc82:	4613      	mov	r3, r2
 800dc84:	005b      	lsls	r3, r3, #1
 800dc86:	4413      	add	r3, r2
 800dc88:	00db      	lsls	r3, r3, #3
 800dc8a:	3308      	adds	r3, #8
 800dc8c:	4a16      	ldr	r2, [pc, #88]	; (800dce8 <etharp_output_to_arp_index+0x124>)
 800dc8e:	4413      	add	r3, r2
 800dc90:	3304      	adds	r3, #4
 800dc92:	461a      	mov	r2, r3
 800dc94:	68f8      	ldr	r0, [r7, #12]
 800dc96:	f000 fafb 	bl	800e290 <etharp_request_dst>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d109      	bne.n	800dcb4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dca0:	79fa      	ldrb	r2, [r7, #7]
 800dca2:	4911      	ldr	r1, [pc, #68]	; (800dce8 <etharp_output_to_arp_index+0x124>)
 800dca4:	4613      	mov	r3, r2
 800dca6:	005b      	lsls	r3, r3, #1
 800dca8:	4413      	add	r3, r2
 800dcaa:	00db      	lsls	r3, r3, #3
 800dcac:	440b      	add	r3, r1
 800dcae:	3314      	adds	r3, #20
 800dcb0:	2203      	movs	r2, #3
 800dcb2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800dcba:	79fa      	ldrb	r2, [r7, #7]
 800dcbc:	4613      	mov	r3, r2
 800dcbe:	005b      	lsls	r3, r3, #1
 800dcc0:	4413      	add	r3, r2
 800dcc2:	00db      	lsls	r3, r3, #3
 800dcc4:	3308      	adds	r3, #8
 800dcc6:	4a08      	ldr	r2, [pc, #32]	; (800dce8 <etharp_output_to_arp_index+0x124>)
 800dcc8:	4413      	add	r3, r2
 800dcca:	3304      	adds	r3, #4
 800dccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dcd0:	9200      	str	r2, [sp, #0]
 800dcd2:	460a      	mov	r2, r1
 800dcd4:	68b9      	ldr	r1, [r7, #8]
 800dcd6:	68f8      	ldr	r0, [r7, #12]
 800dcd8:	f001 fe66 	bl	800f9a8 <ethernet_output>
 800dcdc:	4603      	mov	r3, r0
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	24003248 	.word	0x24003248
 800dcec:	080132ac 	.word	0x080132ac
 800dcf0:	0801341c 	.word	0x0801341c
 800dcf4:	08013324 	.word	0x08013324

0800dcf8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b08a      	sub	sp, #40	; 0x28
 800dcfc:	af02      	add	r7, sp, #8
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d106      	bne.n	800dd1c <etharp_output+0x24>
 800dd0e:	4b73      	ldr	r3, [pc, #460]	; (800dedc <etharp_output+0x1e4>)
 800dd10:	f240 321e 	movw	r2, #798	; 0x31e
 800dd14:	4972      	ldr	r1, [pc, #456]	; (800dee0 <etharp_output+0x1e8>)
 800dd16:	4873      	ldr	r0, [pc, #460]	; (800dee4 <etharp_output+0x1ec>)
 800dd18:	f001 fef2 	bl	800fb00 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d106      	bne.n	800dd30 <etharp_output+0x38>
 800dd22:	4b6e      	ldr	r3, [pc, #440]	; (800dedc <etharp_output+0x1e4>)
 800dd24:	f240 321f 	movw	r2, #799	; 0x31f
 800dd28:	496f      	ldr	r1, [pc, #444]	; (800dee8 <etharp_output+0x1f0>)
 800dd2a:	486e      	ldr	r0, [pc, #440]	; (800dee4 <etharp_output+0x1ec>)
 800dd2c:	f001 fee8 	bl	800fb00 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d106      	bne.n	800dd44 <etharp_output+0x4c>
 800dd36:	4b69      	ldr	r3, [pc, #420]	; (800dedc <etharp_output+0x1e4>)
 800dd38:	f44f 7248 	mov.w	r2, #800	; 0x320
 800dd3c:	496b      	ldr	r1, [pc, #428]	; (800deec <etharp_output+0x1f4>)
 800dd3e:	4869      	ldr	r0, [pc, #420]	; (800dee4 <etharp_output+0x1ec>)
 800dd40:	f001 fede 	bl	800fb00 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	68f9      	ldr	r1, [r7, #12]
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f000 ff1e 	bl	800eb8c <ip4_addr_isbroadcast_u32>
 800dd50:	4603      	mov	r3, r0
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d002      	beq.n	800dd5c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800dd56:	4b66      	ldr	r3, [pc, #408]	; (800def0 <etharp_output+0x1f8>)
 800dd58:	61fb      	str	r3, [r7, #28]
 800dd5a:	e0af      	b.n	800debc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd64:	2be0      	cmp	r3, #224	; 0xe0
 800dd66:	d118      	bne.n	800dd9a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800dd70:	235e      	movs	r3, #94	; 0x5e
 800dd72:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	3301      	adds	r3, #1
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd7e:	b2db      	uxtb	r3, r3
 800dd80:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	3302      	adds	r3, #2
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	3303      	adds	r3, #3
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800dd92:	f107 0310 	add.w	r3, r7, #16
 800dd96:	61fb      	str	r3, [r7, #28]
 800dd98:	e090      	b.n	800debc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681a      	ldr	r2, [r3, #0]
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	3304      	adds	r3, #4
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	405a      	eors	r2, r3
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	3308      	adds	r3, #8
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	4013      	ands	r3, r2
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d012      	beq.n	800ddd8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ddb8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d00b      	beq.n	800ddd8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	330c      	adds	r3, #12
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d003      	beq.n	800ddd2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	330c      	adds	r3, #12
 800ddce:	61bb      	str	r3, [r7, #24]
 800ddd0:	e002      	b.n	800ddd8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ddd2:	f06f 0303 	mvn.w	r3, #3
 800ddd6:	e07d      	b.n	800ded4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ddd8:	4b46      	ldr	r3, [pc, #280]	; (800def4 <etharp_output+0x1fc>)
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	4619      	mov	r1, r3
 800ddde:	4a46      	ldr	r2, [pc, #280]	; (800def8 <etharp_output+0x200>)
 800dde0:	460b      	mov	r3, r1
 800dde2:	005b      	lsls	r3, r3, #1
 800dde4:	440b      	add	r3, r1
 800dde6:	00db      	lsls	r3, r3, #3
 800dde8:	4413      	add	r3, r2
 800ddea:	3314      	adds	r3, #20
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	d925      	bls.n	800de3e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ddf2:	4b40      	ldr	r3, [pc, #256]	; (800def4 <etharp_output+0x1fc>)
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	4a3f      	ldr	r2, [pc, #252]	; (800def8 <etharp_output+0x200>)
 800ddfa:	460b      	mov	r3, r1
 800ddfc:	005b      	lsls	r3, r3, #1
 800ddfe:	440b      	add	r3, r1
 800de00:	00db      	lsls	r3, r3, #3
 800de02:	4413      	add	r3, r2
 800de04:	3308      	adds	r3, #8
 800de06:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800de08:	68fa      	ldr	r2, [r7, #12]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d117      	bne.n	800de3e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800de0e:	69bb      	ldr	r3, [r7, #24]
 800de10:	681a      	ldr	r2, [r3, #0]
 800de12:	4b38      	ldr	r3, [pc, #224]	; (800def4 <etharp_output+0x1fc>)
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	4618      	mov	r0, r3
 800de18:	4937      	ldr	r1, [pc, #220]	; (800def8 <etharp_output+0x200>)
 800de1a:	4603      	mov	r3, r0
 800de1c:	005b      	lsls	r3, r3, #1
 800de1e:	4403      	add	r3, r0
 800de20:	00db      	lsls	r3, r3, #3
 800de22:	440b      	add	r3, r1
 800de24:	3304      	adds	r3, #4
 800de26:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800de28:	429a      	cmp	r2, r3
 800de2a:	d108      	bne.n	800de3e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800de2c:	4b31      	ldr	r3, [pc, #196]	; (800def4 <etharp_output+0x1fc>)
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	461a      	mov	r2, r3
 800de32:	68b9      	ldr	r1, [r7, #8]
 800de34:	68f8      	ldr	r0, [r7, #12]
 800de36:	f7ff fec5 	bl	800dbc4 <etharp_output_to_arp_index>
 800de3a:	4603      	mov	r3, r0
 800de3c:	e04a      	b.n	800ded4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800de3e:	2300      	movs	r3, #0
 800de40:	75fb      	strb	r3, [r7, #23]
 800de42:	e031      	b.n	800dea8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800de44:	7dfa      	ldrb	r2, [r7, #23]
 800de46:	492c      	ldr	r1, [pc, #176]	; (800def8 <etharp_output+0x200>)
 800de48:	4613      	mov	r3, r2
 800de4a:	005b      	lsls	r3, r3, #1
 800de4c:	4413      	add	r3, r2
 800de4e:	00db      	lsls	r3, r3, #3
 800de50:	440b      	add	r3, r1
 800de52:	3314      	adds	r3, #20
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	2b01      	cmp	r3, #1
 800de58:	d923      	bls.n	800dea2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800de5a:	7dfa      	ldrb	r2, [r7, #23]
 800de5c:	4926      	ldr	r1, [pc, #152]	; (800def8 <etharp_output+0x200>)
 800de5e:	4613      	mov	r3, r2
 800de60:	005b      	lsls	r3, r3, #1
 800de62:	4413      	add	r3, r2
 800de64:	00db      	lsls	r3, r3, #3
 800de66:	440b      	add	r3, r1
 800de68:	3308      	adds	r3, #8
 800de6a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800de6c:	68fa      	ldr	r2, [r7, #12]
 800de6e:	429a      	cmp	r2, r3
 800de70:	d117      	bne.n	800dea2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800de72:	69bb      	ldr	r3, [r7, #24]
 800de74:	6819      	ldr	r1, [r3, #0]
 800de76:	7dfa      	ldrb	r2, [r7, #23]
 800de78:	481f      	ldr	r0, [pc, #124]	; (800def8 <etharp_output+0x200>)
 800de7a:	4613      	mov	r3, r2
 800de7c:	005b      	lsls	r3, r3, #1
 800de7e:	4413      	add	r3, r2
 800de80:	00db      	lsls	r3, r3, #3
 800de82:	4403      	add	r3, r0
 800de84:	3304      	adds	r3, #4
 800de86:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800de88:	4299      	cmp	r1, r3
 800de8a:	d10a      	bne.n	800dea2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800de8c:	4a19      	ldr	r2, [pc, #100]	; (800def4 <etharp_output+0x1fc>)
 800de8e:	7dfb      	ldrb	r3, [r7, #23]
 800de90:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800de92:	7dfb      	ldrb	r3, [r7, #23]
 800de94:	461a      	mov	r2, r3
 800de96:	68b9      	ldr	r1, [r7, #8]
 800de98:	68f8      	ldr	r0, [r7, #12]
 800de9a:	f7ff fe93 	bl	800dbc4 <etharp_output_to_arp_index>
 800de9e:	4603      	mov	r3, r0
 800dea0:	e018      	b.n	800ded4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dea2:	7dfb      	ldrb	r3, [r7, #23]
 800dea4:	3301      	adds	r3, #1
 800dea6:	75fb      	strb	r3, [r7, #23]
 800dea8:	7dfb      	ldrb	r3, [r7, #23]
 800deaa:	2b09      	cmp	r3, #9
 800deac:	d9ca      	bls.n	800de44 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800deae:	68ba      	ldr	r2, [r7, #8]
 800deb0:	69b9      	ldr	r1, [r7, #24]
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	f000 f822 	bl	800defc <etharp_query>
 800deb8:	4603      	mov	r3, r0
 800deba:	e00b      	b.n	800ded4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800dec2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dec6:	9300      	str	r3, [sp, #0]
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	68b9      	ldr	r1, [r7, #8]
 800decc:	68f8      	ldr	r0, [r7, #12]
 800dece:	f001 fd6b 	bl	800f9a8 <ethernet_output>
 800ded2:	4603      	mov	r3, r0
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3720      	adds	r7, #32
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	080132ac 	.word	0x080132ac
 800dee0:	080133fc 	.word	0x080133fc
 800dee4:	08013324 	.word	0x08013324
 800dee8:	0801344c 	.word	0x0801344c
 800deec:	080133ec 	.word	0x080133ec
 800def0:	08013a60 	.word	0x08013a60
 800def4:	24003338 	.word	0x24003338
 800def8:	24003248 	.word	0x24003248

0800defc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b08c      	sub	sp, #48	; 0x30
 800df00:	af02      	add	r7, sp, #8
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	60b9      	str	r1, [r7, #8]
 800df06:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	3326      	adds	r3, #38	; 0x26
 800df0c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800df0e:	23ff      	movs	r3, #255	; 0xff
 800df10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800df14:	2300      	movs	r3, #0
 800df16:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	68f9      	ldr	r1, [r7, #12]
 800df1e:	4618      	mov	r0, r3
 800df20:	f000 fe34 	bl	800eb8c <ip4_addr_isbroadcast_u32>
 800df24:	4603      	mov	r3, r0
 800df26:	2b00      	cmp	r3, #0
 800df28:	d10c      	bne.n	800df44 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800df32:	2be0      	cmp	r3, #224	; 0xe0
 800df34:	d006      	beq.n	800df44 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d003      	beq.n	800df44 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d102      	bne.n	800df4a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800df44:	f06f 030f 	mvn.w	r3, #15
 800df48:	e101      	b.n	800e14e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800df4a:	68fa      	ldr	r2, [r7, #12]
 800df4c:	2101      	movs	r1, #1
 800df4e:	68b8      	ldr	r0, [r7, #8]
 800df50:	f7ff fb60 	bl	800d614 <etharp_find_entry>
 800df54:	4603      	mov	r3, r0
 800df56:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800df58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	da02      	bge.n	800df66 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800df60:	8a7b      	ldrh	r3, [r7, #18]
 800df62:	b25b      	sxtb	r3, r3
 800df64:	e0f3      	b.n	800e14e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800df66:	8a7b      	ldrh	r3, [r7, #18]
 800df68:	2b7e      	cmp	r3, #126	; 0x7e
 800df6a:	d906      	bls.n	800df7a <etharp_query+0x7e>
 800df6c:	4b7a      	ldr	r3, [pc, #488]	; (800e158 <etharp_query+0x25c>)
 800df6e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800df72:	497a      	ldr	r1, [pc, #488]	; (800e15c <etharp_query+0x260>)
 800df74:	487a      	ldr	r0, [pc, #488]	; (800e160 <etharp_query+0x264>)
 800df76:	f001 fdc3 	bl	800fb00 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800df7a:	8a7b      	ldrh	r3, [r7, #18]
 800df7c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800df7e:	7c7a      	ldrb	r2, [r7, #17]
 800df80:	4978      	ldr	r1, [pc, #480]	; (800e164 <etharp_query+0x268>)
 800df82:	4613      	mov	r3, r2
 800df84:	005b      	lsls	r3, r3, #1
 800df86:	4413      	add	r3, r2
 800df88:	00db      	lsls	r3, r3, #3
 800df8a:	440b      	add	r3, r1
 800df8c:	3314      	adds	r3, #20
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d115      	bne.n	800dfc0 <etharp_query+0xc4>
    is_new_entry = 1;
 800df94:	2301      	movs	r3, #1
 800df96:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800df98:	7c7a      	ldrb	r2, [r7, #17]
 800df9a:	4972      	ldr	r1, [pc, #456]	; (800e164 <etharp_query+0x268>)
 800df9c:	4613      	mov	r3, r2
 800df9e:	005b      	lsls	r3, r3, #1
 800dfa0:	4413      	add	r3, r2
 800dfa2:	00db      	lsls	r3, r3, #3
 800dfa4:	440b      	add	r3, r1
 800dfa6:	3314      	adds	r3, #20
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800dfac:	7c7a      	ldrb	r2, [r7, #17]
 800dfae:	496d      	ldr	r1, [pc, #436]	; (800e164 <etharp_query+0x268>)
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	005b      	lsls	r3, r3, #1
 800dfb4:	4413      	add	r3, r2
 800dfb6:	00db      	lsls	r3, r3, #3
 800dfb8:	440b      	add	r3, r1
 800dfba:	3308      	adds	r3, #8
 800dfbc:	68fa      	ldr	r2, [r7, #12]
 800dfbe:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800dfc0:	7c7a      	ldrb	r2, [r7, #17]
 800dfc2:	4968      	ldr	r1, [pc, #416]	; (800e164 <etharp_query+0x268>)
 800dfc4:	4613      	mov	r3, r2
 800dfc6:	005b      	lsls	r3, r3, #1
 800dfc8:	4413      	add	r3, r2
 800dfca:	00db      	lsls	r3, r3, #3
 800dfcc:	440b      	add	r3, r1
 800dfce:	3314      	adds	r3, #20
 800dfd0:	781b      	ldrb	r3, [r3, #0]
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	d011      	beq.n	800dffa <etharp_query+0xfe>
 800dfd6:	7c7a      	ldrb	r2, [r7, #17]
 800dfd8:	4962      	ldr	r1, [pc, #392]	; (800e164 <etharp_query+0x268>)
 800dfda:	4613      	mov	r3, r2
 800dfdc:	005b      	lsls	r3, r3, #1
 800dfde:	4413      	add	r3, r2
 800dfe0:	00db      	lsls	r3, r3, #3
 800dfe2:	440b      	add	r3, r1
 800dfe4:	3314      	adds	r3, #20
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	2b01      	cmp	r3, #1
 800dfea:	d806      	bhi.n	800dffa <etharp_query+0xfe>
 800dfec:	4b5a      	ldr	r3, [pc, #360]	; (800e158 <etharp_query+0x25c>)
 800dfee:	f240 32cd 	movw	r2, #973	; 0x3cd
 800dff2:	495d      	ldr	r1, [pc, #372]	; (800e168 <etharp_query+0x26c>)
 800dff4:	485a      	ldr	r0, [pc, #360]	; (800e160 <etharp_query+0x264>)
 800dff6:	f001 fd83 	bl	800fb00 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800dffa:	6a3b      	ldr	r3, [r7, #32]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d102      	bne.n	800e006 <etharp_query+0x10a>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d10c      	bne.n	800e020 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e006:	68b9      	ldr	r1, [r7, #8]
 800e008:	68f8      	ldr	r0, [r7, #12]
 800e00a:	f000 f963 	bl	800e2d4 <etharp_request>
 800e00e:	4603      	mov	r3, r0
 800e010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d102      	bne.n	800e020 <etharp_query+0x124>
      return result;
 800e01a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e01e:	e096      	b.n	800e14e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d106      	bne.n	800e034 <etharp_query+0x138>
 800e026:	4b4c      	ldr	r3, [pc, #304]	; (800e158 <etharp_query+0x25c>)
 800e028:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e02c:	494f      	ldr	r1, [pc, #316]	; (800e16c <etharp_query+0x270>)
 800e02e:	484c      	ldr	r0, [pc, #304]	; (800e160 <etharp_query+0x264>)
 800e030:	f001 fd66 	bl	800fb00 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e034:	7c7a      	ldrb	r2, [r7, #17]
 800e036:	494b      	ldr	r1, [pc, #300]	; (800e164 <etharp_query+0x268>)
 800e038:	4613      	mov	r3, r2
 800e03a:	005b      	lsls	r3, r3, #1
 800e03c:	4413      	add	r3, r2
 800e03e:	00db      	lsls	r3, r3, #3
 800e040:	440b      	add	r3, r1
 800e042:	3314      	adds	r3, #20
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	2b01      	cmp	r3, #1
 800e048:	d917      	bls.n	800e07a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e04a:	4a49      	ldr	r2, [pc, #292]	; (800e170 <etharp_query+0x274>)
 800e04c:	7c7b      	ldrb	r3, [r7, #17]
 800e04e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e050:	7c7a      	ldrb	r2, [r7, #17]
 800e052:	4613      	mov	r3, r2
 800e054:	005b      	lsls	r3, r3, #1
 800e056:	4413      	add	r3, r2
 800e058:	00db      	lsls	r3, r3, #3
 800e05a:	3308      	adds	r3, #8
 800e05c:	4a41      	ldr	r2, [pc, #260]	; (800e164 <etharp_query+0x268>)
 800e05e:	4413      	add	r3, r2
 800e060:	3304      	adds	r3, #4
 800e062:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e066:	9200      	str	r2, [sp, #0]
 800e068:	697a      	ldr	r2, [r7, #20]
 800e06a:	6879      	ldr	r1, [r7, #4]
 800e06c:	68f8      	ldr	r0, [r7, #12]
 800e06e:	f001 fc9b 	bl	800f9a8 <ethernet_output>
 800e072:	4603      	mov	r3, r0
 800e074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e078:	e067      	b.n	800e14a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e07a:	7c7a      	ldrb	r2, [r7, #17]
 800e07c:	4939      	ldr	r1, [pc, #228]	; (800e164 <etharp_query+0x268>)
 800e07e:	4613      	mov	r3, r2
 800e080:	005b      	lsls	r3, r3, #1
 800e082:	4413      	add	r3, r2
 800e084:	00db      	lsls	r3, r3, #3
 800e086:	440b      	add	r3, r1
 800e088:	3314      	adds	r3, #20
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	d15c      	bne.n	800e14a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e090:	2300      	movs	r3, #0
 800e092:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e098:	e01c      	b.n	800e0d4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	895a      	ldrh	r2, [r3, #10]
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	891b      	ldrh	r3, [r3, #8]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d10a      	bne.n	800e0bc <etharp_query+0x1c0>
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d006      	beq.n	800e0bc <etharp_query+0x1c0>
 800e0ae:	4b2a      	ldr	r3, [pc, #168]	; (800e158 <etharp_query+0x25c>)
 800e0b0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e0b4:	492f      	ldr	r1, [pc, #188]	; (800e174 <etharp_query+0x278>)
 800e0b6:	482a      	ldr	r0, [pc, #168]	; (800e160 <etharp_query+0x264>)
 800e0b8:	f001 fd22 	bl	800fb00 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	7b1b      	ldrb	r3, [r3, #12]
 800e0c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d002      	beq.n	800e0ce <etharp_query+0x1d2>
        copy_needed = 1;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	61bb      	str	r3, [r7, #24]
        break;
 800e0cc:	e005      	b.n	800e0da <etharp_query+0x1de>
      }
      p = p->next;
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d1df      	bne.n	800e09a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e0da:	69bb      	ldr	r3, [r7, #24]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d007      	beq.n	800e0f0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e0e0:	687a      	ldr	r2, [r7, #4]
 800e0e2:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e0e6:	200e      	movs	r0, #14
 800e0e8:	f7f9 f9d8 	bl	800749c <pbuf_clone>
 800e0ec:	61f8      	str	r0, [r7, #28]
 800e0ee:	e004      	b.n	800e0fa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e0f4:	69f8      	ldr	r0, [r7, #28]
 800e0f6:	f7f8 ff73 	bl	8006fe0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d021      	beq.n	800e144 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e100:	7c7a      	ldrb	r2, [r7, #17]
 800e102:	4918      	ldr	r1, [pc, #96]	; (800e164 <etharp_query+0x268>)
 800e104:	4613      	mov	r3, r2
 800e106:	005b      	lsls	r3, r3, #1
 800e108:	4413      	add	r3, r2
 800e10a:	00db      	lsls	r3, r3, #3
 800e10c:	440b      	add	r3, r1
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d00a      	beq.n	800e12a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e114:	7c7a      	ldrb	r2, [r7, #17]
 800e116:	4913      	ldr	r1, [pc, #76]	; (800e164 <etharp_query+0x268>)
 800e118:	4613      	mov	r3, r2
 800e11a:	005b      	lsls	r3, r3, #1
 800e11c:	4413      	add	r3, r2
 800e11e:	00db      	lsls	r3, r3, #3
 800e120:	440b      	add	r3, r1
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4618      	mov	r0, r3
 800e126:	f7f8 febb 	bl	8006ea0 <pbuf_free>
      }
      arp_table[i].q = p;
 800e12a:	7c7a      	ldrb	r2, [r7, #17]
 800e12c:	490d      	ldr	r1, [pc, #52]	; (800e164 <etharp_query+0x268>)
 800e12e:	4613      	mov	r3, r2
 800e130:	005b      	lsls	r3, r3, #1
 800e132:	4413      	add	r3, r2
 800e134:	00db      	lsls	r3, r3, #3
 800e136:	440b      	add	r3, r1
 800e138:	69fa      	ldr	r2, [r7, #28]
 800e13a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e13c:	2300      	movs	r3, #0
 800e13e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e142:	e002      	b.n	800e14a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e144:	23ff      	movs	r3, #255	; 0xff
 800e146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e14a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3728      	adds	r7, #40	; 0x28
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	080132ac 	.word	0x080132ac
 800e15c:	08013458 	.word	0x08013458
 800e160:	08013324 	.word	0x08013324
 800e164:	24003248 	.word	0x24003248
 800e168:	08013468 	.word	0x08013468
 800e16c:	0801344c 	.word	0x0801344c
 800e170:	24003338 	.word	0x24003338
 800e174:	08013490 	.word	0x08013490

0800e178 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b08a      	sub	sp, #40	; 0x28
 800e17c:	af02      	add	r7, sp, #8
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	60b9      	str	r1, [r7, #8]
 800e182:	607a      	str	r2, [r7, #4]
 800e184:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e186:	2300      	movs	r3, #0
 800e188:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d106      	bne.n	800e19e <etharp_raw+0x26>
 800e190:	4b3a      	ldr	r3, [pc, #232]	; (800e27c <etharp_raw+0x104>)
 800e192:	f240 4257 	movw	r2, #1111	; 0x457
 800e196:	493a      	ldr	r1, [pc, #232]	; (800e280 <etharp_raw+0x108>)
 800e198:	483a      	ldr	r0, [pc, #232]	; (800e284 <etharp_raw+0x10c>)
 800e19a:	f001 fcb1 	bl	800fb00 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e19e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e1a2:	211c      	movs	r1, #28
 800e1a4:	200e      	movs	r0, #14
 800e1a6:	f7f8 fb97 	bl	80068d8 <pbuf_alloc>
 800e1aa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e1ac:	69bb      	ldr	r3, [r7, #24]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d102      	bne.n	800e1b8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e1b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e1b6:	e05d      	b.n	800e274 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e1b8:	69bb      	ldr	r3, [r7, #24]
 800e1ba:	895b      	ldrh	r3, [r3, #10]
 800e1bc:	2b1b      	cmp	r3, #27
 800e1be:	d806      	bhi.n	800e1ce <etharp_raw+0x56>
 800e1c0:	4b2e      	ldr	r3, [pc, #184]	; (800e27c <etharp_raw+0x104>)
 800e1c2:	f240 4262 	movw	r2, #1122	; 0x462
 800e1c6:	4930      	ldr	r1, [pc, #192]	; (800e288 <etharp_raw+0x110>)
 800e1c8:	482e      	ldr	r0, [pc, #184]	; (800e284 <etharp_raw+0x10c>)
 800e1ca:	f001 fc99 	bl	800fb00 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e1ce:	69bb      	ldr	r3, [r7, #24]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e1d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f7f7 fa4c 	bl	8005674 <lwip_htons>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	461a      	mov	r2, r3
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e1ea:	2b06      	cmp	r3, #6
 800e1ec:	d006      	beq.n	800e1fc <etharp_raw+0x84>
 800e1ee:	4b23      	ldr	r3, [pc, #140]	; (800e27c <etharp_raw+0x104>)
 800e1f0:	f240 4269 	movw	r2, #1129	; 0x469
 800e1f4:	4925      	ldr	r1, [pc, #148]	; (800e28c <etharp_raw+0x114>)
 800e1f6:	4823      	ldr	r0, [pc, #140]	; (800e284 <etharp_raw+0x10c>)
 800e1f8:	f001 fc82 	bl	800fb00 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	3308      	adds	r3, #8
 800e200:	2206      	movs	r2, #6
 800e202:	6839      	ldr	r1, [r7, #0]
 800e204:	4618      	mov	r0, r3
 800e206:	f001 fc4b 	bl	800faa0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	3312      	adds	r3, #18
 800e20e:	2206      	movs	r2, #6
 800e210:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e212:	4618      	mov	r0, r3
 800e214:	f001 fc44 	bl	800faa0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	330e      	adds	r3, #14
 800e21c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e21e:	6812      	ldr	r2, [r2, #0]
 800e220:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	3318      	adds	r3, #24
 800e226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e228:	6812      	ldr	r2, [r2, #0]
 800e22a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	2200      	movs	r2, #0
 800e230:	701a      	strb	r2, [r3, #0]
 800e232:	2200      	movs	r2, #0
 800e234:	f042 0201 	orr.w	r2, r2, #1
 800e238:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	2200      	movs	r2, #0
 800e23e:	f042 0208 	orr.w	r2, r2, #8
 800e242:	709a      	strb	r2, [r3, #2]
 800e244:	2200      	movs	r2, #0
 800e246:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	2206      	movs	r2, #6
 800e24c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	2204      	movs	r2, #4
 800e252:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e254:	f640 0306 	movw	r3, #2054	; 0x806
 800e258:	9300      	str	r3, [sp, #0]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	68ba      	ldr	r2, [r7, #8]
 800e25e:	69b9      	ldr	r1, [r7, #24]
 800e260:	68f8      	ldr	r0, [r7, #12]
 800e262:	f001 fba1 	bl	800f9a8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e266:	69b8      	ldr	r0, [r7, #24]
 800e268:	f7f8 fe1a 	bl	8006ea0 <pbuf_free>
  p = NULL;
 800e26c:	2300      	movs	r3, #0
 800e26e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e270:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e274:	4618      	mov	r0, r3
 800e276:	3720      	adds	r7, #32
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	080132ac 	.word	0x080132ac
 800e280:	080133fc 	.word	0x080133fc
 800e284:	08013324 	.word	0x08013324
 800e288:	080134ac 	.word	0x080134ac
 800e28c:	080134e0 	.word	0x080134e0

0800e290 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b088      	sub	sp, #32
 800e294:	af04      	add	r7, sp, #16
 800e296:	60f8      	str	r0, [r7, #12]
 800e298:	60b9      	str	r1, [r7, #8]
 800e29a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	9203      	str	r2, [sp, #12]
 800e2b0:	68ba      	ldr	r2, [r7, #8]
 800e2b2:	9202      	str	r2, [sp, #8]
 800e2b4:	4a06      	ldr	r2, [pc, #24]	; (800e2d0 <etharp_request_dst+0x40>)
 800e2b6:	9201      	str	r2, [sp, #4]
 800e2b8:	9300      	str	r3, [sp, #0]
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	687a      	ldr	r2, [r7, #4]
 800e2be:	68f8      	ldr	r0, [r7, #12]
 800e2c0:	f7ff ff5a 	bl	800e178 <etharp_raw>
 800e2c4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3710      	adds	r7, #16
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	08013a68 	.word	0x08013a68

0800e2d4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e2de:	4a05      	ldr	r2, [pc, #20]	; (800e2f4 <etharp_request+0x20>)
 800e2e0:	6839      	ldr	r1, [r7, #0]
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f7ff ffd4 	bl	800e290 <etharp_request_dst>
 800e2e8:	4603      	mov	r3, r0
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3708      	adds	r7, #8
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
 800e2f2:	bf00      	nop
 800e2f4:	08013a60 	.word	0x08013a60

0800e2f8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b08e      	sub	sp, #56	; 0x38
 800e2fc:	af04      	add	r7, sp, #16
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e302:	4b87      	ldr	r3, [pc, #540]	; (800e520 <icmp_input+0x228>)
 800e304:	689b      	ldr	r3, [r3, #8]
 800e306:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	f003 030f 	and.w	r3, r3, #15
 800e310:	b2db      	uxtb	r3, r3
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	b2db      	uxtb	r3, r3
 800e316:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e318:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e31a:	2b13      	cmp	r3, #19
 800e31c:	f240 80e8 	bls.w	800e4f0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	895b      	ldrh	r3, [r3, #10]
 800e324:	2b03      	cmp	r3, #3
 800e326:	f240 80e5 	bls.w	800e4f4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e334:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e338:	2b00      	cmp	r3, #0
 800e33a:	f000 80d2 	beq.w	800e4e2 <icmp_input+0x1ea>
 800e33e:	2b08      	cmp	r3, #8
 800e340:	f040 80d2 	bne.w	800e4e8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e344:	4b77      	ldr	r3, [pc, #476]	; (800e524 <icmp_input+0x22c>)
 800e346:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e348:	4b75      	ldr	r3, [pc, #468]	; (800e520 <icmp_input+0x228>)
 800e34a:	695b      	ldr	r3, [r3, #20]
 800e34c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e350:	2be0      	cmp	r3, #224	; 0xe0
 800e352:	f000 80d6 	beq.w	800e502 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e356:	4b72      	ldr	r3, [pc, #456]	; (800e520 <icmp_input+0x228>)
 800e358:	695b      	ldr	r3, [r3, #20]
 800e35a:	4a71      	ldr	r2, [pc, #452]	; (800e520 <icmp_input+0x228>)
 800e35c:	6812      	ldr	r2, [r2, #0]
 800e35e:	4611      	mov	r1, r2
 800e360:	4618      	mov	r0, r3
 800e362:	f000 fc13 	bl	800eb8c <ip4_addr_isbroadcast_u32>
 800e366:	4603      	mov	r3, r0
 800e368:	2b00      	cmp	r3, #0
 800e36a:	f040 80cc 	bne.w	800e506 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	891b      	ldrh	r3, [r3, #8]
 800e372:	2b07      	cmp	r3, #7
 800e374:	f240 80c0 	bls.w	800e4f8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f7f7 fa18 	bl	80057ae <inet_chksum_pbuf>
 800e37e:	4603      	mov	r3, r0
 800e380:	2b00      	cmp	r3, #0
 800e382:	d003      	beq.n	800e38c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f7f8 fd8b 	bl	8006ea0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800e38a:	e0c5      	b.n	800e518 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e38c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e38e:	330e      	adds	r3, #14
 800e390:	4619      	mov	r1, r3
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f7f8 fcee 	bl	8006d74 <pbuf_add_header>
 800e398:	4603      	mov	r3, r0
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d04b      	beq.n	800e436 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	891a      	ldrh	r2, [r3, #8]
 800e3a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3a4:	4413      	add	r3, r2
 800e3a6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	891b      	ldrh	r3, [r3, #8]
 800e3ac:	8b7a      	ldrh	r2, [r7, #26]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	f0c0 80ab 	bcc.w	800e50a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e3b4:	8b7b      	ldrh	r3, [r7, #26]
 800e3b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	200e      	movs	r0, #14
 800e3be:	f7f8 fa8b 	bl	80068d8 <pbuf_alloc>
 800e3c2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	f000 80a1 	beq.w	800e50e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	895b      	ldrh	r3, [r3, #10]
 800e3d0:	461a      	mov	r2, r3
 800e3d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3d4:	3308      	adds	r3, #8
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d203      	bcs.n	800e3e2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e3da:	6978      	ldr	r0, [r7, #20]
 800e3dc:	f7f8 fd60 	bl	8006ea0 <pbuf_free>
          goto icmperr;
 800e3e0:	e096      	b.n	800e510 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e3e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f001 fb58 	bl	800faa0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e3f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	6978      	ldr	r0, [r7, #20]
 800e3f6:	f7f8 fccd 	bl	8006d94 <pbuf_remove_header>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d009      	beq.n	800e414 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e400:	4b49      	ldr	r3, [pc, #292]	; (800e528 <icmp_input+0x230>)
 800e402:	22b6      	movs	r2, #182	; 0xb6
 800e404:	4949      	ldr	r1, [pc, #292]	; (800e52c <icmp_input+0x234>)
 800e406:	484a      	ldr	r0, [pc, #296]	; (800e530 <icmp_input+0x238>)
 800e408:	f001 fb7a 	bl	800fb00 <iprintf>
          pbuf_free(r);
 800e40c:	6978      	ldr	r0, [r7, #20]
 800e40e:	f7f8 fd47 	bl	8006ea0 <pbuf_free>
          goto icmperr;
 800e412:	e07d      	b.n	800e510 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e414:	6879      	ldr	r1, [r7, #4]
 800e416:	6978      	ldr	r0, [r7, #20]
 800e418:	f7f8 fe6a 	bl	80070f0 <pbuf_copy>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d003      	beq.n	800e42a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e422:	6978      	ldr	r0, [r7, #20]
 800e424:	f7f8 fd3c 	bl	8006ea0 <pbuf_free>
          goto icmperr;
 800e428:	e072      	b.n	800e510 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f7f8 fd38 	bl	8006ea0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	607b      	str	r3, [r7, #4]
 800e434:	e00f      	b.n	800e456 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e436:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e438:	330e      	adds	r3, #14
 800e43a:	4619      	mov	r1, r3
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f7f8 fca9 	bl	8006d94 <pbuf_remove_header>
 800e442:	4603      	mov	r3, r0
 800e444:	2b00      	cmp	r3, #0
 800e446:	d006      	beq.n	800e456 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e448:	4b37      	ldr	r3, [pc, #220]	; (800e528 <icmp_input+0x230>)
 800e44a:	22c7      	movs	r2, #199	; 0xc7
 800e44c:	4939      	ldr	r1, [pc, #228]	; (800e534 <icmp_input+0x23c>)
 800e44e:	4838      	ldr	r0, [pc, #224]	; (800e530 <icmp_input+0x238>)
 800e450:	f001 fb56 	bl	800fb00 <iprintf>
          goto icmperr;
 800e454:	e05c      	b.n	800e510 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e45c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e45e:	4619      	mov	r1, r3
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f7f8 fc87 	bl	8006d74 <pbuf_add_header>
 800e466:	4603      	mov	r3, r0
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d13c      	bne.n	800e4e6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e472:	69fb      	ldr	r3, [r7, #28]
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e47a:	4b29      	ldr	r3, [pc, #164]	; (800e520 <icmp_input+0x228>)
 800e47c:	691a      	ldr	r2, [r3, #16]
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	2200      	movs	r2, #0
 800e486:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	885b      	ldrh	r3, [r3, #2]
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800e492:	4293      	cmp	r3, r2
 800e494:	d907      	bls.n	800e4a6 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800e496:	693b      	ldr	r3, [r7, #16]
 800e498:	885b      	ldrh	r3, [r3, #2]
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	3309      	adds	r3, #9
 800e49e:	b29a      	uxth	r2, r3
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	805a      	strh	r2, [r3, #2]
 800e4a4:	e006      	b.n	800e4b4 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	885b      	ldrh	r3, [r3, #2]
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	3308      	adds	r3, #8
 800e4ae:	b29a      	uxth	r2, r3
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	22ff      	movs	r2, #255	; 0xff
 800e4b8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	729a      	strb	r2, [r3, #10]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	9302      	str	r3, [sp, #8]
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	9301      	str	r3, [sp, #4]
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	9300      	str	r3, [sp, #0]
 800e4d0:	23ff      	movs	r3, #255	; 0xff
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	69f9      	ldr	r1, [r7, #28]
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f000 fa80 	bl	800e9dc <ip4_output_if>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e4e0:	e001      	b.n	800e4e6 <icmp_input+0x1ee>
      break;
 800e4e2:	bf00      	nop
 800e4e4:	e000      	b.n	800e4e8 <icmp_input+0x1f0>
      break;
 800e4e6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f7f8 fcd9 	bl	8006ea0 <pbuf_free>
  return;
 800e4ee:	e013      	b.n	800e518 <icmp_input+0x220>
    goto lenerr;
 800e4f0:	bf00      	nop
 800e4f2:	e002      	b.n	800e4fa <icmp_input+0x202>
    goto lenerr;
 800e4f4:	bf00      	nop
 800e4f6:	e000      	b.n	800e4fa <icmp_input+0x202>
        goto lenerr;
 800e4f8:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f7f8 fcd0 	bl	8006ea0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e500:	e00a      	b.n	800e518 <icmp_input+0x220>
        goto icmperr;
 800e502:	bf00      	nop
 800e504:	e004      	b.n	800e510 <icmp_input+0x218>
        goto icmperr;
 800e506:	bf00      	nop
 800e508:	e002      	b.n	800e510 <icmp_input+0x218>
          goto icmperr;
 800e50a:	bf00      	nop
 800e50c:	e000      	b.n	800e510 <icmp_input+0x218>
          goto icmperr;
 800e50e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f7f8 fcc5 	bl	8006ea0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e516:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e518:	3728      	adds	r7, #40	; 0x28
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	bf00      	nop
 800e520:	240002cc 	.word	0x240002cc
 800e524:	240002e0 	.word	0x240002e0
 800e528:	08013524 	.word	0x08013524
 800e52c:	0801355c 	.word	0x0801355c
 800e530:	08013594 	.word	0x08013594
 800e534:	080135bc 	.word	0x080135bc

0800e538 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b082      	sub	sp, #8
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
 800e540:	460b      	mov	r3, r1
 800e542:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e544:	78fb      	ldrb	r3, [r7, #3]
 800e546:	461a      	mov	r2, r3
 800e548:	2103      	movs	r1, #3
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f000 f814 	bl	800e578 <icmp_send_response>
}
 800e550:	bf00      	nop
 800e552:	3708      	adds	r7, #8
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}

0800e558 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	460b      	mov	r3, r1
 800e562:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e564:	78fb      	ldrb	r3, [r7, #3]
 800e566:	461a      	mov	r2, r3
 800e568:	210b      	movs	r1, #11
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 f804 	bl	800e578 <icmp_send_response>
}
 800e570:	bf00      	nop
 800e572:	3708      	adds	r7, #8
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b08c      	sub	sp, #48	; 0x30
 800e57c:	af04      	add	r7, sp, #16
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	460b      	mov	r3, r1
 800e582:	70fb      	strb	r3, [r7, #3]
 800e584:	4613      	mov	r3, r2
 800e586:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e588:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e58c:	2124      	movs	r1, #36	; 0x24
 800e58e:	2022      	movs	r0, #34	; 0x22
 800e590:	f7f8 f9a2 	bl	80068d8 <pbuf_alloc>
 800e594:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e596:	69fb      	ldr	r3, [r7, #28]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d056      	beq.n	800e64a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e59c:	69fb      	ldr	r3, [r7, #28]
 800e59e:	895b      	ldrh	r3, [r3, #10]
 800e5a0:	2b23      	cmp	r3, #35	; 0x23
 800e5a2:	d806      	bhi.n	800e5b2 <icmp_send_response+0x3a>
 800e5a4:	4b2b      	ldr	r3, [pc, #172]	; (800e654 <icmp_send_response+0xdc>)
 800e5a6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e5aa:	492b      	ldr	r1, [pc, #172]	; (800e658 <icmp_send_response+0xe0>)
 800e5ac:	482b      	ldr	r0, [pc, #172]	; (800e65c <icmp_send_response+0xe4>)
 800e5ae:	f001 faa7 	bl	800fb00 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	685b      	ldr	r3, [r3, #4]
 800e5b6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	78fa      	ldrb	r2, [r7, #3]
 800e5c2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	78ba      	ldrb	r2, [r7, #2]
 800e5c8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	711a      	strb	r2, [r3, #4]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	719a      	strb	r2, [r3, #6]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e5de:	69fb      	ldr	r3, [r7, #28]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	f103 0008 	add.w	r0, r3, #8
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	685b      	ldr	r3, [r3, #4]
 800e5ea:	221c      	movs	r2, #28
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	f001 fa57 	bl	800faa0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e5f2:	69bb      	ldr	r3, [r7, #24]
 800e5f4:	68db      	ldr	r3, [r3, #12]
 800e5f6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e5f8:	f107 030c 	add.w	r3, r7, #12
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f000 f82f 	bl	800e660 <ip4_route>
 800e602:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d01b      	beq.n	800e642 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	2200      	movs	r2, #0
 800e60e:	709a      	strb	r2, [r3, #2]
 800e610:	2200      	movs	r2, #0
 800e612:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800e614:	69fb      	ldr	r3, [r7, #28]
 800e616:	895b      	ldrh	r3, [r3, #10]
 800e618:	4619      	mov	r1, r3
 800e61a:	6978      	ldr	r0, [r7, #20]
 800e61c:	f7f7 f8b5 	bl	800578a <inet_chksum>
 800e620:	4603      	mov	r3, r0
 800e622:	461a      	mov	r2, r3
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e628:	f107 020c 	add.w	r2, r7, #12
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	9302      	str	r3, [sp, #8]
 800e630:	2301      	movs	r3, #1
 800e632:	9301      	str	r3, [sp, #4]
 800e634:	2300      	movs	r3, #0
 800e636:	9300      	str	r3, [sp, #0]
 800e638:	23ff      	movs	r3, #255	; 0xff
 800e63a:	2100      	movs	r1, #0
 800e63c:	69f8      	ldr	r0, [r7, #28]
 800e63e:	f000 f9cd 	bl	800e9dc <ip4_output_if>
  }
  pbuf_free(q);
 800e642:	69f8      	ldr	r0, [r7, #28]
 800e644:	f7f8 fc2c 	bl	8006ea0 <pbuf_free>
 800e648:	e000      	b.n	800e64c <icmp_send_response+0xd4>
    return;
 800e64a:	bf00      	nop
}
 800e64c:	3720      	adds	r7, #32
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop
 800e654:	08013524 	.word	0x08013524
 800e658:	080135f0 	.word	0x080135f0
 800e65c:	08013594 	.word	0x08013594

0800e660 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e660:	b480      	push	{r7}
 800e662:	b085      	sub	sp, #20
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e668:	4b33      	ldr	r3, [pc, #204]	; (800e738 <ip4_route+0xd8>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	60fb      	str	r3, [r7, #12]
 800e66e:	e036      	b.n	800e6de <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e676:	f003 0301 	and.w	r3, r3, #1
 800e67a:	b2db      	uxtb	r3, r3
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d02b      	beq.n	800e6d8 <ip4_route+0x78>
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e686:	089b      	lsrs	r3, r3, #2
 800e688:	f003 0301 	and.w	r3, r3, #1
 800e68c:	b2db      	uxtb	r3, r3
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d022      	beq.n	800e6d8 <ip4_route+0x78>
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	3304      	adds	r3, #4
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d01d      	beq.n	800e6d8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	3304      	adds	r3, #4
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	405a      	eors	r2, r3
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	3308      	adds	r3, #8
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	4013      	ands	r3, r2
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d101      	bne.n	800e6b8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	e038      	b.n	800e72a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e6be:	f003 0302 	and.w	r3, r3, #2
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d108      	bne.n	800e6d8 <ip4_route+0x78>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681a      	ldr	r2, [r3, #0]
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	330c      	adds	r3, #12
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d101      	bne.n	800e6d8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	e028      	b.n	800e72a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	60fb      	str	r3, [r7, #12]
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d1c5      	bne.n	800e670 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e6e4:	4b15      	ldr	r3, [pc, #84]	; (800e73c <ip4_route+0xdc>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d01a      	beq.n	800e722 <ip4_route+0xc2>
 800e6ec:	4b13      	ldr	r3, [pc, #76]	; (800e73c <ip4_route+0xdc>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e6f4:	f003 0301 	and.w	r3, r3, #1
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d012      	beq.n	800e722 <ip4_route+0xc2>
 800e6fc:	4b0f      	ldr	r3, [pc, #60]	; (800e73c <ip4_route+0xdc>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e704:	f003 0304 	and.w	r3, r3, #4
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d00a      	beq.n	800e722 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e70c:	4b0b      	ldr	r3, [pc, #44]	; (800e73c <ip4_route+0xdc>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	3304      	adds	r3, #4
 800e712:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e714:	2b00      	cmp	r3, #0
 800e716:	d004      	beq.n	800e722 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	b2db      	uxtb	r3, r3
 800e71e:	2b7f      	cmp	r3, #127	; 0x7f
 800e720:	d101      	bne.n	800e726 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e722:	2300      	movs	r3, #0
 800e724:	e001      	b.n	800e72a <ip4_route+0xca>
  }

  return netif_default;
 800e726:	4b05      	ldr	r3, [pc, #20]	; (800e73c <ip4_route+0xdc>)
 800e728:	681b      	ldr	r3, [r3, #0]
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3714      	adds	r7, #20
 800e72e:	46bd      	mov	sp, r7
 800e730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e734:	4770      	bx	lr
 800e736:	bf00      	nop
 800e738:	240031dc 	.word	0x240031dc
 800e73c:	240031e0 	.word	0x240031e0

0800e740 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b082      	sub	sp, #8
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e74e:	f003 0301 	and.w	r3, r3, #1
 800e752:	b2db      	uxtb	r3, r3
 800e754:	2b00      	cmp	r3, #0
 800e756:	d016      	beq.n	800e786 <ip4_input_accept+0x46>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	3304      	adds	r3, #4
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d011      	beq.n	800e786 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e762:	4b0b      	ldr	r3, [pc, #44]	; (800e790 <ip4_input_accept+0x50>)
 800e764:	695a      	ldr	r2, [r3, #20]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	3304      	adds	r3, #4
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d008      	beq.n	800e782 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e770:	4b07      	ldr	r3, [pc, #28]	; (800e790 <ip4_input_accept+0x50>)
 800e772:	695b      	ldr	r3, [r3, #20]
 800e774:	6879      	ldr	r1, [r7, #4]
 800e776:	4618      	mov	r0, r3
 800e778:	f000 fa08 	bl	800eb8c <ip4_addr_isbroadcast_u32>
 800e77c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d001      	beq.n	800e786 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e782:	2301      	movs	r3, #1
 800e784:	e000      	b.n	800e788 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3708      	adds	r7, #8
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}
 800e790:	240002cc 	.word	0x240002cc

0800e794 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b086      	sub	sp, #24
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	091b      	lsrs	r3, r3, #4
 800e7aa:	b2db      	uxtb	r3, r3
 800e7ac:	2b04      	cmp	r3, #4
 800e7ae:	d004      	beq.n	800e7ba <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f7f8 fb75 	bl	8006ea0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	e107      	b.n	800e9ca <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	f003 030f 	and.w	r3, r3, #15
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	009b      	lsls	r3, r3, #2
 800e7c6:	b2db      	uxtb	r3, r3
 800e7c8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	885b      	ldrh	r3, [r3, #2]
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7f6 ff4f 	bl	8005674 <lwip_htons>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	891b      	ldrh	r3, [r3, #8]
 800e7de:	89ba      	ldrh	r2, [r7, #12]
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	d204      	bcs.n	800e7ee <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e7e4:	89bb      	ldrh	r3, [r7, #12]
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f7f8 f9d3 	bl	8006b94 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	895b      	ldrh	r3, [r3, #10]
 800e7f2:	89fa      	ldrh	r2, [r7, #14]
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d807      	bhi.n	800e808 <ip4_input+0x74>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	891b      	ldrh	r3, [r3, #8]
 800e7fc:	89ba      	ldrh	r2, [r7, #12]
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d802      	bhi.n	800e808 <ip4_input+0x74>
 800e802:	89fb      	ldrh	r3, [r7, #14]
 800e804:	2b13      	cmp	r3, #19
 800e806:	d804      	bhi.n	800e812 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f7f8 fb49 	bl	8006ea0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e80e:	2300      	movs	r3, #0
 800e810:	e0db      	b.n	800e9ca <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	691b      	ldr	r3, [r3, #16]
 800e816:	4a6f      	ldr	r2, [pc, #444]	; (800e9d4 <ip4_input+0x240>)
 800e818:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	4a6d      	ldr	r2, [pc, #436]	; (800e9d4 <ip4_input+0x240>)
 800e820:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e822:	4b6c      	ldr	r3, [pc, #432]	; (800e9d4 <ip4_input+0x240>)
 800e824:	695b      	ldr	r3, [r3, #20]
 800e826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e82a:	2be0      	cmp	r3, #224	; 0xe0
 800e82c:	d112      	bne.n	800e854 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e834:	f003 0301 	and.w	r3, r3, #1
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d007      	beq.n	800e84e <ip4_input+0xba>
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	3304      	adds	r3, #4
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d002      	beq.n	800e84e <ip4_input+0xba>
      netif = inp;
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	613b      	str	r3, [r7, #16]
 800e84c:	e02a      	b.n	800e8a4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e84e:	2300      	movs	r3, #0
 800e850:	613b      	str	r3, [r7, #16]
 800e852:	e027      	b.n	800e8a4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e854:	6838      	ldr	r0, [r7, #0]
 800e856:	f7ff ff73 	bl	800e740 <ip4_input_accept>
 800e85a:	4603      	mov	r3, r0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d002      	beq.n	800e866 <ip4_input+0xd2>
      netif = inp;
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	613b      	str	r3, [r7, #16]
 800e864:	e01e      	b.n	800e8a4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e866:	2300      	movs	r3, #0
 800e868:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e86a:	4b5a      	ldr	r3, [pc, #360]	; (800e9d4 <ip4_input+0x240>)
 800e86c:	695b      	ldr	r3, [r3, #20]
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	2b7f      	cmp	r3, #127	; 0x7f
 800e872:	d017      	beq.n	800e8a4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e874:	4b58      	ldr	r3, [pc, #352]	; (800e9d8 <ip4_input+0x244>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	613b      	str	r3, [r7, #16]
 800e87a:	e00e      	b.n	800e89a <ip4_input+0x106>
          if (netif == inp) {
 800e87c:	693a      	ldr	r2, [r7, #16]
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	429a      	cmp	r2, r3
 800e882:	d006      	beq.n	800e892 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e884:	6938      	ldr	r0, [r7, #16]
 800e886:	f7ff ff5b 	bl	800e740 <ip4_input_accept>
 800e88a:	4603      	mov	r3, r0
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d108      	bne.n	800e8a2 <ip4_input+0x10e>
 800e890:	e000      	b.n	800e894 <ip4_input+0x100>
            continue;
 800e892:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e894:	693b      	ldr	r3, [r7, #16]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	613b      	str	r3, [r7, #16]
 800e89a:	693b      	ldr	r3, [r7, #16]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d1ed      	bne.n	800e87c <ip4_input+0xe8>
 800e8a0:	e000      	b.n	800e8a4 <ip4_input+0x110>
            break;
 800e8a2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e8a4:	4b4b      	ldr	r3, [pc, #300]	; (800e9d4 <ip4_input+0x240>)
 800e8a6:	691b      	ldr	r3, [r3, #16]
 800e8a8:	6839      	ldr	r1, [r7, #0]
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f000 f96e 	bl	800eb8c <ip4_addr_isbroadcast_u32>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d105      	bne.n	800e8c2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e8b6:	4b47      	ldr	r3, [pc, #284]	; (800e9d4 <ip4_input+0x240>)
 800e8b8:	691b      	ldr	r3, [r3, #16]
 800e8ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e8be:	2be0      	cmp	r3, #224	; 0xe0
 800e8c0:	d104      	bne.n	800e8cc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f7f8 faec 	bl	8006ea0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	e07e      	b.n	800e9ca <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d104      	bne.n	800e8dc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f7f8 fae4 	bl	8006ea0 <pbuf_free>
    return ERR_OK;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	e076      	b.n	800e9ca <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	88db      	ldrh	r3, [r3, #6]
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e8e8:	4013      	ands	r3, r2
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d00b      	beq.n	800e906 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f000 fc92 	bl	800f218 <ip4_reass>
 800e8f4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d101      	bne.n	800e900 <ip4_input+0x16c>
      return ERR_OK;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	e064      	b.n	800e9ca <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e906:	4a33      	ldr	r2, [pc, #204]	; (800e9d4 <ip4_input+0x240>)
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e90c:	4a31      	ldr	r2, [pc, #196]	; (800e9d4 <ip4_input+0x240>)
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e912:	4a30      	ldr	r2, [pc, #192]	; (800e9d4 <ip4_input+0x240>)
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	f003 030f 	and.w	r3, r3, #15
 800e920:	b2db      	uxtb	r3, r3
 800e922:	009b      	lsls	r3, r3, #2
 800e924:	b2db      	uxtb	r3, r3
 800e926:	b29a      	uxth	r2, r3
 800e928:	4b2a      	ldr	r3, [pc, #168]	; (800e9d4 <ip4_input+0x240>)
 800e92a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e92c:	89fb      	ldrh	r3, [r7, #14]
 800e92e:	4619      	mov	r1, r3
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f7f8 fa2f 	bl	8006d94 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	7a5b      	ldrb	r3, [r3, #9]
 800e93a:	2b11      	cmp	r3, #17
 800e93c:	d006      	beq.n	800e94c <ip4_input+0x1b8>
 800e93e:	2b11      	cmp	r3, #17
 800e940:	dc13      	bgt.n	800e96a <ip4_input+0x1d6>
 800e942:	2b01      	cmp	r3, #1
 800e944:	d00c      	beq.n	800e960 <ip4_input+0x1cc>
 800e946:	2b06      	cmp	r3, #6
 800e948:	d005      	beq.n	800e956 <ip4_input+0x1c2>
 800e94a:	e00e      	b.n	800e96a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e94c:	6839      	ldr	r1, [r7, #0]
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f7fe f92a 	bl	800cba8 <udp_input>
        break;
 800e954:	e026      	b.n	800e9a4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e956:	6839      	ldr	r1, [r7, #0]
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f7fa f96b 	bl	8008c34 <tcp_input>
        break;
 800e95e:	e021      	b.n	800e9a4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e960:	6839      	ldr	r1, [r7, #0]
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f7ff fcc8 	bl	800e2f8 <icmp_input>
        break;
 800e968:	e01c      	b.n	800e9a4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e96a:	4b1a      	ldr	r3, [pc, #104]	; (800e9d4 <ip4_input+0x240>)
 800e96c:	695b      	ldr	r3, [r3, #20]
 800e96e:	6939      	ldr	r1, [r7, #16]
 800e970:	4618      	mov	r0, r3
 800e972:	f000 f90b 	bl	800eb8c <ip4_addr_isbroadcast_u32>
 800e976:	4603      	mov	r3, r0
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d10f      	bne.n	800e99c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e97c:	4b15      	ldr	r3, [pc, #84]	; (800e9d4 <ip4_input+0x240>)
 800e97e:	695b      	ldr	r3, [r3, #20]
 800e980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e984:	2be0      	cmp	r3, #224	; 0xe0
 800e986:	d009      	beq.n	800e99c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e988:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e98c:	4619      	mov	r1, r3
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f7f8 fa73 	bl	8006e7a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e994:	2102      	movs	r1, #2
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f7ff fdce 	bl	800e538 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f7f8 fa7f 	bl	8006ea0 <pbuf_free>
        break;
 800e9a2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e9a4:	4b0b      	ldr	r3, [pc, #44]	; (800e9d4 <ip4_input+0x240>)
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e9aa:	4b0a      	ldr	r3, [pc, #40]	; (800e9d4 <ip4_input+0x240>)
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e9b0:	4b08      	ldr	r3, [pc, #32]	; (800e9d4 <ip4_input+0x240>)
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e9b6:	4b07      	ldr	r3, [pc, #28]	; (800e9d4 <ip4_input+0x240>)
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e9bc:	4b05      	ldr	r3, [pc, #20]	; (800e9d4 <ip4_input+0x240>)
 800e9be:	2200      	movs	r2, #0
 800e9c0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e9c2:	4b04      	ldr	r3, [pc, #16]	; (800e9d4 <ip4_input+0x240>)
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e9c8:	2300      	movs	r3, #0
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3718      	adds	r7, #24
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	240002cc 	.word	0x240002cc
 800e9d8:	240031dc 	.word	0x240031dc

0800e9dc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b08a      	sub	sp, #40	; 0x28
 800e9e0:	af04      	add	r7, sp, #16
 800e9e2:	60f8      	str	r0, [r7, #12]
 800e9e4:	60b9      	str	r1, [r7, #8]
 800e9e6:	607a      	str	r2, [r7, #4]
 800e9e8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d009      	beq.n	800ea08 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d003      	beq.n	800ea02 <ip4_output_if+0x26>
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d102      	bne.n	800ea08 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800ea02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea04:	3304      	adds	r3, #4
 800ea06:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ea08:	78fa      	ldrb	r2, [r7, #3]
 800ea0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0c:	9302      	str	r3, [sp, #8]
 800ea0e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ea12:	9301      	str	r3, [sp, #4]
 800ea14:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ea18:	9300      	str	r3, [sp, #0]
 800ea1a:	4613      	mov	r3, r2
 800ea1c:	687a      	ldr	r2, [r7, #4]
 800ea1e:	6979      	ldr	r1, [r7, #20]
 800ea20:	68f8      	ldr	r0, [r7, #12]
 800ea22:	f000 f805 	bl	800ea30 <ip4_output_if_src>
 800ea26:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3718      	adds	r7, #24
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b088      	sub	sp, #32
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	60f8      	str	r0, [r7, #12]
 800ea38:	60b9      	str	r1, [r7, #8]
 800ea3a:	607a      	str	r2, [r7, #4]
 800ea3c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	7b9b      	ldrb	r3, [r3, #14]
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d006      	beq.n	800ea54 <ip4_output_if_src+0x24>
 800ea46:	4b4b      	ldr	r3, [pc, #300]	; (800eb74 <ip4_output_if_src+0x144>)
 800ea48:	f44f 7255 	mov.w	r2, #852	; 0x354
 800ea4c:	494a      	ldr	r1, [pc, #296]	; (800eb78 <ip4_output_if_src+0x148>)
 800ea4e:	484b      	ldr	r0, [pc, #300]	; (800eb7c <ip4_output_if_src+0x14c>)
 800ea50:	f001 f856 	bl	800fb00 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d060      	beq.n	800eb1c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ea5a:	2314      	movs	r3, #20
 800ea5c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ea5e:	2114      	movs	r1, #20
 800ea60:	68f8      	ldr	r0, [r7, #12]
 800ea62:	f7f8 f987 	bl	8006d74 <pbuf_add_header>
 800ea66:	4603      	mov	r3, r0
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d002      	beq.n	800ea72 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ea6c:	f06f 0301 	mvn.w	r3, #1
 800ea70:	e07c      	b.n	800eb6c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	895b      	ldrh	r3, [r3, #10]
 800ea7c:	2b13      	cmp	r3, #19
 800ea7e:	d806      	bhi.n	800ea8e <ip4_output_if_src+0x5e>
 800ea80:	4b3c      	ldr	r3, [pc, #240]	; (800eb74 <ip4_output_if_src+0x144>)
 800ea82:	f44f 7262 	mov.w	r2, #904	; 0x388
 800ea86:	493e      	ldr	r1, [pc, #248]	; (800eb80 <ip4_output_if_src+0x150>)
 800ea88:	483c      	ldr	r0, [pc, #240]	; (800eb7c <ip4_output_if_src+0x14c>)
 800ea8a:	f001 f839 	bl	800fb00 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ea8e:	69fb      	ldr	r3, [r7, #28]
 800ea90:	78fa      	ldrb	r2, [r7, #3]
 800ea92:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ea94:	69fb      	ldr	r3, [r7, #28]
 800ea96:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ea9a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800eaa4:	8b7b      	ldrh	r3, [r7, #26]
 800eaa6:	089b      	lsrs	r3, r3, #2
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	b2db      	uxtb	r3, r3
 800eaac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eab0:	b2da      	uxtb	r2, r3
 800eab2:	69fb      	ldr	r3, [r7, #28]
 800eab4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800eab6:	69fb      	ldr	r3, [r7, #28]
 800eab8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800eabc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	891b      	ldrh	r3, [r3, #8]
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7f6 fdd6 	bl	8005674 <lwip_htons>
 800eac8:	4603      	mov	r3, r0
 800eaca:	461a      	mov	r2, r3
 800eacc:	69fb      	ldr	r3, [r7, #28]
 800eace:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	2200      	movs	r2, #0
 800ead4:	719a      	strb	r2, [r3, #6]
 800ead6:	2200      	movs	r2, #0
 800ead8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800eada:	4b2a      	ldr	r3, [pc, #168]	; (800eb84 <ip4_output_if_src+0x154>)
 800eadc:	881b      	ldrh	r3, [r3, #0]
 800eade:	4618      	mov	r0, r3
 800eae0:	f7f6 fdc8 	bl	8005674 <lwip_htons>
 800eae4:	4603      	mov	r3, r0
 800eae6:	461a      	mov	r2, r3
 800eae8:	69fb      	ldr	r3, [r7, #28]
 800eaea:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800eaec:	4b25      	ldr	r3, [pc, #148]	; (800eb84 <ip4_output_if_src+0x154>)
 800eaee:	881b      	ldrh	r3, [r3, #0]
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	b29a      	uxth	r2, r3
 800eaf4:	4b23      	ldr	r3, [pc, #140]	; (800eb84 <ip4_output_if_src+0x154>)
 800eaf6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d104      	bne.n	800eb08 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800eafe:	4b22      	ldr	r3, [pc, #136]	; (800eb88 <ip4_output_if_src+0x158>)
 800eb00:	681a      	ldr	r2, [r3, #0]
 800eb02:	69fb      	ldr	r3, [r7, #28]
 800eb04:	60da      	str	r2, [r3, #12]
 800eb06:	e003      	b.n	800eb10 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	69fb      	ldr	r3, [r7, #28]
 800eb0e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800eb10:	69fb      	ldr	r3, [r7, #28]
 800eb12:	2200      	movs	r2, #0
 800eb14:	729a      	strb	r2, [r3, #10]
 800eb16:	2200      	movs	r2, #0
 800eb18:	72da      	strb	r2, [r3, #11]
 800eb1a:	e00f      	b.n	800eb3c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	895b      	ldrh	r3, [r3, #10]
 800eb20:	2b13      	cmp	r3, #19
 800eb22:	d802      	bhi.n	800eb2a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800eb24:	f06f 0301 	mvn.w	r3, #1
 800eb28:	e020      	b.n	800eb6c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800eb30:	69fb      	ldr	r3, [r7, #28]
 800eb32:	691b      	ldr	r3, [r3, #16]
 800eb34:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800eb36:	f107 0314 	add.w	r3, r7, #20
 800eb3a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800eb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d00c      	beq.n	800eb5e <ip4_output_if_src+0x12e>
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	891a      	ldrh	r2, [r3, #8]
 800eb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d906      	bls.n	800eb5e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800eb50:	687a      	ldr	r2, [r7, #4]
 800eb52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eb54:	68f8      	ldr	r0, [r7, #12]
 800eb56:	f000 fd53 	bl	800f600 <ip4_frag>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	e006      	b.n	800eb6c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800eb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb60:	695b      	ldr	r3, [r3, #20]
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	68f9      	ldr	r1, [r7, #12]
 800eb66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb68:	4798      	blx	r3
 800eb6a:	4603      	mov	r3, r0
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3720      	adds	r7, #32
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	0801361c 	.word	0x0801361c
 800eb78:	08013650 	.word	0x08013650
 800eb7c:	0801365c 	.word	0x0801365c
 800eb80:	08013684 	.word	0x08013684
 800eb84:	2400333a 	.word	0x2400333a
 800eb88:	08013a5c 	.word	0x08013a5c

0800eb8c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b085      	sub	sp, #20
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eba0:	d002      	beq.n	800eba8 <ip4_addr_isbroadcast_u32+0x1c>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d101      	bne.n	800ebac <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800eba8:	2301      	movs	r3, #1
 800ebaa:	e02a      	b.n	800ec02 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ebb2:	f003 0302 	and.w	r3, r3, #2
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d101      	bne.n	800ebbe <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	e021      	b.n	800ec02 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	3304      	adds	r3, #4
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	687a      	ldr	r2, [r7, #4]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d101      	bne.n	800ebce <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	e019      	b.n	800ec02 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ebce:	68fa      	ldr	r2, [r7, #12]
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	3304      	adds	r3, #4
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	405a      	eors	r2, r3
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	3308      	adds	r3, #8
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	4013      	ands	r3, r2
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d10d      	bne.n	800ec00 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	3308      	adds	r3, #8
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	43da      	mvns	r2, r3
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	3308      	adds	r3, #8
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d101      	bne.n	800ec00 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	e000      	b.n	800ec02 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800ec00:	2300      	movs	r3, #0
  }
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3714      	adds	r7, #20
 800ec06:	46bd      	mov	sp, r7
 800ec08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0c:	4770      	bx	lr
	...

0800ec10 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b084      	sub	sp, #16
 800ec14:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ec16:	2300      	movs	r3, #0
 800ec18:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ec1a:	4b12      	ldr	r3, [pc, #72]	; (800ec64 <ip_reass_tmr+0x54>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ec20:	e018      	b.n	800ec54 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	7fdb      	ldrb	r3, [r3, #31]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d00b      	beq.n	800ec42 <ip_reass_tmr+0x32>
      r->timer--;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	7fdb      	ldrb	r3, [r3, #31]
 800ec2e:	3b01      	subs	r3, #1
 800ec30:	b2da      	uxtb	r2, r3
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	60fb      	str	r3, [r7, #12]
 800ec40:	e008      	b.n	800ec54 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ec4c:	68b9      	ldr	r1, [r7, #8]
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f000 f80a 	bl	800ec68 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d1e3      	bne.n	800ec22 <ip_reass_tmr+0x12>
    }
  }
}
 800ec5a:	bf00      	nop
 800ec5c:	bf00      	nop
 800ec5e:	3710      	adds	r7, #16
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}
 800ec64:	2400333c 	.word	0x2400333c

0800ec68 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b088      	sub	sp, #32
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ec72:	2300      	movs	r3, #0
 800ec74:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ec76:	683a      	ldr	r2, [r7, #0]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d105      	bne.n	800ec8a <ip_reass_free_complete_datagram+0x22>
 800ec7e:	4b45      	ldr	r3, [pc, #276]	; (800ed94 <ip_reass_free_complete_datagram+0x12c>)
 800ec80:	22ab      	movs	r2, #171	; 0xab
 800ec82:	4945      	ldr	r1, [pc, #276]	; (800ed98 <ip_reass_free_complete_datagram+0x130>)
 800ec84:	4845      	ldr	r0, [pc, #276]	; (800ed9c <ip_reass_free_complete_datagram+0x134>)
 800ec86:	f000 ff3b 	bl	800fb00 <iprintf>
  if (prev != NULL) {
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d00a      	beq.n	800eca6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	687a      	ldr	r2, [r7, #4]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d005      	beq.n	800eca6 <ip_reass_free_complete_datagram+0x3e>
 800ec9a:	4b3e      	ldr	r3, [pc, #248]	; (800ed94 <ip_reass_free_complete_datagram+0x12c>)
 800ec9c:	22ad      	movs	r2, #173	; 0xad
 800ec9e:	4940      	ldr	r1, [pc, #256]	; (800eda0 <ip_reass_free_complete_datagram+0x138>)
 800eca0:	483e      	ldr	r0, [pc, #248]	; (800ed9c <ip_reass_free_complete_datagram+0x134>)
 800eca2:	f000 ff2d 	bl	800fb00 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	889b      	ldrh	r3, [r3, #4]
 800ecb2:	b29b      	uxth	r3, r3
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d12a      	bne.n	800ed0e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	6858      	ldr	r0, [r3, #4]
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	3308      	adds	r3, #8
 800ecce:	2214      	movs	r2, #20
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	f000 fee5 	bl	800faa0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ecd6:	2101      	movs	r1, #1
 800ecd8:	69b8      	ldr	r0, [r7, #24]
 800ecda:	f7ff fc3d 	bl	800e558 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ecde:	69b8      	ldr	r0, [r7, #24]
 800ece0:	f7f8 f966 	bl	8006fb0 <pbuf_clen>
 800ece4:	4603      	mov	r3, r0
 800ece6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ece8:	8bfa      	ldrh	r2, [r7, #30]
 800ecea:	8a7b      	ldrh	r3, [r7, #18]
 800ecec:	4413      	add	r3, r2
 800ecee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecf2:	db05      	blt.n	800ed00 <ip_reass_free_complete_datagram+0x98>
 800ecf4:	4b27      	ldr	r3, [pc, #156]	; (800ed94 <ip_reass_free_complete_datagram+0x12c>)
 800ecf6:	22bc      	movs	r2, #188	; 0xbc
 800ecf8:	492a      	ldr	r1, [pc, #168]	; (800eda4 <ip_reass_free_complete_datagram+0x13c>)
 800ecfa:	4828      	ldr	r0, [pc, #160]	; (800ed9c <ip_reass_free_complete_datagram+0x134>)
 800ecfc:	f000 ff00 	bl	800fb00 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ed00:	8bfa      	ldrh	r2, [r7, #30]
 800ed02:	8a7b      	ldrh	r3, [r7, #18]
 800ed04:	4413      	add	r3, r2
 800ed06:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ed08:	69b8      	ldr	r0, [r7, #24]
 800ed0a:	f7f8 f8c9 	bl	8006ea0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ed14:	e01f      	b.n	800ed56 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ed16:	69bb      	ldr	r3, [r7, #24]
 800ed18:	685b      	ldr	r3, [r3, #4]
 800ed1a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ed1c:	69bb      	ldr	r3, [r7, #24]
 800ed1e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ed26:	68f8      	ldr	r0, [r7, #12]
 800ed28:	f7f8 f942 	bl	8006fb0 <pbuf_clen>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ed30:	8bfa      	ldrh	r2, [r7, #30]
 800ed32:	8a7b      	ldrh	r3, [r7, #18]
 800ed34:	4413      	add	r3, r2
 800ed36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed3a:	db05      	blt.n	800ed48 <ip_reass_free_complete_datagram+0xe0>
 800ed3c:	4b15      	ldr	r3, [pc, #84]	; (800ed94 <ip_reass_free_complete_datagram+0x12c>)
 800ed3e:	22cc      	movs	r2, #204	; 0xcc
 800ed40:	4918      	ldr	r1, [pc, #96]	; (800eda4 <ip_reass_free_complete_datagram+0x13c>)
 800ed42:	4816      	ldr	r0, [pc, #88]	; (800ed9c <ip_reass_free_complete_datagram+0x134>)
 800ed44:	f000 fedc 	bl	800fb00 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ed48:	8bfa      	ldrh	r2, [r7, #30]
 800ed4a:	8a7b      	ldrh	r3, [r7, #18]
 800ed4c:	4413      	add	r3, r2
 800ed4e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ed50:	68f8      	ldr	r0, [r7, #12]
 800ed52:	f7f8 f8a5 	bl	8006ea0 <pbuf_free>
  while (p != NULL) {
 800ed56:	69bb      	ldr	r3, [r7, #24]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d1dc      	bne.n	800ed16 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ed5c:	6839      	ldr	r1, [r7, #0]
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f000 f8c2 	bl	800eee8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ed64:	4b10      	ldr	r3, [pc, #64]	; (800eda8 <ip_reass_free_complete_datagram+0x140>)
 800ed66:	881b      	ldrh	r3, [r3, #0]
 800ed68:	8bfa      	ldrh	r2, [r7, #30]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d905      	bls.n	800ed7a <ip_reass_free_complete_datagram+0x112>
 800ed6e:	4b09      	ldr	r3, [pc, #36]	; (800ed94 <ip_reass_free_complete_datagram+0x12c>)
 800ed70:	22d2      	movs	r2, #210	; 0xd2
 800ed72:	490e      	ldr	r1, [pc, #56]	; (800edac <ip_reass_free_complete_datagram+0x144>)
 800ed74:	4809      	ldr	r0, [pc, #36]	; (800ed9c <ip_reass_free_complete_datagram+0x134>)
 800ed76:	f000 fec3 	bl	800fb00 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ed7a:	4b0b      	ldr	r3, [pc, #44]	; (800eda8 <ip_reass_free_complete_datagram+0x140>)
 800ed7c:	881a      	ldrh	r2, [r3, #0]
 800ed7e:	8bfb      	ldrh	r3, [r7, #30]
 800ed80:	1ad3      	subs	r3, r2, r3
 800ed82:	b29a      	uxth	r2, r3
 800ed84:	4b08      	ldr	r3, [pc, #32]	; (800eda8 <ip_reass_free_complete_datagram+0x140>)
 800ed86:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ed88:	8bfb      	ldrh	r3, [r7, #30]
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3720      	adds	r7, #32
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	bf00      	nop
 800ed94:	080136b4 	.word	0x080136b4
 800ed98:	080136f0 	.word	0x080136f0
 800ed9c:	080136fc 	.word	0x080136fc
 800eda0:	08013724 	.word	0x08013724
 800eda4:	08013738 	.word	0x08013738
 800eda8:	24003340 	.word	0x24003340
 800edac:	08013758 	.word	0x08013758

0800edb0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b08a      	sub	sp, #40	; 0x28
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800edba:	2300      	movs	r3, #0
 800edbc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800edbe:	2300      	movs	r3, #0
 800edc0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800edc2:	2300      	movs	r3, #0
 800edc4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800edc6:	2300      	movs	r3, #0
 800edc8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800edca:	2300      	movs	r3, #0
 800edcc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800edce:	4b28      	ldr	r3, [pc, #160]	; (800ee70 <ip_reass_remove_oldest_datagram+0xc0>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800edd4:	e030      	b.n	800ee38 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800edd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd8:	695a      	ldr	r2, [r3, #20]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	68db      	ldr	r3, [r3, #12]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d10c      	bne.n	800edfc <ip_reass_remove_oldest_datagram+0x4c>
 800ede2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede4:	699a      	ldr	r2, [r3, #24]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	691b      	ldr	r3, [r3, #16]
 800edea:	429a      	cmp	r2, r3
 800edec:	d106      	bne.n	800edfc <ip_reass_remove_oldest_datagram+0x4c>
 800edee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf0:	899a      	ldrh	r2, [r3, #12]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	889b      	ldrh	r3, [r3, #4]
 800edf6:	b29b      	uxth	r3, r3
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d014      	beq.n	800ee26 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	3301      	adds	r3, #1
 800ee00:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ee02:	6a3b      	ldr	r3, [r7, #32]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d104      	bne.n	800ee12 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ee08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	61bb      	str	r3, [r7, #24]
 800ee10:	e009      	b.n	800ee26 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ee12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee14:	7fda      	ldrb	r2, [r3, #31]
 800ee16:	6a3b      	ldr	r3, [r7, #32]
 800ee18:	7fdb      	ldrb	r3, [r3, #31]
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d803      	bhi.n	800ee26 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ee1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee20:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ee22:	69fb      	ldr	r3, [r7, #28]
 800ee24:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ee26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d001      	beq.n	800ee32 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ee2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee30:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ee32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ee38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d1cb      	bne.n	800edd6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ee3e:	6a3b      	ldr	r3, [r7, #32]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d008      	beq.n	800ee56 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ee44:	69b9      	ldr	r1, [r7, #24]
 800ee46:	6a38      	ldr	r0, [r7, #32]
 800ee48:	f7ff ff0e 	bl	800ec68 <ip_reass_free_complete_datagram>
 800ee4c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ee4e:	697a      	ldr	r2, [r7, #20]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	4413      	add	r3, r2
 800ee54:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ee56:	697a      	ldr	r2, [r7, #20]
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	da02      	bge.n	800ee64 <ip_reass_remove_oldest_datagram+0xb4>
 800ee5e:	693b      	ldr	r3, [r7, #16]
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	dcac      	bgt.n	800edbe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ee64:	697b      	ldr	r3, [r7, #20]
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3728      	adds	r7, #40	; 0x28
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	2400333c 	.word	0x2400333c

0800ee74 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b084      	sub	sp, #16
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ee7e:	2004      	movs	r0, #4
 800ee80:	f7f7 f928 	bl	80060d4 <memp_malloc>
 800ee84:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d110      	bne.n	800eeae <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ee8c:	6839      	ldr	r1, [r7, #0]
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	f7ff ff8e 	bl	800edb0 <ip_reass_remove_oldest_datagram>
 800ee94:	4602      	mov	r2, r0
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	dc03      	bgt.n	800eea4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ee9c:	2004      	movs	r0, #4
 800ee9e:	f7f7 f919 	bl	80060d4 <memp_malloc>
 800eea2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d101      	bne.n	800eeae <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	e016      	b.n	800eedc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800eeae:	2220      	movs	r2, #32
 800eeb0:	2100      	movs	r1, #0
 800eeb2:	68f8      	ldr	r0, [r7, #12]
 800eeb4:	f000 fe1c 	bl	800faf0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	220f      	movs	r2, #15
 800eebc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800eebe:	4b09      	ldr	r3, [pc, #36]	; (800eee4 <ip_reass_enqueue_new_datagram+0x70>)
 800eec0:	681a      	ldr	r2, [r3, #0]
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800eec6:	4a07      	ldr	r2, [pc, #28]	; (800eee4 <ip_reass_enqueue_new_datagram+0x70>)
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	3308      	adds	r3, #8
 800eed0:	2214      	movs	r2, #20
 800eed2:	6879      	ldr	r1, [r7, #4]
 800eed4:	4618      	mov	r0, r3
 800eed6:	f000 fde3 	bl	800faa0 <memcpy>
  return ipr;
 800eeda:	68fb      	ldr	r3, [r7, #12]
}
 800eedc:	4618      	mov	r0, r3
 800eede:	3710      	adds	r7, #16
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}
 800eee4:	2400333c 	.word	0x2400333c

0800eee8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b082      	sub	sp, #8
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800eef2:	4b10      	ldr	r3, [pc, #64]	; (800ef34 <ip_reass_dequeue_datagram+0x4c>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	687a      	ldr	r2, [r7, #4]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d104      	bne.n	800ef06 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4a0c      	ldr	r2, [pc, #48]	; (800ef34 <ip_reass_dequeue_datagram+0x4c>)
 800ef02:	6013      	str	r3, [r2, #0]
 800ef04:	e00d      	b.n	800ef22 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d106      	bne.n	800ef1a <ip_reass_dequeue_datagram+0x32>
 800ef0c:	4b0a      	ldr	r3, [pc, #40]	; (800ef38 <ip_reass_dequeue_datagram+0x50>)
 800ef0e:	f240 1245 	movw	r2, #325	; 0x145
 800ef12:	490a      	ldr	r1, [pc, #40]	; (800ef3c <ip_reass_dequeue_datagram+0x54>)
 800ef14:	480a      	ldr	r0, [pc, #40]	; (800ef40 <ip_reass_dequeue_datagram+0x58>)
 800ef16:	f000 fdf3 	bl	800fb00 <iprintf>
    prev->next = ipr->next;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681a      	ldr	r2, [r3, #0]
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800ef22:	6879      	ldr	r1, [r7, #4]
 800ef24:	2004      	movs	r0, #4
 800ef26:	f7f7 f945 	bl	80061b4 <memp_free>
}
 800ef2a:	bf00      	nop
 800ef2c:	3708      	adds	r7, #8
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
 800ef32:	bf00      	nop
 800ef34:	2400333c 	.word	0x2400333c
 800ef38:	080136b4 	.word	0x080136b4
 800ef3c:	0801377c 	.word	0x0801377c
 800ef40:	080136fc 	.word	0x080136fc

0800ef44 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b08c      	sub	sp, #48	; 0x30
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	60f8      	str	r0, [r7, #12]
 800ef4c:	60b9      	str	r1, [r7, #8]
 800ef4e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800ef50:	2300      	movs	r3, #0
 800ef52:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800ef54:	2301      	movs	r3, #1
 800ef56:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ef5e:	69fb      	ldr	r3, [r7, #28]
 800ef60:	885b      	ldrh	r3, [r3, #2]
 800ef62:	b29b      	uxth	r3, r3
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7f6 fb85 	bl	8005674 <lwip_htons>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800ef6e:	69fb      	ldr	r3, [r7, #28]
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	f003 030f 	and.w	r3, r3, #15
 800ef76:	b2db      	uxtb	r3, r3
 800ef78:	009b      	lsls	r3, r3, #2
 800ef7a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800ef7c:	7e7b      	ldrb	r3, [r7, #25]
 800ef7e:	b29b      	uxth	r3, r3
 800ef80:	8b7a      	ldrh	r2, [r7, #26]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d202      	bcs.n	800ef8c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ef86:	f04f 33ff 	mov.w	r3, #4294967295
 800ef8a:	e135      	b.n	800f1f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800ef8c:	7e7b      	ldrb	r3, [r7, #25]
 800ef8e:	b29b      	uxth	r3, r3
 800ef90:	8b7a      	ldrh	r2, [r7, #26]
 800ef92:	1ad3      	subs	r3, r2, r3
 800ef94:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ef96:	69fb      	ldr	r3, [r7, #28]
 800ef98:	88db      	ldrh	r3, [r3, #6]
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7f6 fb69 	bl	8005674 <lwip_htons>
 800efa2:	4603      	mov	r3, r0
 800efa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800efa8:	b29b      	uxth	r3, r3
 800efaa:	00db      	lsls	r3, r3, #3
 800efac:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800efb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb6:	2200      	movs	r2, #0
 800efb8:	701a      	strb	r2, [r3, #0]
 800efba:	2200      	movs	r2, #0
 800efbc:	705a      	strb	r2, [r3, #1]
 800efbe:	2200      	movs	r2, #0
 800efc0:	709a      	strb	r2, [r3, #2]
 800efc2:	2200      	movs	r2, #0
 800efc4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800efc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc8:	8afa      	ldrh	r2, [r7, #22]
 800efca:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800efcc:	8afa      	ldrh	r2, [r7, #22]
 800efce:	8b7b      	ldrh	r3, [r7, #26]
 800efd0:	4413      	add	r3, r2
 800efd2:	b29a      	uxth	r2, r3
 800efd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800efd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efda:	88db      	ldrh	r3, [r3, #6]
 800efdc:	b29b      	uxth	r3, r3
 800efde:	8afa      	ldrh	r2, [r7, #22]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d902      	bls.n	800efea <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800efe4:	f04f 33ff 	mov.w	r3, #4294967295
 800efe8:	e106      	b.n	800f1f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	627b      	str	r3, [r7, #36]	; 0x24
 800eff0:	e068      	b.n	800f0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800eff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff4:	685b      	ldr	r3, [r3, #4]
 800eff6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800eff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effa:	889b      	ldrh	r3, [r3, #4]
 800effc:	b29a      	uxth	r2, r3
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	889b      	ldrh	r3, [r3, #4]
 800f002:	b29b      	uxth	r3, r3
 800f004:	429a      	cmp	r2, r3
 800f006:	d235      	bcs.n	800f074 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f00c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f010:	2b00      	cmp	r3, #0
 800f012:	d020      	beq.n	800f056 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f016:	889b      	ldrh	r3, [r3, #4]
 800f018:	b29a      	uxth	r2, r3
 800f01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f01c:	88db      	ldrh	r3, [r3, #6]
 800f01e:	b29b      	uxth	r3, r3
 800f020:	429a      	cmp	r2, r3
 800f022:	d307      	bcc.n	800f034 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f026:	88db      	ldrh	r3, [r3, #6]
 800f028:	b29a      	uxth	r2, r3
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	889b      	ldrh	r3, [r3, #4]
 800f02e:	b29b      	uxth	r3, r3
 800f030:	429a      	cmp	r2, r3
 800f032:	d902      	bls.n	800f03a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f034:	f04f 33ff 	mov.w	r3, #4294967295
 800f038:	e0de      	b.n	800f1f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f03c:	68ba      	ldr	r2, [r7, #8]
 800f03e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f042:	88db      	ldrh	r3, [r3, #6]
 800f044:	b29a      	uxth	r2, r3
 800f046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f048:	889b      	ldrh	r3, [r3, #4]
 800f04a:	b29b      	uxth	r3, r3
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d03d      	beq.n	800f0cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f050:	2300      	movs	r3, #0
 800f052:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f054:	e03a      	b.n	800f0cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f058:	88db      	ldrh	r3, [r3, #6]
 800f05a:	b29a      	uxth	r2, r3
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	889b      	ldrh	r3, [r3, #4]
 800f060:	b29b      	uxth	r3, r3
 800f062:	429a      	cmp	r2, r3
 800f064:	d902      	bls.n	800f06c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f066:	f04f 33ff 	mov.w	r3, #4294967295
 800f06a:	e0c5      	b.n	800f1f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	68ba      	ldr	r2, [r7, #8]
 800f070:	605a      	str	r2, [r3, #4]
      break;
 800f072:	e02b      	b.n	800f0cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f076:	889b      	ldrh	r3, [r3, #4]
 800f078:	b29a      	uxth	r2, r3
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	889b      	ldrh	r3, [r3, #4]
 800f07e:	b29b      	uxth	r3, r3
 800f080:	429a      	cmp	r2, r3
 800f082:	d102      	bne.n	800f08a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f084:	f04f 33ff 	mov.w	r3, #4294967295
 800f088:	e0b6      	b.n	800f1f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08c:	889b      	ldrh	r3, [r3, #4]
 800f08e:	b29a      	uxth	r2, r3
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	88db      	ldrh	r3, [r3, #6]
 800f094:	b29b      	uxth	r3, r3
 800f096:	429a      	cmp	r2, r3
 800f098:	d202      	bcs.n	800f0a0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f09a:	f04f 33ff 	mov.w	r3, #4294967295
 800f09e:	e0ab      	b.n	800f1f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d009      	beq.n	800f0ba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a8:	88db      	ldrh	r3, [r3, #6]
 800f0aa:	b29a      	uxth	r2, r3
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	889b      	ldrh	r3, [r3, #4]
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d001      	beq.n	800f0ba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f0ba:	693b      	ldr	r3, [r7, #16]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d193      	bne.n	800eff2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f0ca:	e000      	b.n	800f0ce <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f0cc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d12d      	bne.n	800f130 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d01c      	beq.n	800f114 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0dc:	88db      	ldrh	r3, [r3, #6]
 800f0de:	b29a      	uxth	r2, r3
 800f0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e2:	889b      	ldrh	r3, [r3, #4]
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d906      	bls.n	800f0f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f0ea:	4b45      	ldr	r3, [pc, #276]	; (800f200 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f0ec:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f0f0:	4944      	ldr	r1, [pc, #272]	; (800f204 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f0f2:	4845      	ldr	r0, [pc, #276]	; (800f208 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f0f4:	f000 fd04 	bl	800fb00 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0fa:	68ba      	ldr	r2, [r7, #8]
 800f0fc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f100:	88db      	ldrh	r3, [r3, #6]
 800f102:	b29a      	uxth	r2, r3
 800f104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f106:	889b      	ldrh	r3, [r3, #4]
 800f108:	b29b      	uxth	r3, r3
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d010      	beq.n	800f130 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f10e:	2300      	movs	r3, #0
 800f110:	623b      	str	r3, [r7, #32]
 800f112:	e00d      	b.n	800f130 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d006      	beq.n	800f12a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f11c:	4b38      	ldr	r3, [pc, #224]	; (800f200 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f11e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800f122:	493a      	ldr	r1, [pc, #232]	; (800f20c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f124:	4838      	ldr	r0, [pc, #224]	; (800f208 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f126:	f000 fceb 	bl	800fb00 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	68ba      	ldr	r2, [r7, #8]
 800f12e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d105      	bne.n	800f142 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	7f9b      	ldrb	r3, [r3, #30]
 800f13a:	f003 0301 	and.w	r3, r3, #1
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d059      	beq.n	800f1f6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f142:	6a3b      	ldr	r3, [r7, #32]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d04f      	beq.n	800f1e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	685b      	ldr	r3, [r3, #4]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d006      	beq.n	800f15e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	685b      	ldr	r3, [r3, #4]
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	889b      	ldrh	r3, [r3, #4]
 800f158:	b29b      	uxth	r3, r3
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d002      	beq.n	800f164 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f15e:	2300      	movs	r3, #0
 800f160:	623b      	str	r3, [r7, #32]
 800f162:	e041      	b.n	800f1e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f166:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f16e:	e012      	b.n	800f196 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f178:	88db      	ldrh	r3, [r3, #6]
 800f17a:	b29a      	uxth	r2, r3
 800f17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f17e:	889b      	ldrh	r3, [r3, #4]
 800f180:	b29b      	uxth	r3, r3
 800f182:	429a      	cmp	r2, r3
 800f184:	d002      	beq.n	800f18c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f186:	2300      	movs	r3, #0
 800f188:	623b      	str	r3, [r7, #32]
            break;
 800f18a:	e007      	b.n	800f19c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d1e9      	bne.n	800f170 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f19c:	6a3b      	ldr	r3, [r7, #32]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d022      	beq.n	800f1e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d106      	bne.n	800f1b8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f1aa:	4b15      	ldr	r3, [pc, #84]	; (800f200 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f1ac:	f240 12df 	movw	r2, #479	; 0x1df
 800f1b0:	4917      	ldr	r1, [pc, #92]	; (800f210 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f1b2:	4815      	ldr	r0, [pc, #84]	; (800f208 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f1b4:	f000 fca4 	bl	800fb00 <iprintf>
          LWIP_ASSERT("sanity check",
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	d106      	bne.n	800f1d2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f1c4:	4b0e      	ldr	r3, [pc, #56]	; (800f200 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f1c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f1ca:	4911      	ldr	r1, [pc, #68]	; (800f210 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f1cc:	480e      	ldr	r0, [pc, #56]	; (800f208 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f1ce:	f000 fc97 	bl	800fb00 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d006      	beq.n	800f1e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f1da:	4b09      	ldr	r3, [pc, #36]	; (800f200 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f1dc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f1e0:	490c      	ldr	r1, [pc, #48]	; (800f214 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f1e2:	4809      	ldr	r0, [pc, #36]	; (800f208 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f1e4:	f000 fc8c 	bl	800fb00 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f1e8:	6a3b      	ldr	r3, [r7, #32]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	bf14      	ite	ne
 800f1ee:	2301      	movne	r3, #1
 800f1f0:	2300      	moveq	r3, #0
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	e000      	b.n	800f1f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f1f6:	2300      	movs	r3, #0
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3730      	adds	r7, #48	; 0x30
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}
 800f200:	080136b4 	.word	0x080136b4
 800f204:	08013798 	.word	0x08013798
 800f208:	080136fc 	.word	0x080136fc
 800f20c:	080137b8 	.word	0x080137b8
 800f210:	080137f0 	.word	0x080137f0
 800f214:	08013800 	.word	0x08013800

0800f218 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b08e      	sub	sp, #56	; 0x38
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	685b      	ldr	r3, [r3, #4]
 800f224:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	f003 030f 	and.w	r3, r3, #15
 800f22e:	b2db      	uxtb	r3, r3
 800f230:	009b      	lsls	r3, r3, #2
 800f232:	b2db      	uxtb	r3, r3
 800f234:	2b14      	cmp	r3, #20
 800f236:	f040 8171 	bne.w	800f51c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23c:	88db      	ldrh	r3, [r3, #6]
 800f23e:	b29b      	uxth	r3, r3
 800f240:	4618      	mov	r0, r3
 800f242:	f7f6 fa17 	bl	8005674 <lwip_htons>
 800f246:	4603      	mov	r3, r0
 800f248:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f24c:	b29b      	uxth	r3, r3
 800f24e:	00db      	lsls	r3, r3, #3
 800f250:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f254:	885b      	ldrh	r3, [r3, #2]
 800f256:	b29b      	uxth	r3, r3
 800f258:	4618      	mov	r0, r3
 800f25a:	f7f6 fa0b 	bl	8005674 <lwip_htons>
 800f25e:	4603      	mov	r3, r0
 800f260:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	f003 030f 	and.w	r3, r3, #15
 800f26a:	b2db      	uxtb	r3, r3
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f272:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f276:	b29b      	uxth	r3, r3
 800f278:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f27a:	429a      	cmp	r2, r3
 800f27c:	f0c0 8150 	bcc.w	800f520 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f284:	b29b      	uxth	r3, r3
 800f286:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f288:	1ad3      	subs	r3, r2, r3
 800f28a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f7f7 fe8f 	bl	8006fb0 <pbuf_clen>
 800f292:	4603      	mov	r3, r0
 800f294:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f296:	4b8c      	ldr	r3, [pc, #560]	; (800f4c8 <ip4_reass+0x2b0>)
 800f298:	881b      	ldrh	r3, [r3, #0]
 800f29a:	461a      	mov	r2, r3
 800f29c:	8c3b      	ldrh	r3, [r7, #32]
 800f29e:	4413      	add	r3, r2
 800f2a0:	2b0a      	cmp	r3, #10
 800f2a2:	dd10      	ble.n	800f2c6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f2a4:	8c3b      	ldrh	r3, [r7, #32]
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2aa:	f7ff fd81 	bl	800edb0 <ip_reass_remove_oldest_datagram>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	f000 8137 	beq.w	800f524 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f2b6:	4b84      	ldr	r3, [pc, #528]	; (800f4c8 <ip4_reass+0x2b0>)
 800f2b8:	881b      	ldrh	r3, [r3, #0]
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	8c3b      	ldrh	r3, [r7, #32]
 800f2be:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f2c0:	2b0a      	cmp	r3, #10
 800f2c2:	f300 812f 	bgt.w	800f524 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f2c6:	4b81      	ldr	r3, [pc, #516]	; (800f4cc <ip4_reass+0x2b4>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	633b      	str	r3, [r7, #48]	; 0x30
 800f2cc:	e015      	b.n	800f2fa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d0:	695a      	ldr	r2, [r3, #20]
 800f2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d4:	68db      	ldr	r3, [r3, #12]
 800f2d6:	429a      	cmp	r2, r3
 800f2d8:	d10c      	bne.n	800f2f4 <ip4_reass+0xdc>
 800f2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2dc:	699a      	ldr	r2, [r3, #24]
 800f2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e0:	691b      	ldr	r3, [r3, #16]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d106      	bne.n	800f2f4 <ip4_reass+0xdc>
 800f2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e8:	899a      	ldrh	r2, [r3, #12]
 800f2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ec:	889b      	ldrh	r3, [r3, #4]
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d006      	beq.n	800f302 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	633b      	str	r3, [r7, #48]	; 0x30
 800f2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d1e6      	bne.n	800f2ce <ip4_reass+0xb6>
 800f300:	e000      	b.n	800f304 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f302:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f306:	2b00      	cmp	r3, #0
 800f308:	d109      	bne.n	800f31e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f30a:	8c3b      	ldrh	r3, [r7, #32]
 800f30c:	4619      	mov	r1, r3
 800f30e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f310:	f7ff fdb0 	bl	800ee74 <ip_reass_enqueue_new_datagram>
 800f314:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d11c      	bne.n	800f356 <ip4_reass+0x13e>
      goto nullreturn;
 800f31c:	e105      	b.n	800f52a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f320:	88db      	ldrh	r3, [r3, #6]
 800f322:	b29b      	uxth	r3, r3
 800f324:	4618      	mov	r0, r3
 800f326:	f7f6 f9a5 	bl	8005674 <lwip_htons>
 800f32a:	4603      	mov	r3, r0
 800f32c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f330:	2b00      	cmp	r3, #0
 800f332:	d110      	bne.n	800f356 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f336:	89db      	ldrh	r3, [r3, #14]
 800f338:	4618      	mov	r0, r3
 800f33a:	f7f6 f99b 	bl	8005674 <lwip_htons>
 800f33e:	4603      	mov	r3, r0
 800f340:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f344:	2b00      	cmp	r3, #0
 800f346:	d006      	beq.n	800f356 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f34a:	3308      	adds	r3, #8
 800f34c:	2214      	movs	r2, #20
 800f34e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f350:	4618      	mov	r0, r3
 800f352:	f000 fba5 	bl	800faa0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f358:	88db      	ldrh	r3, [r3, #6]
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	f003 0320 	and.w	r3, r3, #32
 800f360:	2b00      	cmp	r3, #0
 800f362:	bf0c      	ite	eq
 800f364:	2301      	moveq	r3, #1
 800f366:	2300      	movne	r3, #0
 800f368:	b2db      	uxtb	r3, r3
 800f36a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f36c:	69fb      	ldr	r3, [r7, #28]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d00e      	beq.n	800f390 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f372:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f374:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f376:	4413      	add	r3, r2
 800f378:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f37a:	8b7a      	ldrh	r2, [r7, #26]
 800f37c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f37e:	429a      	cmp	r2, r3
 800f380:	f0c0 80a0 	bcc.w	800f4c4 <ip4_reass+0x2ac>
 800f384:	8b7b      	ldrh	r3, [r7, #26]
 800f386:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f38a:	4293      	cmp	r3, r2
 800f38c:	f200 809a 	bhi.w	800f4c4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f390:	69fa      	ldr	r2, [r7, #28]
 800f392:	6879      	ldr	r1, [r7, #4]
 800f394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f396:	f7ff fdd5 	bl	800ef44 <ip_reass_chain_frag_into_datagram_and_validate>
 800f39a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3a2:	f000 809b 	beq.w	800f4dc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f3a6:	4b48      	ldr	r3, [pc, #288]	; (800f4c8 <ip4_reass+0x2b0>)
 800f3a8:	881a      	ldrh	r2, [r3, #0]
 800f3aa:	8c3b      	ldrh	r3, [r7, #32]
 800f3ac:	4413      	add	r3, r2
 800f3ae:	b29a      	uxth	r2, r3
 800f3b0:	4b45      	ldr	r3, [pc, #276]	; (800f4c8 <ip4_reass+0x2b0>)
 800f3b2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f3b4:	69fb      	ldr	r3, [r7, #28]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d00d      	beq.n	800f3d6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f3ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f3bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f3be:	4413      	add	r3, r2
 800f3c0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c4:	8a7a      	ldrh	r2, [r7, #18]
 800f3c6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ca:	7f9b      	ldrb	r3, [r3, #30]
 800f3cc:	f043 0301 	orr.w	r3, r3, #1
 800f3d0:	b2da      	uxtb	r2, r3
 800f3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	d171      	bne.n	800f4c0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3de:	8b9b      	ldrh	r3, [r3, #28]
 800f3e0:	3314      	adds	r3, #20
 800f3e2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e6:	685b      	ldr	r3, [r3, #4]
 800f3e8:	685b      	ldr	r3, [r3, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f0:	685b      	ldr	r3, [r3, #4]
 800f3f2:	685b      	ldr	r3, [r3, #4]
 800f3f4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f8:	3308      	adds	r3, #8
 800f3fa:	2214      	movs	r2, #20
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f400:	f000 fb4e 	bl	800faa0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f404:	8a3b      	ldrh	r3, [r7, #16]
 800f406:	4618      	mov	r0, r3
 800f408:	f7f6 f934 	bl	8005674 <lwip_htons>
 800f40c:	4603      	mov	r3, r0
 800f40e:	461a      	mov	r2, r3
 800f410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f412:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f416:	2200      	movs	r2, #0
 800f418:	719a      	strb	r2, [r3, #6]
 800f41a:	2200      	movs	r2, #0
 800f41c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f420:	2200      	movs	r2, #0
 800f422:	729a      	strb	r2, [r3, #10]
 800f424:	2200      	movs	r2, #0
 800f426:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f42e:	e00d      	b.n	800f44c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f432:	685b      	ldr	r3, [r3, #4]
 800f434:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f436:	2114      	movs	r1, #20
 800f438:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f43a:	f7f7 fcab 	bl	8006d94 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f43e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f7f7 fdef 	bl	8007024 <pbuf_cat>
      r = iprh->next_pbuf;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d1ee      	bne.n	800f430 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f452:	4b1e      	ldr	r3, [pc, #120]	; (800f4cc <ip4_reass+0x2b4>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f458:	429a      	cmp	r2, r3
 800f45a:	d102      	bne.n	800f462 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f45c:	2300      	movs	r3, #0
 800f45e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f460:	e010      	b.n	800f484 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f462:	4b1a      	ldr	r3, [pc, #104]	; (800f4cc <ip4_reass+0x2b4>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f468:	e007      	b.n	800f47a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f470:	429a      	cmp	r2, r3
 800f472:	d006      	beq.n	800f482 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d1f4      	bne.n	800f46a <ip4_reass+0x252>
 800f480:	e000      	b.n	800f484 <ip4_reass+0x26c>
          break;
 800f482:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f484:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f486:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f488:	f7ff fd2e 	bl	800eee8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f7f7 fd8f 	bl	8006fb0 <pbuf_clen>
 800f492:	4603      	mov	r3, r0
 800f494:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f496:	4b0c      	ldr	r3, [pc, #48]	; (800f4c8 <ip4_reass+0x2b0>)
 800f498:	881b      	ldrh	r3, [r3, #0]
 800f49a:	8c3a      	ldrh	r2, [r7, #32]
 800f49c:	429a      	cmp	r2, r3
 800f49e:	d906      	bls.n	800f4ae <ip4_reass+0x296>
 800f4a0:	4b0b      	ldr	r3, [pc, #44]	; (800f4d0 <ip4_reass+0x2b8>)
 800f4a2:	f240 229b 	movw	r2, #667	; 0x29b
 800f4a6:	490b      	ldr	r1, [pc, #44]	; (800f4d4 <ip4_reass+0x2bc>)
 800f4a8:	480b      	ldr	r0, [pc, #44]	; (800f4d8 <ip4_reass+0x2c0>)
 800f4aa:	f000 fb29 	bl	800fb00 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f4ae:	4b06      	ldr	r3, [pc, #24]	; (800f4c8 <ip4_reass+0x2b0>)
 800f4b0:	881a      	ldrh	r2, [r3, #0]
 800f4b2:	8c3b      	ldrh	r3, [r7, #32]
 800f4b4:	1ad3      	subs	r3, r2, r3
 800f4b6:	b29a      	uxth	r2, r3
 800f4b8:	4b03      	ldr	r3, [pc, #12]	; (800f4c8 <ip4_reass+0x2b0>)
 800f4ba:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	e038      	b.n	800f532 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	e036      	b.n	800f532 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800f4c4:	bf00      	nop
 800f4c6:	e00a      	b.n	800f4de <ip4_reass+0x2c6>
 800f4c8:	24003340 	.word	0x24003340
 800f4cc:	2400333c 	.word	0x2400333c
 800f4d0:	080136b4 	.word	0x080136b4
 800f4d4:	08013824 	.word	0x08013824
 800f4d8:	080136fc 	.word	0x080136fc
    goto nullreturn_ipr;
 800f4dc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d106      	bne.n	800f4f2 <ip4_reass+0x2da>
 800f4e4:	4b15      	ldr	r3, [pc, #84]	; (800f53c <ip4_reass+0x324>)
 800f4e6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f4ea:	4915      	ldr	r1, [pc, #84]	; (800f540 <ip4_reass+0x328>)
 800f4ec:	4815      	ldr	r0, [pc, #84]	; (800f544 <ip4_reass+0x32c>)
 800f4ee:	f000 fb07 	bl	800fb00 <iprintf>
  if (ipr->p == NULL) {
 800f4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f4:	685b      	ldr	r3, [r3, #4]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d116      	bne.n	800f528 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f4fa:	4b13      	ldr	r3, [pc, #76]	; (800f548 <ip4_reass+0x330>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f500:	429a      	cmp	r2, r3
 800f502:	d006      	beq.n	800f512 <ip4_reass+0x2fa>
 800f504:	4b0d      	ldr	r3, [pc, #52]	; (800f53c <ip4_reass+0x324>)
 800f506:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f50a:	4910      	ldr	r1, [pc, #64]	; (800f54c <ip4_reass+0x334>)
 800f50c:	480d      	ldr	r0, [pc, #52]	; (800f544 <ip4_reass+0x32c>)
 800f50e:	f000 faf7 	bl	800fb00 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f512:	2100      	movs	r1, #0
 800f514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f516:	f7ff fce7 	bl	800eee8 <ip_reass_dequeue_datagram>
 800f51a:	e006      	b.n	800f52a <ip4_reass+0x312>
    goto nullreturn;
 800f51c:	bf00      	nop
 800f51e:	e004      	b.n	800f52a <ip4_reass+0x312>
    goto nullreturn;
 800f520:	bf00      	nop
 800f522:	e002      	b.n	800f52a <ip4_reass+0x312>
      goto nullreturn;
 800f524:	bf00      	nop
 800f526:	e000      	b.n	800f52a <ip4_reass+0x312>
  }

nullreturn:
 800f528:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f7f7 fcb8 	bl	8006ea0 <pbuf_free>
  return NULL;
 800f530:	2300      	movs	r3, #0
}
 800f532:	4618      	mov	r0, r3
 800f534:	3738      	adds	r7, #56	; 0x38
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}
 800f53a:	bf00      	nop
 800f53c:	080136b4 	.word	0x080136b4
 800f540:	08013840 	.word	0x08013840
 800f544:	080136fc 	.word	0x080136fc
 800f548:	2400333c 	.word	0x2400333c
 800f54c:	0801384c 	.word	0x0801384c

0800f550 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f554:	2005      	movs	r0, #5
 800f556:	f7f6 fdbd 	bl	80060d4 <memp_malloc>
 800f55a:	4603      	mov	r3, r0
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	bd80      	pop	{r7, pc}

0800f560 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b082      	sub	sp, #8
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d106      	bne.n	800f57c <ip_frag_free_pbuf_custom_ref+0x1c>
 800f56e:	4b07      	ldr	r3, [pc, #28]	; (800f58c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f570:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f574:	4906      	ldr	r1, [pc, #24]	; (800f590 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f576:	4807      	ldr	r0, [pc, #28]	; (800f594 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f578:	f000 fac2 	bl	800fb00 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f57c:	6879      	ldr	r1, [r7, #4]
 800f57e:	2005      	movs	r0, #5
 800f580:	f7f6 fe18 	bl	80061b4 <memp_free>
}
 800f584:	bf00      	nop
 800f586:	3708      	adds	r7, #8
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}
 800f58c:	080136b4 	.word	0x080136b4
 800f590:	0801386c 	.word	0x0801386c
 800f594:	080136fc 	.word	0x080136fc

0800f598 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b084      	sub	sp, #16
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d106      	bne.n	800f5b8 <ipfrag_free_pbuf_custom+0x20>
 800f5aa:	4b11      	ldr	r3, [pc, #68]	; (800f5f0 <ipfrag_free_pbuf_custom+0x58>)
 800f5ac:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f5b0:	4910      	ldr	r1, [pc, #64]	; (800f5f4 <ipfrag_free_pbuf_custom+0x5c>)
 800f5b2:	4811      	ldr	r0, [pc, #68]	; (800f5f8 <ipfrag_free_pbuf_custom+0x60>)
 800f5b4:	f000 faa4 	bl	800fb00 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f5b8:	68fa      	ldr	r2, [r7, #12]
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d006      	beq.n	800f5ce <ipfrag_free_pbuf_custom+0x36>
 800f5c0:	4b0b      	ldr	r3, [pc, #44]	; (800f5f0 <ipfrag_free_pbuf_custom+0x58>)
 800f5c2:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f5c6:	490d      	ldr	r1, [pc, #52]	; (800f5fc <ipfrag_free_pbuf_custom+0x64>)
 800f5c8:	480b      	ldr	r0, [pc, #44]	; (800f5f8 <ipfrag_free_pbuf_custom+0x60>)
 800f5ca:	f000 fa99 	bl	800fb00 <iprintf>
  if (pcr->original != NULL) {
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	695b      	ldr	r3, [r3, #20]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d004      	beq.n	800f5e0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	695b      	ldr	r3, [r3, #20]
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f7f7 fc60 	bl	8006ea0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f5e0:	68f8      	ldr	r0, [r7, #12]
 800f5e2:	f7ff ffbd 	bl	800f560 <ip_frag_free_pbuf_custom_ref>
}
 800f5e6:	bf00      	nop
 800f5e8:	3710      	adds	r7, #16
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}
 800f5ee:	bf00      	nop
 800f5f0:	080136b4 	.word	0x080136b4
 800f5f4:	08013878 	.word	0x08013878
 800f5f8:	080136fc 	.word	0x080136fc
 800f5fc:	08013884 	.word	0x08013884

0800f600 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b094      	sub	sp, #80	; 0x50
 800f604:	af02      	add	r7, sp, #8
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	60b9      	str	r1, [r7, #8]
 800f60a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f60c:	2300      	movs	r3, #0
 800f60e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f616:	3b14      	subs	r3, #20
 800f618:	2b00      	cmp	r3, #0
 800f61a:	da00      	bge.n	800f61e <ip4_frag+0x1e>
 800f61c:	3307      	adds	r3, #7
 800f61e:	10db      	asrs	r3, r3, #3
 800f620:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f622:	2314      	movs	r3, #20
 800f624:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f62e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	f003 030f 	and.w	r3, r3, #15
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	009b      	lsls	r3, r3, #2
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	2b14      	cmp	r3, #20
 800f640:	d002      	beq.n	800f648 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f642:	f06f 0305 	mvn.w	r3, #5
 800f646:	e110      	b.n	800f86a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	895b      	ldrh	r3, [r3, #10]
 800f64c:	2b13      	cmp	r3, #19
 800f64e:	d809      	bhi.n	800f664 <ip4_frag+0x64>
 800f650:	4b88      	ldr	r3, [pc, #544]	; (800f874 <ip4_frag+0x274>)
 800f652:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800f656:	4988      	ldr	r1, [pc, #544]	; (800f878 <ip4_frag+0x278>)
 800f658:	4888      	ldr	r0, [pc, #544]	; (800f87c <ip4_frag+0x27c>)
 800f65a:	f000 fa51 	bl	800fb00 <iprintf>
 800f65e:	f06f 0305 	mvn.w	r3, #5
 800f662:	e102      	b.n	800f86a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f666:	88db      	ldrh	r3, [r3, #6]
 800f668:	b29b      	uxth	r3, r3
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7f6 f802 	bl	8005674 <lwip_htons>
 800f670:	4603      	mov	r3, r0
 800f672:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800f674:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f676:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f67a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f67e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f684:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	891b      	ldrh	r3, [r3, #8]
 800f68a:	3b14      	subs	r3, #20
 800f68c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800f690:	e0e1      	b.n	800f856 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f692:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f694:	00db      	lsls	r3, r3, #3
 800f696:	b29b      	uxth	r3, r3
 800f698:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f69c:	4293      	cmp	r3, r2
 800f69e:	bf28      	it	cs
 800f6a0:	4613      	movcs	r3, r2
 800f6a2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f6a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f6a8:	2114      	movs	r1, #20
 800f6aa:	200e      	movs	r0, #14
 800f6ac:	f7f7 f914 	bl	80068d8 <pbuf_alloc>
 800f6b0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800f6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	f000 80d5 	beq.w	800f864 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6bc:	895b      	ldrh	r3, [r3, #10]
 800f6be:	2b13      	cmp	r3, #19
 800f6c0:	d806      	bhi.n	800f6d0 <ip4_frag+0xd0>
 800f6c2:	4b6c      	ldr	r3, [pc, #432]	; (800f874 <ip4_frag+0x274>)
 800f6c4:	f44f 7249 	mov.w	r2, #804	; 0x324
 800f6c8:	496d      	ldr	r1, [pc, #436]	; (800f880 <ip4_frag+0x280>)
 800f6ca:	486c      	ldr	r0, [pc, #432]	; (800f87c <ip4_frag+0x27c>)
 800f6cc:	f000 fa18 	bl	800fb00 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d2:	685b      	ldr	r3, [r3, #4]
 800f6d4:	2214      	movs	r2, #20
 800f6d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f000 f9e1 	bl	800faa0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e0:	685b      	ldr	r3, [r3, #4]
 800f6e2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800f6e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f6e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800f6ea:	e064      	b.n	800f7b6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	895a      	ldrh	r2, [r3, #10]
 800f6f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f6f2:	1ad3      	subs	r3, r2, r3
 800f6f4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	895b      	ldrh	r3, [r3, #10]
 800f6fa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d906      	bls.n	800f70e <ip4_frag+0x10e>
 800f700:	4b5c      	ldr	r3, [pc, #368]	; (800f874 <ip4_frag+0x274>)
 800f702:	f240 322d 	movw	r2, #813	; 0x32d
 800f706:	495f      	ldr	r1, [pc, #380]	; (800f884 <ip4_frag+0x284>)
 800f708:	485c      	ldr	r0, [pc, #368]	; (800f87c <ip4_frag+0x27c>)
 800f70a:	f000 f9f9 	bl	800fb00 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f70e:	8bfa      	ldrh	r2, [r7, #30]
 800f710:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f714:	4293      	cmp	r3, r2
 800f716:	bf28      	it	cs
 800f718:	4613      	movcs	r3, r2
 800f71a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f71e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f722:	2b00      	cmp	r3, #0
 800f724:	d105      	bne.n	800f732 <ip4_frag+0x132>
        poff = 0;
 800f726:	2300      	movs	r3, #0
 800f728:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	60fb      	str	r3, [r7, #12]
        continue;
 800f730:	e041      	b.n	800f7b6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f732:	f7ff ff0d 	bl	800f550 <ip_frag_alloc_pbuf_custom_ref>
 800f736:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f738:	69bb      	ldr	r3, [r7, #24]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d103      	bne.n	800f746 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f73e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f740:	f7f7 fbae 	bl	8006ea0 <pbuf_free>
        goto memerr;
 800f744:	e08f      	b.n	800f866 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f746:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f74c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f74e:	4413      	add	r3, r2
 800f750:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f754:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f758:	9201      	str	r2, [sp, #4]
 800f75a:	9300      	str	r3, [sp, #0]
 800f75c:	4603      	mov	r3, r0
 800f75e:	2241      	movs	r2, #65	; 0x41
 800f760:	2000      	movs	r0, #0
 800f762:	f7f7 f9e3 	bl	8006b2c <pbuf_alloced_custom>
 800f766:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d106      	bne.n	800f77c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f76e:	69b8      	ldr	r0, [r7, #24]
 800f770:	f7ff fef6 	bl	800f560 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f774:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f776:	f7f7 fb93 	bl	8006ea0 <pbuf_free>
        goto memerr;
 800f77a:	e074      	b.n	800f866 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f77c:	68f8      	ldr	r0, [r7, #12]
 800f77e:	f7f7 fc2f 	bl	8006fe0 <pbuf_ref>
      pcr->original = p;
 800f782:	69bb      	ldr	r3, [r7, #24]
 800f784:	68fa      	ldr	r2, [r7, #12]
 800f786:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f788:	69bb      	ldr	r3, [r7, #24]
 800f78a:	4a3f      	ldr	r2, [pc, #252]	; (800f888 <ip4_frag+0x288>)
 800f78c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f78e:	6979      	ldr	r1, [r7, #20]
 800f790:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f792:	f7f7 fc47 	bl	8007024 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f796:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f79a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f79e:	1ad3      	subs	r3, r2, r3
 800f7a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f7a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d004      	beq.n	800f7b6 <ip4_frag+0x1b6>
        poff = 0;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f7b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d196      	bne.n	800f6ec <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f7be:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f7c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f7c4:	4413      	add	r3, r2
 800f7c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f7cc:	f1a3 0213 	sub.w	r2, r3, #19
 800f7d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	bfcc      	ite	gt
 800f7d8:	2301      	movgt	r3, #1
 800f7da:	2300      	movle	r3, #0
 800f7dc:	b2db      	uxtb	r3, r3
 800f7de:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f7e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f7e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f7e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f7ea:	6a3b      	ldr	r3, [r7, #32]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d002      	beq.n	800f7f6 <ip4_frag+0x1f6>
 800f7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d003      	beq.n	800f7fe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f7f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f7f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f7fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f7fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f800:	4618      	mov	r0, r3
 800f802:	f7f5 ff37 	bl	8005674 <lwip_htons>
 800f806:	4603      	mov	r3, r0
 800f808:	461a      	mov	r2, r3
 800f80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f80c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f80e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f810:	3314      	adds	r3, #20
 800f812:	b29b      	uxth	r3, r3
 800f814:	4618      	mov	r0, r3
 800f816:	f7f5 ff2d 	bl	8005674 <lwip_htons>
 800f81a:	4603      	mov	r3, r0
 800f81c:	461a      	mov	r2, r3
 800f81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f820:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f824:	2200      	movs	r2, #0
 800f826:	729a      	strb	r2, [r3, #10]
 800f828:	2200      	movs	r2, #0
 800f82a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	695b      	ldr	r3, [r3, #20]
 800f830:	687a      	ldr	r2, [r7, #4]
 800f832:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f834:	68b8      	ldr	r0, [r7, #8]
 800f836:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f838:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f83a:	f7f7 fb31 	bl	8006ea0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f83e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f842:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f844:	1ad3      	subs	r3, r2, r3
 800f846:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f84a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f84e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f850:	4413      	add	r3, r2
 800f852:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f856:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	f47f af19 	bne.w	800f692 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f860:	2300      	movs	r3, #0
 800f862:	e002      	b.n	800f86a <ip4_frag+0x26a>
      goto memerr;
 800f864:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f86a:	4618      	mov	r0, r3
 800f86c:	3748      	adds	r7, #72	; 0x48
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}
 800f872:	bf00      	nop
 800f874:	080136b4 	.word	0x080136b4
 800f878:	08013890 	.word	0x08013890
 800f87c:	080136fc 	.word	0x080136fc
 800f880:	080138ac 	.word	0x080138ac
 800f884:	080138cc 	.word	0x080138cc
 800f888:	0800f599 	.word	0x0800f599

0800f88c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b086      	sub	sp, #24
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f896:	230e      	movs	r3, #14
 800f898:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	895b      	ldrh	r3, [r3, #10]
 800f89e:	2b0e      	cmp	r3, #14
 800f8a0:	d96e      	bls.n	800f980 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	7bdb      	ldrb	r3, [r3, #15]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d106      	bne.n	800f8b8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	b2da      	uxtb	r2, r3
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	685b      	ldr	r3, [r3, #4]
 800f8bc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	7b1a      	ldrb	r2, [r3, #12]
 800f8c2:	7b5b      	ldrb	r3, [r3, #13]
 800f8c4:	021b      	lsls	r3, r3, #8
 800f8c6:	4313      	orrs	r3, r2
 800f8c8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	f003 0301 	and.w	r3, r3, #1
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d023      	beq.n	800f91e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	d10f      	bne.n	800f8fe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	785b      	ldrb	r3, [r3, #1]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d11b      	bne.n	800f91e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f8ea:	2b5e      	cmp	r3, #94	; 0x5e
 800f8ec:	d117      	bne.n	800f91e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	7b5b      	ldrb	r3, [r3, #13]
 800f8f2:	f043 0310 	orr.w	r3, r3, #16
 800f8f6:	b2da      	uxtb	r2, r3
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	735a      	strb	r2, [r3, #13]
 800f8fc:	e00f      	b.n	800f91e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	2206      	movs	r2, #6
 800f902:	4928      	ldr	r1, [pc, #160]	; (800f9a4 <ethernet_input+0x118>)
 800f904:	4618      	mov	r0, r3
 800f906:	f000 f8bb 	bl	800fa80 <memcmp>
 800f90a:	4603      	mov	r3, r0
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d106      	bne.n	800f91e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	7b5b      	ldrb	r3, [r3, #13]
 800f914:	f043 0308 	orr.w	r3, r3, #8
 800f918:	b2da      	uxtb	r2, r3
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f91e:	89fb      	ldrh	r3, [r7, #14]
 800f920:	2b08      	cmp	r3, #8
 800f922:	d003      	beq.n	800f92c <ethernet_input+0xa0>
 800f924:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f928:	d014      	beq.n	800f954 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f92a:	e032      	b.n	800f992 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f932:	f003 0308 	and.w	r3, r3, #8
 800f936:	2b00      	cmp	r3, #0
 800f938:	d024      	beq.n	800f984 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f93a:	8afb      	ldrh	r3, [r7, #22]
 800f93c:	4619      	mov	r1, r3
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f7f7 fa28 	bl	8006d94 <pbuf_remove_header>
 800f944:	4603      	mov	r3, r0
 800f946:	2b00      	cmp	r3, #0
 800f948:	d11e      	bne.n	800f988 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f94a:	6839      	ldr	r1, [r7, #0]
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f7fe ff21 	bl	800e794 <ip4_input>
      break;
 800f952:	e013      	b.n	800f97c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f95a:	f003 0308 	and.w	r3, r3, #8
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d014      	beq.n	800f98c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f962:	8afb      	ldrh	r3, [r7, #22]
 800f964:	4619      	mov	r1, r3
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f7f7 fa14 	bl	8006d94 <pbuf_remove_header>
 800f96c:	4603      	mov	r3, r0
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d10e      	bne.n	800f990 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f972:	6839      	ldr	r1, [r7, #0]
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f7fe f89b 	bl	800dab0 <etharp_input>
      break;
 800f97a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f97c:	2300      	movs	r3, #0
 800f97e:	e00c      	b.n	800f99a <ethernet_input+0x10e>
    goto free_and_return;
 800f980:	bf00      	nop
 800f982:	e006      	b.n	800f992 <ethernet_input+0x106>
        goto free_and_return;
 800f984:	bf00      	nop
 800f986:	e004      	b.n	800f992 <ethernet_input+0x106>
        goto free_and_return;
 800f988:	bf00      	nop
 800f98a:	e002      	b.n	800f992 <ethernet_input+0x106>
        goto free_and_return;
 800f98c:	bf00      	nop
 800f98e:	e000      	b.n	800f992 <ethernet_input+0x106>
        goto free_and_return;
 800f990:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f7f7 fa84 	bl	8006ea0 <pbuf_free>
  return ERR_OK;
 800f998:	2300      	movs	r3, #0
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	3718      	adds	r7, #24
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}
 800f9a2:	bf00      	nop
 800f9a4:	08013a60 	.word	0x08013a60

0800f9a8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b086      	sub	sp, #24
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	60f8      	str	r0, [r7, #12]
 800f9b0:	60b9      	str	r1, [r7, #8]
 800f9b2:	607a      	str	r2, [r7, #4]
 800f9b4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f9b6:	8c3b      	ldrh	r3, [r7, #32]
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7f5 fe5b 	bl	8005674 <lwip_htons>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f9c2:	210e      	movs	r1, #14
 800f9c4:	68b8      	ldr	r0, [r7, #8]
 800f9c6:	f7f7 f9d5 	bl	8006d74 <pbuf_add_header>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d125      	bne.n	800fa1c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f9d6:	693b      	ldr	r3, [r7, #16]
 800f9d8:	8afa      	ldrh	r2, [r7, #22]
 800f9da:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f9dc:	693b      	ldr	r3, [r7, #16]
 800f9de:	2206      	movs	r2, #6
 800f9e0:	6839      	ldr	r1, [r7, #0]
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f000 f85c 	bl	800faa0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f9e8:	693b      	ldr	r3, [r7, #16]
 800f9ea:	3306      	adds	r3, #6
 800f9ec:	2206      	movs	r2, #6
 800f9ee:	6879      	ldr	r1, [r7, #4]
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f000 f855 	bl	800faa0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f9fc:	2b06      	cmp	r3, #6
 800f9fe:	d006      	beq.n	800fa0e <ethernet_output+0x66>
 800fa00:	4b0a      	ldr	r3, [pc, #40]	; (800fa2c <ethernet_output+0x84>)
 800fa02:	f44f 7299 	mov.w	r2, #306	; 0x132
 800fa06:	490a      	ldr	r1, [pc, #40]	; (800fa30 <ethernet_output+0x88>)
 800fa08:	480a      	ldr	r0, [pc, #40]	; (800fa34 <ethernet_output+0x8c>)
 800fa0a:	f000 f879 	bl	800fb00 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	699b      	ldr	r3, [r3, #24]
 800fa12:	68b9      	ldr	r1, [r7, #8]
 800fa14:	68f8      	ldr	r0, [r7, #12]
 800fa16:	4798      	blx	r3
 800fa18:	4603      	mov	r3, r0
 800fa1a:	e002      	b.n	800fa22 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800fa1c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800fa1e:	f06f 0301 	mvn.w	r3, #1
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3718      	adds	r7, #24
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	080138dc 	.word	0x080138dc
 800fa30:	08013914 	.word	0x08013914
 800fa34:	08013948 	.word	0x08013948

0800fa38 <__libc_init_array>:
 800fa38:	b570      	push	{r4, r5, r6, lr}
 800fa3a:	4d0d      	ldr	r5, [pc, #52]	; (800fa70 <__libc_init_array+0x38>)
 800fa3c:	4c0d      	ldr	r4, [pc, #52]	; (800fa74 <__libc_init_array+0x3c>)
 800fa3e:	1b64      	subs	r4, r4, r5
 800fa40:	10a4      	asrs	r4, r4, #2
 800fa42:	2600      	movs	r6, #0
 800fa44:	42a6      	cmp	r6, r4
 800fa46:	d109      	bne.n	800fa5c <__libc_init_array+0x24>
 800fa48:	4d0b      	ldr	r5, [pc, #44]	; (800fa78 <__libc_init_array+0x40>)
 800fa4a:	4c0c      	ldr	r4, [pc, #48]	; (800fa7c <__libc_init_array+0x44>)
 800fa4c:	f001 fa70 	bl	8010f30 <_init>
 800fa50:	1b64      	subs	r4, r4, r5
 800fa52:	10a4      	asrs	r4, r4, #2
 800fa54:	2600      	movs	r6, #0
 800fa56:	42a6      	cmp	r6, r4
 800fa58:	d105      	bne.n	800fa66 <__libc_init_array+0x2e>
 800fa5a:	bd70      	pop	{r4, r5, r6, pc}
 800fa5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa60:	4798      	blx	r3
 800fa62:	3601      	adds	r6, #1
 800fa64:	e7ee      	b.n	800fa44 <__libc_init_array+0xc>
 800fa66:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa6a:	4798      	blx	r3
 800fa6c:	3601      	adds	r6, #1
 800fa6e:	e7f2      	b.n	800fa56 <__libc_init_array+0x1e>
 800fa70:	08013bb8 	.word	0x08013bb8
 800fa74:	08013bb8 	.word	0x08013bb8
 800fa78:	08013bb8 	.word	0x08013bb8
 800fa7c:	08013bbc 	.word	0x08013bbc

0800fa80 <memcmp>:
 800fa80:	b510      	push	{r4, lr}
 800fa82:	3901      	subs	r1, #1
 800fa84:	4402      	add	r2, r0
 800fa86:	4290      	cmp	r0, r2
 800fa88:	d101      	bne.n	800fa8e <memcmp+0xe>
 800fa8a:	2000      	movs	r0, #0
 800fa8c:	e005      	b.n	800fa9a <memcmp+0x1a>
 800fa8e:	7803      	ldrb	r3, [r0, #0]
 800fa90:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fa94:	42a3      	cmp	r3, r4
 800fa96:	d001      	beq.n	800fa9c <memcmp+0x1c>
 800fa98:	1b18      	subs	r0, r3, r4
 800fa9a:	bd10      	pop	{r4, pc}
 800fa9c:	3001      	adds	r0, #1
 800fa9e:	e7f2      	b.n	800fa86 <memcmp+0x6>

0800faa0 <memcpy>:
 800faa0:	440a      	add	r2, r1
 800faa2:	4291      	cmp	r1, r2
 800faa4:	f100 33ff 	add.w	r3, r0, #4294967295
 800faa8:	d100      	bne.n	800faac <memcpy+0xc>
 800faaa:	4770      	bx	lr
 800faac:	b510      	push	{r4, lr}
 800faae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fab6:	4291      	cmp	r1, r2
 800fab8:	d1f9      	bne.n	800faae <memcpy+0xe>
 800faba:	bd10      	pop	{r4, pc}

0800fabc <memmove>:
 800fabc:	4288      	cmp	r0, r1
 800fabe:	b510      	push	{r4, lr}
 800fac0:	eb01 0402 	add.w	r4, r1, r2
 800fac4:	d902      	bls.n	800facc <memmove+0x10>
 800fac6:	4284      	cmp	r4, r0
 800fac8:	4623      	mov	r3, r4
 800faca:	d807      	bhi.n	800fadc <memmove+0x20>
 800facc:	1e43      	subs	r3, r0, #1
 800face:	42a1      	cmp	r1, r4
 800fad0:	d008      	beq.n	800fae4 <memmove+0x28>
 800fad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fada:	e7f8      	b.n	800face <memmove+0x12>
 800fadc:	4402      	add	r2, r0
 800fade:	4601      	mov	r1, r0
 800fae0:	428a      	cmp	r2, r1
 800fae2:	d100      	bne.n	800fae6 <memmove+0x2a>
 800fae4:	bd10      	pop	{r4, pc}
 800fae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800faea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800faee:	e7f7      	b.n	800fae0 <memmove+0x24>

0800faf0 <memset>:
 800faf0:	4402      	add	r2, r0
 800faf2:	4603      	mov	r3, r0
 800faf4:	4293      	cmp	r3, r2
 800faf6:	d100      	bne.n	800fafa <memset+0xa>
 800faf8:	4770      	bx	lr
 800fafa:	f803 1b01 	strb.w	r1, [r3], #1
 800fafe:	e7f9      	b.n	800faf4 <memset+0x4>

0800fb00 <iprintf>:
 800fb00:	b40f      	push	{r0, r1, r2, r3}
 800fb02:	4b0a      	ldr	r3, [pc, #40]	; (800fb2c <iprintf+0x2c>)
 800fb04:	b513      	push	{r0, r1, r4, lr}
 800fb06:	681c      	ldr	r4, [r3, #0]
 800fb08:	b124      	cbz	r4, 800fb14 <iprintf+0x14>
 800fb0a:	69a3      	ldr	r3, [r4, #24]
 800fb0c:	b913      	cbnz	r3, 800fb14 <iprintf+0x14>
 800fb0e:	4620      	mov	r0, r4
 800fb10:	f000 f8f6 	bl	800fd00 <__sinit>
 800fb14:	ab05      	add	r3, sp, #20
 800fb16:	9a04      	ldr	r2, [sp, #16]
 800fb18:	68a1      	ldr	r1, [r4, #8]
 800fb1a:	9301      	str	r3, [sp, #4]
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	f000 fc0f 	bl	8010340 <_vfiprintf_r>
 800fb22:	b002      	add	sp, #8
 800fb24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb28:	b004      	add	sp, #16
 800fb2a:	4770      	bx	lr
 800fb2c:	24000030 	.word	0x24000030

0800fb30 <rand>:
 800fb30:	4b16      	ldr	r3, [pc, #88]	; (800fb8c <rand+0x5c>)
 800fb32:	b510      	push	{r4, lr}
 800fb34:	681c      	ldr	r4, [r3, #0]
 800fb36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fb38:	b9b3      	cbnz	r3, 800fb68 <rand+0x38>
 800fb3a:	2018      	movs	r0, #24
 800fb3c:	f000 f992 	bl	800fe64 <malloc>
 800fb40:	63a0      	str	r0, [r4, #56]	; 0x38
 800fb42:	b928      	cbnz	r0, 800fb50 <rand+0x20>
 800fb44:	4602      	mov	r2, r0
 800fb46:	4b12      	ldr	r3, [pc, #72]	; (800fb90 <rand+0x60>)
 800fb48:	4812      	ldr	r0, [pc, #72]	; (800fb94 <rand+0x64>)
 800fb4a:	214e      	movs	r1, #78	; 0x4e
 800fb4c:	f000 f862 	bl	800fc14 <__assert_func>
 800fb50:	4a11      	ldr	r2, [pc, #68]	; (800fb98 <rand+0x68>)
 800fb52:	4b12      	ldr	r3, [pc, #72]	; (800fb9c <rand+0x6c>)
 800fb54:	e9c0 2300 	strd	r2, r3, [r0]
 800fb58:	4b11      	ldr	r3, [pc, #68]	; (800fba0 <rand+0x70>)
 800fb5a:	6083      	str	r3, [r0, #8]
 800fb5c:	230b      	movs	r3, #11
 800fb5e:	8183      	strh	r3, [r0, #12]
 800fb60:	2201      	movs	r2, #1
 800fb62:	2300      	movs	r3, #0
 800fb64:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800fb68:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800fb6a:	4a0e      	ldr	r2, [pc, #56]	; (800fba4 <rand+0x74>)
 800fb6c:	6920      	ldr	r0, [r4, #16]
 800fb6e:	6963      	ldr	r3, [r4, #20]
 800fb70:	490d      	ldr	r1, [pc, #52]	; (800fba8 <rand+0x78>)
 800fb72:	4342      	muls	r2, r0
 800fb74:	fb01 2203 	mla	r2, r1, r3, r2
 800fb78:	fba0 0101 	umull	r0, r1, r0, r1
 800fb7c:	1c43      	adds	r3, r0, #1
 800fb7e:	eb42 0001 	adc.w	r0, r2, r1
 800fb82:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800fb86:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fb8a:	bd10      	pop	{r4, pc}
 800fb8c:	24000030 	.word	0x24000030
 800fb90:	08013a74 	.word	0x08013a74
 800fb94:	08013a8b 	.word	0x08013a8b
 800fb98:	abcd330e 	.word	0xabcd330e
 800fb9c:	e66d1234 	.word	0xe66d1234
 800fba0:	0005deec 	.word	0x0005deec
 800fba4:	5851f42d 	.word	0x5851f42d
 800fba8:	4c957f2d 	.word	0x4c957f2d

0800fbac <siprintf>:
 800fbac:	b40e      	push	{r1, r2, r3}
 800fbae:	b500      	push	{lr}
 800fbb0:	b09c      	sub	sp, #112	; 0x70
 800fbb2:	ab1d      	add	r3, sp, #116	; 0x74
 800fbb4:	9002      	str	r0, [sp, #8]
 800fbb6:	9006      	str	r0, [sp, #24]
 800fbb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fbbc:	4809      	ldr	r0, [pc, #36]	; (800fbe4 <siprintf+0x38>)
 800fbbe:	9107      	str	r1, [sp, #28]
 800fbc0:	9104      	str	r1, [sp, #16]
 800fbc2:	4909      	ldr	r1, [pc, #36]	; (800fbe8 <siprintf+0x3c>)
 800fbc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbc8:	9105      	str	r1, [sp, #20]
 800fbca:	6800      	ldr	r0, [r0, #0]
 800fbcc:	9301      	str	r3, [sp, #4]
 800fbce:	a902      	add	r1, sp, #8
 800fbd0:	f000 fa8c 	bl	80100ec <_svfiprintf_r>
 800fbd4:	9b02      	ldr	r3, [sp, #8]
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	701a      	strb	r2, [r3, #0]
 800fbda:	b01c      	add	sp, #112	; 0x70
 800fbdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbe0:	b003      	add	sp, #12
 800fbe2:	4770      	bx	lr
 800fbe4:	24000030 	.word	0x24000030
 800fbe8:	ffff0208 	.word	0xffff0208

0800fbec <strncpy>:
 800fbec:	b510      	push	{r4, lr}
 800fbee:	3901      	subs	r1, #1
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	b132      	cbz	r2, 800fc02 <strncpy+0x16>
 800fbf4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fbf8:	f803 4b01 	strb.w	r4, [r3], #1
 800fbfc:	3a01      	subs	r2, #1
 800fbfe:	2c00      	cmp	r4, #0
 800fc00:	d1f7      	bne.n	800fbf2 <strncpy+0x6>
 800fc02:	441a      	add	r2, r3
 800fc04:	2100      	movs	r1, #0
 800fc06:	4293      	cmp	r3, r2
 800fc08:	d100      	bne.n	800fc0c <strncpy+0x20>
 800fc0a:	bd10      	pop	{r4, pc}
 800fc0c:	f803 1b01 	strb.w	r1, [r3], #1
 800fc10:	e7f9      	b.n	800fc06 <strncpy+0x1a>
	...

0800fc14 <__assert_func>:
 800fc14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc16:	4614      	mov	r4, r2
 800fc18:	461a      	mov	r2, r3
 800fc1a:	4b09      	ldr	r3, [pc, #36]	; (800fc40 <__assert_func+0x2c>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	4605      	mov	r5, r0
 800fc20:	68d8      	ldr	r0, [r3, #12]
 800fc22:	b14c      	cbz	r4, 800fc38 <__assert_func+0x24>
 800fc24:	4b07      	ldr	r3, [pc, #28]	; (800fc44 <__assert_func+0x30>)
 800fc26:	9100      	str	r1, [sp, #0]
 800fc28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc2c:	4906      	ldr	r1, [pc, #24]	; (800fc48 <__assert_func+0x34>)
 800fc2e:	462b      	mov	r3, r5
 800fc30:	f000 f8e4 	bl	800fdfc <fiprintf>
 800fc34:	f000 ff6e 	bl	8010b14 <abort>
 800fc38:	4b04      	ldr	r3, [pc, #16]	; (800fc4c <__assert_func+0x38>)
 800fc3a:	461c      	mov	r4, r3
 800fc3c:	e7f3      	b.n	800fc26 <__assert_func+0x12>
 800fc3e:	bf00      	nop
 800fc40:	24000030 	.word	0x24000030
 800fc44:	08013ae6 	.word	0x08013ae6
 800fc48:	08013af3 	.word	0x08013af3
 800fc4c:	08013b21 	.word	0x08013b21

0800fc50 <std>:
 800fc50:	2300      	movs	r3, #0
 800fc52:	b510      	push	{r4, lr}
 800fc54:	4604      	mov	r4, r0
 800fc56:	e9c0 3300 	strd	r3, r3, [r0]
 800fc5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fc5e:	6083      	str	r3, [r0, #8]
 800fc60:	8181      	strh	r1, [r0, #12]
 800fc62:	6643      	str	r3, [r0, #100]	; 0x64
 800fc64:	81c2      	strh	r2, [r0, #14]
 800fc66:	6183      	str	r3, [r0, #24]
 800fc68:	4619      	mov	r1, r3
 800fc6a:	2208      	movs	r2, #8
 800fc6c:	305c      	adds	r0, #92	; 0x5c
 800fc6e:	f7ff ff3f 	bl	800faf0 <memset>
 800fc72:	4b05      	ldr	r3, [pc, #20]	; (800fc88 <std+0x38>)
 800fc74:	6263      	str	r3, [r4, #36]	; 0x24
 800fc76:	4b05      	ldr	r3, [pc, #20]	; (800fc8c <std+0x3c>)
 800fc78:	62a3      	str	r3, [r4, #40]	; 0x28
 800fc7a:	4b05      	ldr	r3, [pc, #20]	; (800fc90 <std+0x40>)
 800fc7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fc7e:	4b05      	ldr	r3, [pc, #20]	; (800fc94 <std+0x44>)
 800fc80:	6224      	str	r4, [r4, #32]
 800fc82:	6323      	str	r3, [r4, #48]	; 0x30
 800fc84:	bd10      	pop	{r4, pc}
 800fc86:	bf00      	nop
 800fc88:	080108e9 	.word	0x080108e9
 800fc8c:	0801090b 	.word	0x0801090b
 800fc90:	08010943 	.word	0x08010943
 800fc94:	08010967 	.word	0x08010967

0800fc98 <_cleanup_r>:
 800fc98:	4901      	ldr	r1, [pc, #4]	; (800fca0 <_cleanup_r+0x8>)
 800fc9a:	f000 b8c1 	b.w	800fe20 <_fwalk_reent>
 800fc9e:	bf00      	nop
 800fca0:	08010c51 	.word	0x08010c51

0800fca4 <__sfmoreglue>:
 800fca4:	b570      	push	{r4, r5, r6, lr}
 800fca6:	2268      	movs	r2, #104	; 0x68
 800fca8:	1e4d      	subs	r5, r1, #1
 800fcaa:	4355      	muls	r5, r2
 800fcac:	460e      	mov	r6, r1
 800fcae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fcb2:	f000 f94b 	bl	800ff4c <_malloc_r>
 800fcb6:	4604      	mov	r4, r0
 800fcb8:	b140      	cbz	r0, 800fccc <__sfmoreglue+0x28>
 800fcba:	2100      	movs	r1, #0
 800fcbc:	e9c0 1600 	strd	r1, r6, [r0]
 800fcc0:	300c      	adds	r0, #12
 800fcc2:	60a0      	str	r0, [r4, #8]
 800fcc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fcc8:	f7ff ff12 	bl	800faf0 <memset>
 800fccc:	4620      	mov	r0, r4
 800fcce:	bd70      	pop	{r4, r5, r6, pc}

0800fcd0 <__sfp_lock_acquire>:
 800fcd0:	4801      	ldr	r0, [pc, #4]	; (800fcd8 <__sfp_lock_acquire+0x8>)
 800fcd2:	f000 b8c5 	b.w	800fe60 <__retarget_lock_acquire_recursive>
 800fcd6:	bf00      	nop
 800fcd8:	24003349 	.word	0x24003349

0800fcdc <__sfp_lock_release>:
 800fcdc:	4801      	ldr	r0, [pc, #4]	; (800fce4 <__sfp_lock_release+0x8>)
 800fcde:	f000 b8c0 	b.w	800fe62 <__retarget_lock_release_recursive>
 800fce2:	bf00      	nop
 800fce4:	24003349 	.word	0x24003349

0800fce8 <__sinit_lock_acquire>:
 800fce8:	4801      	ldr	r0, [pc, #4]	; (800fcf0 <__sinit_lock_acquire+0x8>)
 800fcea:	f000 b8b9 	b.w	800fe60 <__retarget_lock_acquire_recursive>
 800fcee:	bf00      	nop
 800fcf0:	2400334a 	.word	0x2400334a

0800fcf4 <__sinit_lock_release>:
 800fcf4:	4801      	ldr	r0, [pc, #4]	; (800fcfc <__sinit_lock_release+0x8>)
 800fcf6:	f000 b8b4 	b.w	800fe62 <__retarget_lock_release_recursive>
 800fcfa:	bf00      	nop
 800fcfc:	2400334a 	.word	0x2400334a

0800fd00 <__sinit>:
 800fd00:	b510      	push	{r4, lr}
 800fd02:	4604      	mov	r4, r0
 800fd04:	f7ff fff0 	bl	800fce8 <__sinit_lock_acquire>
 800fd08:	69a3      	ldr	r3, [r4, #24]
 800fd0a:	b11b      	cbz	r3, 800fd14 <__sinit+0x14>
 800fd0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd10:	f7ff bff0 	b.w	800fcf4 <__sinit_lock_release>
 800fd14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fd18:	6523      	str	r3, [r4, #80]	; 0x50
 800fd1a:	4b13      	ldr	r3, [pc, #76]	; (800fd68 <__sinit+0x68>)
 800fd1c:	4a13      	ldr	r2, [pc, #76]	; (800fd6c <__sinit+0x6c>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	62a2      	str	r2, [r4, #40]	; 0x28
 800fd22:	42a3      	cmp	r3, r4
 800fd24:	bf04      	itt	eq
 800fd26:	2301      	moveq	r3, #1
 800fd28:	61a3      	streq	r3, [r4, #24]
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	f000 f820 	bl	800fd70 <__sfp>
 800fd30:	6060      	str	r0, [r4, #4]
 800fd32:	4620      	mov	r0, r4
 800fd34:	f000 f81c 	bl	800fd70 <__sfp>
 800fd38:	60a0      	str	r0, [r4, #8]
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	f000 f818 	bl	800fd70 <__sfp>
 800fd40:	2200      	movs	r2, #0
 800fd42:	60e0      	str	r0, [r4, #12]
 800fd44:	2104      	movs	r1, #4
 800fd46:	6860      	ldr	r0, [r4, #4]
 800fd48:	f7ff ff82 	bl	800fc50 <std>
 800fd4c:	68a0      	ldr	r0, [r4, #8]
 800fd4e:	2201      	movs	r2, #1
 800fd50:	2109      	movs	r1, #9
 800fd52:	f7ff ff7d 	bl	800fc50 <std>
 800fd56:	68e0      	ldr	r0, [r4, #12]
 800fd58:	2202      	movs	r2, #2
 800fd5a:	2112      	movs	r1, #18
 800fd5c:	f7ff ff78 	bl	800fc50 <std>
 800fd60:	2301      	movs	r3, #1
 800fd62:	61a3      	str	r3, [r4, #24]
 800fd64:	e7d2      	b.n	800fd0c <__sinit+0xc>
 800fd66:	bf00      	nop
 800fd68:	08013a70 	.word	0x08013a70
 800fd6c:	0800fc99 	.word	0x0800fc99

0800fd70 <__sfp>:
 800fd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd72:	4607      	mov	r7, r0
 800fd74:	f7ff ffac 	bl	800fcd0 <__sfp_lock_acquire>
 800fd78:	4b1e      	ldr	r3, [pc, #120]	; (800fdf4 <__sfp+0x84>)
 800fd7a:	681e      	ldr	r6, [r3, #0]
 800fd7c:	69b3      	ldr	r3, [r6, #24]
 800fd7e:	b913      	cbnz	r3, 800fd86 <__sfp+0x16>
 800fd80:	4630      	mov	r0, r6
 800fd82:	f7ff ffbd 	bl	800fd00 <__sinit>
 800fd86:	3648      	adds	r6, #72	; 0x48
 800fd88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fd8c:	3b01      	subs	r3, #1
 800fd8e:	d503      	bpl.n	800fd98 <__sfp+0x28>
 800fd90:	6833      	ldr	r3, [r6, #0]
 800fd92:	b30b      	cbz	r3, 800fdd8 <__sfp+0x68>
 800fd94:	6836      	ldr	r6, [r6, #0]
 800fd96:	e7f7      	b.n	800fd88 <__sfp+0x18>
 800fd98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fd9c:	b9d5      	cbnz	r5, 800fdd4 <__sfp+0x64>
 800fd9e:	4b16      	ldr	r3, [pc, #88]	; (800fdf8 <__sfp+0x88>)
 800fda0:	60e3      	str	r3, [r4, #12]
 800fda2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fda6:	6665      	str	r5, [r4, #100]	; 0x64
 800fda8:	f000 f859 	bl	800fe5e <__retarget_lock_init_recursive>
 800fdac:	f7ff ff96 	bl	800fcdc <__sfp_lock_release>
 800fdb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fdb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fdb8:	6025      	str	r5, [r4, #0]
 800fdba:	61a5      	str	r5, [r4, #24]
 800fdbc:	2208      	movs	r2, #8
 800fdbe:	4629      	mov	r1, r5
 800fdc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fdc4:	f7ff fe94 	bl	800faf0 <memset>
 800fdc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fdcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdd4:	3468      	adds	r4, #104	; 0x68
 800fdd6:	e7d9      	b.n	800fd8c <__sfp+0x1c>
 800fdd8:	2104      	movs	r1, #4
 800fdda:	4638      	mov	r0, r7
 800fddc:	f7ff ff62 	bl	800fca4 <__sfmoreglue>
 800fde0:	4604      	mov	r4, r0
 800fde2:	6030      	str	r0, [r6, #0]
 800fde4:	2800      	cmp	r0, #0
 800fde6:	d1d5      	bne.n	800fd94 <__sfp+0x24>
 800fde8:	f7ff ff78 	bl	800fcdc <__sfp_lock_release>
 800fdec:	230c      	movs	r3, #12
 800fdee:	603b      	str	r3, [r7, #0]
 800fdf0:	e7ee      	b.n	800fdd0 <__sfp+0x60>
 800fdf2:	bf00      	nop
 800fdf4:	08013a70 	.word	0x08013a70
 800fdf8:	ffff0001 	.word	0xffff0001

0800fdfc <fiprintf>:
 800fdfc:	b40e      	push	{r1, r2, r3}
 800fdfe:	b503      	push	{r0, r1, lr}
 800fe00:	4601      	mov	r1, r0
 800fe02:	ab03      	add	r3, sp, #12
 800fe04:	4805      	ldr	r0, [pc, #20]	; (800fe1c <fiprintf+0x20>)
 800fe06:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe0a:	6800      	ldr	r0, [r0, #0]
 800fe0c:	9301      	str	r3, [sp, #4]
 800fe0e:	f000 fa97 	bl	8010340 <_vfiprintf_r>
 800fe12:	b002      	add	sp, #8
 800fe14:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe18:	b003      	add	sp, #12
 800fe1a:	4770      	bx	lr
 800fe1c:	24000030 	.word	0x24000030

0800fe20 <_fwalk_reent>:
 800fe20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe24:	4606      	mov	r6, r0
 800fe26:	4688      	mov	r8, r1
 800fe28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fe2c:	2700      	movs	r7, #0
 800fe2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe32:	f1b9 0901 	subs.w	r9, r9, #1
 800fe36:	d505      	bpl.n	800fe44 <_fwalk_reent+0x24>
 800fe38:	6824      	ldr	r4, [r4, #0]
 800fe3a:	2c00      	cmp	r4, #0
 800fe3c:	d1f7      	bne.n	800fe2e <_fwalk_reent+0xe>
 800fe3e:	4638      	mov	r0, r7
 800fe40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe44:	89ab      	ldrh	r3, [r5, #12]
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	d907      	bls.n	800fe5a <_fwalk_reent+0x3a>
 800fe4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe4e:	3301      	adds	r3, #1
 800fe50:	d003      	beq.n	800fe5a <_fwalk_reent+0x3a>
 800fe52:	4629      	mov	r1, r5
 800fe54:	4630      	mov	r0, r6
 800fe56:	47c0      	blx	r8
 800fe58:	4307      	orrs	r7, r0
 800fe5a:	3568      	adds	r5, #104	; 0x68
 800fe5c:	e7e9      	b.n	800fe32 <_fwalk_reent+0x12>

0800fe5e <__retarget_lock_init_recursive>:
 800fe5e:	4770      	bx	lr

0800fe60 <__retarget_lock_acquire_recursive>:
 800fe60:	4770      	bx	lr

0800fe62 <__retarget_lock_release_recursive>:
 800fe62:	4770      	bx	lr

0800fe64 <malloc>:
 800fe64:	4b02      	ldr	r3, [pc, #8]	; (800fe70 <malloc+0xc>)
 800fe66:	4601      	mov	r1, r0
 800fe68:	6818      	ldr	r0, [r3, #0]
 800fe6a:	f000 b86f 	b.w	800ff4c <_malloc_r>
 800fe6e:	bf00      	nop
 800fe70:	24000030 	.word	0x24000030

0800fe74 <_free_r>:
 800fe74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe76:	2900      	cmp	r1, #0
 800fe78:	d044      	beq.n	800ff04 <_free_r+0x90>
 800fe7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe7e:	9001      	str	r0, [sp, #4]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	f1a1 0404 	sub.w	r4, r1, #4
 800fe86:	bfb8      	it	lt
 800fe88:	18e4      	addlt	r4, r4, r3
 800fe8a:	f000 ff95 	bl	8010db8 <__malloc_lock>
 800fe8e:	4a1e      	ldr	r2, [pc, #120]	; (800ff08 <_free_r+0x94>)
 800fe90:	9801      	ldr	r0, [sp, #4]
 800fe92:	6813      	ldr	r3, [r2, #0]
 800fe94:	b933      	cbnz	r3, 800fea4 <_free_r+0x30>
 800fe96:	6063      	str	r3, [r4, #4]
 800fe98:	6014      	str	r4, [r2, #0]
 800fe9a:	b003      	add	sp, #12
 800fe9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fea0:	f000 bf90 	b.w	8010dc4 <__malloc_unlock>
 800fea4:	42a3      	cmp	r3, r4
 800fea6:	d908      	bls.n	800feba <_free_r+0x46>
 800fea8:	6825      	ldr	r5, [r4, #0]
 800feaa:	1961      	adds	r1, r4, r5
 800feac:	428b      	cmp	r3, r1
 800feae:	bf01      	itttt	eq
 800feb0:	6819      	ldreq	r1, [r3, #0]
 800feb2:	685b      	ldreq	r3, [r3, #4]
 800feb4:	1949      	addeq	r1, r1, r5
 800feb6:	6021      	streq	r1, [r4, #0]
 800feb8:	e7ed      	b.n	800fe96 <_free_r+0x22>
 800feba:	461a      	mov	r2, r3
 800febc:	685b      	ldr	r3, [r3, #4]
 800febe:	b10b      	cbz	r3, 800fec4 <_free_r+0x50>
 800fec0:	42a3      	cmp	r3, r4
 800fec2:	d9fa      	bls.n	800feba <_free_r+0x46>
 800fec4:	6811      	ldr	r1, [r2, #0]
 800fec6:	1855      	adds	r5, r2, r1
 800fec8:	42a5      	cmp	r5, r4
 800feca:	d10b      	bne.n	800fee4 <_free_r+0x70>
 800fecc:	6824      	ldr	r4, [r4, #0]
 800fece:	4421      	add	r1, r4
 800fed0:	1854      	adds	r4, r2, r1
 800fed2:	42a3      	cmp	r3, r4
 800fed4:	6011      	str	r1, [r2, #0]
 800fed6:	d1e0      	bne.n	800fe9a <_free_r+0x26>
 800fed8:	681c      	ldr	r4, [r3, #0]
 800feda:	685b      	ldr	r3, [r3, #4]
 800fedc:	6053      	str	r3, [r2, #4]
 800fede:	4421      	add	r1, r4
 800fee0:	6011      	str	r1, [r2, #0]
 800fee2:	e7da      	b.n	800fe9a <_free_r+0x26>
 800fee4:	d902      	bls.n	800feec <_free_r+0x78>
 800fee6:	230c      	movs	r3, #12
 800fee8:	6003      	str	r3, [r0, #0]
 800feea:	e7d6      	b.n	800fe9a <_free_r+0x26>
 800feec:	6825      	ldr	r5, [r4, #0]
 800feee:	1961      	adds	r1, r4, r5
 800fef0:	428b      	cmp	r3, r1
 800fef2:	bf04      	itt	eq
 800fef4:	6819      	ldreq	r1, [r3, #0]
 800fef6:	685b      	ldreq	r3, [r3, #4]
 800fef8:	6063      	str	r3, [r4, #4]
 800fefa:	bf04      	itt	eq
 800fefc:	1949      	addeq	r1, r1, r5
 800fefe:	6021      	streq	r1, [r4, #0]
 800ff00:	6054      	str	r4, [r2, #4]
 800ff02:	e7ca      	b.n	800fe9a <_free_r+0x26>
 800ff04:	b003      	add	sp, #12
 800ff06:	bd30      	pop	{r4, r5, pc}
 800ff08:	2400334c 	.word	0x2400334c

0800ff0c <sbrk_aligned>:
 800ff0c:	b570      	push	{r4, r5, r6, lr}
 800ff0e:	4e0e      	ldr	r6, [pc, #56]	; (800ff48 <sbrk_aligned+0x3c>)
 800ff10:	460c      	mov	r4, r1
 800ff12:	6831      	ldr	r1, [r6, #0]
 800ff14:	4605      	mov	r5, r0
 800ff16:	b911      	cbnz	r1, 800ff1e <sbrk_aligned+0x12>
 800ff18:	f000 fcd6 	bl	80108c8 <_sbrk_r>
 800ff1c:	6030      	str	r0, [r6, #0]
 800ff1e:	4621      	mov	r1, r4
 800ff20:	4628      	mov	r0, r5
 800ff22:	f000 fcd1 	bl	80108c8 <_sbrk_r>
 800ff26:	1c43      	adds	r3, r0, #1
 800ff28:	d00a      	beq.n	800ff40 <sbrk_aligned+0x34>
 800ff2a:	1cc4      	adds	r4, r0, #3
 800ff2c:	f024 0403 	bic.w	r4, r4, #3
 800ff30:	42a0      	cmp	r0, r4
 800ff32:	d007      	beq.n	800ff44 <sbrk_aligned+0x38>
 800ff34:	1a21      	subs	r1, r4, r0
 800ff36:	4628      	mov	r0, r5
 800ff38:	f000 fcc6 	bl	80108c8 <_sbrk_r>
 800ff3c:	3001      	adds	r0, #1
 800ff3e:	d101      	bne.n	800ff44 <sbrk_aligned+0x38>
 800ff40:	f04f 34ff 	mov.w	r4, #4294967295
 800ff44:	4620      	mov	r0, r4
 800ff46:	bd70      	pop	{r4, r5, r6, pc}
 800ff48:	24003350 	.word	0x24003350

0800ff4c <_malloc_r>:
 800ff4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff50:	1ccd      	adds	r5, r1, #3
 800ff52:	f025 0503 	bic.w	r5, r5, #3
 800ff56:	3508      	adds	r5, #8
 800ff58:	2d0c      	cmp	r5, #12
 800ff5a:	bf38      	it	cc
 800ff5c:	250c      	movcc	r5, #12
 800ff5e:	2d00      	cmp	r5, #0
 800ff60:	4607      	mov	r7, r0
 800ff62:	db01      	blt.n	800ff68 <_malloc_r+0x1c>
 800ff64:	42a9      	cmp	r1, r5
 800ff66:	d905      	bls.n	800ff74 <_malloc_r+0x28>
 800ff68:	230c      	movs	r3, #12
 800ff6a:	603b      	str	r3, [r7, #0]
 800ff6c:	2600      	movs	r6, #0
 800ff6e:	4630      	mov	r0, r6
 800ff70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff74:	4e2e      	ldr	r6, [pc, #184]	; (8010030 <_malloc_r+0xe4>)
 800ff76:	f000 ff1f 	bl	8010db8 <__malloc_lock>
 800ff7a:	6833      	ldr	r3, [r6, #0]
 800ff7c:	461c      	mov	r4, r3
 800ff7e:	bb34      	cbnz	r4, 800ffce <_malloc_r+0x82>
 800ff80:	4629      	mov	r1, r5
 800ff82:	4638      	mov	r0, r7
 800ff84:	f7ff ffc2 	bl	800ff0c <sbrk_aligned>
 800ff88:	1c43      	adds	r3, r0, #1
 800ff8a:	4604      	mov	r4, r0
 800ff8c:	d14d      	bne.n	801002a <_malloc_r+0xde>
 800ff8e:	6834      	ldr	r4, [r6, #0]
 800ff90:	4626      	mov	r6, r4
 800ff92:	2e00      	cmp	r6, #0
 800ff94:	d140      	bne.n	8010018 <_malloc_r+0xcc>
 800ff96:	6823      	ldr	r3, [r4, #0]
 800ff98:	4631      	mov	r1, r6
 800ff9a:	4638      	mov	r0, r7
 800ff9c:	eb04 0803 	add.w	r8, r4, r3
 800ffa0:	f000 fc92 	bl	80108c8 <_sbrk_r>
 800ffa4:	4580      	cmp	r8, r0
 800ffa6:	d13a      	bne.n	801001e <_malloc_r+0xd2>
 800ffa8:	6821      	ldr	r1, [r4, #0]
 800ffaa:	3503      	adds	r5, #3
 800ffac:	1a6d      	subs	r5, r5, r1
 800ffae:	f025 0503 	bic.w	r5, r5, #3
 800ffb2:	3508      	adds	r5, #8
 800ffb4:	2d0c      	cmp	r5, #12
 800ffb6:	bf38      	it	cc
 800ffb8:	250c      	movcc	r5, #12
 800ffba:	4629      	mov	r1, r5
 800ffbc:	4638      	mov	r0, r7
 800ffbe:	f7ff ffa5 	bl	800ff0c <sbrk_aligned>
 800ffc2:	3001      	adds	r0, #1
 800ffc4:	d02b      	beq.n	801001e <_malloc_r+0xd2>
 800ffc6:	6823      	ldr	r3, [r4, #0]
 800ffc8:	442b      	add	r3, r5
 800ffca:	6023      	str	r3, [r4, #0]
 800ffcc:	e00e      	b.n	800ffec <_malloc_r+0xa0>
 800ffce:	6822      	ldr	r2, [r4, #0]
 800ffd0:	1b52      	subs	r2, r2, r5
 800ffd2:	d41e      	bmi.n	8010012 <_malloc_r+0xc6>
 800ffd4:	2a0b      	cmp	r2, #11
 800ffd6:	d916      	bls.n	8010006 <_malloc_r+0xba>
 800ffd8:	1961      	adds	r1, r4, r5
 800ffda:	42a3      	cmp	r3, r4
 800ffdc:	6025      	str	r5, [r4, #0]
 800ffde:	bf18      	it	ne
 800ffe0:	6059      	strne	r1, [r3, #4]
 800ffe2:	6863      	ldr	r3, [r4, #4]
 800ffe4:	bf08      	it	eq
 800ffe6:	6031      	streq	r1, [r6, #0]
 800ffe8:	5162      	str	r2, [r4, r5]
 800ffea:	604b      	str	r3, [r1, #4]
 800ffec:	4638      	mov	r0, r7
 800ffee:	f104 060b 	add.w	r6, r4, #11
 800fff2:	f000 fee7 	bl	8010dc4 <__malloc_unlock>
 800fff6:	f026 0607 	bic.w	r6, r6, #7
 800fffa:	1d23      	adds	r3, r4, #4
 800fffc:	1af2      	subs	r2, r6, r3
 800fffe:	d0b6      	beq.n	800ff6e <_malloc_r+0x22>
 8010000:	1b9b      	subs	r3, r3, r6
 8010002:	50a3      	str	r3, [r4, r2]
 8010004:	e7b3      	b.n	800ff6e <_malloc_r+0x22>
 8010006:	6862      	ldr	r2, [r4, #4]
 8010008:	42a3      	cmp	r3, r4
 801000a:	bf0c      	ite	eq
 801000c:	6032      	streq	r2, [r6, #0]
 801000e:	605a      	strne	r2, [r3, #4]
 8010010:	e7ec      	b.n	800ffec <_malloc_r+0xa0>
 8010012:	4623      	mov	r3, r4
 8010014:	6864      	ldr	r4, [r4, #4]
 8010016:	e7b2      	b.n	800ff7e <_malloc_r+0x32>
 8010018:	4634      	mov	r4, r6
 801001a:	6876      	ldr	r6, [r6, #4]
 801001c:	e7b9      	b.n	800ff92 <_malloc_r+0x46>
 801001e:	230c      	movs	r3, #12
 8010020:	603b      	str	r3, [r7, #0]
 8010022:	4638      	mov	r0, r7
 8010024:	f000 fece 	bl	8010dc4 <__malloc_unlock>
 8010028:	e7a1      	b.n	800ff6e <_malloc_r+0x22>
 801002a:	6025      	str	r5, [r4, #0]
 801002c:	e7de      	b.n	800ffec <_malloc_r+0xa0>
 801002e:	bf00      	nop
 8010030:	2400334c 	.word	0x2400334c

08010034 <__ssputs_r>:
 8010034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010038:	688e      	ldr	r6, [r1, #8]
 801003a:	429e      	cmp	r6, r3
 801003c:	4682      	mov	sl, r0
 801003e:	460c      	mov	r4, r1
 8010040:	4690      	mov	r8, r2
 8010042:	461f      	mov	r7, r3
 8010044:	d838      	bhi.n	80100b8 <__ssputs_r+0x84>
 8010046:	898a      	ldrh	r2, [r1, #12]
 8010048:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801004c:	d032      	beq.n	80100b4 <__ssputs_r+0x80>
 801004e:	6825      	ldr	r5, [r4, #0]
 8010050:	6909      	ldr	r1, [r1, #16]
 8010052:	eba5 0901 	sub.w	r9, r5, r1
 8010056:	6965      	ldr	r5, [r4, #20]
 8010058:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801005c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010060:	3301      	adds	r3, #1
 8010062:	444b      	add	r3, r9
 8010064:	106d      	asrs	r5, r5, #1
 8010066:	429d      	cmp	r5, r3
 8010068:	bf38      	it	cc
 801006a:	461d      	movcc	r5, r3
 801006c:	0553      	lsls	r3, r2, #21
 801006e:	d531      	bpl.n	80100d4 <__ssputs_r+0xa0>
 8010070:	4629      	mov	r1, r5
 8010072:	f7ff ff6b 	bl	800ff4c <_malloc_r>
 8010076:	4606      	mov	r6, r0
 8010078:	b950      	cbnz	r0, 8010090 <__ssputs_r+0x5c>
 801007a:	230c      	movs	r3, #12
 801007c:	f8ca 3000 	str.w	r3, [sl]
 8010080:	89a3      	ldrh	r3, [r4, #12]
 8010082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010086:	81a3      	strh	r3, [r4, #12]
 8010088:	f04f 30ff 	mov.w	r0, #4294967295
 801008c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010090:	6921      	ldr	r1, [r4, #16]
 8010092:	464a      	mov	r2, r9
 8010094:	f7ff fd04 	bl	800faa0 <memcpy>
 8010098:	89a3      	ldrh	r3, [r4, #12]
 801009a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801009e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100a2:	81a3      	strh	r3, [r4, #12]
 80100a4:	6126      	str	r6, [r4, #16]
 80100a6:	6165      	str	r5, [r4, #20]
 80100a8:	444e      	add	r6, r9
 80100aa:	eba5 0509 	sub.w	r5, r5, r9
 80100ae:	6026      	str	r6, [r4, #0]
 80100b0:	60a5      	str	r5, [r4, #8]
 80100b2:	463e      	mov	r6, r7
 80100b4:	42be      	cmp	r6, r7
 80100b6:	d900      	bls.n	80100ba <__ssputs_r+0x86>
 80100b8:	463e      	mov	r6, r7
 80100ba:	6820      	ldr	r0, [r4, #0]
 80100bc:	4632      	mov	r2, r6
 80100be:	4641      	mov	r1, r8
 80100c0:	f7ff fcfc 	bl	800fabc <memmove>
 80100c4:	68a3      	ldr	r3, [r4, #8]
 80100c6:	1b9b      	subs	r3, r3, r6
 80100c8:	60a3      	str	r3, [r4, #8]
 80100ca:	6823      	ldr	r3, [r4, #0]
 80100cc:	4433      	add	r3, r6
 80100ce:	6023      	str	r3, [r4, #0]
 80100d0:	2000      	movs	r0, #0
 80100d2:	e7db      	b.n	801008c <__ssputs_r+0x58>
 80100d4:	462a      	mov	r2, r5
 80100d6:	f000 fe7b 	bl	8010dd0 <_realloc_r>
 80100da:	4606      	mov	r6, r0
 80100dc:	2800      	cmp	r0, #0
 80100de:	d1e1      	bne.n	80100a4 <__ssputs_r+0x70>
 80100e0:	6921      	ldr	r1, [r4, #16]
 80100e2:	4650      	mov	r0, sl
 80100e4:	f7ff fec6 	bl	800fe74 <_free_r>
 80100e8:	e7c7      	b.n	801007a <__ssputs_r+0x46>
	...

080100ec <_svfiprintf_r>:
 80100ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f0:	4698      	mov	r8, r3
 80100f2:	898b      	ldrh	r3, [r1, #12]
 80100f4:	061b      	lsls	r3, r3, #24
 80100f6:	b09d      	sub	sp, #116	; 0x74
 80100f8:	4607      	mov	r7, r0
 80100fa:	460d      	mov	r5, r1
 80100fc:	4614      	mov	r4, r2
 80100fe:	d50e      	bpl.n	801011e <_svfiprintf_r+0x32>
 8010100:	690b      	ldr	r3, [r1, #16]
 8010102:	b963      	cbnz	r3, 801011e <_svfiprintf_r+0x32>
 8010104:	2140      	movs	r1, #64	; 0x40
 8010106:	f7ff ff21 	bl	800ff4c <_malloc_r>
 801010a:	6028      	str	r0, [r5, #0]
 801010c:	6128      	str	r0, [r5, #16]
 801010e:	b920      	cbnz	r0, 801011a <_svfiprintf_r+0x2e>
 8010110:	230c      	movs	r3, #12
 8010112:	603b      	str	r3, [r7, #0]
 8010114:	f04f 30ff 	mov.w	r0, #4294967295
 8010118:	e0d1      	b.n	80102be <_svfiprintf_r+0x1d2>
 801011a:	2340      	movs	r3, #64	; 0x40
 801011c:	616b      	str	r3, [r5, #20]
 801011e:	2300      	movs	r3, #0
 8010120:	9309      	str	r3, [sp, #36]	; 0x24
 8010122:	2320      	movs	r3, #32
 8010124:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010128:	f8cd 800c 	str.w	r8, [sp, #12]
 801012c:	2330      	movs	r3, #48	; 0x30
 801012e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80102d8 <_svfiprintf_r+0x1ec>
 8010132:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010136:	f04f 0901 	mov.w	r9, #1
 801013a:	4623      	mov	r3, r4
 801013c:	469a      	mov	sl, r3
 801013e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010142:	b10a      	cbz	r2, 8010148 <_svfiprintf_r+0x5c>
 8010144:	2a25      	cmp	r2, #37	; 0x25
 8010146:	d1f9      	bne.n	801013c <_svfiprintf_r+0x50>
 8010148:	ebba 0b04 	subs.w	fp, sl, r4
 801014c:	d00b      	beq.n	8010166 <_svfiprintf_r+0x7a>
 801014e:	465b      	mov	r3, fp
 8010150:	4622      	mov	r2, r4
 8010152:	4629      	mov	r1, r5
 8010154:	4638      	mov	r0, r7
 8010156:	f7ff ff6d 	bl	8010034 <__ssputs_r>
 801015a:	3001      	adds	r0, #1
 801015c:	f000 80aa 	beq.w	80102b4 <_svfiprintf_r+0x1c8>
 8010160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010162:	445a      	add	r2, fp
 8010164:	9209      	str	r2, [sp, #36]	; 0x24
 8010166:	f89a 3000 	ldrb.w	r3, [sl]
 801016a:	2b00      	cmp	r3, #0
 801016c:	f000 80a2 	beq.w	80102b4 <_svfiprintf_r+0x1c8>
 8010170:	2300      	movs	r3, #0
 8010172:	f04f 32ff 	mov.w	r2, #4294967295
 8010176:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801017a:	f10a 0a01 	add.w	sl, sl, #1
 801017e:	9304      	str	r3, [sp, #16]
 8010180:	9307      	str	r3, [sp, #28]
 8010182:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010186:	931a      	str	r3, [sp, #104]	; 0x68
 8010188:	4654      	mov	r4, sl
 801018a:	2205      	movs	r2, #5
 801018c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010190:	4851      	ldr	r0, [pc, #324]	; (80102d8 <_svfiprintf_r+0x1ec>)
 8010192:	f7f0 f8bd 	bl	8000310 <memchr>
 8010196:	9a04      	ldr	r2, [sp, #16]
 8010198:	b9d8      	cbnz	r0, 80101d2 <_svfiprintf_r+0xe6>
 801019a:	06d0      	lsls	r0, r2, #27
 801019c:	bf44      	itt	mi
 801019e:	2320      	movmi	r3, #32
 80101a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101a4:	0711      	lsls	r1, r2, #28
 80101a6:	bf44      	itt	mi
 80101a8:	232b      	movmi	r3, #43	; 0x2b
 80101aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101ae:	f89a 3000 	ldrb.w	r3, [sl]
 80101b2:	2b2a      	cmp	r3, #42	; 0x2a
 80101b4:	d015      	beq.n	80101e2 <_svfiprintf_r+0xf6>
 80101b6:	9a07      	ldr	r2, [sp, #28]
 80101b8:	4654      	mov	r4, sl
 80101ba:	2000      	movs	r0, #0
 80101bc:	f04f 0c0a 	mov.w	ip, #10
 80101c0:	4621      	mov	r1, r4
 80101c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101c6:	3b30      	subs	r3, #48	; 0x30
 80101c8:	2b09      	cmp	r3, #9
 80101ca:	d94e      	bls.n	801026a <_svfiprintf_r+0x17e>
 80101cc:	b1b0      	cbz	r0, 80101fc <_svfiprintf_r+0x110>
 80101ce:	9207      	str	r2, [sp, #28]
 80101d0:	e014      	b.n	80101fc <_svfiprintf_r+0x110>
 80101d2:	eba0 0308 	sub.w	r3, r0, r8
 80101d6:	fa09 f303 	lsl.w	r3, r9, r3
 80101da:	4313      	orrs	r3, r2
 80101dc:	9304      	str	r3, [sp, #16]
 80101de:	46a2      	mov	sl, r4
 80101e0:	e7d2      	b.n	8010188 <_svfiprintf_r+0x9c>
 80101e2:	9b03      	ldr	r3, [sp, #12]
 80101e4:	1d19      	adds	r1, r3, #4
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	9103      	str	r1, [sp, #12]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	bfbb      	ittet	lt
 80101ee:	425b      	neglt	r3, r3
 80101f0:	f042 0202 	orrlt.w	r2, r2, #2
 80101f4:	9307      	strge	r3, [sp, #28]
 80101f6:	9307      	strlt	r3, [sp, #28]
 80101f8:	bfb8      	it	lt
 80101fa:	9204      	strlt	r2, [sp, #16]
 80101fc:	7823      	ldrb	r3, [r4, #0]
 80101fe:	2b2e      	cmp	r3, #46	; 0x2e
 8010200:	d10c      	bne.n	801021c <_svfiprintf_r+0x130>
 8010202:	7863      	ldrb	r3, [r4, #1]
 8010204:	2b2a      	cmp	r3, #42	; 0x2a
 8010206:	d135      	bne.n	8010274 <_svfiprintf_r+0x188>
 8010208:	9b03      	ldr	r3, [sp, #12]
 801020a:	1d1a      	adds	r2, r3, #4
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	9203      	str	r2, [sp, #12]
 8010210:	2b00      	cmp	r3, #0
 8010212:	bfb8      	it	lt
 8010214:	f04f 33ff 	movlt.w	r3, #4294967295
 8010218:	3402      	adds	r4, #2
 801021a:	9305      	str	r3, [sp, #20]
 801021c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80102e8 <_svfiprintf_r+0x1fc>
 8010220:	7821      	ldrb	r1, [r4, #0]
 8010222:	2203      	movs	r2, #3
 8010224:	4650      	mov	r0, sl
 8010226:	f7f0 f873 	bl	8000310 <memchr>
 801022a:	b140      	cbz	r0, 801023e <_svfiprintf_r+0x152>
 801022c:	2340      	movs	r3, #64	; 0x40
 801022e:	eba0 000a 	sub.w	r0, r0, sl
 8010232:	fa03 f000 	lsl.w	r0, r3, r0
 8010236:	9b04      	ldr	r3, [sp, #16]
 8010238:	4303      	orrs	r3, r0
 801023a:	3401      	adds	r4, #1
 801023c:	9304      	str	r3, [sp, #16]
 801023e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010242:	4826      	ldr	r0, [pc, #152]	; (80102dc <_svfiprintf_r+0x1f0>)
 8010244:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010248:	2206      	movs	r2, #6
 801024a:	f7f0 f861 	bl	8000310 <memchr>
 801024e:	2800      	cmp	r0, #0
 8010250:	d038      	beq.n	80102c4 <_svfiprintf_r+0x1d8>
 8010252:	4b23      	ldr	r3, [pc, #140]	; (80102e0 <_svfiprintf_r+0x1f4>)
 8010254:	bb1b      	cbnz	r3, 801029e <_svfiprintf_r+0x1b2>
 8010256:	9b03      	ldr	r3, [sp, #12]
 8010258:	3307      	adds	r3, #7
 801025a:	f023 0307 	bic.w	r3, r3, #7
 801025e:	3308      	adds	r3, #8
 8010260:	9303      	str	r3, [sp, #12]
 8010262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010264:	4433      	add	r3, r6
 8010266:	9309      	str	r3, [sp, #36]	; 0x24
 8010268:	e767      	b.n	801013a <_svfiprintf_r+0x4e>
 801026a:	fb0c 3202 	mla	r2, ip, r2, r3
 801026e:	460c      	mov	r4, r1
 8010270:	2001      	movs	r0, #1
 8010272:	e7a5      	b.n	80101c0 <_svfiprintf_r+0xd4>
 8010274:	2300      	movs	r3, #0
 8010276:	3401      	adds	r4, #1
 8010278:	9305      	str	r3, [sp, #20]
 801027a:	4619      	mov	r1, r3
 801027c:	f04f 0c0a 	mov.w	ip, #10
 8010280:	4620      	mov	r0, r4
 8010282:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010286:	3a30      	subs	r2, #48	; 0x30
 8010288:	2a09      	cmp	r2, #9
 801028a:	d903      	bls.n	8010294 <_svfiprintf_r+0x1a8>
 801028c:	2b00      	cmp	r3, #0
 801028e:	d0c5      	beq.n	801021c <_svfiprintf_r+0x130>
 8010290:	9105      	str	r1, [sp, #20]
 8010292:	e7c3      	b.n	801021c <_svfiprintf_r+0x130>
 8010294:	fb0c 2101 	mla	r1, ip, r1, r2
 8010298:	4604      	mov	r4, r0
 801029a:	2301      	movs	r3, #1
 801029c:	e7f0      	b.n	8010280 <_svfiprintf_r+0x194>
 801029e:	ab03      	add	r3, sp, #12
 80102a0:	9300      	str	r3, [sp, #0]
 80102a2:	462a      	mov	r2, r5
 80102a4:	4b0f      	ldr	r3, [pc, #60]	; (80102e4 <_svfiprintf_r+0x1f8>)
 80102a6:	a904      	add	r1, sp, #16
 80102a8:	4638      	mov	r0, r7
 80102aa:	f3af 8000 	nop.w
 80102ae:	1c42      	adds	r2, r0, #1
 80102b0:	4606      	mov	r6, r0
 80102b2:	d1d6      	bne.n	8010262 <_svfiprintf_r+0x176>
 80102b4:	89ab      	ldrh	r3, [r5, #12]
 80102b6:	065b      	lsls	r3, r3, #25
 80102b8:	f53f af2c 	bmi.w	8010114 <_svfiprintf_r+0x28>
 80102bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102be:	b01d      	add	sp, #116	; 0x74
 80102c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102c4:	ab03      	add	r3, sp, #12
 80102c6:	9300      	str	r3, [sp, #0]
 80102c8:	462a      	mov	r2, r5
 80102ca:	4b06      	ldr	r3, [pc, #24]	; (80102e4 <_svfiprintf_r+0x1f8>)
 80102cc:	a904      	add	r1, sp, #16
 80102ce:	4638      	mov	r0, r7
 80102d0:	f000 f9d4 	bl	801067c <_printf_i>
 80102d4:	e7eb      	b.n	80102ae <_svfiprintf_r+0x1c2>
 80102d6:	bf00      	nop
 80102d8:	08013b84 	.word	0x08013b84
 80102dc:	08013b8e 	.word	0x08013b8e
 80102e0:	00000000 	.word	0x00000000
 80102e4:	08010035 	.word	0x08010035
 80102e8:	08013b8a 	.word	0x08013b8a

080102ec <__sfputc_r>:
 80102ec:	6893      	ldr	r3, [r2, #8]
 80102ee:	3b01      	subs	r3, #1
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	b410      	push	{r4}
 80102f4:	6093      	str	r3, [r2, #8]
 80102f6:	da08      	bge.n	801030a <__sfputc_r+0x1e>
 80102f8:	6994      	ldr	r4, [r2, #24]
 80102fa:	42a3      	cmp	r3, r4
 80102fc:	db01      	blt.n	8010302 <__sfputc_r+0x16>
 80102fe:	290a      	cmp	r1, #10
 8010300:	d103      	bne.n	801030a <__sfputc_r+0x1e>
 8010302:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010306:	f000 bb33 	b.w	8010970 <__swbuf_r>
 801030a:	6813      	ldr	r3, [r2, #0]
 801030c:	1c58      	adds	r0, r3, #1
 801030e:	6010      	str	r0, [r2, #0]
 8010310:	7019      	strb	r1, [r3, #0]
 8010312:	4608      	mov	r0, r1
 8010314:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010318:	4770      	bx	lr

0801031a <__sfputs_r>:
 801031a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801031c:	4606      	mov	r6, r0
 801031e:	460f      	mov	r7, r1
 8010320:	4614      	mov	r4, r2
 8010322:	18d5      	adds	r5, r2, r3
 8010324:	42ac      	cmp	r4, r5
 8010326:	d101      	bne.n	801032c <__sfputs_r+0x12>
 8010328:	2000      	movs	r0, #0
 801032a:	e007      	b.n	801033c <__sfputs_r+0x22>
 801032c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010330:	463a      	mov	r2, r7
 8010332:	4630      	mov	r0, r6
 8010334:	f7ff ffda 	bl	80102ec <__sfputc_r>
 8010338:	1c43      	adds	r3, r0, #1
 801033a:	d1f3      	bne.n	8010324 <__sfputs_r+0xa>
 801033c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010340 <_vfiprintf_r>:
 8010340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010344:	460d      	mov	r5, r1
 8010346:	b09d      	sub	sp, #116	; 0x74
 8010348:	4614      	mov	r4, r2
 801034a:	4698      	mov	r8, r3
 801034c:	4606      	mov	r6, r0
 801034e:	b118      	cbz	r0, 8010358 <_vfiprintf_r+0x18>
 8010350:	6983      	ldr	r3, [r0, #24]
 8010352:	b90b      	cbnz	r3, 8010358 <_vfiprintf_r+0x18>
 8010354:	f7ff fcd4 	bl	800fd00 <__sinit>
 8010358:	4b89      	ldr	r3, [pc, #548]	; (8010580 <_vfiprintf_r+0x240>)
 801035a:	429d      	cmp	r5, r3
 801035c:	d11b      	bne.n	8010396 <_vfiprintf_r+0x56>
 801035e:	6875      	ldr	r5, [r6, #4]
 8010360:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010362:	07d9      	lsls	r1, r3, #31
 8010364:	d405      	bmi.n	8010372 <_vfiprintf_r+0x32>
 8010366:	89ab      	ldrh	r3, [r5, #12]
 8010368:	059a      	lsls	r2, r3, #22
 801036a:	d402      	bmi.n	8010372 <_vfiprintf_r+0x32>
 801036c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801036e:	f7ff fd77 	bl	800fe60 <__retarget_lock_acquire_recursive>
 8010372:	89ab      	ldrh	r3, [r5, #12]
 8010374:	071b      	lsls	r3, r3, #28
 8010376:	d501      	bpl.n	801037c <_vfiprintf_r+0x3c>
 8010378:	692b      	ldr	r3, [r5, #16]
 801037a:	b9eb      	cbnz	r3, 80103b8 <_vfiprintf_r+0x78>
 801037c:	4629      	mov	r1, r5
 801037e:	4630      	mov	r0, r6
 8010380:	f000 fb5a 	bl	8010a38 <__swsetup_r>
 8010384:	b1c0      	cbz	r0, 80103b8 <_vfiprintf_r+0x78>
 8010386:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010388:	07dc      	lsls	r4, r3, #31
 801038a:	d50e      	bpl.n	80103aa <_vfiprintf_r+0x6a>
 801038c:	f04f 30ff 	mov.w	r0, #4294967295
 8010390:	b01d      	add	sp, #116	; 0x74
 8010392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010396:	4b7b      	ldr	r3, [pc, #492]	; (8010584 <_vfiprintf_r+0x244>)
 8010398:	429d      	cmp	r5, r3
 801039a:	d101      	bne.n	80103a0 <_vfiprintf_r+0x60>
 801039c:	68b5      	ldr	r5, [r6, #8]
 801039e:	e7df      	b.n	8010360 <_vfiprintf_r+0x20>
 80103a0:	4b79      	ldr	r3, [pc, #484]	; (8010588 <_vfiprintf_r+0x248>)
 80103a2:	429d      	cmp	r5, r3
 80103a4:	bf08      	it	eq
 80103a6:	68f5      	ldreq	r5, [r6, #12]
 80103a8:	e7da      	b.n	8010360 <_vfiprintf_r+0x20>
 80103aa:	89ab      	ldrh	r3, [r5, #12]
 80103ac:	0598      	lsls	r0, r3, #22
 80103ae:	d4ed      	bmi.n	801038c <_vfiprintf_r+0x4c>
 80103b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103b2:	f7ff fd56 	bl	800fe62 <__retarget_lock_release_recursive>
 80103b6:	e7e9      	b.n	801038c <_vfiprintf_r+0x4c>
 80103b8:	2300      	movs	r3, #0
 80103ba:	9309      	str	r3, [sp, #36]	; 0x24
 80103bc:	2320      	movs	r3, #32
 80103be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80103c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80103c6:	2330      	movs	r3, #48	; 0x30
 80103c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801058c <_vfiprintf_r+0x24c>
 80103cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80103d0:	f04f 0901 	mov.w	r9, #1
 80103d4:	4623      	mov	r3, r4
 80103d6:	469a      	mov	sl, r3
 80103d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103dc:	b10a      	cbz	r2, 80103e2 <_vfiprintf_r+0xa2>
 80103de:	2a25      	cmp	r2, #37	; 0x25
 80103e0:	d1f9      	bne.n	80103d6 <_vfiprintf_r+0x96>
 80103e2:	ebba 0b04 	subs.w	fp, sl, r4
 80103e6:	d00b      	beq.n	8010400 <_vfiprintf_r+0xc0>
 80103e8:	465b      	mov	r3, fp
 80103ea:	4622      	mov	r2, r4
 80103ec:	4629      	mov	r1, r5
 80103ee:	4630      	mov	r0, r6
 80103f0:	f7ff ff93 	bl	801031a <__sfputs_r>
 80103f4:	3001      	adds	r0, #1
 80103f6:	f000 80aa 	beq.w	801054e <_vfiprintf_r+0x20e>
 80103fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80103fc:	445a      	add	r2, fp
 80103fe:	9209      	str	r2, [sp, #36]	; 0x24
 8010400:	f89a 3000 	ldrb.w	r3, [sl]
 8010404:	2b00      	cmp	r3, #0
 8010406:	f000 80a2 	beq.w	801054e <_vfiprintf_r+0x20e>
 801040a:	2300      	movs	r3, #0
 801040c:	f04f 32ff 	mov.w	r2, #4294967295
 8010410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010414:	f10a 0a01 	add.w	sl, sl, #1
 8010418:	9304      	str	r3, [sp, #16]
 801041a:	9307      	str	r3, [sp, #28]
 801041c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010420:	931a      	str	r3, [sp, #104]	; 0x68
 8010422:	4654      	mov	r4, sl
 8010424:	2205      	movs	r2, #5
 8010426:	f814 1b01 	ldrb.w	r1, [r4], #1
 801042a:	4858      	ldr	r0, [pc, #352]	; (801058c <_vfiprintf_r+0x24c>)
 801042c:	f7ef ff70 	bl	8000310 <memchr>
 8010430:	9a04      	ldr	r2, [sp, #16]
 8010432:	b9d8      	cbnz	r0, 801046c <_vfiprintf_r+0x12c>
 8010434:	06d1      	lsls	r1, r2, #27
 8010436:	bf44      	itt	mi
 8010438:	2320      	movmi	r3, #32
 801043a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801043e:	0713      	lsls	r3, r2, #28
 8010440:	bf44      	itt	mi
 8010442:	232b      	movmi	r3, #43	; 0x2b
 8010444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010448:	f89a 3000 	ldrb.w	r3, [sl]
 801044c:	2b2a      	cmp	r3, #42	; 0x2a
 801044e:	d015      	beq.n	801047c <_vfiprintf_r+0x13c>
 8010450:	9a07      	ldr	r2, [sp, #28]
 8010452:	4654      	mov	r4, sl
 8010454:	2000      	movs	r0, #0
 8010456:	f04f 0c0a 	mov.w	ip, #10
 801045a:	4621      	mov	r1, r4
 801045c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010460:	3b30      	subs	r3, #48	; 0x30
 8010462:	2b09      	cmp	r3, #9
 8010464:	d94e      	bls.n	8010504 <_vfiprintf_r+0x1c4>
 8010466:	b1b0      	cbz	r0, 8010496 <_vfiprintf_r+0x156>
 8010468:	9207      	str	r2, [sp, #28]
 801046a:	e014      	b.n	8010496 <_vfiprintf_r+0x156>
 801046c:	eba0 0308 	sub.w	r3, r0, r8
 8010470:	fa09 f303 	lsl.w	r3, r9, r3
 8010474:	4313      	orrs	r3, r2
 8010476:	9304      	str	r3, [sp, #16]
 8010478:	46a2      	mov	sl, r4
 801047a:	e7d2      	b.n	8010422 <_vfiprintf_r+0xe2>
 801047c:	9b03      	ldr	r3, [sp, #12]
 801047e:	1d19      	adds	r1, r3, #4
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	9103      	str	r1, [sp, #12]
 8010484:	2b00      	cmp	r3, #0
 8010486:	bfbb      	ittet	lt
 8010488:	425b      	neglt	r3, r3
 801048a:	f042 0202 	orrlt.w	r2, r2, #2
 801048e:	9307      	strge	r3, [sp, #28]
 8010490:	9307      	strlt	r3, [sp, #28]
 8010492:	bfb8      	it	lt
 8010494:	9204      	strlt	r2, [sp, #16]
 8010496:	7823      	ldrb	r3, [r4, #0]
 8010498:	2b2e      	cmp	r3, #46	; 0x2e
 801049a:	d10c      	bne.n	80104b6 <_vfiprintf_r+0x176>
 801049c:	7863      	ldrb	r3, [r4, #1]
 801049e:	2b2a      	cmp	r3, #42	; 0x2a
 80104a0:	d135      	bne.n	801050e <_vfiprintf_r+0x1ce>
 80104a2:	9b03      	ldr	r3, [sp, #12]
 80104a4:	1d1a      	adds	r2, r3, #4
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	9203      	str	r2, [sp, #12]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	bfb8      	it	lt
 80104ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80104b2:	3402      	adds	r4, #2
 80104b4:	9305      	str	r3, [sp, #20]
 80104b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801059c <_vfiprintf_r+0x25c>
 80104ba:	7821      	ldrb	r1, [r4, #0]
 80104bc:	2203      	movs	r2, #3
 80104be:	4650      	mov	r0, sl
 80104c0:	f7ef ff26 	bl	8000310 <memchr>
 80104c4:	b140      	cbz	r0, 80104d8 <_vfiprintf_r+0x198>
 80104c6:	2340      	movs	r3, #64	; 0x40
 80104c8:	eba0 000a 	sub.w	r0, r0, sl
 80104cc:	fa03 f000 	lsl.w	r0, r3, r0
 80104d0:	9b04      	ldr	r3, [sp, #16]
 80104d2:	4303      	orrs	r3, r0
 80104d4:	3401      	adds	r4, #1
 80104d6:	9304      	str	r3, [sp, #16]
 80104d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104dc:	482c      	ldr	r0, [pc, #176]	; (8010590 <_vfiprintf_r+0x250>)
 80104de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80104e2:	2206      	movs	r2, #6
 80104e4:	f7ef ff14 	bl	8000310 <memchr>
 80104e8:	2800      	cmp	r0, #0
 80104ea:	d03f      	beq.n	801056c <_vfiprintf_r+0x22c>
 80104ec:	4b29      	ldr	r3, [pc, #164]	; (8010594 <_vfiprintf_r+0x254>)
 80104ee:	bb1b      	cbnz	r3, 8010538 <_vfiprintf_r+0x1f8>
 80104f0:	9b03      	ldr	r3, [sp, #12]
 80104f2:	3307      	adds	r3, #7
 80104f4:	f023 0307 	bic.w	r3, r3, #7
 80104f8:	3308      	adds	r3, #8
 80104fa:	9303      	str	r3, [sp, #12]
 80104fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104fe:	443b      	add	r3, r7
 8010500:	9309      	str	r3, [sp, #36]	; 0x24
 8010502:	e767      	b.n	80103d4 <_vfiprintf_r+0x94>
 8010504:	fb0c 3202 	mla	r2, ip, r2, r3
 8010508:	460c      	mov	r4, r1
 801050a:	2001      	movs	r0, #1
 801050c:	e7a5      	b.n	801045a <_vfiprintf_r+0x11a>
 801050e:	2300      	movs	r3, #0
 8010510:	3401      	adds	r4, #1
 8010512:	9305      	str	r3, [sp, #20]
 8010514:	4619      	mov	r1, r3
 8010516:	f04f 0c0a 	mov.w	ip, #10
 801051a:	4620      	mov	r0, r4
 801051c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010520:	3a30      	subs	r2, #48	; 0x30
 8010522:	2a09      	cmp	r2, #9
 8010524:	d903      	bls.n	801052e <_vfiprintf_r+0x1ee>
 8010526:	2b00      	cmp	r3, #0
 8010528:	d0c5      	beq.n	80104b6 <_vfiprintf_r+0x176>
 801052a:	9105      	str	r1, [sp, #20]
 801052c:	e7c3      	b.n	80104b6 <_vfiprintf_r+0x176>
 801052e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010532:	4604      	mov	r4, r0
 8010534:	2301      	movs	r3, #1
 8010536:	e7f0      	b.n	801051a <_vfiprintf_r+0x1da>
 8010538:	ab03      	add	r3, sp, #12
 801053a:	9300      	str	r3, [sp, #0]
 801053c:	462a      	mov	r2, r5
 801053e:	4b16      	ldr	r3, [pc, #88]	; (8010598 <_vfiprintf_r+0x258>)
 8010540:	a904      	add	r1, sp, #16
 8010542:	4630      	mov	r0, r6
 8010544:	f3af 8000 	nop.w
 8010548:	4607      	mov	r7, r0
 801054a:	1c78      	adds	r0, r7, #1
 801054c:	d1d6      	bne.n	80104fc <_vfiprintf_r+0x1bc>
 801054e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010550:	07d9      	lsls	r1, r3, #31
 8010552:	d405      	bmi.n	8010560 <_vfiprintf_r+0x220>
 8010554:	89ab      	ldrh	r3, [r5, #12]
 8010556:	059a      	lsls	r2, r3, #22
 8010558:	d402      	bmi.n	8010560 <_vfiprintf_r+0x220>
 801055a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801055c:	f7ff fc81 	bl	800fe62 <__retarget_lock_release_recursive>
 8010560:	89ab      	ldrh	r3, [r5, #12]
 8010562:	065b      	lsls	r3, r3, #25
 8010564:	f53f af12 	bmi.w	801038c <_vfiprintf_r+0x4c>
 8010568:	9809      	ldr	r0, [sp, #36]	; 0x24
 801056a:	e711      	b.n	8010390 <_vfiprintf_r+0x50>
 801056c:	ab03      	add	r3, sp, #12
 801056e:	9300      	str	r3, [sp, #0]
 8010570:	462a      	mov	r2, r5
 8010572:	4b09      	ldr	r3, [pc, #36]	; (8010598 <_vfiprintf_r+0x258>)
 8010574:	a904      	add	r1, sp, #16
 8010576:	4630      	mov	r0, r6
 8010578:	f000 f880 	bl	801067c <_printf_i>
 801057c:	e7e4      	b.n	8010548 <_vfiprintf_r+0x208>
 801057e:	bf00      	nop
 8010580:	08013b44 	.word	0x08013b44
 8010584:	08013b64 	.word	0x08013b64
 8010588:	08013b24 	.word	0x08013b24
 801058c:	08013b84 	.word	0x08013b84
 8010590:	08013b8e 	.word	0x08013b8e
 8010594:	00000000 	.word	0x00000000
 8010598:	0801031b 	.word	0x0801031b
 801059c:	08013b8a 	.word	0x08013b8a

080105a0 <_printf_common>:
 80105a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105a4:	4616      	mov	r6, r2
 80105a6:	4699      	mov	r9, r3
 80105a8:	688a      	ldr	r2, [r1, #8]
 80105aa:	690b      	ldr	r3, [r1, #16]
 80105ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80105b0:	4293      	cmp	r3, r2
 80105b2:	bfb8      	it	lt
 80105b4:	4613      	movlt	r3, r2
 80105b6:	6033      	str	r3, [r6, #0]
 80105b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80105bc:	4607      	mov	r7, r0
 80105be:	460c      	mov	r4, r1
 80105c0:	b10a      	cbz	r2, 80105c6 <_printf_common+0x26>
 80105c2:	3301      	adds	r3, #1
 80105c4:	6033      	str	r3, [r6, #0]
 80105c6:	6823      	ldr	r3, [r4, #0]
 80105c8:	0699      	lsls	r1, r3, #26
 80105ca:	bf42      	ittt	mi
 80105cc:	6833      	ldrmi	r3, [r6, #0]
 80105ce:	3302      	addmi	r3, #2
 80105d0:	6033      	strmi	r3, [r6, #0]
 80105d2:	6825      	ldr	r5, [r4, #0]
 80105d4:	f015 0506 	ands.w	r5, r5, #6
 80105d8:	d106      	bne.n	80105e8 <_printf_common+0x48>
 80105da:	f104 0a19 	add.w	sl, r4, #25
 80105de:	68e3      	ldr	r3, [r4, #12]
 80105e0:	6832      	ldr	r2, [r6, #0]
 80105e2:	1a9b      	subs	r3, r3, r2
 80105e4:	42ab      	cmp	r3, r5
 80105e6:	dc26      	bgt.n	8010636 <_printf_common+0x96>
 80105e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80105ec:	1e13      	subs	r3, r2, #0
 80105ee:	6822      	ldr	r2, [r4, #0]
 80105f0:	bf18      	it	ne
 80105f2:	2301      	movne	r3, #1
 80105f4:	0692      	lsls	r2, r2, #26
 80105f6:	d42b      	bmi.n	8010650 <_printf_common+0xb0>
 80105f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80105fc:	4649      	mov	r1, r9
 80105fe:	4638      	mov	r0, r7
 8010600:	47c0      	blx	r8
 8010602:	3001      	adds	r0, #1
 8010604:	d01e      	beq.n	8010644 <_printf_common+0xa4>
 8010606:	6823      	ldr	r3, [r4, #0]
 8010608:	68e5      	ldr	r5, [r4, #12]
 801060a:	6832      	ldr	r2, [r6, #0]
 801060c:	f003 0306 	and.w	r3, r3, #6
 8010610:	2b04      	cmp	r3, #4
 8010612:	bf08      	it	eq
 8010614:	1aad      	subeq	r5, r5, r2
 8010616:	68a3      	ldr	r3, [r4, #8]
 8010618:	6922      	ldr	r2, [r4, #16]
 801061a:	bf0c      	ite	eq
 801061c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010620:	2500      	movne	r5, #0
 8010622:	4293      	cmp	r3, r2
 8010624:	bfc4      	itt	gt
 8010626:	1a9b      	subgt	r3, r3, r2
 8010628:	18ed      	addgt	r5, r5, r3
 801062a:	2600      	movs	r6, #0
 801062c:	341a      	adds	r4, #26
 801062e:	42b5      	cmp	r5, r6
 8010630:	d11a      	bne.n	8010668 <_printf_common+0xc8>
 8010632:	2000      	movs	r0, #0
 8010634:	e008      	b.n	8010648 <_printf_common+0xa8>
 8010636:	2301      	movs	r3, #1
 8010638:	4652      	mov	r2, sl
 801063a:	4649      	mov	r1, r9
 801063c:	4638      	mov	r0, r7
 801063e:	47c0      	blx	r8
 8010640:	3001      	adds	r0, #1
 8010642:	d103      	bne.n	801064c <_printf_common+0xac>
 8010644:	f04f 30ff 	mov.w	r0, #4294967295
 8010648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801064c:	3501      	adds	r5, #1
 801064e:	e7c6      	b.n	80105de <_printf_common+0x3e>
 8010650:	18e1      	adds	r1, r4, r3
 8010652:	1c5a      	adds	r2, r3, #1
 8010654:	2030      	movs	r0, #48	; 0x30
 8010656:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801065a:	4422      	add	r2, r4
 801065c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010660:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010664:	3302      	adds	r3, #2
 8010666:	e7c7      	b.n	80105f8 <_printf_common+0x58>
 8010668:	2301      	movs	r3, #1
 801066a:	4622      	mov	r2, r4
 801066c:	4649      	mov	r1, r9
 801066e:	4638      	mov	r0, r7
 8010670:	47c0      	blx	r8
 8010672:	3001      	adds	r0, #1
 8010674:	d0e6      	beq.n	8010644 <_printf_common+0xa4>
 8010676:	3601      	adds	r6, #1
 8010678:	e7d9      	b.n	801062e <_printf_common+0x8e>
	...

0801067c <_printf_i>:
 801067c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010680:	7e0f      	ldrb	r7, [r1, #24]
 8010682:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010684:	2f78      	cmp	r7, #120	; 0x78
 8010686:	4691      	mov	r9, r2
 8010688:	4680      	mov	r8, r0
 801068a:	460c      	mov	r4, r1
 801068c:	469a      	mov	sl, r3
 801068e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010692:	d807      	bhi.n	80106a4 <_printf_i+0x28>
 8010694:	2f62      	cmp	r7, #98	; 0x62
 8010696:	d80a      	bhi.n	80106ae <_printf_i+0x32>
 8010698:	2f00      	cmp	r7, #0
 801069a:	f000 80d8 	beq.w	801084e <_printf_i+0x1d2>
 801069e:	2f58      	cmp	r7, #88	; 0x58
 80106a0:	f000 80a3 	beq.w	80107ea <_printf_i+0x16e>
 80106a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80106a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80106ac:	e03a      	b.n	8010724 <_printf_i+0xa8>
 80106ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80106b2:	2b15      	cmp	r3, #21
 80106b4:	d8f6      	bhi.n	80106a4 <_printf_i+0x28>
 80106b6:	a101      	add	r1, pc, #4	; (adr r1, 80106bc <_printf_i+0x40>)
 80106b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80106bc:	08010715 	.word	0x08010715
 80106c0:	08010729 	.word	0x08010729
 80106c4:	080106a5 	.word	0x080106a5
 80106c8:	080106a5 	.word	0x080106a5
 80106cc:	080106a5 	.word	0x080106a5
 80106d0:	080106a5 	.word	0x080106a5
 80106d4:	08010729 	.word	0x08010729
 80106d8:	080106a5 	.word	0x080106a5
 80106dc:	080106a5 	.word	0x080106a5
 80106e0:	080106a5 	.word	0x080106a5
 80106e4:	080106a5 	.word	0x080106a5
 80106e8:	08010835 	.word	0x08010835
 80106ec:	08010759 	.word	0x08010759
 80106f0:	08010817 	.word	0x08010817
 80106f4:	080106a5 	.word	0x080106a5
 80106f8:	080106a5 	.word	0x080106a5
 80106fc:	08010857 	.word	0x08010857
 8010700:	080106a5 	.word	0x080106a5
 8010704:	08010759 	.word	0x08010759
 8010708:	080106a5 	.word	0x080106a5
 801070c:	080106a5 	.word	0x080106a5
 8010710:	0801081f 	.word	0x0801081f
 8010714:	682b      	ldr	r3, [r5, #0]
 8010716:	1d1a      	adds	r2, r3, #4
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	602a      	str	r2, [r5, #0]
 801071c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010724:	2301      	movs	r3, #1
 8010726:	e0a3      	b.n	8010870 <_printf_i+0x1f4>
 8010728:	6820      	ldr	r0, [r4, #0]
 801072a:	6829      	ldr	r1, [r5, #0]
 801072c:	0606      	lsls	r6, r0, #24
 801072e:	f101 0304 	add.w	r3, r1, #4
 8010732:	d50a      	bpl.n	801074a <_printf_i+0xce>
 8010734:	680e      	ldr	r6, [r1, #0]
 8010736:	602b      	str	r3, [r5, #0]
 8010738:	2e00      	cmp	r6, #0
 801073a:	da03      	bge.n	8010744 <_printf_i+0xc8>
 801073c:	232d      	movs	r3, #45	; 0x2d
 801073e:	4276      	negs	r6, r6
 8010740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010744:	485e      	ldr	r0, [pc, #376]	; (80108c0 <_printf_i+0x244>)
 8010746:	230a      	movs	r3, #10
 8010748:	e019      	b.n	801077e <_printf_i+0x102>
 801074a:	680e      	ldr	r6, [r1, #0]
 801074c:	602b      	str	r3, [r5, #0]
 801074e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010752:	bf18      	it	ne
 8010754:	b236      	sxthne	r6, r6
 8010756:	e7ef      	b.n	8010738 <_printf_i+0xbc>
 8010758:	682b      	ldr	r3, [r5, #0]
 801075a:	6820      	ldr	r0, [r4, #0]
 801075c:	1d19      	adds	r1, r3, #4
 801075e:	6029      	str	r1, [r5, #0]
 8010760:	0601      	lsls	r1, r0, #24
 8010762:	d501      	bpl.n	8010768 <_printf_i+0xec>
 8010764:	681e      	ldr	r6, [r3, #0]
 8010766:	e002      	b.n	801076e <_printf_i+0xf2>
 8010768:	0646      	lsls	r6, r0, #25
 801076a:	d5fb      	bpl.n	8010764 <_printf_i+0xe8>
 801076c:	881e      	ldrh	r6, [r3, #0]
 801076e:	4854      	ldr	r0, [pc, #336]	; (80108c0 <_printf_i+0x244>)
 8010770:	2f6f      	cmp	r7, #111	; 0x6f
 8010772:	bf0c      	ite	eq
 8010774:	2308      	moveq	r3, #8
 8010776:	230a      	movne	r3, #10
 8010778:	2100      	movs	r1, #0
 801077a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801077e:	6865      	ldr	r5, [r4, #4]
 8010780:	60a5      	str	r5, [r4, #8]
 8010782:	2d00      	cmp	r5, #0
 8010784:	bfa2      	ittt	ge
 8010786:	6821      	ldrge	r1, [r4, #0]
 8010788:	f021 0104 	bicge.w	r1, r1, #4
 801078c:	6021      	strge	r1, [r4, #0]
 801078e:	b90e      	cbnz	r6, 8010794 <_printf_i+0x118>
 8010790:	2d00      	cmp	r5, #0
 8010792:	d04d      	beq.n	8010830 <_printf_i+0x1b4>
 8010794:	4615      	mov	r5, r2
 8010796:	fbb6 f1f3 	udiv	r1, r6, r3
 801079a:	fb03 6711 	mls	r7, r3, r1, r6
 801079e:	5dc7      	ldrb	r7, [r0, r7]
 80107a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80107a4:	4637      	mov	r7, r6
 80107a6:	42bb      	cmp	r3, r7
 80107a8:	460e      	mov	r6, r1
 80107aa:	d9f4      	bls.n	8010796 <_printf_i+0x11a>
 80107ac:	2b08      	cmp	r3, #8
 80107ae:	d10b      	bne.n	80107c8 <_printf_i+0x14c>
 80107b0:	6823      	ldr	r3, [r4, #0]
 80107b2:	07de      	lsls	r6, r3, #31
 80107b4:	d508      	bpl.n	80107c8 <_printf_i+0x14c>
 80107b6:	6923      	ldr	r3, [r4, #16]
 80107b8:	6861      	ldr	r1, [r4, #4]
 80107ba:	4299      	cmp	r1, r3
 80107bc:	bfde      	ittt	le
 80107be:	2330      	movle	r3, #48	; 0x30
 80107c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80107c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80107c8:	1b52      	subs	r2, r2, r5
 80107ca:	6122      	str	r2, [r4, #16]
 80107cc:	f8cd a000 	str.w	sl, [sp]
 80107d0:	464b      	mov	r3, r9
 80107d2:	aa03      	add	r2, sp, #12
 80107d4:	4621      	mov	r1, r4
 80107d6:	4640      	mov	r0, r8
 80107d8:	f7ff fee2 	bl	80105a0 <_printf_common>
 80107dc:	3001      	adds	r0, #1
 80107de:	d14c      	bne.n	801087a <_printf_i+0x1fe>
 80107e0:	f04f 30ff 	mov.w	r0, #4294967295
 80107e4:	b004      	add	sp, #16
 80107e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107ea:	4835      	ldr	r0, [pc, #212]	; (80108c0 <_printf_i+0x244>)
 80107ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80107f0:	6829      	ldr	r1, [r5, #0]
 80107f2:	6823      	ldr	r3, [r4, #0]
 80107f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80107f8:	6029      	str	r1, [r5, #0]
 80107fa:	061d      	lsls	r5, r3, #24
 80107fc:	d514      	bpl.n	8010828 <_printf_i+0x1ac>
 80107fe:	07df      	lsls	r7, r3, #31
 8010800:	bf44      	itt	mi
 8010802:	f043 0320 	orrmi.w	r3, r3, #32
 8010806:	6023      	strmi	r3, [r4, #0]
 8010808:	b91e      	cbnz	r6, 8010812 <_printf_i+0x196>
 801080a:	6823      	ldr	r3, [r4, #0]
 801080c:	f023 0320 	bic.w	r3, r3, #32
 8010810:	6023      	str	r3, [r4, #0]
 8010812:	2310      	movs	r3, #16
 8010814:	e7b0      	b.n	8010778 <_printf_i+0xfc>
 8010816:	6823      	ldr	r3, [r4, #0]
 8010818:	f043 0320 	orr.w	r3, r3, #32
 801081c:	6023      	str	r3, [r4, #0]
 801081e:	2378      	movs	r3, #120	; 0x78
 8010820:	4828      	ldr	r0, [pc, #160]	; (80108c4 <_printf_i+0x248>)
 8010822:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010826:	e7e3      	b.n	80107f0 <_printf_i+0x174>
 8010828:	0659      	lsls	r1, r3, #25
 801082a:	bf48      	it	mi
 801082c:	b2b6      	uxthmi	r6, r6
 801082e:	e7e6      	b.n	80107fe <_printf_i+0x182>
 8010830:	4615      	mov	r5, r2
 8010832:	e7bb      	b.n	80107ac <_printf_i+0x130>
 8010834:	682b      	ldr	r3, [r5, #0]
 8010836:	6826      	ldr	r6, [r4, #0]
 8010838:	6961      	ldr	r1, [r4, #20]
 801083a:	1d18      	adds	r0, r3, #4
 801083c:	6028      	str	r0, [r5, #0]
 801083e:	0635      	lsls	r5, r6, #24
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	d501      	bpl.n	8010848 <_printf_i+0x1cc>
 8010844:	6019      	str	r1, [r3, #0]
 8010846:	e002      	b.n	801084e <_printf_i+0x1d2>
 8010848:	0670      	lsls	r0, r6, #25
 801084a:	d5fb      	bpl.n	8010844 <_printf_i+0x1c8>
 801084c:	8019      	strh	r1, [r3, #0]
 801084e:	2300      	movs	r3, #0
 8010850:	6123      	str	r3, [r4, #16]
 8010852:	4615      	mov	r5, r2
 8010854:	e7ba      	b.n	80107cc <_printf_i+0x150>
 8010856:	682b      	ldr	r3, [r5, #0]
 8010858:	1d1a      	adds	r2, r3, #4
 801085a:	602a      	str	r2, [r5, #0]
 801085c:	681d      	ldr	r5, [r3, #0]
 801085e:	6862      	ldr	r2, [r4, #4]
 8010860:	2100      	movs	r1, #0
 8010862:	4628      	mov	r0, r5
 8010864:	f7ef fd54 	bl	8000310 <memchr>
 8010868:	b108      	cbz	r0, 801086e <_printf_i+0x1f2>
 801086a:	1b40      	subs	r0, r0, r5
 801086c:	6060      	str	r0, [r4, #4]
 801086e:	6863      	ldr	r3, [r4, #4]
 8010870:	6123      	str	r3, [r4, #16]
 8010872:	2300      	movs	r3, #0
 8010874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010878:	e7a8      	b.n	80107cc <_printf_i+0x150>
 801087a:	6923      	ldr	r3, [r4, #16]
 801087c:	462a      	mov	r2, r5
 801087e:	4649      	mov	r1, r9
 8010880:	4640      	mov	r0, r8
 8010882:	47d0      	blx	sl
 8010884:	3001      	adds	r0, #1
 8010886:	d0ab      	beq.n	80107e0 <_printf_i+0x164>
 8010888:	6823      	ldr	r3, [r4, #0]
 801088a:	079b      	lsls	r3, r3, #30
 801088c:	d413      	bmi.n	80108b6 <_printf_i+0x23a>
 801088e:	68e0      	ldr	r0, [r4, #12]
 8010890:	9b03      	ldr	r3, [sp, #12]
 8010892:	4298      	cmp	r0, r3
 8010894:	bfb8      	it	lt
 8010896:	4618      	movlt	r0, r3
 8010898:	e7a4      	b.n	80107e4 <_printf_i+0x168>
 801089a:	2301      	movs	r3, #1
 801089c:	4632      	mov	r2, r6
 801089e:	4649      	mov	r1, r9
 80108a0:	4640      	mov	r0, r8
 80108a2:	47d0      	blx	sl
 80108a4:	3001      	adds	r0, #1
 80108a6:	d09b      	beq.n	80107e0 <_printf_i+0x164>
 80108a8:	3501      	adds	r5, #1
 80108aa:	68e3      	ldr	r3, [r4, #12]
 80108ac:	9903      	ldr	r1, [sp, #12]
 80108ae:	1a5b      	subs	r3, r3, r1
 80108b0:	42ab      	cmp	r3, r5
 80108b2:	dcf2      	bgt.n	801089a <_printf_i+0x21e>
 80108b4:	e7eb      	b.n	801088e <_printf_i+0x212>
 80108b6:	2500      	movs	r5, #0
 80108b8:	f104 0619 	add.w	r6, r4, #25
 80108bc:	e7f5      	b.n	80108aa <_printf_i+0x22e>
 80108be:	bf00      	nop
 80108c0:	08013b95 	.word	0x08013b95
 80108c4:	08013ba6 	.word	0x08013ba6

080108c8 <_sbrk_r>:
 80108c8:	b538      	push	{r3, r4, r5, lr}
 80108ca:	4d06      	ldr	r5, [pc, #24]	; (80108e4 <_sbrk_r+0x1c>)
 80108cc:	2300      	movs	r3, #0
 80108ce:	4604      	mov	r4, r0
 80108d0:	4608      	mov	r0, r1
 80108d2:	602b      	str	r3, [r5, #0]
 80108d4:	f7f0 f93a 	bl	8000b4c <_sbrk>
 80108d8:	1c43      	adds	r3, r0, #1
 80108da:	d102      	bne.n	80108e2 <_sbrk_r+0x1a>
 80108dc:	682b      	ldr	r3, [r5, #0]
 80108de:	b103      	cbz	r3, 80108e2 <_sbrk_r+0x1a>
 80108e0:	6023      	str	r3, [r4, #0]
 80108e2:	bd38      	pop	{r3, r4, r5, pc}
 80108e4:	24003344 	.word	0x24003344

080108e8 <__sread>:
 80108e8:	b510      	push	{r4, lr}
 80108ea:	460c      	mov	r4, r1
 80108ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108f0:	f000 fa9e 	bl	8010e30 <_read_r>
 80108f4:	2800      	cmp	r0, #0
 80108f6:	bfab      	itete	ge
 80108f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80108fa:	89a3      	ldrhlt	r3, [r4, #12]
 80108fc:	181b      	addge	r3, r3, r0
 80108fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010902:	bfac      	ite	ge
 8010904:	6563      	strge	r3, [r4, #84]	; 0x54
 8010906:	81a3      	strhlt	r3, [r4, #12]
 8010908:	bd10      	pop	{r4, pc}

0801090a <__swrite>:
 801090a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801090e:	461f      	mov	r7, r3
 8010910:	898b      	ldrh	r3, [r1, #12]
 8010912:	05db      	lsls	r3, r3, #23
 8010914:	4605      	mov	r5, r0
 8010916:	460c      	mov	r4, r1
 8010918:	4616      	mov	r6, r2
 801091a:	d505      	bpl.n	8010928 <__swrite+0x1e>
 801091c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010920:	2302      	movs	r3, #2
 8010922:	2200      	movs	r2, #0
 8010924:	f000 f9d0 	bl	8010cc8 <_lseek_r>
 8010928:	89a3      	ldrh	r3, [r4, #12]
 801092a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801092e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010932:	81a3      	strh	r3, [r4, #12]
 8010934:	4632      	mov	r2, r6
 8010936:	463b      	mov	r3, r7
 8010938:	4628      	mov	r0, r5
 801093a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801093e:	f000 b869 	b.w	8010a14 <_write_r>

08010942 <__sseek>:
 8010942:	b510      	push	{r4, lr}
 8010944:	460c      	mov	r4, r1
 8010946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801094a:	f000 f9bd 	bl	8010cc8 <_lseek_r>
 801094e:	1c43      	adds	r3, r0, #1
 8010950:	89a3      	ldrh	r3, [r4, #12]
 8010952:	bf15      	itete	ne
 8010954:	6560      	strne	r0, [r4, #84]	; 0x54
 8010956:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801095a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801095e:	81a3      	strheq	r3, [r4, #12]
 8010960:	bf18      	it	ne
 8010962:	81a3      	strhne	r3, [r4, #12]
 8010964:	bd10      	pop	{r4, pc}

08010966 <__sclose>:
 8010966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801096a:	f000 b8db 	b.w	8010b24 <_close_r>
	...

08010970 <__swbuf_r>:
 8010970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010972:	460e      	mov	r6, r1
 8010974:	4614      	mov	r4, r2
 8010976:	4605      	mov	r5, r0
 8010978:	b118      	cbz	r0, 8010982 <__swbuf_r+0x12>
 801097a:	6983      	ldr	r3, [r0, #24]
 801097c:	b90b      	cbnz	r3, 8010982 <__swbuf_r+0x12>
 801097e:	f7ff f9bf 	bl	800fd00 <__sinit>
 8010982:	4b21      	ldr	r3, [pc, #132]	; (8010a08 <__swbuf_r+0x98>)
 8010984:	429c      	cmp	r4, r3
 8010986:	d12b      	bne.n	80109e0 <__swbuf_r+0x70>
 8010988:	686c      	ldr	r4, [r5, #4]
 801098a:	69a3      	ldr	r3, [r4, #24]
 801098c:	60a3      	str	r3, [r4, #8]
 801098e:	89a3      	ldrh	r3, [r4, #12]
 8010990:	071a      	lsls	r2, r3, #28
 8010992:	d52f      	bpl.n	80109f4 <__swbuf_r+0x84>
 8010994:	6923      	ldr	r3, [r4, #16]
 8010996:	b36b      	cbz	r3, 80109f4 <__swbuf_r+0x84>
 8010998:	6923      	ldr	r3, [r4, #16]
 801099a:	6820      	ldr	r0, [r4, #0]
 801099c:	1ac0      	subs	r0, r0, r3
 801099e:	6963      	ldr	r3, [r4, #20]
 80109a0:	b2f6      	uxtb	r6, r6
 80109a2:	4283      	cmp	r3, r0
 80109a4:	4637      	mov	r7, r6
 80109a6:	dc04      	bgt.n	80109b2 <__swbuf_r+0x42>
 80109a8:	4621      	mov	r1, r4
 80109aa:	4628      	mov	r0, r5
 80109ac:	f000 f950 	bl	8010c50 <_fflush_r>
 80109b0:	bb30      	cbnz	r0, 8010a00 <__swbuf_r+0x90>
 80109b2:	68a3      	ldr	r3, [r4, #8]
 80109b4:	3b01      	subs	r3, #1
 80109b6:	60a3      	str	r3, [r4, #8]
 80109b8:	6823      	ldr	r3, [r4, #0]
 80109ba:	1c5a      	adds	r2, r3, #1
 80109bc:	6022      	str	r2, [r4, #0]
 80109be:	701e      	strb	r6, [r3, #0]
 80109c0:	6963      	ldr	r3, [r4, #20]
 80109c2:	3001      	adds	r0, #1
 80109c4:	4283      	cmp	r3, r0
 80109c6:	d004      	beq.n	80109d2 <__swbuf_r+0x62>
 80109c8:	89a3      	ldrh	r3, [r4, #12]
 80109ca:	07db      	lsls	r3, r3, #31
 80109cc:	d506      	bpl.n	80109dc <__swbuf_r+0x6c>
 80109ce:	2e0a      	cmp	r6, #10
 80109d0:	d104      	bne.n	80109dc <__swbuf_r+0x6c>
 80109d2:	4621      	mov	r1, r4
 80109d4:	4628      	mov	r0, r5
 80109d6:	f000 f93b 	bl	8010c50 <_fflush_r>
 80109da:	b988      	cbnz	r0, 8010a00 <__swbuf_r+0x90>
 80109dc:	4638      	mov	r0, r7
 80109de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109e0:	4b0a      	ldr	r3, [pc, #40]	; (8010a0c <__swbuf_r+0x9c>)
 80109e2:	429c      	cmp	r4, r3
 80109e4:	d101      	bne.n	80109ea <__swbuf_r+0x7a>
 80109e6:	68ac      	ldr	r4, [r5, #8]
 80109e8:	e7cf      	b.n	801098a <__swbuf_r+0x1a>
 80109ea:	4b09      	ldr	r3, [pc, #36]	; (8010a10 <__swbuf_r+0xa0>)
 80109ec:	429c      	cmp	r4, r3
 80109ee:	bf08      	it	eq
 80109f0:	68ec      	ldreq	r4, [r5, #12]
 80109f2:	e7ca      	b.n	801098a <__swbuf_r+0x1a>
 80109f4:	4621      	mov	r1, r4
 80109f6:	4628      	mov	r0, r5
 80109f8:	f000 f81e 	bl	8010a38 <__swsetup_r>
 80109fc:	2800      	cmp	r0, #0
 80109fe:	d0cb      	beq.n	8010998 <__swbuf_r+0x28>
 8010a00:	f04f 37ff 	mov.w	r7, #4294967295
 8010a04:	e7ea      	b.n	80109dc <__swbuf_r+0x6c>
 8010a06:	bf00      	nop
 8010a08:	08013b44 	.word	0x08013b44
 8010a0c:	08013b64 	.word	0x08013b64
 8010a10:	08013b24 	.word	0x08013b24

08010a14 <_write_r>:
 8010a14:	b538      	push	{r3, r4, r5, lr}
 8010a16:	4d07      	ldr	r5, [pc, #28]	; (8010a34 <_write_r+0x20>)
 8010a18:	4604      	mov	r4, r0
 8010a1a:	4608      	mov	r0, r1
 8010a1c:	4611      	mov	r1, r2
 8010a1e:	2200      	movs	r2, #0
 8010a20:	602a      	str	r2, [r5, #0]
 8010a22:	461a      	mov	r2, r3
 8010a24:	f7f0 f841 	bl	8000aaa <_write>
 8010a28:	1c43      	adds	r3, r0, #1
 8010a2a:	d102      	bne.n	8010a32 <_write_r+0x1e>
 8010a2c:	682b      	ldr	r3, [r5, #0]
 8010a2e:	b103      	cbz	r3, 8010a32 <_write_r+0x1e>
 8010a30:	6023      	str	r3, [r4, #0]
 8010a32:	bd38      	pop	{r3, r4, r5, pc}
 8010a34:	24003344 	.word	0x24003344

08010a38 <__swsetup_r>:
 8010a38:	4b32      	ldr	r3, [pc, #200]	; (8010b04 <__swsetup_r+0xcc>)
 8010a3a:	b570      	push	{r4, r5, r6, lr}
 8010a3c:	681d      	ldr	r5, [r3, #0]
 8010a3e:	4606      	mov	r6, r0
 8010a40:	460c      	mov	r4, r1
 8010a42:	b125      	cbz	r5, 8010a4e <__swsetup_r+0x16>
 8010a44:	69ab      	ldr	r3, [r5, #24]
 8010a46:	b913      	cbnz	r3, 8010a4e <__swsetup_r+0x16>
 8010a48:	4628      	mov	r0, r5
 8010a4a:	f7ff f959 	bl	800fd00 <__sinit>
 8010a4e:	4b2e      	ldr	r3, [pc, #184]	; (8010b08 <__swsetup_r+0xd0>)
 8010a50:	429c      	cmp	r4, r3
 8010a52:	d10f      	bne.n	8010a74 <__swsetup_r+0x3c>
 8010a54:	686c      	ldr	r4, [r5, #4]
 8010a56:	89a3      	ldrh	r3, [r4, #12]
 8010a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a5c:	0719      	lsls	r1, r3, #28
 8010a5e:	d42c      	bmi.n	8010aba <__swsetup_r+0x82>
 8010a60:	06dd      	lsls	r5, r3, #27
 8010a62:	d411      	bmi.n	8010a88 <__swsetup_r+0x50>
 8010a64:	2309      	movs	r3, #9
 8010a66:	6033      	str	r3, [r6, #0]
 8010a68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010a6c:	81a3      	strh	r3, [r4, #12]
 8010a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8010a72:	e03e      	b.n	8010af2 <__swsetup_r+0xba>
 8010a74:	4b25      	ldr	r3, [pc, #148]	; (8010b0c <__swsetup_r+0xd4>)
 8010a76:	429c      	cmp	r4, r3
 8010a78:	d101      	bne.n	8010a7e <__swsetup_r+0x46>
 8010a7a:	68ac      	ldr	r4, [r5, #8]
 8010a7c:	e7eb      	b.n	8010a56 <__swsetup_r+0x1e>
 8010a7e:	4b24      	ldr	r3, [pc, #144]	; (8010b10 <__swsetup_r+0xd8>)
 8010a80:	429c      	cmp	r4, r3
 8010a82:	bf08      	it	eq
 8010a84:	68ec      	ldreq	r4, [r5, #12]
 8010a86:	e7e6      	b.n	8010a56 <__swsetup_r+0x1e>
 8010a88:	0758      	lsls	r0, r3, #29
 8010a8a:	d512      	bpl.n	8010ab2 <__swsetup_r+0x7a>
 8010a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a8e:	b141      	cbz	r1, 8010aa2 <__swsetup_r+0x6a>
 8010a90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a94:	4299      	cmp	r1, r3
 8010a96:	d002      	beq.n	8010a9e <__swsetup_r+0x66>
 8010a98:	4630      	mov	r0, r6
 8010a9a:	f7ff f9eb 	bl	800fe74 <_free_r>
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	6363      	str	r3, [r4, #52]	; 0x34
 8010aa2:	89a3      	ldrh	r3, [r4, #12]
 8010aa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010aa8:	81a3      	strh	r3, [r4, #12]
 8010aaa:	2300      	movs	r3, #0
 8010aac:	6063      	str	r3, [r4, #4]
 8010aae:	6923      	ldr	r3, [r4, #16]
 8010ab0:	6023      	str	r3, [r4, #0]
 8010ab2:	89a3      	ldrh	r3, [r4, #12]
 8010ab4:	f043 0308 	orr.w	r3, r3, #8
 8010ab8:	81a3      	strh	r3, [r4, #12]
 8010aba:	6923      	ldr	r3, [r4, #16]
 8010abc:	b94b      	cbnz	r3, 8010ad2 <__swsetup_r+0x9a>
 8010abe:	89a3      	ldrh	r3, [r4, #12]
 8010ac0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ac8:	d003      	beq.n	8010ad2 <__swsetup_r+0x9a>
 8010aca:	4621      	mov	r1, r4
 8010acc:	4630      	mov	r0, r6
 8010ace:	f000 f933 	bl	8010d38 <__smakebuf_r>
 8010ad2:	89a0      	ldrh	r0, [r4, #12]
 8010ad4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010ad8:	f010 0301 	ands.w	r3, r0, #1
 8010adc:	d00a      	beq.n	8010af4 <__swsetup_r+0xbc>
 8010ade:	2300      	movs	r3, #0
 8010ae0:	60a3      	str	r3, [r4, #8]
 8010ae2:	6963      	ldr	r3, [r4, #20]
 8010ae4:	425b      	negs	r3, r3
 8010ae6:	61a3      	str	r3, [r4, #24]
 8010ae8:	6923      	ldr	r3, [r4, #16]
 8010aea:	b943      	cbnz	r3, 8010afe <__swsetup_r+0xc6>
 8010aec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010af0:	d1ba      	bne.n	8010a68 <__swsetup_r+0x30>
 8010af2:	bd70      	pop	{r4, r5, r6, pc}
 8010af4:	0781      	lsls	r1, r0, #30
 8010af6:	bf58      	it	pl
 8010af8:	6963      	ldrpl	r3, [r4, #20]
 8010afa:	60a3      	str	r3, [r4, #8]
 8010afc:	e7f4      	b.n	8010ae8 <__swsetup_r+0xb0>
 8010afe:	2000      	movs	r0, #0
 8010b00:	e7f7      	b.n	8010af2 <__swsetup_r+0xba>
 8010b02:	bf00      	nop
 8010b04:	24000030 	.word	0x24000030
 8010b08:	08013b44 	.word	0x08013b44
 8010b0c:	08013b64 	.word	0x08013b64
 8010b10:	08013b24 	.word	0x08013b24

08010b14 <abort>:
 8010b14:	b508      	push	{r3, lr}
 8010b16:	2006      	movs	r0, #6
 8010b18:	f000 f9c4 	bl	8010ea4 <raise>
 8010b1c:	2001      	movs	r0, #1
 8010b1e:	f7ef ff9d 	bl	8000a5c <_exit>
	...

08010b24 <_close_r>:
 8010b24:	b538      	push	{r3, r4, r5, lr}
 8010b26:	4d06      	ldr	r5, [pc, #24]	; (8010b40 <_close_r+0x1c>)
 8010b28:	2300      	movs	r3, #0
 8010b2a:	4604      	mov	r4, r0
 8010b2c:	4608      	mov	r0, r1
 8010b2e:	602b      	str	r3, [r5, #0]
 8010b30:	f7ef ffd7 	bl	8000ae2 <_close>
 8010b34:	1c43      	adds	r3, r0, #1
 8010b36:	d102      	bne.n	8010b3e <_close_r+0x1a>
 8010b38:	682b      	ldr	r3, [r5, #0]
 8010b3a:	b103      	cbz	r3, 8010b3e <_close_r+0x1a>
 8010b3c:	6023      	str	r3, [r4, #0]
 8010b3e:	bd38      	pop	{r3, r4, r5, pc}
 8010b40:	24003344 	.word	0x24003344

08010b44 <__sflush_r>:
 8010b44:	898a      	ldrh	r2, [r1, #12]
 8010b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b4a:	4605      	mov	r5, r0
 8010b4c:	0710      	lsls	r0, r2, #28
 8010b4e:	460c      	mov	r4, r1
 8010b50:	d458      	bmi.n	8010c04 <__sflush_r+0xc0>
 8010b52:	684b      	ldr	r3, [r1, #4]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	dc05      	bgt.n	8010b64 <__sflush_r+0x20>
 8010b58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	dc02      	bgt.n	8010b64 <__sflush_r+0x20>
 8010b5e:	2000      	movs	r0, #0
 8010b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b66:	2e00      	cmp	r6, #0
 8010b68:	d0f9      	beq.n	8010b5e <__sflush_r+0x1a>
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010b70:	682f      	ldr	r7, [r5, #0]
 8010b72:	602b      	str	r3, [r5, #0]
 8010b74:	d032      	beq.n	8010bdc <__sflush_r+0x98>
 8010b76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010b78:	89a3      	ldrh	r3, [r4, #12]
 8010b7a:	075a      	lsls	r2, r3, #29
 8010b7c:	d505      	bpl.n	8010b8a <__sflush_r+0x46>
 8010b7e:	6863      	ldr	r3, [r4, #4]
 8010b80:	1ac0      	subs	r0, r0, r3
 8010b82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010b84:	b10b      	cbz	r3, 8010b8a <__sflush_r+0x46>
 8010b86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010b88:	1ac0      	subs	r0, r0, r3
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	4602      	mov	r2, r0
 8010b8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b90:	6a21      	ldr	r1, [r4, #32]
 8010b92:	4628      	mov	r0, r5
 8010b94:	47b0      	blx	r6
 8010b96:	1c43      	adds	r3, r0, #1
 8010b98:	89a3      	ldrh	r3, [r4, #12]
 8010b9a:	d106      	bne.n	8010baa <__sflush_r+0x66>
 8010b9c:	6829      	ldr	r1, [r5, #0]
 8010b9e:	291d      	cmp	r1, #29
 8010ba0:	d82c      	bhi.n	8010bfc <__sflush_r+0xb8>
 8010ba2:	4a2a      	ldr	r2, [pc, #168]	; (8010c4c <__sflush_r+0x108>)
 8010ba4:	40ca      	lsrs	r2, r1
 8010ba6:	07d6      	lsls	r6, r2, #31
 8010ba8:	d528      	bpl.n	8010bfc <__sflush_r+0xb8>
 8010baa:	2200      	movs	r2, #0
 8010bac:	6062      	str	r2, [r4, #4]
 8010bae:	04d9      	lsls	r1, r3, #19
 8010bb0:	6922      	ldr	r2, [r4, #16]
 8010bb2:	6022      	str	r2, [r4, #0]
 8010bb4:	d504      	bpl.n	8010bc0 <__sflush_r+0x7c>
 8010bb6:	1c42      	adds	r2, r0, #1
 8010bb8:	d101      	bne.n	8010bbe <__sflush_r+0x7a>
 8010bba:	682b      	ldr	r3, [r5, #0]
 8010bbc:	b903      	cbnz	r3, 8010bc0 <__sflush_r+0x7c>
 8010bbe:	6560      	str	r0, [r4, #84]	; 0x54
 8010bc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010bc2:	602f      	str	r7, [r5, #0]
 8010bc4:	2900      	cmp	r1, #0
 8010bc6:	d0ca      	beq.n	8010b5e <__sflush_r+0x1a>
 8010bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010bcc:	4299      	cmp	r1, r3
 8010bce:	d002      	beq.n	8010bd6 <__sflush_r+0x92>
 8010bd0:	4628      	mov	r0, r5
 8010bd2:	f7ff f94f 	bl	800fe74 <_free_r>
 8010bd6:	2000      	movs	r0, #0
 8010bd8:	6360      	str	r0, [r4, #52]	; 0x34
 8010bda:	e7c1      	b.n	8010b60 <__sflush_r+0x1c>
 8010bdc:	6a21      	ldr	r1, [r4, #32]
 8010bde:	2301      	movs	r3, #1
 8010be0:	4628      	mov	r0, r5
 8010be2:	47b0      	blx	r6
 8010be4:	1c41      	adds	r1, r0, #1
 8010be6:	d1c7      	bne.n	8010b78 <__sflush_r+0x34>
 8010be8:	682b      	ldr	r3, [r5, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d0c4      	beq.n	8010b78 <__sflush_r+0x34>
 8010bee:	2b1d      	cmp	r3, #29
 8010bf0:	d001      	beq.n	8010bf6 <__sflush_r+0xb2>
 8010bf2:	2b16      	cmp	r3, #22
 8010bf4:	d101      	bne.n	8010bfa <__sflush_r+0xb6>
 8010bf6:	602f      	str	r7, [r5, #0]
 8010bf8:	e7b1      	b.n	8010b5e <__sflush_r+0x1a>
 8010bfa:	89a3      	ldrh	r3, [r4, #12]
 8010bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c00:	81a3      	strh	r3, [r4, #12]
 8010c02:	e7ad      	b.n	8010b60 <__sflush_r+0x1c>
 8010c04:	690f      	ldr	r7, [r1, #16]
 8010c06:	2f00      	cmp	r7, #0
 8010c08:	d0a9      	beq.n	8010b5e <__sflush_r+0x1a>
 8010c0a:	0793      	lsls	r3, r2, #30
 8010c0c:	680e      	ldr	r6, [r1, #0]
 8010c0e:	bf08      	it	eq
 8010c10:	694b      	ldreq	r3, [r1, #20]
 8010c12:	600f      	str	r7, [r1, #0]
 8010c14:	bf18      	it	ne
 8010c16:	2300      	movne	r3, #0
 8010c18:	eba6 0807 	sub.w	r8, r6, r7
 8010c1c:	608b      	str	r3, [r1, #8]
 8010c1e:	f1b8 0f00 	cmp.w	r8, #0
 8010c22:	dd9c      	ble.n	8010b5e <__sflush_r+0x1a>
 8010c24:	6a21      	ldr	r1, [r4, #32]
 8010c26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010c28:	4643      	mov	r3, r8
 8010c2a:	463a      	mov	r2, r7
 8010c2c:	4628      	mov	r0, r5
 8010c2e:	47b0      	blx	r6
 8010c30:	2800      	cmp	r0, #0
 8010c32:	dc06      	bgt.n	8010c42 <__sflush_r+0xfe>
 8010c34:	89a3      	ldrh	r3, [r4, #12]
 8010c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c3a:	81a3      	strh	r3, [r4, #12]
 8010c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c40:	e78e      	b.n	8010b60 <__sflush_r+0x1c>
 8010c42:	4407      	add	r7, r0
 8010c44:	eba8 0800 	sub.w	r8, r8, r0
 8010c48:	e7e9      	b.n	8010c1e <__sflush_r+0xda>
 8010c4a:	bf00      	nop
 8010c4c:	20400001 	.word	0x20400001

08010c50 <_fflush_r>:
 8010c50:	b538      	push	{r3, r4, r5, lr}
 8010c52:	690b      	ldr	r3, [r1, #16]
 8010c54:	4605      	mov	r5, r0
 8010c56:	460c      	mov	r4, r1
 8010c58:	b913      	cbnz	r3, 8010c60 <_fflush_r+0x10>
 8010c5a:	2500      	movs	r5, #0
 8010c5c:	4628      	mov	r0, r5
 8010c5e:	bd38      	pop	{r3, r4, r5, pc}
 8010c60:	b118      	cbz	r0, 8010c6a <_fflush_r+0x1a>
 8010c62:	6983      	ldr	r3, [r0, #24]
 8010c64:	b90b      	cbnz	r3, 8010c6a <_fflush_r+0x1a>
 8010c66:	f7ff f84b 	bl	800fd00 <__sinit>
 8010c6a:	4b14      	ldr	r3, [pc, #80]	; (8010cbc <_fflush_r+0x6c>)
 8010c6c:	429c      	cmp	r4, r3
 8010c6e:	d11b      	bne.n	8010ca8 <_fflush_r+0x58>
 8010c70:	686c      	ldr	r4, [r5, #4]
 8010c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d0ef      	beq.n	8010c5a <_fflush_r+0xa>
 8010c7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010c7c:	07d0      	lsls	r0, r2, #31
 8010c7e:	d404      	bmi.n	8010c8a <_fflush_r+0x3a>
 8010c80:	0599      	lsls	r1, r3, #22
 8010c82:	d402      	bmi.n	8010c8a <_fflush_r+0x3a>
 8010c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c86:	f7ff f8eb 	bl	800fe60 <__retarget_lock_acquire_recursive>
 8010c8a:	4628      	mov	r0, r5
 8010c8c:	4621      	mov	r1, r4
 8010c8e:	f7ff ff59 	bl	8010b44 <__sflush_r>
 8010c92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c94:	07da      	lsls	r2, r3, #31
 8010c96:	4605      	mov	r5, r0
 8010c98:	d4e0      	bmi.n	8010c5c <_fflush_r+0xc>
 8010c9a:	89a3      	ldrh	r3, [r4, #12]
 8010c9c:	059b      	lsls	r3, r3, #22
 8010c9e:	d4dd      	bmi.n	8010c5c <_fflush_r+0xc>
 8010ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ca2:	f7ff f8de 	bl	800fe62 <__retarget_lock_release_recursive>
 8010ca6:	e7d9      	b.n	8010c5c <_fflush_r+0xc>
 8010ca8:	4b05      	ldr	r3, [pc, #20]	; (8010cc0 <_fflush_r+0x70>)
 8010caa:	429c      	cmp	r4, r3
 8010cac:	d101      	bne.n	8010cb2 <_fflush_r+0x62>
 8010cae:	68ac      	ldr	r4, [r5, #8]
 8010cb0:	e7df      	b.n	8010c72 <_fflush_r+0x22>
 8010cb2:	4b04      	ldr	r3, [pc, #16]	; (8010cc4 <_fflush_r+0x74>)
 8010cb4:	429c      	cmp	r4, r3
 8010cb6:	bf08      	it	eq
 8010cb8:	68ec      	ldreq	r4, [r5, #12]
 8010cba:	e7da      	b.n	8010c72 <_fflush_r+0x22>
 8010cbc:	08013b44 	.word	0x08013b44
 8010cc0:	08013b64 	.word	0x08013b64
 8010cc4:	08013b24 	.word	0x08013b24

08010cc8 <_lseek_r>:
 8010cc8:	b538      	push	{r3, r4, r5, lr}
 8010cca:	4d07      	ldr	r5, [pc, #28]	; (8010ce8 <_lseek_r+0x20>)
 8010ccc:	4604      	mov	r4, r0
 8010cce:	4608      	mov	r0, r1
 8010cd0:	4611      	mov	r1, r2
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	602a      	str	r2, [r5, #0]
 8010cd6:	461a      	mov	r2, r3
 8010cd8:	f7ef ff2a 	bl	8000b30 <_lseek>
 8010cdc:	1c43      	adds	r3, r0, #1
 8010cde:	d102      	bne.n	8010ce6 <_lseek_r+0x1e>
 8010ce0:	682b      	ldr	r3, [r5, #0]
 8010ce2:	b103      	cbz	r3, 8010ce6 <_lseek_r+0x1e>
 8010ce4:	6023      	str	r3, [r4, #0]
 8010ce6:	bd38      	pop	{r3, r4, r5, pc}
 8010ce8:	24003344 	.word	0x24003344

08010cec <__swhatbuf_r>:
 8010cec:	b570      	push	{r4, r5, r6, lr}
 8010cee:	460e      	mov	r6, r1
 8010cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cf4:	2900      	cmp	r1, #0
 8010cf6:	b096      	sub	sp, #88	; 0x58
 8010cf8:	4614      	mov	r4, r2
 8010cfa:	461d      	mov	r5, r3
 8010cfc:	da08      	bge.n	8010d10 <__swhatbuf_r+0x24>
 8010cfe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010d02:	2200      	movs	r2, #0
 8010d04:	602a      	str	r2, [r5, #0]
 8010d06:	061a      	lsls	r2, r3, #24
 8010d08:	d410      	bmi.n	8010d2c <__swhatbuf_r+0x40>
 8010d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d0e:	e00e      	b.n	8010d2e <__swhatbuf_r+0x42>
 8010d10:	466a      	mov	r2, sp
 8010d12:	f000 f8e3 	bl	8010edc <_fstat_r>
 8010d16:	2800      	cmp	r0, #0
 8010d18:	dbf1      	blt.n	8010cfe <__swhatbuf_r+0x12>
 8010d1a:	9a01      	ldr	r2, [sp, #4]
 8010d1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010d20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010d24:	425a      	negs	r2, r3
 8010d26:	415a      	adcs	r2, r3
 8010d28:	602a      	str	r2, [r5, #0]
 8010d2a:	e7ee      	b.n	8010d0a <__swhatbuf_r+0x1e>
 8010d2c:	2340      	movs	r3, #64	; 0x40
 8010d2e:	2000      	movs	r0, #0
 8010d30:	6023      	str	r3, [r4, #0]
 8010d32:	b016      	add	sp, #88	; 0x58
 8010d34:	bd70      	pop	{r4, r5, r6, pc}
	...

08010d38 <__smakebuf_r>:
 8010d38:	898b      	ldrh	r3, [r1, #12]
 8010d3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010d3c:	079d      	lsls	r5, r3, #30
 8010d3e:	4606      	mov	r6, r0
 8010d40:	460c      	mov	r4, r1
 8010d42:	d507      	bpl.n	8010d54 <__smakebuf_r+0x1c>
 8010d44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010d48:	6023      	str	r3, [r4, #0]
 8010d4a:	6123      	str	r3, [r4, #16]
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	6163      	str	r3, [r4, #20]
 8010d50:	b002      	add	sp, #8
 8010d52:	bd70      	pop	{r4, r5, r6, pc}
 8010d54:	ab01      	add	r3, sp, #4
 8010d56:	466a      	mov	r2, sp
 8010d58:	f7ff ffc8 	bl	8010cec <__swhatbuf_r>
 8010d5c:	9900      	ldr	r1, [sp, #0]
 8010d5e:	4605      	mov	r5, r0
 8010d60:	4630      	mov	r0, r6
 8010d62:	f7ff f8f3 	bl	800ff4c <_malloc_r>
 8010d66:	b948      	cbnz	r0, 8010d7c <__smakebuf_r+0x44>
 8010d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d6c:	059a      	lsls	r2, r3, #22
 8010d6e:	d4ef      	bmi.n	8010d50 <__smakebuf_r+0x18>
 8010d70:	f023 0303 	bic.w	r3, r3, #3
 8010d74:	f043 0302 	orr.w	r3, r3, #2
 8010d78:	81a3      	strh	r3, [r4, #12]
 8010d7a:	e7e3      	b.n	8010d44 <__smakebuf_r+0xc>
 8010d7c:	4b0d      	ldr	r3, [pc, #52]	; (8010db4 <__smakebuf_r+0x7c>)
 8010d7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010d80:	89a3      	ldrh	r3, [r4, #12]
 8010d82:	6020      	str	r0, [r4, #0]
 8010d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d88:	81a3      	strh	r3, [r4, #12]
 8010d8a:	9b00      	ldr	r3, [sp, #0]
 8010d8c:	6163      	str	r3, [r4, #20]
 8010d8e:	9b01      	ldr	r3, [sp, #4]
 8010d90:	6120      	str	r0, [r4, #16]
 8010d92:	b15b      	cbz	r3, 8010dac <__smakebuf_r+0x74>
 8010d94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d98:	4630      	mov	r0, r6
 8010d9a:	f000 f8b1 	bl	8010f00 <_isatty_r>
 8010d9e:	b128      	cbz	r0, 8010dac <__smakebuf_r+0x74>
 8010da0:	89a3      	ldrh	r3, [r4, #12]
 8010da2:	f023 0303 	bic.w	r3, r3, #3
 8010da6:	f043 0301 	orr.w	r3, r3, #1
 8010daa:	81a3      	strh	r3, [r4, #12]
 8010dac:	89a0      	ldrh	r0, [r4, #12]
 8010dae:	4305      	orrs	r5, r0
 8010db0:	81a5      	strh	r5, [r4, #12]
 8010db2:	e7cd      	b.n	8010d50 <__smakebuf_r+0x18>
 8010db4:	0800fc99 	.word	0x0800fc99

08010db8 <__malloc_lock>:
 8010db8:	4801      	ldr	r0, [pc, #4]	; (8010dc0 <__malloc_lock+0x8>)
 8010dba:	f7ff b851 	b.w	800fe60 <__retarget_lock_acquire_recursive>
 8010dbe:	bf00      	nop
 8010dc0:	24003348 	.word	0x24003348

08010dc4 <__malloc_unlock>:
 8010dc4:	4801      	ldr	r0, [pc, #4]	; (8010dcc <__malloc_unlock+0x8>)
 8010dc6:	f7ff b84c 	b.w	800fe62 <__retarget_lock_release_recursive>
 8010dca:	bf00      	nop
 8010dcc:	24003348 	.word	0x24003348

08010dd0 <_realloc_r>:
 8010dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dd4:	4680      	mov	r8, r0
 8010dd6:	4614      	mov	r4, r2
 8010dd8:	460e      	mov	r6, r1
 8010dda:	b921      	cbnz	r1, 8010de6 <_realloc_r+0x16>
 8010ddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010de0:	4611      	mov	r1, r2
 8010de2:	f7ff b8b3 	b.w	800ff4c <_malloc_r>
 8010de6:	b92a      	cbnz	r2, 8010df4 <_realloc_r+0x24>
 8010de8:	f7ff f844 	bl	800fe74 <_free_r>
 8010dec:	4625      	mov	r5, r4
 8010dee:	4628      	mov	r0, r5
 8010df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010df4:	f000 f894 	bl	8010f20 <_malloc_usable_size_r>
 8010df8:	4284      	cmp	r4, r0
 8010dfa:	4607      	mov	r7, r0
 8010dfc:	d802      	bhi.n	8010e04 <_realloc_r+0x34>
 8010dfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010e02:	d812      	bhi.n	8010e2a <_realloc_r+0x5a>
 8010e04:	4621      	mov	r1, r4
 8010e06:	4640      	mov	r0, r8
 8010e08:	f7ff f8a0 	bl	800ff4c <_malloc_r>
 8010e0c:	4605      	mov	r5, r0
 8010e0e:	2800      	cmp	r0, #0
 8010e10:	d0ed      	beq.n	8010dee <_realloc_r+0x1e>
 8010e12:	42bc      	cmp	r4, r7
 8010e14:	4622      	mov	r2, r4
 8010e16:	4631      	mov	r1, r6
 8010e18:	bf28      	it	cs
 8010e1a:	463a      	movcs	r2, r7
 8010e1c:	f7fe fe40 	bl	800faa0 <memcpy>
 8010e20:	4631      	mov	r1, r6
 8010e22:	4640      	mov	r0, r8
 8010e24:	f7ff f826 	bl	800fe74 <_free_r>
 8010e28:	e7e1      	b.n	8010dee <_realloc_r+0x1e>
 8010e2a:	4635      	mov	r5, r6
 8010e2c:	e7df      	b.n	8010dee <_realloc_r+0x1e>
	...

08010e30 <_read_r>:
 8010e30:	b538      	push	{r3, r4, r5, lr}
 8010e32:	4d07      	ldr	r5, [pc, #28]	; (8010e50 <_read_r+0x20>)
 8010e34:	4604      	mov	r4, r0
 8010e36:	4608      	mov	r0, r1
 8010e38:	4611      	mov	r1, r2
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	602a      	str	r2, [r5, #0]
 8010e3e:	461a      	mov	r2, r3
 8010e40:	f7ef fe16 	bl	8000a70 <_read>
 8010e44:	1c43      	adds	r3, r0, #1
 8010e46:	d102      	bne.n	8010e4e <_read_r+0x1e>
 8010e48:	682b      	ldr	r3, [r5, #0]
 8010e4a:	b103      	cbz	r3, 8010e4e <_read_r+0x1e>
 8010e4c:	6023      	str	r3, [r4, #0]
 8010e4e:	bd38      	pop	{r3, r4, r5, pc}
 8010e50:	24003344 	.word	0x24003344

08010e54 <_raise_r>:
 8010e54:	291f      	cmp	r1, #31
 8010e56:	b538      	push	{r3, r4, r5, lr}
 8010e58:	4604      	mov	r4, r0
 8010e5a:	460d      	mov	r5, r1
 8010e5c:	d904      	bls.n	8010e68 <_raise_r+0x14>
 8010e5e:	2316      	movs	r3, #22
 8010e60:	6003      	str	r3, [r0, #0]
 8010e62:	f04f 30ff 	mov.w	r0, #4294967295
 8010e66:	bd38      	pop	{r3, r4, r5, pc}
 8010e68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010e6a:	b112      	cbz	r2, 8010e72 <_raise_r+0x1e>
 8010e6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e70:	b94b      	cbnz	r3, 8010e86 <_raise_r+0x32>
 8010e72:	4620      	mov	r0, r4
 8010e74:	f000 f830 	bl	8010ed8 <_getpid_r>
 8010e78:	462a      	mov	r2, r5
 8010e7a:	4601      	mov	r1, r0
 8010e7c:	4620      	mov	r0, r4
 8010e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e82:	f000 b817 	b.w	8010eb4 <_kill_r>
 8010e86:	2b01      	cmp	r3, #1
 8010e88:	d00a      	beq.n	8010ea0 <_raise_r+0x4c>
 8010e8a:	1c59      	adds	r1, r3, #1
 8010e8c:	d103      	bne.n	8010e96 <_raise_r+0x42>
 8010e8e:	2316      	movs	r3, #22
 8010e90:	6003      	str	r3, [r0, #0]
 8010e92:	2001      	movs	r0, #1
 8010e94:	e7e7      	b.n	8010e66 <_raise_r+0x12>
 8010e96:	2400      	movs	r4, #0
 8010e98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010e9c:	4628      	mov	r0, r5
 8010e9e:	4798      	blx	r3
 8010ea0:	2000      	movs	r0, #0
 8010ea2:	e7e0      	b.n	8010e66 <_raise_r+0x12>

08010ea4 <raise>:
 8010ea4:	4b02      	ldr	r3, [pc, #8]	; (8010eb0 <raise+0xc>)
 8010ea6:	4601      	mov	r1, r0
 8010ea8:	6818      	ldr	r0, [r3, #0]
 8010eaa:	f7ff bfd3 	b.w	8010e54 <_raise_r>
 8010eae:	bf00      	nop
 8010eb0:	24000030 	.word	0x24000030

08010eb4 <_kill_r>:
 8010eb4:	b538      	push	{r3, r4, r5, lr}
 8010eb6:	4d07      	ldr	r5, [pc, #28]	; (8010ed4 <_kill_r+0x20>)
 8010eb8:	2300      	movs	r3, #0
 8010eba:	4604      	mov	r4, r0
 8010ebc:	4608      	mov	r0, r1
 8010ebe:	4611      	mov	r1, r2
 8010ec0:	602b      	str	r3, [r5, #0]
 8010ec2:	f7ef fdb9 	bl	8000a38 <_kill>
 8010ec6:	1c43      	adds	r3, r0, #1
 8010ec8:	d102      	bne.n	8010ed0 <_kill_r+0x1c>
 8010eca:	682b      	ldr	r3, [r5, #0]
 8010ecc:	b103      	cbz	r3, 8010ed0 <_kill_r+0x1c>
 8010ece:	6023      	str	r3, [r4, #0]
 8010ed0:	bd38      	pop	{r3, r4, r5, pc}
 8010ed2:	bf00      	nop
 8010ed4:	24003344 	.word	0x24003344

08010ed8 <_getpid_r>:
 8010ed8:	f7ef bda6 	b.w	8000a28 <_getpid>

08010edc <_fstat_r>:
 8010edc:	b538      	push	{r3, r4, r5, lr}
 8010ede:	4d07      	ldr	r5, [pc, #28]	; (8010efc <_fstat_r+0x20>)
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	4604      	mov	r4, r0
 8010ee4:	4608      	mov	r0, r1
 8010ee6:	4611      	mov	r1, r2
 8010ee8:	602b      	str	r3, [r5, #0]
 8010eea:	f7ef fe06 	bl	8000afa <_fstat>
 8010eee:	1c43      	adds	r3, r0, #1
 8010ef0:	d102      	bne.n	8010ef8 <_fstat_r+0x1c>
 8010ef2:	682b      	ldr	r3, [r5, #0]
 8010ef4:	b103      	cbz	r3, 8010ef8 <_fstat_r+0x1c>
 8010ef6:	6023      	str	r3, [r4, #0]
 8010ef8:	bd38      	pop	{r3, r4, r5, pc}
 8010efa:	bf00      	nop
 8010efc:	24003344 	.word	0x24003344

08010f00 <_isatty_r>:
 8010f00:	b538      	push	{r3, r4, r5, lr}
 8010f02:	4d06      	ldr	r5, [pc, #24]	; (8010f1c <_isatty_r+0x1c>)
 8010f04:	2300      	movs	r3, #0
 8010f06:	4604      	mov	r4, r0
 8010f08:	4608      	mov	r0, r1
 8010f0a:	602b      	str	r3, [r5, #0]
 8010f0c:	f7ef fe05 	bl	8000b1a <_isatty>
 8010f10:	1c43      	adds	r3, r0, #1
 8010f12:	d102      	bne.n	8010f1a <_isatty_r+0x1a>
 8010f14:	682b      	ldr	r3, [r5, #0]
 8010f16:	b103      	cbz	r3, 8010f1a <_isatty_r+0x1a>
 8010f18:	6023      	str	r3, [r4, #0]
 8010f1a:	bd38      	pop	{r3, r4, r5, pc}
 8010f1c:	24003344 	.word	0x24003344

08010f20 <_malloc_usable_size_r>:
 8010f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f24:	1f18      	subs	r0, r3, #4
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	bfbc      	itt	lt
 8010f2a:	580b      	ldrlt	r3, [r1, r0]
 8010f2c:	18c0      	addlt	r0, r0, r3
 8010f2e:	4770      	bx	lr

08010f30 <_init>:
 8010f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f32:	bf00      	nop
 8010f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f36:	bc08      	pop	{r3}
 8010f38:	469e      	mov	lr, r3
 8010f3a:	4770      	bx	lr

08010f3c <_fini>:
 8010f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f3e:	bf00      	nop
 8010f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f42:	bc08      	pop	{r3}
 8010f44:	469e      	mov	lr, r3
 8010f46:	4770      	bx	lr
