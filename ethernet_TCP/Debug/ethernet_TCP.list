
ethernet_TCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000115f0  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c9c  080118c0  080118c0  000218c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0801455c  0801455c  0002455c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08014560  08014560  00024560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  24000000  08014564  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003270  24000094  080145f8  00030094  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24003304  080145f8  00033304  2**0
                  ALLOC
  8 .lwip_sec     00004d83  30000000  30000000  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025b26  00000000  00000000  000300c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000056d2  00000000  00000000  00055be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019c8  00000000  00000000  0005b2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018e8  00000000  00000000  0005cc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f281  00000000  00000000  0005e570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029d9b  00000000  00000000  0009d7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015da85  00000000  00000000  000c758c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00225011  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007480  00000000  00000000  00225064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000094 	.word	0x24000094
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080118a8 	.word	0x080118a8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000098 	.word	0x24000098
 800030c:	080118a8 	.word	0x080118a8

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003b6:	f000 fa55 	bl	8000864 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ba:	4b3c      	ldr	r3, [pc, #240]	; (80004ac <main+0xfc>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d11b      	bne.n	80003fe <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003c6:	f3bf 8f4f 	dsb	sy
}
 80003ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003cc:	f3bf 8f6f 	isb	sy
}
 80003d0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003d2:	4b36      	ldr	r3, [pc, #216]	; (80004ac <main+0xfc>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003da:	f3bf 8f4f 	dsb	sy
}
 80003de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003e0:	f3bf 8f6f 	isb	sy
}
 80003e4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003e6:	4b31      	ldr	r3, [pc, #196]	; (80004ac <main+0xfc>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a30      	ldr	r2, [pc, #192]	; (80004ac <main+0xfc>)
 80003ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003f2:	f3bf 8f4f 	dsb	sy
}
 80003f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003f8:	f3bf 8f6f 	isb	sy
}
 80003fc:	e000      	b.n	8000400 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003fe:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000400:	4b2a      	ldr	r3, [pc, #168]	; (80004ac <main+0xfc>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000408:	2b00      	cmp	r3, #0
 800040a:	d138      	bne.n	800047e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800040c:	4b27      	ldr	r3, [pc, #156]	; (80004ac <main+0xfc>)
 800040e:	2200      	movs	r2, #0
 8000410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000414:	f3bf 8f4f 	dsb	sy
}
 8000418:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800041a:	4b24      	ldr	r3, [pc, #144]	; (80004ac <main+0xfc>)
 800041c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000420:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	0b5b      	lsrs	r3, r3, #13
 8000426:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800042a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	08db      	lsrs	r3, r3, #3
 8000430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000434:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	015a      	lsls	r2, r3, #5
 800043a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800043e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000444:	4919      	ldr	r1, [pc, #100]	; (80004ac <main+0xfc>)
 8000446:	4313      	orrs	r3, r2
 8000448:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	1e5a      	subs	r2, r3, #1
 8000450:	607a      	str	r2, [r7, #4]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d1ef      	bne.n	8000436 <main+0x86>
    } while(sets-- != 0U);
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	1e5a      	subs	r2, r3, #1
 800045a:	60ba      	str	r2, [r7, #8]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d1e5      	bne.n	800042c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000460:	f3bf 8f4f 	dsb	sy
}
 8000464:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <main+0xfc>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a10      	ldr	r2, [pc, #64]	; (80004ac <main+0xfc>)
 800046c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000470:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000472:	f3bf 8f4f 	dsb	sy
}
 8000476:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000478:	f3bf 8f6f 	isb	sy
}
 800047c:	e000      	b.n	8000480 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800047e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000480:	f000 ff8e 	bl	80013a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000484:	f000 f818 	bl	80004b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000488:	f000 f8d8 	bl	800063c <MX_GPIO_Init>
  MX_LWIP_Init();
 800048c:	f004 fd06 	bl	8004e9c <MX_LWIP_Init>
  MX_TIM1_Init();
 8000490:	f000 f880 	bl	8000594 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000494:	4806      	ldr	r0, [pc, #24]	; (80004b0 <main+0x100>)
 8000496:	f004 f83d 	bl	8004514 <HAL_TIM_Base_Start_IT>
  tcp_client_init();
 800049a:	f000 fc49 	bl	8000d30 <tcp_client_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	ethernetif_input(&gnetif);
 800049e:	4805      	ldr	r0, [pc, #20]	; (80004b4 <main+0x104>)
 80004a0:	f004 ff6a 	bl	8005378 <ethernetif_input>

	/* Handle timeouts */
	sys_check_timeouts();
 80004a4:	f00d fa20 	bl	800d8e8 <sys_check_timeouts>
	ethernetif_input(&gnetif);
 80004a8:	e7f9      	b.n	800049e <main+0xee>
 80004aa:	bf00      	nop
 80004ac:	e000ed00 	.word	0xe000ed00
 80004b0:	240000b0 	.word	0x240000b0
 80004b4:	24000110 	.word	0x24000110

080004b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b09c      	sub	sp, #112	; 0x70
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004c2:	224c      	movs	r2, #76	; 0x4c
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f00f ffe2 	bl	8010490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2220      	movs	r2, #32
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f00f ffdc 	bl	8010490 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004d8:	2002      	movs	r0, #2
 80004da:	f003 f87b 	bl	80035d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004de:	2300      	movs	r3, #0
 80004e0:	603b      	str	r3, [r7, #0]
 80004e2:	4b2b      	ldr	r3, [pc, #172]	; (8000590 <SystemClock_Config+0xd8>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	4a2a      	ldr	r2, [pc, #168]	; (8000590 <SystemClock_Config+0xd8>)
 80004e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004ec:	6193      	str	r3, [r2, #24]
 80004ee:	4b28      	ldr	r3, [pc, #160]	; (8000590 <SystemClock_Config+0xd8>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004fa:	bf00      	nop
 80004fc:	4b24      	ldr	r3, [pc, #144]	; (8000590 <SystemClock_Config+0xd8>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000508:	d1f8      	bne.n	80004fc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800050a:	2301      	movs	r3, #1
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800050e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000512:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000514:	2302      	movs	r3, #2
 8000516:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000518:	2302      	movs	r3, #2
 800051a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800051c:	2301      	movs	r3, #1
 800051e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8000520:	2344      	movs	r3, #68	; 0x44
 8000522:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000524:	2301      	movs	r3, #1
 8000526:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000528:	2304      	movs	r3, #4
 800052a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800052c:	2302      	movs	r3, #2
 800052e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000530:	230c      	movs	r3, #12
 8000532:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000534:	2300      	movs	r3, #0
 8000536:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000538:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800053c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000542:	4618      	mov	r0, r3
 8000544:	f003 f880 	bl	8003648 <HAL_RCC_OscConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800054e:	f000 f9dd 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	233f      	movs	r3, #63	; 0x3f
 8000554:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000556:	2303      	movs	r3, #3
 8000558:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800055e:	2308      	movs	r3, #8
 8000560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000562:	2340      	movs	r3, #64	; 0x40
 8000564:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000566:	2340      	movs	r3, #64	; 0x40
 8000568:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800056a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800056e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000570:	2340      	movs	r3, #64	; 0x40
 8000572:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2103      	movs	r1, #3
 8000578:	4618      	mov	r0, r3
 800057a:	f003 fc13 	bl	8003da4 <HAL_RCC_ClockConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000584:	f000 f9c2 	bl	800090c <Error_Handler>
  }
}
 8000588:	bf00      	nop
 800058a:	3770      	adds	r7, #112	; 0x70
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	58024800 	.word	0x58024800

08000594 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800059a:	f107 0310 	add.w	r3, r7, #16
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005b2:	4b20      	ldr	r3, [pc, #128]	; (8000634 <MX_TIM1_Init+0xa0>)
 80005b4:	4a20      	ldr	r2, [pc, #128]	; (8000638 <MX_TIM1_Init+0xa4>)
 80005b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 27499;
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <MX_TIM1_Init+0xa0>)
 80005ba:	f646 326b 	movw	r2, #27499	; 0x6b6b
 80005be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <MX_TIM1_Init+0xa0>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80005c6:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <MX_TIM1_Init+0xa0>)
 80005c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80005cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ce:	4b19      	ldr	r3, [pc, #100]	; (8000634 <MX_TIM1_Init+0xa0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_TIM1_Init+0xa0>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <MX_TIM1_Init+0xa0>)
 80005dc:	2280      	movs	r2, #128	; 0x80
 80005de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005e0:	4814      	ldr	r0, [pc, #80]	; (8000634 <MX_TIM1_Init+0xa0>)
 80005e2:	f003 ff3f 	bl	8004464 <HAL_TIM_Base_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80005ec:	f000 f98e 	bl	800090c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	4619      	mov	r1, r3
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <MX_TIM1_Init+0xa0>)
 80005fe:	f004 f92f 	bl	8004860 <HAL_TIM_ConfigClockSource>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000608:	f000 f980 	bl	800090c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_TIM1_Init+0xa0>)
 800061e:	f004 fb83 	bl	8004d28 <HAL_TIMEx_MasterConfigSynchronization>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000628:	f000 f970 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	240000b0 	.word	0x240000b0
 8000638:	40010000 	.word	0x40010000

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	; 0x30
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000652:	4b7d      	ldr	r3, [pc, #500]	; (8000848 <MX_GPIO_Init+0x20c>)
 8000654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000658:	4a7b      	ldr	r2, [pc, #492]	; (8000848 <MX_GPIO_Init+0x20c>)
 800065a:	f043 0304 	orr.w	r3, r3, #4
 800065e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000662:	4b79      	ldr	r3, [pc, #484]	; (8000848 <MX_GPIO_Init+0x20c>)
 8000664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000668:	f003 0304 	and.w	r3, r3, #4
 800066c:	61bb      	str	r3, [r7, #24]
 800066e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000670:	4b75      	ldr	r3, [pc, #468]	; (8000848 <MX_GPIO_Init+0x20c>)
 8000672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000676:	4a74      	ldr	r2, [pc, #464]	; (8000848 <MX_GPIO_Init+0x20c>)
 8000678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000680:	4b71      	ldr	r3, [pc, #452]	; (8000848 <MX_GPIO_Init+0x20c>)
 8000682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b6e      	ldr	r3, [pc, #440]	; (8000848 <MX_GPIO_Init+0x20c>)
 8000690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000694:	4a6c      	ldr	r2, [pc, #432]	; (8000848 <MX_GPIO_Init+0x20c>)
 8000696:	f043 0301 	orr.w	r3, r3, #1
 800069a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800069e:	4b6a      	ldr	r3, [pc, #424]	; (8000848 <MX_GPIO_Init+0x20c>)
 80006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ac:	4b66      	ldr	r3, [pc, #408]	; (8000848 <MX_GPIO_Init+0x20c>)
 80006ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b2:	4a65      	ldr	r2, [pc, #404]	; (8000848 <MX_GPIO_Init+0x20c>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006bc:	4b62      	ldr	r3, [pc, #392]	; (8000848 <MX_GPIO_Init+0x20c>)
 80006be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ca:	4b5f      	ldr	r3, [pc, #380]	; (8000848 <MX_GPIO_Init+0x20c>)
 80006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d0:	4a5d      	ldr	r2, [pc, #372]	; (8000848 <MX_GPIO_Init+0x20c>)
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006da:	4b5b      	ldr	r3, [pc, #364]	; (8000848 <MX_GPIO_Init+0x20c>)
 80006dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e0:	f003 0308 	and.w	r3, r3, #8
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006e8:	4b57      	ldr	r3, [pc, #348]	; (8000848 <MX_GPIO_Init+0x20c>)
 80006ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ee:	4a56      	ldr	r2, [pc, #344]	; (8000848 <MX_GPIO_Init+0x20c>)
 80006f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f8:	4b53      	ldr	r3, [pc, #332]	; (8000848 <MX_GPIO_Init+0x20c>)
 80006fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000706:	4b50      	ldr	r3, [pc, #320]	; (8000848 <MX_GPIO_Init+0x20c>)
 8000708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070c:	4a4e      	ldr	r2, [pc, #312]	; (8000848 <MX_GPIO_Init+0x20c>)
 800070e:	f043 0310 	orr.w	r3, r3, #16
 8000712:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000716:	4b4c      	ldr	r3, [pc, #304]	; (8000848 <MX_GPIO_Init+0x20c>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071c:	f003 0310 	and.w	r3, r3, #16
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	f244 0101 	movw	r1, #16385	; 0x4001
 800072a:	4848      	ldr	r0, [pc, #288]	; (800084c <MX_GPIO_Init+0x210>)
 800072c:	f002 ff1e 	bl	800356c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000736:	4846      	ldr	r0, [pc, #280]	; (8000850 <MX_GPIO_Init+0x214>)
 8000738:	f002 ff18 	bl	800356c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000742:	4844      	ldr	r0, [pc, #272]	; (8000854 <MX_GPIO_Init+0x218>)
 8000744:	f002 ff12 	bl	800356c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2102      	movs	r1, #2
 800074c:	4842      	ldr	r0, [pc, #264]	; (8000858 <MX_GPIO_Init+0x21c>)
 800074e:	f002 ff0d 	bl	800356c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000752:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4619      	mov	r1, r3
 8000766:	483b      	ldr	r0, [pc, #236]	; (8000854 <MX_GPIO_Init+0x218>)
 8000768:	f002 fd58 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 800076c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	4831      	ldr	r0, [pc, #196]	; (800084c <MX_GPIO_Init+0x210>)
 8000786:	f002 fd49 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800078a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800079c:	2307      	movs	r3, #7
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	482a      	ldr	r0, [pc, #168]	; (8000850 <MX_GPIO_Init+0x214>)
 80007a8:	f002 fd38 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80007ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	4822      	ldr	r0, [pc, #136]	; (8000850 <MX_GPIO_Init+0x214>)
 80007c6:	f002 fd29 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80007ca:	2380      	movs	r3, #128	; 0x80
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	481f      	ldr	r0, [pc, #124]	; (800085c <MX_GPIO_Init+0x220>)
 80007e0:	f002 fd1c 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80007e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80007f6:	230a      	movs	r3, #10
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	4817      	ldr	r0, [pc, #92]	; (8000860 <MX_GPIO_Init+0x224>)
 8000802:	f002 fd0b 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <MX_GPIO_Init+0x218>)
 8000820:	f002 fcfc 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000824:	2302      	movs	r3, #2
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4807      	ldr	r0, [pc, #28]	; (8000858 <MX_GPIO_Init+0x21c>)
 800083c:	f002 fcee 	bl	800321c <HAL_GPIO_Init>

}
 8000840:	bf00      	nop
 8000842:	3730      	adds	r7, #48	; 0x30
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	58024400 	.word	0x58024400
 800084c:	58020400 	.word	0x58020400
 8000850:	58020c00 	.word	0x58020c00
 8000854:	58020800 	.word	0x58020800
 8000858:	58021000 	.word	0x58021000
 800085c:	58021800 	.word	0x58021800
 8000860:	58020000 	.word	0x58020000

08000864 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800086a:	463b      	mov	r3, r7
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000876:	f000 ff49 	bl	800170c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800087a:	2301      	movs	r3, #1
 800087c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800087e:	2300      	movs	r3, #0
 8000880:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x00;
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000886:	231f      	movs	r3, #31
 8000888:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800088a:	2387      	movs	r3, #135	; 0x87
 800088c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800088e:	2300      	movs	r3, #0
 8000890:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000892:	2300      	movs	r3, #0
 8000894:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000896:	2301      	movs	r3, #1
 8000898:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800089a:	2301      	movs	r3, #1
 800089c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008a6:	463b      	mov	r3, r7
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 ff67 	bl	800177c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80008b2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80008b6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 80008b8:	2309      	movs	r3, #9
 80008ba:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80008bc:	2300      	movs	r3, #0
 80008be:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80008c0:	2303      	movs	r3, #3
 80008c2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80008cc:	2301      	movs	r3, #1
 80008ce:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008d0:	463b      	mov	r3, r7
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 ff52 	bl	800177c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80008d8:	2302      	movs	r3, #2
 80008da:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30004000;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <MPU_Config+0xa4>)
 80008de:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80008e0:	230d      	movs	r3, #13
 80008e2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008e8:	2301      	movs	r3, #1
 80008ea:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008f0:	463b      	mov	r3, r7
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 ff42 	bl	800177c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008f8:	2004      	movs	r0, #4
 80008fa:	f000 ff1f 	bl	800173c <HAL_MPU_Enable>

}
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	30004000 	.word	0x30004000

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	e7fe      	b.n	8000914 <Error_Handler+0x8>
	...

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <HAL_MspInit+0x30>)
 8000920:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000924:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_MspInit+0x30>)
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_MspInit+0x30>)
 8000930:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000934:	f003 0302 	and.w	r3, r3, #2
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	58024400 	.word	0x58024400

0800094c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <HAL_TIM_Base_MspInit+0x48>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d116      	bne.n	800098c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_TIM_Base_MspInit+0x4c>)
 8000960:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000964:	4a0c      	ldr	r2, [pc, #48]	; (8000998 <HAL_TIM_Base_MspInit+0x4c>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_TIM_Base_MspInit+0x4c>)
 8000970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	2019      	movs	r0, #25
 8000982:	f000 fe8e 	bl	80016a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000986:	2019      	movs	r0, #25
 8000988:	f000 fea5 	bl	80016d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800098c:	bf00      	nop
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40010000 	.word	0x40010000
 8000998:	58024400 	.word	0x58024400

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e8:	f000 fd4c 	bl	8001484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
  HAL_TIM_PeriodElapsedCallback(&htim1);
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <TIM1_UP_IRQHandler+0x1c>)
 80009f6:	f000 f959 	bl	8000cac <HAL_TIM_PeriodElapsedCallback>
  HAL_GPIO_TogglePin(GPIOC, 10);
 80009fa:	210a      	movs	r1, #10
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <TIM1_UP_IRQHandler+0x20>)
 80009fe:	f002 fdce 	bl	800359e <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a02:	4802      	ldr	r0, [pc, #8]	; (8000a0c <TIM1_UP_IRQHandler+0x1c>)
 8000a04:	f003 fe0c 	bl	8004620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	240000b0 	.word	0x240000b0
 8000a10:	58020800 	.word	0x58020800

08000a14 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <ETH_IRQHandler+0x10>)
 8000a1a:	f001 fa51 	bl	8001ec0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	24000164 	.word	0x24000164

08000a28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
	return 1;
 8000a2c:	2301      	movs	r3, #1
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <_kill>:

int _kill(int pid, int sig)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <_kill+0x20>)
 8000a44:	2216      	movs	r2, #22
 8000a46:	601a      	str	r2, [r3, #0]
	return -1;
 8000a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	240032f4 	.word	0x240032f4

08000a5c <_exit>:

void _exit (int status)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a64:	f04f 31ff 	mov.w	r1, #4294967295
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ffe5 	bl	8000a38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a6e:	e7fe      	b.n	8000a6e <_exit+0x12>

08000a70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	e00a      	b.n	8000a98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a82:	f3af 8000 	nop.w
 8000a86:	4601      	mov	r1, r0
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	b2ca      	uxtb	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbf0      	blt.n	8000a82 <_read+0x12>
	}

return len;
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	e009      	b.n	8000ad0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbf1      	blt.n	8000abc <_write+0x12>
	}
	return len;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <_close>:

int _close(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
	return -1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b0a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_isatty>:

int _isatty(int file)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
	return 1;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b54:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <_sbrk+0x5c>)
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <_sbrk+0x60>)
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <_sbrk+0x64>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <_sbrk+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d205      	bcs.n	8000b88 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <_sbrk+0x6c>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
 8000b86:	e009      	b.n	8000b9c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <_sbrk+0x64>)
 8000b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	371c      	adds	r7, #28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	24050000 	.word	0x24050000
 8000bac:	00000400 	.word	0x00000400
 8000bb0:	240000fc 	.word	0x240000fc
 8000bb4:	24003308 	.word	0x24003308
 8000bb8:	240032f4 	.word	0x240032f4

08000bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b32      	ldr	r3, [pc, #200]	; (8000c8c <SystemInit+0xd0>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a31      	ldr	r2, [pc, #196]	; (8000c8c <SystemInit+0xd0>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bd0:	4b2f      	ldr	r3, [pc, #188]	; (8000c90 <SystemInit+0xd4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 030f 	and.w	r3, r3, #15
 8000bd8:	2b06      	cmp	r3, #6
 8000bda:	d807      	bhi.n	8000bec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bdc:	4b2c      	ldr	r3, [pc, #176]	; (8000c90 <SystemInit+0xd4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f023 030f 	bic.w	r3, r3, #15
 8000be4:	4a2a      	ldr	r2, [pc, #168]	; (8000c90 <SystemInit+0xd4>)
 8000be6:	f043 0307 	orr.w	r3, r3, #7
 8000bea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bec:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <SystemInit+0xd8>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a28      	ldr	r2, [pc, #160]	; (8000c94 <SystemInit+0xd8>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bf8:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <SystemInit+0xd8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bfe:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <SystemInit+0xd8>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4924      	ldr	r1, [pc, #144]	; (8000c94 <SystemInit+0xd8>)
 8000c04:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <SystemInit+0xdc>)
 8000c06:	4013      	ands	r3, r2
 8000c08:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <SystemInit+0xd4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d007      	beq.n	8000c26 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c16:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <SystemInit+0xd4>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f023 030f 	bic.w	r3, r3, #15
 8000c1e:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <SystemInit+0xd4>)
 8000c20:	f043 0307 	orr.w	r3, r3, #7
 8000c24:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c26:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <SystemInit+0xd8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <SystemInit+0xd8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <SystemInit+0xd8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <SystemInit+0xd8>)
 8000c3a:	4a18      	ldr	r2, [pc, #96]	; (8000c9c <SystemInit+0xe0>)
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <SystemInit+0xd8>)
 8000c40:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <SystemInit+0xe4>)
 8000c42:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <SystemInit+0xd8>)
 8000c46:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <SystemInit+0xe8>)
 8000c48:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <SystemInit+0xd8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <SystemInit+0xd8>)
 8000c52:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <SystemInit+0xe8>)
 8000c54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <SystemInit+0xd8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <SystemInit+0xd8>)
 8000c5e:	4a11      	ldr	r2, [pc, #68]	; (8000ca4 <SystemInit+0xe8>)
 8000c60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <SystemInit+0xd8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <SystemInit+0xd8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a09      	ldr	r2, [pc, #36]	; (8000c94 <SystemInit+0xd8>)
 8000c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <SystemInit+0xd8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <SystemInit+0xec>)
 8000c7c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c80:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00
 8000c90:	52002000 	.word	0x52002000
 8000c94:	58024400 	.word	0x58024400
 8000c98:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c9c:	02020200 	.word	0x02020200
 8000ca0:	01ff0000 	.word	0x01ff0000
 8000ca4:	01010280 	.word	0x01010280
 8000ca8:	52004000 	.word	0x52004000

08000cac <HAL_TIM_PeriodElapsedCallback>:
struct tcp_client_struct *esTx = 0;

struct tcp_pcb *pcbTx = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b09d      	sub	sp, #116	; 0x74
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	char buf[100];

	/* Prepare the first message to send to the server */
	int len = sprintf (buf, "QUANTTRONIX TCPclient Message %d\n", counter);
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	4919      	ldr	r1, [pc, #100]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f00f fc44 	bl	801054c <siprintf>
 8000cc4:	66f8      	str	r0, [r7, #108]	; 0x6c

	if (counter !=0)
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d023      	beq.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x6a>
	{
		/* allocate pbuf */
		esTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL);
 8000cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	4a15      	ldr	r2, [pc, #84]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000cd4:	6814      	ldr	r4, [r2, #0]
 8000cd6:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8000cda:	4619      	mov	r1, r3
 8000cdc:	2036      	movs	r0, #54	; 0x36
 8000cde:	f005 ff35 	bl	8006b4c <pbuf_alloc>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	60a3      	str	r3, [r4, #8]


		/* copy data to pbuf */
		pbuf_take(esTx->p, (char*)buf, len);
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000cee:	b292      	uxth	r2, r2
 8000cf0:	f107 0108 	add.w	r1, r7, #8
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f006 fc69 	bl	80075cc <pbuf_take>

		tcp_client_send(pcbTx, esTx);
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d00:	6812      	ldr	r2, [r2, #0]
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 f926 	bl	8000f56 <tcp_client_send>

		pbuf_free(esTx->p);
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f006 f9ff 	bl	8007114 <pbuf_free>
	}

}
 8000d16:	bf00      	nop
 8000d18:	3774      	adds	r7, #116	; 0x74
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd90      	pop	{r4, r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	24000100 	.word	0x24000100
 8000d24:	080118c0 	.word	0x080118c0
 8000d28:	24000104 	.word	0x24000104
 8000d2c:	24000108 	.word	0x24000108

08000d30 <tcp_client_init>:
2. connect to the server
3. start communicating
*/

void tcp_client_init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8000d36:	f008 f83d 	bl	8008db4 <tcp_new>
 8000d3a:	6078      	str	r0, [r7, #4]

	/* 2. Connect to the server */
	ip_addr_t destIPADDR;
	IP_ADDR4(&destIPADDR, 192, 168, 0, 8);
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <tcp_client_init+0x24>)
 8000d3e:	603b      	str	r3, [r7, #0]
	tcp_connect(tpcb, &destIPADDR, 31, tcp_client_connected);
 8000d40:	4639      	mov	r1, r7
 8000d42:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <tcp_client_init+0x28>)
 8000d44:	221f      	movs	r2, #31
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f007 f8fa 	bl	8007f40 <tcp_connect>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	0800a8c0 	.word	0x0800a8c0
 8000d58:	08000d5d 	.word	0x08000d5d

08000d5c <tcp_client_connected>:
/** This callback is called, when the client is connected to the server
 * Here we will initialise few other callbacks
 * and in the end, call the client handle function
  */
static err_t tcp_client_connected(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	4613      	mov	r3, r2
 8000d68:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_client_struct *)mem_malloc(sizeof(struct tcp_client_struct));
 8000d6a:	200c      	movs	r0, #12
 8000d6c:	f005 f95c 	bl	8006028 <mem_malloc>
 8000d70:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d023      	beq.n	8000dc0 <tcp_client_connected+0x64>
  {
    es->state = ES_CONNECTED;
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	68ba      	ldr	r2, [r7, #8]
 8000d82:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	2200      	movs	r2, #0
 8000d88:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000d90:	6939      	ldr	r1, [r7, #16]
 8000d92:	68b8      	ldr	r0, [r7, #8]
 8000d94:	f008 f816 	bl	8008dc4 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_client_recv);
 8000d98:	490f      	ldr	r1, [pc, #60]	; (8000dd8 <tcp_client_connected+0x7c>)
 8000d9a:	68b8      	ldr	r0, [r7, #8]
 8000d9c:	f008 f824 	bl	8008de8 <tcp_recv>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_client_poll, 0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	490e      	ldr	r1, [pc, #56]	; (8000ddc <tcp_client_connected+0x80>)
 8000da4:	68b8      	ldr	r0, [r7, #8]
 8000da6:	f008 f885 	bl	8008eb4 <tcp_poll>


    /* initialize LwIP tcp_sent callback function */
    tcp_sent(newpcb, tcp_client_sent);
 8000daa:	490d      	ldr	r1, [pc, #52]	; (8000de0 <tcp_client_connected+0x84>)
 8000dac:	68b8      	ldr	r0, [r7, #8]
 8000dae:	f008 f83d 	bl	8008e2c <tcp_sent>

    /* handle the TCP data */
    tcp_client_handle(newpcb, es);
 8000db2:	6939      	ldr	r1, [r7, #16]
 8000db4:	68b8      	ldr	r0, [r7, #8]
 8000db6:	f000 f943 	bl	8001040 <tcp_client_handle>

    ret_err = ERR_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	75fb      	strb	r3, [r7, #23]
 8000dbe:	e005      	b.n	8000dcc <tcp_client_connected+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_client_connection_close(newpcb, es);
 8000dc0:	6939      	ldr	r1, [r7, #16]
 8000dc2:	68b8      	ldr	r0, [r7, #8]
 8000dc4:	f000 f915 	bl	8000ff2 <tcp_client_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000dc8:	23ff      	movs	r3, #255	; 0xff
 8000dca:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000dcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	08000de5 	.word	0x08000de5
 8000ddc:	08000ed5 	.word	0x08000ed5
 8000de0:	08000f1d 	.word	0x08000f1d

08000de4 <tcp_client_recv>:

/** This callback is called, when the client receives some data from the server
 * if the data received is valid, we will handle the data in the client handle function
  */
static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
 8000df0:	70fb      	strb	r3, [r7, #3]
  struct tcp_client_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d105      	bne.n	8000e04 <tcp_client_recv+0x20>
 8000df8:	4b33      	ldr	r3, [pc, #204]	; (8000ec8 <tcp_client_recv+0xe4>)
 8000dfa:	22e0      	movs	r2, #224	; 0xe0
 8000dfc:	4933      	ldr	r1, [pc, #204]	; (8000ecc <tcp_client_recv+0xe8>)
 8000dfe:	4834      	ldr	r0, [pc, #208]	; (8000ed0 <tcp_client_recv+0xec>)
 8000e00:	f00f fb4e 	bl	80104a0 <iprintf>

  es = (struct tcp_client_struct *)arg;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	613b      	str	r3, [r7, #16]

  /* if we receive an empty tcp frame from server => close connection */
  if (p == NULL)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10d      	bne.n	8000e2a <tcp_client_recv+0x46>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	2203      	movs	r2, #3
 8000e12:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d103      	bne.n	8000e24 <tcp_client_recv+0x40>
    {
       /* we're done sending, close connection */
       tcp_client_connection_close(tpcb, es);
 8000e1c:	6939      	ldr	r1, [r7, #16]
 8000e1e:	68b8      	ldr	r0, [r7, #8]
 8000e20:	f000 f8e7 	bl	8000ff2 <tcp_client_connection_close>
//      tcp_sent(tpcb, tcp_client_sent);

      /* send remaining data*/
//      tcp_client_send(tpcb, es);
    }
    ret_err = ERR_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	75fb      	strb	r3, [r7, #23]
 8000e28:	e047      	b.n	8000eba <tcp_client_recv+0xd6>
  }
  /* else : a non empty frame was received from server but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000e2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d00b      	beq.n	8000e4a <tcp_client_recv+0x66>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d005      	beq.n	8000e44 <tcp_client_recv+0x60>
    {
      es->p = NULL;
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f006 f968 	bl	8007114 <pbuf_free>
    }
    ret_err = err;
 8000e44:	78fb      	ldrb	r3, [r7, #3]
 8000e46:	75fb      	strb	r3, [r7, #23]
 8000e48:	e037      	b.n	8000eba <tcp_client_recv+0xd6>
  }
  else if(es->state == ES_CONNECTED)
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d112      	bne.n	8000e78 <tcp_client_recv+0x94>
  {
   /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	609a      	str	r2, [r3, #8]
    // tcp_sent has already been initialized in the beginning.
//    /* initialize LwIP tcp_sent callback function */
//    tcp_sent(tpcb, tcp_client_sent);

    /* Acknowledge the received data */
    tcp_recved(tpcb, p->tot_len);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	891b      	ldrh	r3, [r3, #8]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	68b8      	ldr	r0, [r7, #8]
 8000e60:	f006 ffd8 	bl	8007e14 <tcp_recved>

    /* handle the received data */
    tcp_client_handle(tpcb, es);
 8000e64:	6939      	ldr	r1, [r7, #16]
 8000e66:	68b8      	ldr	r0, [r7, #8]
 8000e68:	f000 f8ea 	bl	8001040 <tcp_client_handle>

    pbuf_free(p);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f006 f951 	bl	8007114 <pbuf_free>

    ret_err = ERR_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	75fb      	strb	r3, [r7, #23]
 8000e76:	e020      	b.n	8000eba <tcp_client_recv+0xd6>
  }
  else if(es->state == ES_CLOSING)
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d10e      	bne.n	8000e9e <tcp_client_recv+0xba>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	891b      	ldrh	r3, [r3, #8]
 8000e84:	4619      	mov	r1, r3
 8000e86:	68b8      	ldr	r0, [r7, #8]
 8000e88:	f006 ffc4 	bl	8007e14 <tcp_recved>
    es->p = NULL;
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f006 f93e 	bl	8007114 <pbuf_free>
    ret_err = ERR_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	75fb      	strb	r3, [r7, #23]
 8000e9c:	e00d      	b.n	8000eba <tcp_client_recv+0xd6>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	891b      	ldrh	r3, [r3, #8]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	68b8      	ldr	r0, [r7, #8]
 8000ea6:	f006 ffb5 	bl	8007e14 <tcp_recved>
    es->p = NULL;
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f006 f92f 	bl	8007114 <pbuf_free>
    ret_err = ERR_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000eba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	080118e4 	.word	0x080118e4
 8000ecc:	08011900 	.word	0x08011900
 8000ed0:	0801190c 	.word	0x0801190c

08000ed4 <tcp_client_poll>:


static err_t tcp_client_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_client_struct *es;

  es = (struct tcp_client_struct *)arg;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00e      	beq.n	8000f06 <tcp_client_poll+0x32>
  {
    if (es->p != NULL)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d107      	bne.n	8000f00 <tcp_client_poll+0x2c>
//      tcp_client_send(tpcb, es);
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d103      	bne.n	8000f00 <tcp_client_poll+0x2c>
      {
        /*  close tcp connection */
        tcp_client_connection_close(tpcb, es);
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	6838      	ldr	r0, [r7, #0]
 8000efc:	f000 f879 	bl	8000ff2 <tcp_client_connection_close>
      }
    }
    ret_err = ERR_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	e004      	b.n	8000f10 <tcp_client_poll+0x3c>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8000f06:	6838      	ldr	r0, [r7, #0]
 8000f08:	f006 ff1e 	bl	8007d48 <tcp_abort>
    ret_err = ERR_ABRT;
 8000f0c:	23f3      	movs	r3, #243	; 0xf3
 8000f0e:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <tcp_client_sent>:

/** This callback is called, when the server acknowledges the data sent by the client
 * If there is no more data left to sent, we will simply close the connection
  */
static err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	4613      	mov	r3, r2
 8000f28:	80fb      	strh	r3, [r7, #6]
  struct tcp_client_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_client_struct *)arg;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	2200      	movs	r2, #0
 8000f32:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d107      	bne.n	8000f4c <tcp_client_sent+0x30>
//    tcp_client_send(tpcb, es);
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	d103      	bne.n	8000f4c <tcp_client_sent+0x30>
      tcp_client_connection_close(tpcb, es);
 8000f44:	6979      	ldr	r1, [r7, #20]
 8000f46:	68b8      	ldr	r0, [r7, #8]
 8000f48:	f000 f853 	bl	8000ff2 <tcp_client_connection_close>
  }
  return ERR_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <tcp_client_send>:


/** A function to send the data to the server
  */
static void tcp_client_send(struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8000f64:	e031      	b.n	8000fca <tcp_client_send+0x74>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	6859      	ldr	r1, [r3, #4]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	895a      	ldrh	r2, [r3, #10]
 8000f74:	2301      	movs	r3, #1
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f00a fe4e 	bl	800bc18 <tcp_write>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8000f80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d118      	bne.n	8000fba <tcp_client_send+0x64>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	895b      	ldrh	r3, [r3, #10]
 8000f8c:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d004      	beq.n	8000fa8 <tcp_client_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f006 f956 	bl	8007254 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8000fa8:	6938      	ldr	r0, [r7, #16]
 8000faa:	f006 f8b3 	bl	8007114 <pbuf_free>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8000fb2:	7b7b      	ldrb	r3, [r7, #13]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0f7      	beq.n	8000fa8 <tcp_client_send+0x52>
 8000fb8:	e007      	b.n	8000fca <tcp_client_send+0x74>
     /* we can read more data now */
//     tcp_recved(tpcb, plen);
   }
   else if(wr_err == ERR_MEM)
 8000fba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc2:	d102      	bne.n	8000fca <tcp_client_send+0x74>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000fca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10b      	bne.n	8000fea <tcp_client_send+0x94>
         (es->p != NULL) &&
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d007      	beq.n	8000fea <tcp_client_send+0x94>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	895a      	ldrh	r2, [r3, #10]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d9bd      	bls.n	8000f66 <tcp_client_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <tcp_client_connection_close>:


static void tcp_client_connection_close(struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f007 fee0 	bl	8008dc4 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8001004:	2100      	movs	r1, #0
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f007 ff10 	bl	8008e2c <tcp_sent>
  tcp_recv(tpcb, NULL);
 800100c:	2100      	movs	r1, #0
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f007 feea 	bl	8008de8 <tcp_recv>
  tcp_err(tpcb, NULL);
 8001014:	2100      	movs	r1, #0
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f007 ff2a 	bl	8008e70 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	2100      	movs	r1, #0
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f007 ff47 	bl	8008eb4 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d002      	beq.n	8001032 <tcp_client_connection_close+0x40>
  {
    mem_free(es);
 800102c:	6838      	ldr	r0, [r7, #0]
 800102e:	f004 fe95 	bl	8005d5c <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f006 fd9e 	bl	8007b74 <tcp_close>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <tcp_client_handle>:

/* Handle the incoming TCP Data */

static void tcp_client_handle (struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	60fb      	str	r3, [r7, #12]
	uint16_t inPort = tpcb->remote_port;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	8b1b      	ldrh	r3, [r3, #24]
 8001054:	82fb      	strh	r3, [r7, #22]

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	4618      	mov	r0, r3
 800105c:	f00e fa18 	bl	800f490 <ip4addr_ntoa>
 8001060:	6138      	str	r0, [r7, #16]

//	esTx->state = es->state;
//	esTx->pcb = es->pcb;
//	esTx->p = es->p;

	esTx = es;
 8001062:	4a07      	ldr	r2, [pc, #28]	; (8001080 <tcp_client_handle+0x40>)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
 8001068:	4a06      	ldr	r2, [pc, #24]	; (8001084 <tcp_client_handle+0x44>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]

	counter++;
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <tcp_client_handle+0x48>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	4a04      	ldr	r2, [pc, #16]	; (8001088 <tcp_client_handle+0x48>)
 8001076:	6013      	str	r3, [r2, #0]

}
 8001078:	bf00      	nop
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	24000104 	.word	0x24000104
 8001084:	24000108 	.word	0x24000108
 8001088:	24000100 	.word	0x24000100

0800108c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800108c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001090:	f7ff fd94 	bl	8000bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001096:	490d      	ldr	r1, [pc, #52]	; (80010cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001098:	4a0d      	ldr	r2, [pc, #52]	; (80010d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800109c:	e002      	b.n	80010a4 <LoopCopyDataInit>

0800109e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a2:	3304      	adds	r3, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a8:	d3f9      	bcc.n	800109e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010ac:	4c0a      	ldr	r4, [pc, #40]	; (80010d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b0:	e001      	b.n	80010b6 <LoopFillZerobss>

080010b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b4:	3204      	adds	r2, #4

080010b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b8:	d3fb      	bcc.n	80010b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ba:	f00f f98d 	bl	80103d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010be:	f7ff f977 	bl	80003b0 <main>
  bx  lr
 80010c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010c4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80010c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010cc:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 80010d0:	08014564 	.word	0x08014564
  ldr r2, =_sbss
 80010d4:	24000094 	.word	0x24000094
  ldr r4, =_ebss
 80010d8:	24003304 	.word	0x24003304

080010dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC3_IRQHandler>

080010de <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d00b      	beq.n	8001106 <LAN8742_RegisterBusIO+0x28>
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d007      	beq.n	8001106 <LAN8742_RegisterBusIO+0x28>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <LAN8742_RegisterBusIO+0x28>
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d102      	bne.n	800110c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e014      	b.n	8001136 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68da      	ldr	r2, [r3, #12]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	691a      	ldr	r2, [r3, #16]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d17c      	bne.n	800125c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d002      	beq.n	8001170 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2220      	movs	r2, #32
 8001174:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	e01c      	b.n	80011b6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	f107 0208 	add.w	r2, r7, #8
 8001184:	2112      	movs	r1, #18
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	4798      	blx	r3
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	da03      	bge.n	8001198 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001190:	f06f 0304 	mvn.w	r3, #4
 8001194:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001196:	e00b      	b.n	80011b0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	f003 031f 	and.w	r3, r3, #31
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d105      	bne.n	80011b0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
         break;
 80011ae:	e005      	b.n	80011bc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	3301      	adds	r3, #1
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	2b1f      	cmp	r3, #31
 80011ba:	d9df      	bls.n	800117c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b1f      	cmp	r3, #31
 80011c2:	d902      	bls.n	80011ca <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80011c4:	f06f 0302 	mvn.w	r3, #2
 80011c8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d145      	bne.n	800125c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	6810      	ldr	r0, [r2, #0]
 80011d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011dc:	2100      	movs	r1, #0
 80011de:	4798      	blx	r3
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db37      	blt.n	8001256 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	6810      	ldr	r0, [r2, #0]
 80011ee:	f107 0208 	add.w	r2, r7, #8
 80011f2:	2100      	movs	r1, #0
 80011f4:	4798      	blx	r3
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db28      	blt.n	800124e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4798      	blx	r3
 8001202:	4603      	mov	r3, r0
 8001204:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001206:	e01c      	b.n	8001242 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4798      	blx	r3
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800121a:	d80e      	bhi.n	800123a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6810      	ldr	r0, [r2, #0]
 8001224:	f107 0208 	add.w	r2, r7, #8
 8001228:	2100      	movs	r1, #0
 800122a:	4798      	blx	r3
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	da07      	bge.n	8001242 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001232:	f06f 0304 	mvn.w	r3, #4
 8001236:	613b      	str	r3, [r7, #16]
                 break;
 8001238:	e010      	b.n	800125c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800123a:	f06f 0301 	mvn.w	r3, #1
 800123e:	613b      	str	r3, [r7, #16]
               break;
 8001240:	e00c      	b.n	800125c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1dd      	bne.n	8001208 <LAN8742_Init+0xc6>
 800124c:	e006      	b.n	800125c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800124e:	f06f 0304 	mvn.w	r3, #4
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	e002      	b.n	800125c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001256:	f06f 0303 	mvn.w	r3, #3
 800125a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d112      	bne.n	8001288 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4798      	blx	r3
 8001268:	4603      	mov	r3, r0
 800126a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800126c:	bf00      	nop
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	4798      	blx	r3
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001280:	d9f5      	bls.n	800126e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001288:	693b      	ldr	r3, [r7, #16]
 }
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6810      	ldr	r0, [r2, #0]
 80012a6:	f107 020c 	add.w	r2, r7, #12
 80012aa:	2101      	movs	r1, #1
 80012ac:	4798      	blx	r3
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	da02      	bge.n	80012ba <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012b4:	f06f 0304 	mvn.w	r3, #4
 80012b8:	e06e      	b.n	8001398 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	6810      	ldr	r0, [r2, #0]
 80012c2:	f107 020c 	add.w	r2, r7, #12
 80012c6:	2101      	movs	r1, #1
 80012c8:	4798      	blx	r3
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	da02      	bge.n	80012d6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012d0:	f06f 0304 	mvn.w	r3, #4
 80012d4:	e060      	b.n	8001398 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80012e0:	2301      	movs	r3, #1
 80012e2:	e059      	b.n	8001398 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	6810      	ldr	r0, [r2, #0]
 80012ec:	f107 020c 	add.w	r2, r7, #12
 80012f0:	2100      	movs	r1, #0
 80012f2:	4798      	blx	r3
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	da02      	bge.n	8001300 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012fa:	f06f 0304 	mvn.w	r3, #4
 80012fe:	e04b      	b.n	8001398 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d11b      	bne.n	8001342 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d006      	beq.n	8001322 <LAN8742_GetLinkState+0x90>
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800131e:	2302      	movs	r3, #2
 8001320:	e03a      	b.n	8001398 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800132c:	2303      	movs	r3, #3
 800132e:	e033      	b.n	8001398 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800133a:	2304      	movs	r3, #4
 800133c:	e02c      	b.n	8001398 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800133e:	2305      	movs	r3, #5
 8001340:	e02a      	b.n	8001398 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6810      	ldr	r0, [r2, #0]
 800134a:	f107 020c 	add.w	r2, r7, #12
 800134e:	211f      	movs	r1, #31
 8001350:	4798      	blx	r3
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	da02      	bge.n	800135e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001358:	f06f 0304 	mvn.w	r3, #4
 800135c:	e01c      	b.n	8001398 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001368:	2306      	movs	r3, #6
 800136a:	e015      	b.n	8001398 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 031c 	and.w	r3, r3, #28
 8001372:	2b18      	cmp	r3, #24
 8001374:	d101      	bne.n	800137a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001376:	2302      	movs	r3, #2
 8001378:	e00e      	b.n	8001398 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f003 031c 	and.w	r3, r3, #28
 8001380:	2b08      	cmp	r3, #8
 8001382:	d101      	bne.n	8001388 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001384:	2303      	movs	r3, #3
 8001386:	e007      	b.n	8001398 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 031c 	and.w	r3, r3, #28
 800138e:	2b14      	cmp	r3, #20
 8001390:	d101      	bne.n	8001396 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001392:	2304      	movs	r3, #4
 8001394:	e000      	b.n	8001398 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001396:	2305      	movs	r3, #5
    }				
  }
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a6:	2003      	movs	r0, #3
 80013a8:	f000 f970 	bl	800168c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013ac:	f002 feb0 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_Init+0x68>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	0a1b      	lsrs	r3, r3, #8
 80013b8:	f003 030f 	and.w	r3, r3, #15
 80013bc:	4913      	ldr	r1, [pc, #76]	; (800140c <HAL_Init+0x6c>)
 80013be:	5ccb      	ldrb	r3, [r1, r3]
 80013c0:	f003 031f 	and.w	r3, r3, #31
 80013c4:	fa22 f303 	lsr.w	r3, r2, r3
 80013c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_Init+0x68>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	4a0e      	ldr	r2, [pc, #56]	; (800140c <HAL_Init+0x6c>)
 80013d4:	5cd3      	ldrb	r3, [r2, r3]
 80013d6:	f003 031f 	and.w	r3, r3, #31
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
 80013e0:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <HAL_Init+0x70>)
 80013e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013e4:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <HAL_Init+0x74>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ea:	2000      	movs	r0, #0
 80013ec:	f000 f814 	bl	8001418 <HAL_InitTick>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e002      	b.n	8001400 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013fa:	f7ff fa8d 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	58024400 	.word	0x58024400
 800140c:	08014314 	.word	0x08014314
 8001410:	24000004 	.word	0x24000004
 8001414:	24000000 	.word	0x24000000

08001418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_InitTick+0x60>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e021      	b.n	8001470 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_InitTick+0x64>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_InitTick+0x60>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4619      	mov	r1, r3
 8001436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143a:	fbb3 f3f1 	udiv	r3, r3, r1
 800143e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f955 	bl	80016f2 <HAL_SYSTICK_Config>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e00e      	b.n	8001470 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b0f      	cmp	r3, #15
 8001456:	d80a      	bhi.n	800146e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001458:	2200      	movs	r2, #0
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f000 f91f 	bl	80016a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <HAL_InitTick+0x68>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	e000      	b.n	8001470 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	2400000c 	.word	0x2400000c
 800147c:	24000000 	.word	0x24000000
 8001480:	24000008 	.word	0x24000008

08001484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_IncTick+0x20>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_IncTick+0x24>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4413      	add	r3, r2
 8001494:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <HAL_IncTick+0x24>)
 8001496:	6013      	str	r3, [r2, #0]
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	2400000c 	.word	0x2400000c
 80014a8:	2400010c 	.word	0x2400010c

080014ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return uwTick;
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <HAL_GetTick+0x14>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	2400010c 	.word	0x2400010c

080014c4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80014d4:	4904      	ldr	r1, [pc, #16]	; (80014e8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4313      	orrs	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	58000400 	.word	0x58000400

080014ec <__NVIC_SetPriorityGrouping>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <__NVIC_SetPriorityGrouping+0x40>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001508:	4013      	ands	r3, r2
 800150a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 8001516:	4313      	orrs	r3, r2
 8001518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151a:	4a04      	ldr	r2, [pc, #16]	; (800152c <__NVIC_SetPriorityGrouping+0x40>)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	60d3      	str	r3, [r2, #12]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00
 8001530:	05fa0000 	.word	0x05fa0000

08001534 <__NVIC_GetPriorityGrouping>:
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <__NVIC_GetPriorityGrouping+0x18>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	f003 0307 	and.w	r3, r3, #7
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_EnableIRQ>:
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800155a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155e:	2b00      	cmp	r3, #0
 8001560:	db0b      	blt.n	800157a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	f003 021f 	and.w	r2, r3, #31
 8001568:	4907      	ldr	r1, [pc, #28]	; (8001588 <__NVIC_EnableIRQ+0x38>)
 800156a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	2001      	movs	r0, #1
 8001572:	fa00 f202 	lsl.w	r2, r0, r2
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000e100 	.word	0xe000e100

0800158c <__NVIC_SetPriority>:
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001598:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db0a      	blt.n	80015b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	490c      	ldr	r1, [pc, #48]	; (80015d8 <__NVIC_SetPriority+0x4c>)
 80015a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015aa:	0112      	lsls	r2, r2, #4
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	440b      	add	r3, r1
 80015b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015b4:	e00a      	b.n	80015cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4908      	ldr	r1, [pc, #32]	; (80015dc <__NVIC_SetPriority+0x50>)
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	3b04      	subs	r3, #4
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	440b      	add	r3, r1
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <NVIC_EncodePriority>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f1c3 0307 	rsb	r3, r3, #7
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	bf28      	it	cs
 80015fe:	2304      	movcs	r3, #4
 8001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3304      	adds	r3, #4
 8001606:	2b06      	cmp	r3, #6
 8001608:	d902      	bls.n	8001610 <NVIC_EncodePriority+0x30>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3b03      	subs	r3, #3
 800160e:	e000      	b.n	8001612 <NVIC_EncodePriority+0x32>
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	f04f 32ff 	mov.w	r2, #4294967295
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	401a      	ands	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43d9      	mvns	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	4313      	orrs	r3, r2
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	; 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001658:	d301      	bcc.n	800165e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165a:	2301      	movs	r3, #1
 800165c:	e00f      	b.n	800167e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <SysTick_Config+0x40>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001666:	210f      	movs	r1, #15
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f7ff ff8e 	bl	800158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <SysTick_Config+0x40>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <SysTick_Config+0x40>)
 8001678:	2207      	movs	r2, #7
 800167a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	e000e010 	.word	0xe000e010

0800168c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff29 	bl	80014ec <__NVIC_SetPriorityGrouping>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b0:	f7ff ff40 	bl	8001534 <__NVIC_GetPriorityGrouping>
 80016b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	6978      	ldr	r0, [r7, #20]
 80016bc:	f7ff ff90 	bl	80015e0 <NVIC_EncodePriority>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff5f 	bl	800158c <__NVIC_SetPriority>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff33 	bl	8001550 <__NVIC_EnableIRQ>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffa4 	bl	8001648 <SysTick_Config>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001710:	f3bf 8f5f 	dmb	sy
}
 8001714:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <HAL_MPU_Disable+0x28>)
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	4a06      	ldr	r2, [pc, #24]	; (8001734 <HAL_MPU_Disable+0x28>)
 800171c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001720:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_MPU_Disable+0x2c>)
 8001724:	2200      	movs	r2, #0
 8001726:	605a      	str	r2, [r3, #4]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00
 8001738:	e000ed90 	.word	0xe000ed90

0800173c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001744:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <HAL_MPU_Enable+0x38>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_MPU_Enable+0x3c>)
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	4a09      	ldr	r2, [pc, #36]	; (8001778 <HAL_MPU_Enable+0x3c>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800175a:	f3bf 8f4f 	dsb	sy
}
 800175e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001760:	f3bf 8f6f 	isb	sy
}
 8001764:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed90 	.word	0xe000ed90
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	785a      	ldrb	r2, [r3, #1]
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <HAL_MPU_ConfigRegion+0x84>)
 800178a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d029      	beq.n	80017e8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001794:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <HAL_MPU_ConfigRegion+0x84>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7b1b      	ldrb	r3, [r3, #12]
 80017a0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7adb      	ldrb	r3, [r3, #11]
 80017a6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7a9b      	ldrb	r3, [r3, #10]
 80017ae:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7b5b      	ldrb	r3, [r3, #13]
 80017b6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7b9b      	ldrb	r3, [r3, #14]
 80017be:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7bdb      	ldrb	r3, [r3, #15]
 80017c6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7a5b      	ldrb	r3, [r3, #9]
 80017ce:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7a1b      	ldrb	r3, [r3, #8]
 80017d6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017d8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	7812      	ldrb	r2, [r2, #0]
 80017de:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017e0:	4a07      	ldr	r2, [pc, #28]	; (8001800 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017e2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017e4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80017e6:	e005      	b.n	80017f4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <HAL_MPU_ConfigRegion+0x84>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <HAL_MPU_ConfigRegion+0x84>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed90 	.word	0xe000ed90

08001804 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e0cf      	b.n	80019b6 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800181c:	2b00      	cmp	r3, #0
 800181e:	d106      	bne.n	800182e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2223      	movs	r2, #35	; 0x23
 8001824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f003 fe15 	bl	8005458 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182e:	4b64      	ldr	r3, [pc, #400]	; (80019c0 <HAL_ETH_Init+0x1bc>)
 8001830:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001834:	4a62      	ldr	r2, [pc, #392]	; (80019c0 <HAL_ETH_Init+0x1bc>)
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800183e:	4b60      	ldr	r3, [pc, #384]	; (80019c0 <HAL_ETH_Init+0x1bc>)
 8001840:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7a1b      	ldrb	r3, [r3, #8]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d103      	bne.n	800185c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff fe35 	bl	80014c4 <HAL_SYSCFG_ETHInterfaceSelect>
 800185a:	e003      	b.n	8001864 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800185c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001860:	f7ff fe30 	bl	80014c4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001864:	4b57      	ldr	r3, [pc, #348]	; (80019c4 <HAL_ETH_Init+0x1c0>)
 8001866:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800187e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001880:	f7ff fe14 	bl	80014ac <HAL_GetTick>
 8001884:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001886:	e011      	b.n	80018ac <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001888:	f7ff fe10 	bl	80014ac <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001896:	d909      	bls.n	80018ac <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2204      	movs	r2, #4
 800189c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	22e0      	movs	r2, #224	; 0xe0
 80018a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e084      	b.n	80019b6 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1e4      	bne.n	8001888 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 fee0 	bl	8002684 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80018c4:	f002 fd9e 	bl	8004404 <HAL_RCC_GetHCLKFreq>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4a3f      	ldr	r2, [pc, #252]	; (80019c8 <HAL_ETH_Init+0x1c4>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	0c9a      	lsrs	r2, r3, #18
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	3a01      	subs	r2, #1
 80018d8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f001 f8cb 	bl	8002a78 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80018ee:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018fe:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d009      	beq.n	8001922 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	22e0      	movs	r2, #224	; 0xe0
 800191a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e049      	b.n	80019b6 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800192a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800192e:	4b27      	ldr	r3, [pc, #156]	; (80019cc <HAL_ETH_Init+0x1c8>)
 8001930:	4013      	ands	r3, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6952      	ldr	r2, [r2, #20]
 8001936:	0051      	lsls	r1, r2, #1
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	430b      	orrs	r3, r1
 800193e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001942:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f001 f933 	bl	8002bb2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f001 f979 	bl	8002c44 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	3305      	adds	r3, #5
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	021a      	lsls	r2, r3, #8
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	3304      	adds	r3, #4
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	3303      	adds	r3, #3
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	061a      	lsls	r2, r3, #24
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	3302      	adds	r3, #2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	041b      	lsls	r3, r3, #16
 8001984:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	3301      	adds	r3, #1
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001990:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800199e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2210      	movs	r2, #16
 80019b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	58024400 	.word	0x58024400
 80019c4:	58000400 	.word	0x58000400
 80019c8:	431bde83 	.word	0x431bde83
 80019cc:	ffff8001 	.word	0xffff8001

080019d0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019de:	2b10      	cmp	r3, #16
 80019e0:	d153      	bne.n	8001a8a <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2223      	movs	r2, #35	; 0x23
 80019e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2204      	movs	r2, #4
 80019ee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f9f6 	bl	8001de2 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f042 0202 	orr.w	r2, r2, #2
 8001a04:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 0201 	orr.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a32:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a42:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a5e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a6a:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6812      	ldr	r2, [r2, #0]
 8001a72:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001a76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a7a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2223      	movs	r2, #35	; 0x23
 8001a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e000      	b.n	8001a8c <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
  }
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aa2:	2b23      	cmp	r3, #35	; 0x23
 8001aa4:	d13f      	bne.n	8001b26 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2223      	movs	r2, #35	; 0x23
 8001aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ac6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ae2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0201 	bic.w	r2, r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0201 	orr.w	r2, r2, #1
 8001b06:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0202 	bic.w	r2, r2, #2
 8001b18:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e000      	b.n	8001b28 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
  }
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b4c:	f043 0201 	orr.w	r2, r3, #1
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e07f      	b.n	8001c5a <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b60:	2b23      	cmp	r3, #35	; 0x23
 8001b62:	d179      	bne.n	8001c58 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001b64:	2200      	movs	r2, #0
 8001b66:	68b9      	ldr	r1, [r7, #8]
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f001 f8c9 	bl	8002d00 <ETH_Prepare_Tx_Descriptors>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d009      	beq.n	8001b88 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7a:	f043 0202 	orr.w	r2, r3, #2
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e068      	b.n	8001c5a <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8001b88:	f3bf 8f4f 	dsb	sy
}
 8001b8c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	3206      	adds	r2, #6
 8001b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b9a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d904      	bls.n	8001bb8 <HAL_ETH_Transmit+0x84>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb2:	1f1a      	subs	r2, r3, #4
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	3106      	adds	r1, #6
 8001bc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001bc8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bcc:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 8001bd0:	f7ff fc6c 	bl	80014ac <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001bd6:	e039      	b.n	8001c4c <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d012      	beq.n	8001c12 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf2:	f043 0208 	orr.w	r2, r3, #8
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c04:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e023      	b.n	8001c5a <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c18:	d018      	beq.n	8001c4c <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c1a:	f7ff fc47 	bl	80014ac <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d302      	bcc.n	8001c30 <HAL_ETH_Transmit+0xfc>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10d      	bne.n	8001c4c <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c36:	f043 0204 	orr.w	r2, r3, #4
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001c46:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e006      	b.n	8001c5a <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	dbc1      	blt.n	8001bd8 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	e000      	b.n	8001c5a <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
  }
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b088      	sub	sp, #32
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c80:	f043 0201 	orr.w	r2, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e0a5      	b.n	8001dda <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c94:	2b23      	cmp	r3, #35	; 0x23
 8001c96:	d001      	beq.n	8001c9c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e09e      	b.n	8001dda <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	3212      	adds	r2, #18
 8001ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cac:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cb2:	f1c3 0304 	rsb	r3, r3, #4
 8001cb6:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001cb8:	e067      	b.n	8001d8a <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d007      	beq.n	8001cd6 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d103      	bne.n	8001cea <HAL_ETH_ReadData+0x88>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d03d      	beq.n	8001d66 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d005      	beq.n	8001d02 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00d      	beq.n	8001d30 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001d40:	461a      	mov	r2, r3
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	f003 fd67 	bl	8005818 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	441a      	add	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	61fb      	str	r3, [r7, #28]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d902      	bls.n	8001d78 <HAL_ETH_ReadData+0x116>
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3b04      	subs	r3, #4
 8001d76:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69fa      	ldr	r2, [r7, #28]
 8001d7c:	3212      	adds	r2, #18
 8001d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d82:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	3301      	adds	r3, #1
 8001d88:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	db06      	blt.n	8001da0 <HAL_ETH_ReadData+0x13e>
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d202      	bcs.n	8001da0 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d08c      	beq.n	8001cba <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	441a      	add	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f814 	bl	8001de2 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69fa      	ldr	r2, [r7, #28]
 8001dbe:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d108      	bne.n	8001dd8 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e000      	b.n	8001dda <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3720      	adds	r7, #32
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b088      	sub	sp, #32
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001dee:	2301      	movs	r3, #1
 8001df0:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001df6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	3212      	adds	r2, #18
 8001dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e02:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e08:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001e0a:	e03b      	b.n	8001e84 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d112      	bne.n	8001e3a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 fccd 	bl	80057b8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d102      	bne.n	8001e2a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	74fb      	strb	r3, [r7, #19]
 8001e28:	e007      	b.n	8001e3a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	461a      	mov	r2, r3
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001e3a:	7cfb      	ldrb	r3, [r7, #19]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d021      	beq.n	8001e84 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001e40:	f3bf 8f5f 	dmb	sy
}
 8001e44:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d004      	beq.n	8001e58 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	e003      	b.n	8001e60 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001e5e:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	3301      	adds	r3, #1
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d902      	bls.n	8001e72 <ETH_UpdateDescriptor+0x90>
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	3b04      	subs	r3, #4
 8001e70:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	3212      	adds	r2, #18
 8001e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e7c:	617b      	str	r3, [r7, #20]
      desccount--;
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <ETH_UpdateDescriptor+0xae>
 8001e8a:	7cfb      	ldrb	r3, [r7, #19]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1bd      	bne.n	8001e0c <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d00d      	beq.n	8001eb6 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	3720      	adds	r7, #32
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed8:	2b40      	cmp	r3, #64	; 0x40
 8001eda:	d115      	bne.n	8001f08 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eec:	2b40      	cmp	r3, #64	; 0x40
 8001eee:	d10b      	bne.n	8001f08 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef8:	461a      	mov	r2, r3
 8001efa:	f248 0340 	movw	r3, #32832	; 0x8040
 8001efe:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f8f6 	bl	80020f4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f10:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d115      	bne.n	8001f48 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f24:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d10b      	bne.n	8001f48 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f248 0301 	movw	r3, #32769	; 0x8001
 8001f3e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8cc 	bl	80020e0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f50:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f5c:	d153      	bne.n	8002006 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f66:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f72:	d148      	bne.n	8002006 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7a:	f043 0208 	orr.w	r2, r3, #8
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f8c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f98:	d11e      	bne.n	8001fd8 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa2:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001fa6:	f241 1302 	movw	r3, #4354	; 0x1102
 8001faa:	4013      	ands	r3, r2
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fba:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fca:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	22e0      	movs	r2, #224	; 0xe0
 8001fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001fd6:	e013      	b.n	8002000 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001fe4:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8001ffc:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f881 	bl	8002108 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800200e:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d104      	bne.n	8002024 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002020:	2b00      	cmp	r3, #0
 8002022:	d019      	beq.n	8002058 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202a:	f043 0210 	orr.w	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	22e0      	movs	r2, #224	; 0xe0
 8002046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f85c 	bl	8002108 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002060:	f003 0310 	and.w	r3, r3, #16
 8002064:	2b10      	cmp	r3, #16
 8002066:	d10f      	bne.n	8002088 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002070:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f84e 	bl	800211c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b20      	cmp	r3, #32
 8002096:	d10f      	bne.n	80020b8 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020a0:	f003 020f 	and.w	r2, r3, #15
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f840 	bl	8002130 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <HAL_ETH_IRQHandler+0x21c>)
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <HAL_ETH_IRQHandler+0x21c>)
 80020c6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f839 	bl	8002144 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	58000080 	.word	0x58000080

080020e0 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e03e      	b.n	80021f8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002182:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	055b      	lsls	r3, r3, #21
 800218e:	4313      	orrs	r3, r2
 8002190:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	041b      	lsls	r3, r3, #16
 800219c:	4313      	orrs	r3, r2
 800219e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f043 030c 	orr.w	r3, r3, #12
 80021a6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80021ba:	f7ff f977 	bl	80014ac <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80021c0:	e009      	b.n	80021d6 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80021c2:	f7ff f973 	bl	80014ac <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021d0:	d901      	bls.n	80021d6 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e010      	b.n	80021f8 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1ed      	bne.n	80021c2 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e03c      	b.n	800229c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800222a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	055b      	lsls	r3, r3, #21
 8002236:	4313      	orrs	r3, r2
 8002238:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	041b      	lsls	r3, r3, #16
 8002244:	4313      	orrs	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f023 030c 	bic.w	r3, r3, #12
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	b29a      	uxth	r2, r3
 8002260:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <HAL_ETH_WritePHYRegister+0xa4>)
 8002262:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002266:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <HAL_ETH_WritePHYRegister+0xa4>)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800226e:	f7ff f91d 	bl	80014ac <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002274:	e009      	b.n	800228a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002276:	f7ff f919 	bl	80014ac <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002284:	d901      	bls.n	800228a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e008      	b.n	800229c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1ed      	bne.n	8002276 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40028000 	.word	0x40028000

080022a8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e1c3      	b.n	8002644 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 020c 	and.w	r2, r3, #12
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf14      	ite	ne
 80022d8:	2301      	movne	r3, #1
 80022da:	2300      	moveq	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	461a      	mov	r2, r3
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bf0c      	ite	eq
 8002302:	2301      	moveq	r3, #1
 8002304:	2300      	movne	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 800231a:	2b00      	cmp	r3, #0
 800231c:	bf14      	ite	ne
 800231e:	2301      	movne	r3, #1
 8002320:	2300      	moveq	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800234a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf14      	ite	ne
 8002352:	2301      	movne	r3, #1
 8002354:	2300      	moveq	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf14      	ite	ne
 800236c:	2301      	movne	r3, #1
 800236e:	2300      	moveq	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf14      	ite	ne
 80023a2:	2301      	movne	r3, #1
 80023a4:	2300      	moveq	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	bf0c      	ite	eq
 80023d6:	2301      	moveq	r3, #1
 80023d8:	2300      	movne	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	bf14      	ite	ne
 80023f0:	2301      	movne	r3, #1
 80023f2:	2300      	moveq	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	461a      	mov	r2, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf14      	ite	ne
 800240a:	2301      	movne	r3, #1
 800240c:	2300      	moveq	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002420:	2b00      	cmp	r3, #0
 8002422:	bf14      	ite	ne
 8002424:	2301      	movne	r3, #1
 8002426:	2300      	moveq	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002436:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800243a:	2b00      	cmp	r3, #0
 800243c:	bf14      	ite	ne
 800243e:	2301      	movne	r3, #1
 8002440:	2300      	moveq	r3, #0
 8002442:	b2db      	uxtb	r3, r3
 8002444:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	bf14      	ite	ne
 8002466:	2301      	movne	r3, #1
 8002468:	2300      	moveq	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf14      	ite	ne
 80024b8:	2301      	movne	r3, #1
 80024ba:	2300      	moveq	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80024cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	bf14      	ite	ne
 80024d4:	2301      	movne	r3, #1
 80024d6:	2300      	moveq	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bf14      	ite	ne
 80024f0:	2301      	movne	r3, #1
 80024f2:	2300      	moveq	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	0e5b      	lsrs	r3, r3, #25
 8002506:	f003 021f 	and.w	r2, r3, #31
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	bf14      	ite	ne
 800251c:	2301      	movne	r3, #1
 800251e:	2300      	moveq	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 020f 	and.w	r2, r3, #15
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	bf14      	ite	ne
 8002546:	2301      	movne	r3, #1
 8002548:	2300      	moveq	r3, #0
 800254a:	b2db      	uxtb	r3, r3
 800254c:	461a      	mov	r2, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	2b00      	cmp	r3, #0
 8002560:	bf0c      	ite	eq
 8002562:	2301      	moveq	r3, #1
 8002564:	2300      	movne	r3, #0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002584:	0c1b      	lsrs	r3, r3, #16
 8002586:	b29a      	uxth	r2, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf14      	ite	ne
 800259c:	2301      	movne	r3, #1
 800259e:	2300      	moveq	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bf14      	ite	ne
 80025ba:	2301      	movne	r3, #1
 80025bc:	2300      	moveq	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80025d0:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80025e0:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf14      	ite	ne
 80025f8:	2301      	movne	r3, #1
 80025fa:	2300      	moveq	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	2b00      	cmp	r3, #0
 8002614:	bf14      	ite	ne
 8002616:	2301      	movne	r3, #1
 8002618:	2300      	moveq	r3, #0
 800261a:	b2db      	uxtb	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800262c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf0c      	ite	eq
 8002634:	2301      	moveq	r3, #1
 8002636:	2300      	movne	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e00b      	b.n	800267c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800266a:	2b10      	cmp	r3, #16
 800266c:	d105      	bne.n	800267a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800266e:	6839      	ldr	r1, [r7, #0]
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f85f 	bl	8002734 <ETH_SetMACConfig>

    return HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	e000      	b.n	800267c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
  }
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002694:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800269c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800269e:	f001 feb1 	bl	8004404 <HAL_RCC_GetHCLKFreq>
 80026a2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4a1e      	ldr	r2, [pc, #120]	; (8002720 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d908      	bls.n	80026be <HAL_ETH_SetMDIOClockRange+0x3a>
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d804      	bhi.n	80026be <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	e027      	b.n	800270e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	4a18      	ldr	r2, [pc, #96]	; (8002724 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d908      	bls.n	80026d8 <HAL_ETH_SetMDIOClockRange+0x54>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	4a17      	ldr	r2, [pc, #92]	; (8002728 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d204      	bcs.n	80026d8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	e01a      	b.n	800270e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	4a13      	ldr	r2, [pc, #76]	; (8002728 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d303      	bcc.n	80026e8 <HAL_ETH_SetMDIOClockRange+0x64>
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	4a12      	ldr	r2, [pc, #72]	; (800272c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d911      	bls.n	800270c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4a10      	ldr	r2, [pc, #64]	; (800272c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d908      	bls.n	8002702 <HAL_ETH_SetMDIOClockRange+0x7e>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4a0f      	ldr	r2, [pc, #60]	; (8002730 <HAL_ETH_SetMDIOClockRange+0xac>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d804      	bhi.n	8002702 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	e005      	b.n	800270e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	e000      	b.n	800270e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800270c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002718:	bf00      	nop
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	01312cff 	.word	0x01312cff
 8002724:	02160ebf 	.word	0x02160ebf
 8002728:	03938700 	.word	0x03938700
 800272c:	05f5e0ff 	.word	0x05f5e0ff
 8002730:	08f0d17f 	.word	0x08f0d17f

08002734 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002746:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	791b      	ldrb	r3, [r3, #4]
 800274c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800274e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	7b1b      	ldrb	r3, [r3, #12]
 8002754:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002756:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	7b5b      	ldrb	r3, [r3, #13]
 800275c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800275e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	7b9b      	ldrb	r3, [r3, #14]
 8002764:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002766:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	7bdb      	ldrb	r3, [r3, #15]
 800276c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800276e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	7c12      	ldrb	r2, [r2, #16]
 8002774:	2a00      	cmp	r2, #0
 8002776:	d102      	bne.n	800277e <ETH_SetMACConfig+0x4a>
 8002778:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800277c:	e000      	b.n	8002780 <ETH_SetMACConfig+0x4c>
 800277e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002780:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	7c52      	ldrb	r2, [r2, #17]
 8002786:	2a00      	cmp	r2, #0
 8002788:	d102      	bne.n	8002790 <ETH_SetMACConfig+0x5c>
 800278a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800278e:	e000      	b.n	8002792 <ETH_SetMACConfig+0x5e>
 8002790:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002792:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	7c9b      	ldrb	r3, [r3, #18]
 8002798:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800279a:	431a      	orrs	r2, r3
               macconf->Speed |
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80027a0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80027a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	7f1b      	ldrb	r3, [r3, #28]
 80027ac:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80027ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	7f5b      	ldrb	r3, [r3, #29]
 80027b4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80027b6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	7f92      	ldrb	r2, [r2, #30]
 80027bc:	2a00      	cmp	r2, #0
 80027be:	d102      	bne.n	80027c6 <ETH_SetMACConfig+0x92>
 80027c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027c4:	e000      	b.n	80027c8 <ETH_SetMACConfig+0x94>
 80027c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80027c8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	7fdb      	ldrb	r3, [r3, #31]
 80027ce:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80027d0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80027d8:	2a00      	cmp	r2, #0
 80027da:	d102      	bne.n	80027e2 <ETH_SetMACConfig+0xae>
 80027dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027e0:	e000      	b.n	80027e4 <ETH_SetMACConfig+0xb0>
 80027e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80027e4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80027ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027f2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80027f4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b56      	ldr	r3, [pc, #344]	; (8002960 <ETH_SetMACConfig+0x22c>)
 8002806:	4013      	ands	r3, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	68f9      	ldr	r1, [r7, #12]
 800280e:	430b      	orrs	r3, r1
 8002810:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002816:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800281e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002820:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002828:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800282a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002832:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002834:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800283c:	2a00      	cmp	r2, #0
 800283e:	d102      	bne.n	8002846 <ETH_SetMACConfig+0x112>
 8002840:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002844:	e000      	b.n	8002848 <ETH_SetMACConfig+0x114>
 8002846:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002848:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	4b42      	ldr	r3, [pc, #264]	; (8002964 <ETH_SetMACConfig+0x230>)
 800285a:	4013      	ands	r3, r2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	68f9      	ldr	r1, [r7, #12]
 8002862:	430b      	orrs	r3, r1
 8002864:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800286c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	4b3a      	ldr	r3, [pc, #232]	; (8002968 <ETH_SetMACConfig+0x234>)
 800287e:	4013      	ands	r3, r2
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	68f9      	ldr	r1, [r7, #12]
 8002886:	430b      	orrs	r3, r1
 8002888:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002890:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002896:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800289e:	2a00      	cmp	r2, #0
 80028a0:	d101      	bne.n	80028a6 <ETH_SetMACConfig+0x172>
 80028a2:	2280      	movs	r2, #128	; 0x80
 80028a4:	e000      	b.n	80028a8 <ETH_SetMACConfig+0x174>
 80028a6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80028a8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ae:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028ba:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80028be:	4013      	ands	r3, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	68f9      	ldr	r1, [r7, #12]
 80028c6:	430b      	orrs	r3, r1
 80028c8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80028d0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80028d8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e6:	f023 0103 	bic.w	r1, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80028fe:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800291a:	2a00      	cmp	r2, #0
 800291c:	d101      	bne.n	8002922 <ETH_SetMACConfig+0x1ee>
 800291e:	2240      	movs	r2, #64	; 0x40
 8002920:	e000      	b.n	8002924 <ETH_SetMACConfig+0x1f0>
 8002922:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002924:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800292c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800292e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002936:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002944:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	430a      	orrs	r2, r1
 8002950:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	00048083 	.word	0x00048083
 8002964:	c0f88000 	.word	0xc0f88000
 8002968:	fffffef0 	.word	0xfffffef0

0800296c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b38      	ldr	r3, [pc, #224]	; (8002a64 <ETH_SetDMAConfig+0xf8>)
 8002982:	4013      	ands	r3, r2
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	6811      	ldr	r1, [r2, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	430b      	orrs	r3, r1
 800298e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002992:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	791b      	ldrb	r3, [r3, #4]
 8002998:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800299e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	7b1b      	ldrb	r3, [r3, #12]
 80029a4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	4b2c      	ldr	r3, [pc, #176]	; (8002a68 <ETH_SetDMAConfig+0xfc>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	68f9      	ldr	r1, [r7, #12]
 80029be:	430b      	orrs	r3, r1
 80029c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029c4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	7b5b      	ldrb	r3, [r3, #13]
 80029ca:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029dc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80029e0:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <ETH_SetDMAConfig+0x100>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	68f9      	ldr	r1, [r7, #12]
 80029ea:	430b      	orrs	r3, r1
 80029ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029f0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	7d1b      	ldrb	r3, [r3, #20]
 80029fc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80029fe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	7f5b      	ldrb	r3, [r3, #29]
 8002a04:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a12:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002a16:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <ETH_SetDMAConfig+0x104>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	68f9      	ldr	r1, [r7, #12]
 8002a20:	430b      	orrs	r3, r1
 8002a22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a26:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	7f1b      	ldrb	r3, [r3, #28]
 8002a2e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a40:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <ETH_SetDMAConfig+0x108>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	68f9      	ldr	r1, [r7, #12]
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a54:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	ffff87fd 	.word	0xffff87fd
 8002a68:	ffff2ffe 	.word	0xffff2ffe
 8002a6c:	fffec000 	.word	0xfffec000
 8002a70:	ffc0efef 	.word	0xffc0efef
 8002a74:	7fc0ffff 	.word	0x7fc0ffff

08002a78 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b0a4      	sub	sp, #144	; 0x90
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a86:	2300      	movs	r3, #0
 8002a88:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a96:	2301      	movs	r3, #1
 8002a98:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ab8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002ad0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002ad4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002adc:	2300      	movs	r3, #0
 8002ade:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002af2:	2300      	movs	r3, #0
 8002af4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002afa:	2300      	movs	r3, #0
 8002afc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002b10:	2320      	movs	r3, #32
 8002b12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002b16:	2301      	movs	r3, #1
 8002b18:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002b22:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b2c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002b34:	2302      	movs	r3, #2
 8002b36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002b52:	2300      	movs	r3, #0
 8002b54:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002b56:	2301      	movs	r3, #1
 8002b58:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002b5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b60:	4619      	mov	r1, r3
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff fde6 	bl	8002734 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b86:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b90:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002b98:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b9e:	f107 0308 	add.w	r3, r7, #8
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fee1 	bl	800296c <ETH_SetDMAConfig>
}
 8002baa:	bf00      	nop
 8002bac:	3790      	adds	r7, #144	; 0x90
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b085      	sub	sp, #20
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	e01d      	b.n	8002bfc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68d9      	ldr	r1, [r3, #12]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2200      	movs	r2, #0
 8002be8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	3206      	adds	r2, #6
 8002bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d9de      	bls.n	8002bc0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c10:	461a      	mov	r2, r3
 8002c12:	2303      	movs	r3, #3
 8002c14:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c24:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c34:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	e023      	b.n	8002c9a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6919      	ldr	r1, [r3, #16]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	440b      	add	r3, r1
 8002c62:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2200      	movs	r2, #0
 8002c86:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	3212      	adds	r2, #18
 8002c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3301      	adds	r3, #1
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d9d8      	bls.n	8002c52 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	2303      	movs	r3, #3
 8002cca:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cda:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cee:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b08d      	sub	sp, #52	; 0x34
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3318      	adds	r3, #24
 8002d10:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d2a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d42:	d007      	beq.n	8002d54 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	3304      	adds	r3, #4
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002d54:	2302      	movs	r3, #2
 8002d56:	e259      	b.n	800320c <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d044      	beq.n	8002dee <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	4b75      	ldr	r3, [pc, #468]	; (8002f40 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d70:	431a      	orrs	r2, r3
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d90:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d027      	beq.n	8002dee <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	041b      	lsls	r3, r3, #16
 8002daa:	431a      	orrs	r2, r3
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ddc:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002dec:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00e      	beq.n	8002e18 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	4b51      	ldr	r3, [pc, #324]	; (8002f44 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	6992      	ldr	r2, [r2, #24]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d105      	bne.n	8002e30 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d036      	beq.n	8002e9e <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e3c:	f3bf 8f5f 	dmb	sy
}
 8002e40:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	3301      	adds	r3, #1
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d902      	bls.n	8002e60 <ETH_Prepare_Tx_Descriptors+0x160>
 8002e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5c:	3b04      	subs	r3, #4
 8002e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e68:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e7c:	d10f      	bne.n	8002e9e <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e88:	f3bf 8f5f 	dmb	sy
}
 8002e8c:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e1b6      	b.n	800320c <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	6852      	ldr	r2, [r2, #4]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d012      	beq.n	8002eee <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	6852      	ldr	r2, [r2, #4]
 8002ee4:	0412      	lsls	r2, r2, #16
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	e008      	b.n	8002f00 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	6a3a      	ldr	r2, [r7, #32]
 8002efe:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d021      	beq.n	8002f50 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	04db      	lsls	r3, r3, #19
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	69d2      	ldr	r2, [r2, #28]
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	60da      	str	r2, [r3, #12]
 8002f3e:	e02e      	b.n	8002f9e <ETH_Prepare_Tx_Descriptors+0x29e>
 8002f40:	ffff0000 	.word	0xffff0000
 8002f44:	ffffc000 	.word	0xffffc000
 8002f48:	c000ffff 	.word	0xc000ffff
 8002f4c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	4b7b      	ldr	r3, [pc, #492]	; (8003144 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	6852      	ldr	r2, [r2, #4]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d008      	beq.n	8002fbc <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002fd4:	f3bf 8f5f 	dmb	sy
}
 8002fd8:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80da 	beq.w	80031a8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	431a      	orrs	r2, r3
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003006:	e0cf      	b.n	80031a8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003016:	3301      	adds	r3, #1
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	2b03      	cmp	r3, #3
 800301e:	d902      	bls.n	8003026 <ETH_Prepare_Tx_Descriptors+0x326>
 8003020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003022:	3b04      	subs	r3, #4
 8003024:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800302a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800302e:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003048:	d007      	beq.n	800305a <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304e:	3304      	adds	r3, #4
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d029      	beq.n	80030ae <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003066:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003068:	2300      	movs	r3, #0
 800306a:	62bb      	str	r3, [r7, #40]	; 0x28
 800306c:	e019      	b.n	80030a2 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800306e:	f3bf 8f5f 	dmb	sy
}
 8003072:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	3301      	adds	r3, #1
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003088:	2b03      	cmp	r3, #3
 800308a:	d902      	bls.n	8003092 <ETH_Prepare_Tx_Descriptors+0x392>
 800308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308e:	3b04      	subs	r3, #4
 8003090:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800309a:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	3301      	adds	r3, #1
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d3e1      	bcc.n	800306e <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80030aa:	2302      	movs	r3, #2
 80030ac:	e0ae      	b.n	800320c <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	3301      	adds	r3, #1
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	4b1f      	ldr	r3, [pc, #124]	; (8003148 <ETH_Prepare_Tx_Descriptors+0x448>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	6852      	ldr	r2, [r2, #4]
 80030d0:	431a      	orrs	r2, r3
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d012      	beq.n	8003104 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	4b16      	ldr	r3, [pc, #88]	; (800314c <ETH_Prepare_Tx_Descriptors+0x44c>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	6852      	ldr	r2, [r2, #4]
 80030fa:	0412      	lsls	r2, r2, #16
 80030fc:	431a      	orrs	r2, r3
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	609a      	str	r2, [r3, #8]
 8003102:	e008      	b.n	8003116 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	2200      	movs	r2, #0
 8003108:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	4b0f      	ldr	r3, [pc, #60]	; (800314c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003110:	4013      	ands	r3, r2
 8003112:	6a3a      	ldr	r2, [r7, #32]
 8003114:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	2b00      	cmp	r3, #0
 8003120:	d018      	beq.n	8003154 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <ETH_Prepare_Tx_Descriptors+0x450>)
 8003128:	4013      	ands	r3, r2
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	69d2      	ldr	r2, [r2, #28]
 800312e:	431a      	orrs	r2, r3
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	60da      	str	r2, [r3, #12]
 8003140:	e020      	b.n	8003184 <ETH_Prepare_Tx_Descriptors+0x484>
 8003142:	bf00      	nop
 8003144:	ffff8000 	.word	0xffff8000
 8003148:	ffffc000 	.word	0xffffc000
 800314c:	c000ffff 	.word	0xc000ffff
 8003150:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	4b2f      	ldr	r3, [pc, #188]	; (8003218 <ETH_Prepare_Tx_Descriptors+0x518>)
 800315a:	4013      	ands	r3, r2
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	6852      	ldr	r2, [r2, #4]
 8003160:	431a      	orrs	r2, r3
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	431a      	orrs	r2, r3
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	3301      	adds	r3, #1
 8003188:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800318a:	f3bf 8f5f 	dmb	sy
}
 800318e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f47f af2b 	bne.w	8003008 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d006      	beq.n	80031c6 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	e005      	b.n	80031d2 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031e2:	6979      	ldr	r1, [r7, #20]
 80031e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e6:	3304      	adds	r3, #4
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80031f4:	b672      	cpsid	i
}
 80031f6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	4413      	add	r3, r2
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003206:	b662      	cpsie	i
}
 8003208:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3734      	adds	r7, #52	; 0x34
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	ffff8000 	.word	0xffff8000

0800321c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800321c:	b480      	push	{r7}
 800321e:	b089      	sub	sp, #36	; 0x24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800322a:	4b86      	ldr	r3, [pc, #536]	; (8003444 <HAL_GPIO_Init+0x228>)
 800322c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800322e:	e18c      	b.n	800354a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	2101      	movs	r1, #1
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	fa01 f303 	lsl.w	r3, r1, r3
 800323c:	4013      	ands	r3, r2
 800323e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 817e 	beq.w	8003544 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	2b01      	cmp	r3, #1
 8003252:	d005      	beq.n	8003260 <HAL_GPIO_Init+0x44>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d130      	bne.n	80032c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	2203      	movs	r2, #3
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003296:	2201      	movs	r2, #1
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	f003 0201 	and.w	r2, r3, #1
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	d017      	beq.n	80032fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	2203      	movs	r2, #3
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4013      	ands	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d123      	bne.n	8003352 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	08da      	lsrs	r2, r3, #3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3208      	adds	r2, #8
 8003312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	220f      	movs	r2, #15
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4313      	orrs	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	08da      	lsrs	r2, r3, #3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3208      	adds	r2, #8
 800334c:	69b9      	ldr	r1, [r7, #24]
 800334e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	2203      	movs	r2, #3
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 0203 	and.w	r2, r3, #3
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80d8 	beq.w	8003544 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003394:	4b2c      	ldr	r3, [pc, #176]	; (8003448 <HAL_GPIO_Init+0x22c>)
 8003396:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800339a:	4a2b      	ldr	r2, [pc, #172]	; (8003448 <HAL_GPIO_Init+0x22c>)
 800339c:	f043 0302 	orr.w	r3, r3, #2
 80033a0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80033a4:	4b28      	ldr	r3, [pc, #160]	; (8003448 <HAL_GPIO_Init+0x22c>)
 80033a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033b2:	4a26      	ldr	r2, [pc, #152]	; (800344c <HAL_GPIO_Init+0x230>)
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	089b      	lsrs	r3, r3, #2
 80033b8:	3302      	adds	r3, #2
 80033ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	220f      	movs	r2, #15
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a1d      	ldr	r2, [pc, #116]	; (8003450 <HAL_GPIO_Init+0x234>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d04a      	beq.n	8003474 <HAL_GPIO_Init+0x258>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a1c      	ldr	r2, [pc, #112]	; (8003454 <HAL_GPIO_Init+0x238>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d02b      	beq.n	800343e <HAL_GPIO_Init+0x222>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a1b      	ldr	r2, [pc, #108]	; (8003458 <HAL_GPIO_Init+0x23c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d025      	beq.n	800343a <HAL_GPIO_Init+0x21e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a1a      	ldr	r2, [pc, #104]	; (800345c <HAL_GPIO_Init+0x240>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01f      	beq.n	8003436 <HAL_GPIO_Init+0x21a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a19      	ldr	r2, [pc, #100]	; (8003460 <HAL_GPIO_Init+0x244>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d019      	beq.n	8003432 <HAL_GPIO_Init+0x216>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a18      	ldr	r2, [pc, #96]	; (8003464 <HAL_GPIO_Init+0x248>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d013      	beq.n	800342e <HAL_GPIO_Init+0x212>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a17      	ldr	r2, [pc, #92]	; (8003468 <HAL_GPIO_Init+0x24c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00d      	beq.n	800342a <HAL_GPIO_Init+0x20e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a16      	ldr	r2, [pc, #88]	; (800346c <HAL_GPIO_Init+0x250>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d007      	beq.n	8003426 <HAL_GPIO_Init+0x20a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a15      	ldr	r2, [pc, #84]	; (8003470 <HAL_GPIO_Init+0x254>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d101      	bne.n	8003422 <HAL_GPIO_Init+0x206>
 800341e:	2309      	movs	r3, #9
 8003420:	e029      	b.n	8003476 <HAL_GPIO_Init+0x25a>
 8003422:	230a      	movs	r3, #10
 8003424:	e027      	b.n	8003476 <HAL_GPIO_Init+0x25a>
 8003426:	2307      	movs	r3, #7
 8003428:	e025      	b.n	8003476 <HAL_GPIO_Init+0x25a>
 800342a:	2306      	movs	r3, #6
 800342c:	e023      	b.n	8003476 <HAL_GPIO_Init+0x25a>
 800342e:	2305      	movs	r3, #5
 8003430:	e021      	b.n	8003476 <HAL_GPIO_Init+0x25a>
 8003432:	2304      	movs	r3, #4
 8003434:	e01f      	b.n	8003476 <HAL_GPIO_Init+0x25a>
 8003436:	2303      	movs	r3, #3
 8003438:	e01d      	b.n	8003476 <HAL_GPIO_Init+0x25a>
 800343a:	2302      	movs	r3, #2
 800343c:	e01b      	b.n	8003476 <HAL_GPIO_Init+0x25a>
 800343e:	2301      	movs	r3, #1
 8003440:	e019      	b.n	8003476 <HAL_GPIO_Init+0x25a>
 8003442:	bf00      	nop
 8003444:	58000080 	.word	0x58000080
 8003448:	58024400 	.word	0x58024400
 800344c:	58000400 	.word	0x58000400
 8003450:	58020000 	.word	0x58020000
 8003454:	58020400 	.word	0x58020400
 8003458:	58020800 	.word	0x58020800
 800345c:	58020c00 	.word	0x58020c00
 8003460:	58021000 	.word	0x58021000
 8003464:	58021400 	.word	0x58021400
 8003468:	58021800 	.word	0x58021800
 800346c:	58021c00 	.word	0x58021c00
 8003470:	58022400 	.word	0x58022400
 8003474:	2300      	movs	r3, #0
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	f002 0203 	and.w	r2, r2, #3
 800347c:	0092      	lsls	r2, r2, #2
 800347e:	4093      	lsls	r3, r2
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003486:	4938      	ldr	r1, [pc, #224]	; (8003568 <HAL_GPIO_Init+0x34c>)
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	089b      	lsrs	r3, r3, #2
 800348c:	3302      	adds	r3, #2
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80034ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80034e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	43db      	mvns	r3, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4013      	ands	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	3301      	adds	r3, #1
 8003548:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	f47f ae6b 	bne.w	8003230 <HAL_GPIO_Init+0x14>
  }
}
 800355a:	bf00      	nop
 800355c:	bf00      	nop
 800355e:	3724      	adds	r7, #36	; 0x24
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	58000400 	.word	0x58000400

0800356c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	807b      	strh	r3, [r7, #2]
 8003578:	4613      	mov	r3, r2
 800357a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800357c:	787b      	ldrb	r3, [r7, #1]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003582:	887a      	ldrh	r2, [r7, #2]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003588:	e003      	b.n	8003592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800358a:	887b      	ldrh	r3, [r7, #2]
 800358c:	041a      	lsls	r2, r3, #16
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	619a      	str	r2, [r3, #24]
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800359e:	b480      	push	{r7}
 80035a0:	b085      	sub	sp, #20
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	460b      	mov	r3, r1
 80035a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035b0:	887a      	ldrh	r2, [r7, #2]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4013      	ands	r3, r2
 80035b6:	041a      	lsls	r2, r3, #16
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	43d9      	mvns	r1, r3
 80035bc:	887b      	ldrh	r3, [r7, #2]
 80035be:	400b      	ands	r3, r1
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	619a      	str	r2, [r3, #24]
}
 80035c6:	bf00      	nop
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
	...

080035d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80035dc:	4b19      	ldr	r3, [pc, #100]	; (8003644 <HAL_PWREx_ConfigSupply+0x70>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d00a      	beq.n	80035fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035e8:	4b16      	ldr	r3, [pc, #88]	; (8003644 <HAL_PWREx_ConfigSupply+0x70>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d001      	beq.n	80035fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e01f      	b.n	800363a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	e01d      	b.n	800363a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80035fe:	4b11      	ldr	r3, [pc, #68]	; (8003644 <HAL_PWREx_ConfigSupply+0x70>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f023 0207 	bic.w	r2, r3, #7
 8003606:	490f      	ldr	r1, [pc, #60]	; (8003644 <HAL_PWREx_ConfigSupply+0x70>)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4313      	orrs	r3, r2
 800360c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800360e:	f7fd ff4d 	bl	80014ac <HAL_GetTick>
 8003612:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003614:	e009      	b.n	800362a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003616:	f7fd ff49 	bl	80014ac <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003624:	d901      	bls.n	800362a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e007      	b.n	800363a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800362a:	4b06      	ldr	r3, [pc, #24]	; (8003644 <HAL_PWREx_ConfigSupply+0x70>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003636:	d1ee      	bne.n	8003616 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	58024800 	.word	0x58024800

08003648 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08c      	sub	sp, #48	; 0x30
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e39d      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 8087 	beq.w	8003776 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003668:	4b88      	ldr	r3, [pc, #544]	; (800388c <HAL_RCC_OscConfig+0x244>)
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003672:	4b86      	ldr	r3, [pc, #536]	; (800388c <HAL_RCC_OscConfig+0x244>)
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367a:	2b10      	cmp	r3, #16
 800367c:	d007      	beq.n	800368e <HAL_RCC_OscConfig+0x46>
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	2b18      	cmp	r3, #24
 8003682:	d110      	bne.n	80036a6 <HAL_RCC_OscConfig+0x5e>
 8003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d10b      	bne.n	80036a6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368e:	4b7f      	ldr	r3, [pc, #508]	; (800388c <HAL_RCC_OscConfig+0x244>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d06c      	beq.n	8003774 <HAL_RCC_OscConfig+0x12c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d168      	bne.n	8003774 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e377      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ae:	d106      	bne.n	80036be <HAL_RCC_OscConfig+0x76>
 80036b0:	4b76      	ldr	r3, [pc, #472]	; (800388c <HAL_RCC_OscConfig+0x244>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a75      	ldr	r2, [pc, #468]	; (800388c <HAL_RCC_OscConfig+0x244>)
 80036b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	e02e      	b.n	800371c <HAL_RCC_OscConfig+0xd4>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCC_OscConfig+0x98>
 80036c6:	4b71      	ldr	r3, [pc, #452]	; (800388c <HAL_RCC_OscConfig+0x244>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a70      	ldr	r2, [pc, #448]	; (800388c <HAL_RCC_OscConfig+0x244>)
 80036cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	4b6e      	ldr	r3, [pc, #440]	; (800388c <HAL_RCC_OscConfig+0x244>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a6d      	ldr	r2, [pc, #436]	; (800388c <HAL_RCC_OscConfig+0x244>)
 80036d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	e01d      	b.n	800371c <HAL_RCC_OscConfig+0xd4>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e8:	d10c      	bne.n	8003704 <HAL_RCC_OscConfig+0xbc>
 80036ea:	4b68      	ldr	r3, [pc, #416]	; (800388c <HAL_RCC_OscConfig+0x244>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a67      	ldr	r2, [pc, #412]	; (800388c <HAL_RCC_OscConfig+0x244>)
 80036f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	4b65      	ldr	r3, [pc, #404]	; (800388c <HAL_RCC_OscConfig+0x244>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a64      	ldr	r2, [pc, #400]	; (800388c <HAL_RCC_OscConfig+0x244>)
 80036fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e00b      	b.n	800371c <HAL_RCC_OscConfig+0xd4>
 8003704:	4b61      	ldr	r3, [pc, #388]	; (800388c <HAL_RCC_OscConfig+0x244>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a60      	ldr	r2, [pc, #384]	; (800388c <HAL_RCC_OscConfig+0x244>)
 800370a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	4b5e      	ldr	r3, [pc, #376]	; (800388c <HAL_RCC_OscConfig+0x244>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a5d      	ldr	r2, [pc, #372]	; (800388c <HAL_RCC_OscConfig+0x244>)
 8003716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800371a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d013      	beq.n	800374c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003724:	f7fd fec2 	bl	80014ac <HAL_GetTick>
 8003728:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800372c:	f7fd febe 	bl	80014ac <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	; 0x64
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e32b      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800373e:	4b53      	ldr	r3, [pc, #332]	; (800388c <HAL_RCC_OscConfig+0x244>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0xe4>
 800374a:	e014      	b.n	8003776 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374c:	f7fd feae 	bl	80014ac <HAL_GetTick>
 8003750:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003754:	f7fd feaa 	bl	80014ac <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b64      	cmp	r3, #100	; 0x64
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e317      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003766:	4b49      	ldr	r3, [pc, #292]	; (800388c <HAL_RCC_OscConfig+0x244>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f0      	bne.n	8003754 <HAL_RCC_OscConfig+0x10c>
 8003772:	e000      	b.n	8003776 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 808c 	beq.w	800389c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003784:	4b41      	ldr	r3, [pc, #260]	; (800388c <HAL_RCC_OscConfig+0x244>)
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800378c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800378e:	4b3f      	ldr	r3, [pc, #252]	; (800388c <HAL_RCC_OscConfig+0x244>)
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d007      	beq.n	80037aa <HAL_RCC_OscConfig+0x162>
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	2b18      	cmp	r3, #24
 800379e:	d137      	bne.n	8003810 <HAL_RCC_OscConfig+0x1c8>
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d132      	bne.n	8003810 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037aa:	4b38      	ldr	r3, [pc, #224]	; (800388c <HAL_RCC_OscConfig+0x244>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_RCC_OscConfig+0x17a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e2e9      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037c2:	4b32      	ldr	r3, [pc, #200]	; (800388c <HAL_RCC_OscConfig+0x244>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 0219 	bic.w	r2, r3, #25
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	492f      	ldr	r1, [pc, #188]	; (800388c <HAL_RCC_OscConfig+0x244>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037d4:	f7fd fe6a 	bl	80014ac <HAL_GetTick>
 80037d8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037dc:	f7fd fe66 	bl	80014ac <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e2d3      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037ee:	4b27      	ldr	r3, [pc, #156]	; (800388c <HAL_RCC_OscConfig+0x244>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fa:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_RCC_OscConfig+0x244>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	061b      	lsls	r3, r3, #24
 8003808:	4920      	ldr	r1, [pc, #128]	; (800388c <HAL_RCC_OscConfig+0x244>)
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800380e:	e045      	b.n	800389c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d026      	beq.n	8003866 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003818:	4b1c      	ldr	r3, [pc, #112]	; (800388c <HAL_RCC_OscConfig+0x244>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f023 0219 	bic.w	r2, r3, #25
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4919      	ldr	r1, [pc, #100]	; (800388c <HAL_RCC_OscConfig+0x244>)
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382a:	f7fd fe3f 	bl	80014ac <HAL_GetTick>
 800382e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003832:	f7fd fe3b 	bl	80014ac <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e2a8      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003844:	4b11      	ldr	r3, [pc, #68]	; (800388c <HAL_RCC_OscConfig+0x244>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003850:	4b0e      	ldr	r3, [pc, #56]	; (800388c <HAL_RCC_OscConfig+0x244>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	061b      	lsls	r3, r3, #24
 800385e:	490b      	ldr	r1, [pc, #44]	; (800388c <HAL_RCC_OscConfig+0x244>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
 8003864:	e01a      	b.n	800389c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003866:	4b09      	ldr	r3, [pc, #36]	; (800388c <HAL_RCC_OscConfig+0x244>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a08      	ldr	r2, [pc, #32]	; (800388c <HAL_RCC_OscConfig+0x244>)
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003872:	f7fd fe1b 	bl	80014ac <HAL_GetTick>
 8003876:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003878:	e00a      	b.n	8003890 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800387a:	f7fd fe17 	bl	80014ac <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d903      	bls.n	8003890 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e284      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
 800388c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003890:	4b96      	ldr	r3, [pc, #600]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1ee      	bne.n	800387a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d06a      	beq.n	800397e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038a8:	4b90      	ldr	r3, [pc, #576]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038b0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038b2:	4b8e      	ldr	r3, [pc, #568]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d007      	beq.n	80038ce <HAL_RCC_OscConfig+0x286>
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b18      	cmp	r3, #24
 80038c2:	d11b      	bne.n	80038fc <HAL_RCC_OscConfig+0x2b4>
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d116      	bne.n	80038fc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038ce:	4b87      	ldr	r3, [pc, #540]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_RCC_OscConfig+0x29e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	2b80      	cmp	r3, #128	; 0x80
 80038e0:	d001      	beq.n	80038e6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e257      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038e6:	4b81      	ldr	r3, [pc, #516]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	061b      	lsls	r3, r3, #24
 80038f4:	497d      	ldr	r1, [pc, #500]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038fa:	e040      	b.n	800397e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d023      	beq.n	800394c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003904:	4b79      	ldr	r3, [pc, #484]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a78      	ldr	r2, [pc, #480]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 800390a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800390e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fd fdcc 	bl	80014ac <HAL_GetTick>
 8003914:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003918:	f7fd fdc8 	bl	80014ac <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e235      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800392a:	4b70      	ldr	r3, [pc, #448]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003936:	4b6d      	ldr	r3, [pc, #436]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	061b      	lsls	r3, r3, #24
 8003944:	4969      	ldr	r1, [pc, #420]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 8003946:	4313      	orrs	r3, r2
 8003948:	60cb      	str	r3, [r1, #12]
 800394a:	e018      	b.n	800397e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800394c:	4b67      	ldr	r3, [pc, #412]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a66      	ldr	r2, [pc, #408]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 8003952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fd fda8 	bl	80014ac <HAL_GetTick>
 800395c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003960:	f7fd fda4 	bl	80014ac <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e211      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003972:	4b5e      	ldr	r3, [pc, #376]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d036      	beq.n	80039f8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d019      	beq.n	80039c6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003992:	4b56      	ldr	r3, [pc, #344]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 8003994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003996:	4a55      	ldr	r2, [pc, #340]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399e:	f7fd fd85 	bl	80014ac <HAL_GetTick>
 80039a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a6:	f7fd fd81 	bl	80014ac <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e1ee      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039b8:	4b4c      	ldr	r3, [pc, #304]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 80039ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f0      	beq.n	80039a6 <HAL_RCC_OscConfig+0x35e>
 80039c4:	e018      	b.n	80039f8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c6:	4b49      	ldr	r3, [pc, #292]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 80039c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ca:	4a48      	ldr	r2, [pc, #288]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 80039cc:	f023 0301 	bic.w	r3, r3, #1
 80039d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d2:	f7fd fd6b 	bl	80014ac <HAL_GetTick>
 80039d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039da:	f7fd fd67 	bl	80014ac <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e1d4      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039ec:	4b3f      	ldr	r3, [pc, #252]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 80039ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f0      	bne.n	80039da <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d036      	beq.n	8003a72 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d019      	beq.n	8003a40 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a0c:	4b37      	ldr	r3, [pc, #220]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a36      	ldr	r2, [pc, #216]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 8003a12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a18:	f7fd fd48 	bl	80014ac <HAL_GetTick>
 8003a1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003a20:	f7fd fd44 	bl	80014ac <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e1b1      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a32:	4b2e      	ldr	r3, [pc, #184]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0x3d8>
 8003a3e:	e018      	b.n	8003a72 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a40:	4b2a      	ldr	r3, [pc, #168]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a29      	ldr	r2, [pc, #164]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 8003a46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a4c:	f7fd fd2e 	bl	80014ac <HAL_GetTick>
 8003a50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003a54:	f7fd fd2a 	bl	80014ac <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e197      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a66:	4b21      	ldr	r3, [pc, #132]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8086 	beq.w	8003b8c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a80:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <HAL_RCC_OscConfig+0x4a8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a1a      	ldr	r2, [pc, #104]	; (8003af0 <HAL_RCC_OscConfig+0x4a8>)
 8003a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a8c:	f7fd fd0e 	bl	80014ac <HAL_GetTick>
 8003a90:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a94:	f7fd fd0a 	bl	80014ac <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b64      	cmp	r3, #100	; 0x64
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e177      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aa6:	4b12      	ldr	r3, [pc, #72]	; (8003af0 <HAL_RCC_OscConfig+0x4a8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d106      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x480>
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abe:	4a0b      	ldr	r2, [pc, #44]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac6:	e032      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e6>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d111      	bne.n	8003af4 <HAL_RCC_OscConfig+0x4ac>
 8003ad0:	4b06      	ldr	r3, [pc, #24]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad4:	4a05      	ldr	r2, [pc, #20]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 8003ad6:	f023 0301 	bic.w	r3, r3, #1
 8003ada:	6713      	str	r3, [r2, #112]	; 0x70
 8003adc:	4b03      	ldr	r3, [pc, #12]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 8003ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae0:	4a02      	ldr	r2, [pc, #8]	; (8003aec <HAL_RCC_OscConfig+0x4a4>)
 8003ae2:	f023 0304 	bic.w	r3, r3, #4
 8003ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae8:	e021      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e6>
 8003aea:	bf00      	nop
 8003aec:	58024400 	.word	0x58024400
 8003af0:	58024800 	.word	0x58024800
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b05      	cmp	r3, #5
 8003afa:	d10c      	bne.n	8003b16 <HAL_RCC_OscConfig+0x4ce>
 8003afc:	4b83      	ldr	r3, [pc, #524]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	4a82      	ldr	r2, [pc, #520]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003b02:	f043 0304 	orr.w	r3, r3, #4
 8003b06:	6713      	str	r3, [r2, #112]	; 0x70
 8003b08:	4b80      	ldr	r3, [pc, #512]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	4a7f      	ldr	r2, [pc, #508]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	6713      	str	r3, [r2, #112]	; 0x70
 8003b14:	e00b      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e6>
 8003b16:	4b7d      	ldr	r3, [pc, #500]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1a:	4a7c      	ldr	r2, [pc, #496]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	6713      	str	r3, [r2, #112]	; 0x70
 8003b22:	4b7a      	ldr	r3, [pc, #488]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	4a79      	ldr	r2, [pc, #484]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003b28:	f023 0304 	bic.w	r3, r3, #4
 8003b2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d015      	beq.n	8003b62 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b36:	f7fd fcb9 	bl	80014ac <HAL_GetTick>
 8003b3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b3c:	e00a      	b.n	8003b54 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b3e:	f7fd fcb5 	bl	80014ac <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e120      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b54:	4b6d      	ldr	r3, [pc, #436]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0ee      	beq.n	8003b3e <HAL_RCC_OscConfig+0x4f6>
 8003b60:	e014      	b.n	8003b8c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b62:	f7fd fca3 	bl	80014ac <HAL_GetTick>
 8003b66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b68:	e00a      	b.n	8003b80 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b6a:	f7fd fc9f 	bl	80014ac <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e10a      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b80:	4b62      	ldr	r3, [pc, #392]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1ee      	bne.n	8003b6a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80ff 	beq.w	8003d94 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b96:	4b5d      	ldr	r3, [pc, #372]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b9e:	2b18      	cmp	r3, #24
 8003ba0:	f000 80ba 	beq.w	8003d18 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	f040 8095 	bne.w	8003cd8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bae:	4b57      	ldr	r3, [pc, #348]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a56      	ldr	r2, [pc, #344]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003bb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bba:	f7fd fc77 	bl	80014ac <HAL_GetTick>
 8003bbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc2:	f7fd fc73 	bl	80014ac <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e0e0      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bd4:	4b4d      	ldr	r3, [pc, #308]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1f0      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be0:	4b4a      	ldr	r3, [pc, #296]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003be4:	4b4a      	ldr	r3, [pc, #296]	; (8003d10 <HAL_RCC_OscConfig+0x6c8>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003bf0:	0112      	lsls	r2, r2, #4
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	4945      	ldr	r1, [pc, #276]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	628b      	str	r3, [r1, #40]	; 0x28
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	025b      	lsls	r3, r3, #9
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	3b01      	subs	r3, #1
 8003c16:	041b      	lsls	r3, r3, #16
 8003c18:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	3b01      	subs	r3, #1
 8003c24:	061b      	lsls	r3, r3, #24
 8003c26:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c2a:	4938      	ldr	r1, [pc, #224]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003c30:	4b36      	ldr	r3, [pc, #216]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	4a35      	ldr	r2, [pc, #212]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003c36:	f023 0301 	bic.w	r3, r3, #1
 8003c3a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c3c:	4b33      	ldr	r3, [pc, #204]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c40:	4b34      	ldr	r3, [pc, #208]	; (8003d14 <HAL_RCC_OscConfig+0x6cc>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c48:	00d2      	lsls	r2, r2, #3
 8003c4a:	4930      	ldr	r1, [pc, #192]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c50:	4b2e      	ldr	r3, [pc, #184]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	f023 020c 	bic.w	r2, r3, #12
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	492b      	ldr	r1, [pc, #172]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c62:	4b2a      	ldr	r3, [pc, #168]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c66:	f023 0202 	bic.w	r2, r3, #2
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	4927      	ldr	r1, [pc, #156]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c74:	4b25      	ldr	r3, [pc, #148]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	4a24      	ldr	r2, [pc, #144]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c80:	4b22      	ldr	r3, [pc, #136]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	4a21      	ldr	r2, [pc, #132]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c8c:	4b1f      	ldr	r3, [pc, #124]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	4a1e      	ldr	r2, [pc, #120]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003c92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003c98:	4b1c      	ldr	r3, [pc, #112]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	4a1b      	ldr	r2, [pc, #108]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ca4:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a18      	ldr	r2, [pc, #96]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7fd fbfc 	bl	80014ac <HAL_GetTick>
 8003cb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb8:	f7fd fbf8 	bl	80014ac <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e065      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cca:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x670>
 8003cd6:	e05d      	b.n	8003d94 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a0b      	ldr	r2, [pc, #44]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fd fbe2 	bl	80014ac <HAL_GetTick>
 8003ce8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cec:	f7fd fbde 	bl	80014ac <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e04b      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cfe:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <HAL_RCC_OscConfig+0x6c4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x6a4>
 8003d0a:	e043      	b.n	8003d94 <HAL_RCC_OscConfig+0x74c>
 8003d0c:	58024400 	.word	0x58024400
 8003d10:	fffffc0c 	.word	0xfffffc0c
 8003d14:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d18:	4b21      	ldr	r3, [pc, #132]	; (8003da0 <HAL_RCC_OscConfig+0x758>)
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d1e:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <HAL_RCC_OscConfig+0x758>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d031      	beq.n	8003d90 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f003 0203 	and.w	r2, r3, #3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d12a      	bne.n	8003d90 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d122      	bne.n	8003d90 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d11a      	bne.n	8003d90 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	0a5b      	lsrs	r3, r3, #9
 8003d5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d66:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d111      	bne.n	8003d90 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	0c1b      	lsrs	r3, r3, #16
 8003d70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d108      	bne.n	8003d90 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	0e1b      	lsrs	r3, r3, #24
 8003d82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3730      	adds	r7, #48	; 0x30
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	58024400 	.word	0x58024400

08003da4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e19c      	b.n	80040f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003db8:	4b8a      	ldr	r3, [pc, #552]	; (8003fe4 <HAL_RCC_ClockConfig+0x240>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d910      	bls.n	8003de8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b87      	ldr	r3, [pc, #540]	; (8003fe4 <HAL_RCC_ClockConfig+0x240>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 020f 	bic.w	r2, r3, #15
 8003dce:	4985      	ldr	r1, [pc, #532]	; (8003fe4 <HAL_RCC_ClockConfig+0x240>)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b83      	ldr	r3, [pc, #524]	; (8003fe4 <HAL_RCC_ClockConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e184      	b.n	80040f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d010      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	4b7b      	ldr	r3, [pc, #492]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d908      	bls.n	8003e16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e04:	4b78      	ldr	r3, [pc, #480]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	4975      	ldr	r1, [pc, #468]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d010      	beq.n	8003e44 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695a      	ldr	r2, [r3, #20]
 8003e26:	4b70      	ldr	r3, [pc, #448]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d908      	bls.n	8003e44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e32:	4b6d      	ldr	r3, [pc, #436]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	496a      	ldr	r1, [pc, #424]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d010      	beq.n	8003e72 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699a      	ldr	r2, [r3, #24]
 8003e54:	4b64      	ldr	r3, [pc, #400]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d908      	bls.n	8003e72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e60:	4b61      	ldr	r3, [pc, #388]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	495e      	ldr	r1, [pc, #376]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d010      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69da      	ldr	r2, [r3, #28]
 8003e82:	4b59      	ldr	r3, [pc, #356]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d908      	bls.n	8003ea0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e8e:	4b56      	ldr	r3, [pc, #344]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	4953      	ldr	r1, [pc, #332]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d010      	beq.n	8003ece <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	4b4d      	ldr	r3, [pc, #308]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d908      	bls.n	8003ece <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ebc:	4b4a      	ldr	r3, [pc, #296]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	f023 020f 	bic.w	r2, r3, #15
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4947      	ldr	r1, [pc, #284]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d055      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003eda:	4b43      	ldr	r3, [pc, #268]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	4940      	ldr	r1, [pc, #256]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d107      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ef4:	4b3c      	ldr	r3, [pc, #240]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d121      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0f6      	b.n	80040f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d107      	bne.n	8003f1c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f0c:	4b36      	ldr	r3, [pc, #216]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d115      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e0ea      	b.n	80040f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d107      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f24:	4b30      	ldr	r3, [pc, #192]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d109      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0de      	b.n	80040f2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f34:	4b2c      	ldr	r3, [pc, #176]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0d6      	b.n	80040f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f44:	4b28      	ldr	r3, [pc, #160]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f023 0207 	bic.w	r2, r3, #7
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	4925      	ldr	r1, [pc, #148]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f56:	f7fd faa9 	bl	80014ac <HAL_GetTick>
 8003f5a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5c:	e00a      	b.n	8003f74 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f5e:	f7fd faa5 	bl	80014ac <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e0be      	b.n	80040f2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f74:	4b1c      	ldr	r3, [pc, #112]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d1eb      	bne.n	8003f5e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d010      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	4b14      	ldr	r3, [pc, #80]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d208      	bcs.n	8003fb4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa2:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	f023 020f 	bic.w	r2, r3, #15
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	490e      	ldr	r1, [pc, #56]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_RCC_ClockConfig+0x240>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d214      	bcs.n	8003fec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc2:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <HAL_RCC_ClockConfig+0x240>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f023 020f 	bic.w	r2, r3, #15
 8003fca:	4906      	ldr	r1, [pc, #24]	; (8003fe4 <HAL_RCC_ClockConfig+0x240>)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd2:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <HAL_RCC_ClockConfig+0x240>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d005      	beq.n	8003fec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e086      	b.n	80040f2 <HAL_RCC_ClockConfig+0x34e>
 8003fe4:	52002000 	.word	0x52002000
 8003fe8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d010      	beq.n	800401a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	4b3f      	ldr	r3, [pc, #252]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004004:	429a      	cmp	r2, r3
 8004006:	d208      	bcs.n	800401a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004008:	4b3c      	ldr	r3, [pc, #240]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	4939      	ldr	r1, [pc, #228]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 8004016:	4313      	orrs	r3, r2
 8004018:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d010      	beq.n	8004048 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	4b34      	ldr	r3, [pc, #208]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004032:	429a      	cmp	r2, r3
 8004034:	d208      	bcs.n	8004048 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004036:	4b31      	ldr	r3, [pc, #196]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	492e      	ldr	r1, [pc, #184]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 8004044:	4313      	orrs	r3, r2
 8004046:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0310 	and.w	r3, r3, #16
 8004050:	2b00      	cmp	r3, #0
 8004052:	d010      	beq.n	8004076 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699a      	ldr	r2, [r3, #24]
 8004058:	4b28      	ldr	r3, [pc, #160]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004060:	429a      	cmp	r2, r3
 8004062:	d208      	bcs.n	8004076 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004064:	4b25      	ldr	r3, [pc, #148]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	4922      	ldr	r1, [pc, #136]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 8004072:	4313      	orrs	r3, r2
 8004074:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	2b00      	cmp	r3, #0
 8004080:	d010      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69da      	ldr	r2, [r3, #28]
 8004086:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800408e:	429a      	cmp	r2, r3
 8004090:	d208      	bcs.n	80040a4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004092:	4b1a      	ldr	r3, [pc, #104]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	4917      	ldr	r1, [pc, #92]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040a4:	f000 f834 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 80040a8:	4602      	mov	r2, r0
 80040aa:	4b14      	ldr	r3, [pc, #80]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	0a1b      	lsrs	r3, r3, #8
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	4912      	ldr	r1, [pc, #72]	; (8004100 <HAL_RCC_ClockConfig+0x35c>)
 80040b6:	5ccb      	ldrb	r3, [r1, r3]
 80040b8:	f003 031f 	and.w	r3, r3, #31
 80040bc:	fa22 f303 	lsr.w	r3, r2, r3
 80040c0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040c2:	4b0e      	ldr	r3, [pc, #56]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	4a0d      	ldr	r2, [pc, #52]	; (8004100 <HAL_RCC_ClockConfig+0x35c>)
 80040cc:	5cd3      	ldrb	r3, [r2, r3]
 80040ce:	f003 031f 	and.w	r3, r3, #31
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
 80040d8:	4a0a      	ldr	r2, [pc, #40]	; (8004104 <HAL_RCC_ClockConfig+0x360>)
 80040da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040dc:	4a0a      	ldr	r2, [pc, #40]	; (8004108 <HAL_RCC_ClockConfig+0x364>)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80040e2:	4b0a      	ldr	r3, [pc, #40]	; (800410c <HAL_RCC_ClockConfig+0x368>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fd f996 	bl	8001418 <HAL_InitTick>
 80040ec:	4603      	mov	r3, r0
 80040ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	58024400 	.word	0x58024400
 8004100:	08014314 	.word	0x08014314
 8004104:	24000004 	.word	0x24000004
 8004108:	24000000 	.word	0x24000000
 800410c:	24000008 	.word	0x24000008

08004110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004110:	b480      	push	{r7}
 8004112:	b089      	sub	sp, #36	; 0x24
 8004114:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004116:	4bb3      	ldr	r3, [pc, #716]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800411e:	2b18      	cmp	r3, #24
 8004120:	f200 8155 	bhi.w	80043ce <HAL_RCC_GetSysClockFreq+0x2be>
 8004124:	a201      	add	r2, pc, #4	; (adr r2, 800412c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412a:	bf00      	nop
 800412c:	08004191 	.word	0x08004191
 8004130:	080043cf 	.word	0x080043cf
 8004134:	080043cf 	.word	0x080043cf
 8004138:	080043cf 	.word	0x080043cf
 800413c:	080043cf 	.word	0x080043cf
 8004140:	080043cf 	.word	0x080043cf
 8004144:	080043cf 	.word	0x080043cf
 8004148:	080043cf 	.word	0x080043cf
 800414c:	080041b7 	.word	0x080041b7
 8004150:	080043cf 	.word	0x080043cf
 8004154:	080043cf 	.word	0x080043cf
 8004158:	080043cf 	.word	0x080043cf
 800415c:	080043cf 	.word	0x080043cf
 8004160:	080043cf 	.word	0x080043cf
 8004164:	080043cf 	.word	0x080043cf
 8004168:	080043cf 	.word	0x080043cf
 800416c:	080041bd 	.word	0x080041bd
 8004170:	080043cf 	.word	0x080043cf
 8004174:	080043cf 	.word	0x080043cf
 8004178:	080043cf 	.word	0x080043cf
 800417c:	080043cf 	.word	0x080043cf
 8004180:	080043cf 	.word	0x080043cf
 8004184:	080043cf 	.word	0x080043cf
 8004188:	080043cf 	.word	0x080043cf
 800418c:	080041c3 	.word	0x080041c3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004190:	4b94      	ldr	r3, [pc, #592]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b00      	cmp	r3, #0
 800419a:	d009      	beq.n	80041b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800419c:	4b91      	ldr	r3, [pc, #580]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	08db      	lsrs	r3, r3, #3
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	4a90      	ldr	r2, [pc, #576]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
 80041ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80041ae:	e111      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80041b0:	4b8d      	ldr	r3, [pc, #564]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041b2:	61bb      	str	r3, [r7, #24]
    break;
 80041b4:	e10e      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80041b6:	4b8d      	ldr	r3, [pc, #564]	; (80043ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80041b8:	61bb      	str	r3, [r7, #24]
    break;
 80041ba:	e10b      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80041bc:	4b8c      	ldr	r3, [pc, #560]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80041be:	61bb      	str	r3, [r7, #24]
    break;
 80041c0:	e108      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041c2:	4b88      	ldr	r3, [pc, #544]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80041cc:	4b85      	ldr	r3, [pc, #532]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d0:	091b      	lsrs	r3, r3, #4
 80041d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041d6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80041d8:	4b82      	ldr	r3, [pc, #520]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80041e2:	4b80      	ldr	r3, [pc, #512]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e6:	08db      	lsrs	r3, r3, #3
 80041e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	fb02 f303 	mul.w	r3, r2, r3
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 80e1 	beq.w	80043c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b02      	cmp	r3, #2
 800420a:	f000 8083 	beq.w	8004314 <HAL_RCC_GetSysClockFreq+0x204>
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b02      	cmp	r3, #2
 8004212:	f200 80a1 	bhi.w	8004358 <HAL_RCC_GetSysClockFreq+0x248>
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_RCC_GetSysClockFreq+0x114>
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d056      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004222:	e099      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004224:	4b6f      	ldr	r3, [pc, #444]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0320 	and.w	r3, r3, #32
 800422c:	2b00      	cmp	r3, #0
 800422e:	d02d      	beq.n	800428c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004230:	4b6c      	ldr	r3, [pc, #432]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	08db      	lsrs	r3, r3, #3
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	4a6b      	ldr	r2, [pc, #428]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800423c:	fa22 f303 	lsr.w	r3, r2, r3
 8004240:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	ee07 3a90 	vmov	s15, r3
 8004248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800425a:	4b62      	ldr	r3, [pc, #392]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800426a:	ed97 6a02 	vldr	s12, [r7, #8]
 800426e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80043f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800427a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800427e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004286:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800428a:	e087      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	ee07 3a90 	vmov	s15, r3
 8004292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004296:	eddf 6a58 	vldr	s13, [pc, #352]	; 80043f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800429a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800429e:	4b51      	ldr	r3, [pc, #324]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a6:	ee07 3a90 	vmov	s15, r3
 80042aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80042b2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80043f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042ce:	e065      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042da:	eddf 6a48 	vldr	s13, [pc, #288]	; 80043fc <HAL_RCC_GetSysClockFreq+0x2ec>
 80042de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042e2:	4b40      	ldr	r3, [pc, #256]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80042f6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80043f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800430a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800430e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004312:	e043      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004400 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004326:	4b2f      	ldr	r3, [pc, #188]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800432e:	ee07 3a90 	vmov	s15, r3
 8004332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004336:	ed97 6a02 	vldr	s12, [r7, #8]
 800433a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80043f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800433e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800434a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800434e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004352:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004356:	e021      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004362:	eddf 6a26 	vldr	s13, [pc, #152]	; 80043fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800436a:	4b1e      	ldr	r3, [pc, #120]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004372:	ee07 3a90 	vmov	s15, r3
 8004376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800437a:	ed97 6a02 	vldr	s12, [r7, #8]
 800437e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80043f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800438a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800438e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004396:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800439a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800439c:	4b11      	ldr	r3, [pc, #68]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	0a5b      	lsrs	r3, r3, #9
 80043a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043a6:	3301      	adds	r3, #1
 80043a8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	ee07 3a90 	vmov	s15, r3
 80043b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80043b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043c0:	ee17 3a90 	vmov	r3, s15
 80043c4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80043c6:	e005      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61bb      	str	r3, [r7, #24]
    break;
 80043cc:	e002      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80043ce:	4b07      	ldr	r3, [pc, #28]	; (80043ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043d0:	61bb      	str	r3, [r7, #24]
    break;
 80043d2:	bf00      	nop
  }

  return sysclockfreq;
 80043d4:	69bb      	ldr	r3, [r7, #24]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3724      	adds	r7, #36	; 0x24
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	58024400 	.word	0x58024400
 80043e8:	03d09000 	.word	0x03d09000
 80043ec:	003d0900 	.word	0x003d0900
 80043f0:	007a1200 	.word	0x007a1200
 80043f4:	46000000 	.word	0x46000000
 80043f8:	4c742400 	.word	0x4c742400
 80043fc:	4a742400 	.word	0x4a742400
 8004400:	4af42400 	.word	0x4af42400

08004404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800440a:	f7ff fe81 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 800440e:	4602      	mov	r2, r0
 8004410:	4b10      	ldr	r3, [pc, #64]	; (8004454 <HAL_RCC_GetHCLKFreq+0x50>)
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	0a1b      	lsrs	r3, r3, #8
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	490f      	ldr	r1, [pc, #60]	; (8004458 <HAL_RCC_GetHCLKFreq+0x54>)
 800441c:	5ccb      	ldrb	r3, [r1, r3]
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	fa22 f303 	lsr.w	r3, r2, r3
 8004426:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004428:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <HAL_RCC_GetHCLKFreq+0x50>)
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	f003 030f 	and.w	r3, r3, #15
 8004430:	4a09      	ldr	r2, [pc, #36]	; (8004458 <HAL_RCC_GetHCLKFreq+0x54>)
 8004432:	5cd3      	ldrb	r3, [r2, r3]
 8004434:	f003 031f 	and.w	r3, r3, #31
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	fa22 f303 	lsr.w	r3, r2, r3
 800443e:	4a07      	ldr	r2, [pc, #28]	; (800445c <HAL_RCC_GetHCLKFreq+0x58>)
 8004440:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004442:	4a07      	ldr	r2, [pc, #28]	; (8004460 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004448:	4b04      	ldr	r3, [pc, #16]	; (800445c <HAL_RCC_GetHCLKFreq+0x58>)
 800444a:	681b      	ldr	r3, [r3, #0]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	58024400 	.word	0x58024400
 8004458:	08014314 	.word	0x08014314
 800445c:	24000004 	.word	0x24000004
 8004460:	24000000 	.word	0x24000000

08004464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e049      	b.n	800450a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fc fa5e 	bl	800094c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3304      	adds	r3, #4
 80044a0:	4619      	mov	r1, r3
 80044a2:	4610      	mov	r0, r2
 80044a4:	f000 fafc 	bl	8004aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b01      	cmp	r3, #1
 8004526:	d001      	beq.n	800452c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e05e      	b.n	80045ea <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a2b      	ldr	r2, [pc, #172]	; (80045f8 <HAL_TIM_Base_Start_IT+0xe4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d02c      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x94>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004556:	d027      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x94>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a27      	ldr	r2, [pc, #156]	; (80045fc <HAL_TIM_Base_Start_IT+0xe8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d022      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x94>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a26      	ldr	r2, [pc, #152]	; (8004600 <HAL_TIM_Base_Start_IT+0xec>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d01d      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x94>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a24      	ldr	r2, [pc, #144]	; (8004604 <HAL_TIM_Base_Start_IT+0xf0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d018      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x94>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a23      	ldr	r2, [pc, #140]	; (8004608 <HAL_TIM_Base_Start_IT+0xf4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d013      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x94>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a21      	ldr	r2, [pc, #132]	; (800460c <HAL_TIM_Base_Start_IT+0xf8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00e      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x94>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a20      	ldr	r2, [pc, #128]	; (8004610 <HAL_TIM_Base_Start_IT+0xfc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d009      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x94>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a1e      	ldr	r2, [pc, #120]	; (8004614 <HAL_TIM_Base_Start_IT+0x100>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d004      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x94>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a1d      	ldr	r2, [pc, #116]	; (8004618 <HAL_TIM_Base_Start_IT+0x104>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d115      	bne.n	80045d4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	4b1b      	ldr	r3, [pc, #108]	; (800461c <HAL_TIM_Base_Start_IT+0x108>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b06      	cmp	r3, #6
 80045b8:	d015      	beq.n	80045e6 <HAL_TIM_Base_Start_IT+0xd2>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c0:	d011      	beq.n	80045e6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f042 0201 	orr.w	r2, r2, #1
 80045d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d2:	e008      	b.n	80045e6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	e000      	b.n	80045e8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40010000 	.word	0x40010000
 80045fc:	40000400 	.word	0x40000400
 8004600:	40000800 	.word	0x40000800
 8004604:	40000c00 	.word	0x40000c00
 8004608:	40010400 	.word	0x40010400
 800460c:	40001800 	.word	0x40001800
 8004610:	40014000 	.word	0x40014000
 8004614:	4000e000 	.word	0x4000e000
 8004618:	4000e400 	.word	0x4000e400
 800461c:	00010007 	.word	0x00010007

08004620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b02      	cmp	r3, #2
 8004634:	d122      	bne.n	800467c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b02      	cmp	r3, #2
 8004642:	d11b      	bne.n	800467c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0202 	mvn.w	r2, #2
 800464c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f9fe 	bl	8004a64 <HAL_TIM_IC_CaptureCallback>
 8004668:	e005      	b.n	8004676 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f9f0 	bl	8004a50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fa01 	bl	8004a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b04      	cmp	r3, #4
 8004688:	d122      	bne.n	80046d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b04      	cmp	r3, #4
 8004696:	d11b      	bne.n	80046d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0204 	mvn.w	r2, #4
 80046a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2202      	movs	r2, #2
 80046a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f9d4 	bl	8004a64 <HAL_TIM_IC_CaptureCallback>
 80046bc:	e005      	b.n	80046ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f9c6 	bl	8004a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f9d7 	bl	8004a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d122      	bne.n	8004724 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d11b      	bne.n	8004724 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f06f 0208 	mvn.w	r2, #8
 80046f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2204      	movs	r2, #4
 80046fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f9aa 	bl	8004a64 <HAL_TIM_IC_CaptureCallback>
 8004710:	e005      	b.n	800471e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f99c 	bl	8004a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f9ad 	bl	8004a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	2b10      	cmp	r3, #16
 8004730:	d122      	bne.n	8004778 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b10      	cmp	r3, #16
 800473e:	d11b      	bne.n	8004778 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f06f 0210 	mvn.w	r2, #16
 8004748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2208      	movs	r2, #8
 800474e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f980 	bl	8004a64 <HAL_TIM_IC_CaptureCallback>
 8004764:	e005      	b.n	8004772 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f972 	bl	8004a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f983 	bl	8004a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b01      	cmp	r3, #1
 8004784:	d10e      	bne.n	80047a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b01      	cmp	r3, #1
 8004792:	d107      	bne.n	80047a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0201 	mvn.w	r2, #1
 800479c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7fc fa84 	bl	8000cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ae:	2b80      	cmp	r3, #128	; 0x80
 80047b0:	d10e      	bne.n	80047d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047bc:	2b80      	cmp	r3, #128	; 0x80
 80047be:	d107      	bne.n	80047d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fb52 	bl	8004e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047de:	d10e      	bne.n	80047fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ea:	2b80      	cmp	r3, #128	; 0x80
 80047ec:	d107      	bne.n	80047fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80047f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fb45 	bl	8004e88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004808:	2b40      	cmp	r3, #64	; 0x40
 800480a:	d10e      	bne.n	800482a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004816:	2b40      	cmp	r3, #64	; 0x40
 8004818:	d107      	bne.n	800482a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f931 	bl	8004a8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f003 0320 	and.w	r3, r3, #32
 8004834:	2b20      	cmp	r3, #32
 8004836:	d10e      	bne.n	8004856 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b20      	cmp	r3, #32
 8004844:	d107      	bne.n	8004856 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f06f 0220 	mvn.w	r2, #32
 800484e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fb05 	bl	8004e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004856:	bf00      	nop
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
	...

08004860 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_TIM_ConfigClockSource+0x1c>
 8004878:	2302      	movs	r3, #2
 800487a:	e0dc      	b.n	8004a36 <HAL_TIM_ConfigClockSource+0x1d6>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	4b6a      	ldr	r3, [pc, #424]	; (8004a40 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004898:	4013      	ands	r3, r2
 800489a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a64      	ldr	r2, [pc, #400]	; (8004a44 <HAL_TIM_ConfigClockSource+0x1e4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	f000 80a9 	beq.w	8004a0a <HAL_TIM_ConfigClockSource+0x1aa>
 80048b8:	4a62      	ldr	r2, [pc, #392]	; (8004a44 <HAL_TIM_ConfigClockSource+0x1e4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	f200 80ae 	bhi.w	8004a1c <HAL_TIM_ConfigClockSource+0x1bc>
 80048c0:	4a61      	ldr	r2, [pc, #388]	; (8004a48 <HAL_TIM_ConfigClockSource+0x1e8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	f000 80a1 	beq.w	8004a0a <HAL_TIM_ConfigClockSource+0x1aa>
 80048c8:	4a5f      	ldr	r2, [pc, #380]	; (8004a48 <HAL_TIM_ConfigClockSource+0x1e8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	f200 80a6 	bhi.w	8004a1c <HAL_TIM_ConfigClockSource+0x1bc>
 80048d0:	4a5e      	ldr	r2, [pc, #376]	; (8004a4c <HAL_TIM_ConfigClockSource+0x1ec>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	f000 8099 	beq.w	8004a0a <HAL_TIM_ConfigClockSource+0x1aa>
 80048d8:	4a5c      	ldr	r2, [pc, #368]	; (8004a4c <HAL_TIM_ConfigClockSource+0x1ec>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	f200 809e 	bhi.w	8004a1c <HAL_TIM_ConfigClockSource+0x1bc>
 80048e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80048e4:	f000 8091 	beq.w	8004a0a <HAL_TIM_ConfigClockSource+0x1aa>
 80048e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80048ec:	f200 8096 	bhi.w	8004a1c <HAL_TIM_ConfigClockSource+0x1bc>
 80048f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048f4:	f000 8089 	beq.w	8004a0a <HAL_TIM_ConfigClockSource+0x1aa>
 80048f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048fc:	f200 808e 	bhi.w	8004a1c <HAL_TIM_ConfigClockSource+0x1bc>
 8004900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004904:	d03e      	beq.n	8004984 <HAL_TIM_ConfigClockSource+0x124>
 8004906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800490a:	f200 8087 	bhi.w	8004a1c <HAL_TIM_ConfigClockSource+0x1bc>
 800490e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004912:	f000 8086 	beq.w	8004a22 <HAL_TIM_ConfigClockSource+0x1c2>
 8004916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491a:	d87f      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1bc>
 800491c:	2b70      	cmp	r3, #112	; 0x70
 800491e:	d01a      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0xf6>
 8004920:	2b70      	cmp	r3, #112	; 0x70
 8004922:	d87b      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1bc>
 8004924:	2b60      	cmp	r3, #96	; 0x60
 8004926:	d050      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x16a>
 8004928:	2b60      	cmp	r3, #96	; 0x60
 800492a:	d877      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1bc>
 800492c:	2b50      	cmp	r3, #80	; 0x50
 800492e:	d03c      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x14a>
 8004930:	2b50      	cmp	r3, #80	; 0x50
 8004932:	d873      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1bc>
 8004934:	2b40      	cmp	r3, #64	; 0x40
 8004936:	d058      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x18a>
 8004938:	2b40      	cmp	r3, #64	; 0x40
 800493a:	d86f      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1bc>
 800493c:	2b30      	cmp	r3, #48	; 0x30
 800493e:	d064      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x1aa>
 8004940:	2b30      	cmp	r3, #48	; 0x30
 8004942:	d86b      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1bc>
 8004944:	2b20      	cmp	r3, #32
 8004946:	d060      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x1aa>
 8004948:	2b20      	cmp	r3, #32
 800494a:	d867      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1bc>
 800494c:	2b00      	cmp	r3, #0
 800494e:	d05c      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x1aa>
 8004950:	2b10      	cmp	r3, #16
 8004952:	d05a      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x1aa>
 8004954:	e062      	b.n	8004a1c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6899      	ldr	r1, [r3, #8]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f000 f9bf 	bl	8004ce8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004978:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	609a      	str	r2, [r3, #8]
      break;
 8004982:	e04f      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	6899      	ldr	r1, [r3, #8]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f000 f9a8 	bl	8004ce8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049a6:	609a      	str	r2, [r3, #8]
      break;
 80049a8:	e03c      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6859      	ldr	r1, [r3, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	461a      	mov	r2, r3
 80049b8:	f000 f918 	bl	8004bec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2150      	movs	r1, #80	; 0x50
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 f972 	bl	8004cac <TIM_ITRx_SetConfig>
      break;
 80049c8:	e02c      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6818      	ldr	r0, [r3, #0]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	6859      	ldr	r1, [r3, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	461a      	mov	r2, r3
 80049d8:	f000 f937 	bl	8004c4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2160      	movs	r1, #96	; 0x60
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 f962 	bl	8004cac <TIM_ITRx_SetConfig>
      break;
 80049e8:	e01c      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6859      	ldr	r1, [r3, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	461a      	mov	r2, r3
 80049f8:	f000 f8f8 	bl	8004bec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2140      	movs	r1, #64	; 0x40
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 f952 	bl	8004cac <TIM_ITRx_SetConfig>
      break;
 8004a08:	e00c      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4619      	mov	r1, r3
 8004a14:	4610      	mov	r0, r2
 8004a16:	f000 f949 	bl	8004cac <TIM_ITRx_SetConfig>
      break;
 8004a1a:	e003      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a20:	e000      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004a22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	ffceff88 	.word	0xffceff88
 8004a44:	00100040 	.word	0x00100040
 8004a48:	00100030 	.word	0x00100030
 8004a4c:	00100020 	.word	0x00100020

08004a50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a44      	ldr	r2, [pc, #272]	; (8004bc4 <TIM_Base_SetConfig+0x124>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d013      	beq.n	8004ae0 <TIM_Base_SetConfig+0x40>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004abe:	d00f      	beq.n	8004ae0 <TIM_Base_SetConfig+0x40>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a41      	ldr	r2, [pc, #260]	; (8004bc8 <TIM_Base_SetConfig+0x128>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00b      	beq.n	8004ae0 <TIM_Base_SetConfig+0x40>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a40      	ldr	r2, [pc, #256]	; (8004bcc <TIM_Base_SetConfig+0x12c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d007      	beq.n	8004ae0 <TIM_Base_SetConfig+0x40>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a3f      	ldr	r2, [pc, #252]	; (8004bd0 <TIM_Base_SetConfig+0x130>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d003      	beq.n	8004ae0 <TIM_Base_SetConfig+0x40>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a3e      	ldr	r2, [pc, #248]	; (8004bd4 <TIM_Base_SetConfig+0x134>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d108      	bne.n	8004af2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a33      	ldr	r2, [pc, #204]	; (8004bc4 <TIM_Base_SetConfig+0x124>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d027      	beq.n	8004b4a <TIM_Base_SetConfig+0xaa>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b00:	d023      	beq.n	8004b4a <TIM_Base_SetConfig+0xaa>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a30      	ldr	r2, [pc, #192]	; (8004bc8 <TIM_Base_SetConfig+0x128>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d01f      	beq.n	8004b4a <TIM_Base_SetConfig+0xaa>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a2f      	ldr	r2, [pc, #188]	; (8004bcc <TIM_Base_SetConfig+0x12c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d01b      	beq.n	8004b4a <TIM_Base_SetConfig+0xaa>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a2e      	ldr	r2, [pc, #184]	; (8004bd0 <TIM_Base_SetConfig+0x130>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d017      	beq.n	8004b4a <TIM_Base_SetConfig+0xaa>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a2d      	ldr	r2, [pc, #180]	; (8004bd4 <TIM_Base_SetConfig+0x134>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d013      	beq.n	8004b4a <TIM_Base_SetConfig+0xaa>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a2c      	ldr	r2, [pc, #176]	; (8004bd8 <TIM_Base_SetConfig+0x138>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00f      	beq.n	8004b4a <TIM_Base_SetConfig+0xaa>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a2b      	ldr	r2, [pc, #172]	; (8004bdc <TIM_Base_SetConfig+0x13c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00b      	beq.n	8004b4a <TIM_Base_SetConfig+0xaa>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a2a      	ldr	r2, [pc, #168]	; (8004be0 <TIM_Base_SetConfig+0x140>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d007      	beq.n	8004b4a <TIM_Base_SetConfig+0xaa>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a29      	ldr	r2, [pc, #164]	; (8004be4 <TIM_Base_SetConfig+0x144>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d003      	beq.n	8004b4a <TIM_Base_SetConfig+0xaa>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a28      	ldr	r2, [pc, #160]	; (8004be8 <TIM_Base_SetConfig+0x148>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d108      	bne.n	8004b5c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a10      	ldr	r2, [pc, #64]	; (8004bc4 <TIM_Base_SetConfig+0x124>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00f      	beq.n	8004ba8 <TIM_Base_SetConfig+0x108>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a12      	ldr	r2, [pc, #72]	; (8004bd4 <TIM_Base_SetConfig+0x134>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00b      	beq.n	8004ba8 <TIM_Base_SetConfig+0x108>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a11      	ldr	r2, [pc, #68]	; (8004bd8 <TIM_Base_SetConfig+0x138>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d007      	beq.n	8004ba8 <TIM_Base_SetConfig+0x108>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a10      	ldr	r2, [pc, #64]	; (8004bdc <TIM_Base_SetConfig+0x13c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d003      	beq.n	8004ba8 <TIM_Base_SetConfig+0x108>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a0f      	ldr	r2, [pc, #60]	; (8004be0 <TIM_Base_SetConfig+0x140>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d103      	bne.n	8004bb0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	691a      	ldr	r2, [r3, #16]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	615a      	str	r2, [r3, #20]
}
 8004bb6:	bf00      	nop
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40010000 	.word	0x40010000
 8004bc8:	40000400 	.word	0x40000400
 8004bcc:	40000800 	.word	0x40000800
 8004bd0:	40000c00 	.word	0x40000c00
 8004bd4:	40010400 	.word	0x40010400
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40014400 	.word	0x40014400
 8004be0:	40014800 	.word	0x40014800
 8004be4:	4000e000 	.word	0x4000e000
 8004be8:	4000e400 	.word	0x4000e400

08004bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	f023 0201 	bic.w	r2, r3, #1
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f023 030a 	bic.w	r3, r3, #10
 8004c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	621a      	str	r2, [r3, #32]
}
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b087      	sub	sp, #28
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f023 0210 	bic.w	r2, r3, #16
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	031b      	lsls	r3, r3, #12
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	621a      	str	r2, [r3, #32]
}
 8004c9e:	bf00      	nop
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
	...

08004cac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <TIM_ITRx_SetConfig+0x38>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f043 0307 	orr.w	r3, r3, #7
 8004cce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	609a      	str	r2, [r3, #8]
}
 8004cd6:	bf00      	nop
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	ffcfff8f 	.word	0xffcfff8f

08004ce8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	021a      	lsls	r2, r3, #8
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	609a      	str	r2, [r3, #8]
}
 8004d1c:	bf00      	nop
 8004d1e:	371c      	adds	r7, #28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e077      	b.n	8004e30 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a35      	ldr	r2, [pc, #212]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a34      	ldr	r2, [pc, #208]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d108      	bne.n	8004d86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a25      	ldr	r2, [pc, #148]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d02c      	beq.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db2:	d027      	beq.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a22      	ldr	r2, [pc, #136]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d022      	beq.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a21      	ldr	r2, [pc, #132]	; (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d01d      	beq.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a1f      	ldr	r2, [pc, #124]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d018      	beq.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a1a      	ldr	r2, [pc, #104]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d013      	beq.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a1b      	ldr	r2, [pc, #108]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d00e      	beq.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a1a      	ldr	r2, [pc, #104]	; (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d009      	beq.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a18      	ldr	r2, [pc, #96]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d004      	beq.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a17      	ldr	r2, [pc, #92]	; (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d10c      	bne.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	40010000 	.word	0x40010000
 8004e40:	40010400 	.word	0x40010400
 8004e44:	40000400 	.word	0x40000400
 8004e48:	40000800 	.word	0x40000800
 8004e4c:	40000c00 	.word	0x40000c00
 8004e50:	40001800 	.word	0x40001800
 8004e54:	40014000 	.word	0x40014000
 8004e58:	4000e000 	.word	0x4000e000
 8004e5c:	4000e400 	.word	0x4000e400

08004e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004ea2:	4b8d      	ldr	r3, [pc, #564]	; (80050d8 <MX_LWIP_Init+0x23c>)
 8004ea4:	22c0      	movs	r2, #192	; 0xc0
 8004ea6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004ea8:	4b8b      	ldr	r3, [pc, #556]	; (80050d8 <MX_LWIP_Init+0x23c>)
 8004eaa:	22a8      	movs	r2, #168	; 0xa8
 8004eac:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004eae:	4b8a      	ldr	r3, [pc, #552]	; (80050d8 <MX_LWIP_Init+0x23c>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8004eb4:	4b88      	ldr	r3, [pc, #544]	; (80050d8 <MX_LWIP_Init+0x23c>)
 8004eb6:	227b      	movs	r2, #123	; 0x7b
 8004eb8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004eba:	4b88      	ldr	r3, [pc, #544]	; (80050dc <MX_LWIP_Init+0x240>)
 8004ebc:	22ff      	movs	r2, #255	; 0xff
 8004ebe:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004ec0:	4b86      	ldr	r3, [pc, #536]	; (80050dc <MX_LWIP_Init+0x240>)
 8004ec2:	22ff      	movs	r2, #255	; 0xff
 8004ec4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004ec6:	4b85      	ldr	r3, [pc, #532]	; (80050dc <MX_LWIP_Init+0x240>)
 8004ec8:	22ff      	movs	r2, #255	; 0xff
 8004eca:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004ecc:	4b83      	ldr	r3, [pc, #524]	; (80050dc <MX_LWIP_Init+0x240>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004ed2:	4b83      	ldr	r3, [pc, #524]	; (80050e0 <MX_LWIP_Init+0x244>)
 8004ed4:	22c0      	movs	r2, #192	; 0xc0
 8004ed6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004ed8:	4b81      	ldr	r3, [pc, #516]	; (80050e0 <MX_LWIP_Init+0x244>)
 8004eda:	22a8      	movs	r2, #168	; 0xa8
 8004edc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004ede:	4b80      	ldr	r3, [pc, #512]	; (80050e0 <MX_LWIP_Init+0x244>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004ee4:	4b7e      	ldr	r3, [pc, #504]	; (80050e0 <MX_LWIP_Init+0x244>)
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004eea:	f000 fde7 	bl	8005abc <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004eee:	4b7a      	ldr	r3, [pc, #488]	; (80050d8 <MX_LWIP_Init+0x23c>)
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	061a      	lsls	r2, r3, #24
 8004ef4:	4b78      	ldr	r3, [pc, #480]	; (80050d8 <MX_LWIP_Init+0x23c>)
 8004ef6:	785b      	ldrb	r3, [r3, #1]
 8004ef8:	041b      	lsls	r3, r3, #16
 8004efa:	431a      	orrs	r2, r3
 8004efc:	4b76      	ldr	r3, [pc, #472]	; (80050d8 <MX_LWIP_Init+0x23c>)
 8004efe:	789b      	ldrb	r3, [r3, #2]
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	4313      	orrs	r3, r2
 8004f04:	4a74      	ldr	r2, [pc, #464]	; (80050d8 <MX_LWIP_Init+0x23c>)
 8004f06:	78d2      	ldrb	r2, [r2, #3]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	061a      	lsls	r2, r3, #24
 8004f0c:	4b72      	ldr	r3, [pc, #456]	; (80050d8 <MX_LWIP_Init+0x23c>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	0619      	lsls	r1, r3, #24
 8004f12:	4b71      	ldr	r3, [pc, #452]	; (80050d8 <MX_LWIP_Init+0x23c>)
 8004f14:	785b      	ldrb	r3, [r3, #1]
 8004f16:	041b      	lsls	r3, r3, #16
 8004f18:	4319      	orrs	r1, r3
 8004f1a:	4b6f      	ldr	r3, [pc, #444]	; (80050d8 <MX_LWIP_Init+0x23c>)
 8004f1c:	789b      	ldrb	r3, [r3, #2]
 8004f1e:	021b      	lsls	r3, r3, #8
 8004f20:	430b      	orrs	r3, r1
 8004f22:	496d      	ldr	r1, [pc, #436]	; (80050d8 <MX_LWIP_Init+0x23c>)
 8004f24:	78c9      	ldrb	r1, [r1, #3]
 8004f26:	430b      	orrs	r3, r1
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	4b69      	ldr	r3, [pc, #420]	; (80050d8 <MX_LWIP_Init+0x23c>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	0619      	lsls	r1, r3, #24
 8004f36:	4b68      	ldr	r3, [pc, #416]	; (80050d8 <MX_LWIP_Init+0x23c>)
 8004f38:	785b      	ldrb	r3, [r3, #1]
 8004f3a:	041b      	lsls	r3, r3, #16
 8004f3c:	4319      	orrs	r1, r3
 8004f3e:	4b66      	ldr	r3, [pc, #408]	; (80050d8 <MX_LWIP_Init+0x23c>)
 8004f40:	789b      	ldrb	r3, [r3, #2]
 8004f42:	021b      	lsls	r3, r3, #8
 8004f44:	430b      	orrs	r3, r1
 8004f46:	4964      	ldr	r1, [pc, #400]	; (80050d8 <MX_LWIP_Init+0x23c>)
 8004f48:	78c9      	ldrb	r1, [r1, #3]
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	0a1b      	lsrs	r3, r3, #8
 8004f4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004f52:	431a      	orrs	r2, r3
 8004f54:	4b60      	ldr	r3, [pc, #384]	; (80050d8 <MX_LWIP_Init+0x23c>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	0619      	lsls	r1, r3, #24
 8004f5a:	4b5f      	ldr	r3, [pc, #380]	; (80050d8 <MX_LWIP_Init+0x23c>)
 8004f5c:	785b      	ldrb	r3, [r3, #1]
 8004f5e:	041b      	lsls	r3, r3, #16
 8004f60:	4319      	orrs	r1, r3
 8004f62:	4b5d      	ldr	r3, [pc, #372]	; (80050d8 <MX_LWIP_Init+0x23c>)
 8004f64:	789b      	ldrb	r3, [r3, #2]
 8004f66:	021b      	lsls	r3, r3, #8
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	495b      	ldr	r1, [pc, #364]	; (80050d8 <MX_LWIP_Init+0x23c>)
 8004f6c:	78c9      	ldrb	r1, [r1, #3]
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	0e1b      	lsrs	r3, r3, #24
 8004f72:	4313      	orrs	r3, r2
 8004f74:	4a5b      	ldr	r2, [pc, #364]	; (80050e4 <MX_LWIP_Init+0x248>)
 8004f76:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004f78:	4b58      	ldr	r3, [pc, #352]	; (80050dc <MX_LWIP_Init+0x240>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	061a      	lsls	r2, r3, #24
 8004f7e:	4b57      	ldr	r3, [pc, #348]	; (80050dc <MX_LWIP_Init+0x240>)
 8004f80:	785b      	ldrb	r3, [r3, #1]
 8004f82:	041b      	lsls	r3, r3, #16
 8004f84:	431a      	orrs	r2, r3
 8004f86:	4b55      	ldr	r3, [pc, #340]	; (80050dc <MX_LWIP_Init+0x240>)
 8004f88:	789b      	ldrb	r3, [r3, #2]
 8004f8a:	021b      	lsls	r3, r3, #8
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	4a53      	ldr	r2, [pc, #332]	; (80050dc <MX_LWIP_Init+0x240>)
 8004f90:	78d2      	ldrb	r2, [r2, #3]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	061a      	lsls	r2, r3, #24
 8004f96:	4b51      	ldr	r3, [pc, #324]	; (80050dc <MX_LWIP_Init+0x240>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	0619      	lsls	r1, r3, #24
 8004f9c:	4b4f      	ldr	r3, [pc, #316]	; (80050dc <MX_LWIP_Init+0x240>)
 8004f9e:	785b      	ldrb	r3, [r3, #1]
 8004fa0:	041b      	lsls	r3, r3, #16
 8004fa2:	4319      	orrs	r1, r3
 8004fa4:	4b4d      	ldr	r3, [pc, #308]	; (80050dc <MX_LWIP_Init+0x240>)
 8004fa6:	789b      	ldrb	r3, [r3, #2]
 8004fa8:	021b      	lsls	r3, r3, #8
 8004faa:	430b      	orrs	r3, r1
 8004fac:	494b      	ldr	r1, [pc, #300]	; (80050dc <MX_LWIP_Init+0x240>)
 8004fae:	78c9      	ldrb	r1, [r1, #3]
 8004fb0:	430b      	orrs	r3, r1
 8004fb2:	021b      	lsls	r3, r3, #8
 8004fb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	4b48      	ldr	r3, [pc, #288]	; (80050dc <MX_LWIP_Init+0x240>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	0619      	lsls	r1, r3, #24
 8004fc0:	4b46      	ldr	r3, [pc, #280]	; (80050dc <MX_LWIP_Init+0x240>)
 8004fc2:	785b      	ldrb	r3, [r3, #1]
 8004fc4:	041b      	lsls	r3, r3, #16
 8004fc6:	4319      	orrs	r1, r3
 8004fc8:	4b44      	ldr	r3, [pc, #272]	; (80050dc <MX_LWIP_Init+0x240>)
 8004fca:	789b      	ldrb	r3, [r3, #2]
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	430b      	orrs	r3, r1
 8004fd0:	4942      	ldr	r1, [pc, #264]	; (80050dc <MX_LWIP_Init+0x240>)
 8004fd2:	78c9      	ldrb	r1, [r1, #3]
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	0a1b      	lsrs	r3, r3, #8
 8004fd8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	4b3f      	ldr	r3, [pc, #252]	; (80050dc <MX_LWIP_Init+0x240>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	0619      	lsls	r1, r3, #24
 8004fe4:	4b3d      	ldr	r3, [pc, #244]	; (80050dc <MX_LWIP_Init+0x240>)
 8004fe6:	785b      	ldrb	r3, [r3, #1]
 8004fe8:	041b      	lsls	r3, r3, #16
 8004fea:	4319      	orrs	r1, r3
 8004fec:	4b3b      	ldr	r3, [pc, #236]	; (80050dc <MX_LWIP_Init+0x240>)
 8004fee:	789b      	ldrb	r3, [r3, #2]
 8004ff0:	021b      	lsls	r3, r3, #8
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	4939      	ldr	r1, [pc, #228]	; (80050dc <MX_LWIP_Init+0x240>)
 8004ff6:	78c9      	ldrb	r1, [r1, #3]
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	0e1b      	lsrs	r3, r3, #24
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	4a3a      	ldr	r2, [pc, #232]	; (80050e8 <MX_LWIP_Init+0x24c>)
 8005000:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005002:	4b37      	ldr	r3, [pc, #220]	; (80050e0 <MX_LWIP_Init+0x244>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	061a      	lsls	r2, r3, #24
 8005008:	4b35      	ldr	r3, [pc, #212]	; (80050e0 <MX_LWIP_Init+0x244>)
 800500a:	785b      	ldrb	r3, [r3, #1]
 800500c:	041b      	lsls	r3, r3, #16
 800500e:	431a      	orrs	r2, r3
 8005010:	4b33      	ldr	r3, [pc, #204]	; (80050e0 <MX_LWIP_Init+0x244>)
 8005012:	789b      	ldrb	r3, [r3, #2]
 8005014:	021b      	lsls	r3, r3, #8
 8005016:	4313      	orrs	r3, r2
 8005018:	4a31      	ldr	r2, [pc, #196]	; (80050e0 <MX_LWIP_Init+0x244>)
 800501a:	78d2      	ldrb	r2, [r2, #3]
 800501c:	4313      	orrs	r3, r2
 800501e:	061a      	lsls	r2, r3, #24
 8005020:	4b2f      	ldr	r3, [pc, #188]	; (80050e0 <MX_LWIP_Init+0x244>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	0619      	lsls	r1, r3, #24
 8005026:	4b2e      	ldr	r3, [pc, #184]	; (80050e0 <MX_LWIP_Init+0x244>)
 8005028:	785b      	ldrb	r3, [r3, #1]
 800502a:	041b      	lsls	r3, r3, #16
 800502c:	4319      	orrs	r1, r3
 800502e:	4b2c      	ldr	r3, [pc, #176]	; (80050e0 <MX_LWIP_Init+0x244>)
 8005030:	789b      	ldrb	r3, [r3, #2]
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	430b      	orrs	r3, r1
 8005036:	492a      	ldr	r1, [pc, #168]	; (80050e0 <MX_LWIP_Init+0x244>)
 8005038:	78c9      	ldrb	r1, [r1, #3]
 800503a:	430b      	orrs	r3, r1
 800503c:	021b      	lsls	r3, r3, #8
 800503e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005042:	431a      	orrs	r2, r3
 8005044:	4b26      	ldr	r3, [pc, #152]	; (80050e0 <MX_LWIP_Init+0x244>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	0619      	lsls	r1, r3, #24
 800504a:	4b25      	ldr	r3, [pc, #148]	; (80050e0 <MX_LWIP_Init+0x244>)
 800504c:	785b      	ldrb	r3, [r3, #1]
 800504e:	041b      	lsls	r3, r3, #16
 8005050:	4319      	orrs	r1, r3
 8005052:	4b23      	ldr	r3, [pc, #140]	; (80050e0 <MX_LWIP_Init+0x244>)
 8005054:	789b      	ldrb	r3, [r3, #2]
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	430b      	orrs	r3, r1
 800505a:	4921      	ldr	r1, [pc, #132]	; (80050e0 <MX_LWIP_Init+0x244>)
 800505c:	78c9      	ldrb	r1, [r1, #3]
 800505e:	430b      	orrs	r3, r1
 8005060:	0a1b      	lsrs	r3, r3, #8
 8005062:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005066:	431a      	orrs	r2, r3
 8005068:	4b1d      	ldr	r3, [pc, #116]	; (80050e0 <MX_LWIP_Init+0x244>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	0619      	lsls	r1, r3, #24
 800506e:	4b1c      	ldr	r3, [pc, #112]	; (80050e0 <MX_LWIP_Init+0x244>)
 8005070:	785b      	ldrb	r3, [r3, #1]
 8005072:	041b      	lsls	r3, r3, #16
 8005074:	4319      	orrs	r1, r3
 8005076:	4b1a      	ldr	r3, [pc, #104]	; (80050e0 <MX_LWIP_Init+0x244>)
 8005078:	789b      	ldrb	r3, [r3, #2]
 800507a:	021b      	lsls	r3, r3, #8
 800507c:	430b      	orrs	r3, r1
 800507e:	4918      	ldr	r1, [pc, #96]	; (80050e0 <MX_LWIP_Init+0x244>)
 8005080:	78c9      	ldrb	r1, [r1, #3]
 8005082:	430b      	orrs	r3, r1
 8005084:	0e1b      	lsrs	r3, r3, #24
 8005086:	4313      	orrs	r3, r2
 8005088:	4a18      	ldr	r2, [pc, #96]	; (80050ec <MX_LWIP_Init+0x250>)
 800508a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800508c:	4b18      	ldr	r3, [pc, #96]	; (80050f0 <MX_LWIP_Init+0x254>)
 800508e:	9302      	str	r3, [sp, #8]
 8005090:	4b18      	ldr	r3, [pc, #96]	; (80050f4 <MX_LWIP_Init+0x258>)
 8005092:	9301      	str	r3, [sp, #4]
 8005094:	2300      	movs	r3, #0
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	4b14      	ldr	r3, [pc, #80]	; (80050ec <MX_LWIP_Init+0x250>)
 800509a:	4a13      	ldr	r2, [pc, #76]	; (80050e8 <MX_LWIP_Init+0x24c>)
 800509c:	4911      	ldr	r1, [pc, #68]	; (80050e4 <MX_LWIP_Init+0x248>)
 800509e:	4816      	ldr	r0, [pc, #88]	; (80050f8 <MX_LWIP_Init+0x25c>)
 80050a0:	f001 f9f4 	bl	800648c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80050a4:	4814      	ldr	r0, [pc, #80]	; (80050f8 <MX_LWIP_Init+0x25c>)
 80050a6:	f001 fba3 	bl	80067f0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80050aa:	4b13      	ldr	r3, [pc, #76]	; (80050f8 <MX_LWIP_Init+0x25c>)
 80050ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050b0:	089b      	lsrs	r3, r3, #2
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80050bc:	480e      	ldr	r0, [pc, #56]	; (80050f8 <MX_LWIP_Init+0x25c>)
 80050be:	f001 fba7 	bl	8006810 <netif_set_up>
 80050c2:	e002      	b.n	80050ca <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80050c4:	480c      	ldr	r0, [pc, #48]	; (80050f8 <MX_LWIP_Init+0x25c>)
 80050c6:	f001 fc0f 	bl	80068e8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80050ca:	490c      	ldr	r1, [pc, #48]	; (80050fc <MX_LWIP_Init+0x260>)
 80050cc:	480a      	ldr	r0, [pc, #40]	; (80050f8 <MX_LWIP_Init+0x25c>)
 80050ce:	f001 fca1 	bl	8006a14 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80050d2:	bf00      	nop
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	24000150 	.word	0x24000150
 80050dc:	24000154 	.word	0x24000154
 80050e0:	24000158 	.word	0x24000158
 80050e4:	24000144 	.word	0x24000144
 80050e8:	24000148 	.word	0x24000148
 80050ec:	2400014c 	.word	0x2400014c
 80050f0:	0801022d 	.word	0x0801022d
 80050f4:	080053b9 	.word	0x080053b9
 80050f8:	24000110 	.word	0x24000110
 80050fc:	08005101 	.word	0x08005101

08005100 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005120:	4b3f      	ldr	r3, [pc, #252]	; (8005220 <low_level_init+0x10c>)
 8005122:	4a40      	ldr	r2, [pc, #256]	; (8005224 <low_level_init+0x110>)
 8005124:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005126:	2300      	movs	r3, #0
 8005128:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800512a:	2380      	movs	r3, #128	; 0x80
 800512c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800512e:	23e1      	movs	r3, #225	; 0xe1
 8005130:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005132:	2300      	movs	r3, #0
 8005134:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005136:	2300      	movs	r3, #0
 8005138:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800513a:	2300      	movs	r3, #0
 800513c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800513e:	4a38      	ldr	r2, [pc, #224]	; (8005220 <low_level_init+0x10c>)
 8005140:	f107 0308 	add.w	r3, r7, #8
 8005144:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005146:	4b36      	ldr	r3, [pc, #216]	; (8005220 <low_level_init+0x10c>)
 8005148:	2201      	movs	r2, #1
 800514a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800514c:	4b34      	ldr	r3, [pc, #208]	; (8005220 <low_level_init+0x10c>)
 800514e:	4a36      	ldr	r2, [pc, #216]	; (8005228 <low_level_init+0x114>)
 8005150:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005152:	4b33      	ldr	r3, [pc, #204]	; (8005220 <low_level_init+0x10c>)
 8005154:	4a35      	ldr	r2, [pc, #212]	; (800522c <low_level_init+0x118>)
 8005156:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8005158:	4b31      	ldr	r3, [pc, #196]	; (8005220 <low_level_init+0x10c>)
 800515a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800515e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005160:	482f      	ldr	r0, [pc, #188]	; (8005220 <low_level_init+0x10c>)
 8005162:	f7fc fb4f 	bl	8001804 <HAL_ETH_Init>
 8005166:	4603      	mov	r3, r0
 8005168:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800516a:	2238      	movs	r2, #56	; 0x38
 800516c:	2100      	movs	r1, #0
 800516e:	4830      	ldr	r0, [pc, #192]	; (8005230 <low_level_init+0x11c>)
 8005170:	f00b f98e 	bl	8010490 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005174:	4b2e      	ldr	r3, [pc, #184]	; (8005230 <low_level_init+0x11c>)
 8005176:	2221      	movs	r2, #33	; 0x21
 8005178:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800517a:	4b2d      	ldr	r3, [pc, #180]	; (8005230 <low_level_init+0x11c>)
 800517c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005180:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005182:	4b2b      	ldr	r3, [pc, #172]	; (8005230 <low_level_init+0x11c>)
 8005184:	2200      	movs	r2, #0
 8005186:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005188:	482a      	ldr	r0, [pc, #168]	; (8005234 <low_level_init+0x120>)
 800518a:	f001 f847 	bl	800621c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2206      	movs	r2, #6
 8005192:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005196:	4b22      	ldr	r3, [pc, #136]	; (8005220 <low_level_init+0x10c>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	781a      	ldrb	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80051a2:	4b1f      	ldr	r3, [pc, #124]	; (8005220 <low_level_init+0x10c>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	785a      	ldrb	r2, [r3, #1]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80051ae:	4b1c      	ldr	r3, [pc, #112]	; (8005220 <low_level_init+0x10c>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	789a      	ldrb	r2, [r3, #2]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80051ba:	4b19      	ldr	r3, [pc, #100]	; (8005220 <low_level_init+0x10c>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	78da      	ldrb	r2, [r3, #3]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80051c6:	4b16      	ldr	r3, [pc, #88]	; (8005220 <low_level_init+0x10c>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	791a      	ldrb	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80051d2:	4b13      	ldr	r3, [pc, #76]	; (8005220 <low_level_init+0x10c>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	795a      	ldrb	r2, [r3, #5]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80051e4:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80051ec:	f043 030a 	orr.w	r3, r3, #10
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80051f8:	490f      	ldr	r1, [pc, #60]	; (8005238 <low_level_init+0x124>)
 80051fa:	4810      	ldr	r0, [pc, #64]	; (800523c <low_level_init+0x128>)
 80051fc:	f7fb ff6f 	bl	80010de <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005200:	480e      	ldr	r0, [pc, #56]	; (800523c <low_level_init+0x128>)
 8005202:	f7fb ff9e 	bl	8001142 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d103      	bne.n	8005214 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fa47 	bl	80056a0 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005212:	e001      	b.n	8005218 <low_level_init+0x104>
    Error_Handler();
 8005214:	f7fb fb7a 	bl	800090c <Error_Handler>
}
 8005218:	bf00      	nop
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	24000164 	.word	0x24000164
 8005224:	40028000 	.word	0x40028000
 8005228:	30000200 	.word	0x30000200
 800522c:	30000000 	.word	0x30000000
 8005230:	24000214 	.word	0x24000214
 8005234:	08014324 	.word	0x08014324
 8005238:	24000010 	.word	0x24000010
 800523c:	2400024c 	.word	0x2400024c

08005240 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b092      	sub	sp, #72	; 0x48
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800524e:	2300      	movs	r3, #0
 8005250:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005258:	f107 030c 	add.w	r3, r7, #12
 800525c:	2230      	movs	r2, #48	; 0x30
 800525e:	2100      	movs	r1, #0
 8005260:	4618      	mov	r0, r3
 8005262:	f00b f915 	bl	8010490 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005266:	f107 030c 	add.w	r3, r7, #12
 800526a:	2230      	movs	r2, #48	; 0x30
 800526c:	2100      	movs	r1, #0
 800526e:	4618      	mov	r0, r3
 8005270:	f00b f90e 	bl	8010490 <memset>

  for(q = p; q != NULL; q = q->next)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	643b      	str	r3, [r7, #64]	; 0x40
 8005278:	e045      	b.n	8005306 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800527a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800527c:	2b03      	cmp	r3, #3
 800527e:	d902      	bls.n	8005286 <low_level_output+0x46>
      return ERR_IF;
 8005280:	f06f 030b 	mvn.w	r3, #11
 8005284:	e055      	b.n	8005332 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005288:	6859      	ldr	r1, [r3, #4]
 800528a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800528c:	4613      	mov	r3, r2
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	4413      	add	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	3348      	adds	r3, #72	; 0x48
 8005296:	443b      	add	r3, r7
 8005298:	3b3c      	subs	r3, #60	; 0x3c
 800529a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800529c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800529e:	895b      	ldrh	r3, [r3, #10]
 80052a0:	4619      	mov	r1, r3
 80052a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052a4:	4613      	mov	r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	3348      	adds	r3, #72	; 0x48
 80052ae:	443b      	add	r3, r7
 80052b0:	3b38      	subs	r3, #56	; 0x38
 80052b2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80052b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d011      	beq.n	80052de <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80052ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052bc:	1e5a      	subs	r2, r3, #1
 80052be:	f107 000c 	add.w	r0, r7, #12
 80052c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052c4:	460b      	mov	r3, r1
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	440b      	add	r3, r1
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	18c1      	adds	r1, r0, r3
 80052ce:	4613      	mov	r3, r2
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	4413      	add	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	3348      	adds	r3, #72	; 0x48
 80052d8:	443b      	add	r3, r7
 80052da:	3b34      	subs	r3, #52	; 0x34
 80052dc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80052de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d109      	bne.n	80052fa <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80052e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052e8:	4613      	mov	r3, r2
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	3348      	adds	r3, #72	; 0x48
 80052f2:	443b      	add	r3, r7
 80052f4:	3b34      	subs	r3, #52	; 0x34
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]
    }

    i++;
 80052fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052fc:	3301      	adds	r3, #1
 80052fe:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	643b      	str	r3, [r7, #64]	; 0x40
 8005306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1b6      	bne.n	800527a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	891b      	ldrh	r3, [r3, #8]
 8005310:	461a      	mov	r2, r3
 8005312:	4b0a      	ldr	r3, [pc, #40]	; (800533c <low_level_output+0xfc>)
 8005314:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005316:	4a09      	ldr	r2, [pc, #36]	; (800533c <low_level_output+0xfc>)
 8005318:	f107 030c 	add.w	r3, r7, #12
 800531c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800531e:	4a07      	ldr	r2, [pc, #28]	; (800533c <low_level_output+0xfc>)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005324:	2214      	movs	r2, #20
 8005326:	4905      	ldr	r1, [pc, #20]	; (800533c <low_level_output+0xfc>)
 8005328:	4805      	ldr	r0, [pc, #20]	; (8005340 <low_level_output+0x100>)
 800532a:	f7fc fc03 	bl	8001b34 <HAL_ETH_Transmit>

  return errval;
 800532e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005332:	4618      	mov	r0, r3
 8005334:	3748      	adds	r7, #72	; 0x48
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	24000214 	.word	0x24000214
 8005340:	24000164 	.word	0x24000164

08005344 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005350:	4b07      	ldr	r3, [pc, #28]	; (8005370 <low_level_input+0x2c>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d105      	bne.n	8005364 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005358:	f107 030c 	add.w	r3, r7, #12
 800535c:	4619      	mov	r1, r3
 800535e:	4805      	ldr	r0, [pc, #20]	; (8005374 <low_level_input+0x30>)
 8005360:	f7fc fc7f 	bl	8001c62 <HAL_ETH_ReadData>
  }

  return p;
 8005364:	68fb      	ldr	r3, [r7, #12]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	24000160 	.word	0x24000160
 8005374:	24000164 	.word	0x24000164

08005378 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005380:	2300      	movs	r3, #0
 8005382:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7ff ffdd 	bl	8005344 <low_level_input>
 800538a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	4798      	blx	r3
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f001 feb6 	bl	8007114 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1ea      	bne.n	8005384 <ethernetif_input+0xc>
}
 80053ae:	bf00      	nop
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d106      	bne.n	80053d4 <ethernetif_init+0x1c>
 80053c6:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <ethernetif_init+0x48>)
 80053c8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80053cc:	490d      	ldr	r1, [pc, #52]	; (8005404 <ethernetif_init+0x4c>)
 80053ce:	480e      	ldr	r0, [pc, #56]	; (8005408 <ethernetif_init+0x50>)
 80053d0:	f00b f866 	bl	80104a0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2273      	movs	r2, #115	; 0x73
 80053d8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2274      	movs	r2, #116	; 0x74
 80053e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a09      	ldr	r2, [pc, #36]	; (800540c <ethernetif_init+0x54>)
 80053e8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a08      	ldr	r2, [pc, #32]	; (8005410 <ethernetif_init+0x58>)
 80053ee:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff fe8f 	bl	8005114 <low_level_init>

  return ERR_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	08011934 	.word	0x08011934
 8005404:	08011950 	.word	0x08011950
 8005408:	08011960 	.word	0x08011960
 800540c:	0800e579 	.word	0x0800e579
 8005410:	08005241 	.word	0x08005241

08005414 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005420:	68f9      	ldr	r1, [r7, #12]
 8005422:	4807      	ldr	r0, [pc, #28]	; (8005440 <pbuf_free_custom+0x2c>)
 8005424:	f000 ffdc 	bl	80063e0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005428:	4b06      	ldr	r3, [pc, #24]	; (8005444 <pbuf_free_custom+0x30>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d102      	bne.n	8005436 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005430:	4b04      	ldr	r3, [pc, #16]	; (8005444 <pbuf_free_custom+0x30>)
 8005432:	2200      	movs	r2, #0
 8005434:	701a      	strb	r2, [r3, #0]
  }
}
 8005436:	bf00      	nop
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	08014324 	.word	0x08014324
 8005444:	24000160 	.word	0x24000160

08005448 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800544c:	f7fc f82e 	bl	80014ac <HAL_GetTick>
 8005450:	4603      	mov	r3, r0
}
 8005452:	4618      	mov	r0, r3
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08e      	sub	sp, #56	; 0x38
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	605a      	str	r2, [r3, #4]
 800546a:	609a      	str	r2, [r3, #8]
 800546c:	60da      	str	r2, [r3, #12]
 800546e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a5d      	ldr	r2, [pc, #372]	; (80055ec <HAL_ETH_MspInit+0x194>)
 8005476:	4293      	cmp	r3, r2
 8005478:	f040 80b3 	bne.w	80055e2 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800547c:	4b5c      	ldr	r3, [pc, #368]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 800547e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005482:	4a5b      	ldr	r2, [pc, #364]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 8005484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005488:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800548c:	4b58      	ldr	r3, [pc, #352]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 800548e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005496:	623b      	str	r3, [r7, #32]
 8005498:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800549a:	4b55      	ldr	r3, [pc, #340]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 800549c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054a0:	4a53      	ldr	r2, [pc, #332]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 80054a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80054aa:	4b51      	ldr	r3, [pc, #324]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 80054ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054b4:	61fb      	str	r3, [r7, #28]
 80054b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80054b8:	4b4d      	ldr	r3, [pc, #308]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 80054ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054be:	4a4c      	ldr	r2, [pc, #304]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 80054c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054c4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80054c8:	4b49      	ldr	r3, [pc, #292]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 80054ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d2:	61bb      	str	r3, [r7, #24]
 80054d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054d6:	4b46      	ldr	r3, [pc, #280]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 80054d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054dc:	4a44      	ldr	r2, [pc, #272]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 80054de:	f043 0304 	orr.w	r3, r3, #4
 80054e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80054e6:	4b42      	ldr	r3, [pc, #264]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 80054e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054f4:	4b3e      	ldr	r3, [pc, #248]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 80054f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054fa:	4a3d      	ldr	r2, [pc, #244]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005504:	4b3a      	ldr	r3, [pc, #232]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 8005506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005512:	4b37      	ldr	r3, [pc, #220]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 8005514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005518:	4a35      	ldr	r2, [pc, #212]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 800551a:	f043 0302 	orr.w	r3, r3, #2
 800551e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005522:	4b33      	ldr	r3, [pc, #204]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 8005524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005530:	4b2f      	ldr	r3, [pc, #188]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 8005532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005536:	4a2e      	ldr	r2, [pc, #184]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 8005538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800553c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005540:	4b2b      	ldr	r3, [pc, #172]	; (80055f0 <HAL_ETH_MspInit+0x198>)
 8005542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554a:	60bb      	str	r3, [r7, #8]
 800554c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800554e:	2332      	movs	r3, #50	; 0x32
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005552:	2302      	movs	r3, #2
 8005554:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005556:	2300      	movs	r3, #0
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800555a:	2303      	movs	r3, #3
 800555c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800555e:	230b      	movs	r3, #11
 8005560:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005566:	4619      	mov	r1, r3
 8005568:	4822      	ldr	r0, [pc, #136]	; (80055f4 <HAL_ETH_MspInit+0x19c>)
 800556a:	f7fd fe57 	bl	800321c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800556e:	2386      	movs	r3, #134	; 0x86
 8005570:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005572:	2302      	movs	r3, #2
 8005574:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005576:	2300      	movs	r3, #0
 8005578:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800557a:	2303      	movs	r3, #3
 800557c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800557e:	230b      	movs	r3, #11
 8005580:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005586:	4619      	mov	r1, r3
 8005588:	481b      	ldr	r0, [pc, #108]	; (80055f8 <HAL_ETH_MspInit+0x1a0>)
 800558a:	f7fd fe47 	bl	800321c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800558e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005592:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005594:	2302      	movs	r3, #2
 8005596:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005598:	2300      	movs	r3, #0
 800559a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800559c:	2303      	movs	r3, #3
 800559e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80055a0:	230b      	movs	r3, #11
 80055a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80055a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055a8:	4619      	mov	r1, r3
 80055aa:	4814      	ldr	r0, [pc, #80]	; (80055fc <HAL_ETH_MspInit+0x1a4>)
 80055ac:	f7fd fe36 	bl	800321c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80055b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b6:	2302      	movs	r3, #2
 80055b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055be:	2303      	movs	r3, #3
 80055c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80055c2:	230b      	movs	r3, #11
 80055c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80055c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055ca:	4619      	mov	r1, r3
 80055cc:	480c      	ldr	r0, [pc, #48]	; (8005600 <HAL_ETH_MspInit+0x1a8>)
 80055ce:	f7fd fe25 	bl	800321c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80055d2:	2200      	movs	r2, #0
 80055d4:	2100      	movs	r1, #0
 80055d6:	203d      	movs	r0, #61	; 0x3d
 80055d8:	f7fc f863 	bl	80016a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80055dc:	203d      	movs	r0, #61	; 0x3d
 80055de:	f7fc f87a 	bl	80016d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80055e2:	bf00      	nop
 80055e4:	3738      	adds	r7, #56	; 0x38
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40028000 	.word	0x40028000
 80055f0:	58024400 	.word	0x58024400
 80055f4:	58020800 	.word	0x58020800
 80055f8:	58020000 	.word	0x58020000
 80055fc:	58020400 	.word	0x58020400
 8005600:	58021800 	.word	0x58021800

08005604 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005608:	4802      	ldr	r0, [pc, #8]	; (8005614 <ETH_PHY_IO_Init+0x10>)
 800560a:	f7fd f83b 	bl	8002684 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	bd80      	pop	{r7, pc}
 8005614:	24000164 	.word	0x24000164

08005618 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  return 0;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	68f9      	ldr	r1, [r7, #12]
 800563a:	4807      	ldr	r0, [pc, #28]	; (8005658 <ETH_PHY_IO_ReadReg+0x30>)
 800563c:	f7fc fd8c 	bl	8002158 <HAL_ETH_ReadPHYRegister>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005646:	f04f 33ff 	mov.w	r3, #4294967295
 800564a:	e000      	b.n	800564e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	24000164 	.word	0x24000164

0800565c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	68f9      	ldr	r1, [r7, #12]
 800566e:	4807      	ldr	r0, [pc, #28]	; (800568c <ETH_PHY_IO_WriteReg+0x30>)
 8005670:	f7fc fdc6 	bl	8002200 <HAL_ETH_WritePHYRegister>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800567a:	f04f 33ff 	mov.w	r3, #4294967295
 800567e:	e000      	b.n	8005682 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	24000164 	.word	0x24000164

08005690 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005694:	f7fb ff0a 	bl	80014ac <HAL_GetTick>
 8005698:	4603      	mov	r3, r0
}
 800569a:	4618      	mov	r0, r3
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b0a0      	sub	sp, #128	; 0x80
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80056a8:	f107 030c 	add.w	r3, r7, #12
 80056ac:	2264      	movs	r2, #100	; 0x64
 80056ae:	2100      	movs	r1, #0
 80056b0:	4618      	mov	r0, r3
 80056b2:	f00a feed 	bl	8010490 <memset>
  int32_t PHYLinkState = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056be:	2300      	movs	r3, #0
 80056c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80056c2:	2300      	movs	r3, #0
 80056c4:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80056c6:	483a      	ldr	r0, [pc, #232]	; (80057b0 <ethernet_link_check_state+0x110>)
 80056c8:	f7fb fde3 	bl	8001292 <LAN8742_GetLinkState>
 80056cc:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80056d4:	089b      	lsrs	r3, r3, #2
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00c      	beq.n	80056fa <ethernet_link_check_state+0x5a>
 80056e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	dc09      	bgt.n	80056fa <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80056e6:	4833      	ldr	r0, [pc, #204]	; (80057b4 <ethernet_link_check_state+0x114>)
 80056e8:	f7fc f9d4 	bl	8001a94 <HAL_ETH_Stop>
    netif_set_down(netif);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f001 f8fb 	bl	80068e8 <netif_set_down>
    netif_set_link_down(netif);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f001 f95e 	bl	80069b4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80056f8:	e055      	b.n	80057a6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b00      	cmp	r3, #0
 8005706:	d14e      	bne.n	80057a6 <ethernet_link_check_state+0x106>
 8005708:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800570a:	2b01      	cmp	r3, #1
 800570c:	dd4b      	ble.n	80057a6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800570e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005710:	3b02      	subs	r3, #2
 8005712:	2b03      	cmp	r3, #3
 8005714:	d82a      	bhi.n	800576c <ethernet_link_check_state+0xcc>
 8005716:	a201      	add	r2, pc, #4	; (adr r2, 800571c <ethernet_link_check_state+0x7c>)
 8005718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571c:	0800572d 	.word	0x0800572d
 8005720:	0800573f 	.word	0x0800573f
 8005724:	0800574f 	.word	0x0800574f
 8005728:	0800575f 	.word	0x0800575f
      duplex = ETH_FULLDUPLEX_MODE;
 800572c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005730:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005732:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005736:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005738:	2301      	movs	r3, #1
 800573a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800573c:	e017      	b.n	800576e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800573e:	2300      	movs	r3, #0
 8005740:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005742:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005746:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005748:	2301      	movs	r3, #1
 800574a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800574c:	e00f      	b.n	800576e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800574e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005752:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005754:	2300      	movs	r3, #0
 8005756:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005758:	2301      	movs	r3, #1
 800575a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800575c:	e007      	b.n	800576e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800575e:	2300      	movs	r3, #0
 8005760:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005762:	2300      	movs	r3, #0
 8005764:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005766:	2301      	movs	r3, #1
 8005768:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800576a:	e000      	b.n	800576e <ethernet_link_check_state+0xce>
      break;
 800576c:	bf00      	nop
    if(linkchanged)
 800576e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d018      	beq.n	80057a6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005774:	f107 030c 	add.w	r3, r7, #12
 8005778:	4619      	mov	r1, r3
 800577a:	480e      	ldr	r0, [pc, #56]	; (80057b4 <ethernet_link_check_state+0x114>)
 800577c:	f7fc fd94 	bl	80022a8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005780:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8005784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005786:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005788:	f107 030c 	add.w	r3, r7, #12
 800578c:	4619      	mov	r1, r3
 800578e:	4809      	ldr	r0, [pc, #36]	; (80057b4 <ethernet_link_check_state+0x114>)
 8005790:	f7fc ff5e 	bl	8002650 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005794:	4807      	ldr	r0, [pc, #28]	; (80057b4 <ethernet_link_check_state+0x114>)
 8005796:	f7fc f91b 	bl	80019d0 <HAL_ETH_Start>
      netif_set_up(netif);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f001 f838 	bl	8006810 <netif_set_up>
      netif_set_link_up(netif);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f001 f8d3 	bl	800694c <netif_set_link_up>
}
 80057a6:	bf00      	nop
 80057a8:	3780      	adds	r7, #128	; 0x80
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	2400024c 	.word	0x2400024c
 80057b4:	24000164 	.word	0x24000164

080057b8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af02      	add	r7, sp, #8
 80057be:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80057c0:	4812      	ldr	r0, [pc, #72]	; (800580c <HAL_ETH_RxAllocateCallback+0x54>)
 80057c2:	f000 fd9f 	bl	8006304 <memp_malloc_pool>
 80057c6:	60f8      	str	r0, [r7, #12]
  if (p)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d014      	beq.n	80057f8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f103 0220 	add.w	r2, r3, #32
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4a0d      	ldr	r2, [pc, #52]	; (8005810 <HAL_ETH_RxAllocateCallback+0x58>)
 80057dc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80057e6:	9201      	str	r2, [sp, #4]
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2241      	movs	r2, #65	; 0x41
 80057ee:	2100      	movs	r1, #0
 80057f0:	2000      	movs	r0, #0
 80057f2:	f001 fad5 	bl	8006da0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80057f6:	e005      	b.n	8005804 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80057f8:	4b06      	ldr	r3, [pc, #24]	; (8005814 <HAL_ETH_RxAllocateCallback+0x5c>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]
}
 8005804:	bf00      	nop
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	08014324 	.word	0x08014324
 8005810:	08005415 	.word	0x08005415
 8005814:	24000160 	.word	0x24000160

08005818 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005818:	b480      	push	{r7}
 800581a:	b08d      	sub	sp, #52	; 0x34
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 800582e:	2300      	movs	r3, #0
 8005830:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3b20      	subs	r3, #32
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 8005838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800583e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005840:	2200      	movs	r2, #0
 8005842:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005846:	887a      	ldrh	r2, [r7, #2]
 8005848:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d103      	bne.n	800585a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	e003      	b.n	8005862 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005860:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005866:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800586e:	e009      	b.n	8005884 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005872:	891a      	ldrh	r2, [r3, #8]
 8005874:	887b      	ldrh	r3, [r7, #2]
 8005876:	4413      	add	r3, r2
 8005878:	b29a      	uxth	r2, r3
 800587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800587e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1f2      	bne.n	8005870 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800588a:	887b      	ldrh	r3, [r7, #2]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	623a      	str	r2, [r7, #32]
 8005890:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	2b00      	cmp	r3, #0
 8005896:	dd1d      	ble.n	80058d4 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	f003 021f 	and.w	r2, r3, #31
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	4413      	add	r3, r2
 80058a2:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80058a8:	f3bf 8f4f 	dsb	sy
}
 80058ac:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80058ae:	4a0d      	ldr	r2, [pc, #52]	; (80058e4 <HAL_ETH_RxLinkCallback+0xcc>)
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	3320      	adds	r3, #32
 80058ba:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	3b20      	subs	r3, #32
 80058c0:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	dcf2      	bgt.n	80058ae <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 80058c8:	f3bf 8f4f 	dsb	sy
}
 80058cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80058ce:	f3bf 8f6f 	isb	sy
}
 80058d2:	bf00      	nop
}
 80058d4:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 80058d6:	bf00      	nop
 80058d8:	3734      	adds	r7, #52	; 0x34
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	e000ed00 	.word	0xe000ed00

080058e8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	4603      	mov	r3, r0
 80058f0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80058f2:	88fb      	ldrh	r3, [r7, #6]
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	b21a      	sxth	r2, r3
 80058f8:	88fb      	ldrh	r3, [r7, #6]
 80058fa:	0a1b      	lsrs	r3, r3, #8
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	b21b      	sxth	r3, r3
 8005900:	4313      	orrs	r3, r2
 8005902:	b21b      	sxth	r3, r3
 8005904:	b29b      	uxth	r3, r3
}
 8005906:	4618      	mov	r0, r3
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	061a      	lsls	r2, r3, #24
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	0a1b      	lsrs	r3, r3, #8
 800592c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	0e1b      	lsrs	r3, r3, #24
 8005936:	4313      	orrs	r3, r2
}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8005944:	b480      	push	{r7}
 8005946:	b089      	sub	sp, #36	; 0x24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00d      	beq.n	8005984 <lwip_standard_chksum+0x40>
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	dd0a      	ble.n	8005984 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800596e:	69fa      	ldr	r2, [r7, #28]
 8005970:	1c53      	adds	r3, r2, #1
 8005972:	61fb      	str	r3, [r7, #28]
 8005974:	f107 030e 	add.w	r3, r7, #14
 8005978:	3301      	adds	r3, #1
 800597a:	7812      	ldrb	r2, [r2, #0]
 800597c:	701a      	strb	r2, [r3, #0]
    len--;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	3b01      	subs	r3, #1
 8005982:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8005988:	e00a      	b.n	80059a0 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	1c9a      	adds	r2, r3, #2
 800598e:	61ba      	str	r2, [r7, #24]
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	4413      	add	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
    len -= 2;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	3b02      	subs	r3, #2
 800599e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	dcf1      	bgt.n	800598a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	dd04      	ble.n	80059b6 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80059ac:	f107 030e 	add.w	r3, r7, #14
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	7812      	ldrb	r2, [r2, #0]
 80059b4:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80059b6:	89fb      	ldrh	r3, [r7, #14]
 80059b8:	461a      	mov	r2, r3
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	4413      	add	r3, r2
 80059be:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	0c1a      	lsrs	r2, r3, #16
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	4413      	add	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	0c1a      	lsrs	r2, r3, #16
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	4413      	add	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d007      	beq.n	80059ee <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	0a1b      	lsrs	r3, r3, #8
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	4313      	orrs	r3, r2
 80059ec:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	b29b      	uxth	r3, r3
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3724      	adds	r7, #36	; 0x24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b082      	sub	sp, #8
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	460b      	mov	r3, r1
 8005a08:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8005a0a:	887b      	ldrh	r3, [r7, #2]
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7ff ff98 	bl	8005944 <lwip_standard_chksum>
 8005a14:	4603      	mov	r3, r0
 8005a16:	43db      	mvns	r3, r3
 8005a18:	b29b      	uxth	r3, r3
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b086      	sub	sp, #24
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	e02b      	b.n	8005a90 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	895b      	ldrh	r3, [r3, #10]
 8005a40:	4619      	mov	r1, r3
 8005a42:	4610      	mov	r0, r2
 8005a44:	f7ff ff7e 	bl	8005944 <lwip_standard_chksum>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	4413      	add	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	0c1a      	lsrs	r2, r3, #16
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	895b      	ldrh	r3, [r3, #10]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00e      	beq.n	8005a8a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	bf0c      	ite	eq
 8005a72:	2301      	moveq	r3, #1
 8005a74:	2300      	movne	r3, #0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	0a1b      	lsrs	r3, r3, #8
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	613b      	str	r3, [r7, #16]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1d0      	bne.n	8005a38 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d007      	beq.n	8005aac <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	021b      	lsls	r3, r3, #8
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	0a1b      	lsrs	r3, r3, #8
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	b29b      	uxth	r3, r3
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005ac6:	f000 f8d5 	bl	8005c74 <mem_init>
  memp_init();
 8005aca:	f000 fbd7 	bl	800627c <memp_init>
  pbuf_init();
  netif_init();
 8005ace:	f000 fcd5 	bl	800647c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005ad2:	f007 ff4b 	bl	800d96c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005ad6:	f001 fe3d 	bl	8007754 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005ada:	f007 febd 	bl	800d858 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005ade:	bf00      	nop
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	4603      	mov	r3, r0
 8005af0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005af2:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <ptr_to_mem+0x20>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	88fb      	ldrh	r3, [r7, #6]
 8005af8:	4413      	add	r3, r2
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	24000284 	.word	0x24000284

08005b0c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005b14:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <mem_to_ptr+0x20>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	b29b      	uxth	r3, r3
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	24000284 	.word	0x24000284

08005b30 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005b30:	b590      	push	{r4, r7, lr}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005b38:	4b45      	ldr	r3, [pc, #276]	; (8005c50 <plug_holes+0x120>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d206      	bcs.n	8005b50 <plug_holes+0x20>
 8005b42:	4b44      	ldr	r3, [pc, #272]	; (8005c54 <plug_holes+0x124>)
 8005b44:	f240 12df 	movw	r2, #479	; 0x1df
 8005b48:	4943      	ldr	r1, [pc, #268]	; (8005c58 <plug_holes+0x128>)
 8005b4a:	4844      	ldr	r0, [pc, #272]	; (8005c5c <plug_holes+0x12c>)
 8005b4c:	f00a fca8 	bl	80104a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005b50:	4b43      	ldr	r3, [pc, #268]	; (8005c60 <plug_holes+0x130>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d306      	bcc.n	8005b68 <plug_holes+0x38>
 8005b5a:	4b3e      	ldr	r3, [pc, #248]	; (8005c54 <plug_holes+0x124>)
 8005b5c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005b60:	4940      	ldr	r1, [pc, #256]	; (8005c64 <plug_holes+0x134>)
 8005b62:	483e      	ldr	r0, [pc, #248]	; (8005c5c <plug_holes+0x12c>)
 8005b64:	f00a fc9c 	bl	80104a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	791b      	ldrb	r3, [r3, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d006      	beq.n	8005b7e <plug_holes+0x4e>
 8005b70:	4b38      	ldr	r3, [pc, #224]	; (8005c54 <plug_holes+0x124>)
 8005b72:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005b76:	493c      	ldr	r1, [pc, #240]	; (8005c68 <plug_holes+0x138>)
 8005b78:	4838      	ldr	r0, [pc, #224]	; (8005c5c <plug_holes+0x12c>)
 8005b7a:	f00a fc91 	bl	80104a0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005b86:	d906      	bls.n	8005b96 <plug_holes+0x66>
 8005b88:	4b32      	ldr	r3, [pc, #200]	; (8005c54 <plug_holes+0x124>)
 8005b8a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005b8e:	4937      	ldr	r1, [pc, #220]	; (8005c6c <plug_holes+0x13c>)
 8005b90:	4832      	ldr	r0, [pc, #200]	; (8005c5c <plug_holes+0x12c>)
 8005b92:	f00a fc85 	bl	80104a0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff ffa4 	bl	8005ae8 <ptr_to_mem>
 8005ba0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d024      	beq.n	8005bf4 <plug_holes+0xc4>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	791b      	ldrb	r3, [r3, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d120      	bne.n	8005bf4 <plug_holes+0xc4>
 8005bb2:	4b2b      	ldr	r3, [pc, #172]	; (8005c60 <plug_holes+0x130>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d01b      	beq.n	8005bf4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005bbc:	4b2c      	ldr	r3, [pc, #176]	; (8005c70 <plug_holes+0x140>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d102      	bne.n	8005bcc <plug_holes+0x9c>
      lfree = mem;
 8005bc6:	4a2a      	ldr	r2, [pc, #168]	; (8005c70 <plug_holes+0x140>)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	881a      	ldrh	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005bdc:	d00a      	beq.n	8005bf4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff ff80 	bl	8005ae8 <ptr_to_mem>
 8005be8:	4604      	mov	r4, r0
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff ff8e 	bl	8005b0c <mem_to_ptr>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	885b      	ldrh	r3, [r3, #2]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7ff ff75 	bl	8005ae8 <ptr_to_mem>
 8005bfe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d01f      	beq.n	8005c48 <plug_holes+0x118>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	791b      	ldrb	r3, [r3, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d11b      	bne.n	8005c48 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005c10:	4b17      	ldr	r3, [pc, #92]	; (8005c70 <plug_holes+0x140>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d102      	bne.n	8005c20 <plug_holes+0xf0>
      lfree = pmem;
 8005c1a:	4a15      	ldr	r2, [pc, #84]	; (8005c70 <plug_holes+0x140>)
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	881a      	ldrh	r2, [r3, #0]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005c30:	d00a      	beq.n	8005c48 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff ff56 	bl	8005ae8 <ptr_to_mem>
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	68b8      	ldr	r0, [r7, #8]
 8005c40:	f7ff ff64 	bl	8005b0c <mem_to_ptr>
 8005c44:	4603      	mov	r3, r0
 8005c46:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005c48:	bf00      	nop
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd90      	pop	{r4, r7, pc}
 8005c50:	24000284 	.word	0x24000284
 8005c54:	08011988 	.word	0x08011988
 8005c58:	080119b8 	.word	0x080119b8
 8005c5c:	080119d0 	.word	0x080119d0
 8005c60:	24000288 	.word	0x24000288
 8005c64:	080119f8 	.word	0x080119f8
 8005c68:	08011a14 	.word	0x08011a14
 8005c6c:	08011a30 	.word	0x08011a30
 8005c70:	2400028c 	.word	0x2400028c

08005c74 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005c7a:	4b16      	ldr	r3, [pc, #88]	; (8005cd4 <mem_init+0x60>)
 8005c7c:	4a16      	ldr	r2, [pc, #88]	; (8005cd8 <mem_init+0x64>)
 8005c7e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005c80:	4b14      	ldr	r3, [pc, #80]	; (8005cd4 <mem_init+0x60>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005c8c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005c9a:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8005c9e:	f7ff ff23 	bl	8005ae8 <ptr_to_mem>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	4a0d      	ldr	r2, [pc, #52]	; (8005cdc <mem_init+0x68>)
 8005ca6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005ca8:	4b0c      	ldr	r3, [pc, #48]	; (8005cdc <mem_init+0x68>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2201      	movs	r2, #1
 8005cae:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005cb0:	4b0a      	ldr	r3, [pc, #40]	; (8005cdc <mem_init+0x68>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005cb8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005cba:	4b08      	ldr	r3, [pc, #32]	; (8005cdc <mem_init+0x68>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005cc2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005cc4:	4b03      	ldr	r3, [pc, #12]	; (8005cd4 <mem_init+0x60>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a05      	ldr	r2, [pc, #20]	; (8005ce0 <mem_init+0x6c>)
 8005cca:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005ccc:	bf00      	nop
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	24000284 	.word	0x24000284
 8005cd8:	30004000 	.word	0x30004000
 8005cdc:	24000288 	.word	0x24000288
 8005ce0:	2400028c 	.word	0x2400028c

08005ce4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff ff0d 	bl	8005b0c <mem_to_ptr>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff fef4 	bl	8005ae8 <ptr_to_mem>
 8005d00:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	885b      	ldrh	r3, [r3, #2]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7ff feee 	bl	8005ae8 <ptr_to_mem>
 8005d0c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005d16:	d818      	bhi.n	8005d4a <mem_link_valid+0x66>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	885b      	ldrh	r3, [r3, #2]
 8005d1c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005d20:	d813      	bhi.n	8005d4a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005d26:	8afa      	ldrh	r2, [r7, #22]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d004      	beq.n	8005d36 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	8afa      	ldrh	r2, [r7, #22]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d109      	bne.n	8005d4a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005d36:	4b08      	ldr	r3, [pc, #32]	; (8005d58 <mem_link_valid+0x74>)
 8005d38:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d006      	beq.n	8005d4e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	885b      	ldrh	r3, [r3, #2]
 8005d44:	8afa      	ldrh	r2, [r7, #22]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d001      	beq.n	8005d4e <mem_link_valid+0x6a>
    return 0;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	e000      	b.n	8005d50 <mem_link_valid+0x6c>
  }
  return 1;
 8005d4e:	2301      	movs	r3, #1
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	24000288 	.word	0x24000288

08005d5c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d04c      	beq.n	8005e04 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f003 0303 	and.w	r3, r3, #3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d007      	beq.n	8005d84 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005d74:	4b25      	ldr	r3, [pc, #148]	; (8005e0c <mem_free+0xb0>)
 8005d76:	f240 2273 	movw	r2, #627	; 0x273
 8005d7a:	4925      	ldr	r1, [pc, #148]	; (8005e10 <mem_free+0xb4>)
 8005d7c:	4825      	ldr	r0, [pc, #148]	; (8005e14 <mem_free+0xb8>)
 8005d7e:	f00a fb8f 	bl	80104a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005d82:	e040      	b.n	8005e06 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3b08      	subs	r3, #8
 8005d88:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005d8a:	4b23      	ldr	r3, [pc, #140]	; (8005e18 <mem_free+0xbc>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d306      	bcc.n	8005da2 <mem_free+0x46>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f103 020c 	add.w	r2, r3, #12
 8005d9a:	4b20      	ldr	r3, [pc, #128]	; (8005e1c <mem_free+0xc0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d907      	bls.n	8005db2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005da2:	4b1a      	ldr	r3, [pc, #104]	; (8005e0c <mem_free+0xb0>)
 8005da4:	f240 227f 	movw	r2, #639	; 0x27f
 8005da8:	491d      	ldr	r1, [pc, #116]	; (8005e20 <mem_free+0xc4>)
 8005daa:	481a      	ldr	r0, [pc, #104]	; (8005e14 <mem_free+0xb8>)
 8005dac:	f00a fb78 	bl	80104a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005db0:	e029      	b.n	8005e06 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	791b      	ldrb	r3, [r3, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d107      	bne.n	8005dca <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005dba:	4b14      	ldr	r3, [pc, #80]	; (8005e0c <mem_free+0xb0>)
 8005dbc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005dc0:	4918      	ldr	r1, [pc, #96]	; (8005e24 <mem_free+0xc8>)
 8005dc2:	4814      	ldr	r0, [pc, #80]	; (8005e14 <mem_free+0xb8>)
 8005dc4:	f00a fb6c 	bl	80104a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005dc8:	e01d      	b.n	8005e06 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f7ff ff8a 	bl	8005ce4 <mem_link_valid>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d107      	bne.n	8005de6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005dd6:	4b0d      	ldr	r3, [pc, #52]	; (8005e0c <mem_free+0xb0>)
 8005dd8:	f240 2295 	movw	r2, #661	; 0x295
 8005ddc:	4912      	ldr	r1, [pc, #72]	; (8005e28 <mem_free+0xcc>)
 8005dde:	480d      	ldr	r0, [pc, #52]	; (8005e14 <mem_free+0xb8>)
 8005de0:	f00a fb5e 	bl	80104a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005de4:	e00f      	b.n	8005e06 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005dec:	4b0f      	ldr	r3, [pc, #60]	; (8005e2c <mem_free+0xd0>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d202      	bcs.n	8005dfc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005df6:	4a0d      	ldr	r2, [pc, #52]	; (8005e2c <mem_free+0xd0>)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f7ff fe97 	bl	8005b30 <plug_holes>
 8005e02:	e000      	b.n	8005e06 <mem_free+0xaa>
    return;
 8005e04:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	08011988 	.word	0x08011988
 8005e10:	08011a5c 	.word	0x08011a5c
 8005e14:	080119d0 	.word	0x080119d0
 8005e18:	24000284 	.word	0x24000284
 8005e1c:	24000288 	.word	0x24000288
 8005e20:	08011a80 	.word	0x08011a80
 8005e24:	08011a9c 	.word	0x08011a9c
 8005e28:	08011ac4 	.word	0x08011ac4
 8005e2c:	2400028c 	.word	0x2400028c

08005e30 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005e3c:	887b      	ldrh	r3, [r7, #2]
 8005e3e:	3303      	adds	r3, #3
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	f023 0303 	bic.w	r3, r3, #3
 8005e46:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005e48:	8bfb      	ldrh	r3, [r7, #30]
 8005e4a:	2b0b      	cmp	r3, #11
 8005e4c:	d801      	bhi.n	8005e52 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005e4e:	230c      	movs	r3, #12
 8005e50:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005e52:	8bfb      	ldrh	r3, [r7, #30]
 8005e54:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005e58:	d803      	bhi.n	8005e62 <mem_trim+0x32>
 8005e5a:	8bfa      	ldrh	r2, [r7, #30]
 8005e5c:	887b      	ldrh	r3, [r7, #2]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d201      	bcs.n	8005e66 <mem_trim+0x36>
    return NULL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	e0cc      	b.n	8006000 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005e66:	4b68      	ldr	r3, [pc, #416]	; (8006008 <mem_trim+0x1d8>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d304      	bcc.n	8005e7a <mem_trim+0x4a>
 8005e70:	4b66      	ldr	r3, [pc, #408]	; (800600c <mem_trim+0x1dc>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d306      	bcc.n	8005e88 <mem_trim+0x58>
 8005e7a:	4b65      	ldr	r3, [pc, #404]	; (8006010 <mem_trim+0x1e0>)
 8005e7c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005e80:	4964      	ldr	r1, [pc, #400]	; (8006014 <mem_trim+0x1e4>)
 8005e82:	4865      	ldr	r0, [pc, #404]	; (8006018 <mem_trim+0x1e8>)
 8005e84:	f00a fb0c 	bl	80104a0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005e88:	4b5f      	ldr	r3, [pc, #380]	; (8006008 <mem_trim+0x1d8>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d304      	bcc.n	8005e9c <mem_trim+0x6c>
 8005e92:	4b5e      	ldr	r3, [pc, #376]	; (800600c <mem_trim+0x1dc>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d301      	bcc.n	8005ea0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	e0af      	b.n	8006000 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3b08      	subs	r3, #8
 8005ea4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005ea6:	69b8      	ldr	r0, [r7, #24]
 8005ea8:	f7ff fe30 	bl	8005b0c <mem_to_ptr>
 8005eac:	4603      	mov	r3, r0
 8005eae:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	881a      	ldrh	r2, [r3, #0]
 8005eb4:	8afb      	ldrh	r3, [r7, #22]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	3b08      	subs	r3, #8
 8005ebc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005ebe:	8bfa      	ldrh	r2, [r7, #30]
 8005ec0:	8abb      	ldrh	r3, [r7, #20]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d906      	bls.n	8005ed4 <mem_trim+0xa4>
 8005ec6:	4b52      	ldr	r3, [pc, #328]	; (8006010 <mem_trim+0x1e0>)
 8005ec8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005ecc:	4953      	ldr	r1, [pc, #332]	; (800601c <mem_trim+0x1ec>)
 8005ece:	4852      	ldr	r0, [pc, #328]	; (8006018 <mem_trim+0x1e8>)
 8005ed0:	f00a fae6 	bl	80104a0 <iprintf>
  if (newsize > size) {
 8005ed4:	8bfa      	ldrh	r2, [r7, #30]
 8005ed6:	8abb      	ldrh	r3, [r7, #20]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d901      	bls.n	8005ee0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005edc:	2300      	movs	r3, #0
 8005ede:	e08f      	b.n	8006000 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005ee0:	8bfa      	ldrh	r2, [r7, #30]
 8005ee2:	8abb      	ldrh	r3, [r7, #20]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d101      	bne.n	8005eec <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	e089      	b.n	8006000 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7ff fdf9 	bl	8005ae8 <ptr_to_mem>
 8005ef6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	791b      	ldrb	r3, [r3, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d13f      	bne.n	8005f80 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005f08:	d106      	bne.n	8005f18 <mem_trim+0xe8>
 8005f0a:	4b41      	ldr	r3, [pc, #260]	; (8006010 <mem_trim+0x1e0>)
 8005f0c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005f10:	4943      	ldr	r1, [pc, #268]	; (8006020 <mem_trim+0x1f0>)
 8005f12:	4841      	ldr	r0, [pc, #260]	; (8006018 <mem_trim+0x1e8>)
 8005f14:	f00a fac4 	bl	80104a0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005f1e:	8afa      	ldrh	r2, [r7, #22]
 8005f20:	8bfb      	ldrh	r3, [r7, #30]
 8005f22:	4413      	add	r3, r2
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	3308      	adds	r3, #8
 8005f28:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005f2a:	4b3e      	ldr	r3, [pc, #248]	; (8006024 <mem_trim+0x1f4>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d106      	bne.n	8005f42 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005f34:	89fb      	ldrh	r3, [r7, #14]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff fdd6 	bl	8005ae8 <ptr_to_mem>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	4a39      	ldr	r2, [pc, #228]	; (8006024 <mem_trim+0x1f4>)
 8005f40:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005f42:	89fb      	ldrh	r3, [r7, #14]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff fdcf 	bl	8005ae8 <ptr_to_mem>
 8005f4a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	89ba      	ldrh	r2, [r7, #12]
 8005f56:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	8afa      	ldrh	r2, [r7, #22]
 8005f5c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	89fa      	ldrh	r2, [r7, #14]
 8005f62:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005f6c:	d047      	beq.n	8005ffe <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff fdb8 	bl	8005ae8 <ptr_to_mem>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	89fb      	ldrh	r3, [r7, #14]
 8005f7c:	8053      	strh	r3, [r2, #2]
 8005f7e:	e03e      	b.n	8005ffe <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005f80:	8bfb      	ldrh	r3, [r7, #30]
 8005f82:	f103 0214 	add.w	r2, r3, #20
 8005f86:	8abb      	ldrh	r3, [r7, #20]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d838      	bhi.n	8005ffe <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005f8c:	8afa      	ldrh	r2, [r7, #22]
 8005f8e:	8bfb      	ldrh	r3, [r7, #30]
 8005f90:	4413      	add	r3, r2
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	3308      	adds	r3, #8
 8005f96:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005fa0:	d106      	bne.n	8005fb0 <mem_trim+0x180>
 8005fa2:	4b1b      	ldr	r3, [pc, #108]	; (8006010 <mem_trim+0x1e0>)
 8005fa4:	f240 3216 	movw	r2, #790	; 0x316
 8005fa8:	491d      	ldr	r1, [pc, #116]	; (8006020 <mem_trim+0x1f0>)
 8005faa:	481b      	ldr	r0, [pc, #108]	; (8006018 <mem_trim+0x1e8>)
 8005fac:	f00a fa78 	bl	80104a0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005fb0:	89fb      	ldrh	r3, [r7, #14]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff fd98 	bl	8005ae8 <ptr_to_mem>
 8005fb8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005fba:	4b1a      	ldr	r3, [pc, #104]	; (8006024 <mem_trim+0x1f4>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d202      	bcs.n	8005fca <mem_trim+0x19a>
      lfree = mem2;
 8005fc4:	4a17      	ldr	r2, [pc, #92]	; (8006024 <mem_trim+0x1f4>)
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	881a      	ldrh	r2, [r3, #0]
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	8afa      	ldrh	r2, [r7, #22]
 8005fdc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	89fa      	ldrh	r2, [r7, #14]
 8005fe2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005fec:	d007      	beq.n	8005ffe <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff fd78 	bl	8005ae8 <ptr_to_mem>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	89fb      	ldrh	r3, [r7, #14]
 8005ffc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005ffe:	687b      	ldr	r3, [r7, #4]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3720      	adds	r7, #32
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	24000284 	.word	0x24000284
 800600c:	24000288 	.word	0x24000288
 8006010:	08011988 	.word	0x08011988
 8006014:	08011af8 	.word	0x08011af8
 8006018:	080119d0 	.word	0x080119d0
 800601c:	08011b10 	.word	0x08011b10
 8006020:	08011b30 	.word	0x08011b30
 8006024:	2400028c 	.word	0x2400028c

08006028 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b088      	sub	sp, #32
 800602c:	af00      	add	r7, sp, #0
 800602e:	4603      	mov	r3, r0
 8006030:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006032:	88fb      	ldrh	r3, [r7, #6]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <mem_malloc+0x14>
    return NULL;
 8006038:	2300      	movs	r3, #0
 800603a:	e0d9      	b.n	80061f0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800603c:	88fb      	ldrh	r3, [r7, #6]
 800603e:	3303      	adds	r3, #3
 8006040:	b29b      	uxth	r3, r3
 8006042:	f023 0303 	bic.w	r3, r3, #3
 8006046:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006048:	8bbb      	ldrh	r3, [r7, #28]
 800604a:	2b0b      	cmp	r3, #11
 800604c:	d801      	bhi.n	8006052 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800604e:	230c      	movs	r3, #12
 8006050:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006052:	8bbb      	ldrh	r3, [r7, #28]
 8006054:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006058:	d803      	bhi.n	8006062 <mem_malloc+0x3a>
 800605a:	8bba      	ldrh	r2, [r7, #28]
 800605c:	88fb      	ldrh	r3, [r7, #6]
 800605e:	429a      	cmp	r2, r3
 8006060:	d201      	bcs.n	8006066 <mem_malloc+0x3e>
    return NULL;
 8006062:	2300      	movs	r3, #0
 8006064:	e0c4      	b.n	80061f0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006066:	4b64      	ldr	r3, [pc, #400]	; (80061f8 <mem_malloc+0x1d0>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff fd4e 	bl	8005b0c <mem_to_ptr>
 8006070:	4603      	mov	r3, r0
 8006072:	83fb      	strh	r3, [r7, #30]
 8006074:	e0b4      	b.n	80061e0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006076:	8bfb      	ldrh	r3, [r7, #30]
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff fd35 	bl	8005ae8 <ptr_to_mem>
 800607e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	791b      	ldrb	r3, [r3, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	f040 80a4 	bne.w	80061d2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	8bfb      	ldrh	r3, [r7, #30]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	f1a3 0208 	sub.w	r2, r3, #8
 8006098:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800609a:	429a      	cmp	r2, r3
 800609c:	f0c0 8099 	bcc.w	80061d2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	461a      	mov	r2, r3
 80060a6:	8bfb      	ldrh	r3, [r7, #30]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	f1a3 0208 	sub.w	r2, r3, #8
 80060ae:	8bbb      	ldrh	r3, [r7, #28]
 80060b0:	3314      	adds	r3, #20
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d333      	bcc.n	800611e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80060b6:	8bfa      	ldrh	r2, [r7, #30]
 80060b8:	8bbb      	ldrh	r3, [r7, #28]
 80060ba:	4413      	add	r3, r2
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3308      	adds	r3, #8
 80060c0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80060c2:	8a7b      	ldrh	r3, [r7, #18]
 80060c4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80060c8:	d106      	bne.n	80060d8 <mem_malloc+0xb0>
 80060ca:	4b4c      	ldr	r3, [pc, #304]	; (80061fc <mem_malloc+0x1d4>)
 80060cc:	f240 3287 	movw	r2, #903	; 0x387
 80060d0:	494b      	ldr	r1, [pc, #300]	; (8006200 <mem_malloc+0x1d8>)
 80060d2:	484c      	ldr	r0, [pc, #304]	; (8006204 <mem_malloc+0x1dc>)
 80060d4:	f00a f9e4 	bl	80104a0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80060d8:	8a7b      	ldrh	r3, [r7, #18]
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff fd04 	bl	8005ae8 <ptr_to_mem>
 80060e0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	881a      	ldrh	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8bfa      	ldrh	r2, [r7, #30]
 80060f4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	8a7a      	ldrh	r2, [r7, #18]
 80060fa:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	2201      	movs	r2, #1
 8006100:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800610a:	d00b      	beq.n	8006124 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff fce9 	bl	8005ae8 <ptr_to_mem>
 8006116:	4602      	mov	r2, r0
 8006118:	8a7b      	ldrh	r3, [r7, #18]
 800611a:	8053      	strh	r3, [r2, #2]
 800611c:	e002      	b.n	8006124 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2201      	movs	r2, #1
 8006122:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006124:	4b34      	ldr	r3, [pc, #208]	; (80061f8 <mem_malloc+0x1d0>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	429a      	cmp	r2, r3
 800612c:	d127      	bne.n	800617e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800612e:	4b32      	ldr	r3, [pc, #200]	; (80061f8 <mem_malloc+0x1d0>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006134:	e005      	b.n	8006142 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff fcd4 	bl	8005ae8 <ptr_to_mem>
 8006140:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	791b      	ldrb	r3, [r3, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d004      	beq.n	8006154 <mem_malloc+0x12c>
 800614a:	4b2f      	ldr	r3, [pc, #188]	; (8006208 <mem_malloc+0x1e0>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	429a      	cmp	r2, r3
 8006152:	d1f0      	bne.n	8006136 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006154:	4a28      	ldr	r2, [pc, #160]	; (80061f8 <mem_malloc+0x1d0>)
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800615a:	4b27      	ldr	r3, [pc, #156]	; (80061f8 <mem_malloc+0x1d0>)
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	4b2a      	ldr	r3, [pc, #168]	; (8006208 <mem_malloc+0x1e0>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	429a      	cmp	r2, r3
 8006164:	d00b      	beq.n	800617e <mem_malloc+0x156>
 8006166:	4b24      	ldr	r3, [pc, #144]	; (80061f8 <mem_malloc+0x1d0>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	791b      	ldrb	r3, [r3, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d006      	beq.n	800617e <mem_malloc+0x156>
 8006170:	4b22      	ldr	r3, [pc, #136]	; (80061fc <mem_malloc+0x1d4>)
 8006172:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006176:	4925      	ldr	r1, [pc, #148]	; (800620c <mem_malloc+0x1e4>)
 8006178:	4822      	ldr	r0, [pc, #136]	; (8006204 <mem_malloc+0x1dc>)
 800617a:	f00a f991 	bl	80104a0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800617e:	8bba      	ldrh	r2, [r7, #28]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	4413      	add	r3, r2
 8006184:	3308      	adds	r3, #8
 8006186:	4a20      	ldr	r2, [pc, #128]	; (8006208 <mem_malloc+0x1e0>)
 8006188:	6812      	ldr	r2, [r2, #0]
 800618a:	4293      	cmp	r3, r2
 800618c:	d906      	bls.n	800619c <mem_malloc+0x174>
 800618e:	4b1b      	ldr	r3, [pc, #108]	; (80061fc <mem_malloc+0x1d4>)
 8006190:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006194:	491e      	ldr	r1, [pc, #120]	; (8006210 <mem_malloc+0x1e8>)
 8006196:	481b      	ldr	r0, [pc, #108]	; (8006204 <mem_malloc+0x1dc>)
 8006198:	f00a f982 	bl	80104a0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f003 0303 	and.w	r3, r3, #3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d006      	beq.n	80061b4 <mem_malloc+0x18c>
 80061a6:	4b15      	ldr	r3, [pc, #84]	; (80061fc <mem_malloc+0x1d4>)
 80061a8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80061ac:	4919      	ldr	r1, [pc, #100]	; (8006214 <mem_malloc+0x1ec>)
 80061ae:	4815      	ldr	r0, [pc, #84]	; (8006204 <mem_malloc+0x1dc>)
 80061b0:	f00a f976 	bl	80104a0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f003 0303 	and.w	r3, r3, #3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d006      	beq.n	80061cc <mem_malloc+0x1a4>
 80061be:	4b0f      	ldr	r3, [pc, #60]	; (80061fc <mem_malloc+0x1d4>)
 80061c0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80061c4:	4914      	ldr	r1, [pc, #80]	; (8006218 <mem_malloc+0x1f0>)
 80061c6:	480f      	ldr	r0, [pc, #60]	; (8006204 <mem_malloc+0x1dc>)
 80061c8:	f00a f96a 	bl	80104a0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	3308      	adds	r3, #8
 80061d0:	e00e      	b.n	80061f0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80061d2:	8bfb      	ldrh	r3, [r7, #30]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7ff fc87 	bl	8005ae8 <ptr_to_mem>
 80061da:	4603      	mov	r3, r0
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80061e0:	8bfa      	ldrh	r2, [r7, #30]
 80061e2:	8bbb      	ldrh	r3, [r7, #28]
 80061e4:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 80061e8:	429a      	cmp	r2, r3
 80061ea:	f4ff af44 	bcc.w	8006076 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3720      	adds	r7, #32
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	2400028c 	.word	0x2400028c
 80061fc:	08011988 	.word	0x08011988
 8006200:	08011b30 	.word	0x08011b30
 8006204:	080119d0 	.word	0x080119d0
 8006208:	24000288 	.word	0x24000288
 800620c:	08011b44 	.word	0x08011b44
 8006210:	08011b60 	.word	0x08011b60
 8006214:	08011b90 	.word	0x08011b90
 8006218:	08011bc0 	.word	0x08011bc0

0800621c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	2200      	movs	r2, #0
 800622a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	3303      	adds	r3, #3
 8006232:	f023 0303 	bic.w	r3, r3, #3
 8006236:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006238:	2300      	movs	r3, #0
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	e011      	b.n	8006262 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	4413      	add	r3, r2
 800625a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	3301      	adds	r3, #1
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	885b      	ldrh	r3, [r3, #2]
 8006266:	461a      	mov	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4293      	cmp	r3, r2
 800626c:	dbe7      	blt.n	800623e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800626e:	bf00      	nop
 8006270:	bf00      	nop
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006282:	2300      	movs	r3, #0
 8006284:	80fb      	strh	r3, [r7, #6]
 8006286:	e009      	b.n	800629c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006288:	88fb      	ldrh	r3, [r7, #6]
 800628a:	4a08      	ldr	r2, [pc, #32]	; (80062ac <memp_init+0x30>)
 800628c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff ffc3 	bl	800621c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006296:	88fb      	ldrh	r3, [r7, #6]
 8006298:	3301      	adds	r3, #1
 800629a:	80fb      	strh	r3, [r7, #6]
 800629c:	88fb      	ldrh	r3, [r7, #6]
 800629e:	2b08      	cmp	r3, #8
 80062a0:	d9f2      	bls.n	8006288 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80062a2:	bf00      	nop
 80062a4:	bf00      	nop
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	0801439c 	.word	0x0801439c

080062b0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d012      	beq.n	80062ec <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	6812      	ldr	r2, [r2, #0]
 80062ce:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d006      	beq.n	80062e8 <do_memp_malloc_pool+0x38>
 80062da:	4b07      	ldr	r3, [pc, #28]	; (80062f8 <do_memp_malloc_pool+0x48>)
 80062dc:	f44f 728c 	mov.w	r2, #280	; 0x118
 80062e0:	4906      	ldr	r1, [pc, #24]	; (80062fc <do_memp_malloc_pool+0x4c>)
 80062e2:	4807      	ldr	r0, [pc, #28]	; (8006300 <do_memp_malloc_pool+0x50>)
 80062e4:	f00a f8dc 	bl	80104a0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	e000      	b.n	80062ee <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	08011be4 	.word	0x08011be4
 80062fc:	08011c14 	.word	0x08011c14
 8006300:	08011c38 	.word	0x08011c38

08006304 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <memp_malloc_pool+0x1c>
 8006312:	4b0a      	ldr	r3, [pc, #40]	; (800633c <memp_malloc_pool+0x38>)
 8006314:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8006318:	4909      	ldr	r1, [pc, #36]	; (8006340 <memp_malloc_pool+0x3c>)
 800631a:	480a      	ldr	r0, [pc, #40]	; (8006344 <memp_malloc_pool+0x40>)
 800631c:	f00a f8c0 	bl	80104a0 <iprintf>
  if (desc == NULL) {
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <memp_malloc_pool+0x26>
    return NULL;
 8006326:	2300      	movs	r3, #0
 8006328:	e003      	b.n	8006332 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7ff ffc0 	bl	80062b0 <do_memp_malloc_pool>
 8006330:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006332:	4618      	mov	r0, r3
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	08011be4 	.word	0x08011be4
 8006340:	08011c60 	.word	0x08011c60
 8006344:	08011c38 	.word	0x08011c38

08006348 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	4603      	mov	r3, r0
 8006350:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006352:	79fb      	ldrb	r3, [r7, #7]
 8006354:	2b08      	cmp	r3, #8
 8006356:	d908      	bls.n	800636a <memp_malloc+0x22>
 8006358:	4b0a      	ldr	r3, [pc, #40]	; (8006384 <memp_malloc+0x3c>)
 800635a:	f240 1257 	movw	r2, #343	; 0x157
 800635e:	490a      	ldr	r1, [pc, #40]	; (8006388 <memp_malloc+0x40>)
 8006360:	480a      	ldr	r0, [pc, #40]	; (800638c <memp_malloc+0x44>)
 8006362:	f00a f89d 	bl	80104a0 <iprintf>
 8006366:	2300      	movs	r3, #0
 8006368:	e008      	b.n	800637c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800636a:	79fb      	ldrb	r3, [r7, #7]
 800636c:	4a08      	ldr	r2, [pc, #32]	; (8006390 <memp_malloc+0x48>)
 800636e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006372:	4618      	mov	r0, r3
 8006374:	f7ff ff9c 	bl	80062b0 <do_memp_malloc_pool>
 8006378:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800637a:	68fb      	ldr	r3, [r7, #12]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	08011be4 	.word	0x08011be4
 8006388:	08011c74 	.word	0x08011c74
 800638c:	08011c38 	.word	0x08011c38
 8006390:	0801439c 	.word	0x0801439c

08006394 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	f003 0303 	and.w	r3, r3, #3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d006      	beq.n	80063b6 <do_memp_free_pool+0x22>
 80063a8:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <do_memp_free_pool+0x40>)
 80063aa:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80063ae:	490a      	ldr	r1, [pc, #40]	; (80063d8 <do_memp_free_pool+0x44>)
 80063b0:	480a      	ldr	r0, [pc, #40]	; (80063dc <do_memp_free_pool+0x48>)
 80063b2:	f00a f875 	bl	80104a0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80063cc:	bf00      	nop
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	08011be4 	.word	0x08011be4
 80063d8:	08011c94 	.word	0x08011c94
 80063dc:	08011c38 	.word	0x08011c38

080063e0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d106      	bne.n	80063fe <memp_free_pool+0x1e>
 80063f0:	4b0a      	ldr	r3, [pc, #40]	; (800641c <memp_free_pool+0x3c>)
 80063f2:	f240 1295 	movw	r2, #405	; 0x195
 80063f6:	490a      	ldr	r1, [pc, #40]	; (8006420 <memp_free_pool+0x40>)
 80063f8:	480a      	ldr	r0, [pc, #40]	; (8006424 <memp_free_pool+0x44>)
 80063fa:	f00a f851 	bl	80104a0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d007      	beq.n	8006414 <memp_free_pool+0x34>
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d004      	beq.n	8006414 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800640a:	6839      	ldr	r1, [r7, #0]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff ffc1 	bl	8006394 <do_memp_free_pool>
 8006412:	e000      	b.n	8006416 <memp_free_pool+0x36>
    return;
 8006414:	bf00      	nop
}
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	08011be4 	.word	0x08011be4
 8006420:	08011c60 	.word	0x08011c60
 8006424:	08011c38 	.word	0x08011c38

08006428 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	4603      	mov	r3, r0
 8006430:	6039      	str	r1, [r7, #0]
 8006432:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	2b08      	cmp	r3, #8
 8006438:	d907      	bls.n	800644a <memp_free+0x22>
 800643a:	4b0c      	ldr	r3, [pc, #48]	; (800646c <memp_free+0x44>)
 800643c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006440:	490b      	ldr	r1, [pc, #44]	; (8006470 <memp_free+0x48>)
 8006442:	480c      	ldr	r0, [pc, #48]	; (8006474 <memp_free+0x4c>)
 8006444:	f00a f82c 	bl	80104a0 <iprintf>
 8006448:	e00c      	b.n	8006464 <memp_free+0x3c>

  if (mem == NULL) {
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d008      	beq.n	8006462 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006450:	79fb      	ldrb	r3, [r7, #7]
 8006452:	4a09      	ldr	r2, [pc, #36]	; (8006478 <memp_free+0x50>)
 8006454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	4618      	mov	r0, r3
 800645c:	f7ff ff9a 	bl	8006394 <do_memp_free_pool>
 8006460:	e000      	b.n	8006464 <memp_free+0x3c>
    return;
 8006462:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	08011be4 	.word	0x08011be4
 8006470:	08011cb4 	.word	0x08011cb4
 8006474:	08011c38 	.word	0x08011c38
 8006478:	0801439c 	.word	0x0801439c

0800647c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006480:	bf00      	nop
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
	...

0800648c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d108      	bne.n	80064b2 <netif_add+0x26>
 80064a0:	4b57      	ldr	r3, [pc, #348]	; (8006600 <netif_add+0x174>)
 80064a2:	f240 1227 	movw	r2, #295	; 0x127
 80064a6:	4957      	ldr	r1, [pc, #348]	; (8006604 <netif_add+0x178>)
 80064a8:	4857      	ldr	r0, [pc, #348]	; (8006608 <netif_add+0x17c>)
 80064aa:	f009 fff9 	bl	80104a0 <iprintf>
 80064ae:	2300      	movs	r3, #0
 80064b0:	e0a2      	b.n	80065f8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d108      	bne.n	80064ca <netif_add+0x3e>
 80064b8:	4b51      	ldr	r3, [pc, #324]	; (8006600 <netif_add+0x174>)
 80064ba:	f44f 7294 	mov.w	r2, #296	; 0x128
 80064be:	4953      	ldr	r1, [pc, #332]	; (800660c <netif_add+0x180>)
 80064c0:	4851      	ldr	r0, [pc, #324]	; (8006608 <netif_add+0x17c>)
 80064c2:	f009 ffed 	bl	80104a0 <iprintf>
 80064c6:	2300      	movs	r3, #0
 80064c8:	e096      	b.n	80065f8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80064d0:	4b4f      	ldr	r3, [pc, #316]	; (8006610 <netif_add+0x184>)
 80064d2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80064da:	4b4d      	ldr	r3, [pc, #308]	; (8006610 <netif_add+0x184>)
 80064dc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80064e4:	4b4a      	ldr	r3, [pc, #296]	; (8006610 <netif_add+0x184>)
 80064e6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	4a45      	ldr	r2, [pc, #276]	; (8006614 <netif_add+0x188>)
 80064fe:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a3a      	ldr	r2, [r7, #32]
 8006518:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800651a:	4b3f      	ldr	r3, [pc, #252]	; (8006618 <netif_add+0x18c>)
 800651c:	781a      	ldrb	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006528:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	68b9      	ldr	r1, [r7, #8]
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 f913 	bl	800675c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	4798      	blx	r3
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <netif_add+0xba>
    return NULL;
 8006542:	2300      	movs	r3, #0
 8006544:	e058      	b.n	80065f8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800654c:	2bff      	cmp	r3, #255	; 0xff
 800654e:	d103      	bne.n	8006558 <netif_add+0xcc>
        netif->num = 0;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800655c:	4b2f      	ldr	r3, [pc, #188]	; (800661c <netif_add+0x190>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	e02b      	b.n	80065bc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	429a      	cmp	r2, r3
 800656a:	d106      	bne.n	800657a <netif_add+0xee>
 800656c:	4b24      	ldr	r3, [pc, #144]	; (8006600 <netif_add+0x174>)
 800656e:	f240 128b 	movw	r2, #395	; 0x18b
 8006572:	492b      	ldr	r1, [pc, #172]	; (8006620 <netif_add+0x194>)
 8006574:	4824      	ldr	r0, [pc, #144]	; (8006608 <netif_add+0x17c>)
 8006576:	f009 ff93 	bl	80104a0 <iprintf>
        num_netifs++;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	3301      	adds	r3, #1
 800657e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	2bff      	cmp	r3, #255	; 0xff
 8006584:	dd06      	ble.n	8006594 <netif_add+0x108>
 8006586:	4b1e      	ldr	r3, [pc, #120]	; (8006600 <netif_add+0x174>)
 8006588:	f240 128d 	movw	r2, #397	; 0x18d
 800658c:	4925      	ldr	r1, [pc, #148]	; (8006624 <netif_add+0x198>)
 800658e:	481e      	ldr	r0, [pc, #120]	; (8006608 <netif_add+0x17c>)
 8006590:	f009 ff86 	bl	80104a0 <iprintf>
        if (netif2->num == netif->num) {
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d108      	bne.n	80065b6 <netif_add+0x12a>
          netif->num++;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065aa:	3301      	adds	r3, #1
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80065b4:	e005      	b.n	80065c2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1d0      	bne.n	8006564 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1be      	bne.n	8006546 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065ce:	2bfe      	cmp	r3, #254	; 0xfe
 80065d0:	d103      	bne.n	80065da <netif_add+0x14e>
    netif_num = 0;
 80065d2:	4b11      	ldr	r3, [pc, #68]	; (8006618 <netif_add+0x18c>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	701a      	strb	r2, [r3, #0]
 80065d8:	e006      	b.n	80065e8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065e0:	3301      	adds	r3, #1
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	4b0c      	ldr	r3, [pc, #48]	; (8006618 <netif_add+0x18c>)
 80065e6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80065e8:	4b0c      	ldr	r3, [pc, #48]	; (800661c <netif_add+0x190>)
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80065f0:	4a0a      	ldr	r2, [pc, #40]	; (800661c <netif_add+0x190>)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80065f6:	68fb      	ldr	r3, [r7, #12]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3718      	adds	r7, #24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	08011cd0 	.word	0x08011cd0
 8006604:	08011d64 	.word	0x08011d64
 8006608:	08011d20 	.word	0x08011d20
 800660c:	08011d80 	.word	0x08011d80
 8006610:	08014400 	.word	0x08014400
 8006614:	08006a37 	.word	0x08006a37
 8006618:	24003184 	.word	0x24003184
 800661c:	2400317c 	.word	0x2400317c
 8006620:	08011da4 	.word	0x08011da4
 8006624:	08011db8 	.word	0x08011db8

08006628 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f002 fde3 	bl	8009200 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f007 fb1f 	bl	800dc80 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006642:	bf00      	nop
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d106      	bne.n	800666c <netif_do_set_ipaddr+0x20>
 800665e:	4b1d      	ldr	r3, [pc, #116]	; (80066d4 <netif_do_set_ipaddr+0x88>)
 8006660:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006664:	491c      	ldr	r1, [pc, #112]	; (80066d8 <netif_do_set_ipaddr+0x8c>)
 8006666:	481d      	ldr	r0, [pc, #116]	; (80066dc <netif_do_set_ipaddr+0x90>)
 8006668:	f009 ff1a 	bl	80104a0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d106      	bne.n	8006680 <netif_do_set_ipaddr+0x34>
 8006672:	4b18      	ldr	r3, [pc, #96]	; (80066d4 <netif_do_set_ipaddr+0x88>)
 8006674:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006678:	4917      	ldr	r1, [pc, #92]	; (80066d8 <netif_do_set_ipaddr+0x8c>)
 800667a:	4818      	ldr	r0, [pc, #96]	; (80066dc <netif_do_set_ipaddr+0x90>)
 800667c:	f009 ff10 	bl	80104a0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3304      	adds	r3, #4
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	429a      	cmp	r2, r3
 800668c:	d01c      	beq.n	80066c8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	3304      	adds	r3, #4
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800669e:	f107 0314 	add.w	r3, r7, #20
 80066a2:	4619      	mov	r1, r3
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7ff ffbf 	bl	8006628 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <netif_do_set_ipaddr+0x6a>
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	e000      	b.n	80066b8 <netif_do_set_ipaddr+0x6c>
 80066b6:	2300      	movs	r3, #0
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80066bc:	2101      	movs	r1, #1
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 f8d2 	bl	8006868 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	08011cd0 	.word	0x08011cd0
 80066d8:	08011de8 	.word	0x08011de8
 80066dc:	08011d20 	.word	0x08011d20

080066e0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3308      	adds	r3, #8
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d00a      	beq.n	8006710 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <netif_do_set_netmask+0x26>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	e000      	b.n	8006708 <netif_do_set_netmask+0x28>
 8006706:	2300      	movs	r3, #0
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800670c:	2301      	movs	r3, #1
 800670e:	e000      	b.n	8006712 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800671e:	b480      	push	{r7}
 8006720:	b085      	sub	sp, #20
 8006722:	af00      	add	r7, sp, #0
 8006724:	60f8      	str	r0, [r7, #12]
 8006726:	60b9      	str	r1, [r7, #8]
 8006728:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	330c      	adds	r3, #12
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	429a      	cmp	r2, r3
 8006736:	d00a      	beq.n	800674e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <netif_do_set_gw+0x26>
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	e000      	b.n	8006746 <netif_do_set_gw+0x28>
 8006744:	2300      	movs	r3, #0
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800674a:	2301      	movs	r3, #1
 800674c:	e000      	b.n	8006750 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800676a:	2300      	movs	r3, #0
 800676c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800676e:	2300      	movs	r3, #0
 8006770:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006778:	4b1c      	ldr	r3, [pc, #112]	; (80067ec <netif_set_addr+0x90>)
 800677a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006782:	4b1a      	ldr	r3, [pc, #104]	; (80067ec <netif_set_addr+0x90>)
 8006784:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800678c:	4b17      	ldr	r3, [pc, #92]	; (80067ec <netif_set_addr+0x90>)
 800678e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <netif_set_addr+0x42>
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <netif_set_addr+0x46>
 800679e:	2301      	movs	r3, #1
 80067a0:	e000      	b.n	80067a4 <netif_set_addr+0x48>
 80067a2:	2300      	movs	r3, #0
 80067a4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d006      	beq.n	80067ba <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80067ac:	f107 0310 	add.w	r3, r7, #16
 80067b0:	461a      	mov	r2, r3
 80067b2:	68b9      	ldr	r1, [r7, #8]
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f7ff ff49 	bl	800664c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80067ba:	69fa      	ldr	r2, [r7, #28]
 80067bc:	6879      	ldr	r1, [r7, #4]
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f7ff ff8e 	bl	80066e0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	6839      	ldr	r1, [r7, #0]
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f7ff ffa8 	bl	800671e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d106      	bne.n	80067e2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80067d4:	f107 0310 	add.w	r3, r7, #16
 80067d8:	461a      	mov	r2, r3
 80067da:	68b9      	ldr	r1, [r7, #8]
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f7ff ff35 	bl	800664c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80067e2:	bf00      	nop
 80067e4:	3720      	adds	r7, #32
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	08014400 	.word	0x08014400

080067f0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80067f8:	4a04      	ldr	r2, [pc, #16]	; (800680c <netif_set_default+0x1c>)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80067fe:	bf00      	nop
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	24003180 	.word	0x24003180

08006810 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d107      	bne.n	800682e <netif_set_up+0x1e>
 800681e:	4b0f      	ldr	r3, [pc, #60]	; (800685c <netif_set_up+0x4c>)
 8006820:	f44f 7254 	mov.w	r2, #848	; 0x350
 8006824:	490e      	ldr	r1, [pc, #56]	; (8006860 <netif_set_up+0x50>)
 8006826:	480f      	ldr	r0, [pc, #60]	; (8006864 <netif_set_up+0x54>)
 8006828:	f009 fe3a 	bl	80104a0 <iprintf>
 800682c:	e013      	b.n	8006856 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10c      	bne.n	8006856 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006842:	f043 0301 	orr.w	r3, r3, #1
 8006846:	b2da      	uxtb	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800684e:	2103      	movs	r1, #3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f809 	bl	8006868 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	08011cd0 	.word	0x08011cd0
 8006860:	08011e58 	.word	0x08011e58
 8006864:	08011d20 	.word	0x08011d20

08006868 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <netif_issue_reports+0x20>
 800687a:	4b18      	ldr	r3, [pc, #96]	; (80068dc <netif_issue_reports+0x74>)
 800687c:	f240 326d 	movw	r2, #877	; 0x36d
 8006880:	4917      	ldr	r1, [pc, #92]	; (80068e0 <netif_issue_reports+0x78>)
 8006882:	4818      	ldr	r0, [pc, #96]	; (80068e4 <netif_issue_reports+0x7c>)
 8006884:	f009 fe0c 	bl	80104a0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d01e      	beq.n	80068d4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800689c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d017      	beq.n	80068d4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d013      	beq.n	80068d6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	3304      	adds	r3, #4
 80068b2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00e      	beq.n	80068d6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80068be:	f003 0308 	and.w	r3, r3, #8
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d007      	beq.n	80068d6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3304      	adds	r3, #4
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f008 f941 	bl	800eb54 <etharp_request>
 80068d2:	e000      	b.n	80068d6 <netif_issue_reports+0x6e>
    return;
 80068d4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	08011cd0 	.word	0x08011cd0
 80068e0:	08011e74 	.word	0x08011e74
 80068e4:	08011d20 	.word	0x08011d20

080068e8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d107      	bne.n	8006906 <netif_set_down+0x1e>
 80068f6:	4b12      	ldr	r3, [pc, #72]	; (8006940 <netif_set_down+0x58>)
 80068f8:	f240 329b 	movw	r2, #923	; 0x39b
 80068fc:	4911      	ldr	r1, [pc, #68]	; (8006944 <netif_set_down+0x5c>)
 80068fe:	4812      	ldr	r0, [pc, #72]	; (8006948 <netif_set_down+0x60>)
 8006900:	f009 fdce 	bl	80104a0 <iprintf>
 8006904:	e019      	b.n	800693a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	d012      	beq.n	800693a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800691a:	f023 0301 	bic.w	r3, r3, #1
 800691e:	b2da      	uxtb	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800692c:	f003 0308 	and.w	r3, r3, #8
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f007 fccb 	bl	800e2d0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	08011cd0 	.word	0x08011cd0
 8006944:	08011e98 	.word	0x08011e98
 8006948:	08011d20 	.word	0x08011d20

0800694c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d107      	bne.n	800696a <netif_set_link_up+0x1e>
 800695a:	4b13      	ldr	r3, [pc, #76]	; (80069a8 <netif_set_link_up+0x5c>)
 800695c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8006960:	4912      	ldr	r1, [pc, #72]	; (80069ac <netif_set_link_up+0x60>)
 8006962:	4813      	ldr	r0, [pc, #76]	; (80069b0 <netif_set_link_up+0x64>)
 8006964:	f009 fd9c 	bl	80104a0 <iprintf>
 8006968:	e01b      	b.n	80069a2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006970:	f003 0304 	and.w	r3, r3, #4
 8006974:	2b00      	cmp	r3, #0
 8006976:	d114      	bne.n	80069a2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800697e:	f043 0304 	orr.w	r3, r3, #4
 8006982:	b2da      	uxtb	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800698a:	2103      	movs	r1, #3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff ff6b 	bl	8006868 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <netif_set_link_up+0x56>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	08011cd0 	.word	0x08011cd0
 80069ac:	08011eb8 	.word	0x08011eb8
 80069b0:	08011d20 	.word	0x08011d20

080069b4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d107      	bne.n	80069d2 <netif_set_link_down+0x1e>
 80069c2:	4b11      	ldr	r3, [pc, #68]	; (8006a08 <netif_set_link_down+0x54>)
 80069c4:	f240 4206 	movw	r2, #1030	; 0x406
 80069c8:	4910      	ldr	r1, [pc, #64]	; (8006a0c <netif_set_link_down+0x58>)
 80069ca:	4811      	ldr	r0, [pc, #68]	; (8006a10 <netif_set_link_down+0x5c>)
 80069cc:	f009 fd68 	bl	80104a0 <iprintf>
 80069d0:	e017      	b.n	8006a02 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80069d8:	f003 0304 	and.w	r3, r3, #4
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d010      	beq.n	8006a02 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80069e6:	f023 0304 	bic.w	r3, r3, #4
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <netif_set_link_down+0x4e>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	08011cd0 	.word	0x08011cd0
 8006a0c:	08011edc 	.word	0x08011edc
 8006a10:	08011d20 	.word	0x08011d20

08006a14 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	61da      	str	r2, [r3, #28]
  }
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b085      	sub	sp, #20
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006a42:	f06f 030b 	mvn.w	r3, #11
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
	...

08006a54 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006a5e:	79fb      	ldrb	r3, [r7, #7]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d013      	beq.n	8006a8c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006a64:	4b0d      	ldr	r3, [pc, #52]	; (8006a9c <netif_get_by_index+0x48>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	60fb      	str	r3, [r7, #12]
 8006a6a:	e00c      	b.n	8006a86 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a72:	3301      	adds	r3, #1
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	79fa      	ldrb	r2, [r7, #7]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d101      	bne.n	8006a80 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	e006      	b.n	8006a8e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1ef      	bne.n	8006a6c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	2400317c 	.word	0x2400317c

08006aa0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006aa6:	4b0c      	ldr	r3, [pc, #48]	; (8006ad8 <pbuf_free_ooseq+0x38>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006aac:	4b0b      	ldr	r3, [pc, #44]	; (8006adc <pbuf_free_ooseq+0x3c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	607b      	str	r3, [r7, #4]
 8006ab2:	e00a      	b.n	8006aca <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f002 fbdd 	bl	800927c <tcp_free_ooseq>
      return;
 8006ac2:	e005      	b.n	8006ad0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	607b      	str	r3, [r7, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1f1      	bne.n	8006ab4 <pbuf_free_ooseq+0x14>
    }
  }
}
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	24003185 	.word	0x24003185
 8006adc:	24003194 	.word	0x24003194

08006ae0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006ae4:	4b03      	ldr	r3, [pc, #12]	; (8006af4 <pbuf_pool_is_empty+0x14>)
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006aea:	bf00      	nop
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	24003185 	.word	0x24003185

08006af8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	4611      	mov	r1, r2
 8006b04:	461a      	mov	r2, r3
 8006b06:	460b      	mov	r3, r1
 8006b08:	80fb      	strh	r3, [r7, #6]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	88fa      	ldrh	r2, [r7, #6]
 8006b1e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	88ba      	ldrh	r2, [r7, #4]
 8006b24:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006b26:	8b3b      	ldrh	r3, [r7, #24]
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	7f3a      	ldrb	r2, [r7, #28]
 8006b32:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2201      	movs	r2, #1
 8006b38:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	73da      	strb	r2, [r3, #15]
}
 8006b40:	bf00      	nop
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08c      	sub	sp, #48	; 0x30
 8006b50:	af02      	add	r7, sp, #8
 8006b52:	4603      	mov	r3, r0
 8006b54:	71fb      	strb	r3, [r7, #7]
 8006b56:	460b      	mov	r3, r1
 8006b58:	80bb      	strh	r3, [r7, #4]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006b5e:	79fb      	ldrb	r3, [r7, #7]
 8006b60:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006b62:	887b      	ldrh	r3, [r7, #2]
 8006b64:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006b68:	d07f      	beq.n	8006c6a <pbuf_alloc+0x11e>
 8006b6a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006b6e:	f300 80c8 	bgt.w	8006d02 <pbuf_alloc+0x1b6>
 8006b72:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006b76:	d010      	beq.n	8006b9a <pbuf_alloc+0x4e>
 8006b78:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006b7c:	f300 80c1 	bgt.w	8006d02 <pbuf_alloc+0x1b6>
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d002      	beq.n	8006b8a <pbuf_alloc+0x3e>
 8006b84:	2b41      	cmp	r3, #65	; 0x41
 8006b86:	f040 80bc 	bne.w	8006d02 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006b8a:	887a      	ldrh	r2, [r7, #2]
 8006b8c:	88bb      	ldrh	r3, [r7, #4]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	2000      	movs	r0, #0
 8006b92:	f000 f8d1 	bl	8006d38 <pbuf_alloc_reference>
 8006b96:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8006b98:	e0bd      	b.n	8006d16 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006ba2:	88bb      	ldrh	r3, [r7, #4]
 8006ba4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006ba6:	2008      	movs	r0, #8
 8006ba8:	f7ff fbce 	bl	8006348 <memp_malloc>
 8006bac:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d109      	bne.n	8006bc8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8006bb4:	f7ff ff94 	bl	8006ae0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d002      	beq.n	8006bc4 <pbuf_alloc+0x78>
            pbuf_free(p);
 8006bbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bc0:	f000 faa8 	bl	8007114 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	e0a7      	b.n	8006d18 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006bc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006bca:	3303      	adds	r3, #3
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f023 0303 	bic.w	r3, r3, #3
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	8b7a      	ldrh	r2, [r7, #26]
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	bf28      	it	cs
 8006be0:	4613      	movcs	r3, r2
 8006be2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006be4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006be6:	3310      	adds	r3, #16
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	4413      	add	r3, r2
 8006bec:	3303      	adds	r3, #3
 8006bee:	f023 0303 	bic.w	r3, r3, #3
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	89f9      	ldrh	r1, [r7, #14]
 8006bf6:	8b7a      	ldrh	r2, [r7, #26]
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	9301      	str	r3, [sp, #4]
 8006bfc:	887b      	ldrh	r3, [r7, #2]
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	460b      	mov	r3, r1
 8006c02:	4601      	mov	r1, r0
 8006c04:	6938      	ldr	r0, [r7, #16]
 8006c06:	f7ff ff77 	bl	8006af8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f003 0303 	and.w	r3, r3, #3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d006      	beq.n	8006c24 <pbuf_alloc+0xd8>
 8006c16:	4b42      	ldr	r3, [pc, #264]	; (8006d20 <pbuf_alloc+0x1d4>)
 8006c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c1c:	4941      	ldr	r1, [pc, #260]	; (8006d24 <pbuf_alloc+0x1d8>)
 8006c1e:	4842      	ldr	r0, [pc, #264]	; (8006d28 <pbuf_alloc+0x1dc>)
 8006c20:	f009 fc3e 	bl	80104a0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006c24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c26:	3303      	adds	r3, #3
 8006c28:	f023 0303 	bic.w	r3, r3, #3
 8006c2c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006c30:	d106      	bne.n	8006c40 <pbuf_alloc+0xf4>
 8006c32:	4b3b      	ldr	r3, [pc, #236]	; (8006d20 <pbuf_alloc+0x1d4>)
 8006c34:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006c38:	493c      	ldr	r1, [pc, #240]	; (8006d2c <pbuf_alloc+0x1e0>)
 8006c3a:	483b      	ldr	r0, [pc, #236]	; (8006d28 <pbuf_alloc+0x1dc>)
 8006c3c:	f009 fc30 	bl	80104a0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d102      	bne.n	8006c4c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
 8006c4a:	e002      	b.n	8006c52 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006c56:	8b7a      	ldrh	r2, [r7, #26]
 8006c58:	89fb      	ldrh	r3, [r7, #14]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006c62:	8b7b      	ldrh	r3, [r7, #26]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d19e      	bne.n	8006ba6 <pbuf_alloc+0x5a>
      break;
 8006c68:	e055      	b.n	8006d16 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006c6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c6c:	3303      	adds	r3, #3
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	f023 0303 	bic.w	r3, r3, #3
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	88bb      	ldrh	r3, [r7, #4]
 8006c78:	3303      	adds	r3, #3
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f023 0303 	bic.w	r3, r3, #3
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	4413      	add	r3, r2
 8006c84:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006c86:	8b3b      	ldrh	r3, [r7, #24]
 8006c88:	3310      	adds	r3, #16
 8006c8a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006c8c:	8b3a      	ldrh	r2, [r7, #24]
 8006c8e:	88bb      	ldrh	r3, [r7, #4]
 8006c90:	3303      	adds	r3, #3
 8006c92:	f023 0303 	bic.w	r3, r3, #3
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d306      	bcc.n	8006ca8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006c9a:	8afa      	ldrh	r2, [r7, #22]
 8006c9c:	88bb      	ldrh	r3, [r7, #4]
 8006c9e:	3303      	adds	r3, #3
 8006ca0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d201      	bcs.n	8006cac <pbuf_alloc+0x160>
        return NULL;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e035      	b.n	8006d18 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006cac:	8afb      	ldrh	r3, [r7, #22]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff f9ba 	bl	8006028 <mem_malloc>
 8006cb4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <pbuf_alloc+0x174>
        return NULL;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	e02b      	b.n	8006d18 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006cc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006cc2:	3310      	adds	r3, #16
 8006cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc6:	4413      	add	r3, r2
 8006cc8:	3303      	adds	r3, #3
 8006cca:	f023 0303 	bic.w	r3, r3, #3
 8006cce:	4618      	mov	r0, r3
 8006cd0:	88b9      	ldrh	r1, [r7, #4]
 8006cd2:	88ba      	ldrh	r2, [r7, #4]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	9301      	str	r3, [sp, #4]
 8006cd8:	887b      	ldrh	r3, [r7, #2]
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4601      	mov	r1, r0
 8006ce0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ce2:	f7ff ff09 	bl	8006af8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f003 0303 	and.w	r3, r3, #3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d010      	beq.n	8006d14 <pbuf_alloc+0x1c8>
 8006cf2:	4b0b      	ldr	r3, [pc, #44]	; (8006d20 <pbuf_alloc+0x1d4>)
 8006cf4:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006cf8:	490d      	ldr	r1, [pc, #52]	; (8006d30 <pbuf_alloc+0x1e4>)
 8006cfa:	480b      	ldr	r0, [pc, #44]	; (8006d28 <pbuf_alloc+0x1dc>)
 8006cfc:	f009 fbd0 	bl	80104a0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006d00:	e008      	b.n	8006d14 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006d02:	4b07      	ldr	r3, [pc, #28]	; (8006d20 <pbuf_alloc+0x1d4>)
 8006d04:	f240 1227 	movw	r2, #295	; 0x127
 8006d08:	490a      	ldr	r1, [pc, #40]	; (8006d34 <pbuf_alloc+0x1e8>)
 8006d0a:	4807      	ldr	r0, [pc, #28]	; (8006d28 <pbuf_alloc+0x1dc>)
 8006d0c:	f009 fbc8 	bl	80104a0 <iprintf>
      return NULL;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e001      	b.n	8006d18 <pbuf_alloc+0x1cc>
      break;
 8006d14:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3728      	adds	r7, #40	; 0x28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	08011f00 	.word	0x08011f00
 8006d24:	08011f30 	.word	0x08011f30
 8006d28:	08011f60 	.word	0x08011f60
 8006d2c:	08011f88 	.word	0x08011f88
 8006d30:	08011fbc 	.word	0x08011fbc
 8006d34:	08011fe8 	.word	0x08011fe8

08006d38 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af02      	add	r7, sp, #8
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	807b      	strh	r3, [r7, #2]
 8006d44:	4613      	mov	r3, r2
 8006d46:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006d48:	883b      	ldrh	r3, [r7, #0]
 8006d4a:	2b41      	cmp	r3, #65	; 0x41
 8006d4c:	d009      	beq.n	8006d62 <pbuf_alloc_reference+0x2a>
 8006d4e:	883b      	ldrh	r3, [r7, #0]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d006      	beq.n	8006d62 <pbuf_alloc_reference+0x2a>
 8006d54:	4b0f      	ldr	r3, [pc, #60]	; (8006d94 <pbuf_alloc_reference+0x5c>)
 8006d56:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006d5a:	490f      	ldr	r1, [pc, #60]	; (8006d98 <pbuf_alloc_reference+0x60>)
 8006d5c:	480f      	ldr	r0, [pc, #60]	; (8006d9c <pbuf_alloc_reference+0x64>)
 8006d5e:	f009 fb9f 	bl	80104a0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006d62:	2007      	movs	r0, #7
 8006d64:	f7ff faf0 	bl	8006348 <memp_malloc>
 8006d68:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006d70:	2300      	movs	r3, #0
 8006d72:	e00b      	b.n	8006d8c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006d74:	8879      	ldrh	r1, [r7, #2]
 8006d76:	887a      	ldrh	r2, [r7, #2]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	9301      	str	r3, [sp, #4]
 8006d7c:	883b      	ldrh	r3, [r7, #0]
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	460b      	mov	r3, r1
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f7ff feb7 	bl	8006af8 <pbuf_init_alloced_pbuf>
  return p;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	08011f00 	.word	0x08011f00
 8006d98:	08012004 	.word	0x08012004
 8006d9c:	08011f60 	.word	0x08011f60

08006da0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af02      	add	r7, sp, #8
 8006da6:	607b      	str	r3, [r7, #4]
 8006da8:	4603      	mov	r3, r0
 8006daa:	73fb      	strb	r3, [r7, #15]
 8006dac:	460b      	mov	r3, r1
 8006dae:	81bb      	strh	r3, [r7, #12]
 8006db0:	4613      	mov	r3, r2
 8006db2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
 8006db6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006db8:	8a7b      	ldrh	r3, [r7, #18]
 8006dba:	3303      	adds	r3, #3
 8006dbc:	f023 0203 	bic.w	r2, r3, #3
 8006dc0:	89bb      	ldrh	r3, [r7, #12]
 8006dc2:	441a      	add	r2, r3
 8006dc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d901      	bls.n	8006dce <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e018      	b.n	8006e00 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006dce:	6a3b      	ldr	r3, [r7, #32]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d007      	beq.n	8006de4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006dd4:	8a7b      	ldrh	r3, [r7, #18]
 8006dd6:	3303      	adds	r3, #3
 8006dd8:	f023 0303 	bic.w	r3, r3, #3
 8006ddc:	6a3a      	ldr	r2, [r7, #32]
 8006dde:	4413      	add	r3, r2
 8006de0:	617b      	str	r3, [r7, #20]
 8006de2:	e001      	b.n	8006de8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006de4:	2300      	movs	r3, #0
 8006de6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	89b9      	ldrh	r1, [r7, #12]
 8006dec:	89ba      	ldrh	r2, [r7, #12]
 8006dee:	2302      	movs	r3, #2
 8006df0:	9301      	str	r3, [sp, #4]
 8006df2:	897b      	ldrh	r3, [r7, #10]
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	460b      	mov	r3, r1
 8006df8:	6979      	ldr	r1, [r7, #20]
 8006dfa:	f7ff fe7d 	bl	8006af8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006dfe:	687b      	ldr	r3, [r7, #4]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	460b      	mov	r3, r1
 8006e12:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d106      	bne.n	8006e28 <pbuf_realloc+0x20>
 8006e1a:	4b3a      	ldr	r3, [pc, #232]	; (8006f04 <pbuf_realloc+0xfc>)
 8006e1c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006e20:	4939      	ldr	r1, [pc, #228]	; (8006f08 <pbuf_realloc+0x100>)
 8006e22:	483a      	ldr	r0, [pc, #232]	; (8006f0c <pbuf_realloc+0x104>)
 8006e24:	f009 fb3c 	bl	80104a0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	891b      	ldrh	r3, [r3, #8]
 8006e2c:	887a      	ldrh	r2, [r7, #2]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d263      	bcs.n	8006efa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	891a      	ldrh	r2, [r3, #8]
 8006e36:	887b      	ldrh	r3, [r7, #2]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006e3c:	887b      	ldrh	r3, [r7, #2]
 8006e3e:	817b      	strh	r3, [r7, #10]
  q = p;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006e44:	e018      	b.n	8006e78 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	895b      	ldrh	r3, [r3, #10]
 8006e4a:	897a      	ldrh	r2, [r7, #10]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	891a      	ldrh	r2, [r3, #8]
 8006e54:	893b      	ldrh	r3, [r7, #8]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <pbuf_realloc+0x70>
 8006e6a:	4b26      	ldr	r3, [pc, #152]	; (8006f04 <pbuf_realloc+0xfc>)
 8006e6c:	f240 12af 	movw	r2, #431	; 0x1af
 8006e70:	4927      	ldr	r1, [pc, #156]	; (8006f10 <pbuf_realloc+0x108>)
 8006e72:	4826      	ldr	r0, [pc, #152]	; (8006f0c <pbuf_realloc+0x104>)
 8006e74:	f009 fb14 	bl	80104a0 <iprintf>
  while (rem_len > q->len) {
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	895b      	ldrh	r3, [r3, #10]
 8006e7c:	897a      	ldrh	r2, [r7, #10]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d8e1      	bhi.n	8006e46 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	7b1b      	ldrb	r3, [r3, #12]
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d121      	bne.n	8006ed2 <pbuf_realloc+0xca>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	895b      	ldrh	r3, [r3, #10]
 8006e92:	897a      	ldrh	r2, [r7, #10]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d01c      	beq.n	8006ed2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	7b5b      	ldrb	r3, [r3, #13]
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d116      	bne.n	8006ed2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	897b      	ldrh	r3, [r7, #10]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f7fe ffba 	bl	8005e30 <mem_trim>
 8006ebc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d106      	bne.n	8006ed2 <pbuf_realloc+0xca>
 8006ec4:	4b0f      	ldr	r3, [pc, #60]	; (8006f04 <pbuf_realloc+0xfc>)
 8006ec6:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006eca:	4912      	ldr	r1, [pc, #72]	; (8006f14 <pbuf_realloc+0x10c>)
 8006ecc:	480f      	ldr	r0, [pc, #60]	; (8006f0c <pbuf_realloc+0x104>)
 8006ece:	f009 fae7 	bl	80104a0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	897a      	ldrh	r2, [r7, #10]
 8006ed6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	895a      	ldrh	r2, [r3, #10]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d004      	beq.n	8006ef2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 f911 	bl	8007114 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	601a      	str	r2, [r3, #0]
 8006ef8:	e000      	b.n	8006efc <pbuf_realloc+0xf4>
    return;
 8006efa:	bf00      	nop

}
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	08011f00 	.word	0x08011f00
 8006f08:	08012018 	.word	0x08012018
 8006f0c:	08011f60 	.word	0x08011f60
 8006f10:	08012030 	.word	0x08012030
 8006f14:	08012048 	.word	0x08012048

08006f18 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	4613      	mov	r3, r2
 8006f24:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d106      	bne.n	8006f3a <pbuf_add_header_impl+0x22>
 8006f2c:	4b2b      	ldr	r3, [pc, #172]	; (8006fdc <pbuf_add_header_impl+0xc4>)
 8006f2e:	f240 12df 	movw	r2, #479	; 0x1df
 8006f32:	492b      	ldr	r1, [pc, #172]	; (8006fe0 <pbuf_add_header_impl+0xc8>)
 8006f34:	482b      	ldr	r0, [pc, #172]	; (8006fe4 <pbuf_add_header_impl+0xcc>)
 8006f36:	f009 fab3 	bl	80104a0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d003      	beq.n	8006f48 <pbuf_add_header_impl+0x30>
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f46:	d301      	bcc.n	8006f4c <pbuf_add_header_impl+0x34>
    return 1;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e043      	b.n	8006fd4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <pbuf_add_header_impl+0x3e>
    return 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	e03e      	b.n	8006fd4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	891a      	ldrh	r2, [r3, #8]
 8006f5e:	8a7b      	ldrh	r3, [r7, #18]
 8006f60:	4413      	add	r3, r2
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	8a7a      	ldrh	r2, [r7, #18]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d901      	bls.n	8006f6e <pbuf_add_header_impl+0x56>
    return 1;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e032      	b.n	8006fd4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	7b1b      	ldrb	r3, [r3, #12]
 8006f72:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006f74:	8a3b      	ldrh	r3, [r7, #16]
 8006f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00c      	beq.n	8006f98 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	425b      	negs	r3, r3
 8006f86:	4413      	add	r3, r2
 8006f88:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	3310      	adds	r3, #16
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d20d      	bcs.n	8006fb0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e01d      	b.n	8006fd4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006f98:	79fb      	ldrb	r3, [r7, #7]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d006      	beq.n	8006fac <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	425b      	negs	r3, r3
 8006fa6:	4413      	add	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]
 8006faa:	e001      	b.n	8006fb0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e011      	b.n	8006fd4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	895a      	ldrh	r2, [r3, #10]
 8006fba:	8a7b      	ldrh	r3, [r7, #18]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	891a      	ldrh	r2, [r3, #8]
 8006fc8:	8a7b      	ldrh	r3, [r7, #18]
 8006fca:	4413      	add	r3, r2
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	811a      	strh	r2, [r3, #8]


  return 0;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	08011f00 	.word	0x08011f00
 8006fe0:	08012064 	.word	0x08012064
 8006fe4:	08011f60 	.word	0x08011f60

08006fe8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7ff ff8e 	bl	8006f18 <pbuf_add_header_impl>
 8006ffc:	4603      	mov	r3, r0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
	...

08007008 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d106      	bne.n	8007026 <pbuf_remove_header+0x1e>
 8007018:	4b20      	ldr	r3, [pc, #128]	; (800709c <pbuf_remove_header+0x94>)
 800701a:	f240 224b 	movw	r2, #587	; 0x24b
 800701e:	4920      	ldr	r1, [pc, #128]	; (80070a0 <pbuf_remove_header+0x98>)
 8007020:	4820      	ldr	r0, [pc, #128]	; (80070a4 <pbuf_remove_header+0x9c>)
 8007022:	f009 fa3d 	bl	80104a0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d003      	beq.n	8007034 <pbuf_remove_header+0x2c>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007032:	d301      	bcc.n	8007038 <pbuf_remove_header+0x30>
    return 1;
 8007034:	2301      	movs	r3, #1
 8007036:	e02c      	b.n	8007092 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <pbuf_remove_header+0x3a>
    return 0;
 800703e:	2300      	movs	r3, #0
 8007040:	e027      	b.n	8007092 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	895b      	ldrh	r3, [r3, #10]
 800704a:	89fa      	ldrh	r2, [r7, #14]
 800704c:	429a      	cmp	r2, r3
 800704e:	d908      	bls.n	8007062 <pbuf_remove_header+0x5a>
 8007050:	4b12      	ldr	r3, [pc, #72]	; (800709c <pbuf_remove_header+0x94>)
 8007052:	f240 2255 	movw	r2, #597	; 0x255
 8007056:	4914      	ldr	r1, [pc, #80]	; (80070a8 <pbuf_remove_header+0xa0>)
 8007058:	4812      	ldr	r0, [pc, #72]	; (80070a4 <pbuf_remove_header+0x9c>)
 800705a:	f009 fa21 	bl	80104a0 <iprintf>
 800705e:	2301      	movs	r3, #1
 8007060:	e017      	b.n	8007092 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	441a      	add	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	895a      	ldrh	r2, [r3, #10]
 8007078:	89fb      	ldrh	r3, [r7, #14]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	b29a      	uxth	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	891a      	ldrh	r2, [r3, #8]
 8007086:	89fb      	ldrh	r3, [r7, #14]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	b29a      	uxth	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	08011f00 	.word	0x08011f00
 80070a0:	08012064 	.word	0x08012064
 80070a4:	08011f60 	.word	0x08011f60
 80070a8:	08012070 	.word	0x08012070

080070ac <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	807b      	strh	r3, [r7, #2]
 80070b8:	4613      	mov	r3, r2
 80070ba:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80070bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	da08      	bge.n	80070d6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80070c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070c8:	425b      	negs	r3, r3
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f7ff ff9b 	bl	8007008 <pbuf_remove_header>
 80070d2:	4603      	mov	r3, r0
 80070d4:	e007      	b.n	80070e6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80070d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070da:	787a      	ldrb	r2, [r7, #1]
 80070dc:	4619      	mov	r1, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7ff ff1a 	bl	8006f18 <pbuf_add_header_impl>
 80070e4:	4603      	mov	r3, r0
  }
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	460b      	mov	r3, r1
 80070f8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80070fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070fe:	2201      	movs	r2, #1
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7ff ffd2 	bl	80070ac <pbuf_header_impl>
 8007108:	4603      	mov	r3, r0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
	...

08007114 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10b      	bne.n	800713a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d106      	bne.n	8007136 <pbuf_free+0x22>
 8007128:	4b38      	ldr	r3, [pc, #224]	; (800720c <pbuf_free+0xf8>)
 800712a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800712e:	4938      	ldr	r1, [pc, #224]	; (8007210 <pbuf_free+0xfc>)
 8007130:	4838      	ldr	r0, [pc, #224]	; (8007214 <pbuf_free+0x100>)
 8007132:	f009 f9b5 	bl	80104a0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007136:	2300      	movs	r3, #0
 8007138:	e063      	b.n	8007202 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800713a:	2300      	movs	r3, #0
 800713c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800713e:	e05c      	b.n	80071fa <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	7b9b      	ldrb	r3, [r3, #14]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d106      	bne.n	8007156 <pbuf_free+0x42>
 8007148:	4b30      	ldr	r3, [pc, #192]	; (800720c <pbuf_free+0xf8>)
 800714a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800714e:	4932      	ldr	r1, [pc, #200]	; (8007218 <pbuf_free+0x104>)
 8007150:	4830      	ldr	r0, [pc, #192]	; (8007214 <pbuf_free+0x100>)
 8007152:	f009 f9a5 	bl	80104a0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	7b9b      	ldrb	r3, [r3, #14]
 800715a:	3b01      	subs	r3, #1
 800715c:	b2da      	uxtb	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	739a      	strb	r2, [r3, #14]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	7b9b      	ldrb	r3, [r3, #14]
 8007166:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007168:	7dbb      	ldrb	r3, [r7, #22]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d143      	bne.n	80071f6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	7b1b      	ldrb	r3, [r3, #12]
 8007178:	f003 030f 	and.w	r3, r3, #15
 800717c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	7b5b      	ldrb	r3, [r3, #13]
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d011      	beq.n	80071ae <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d106      	bne.n	80071a4 <pbuf_free+0x90>
 8007196:	4b1d      	ldr	r3, [pc, #116]	; (800720c <pbuf_free+0xf8>)
 8007198:	f240 22ff 	movw	r2, #767	; 0x2ff
 800719c:	491f      	ldr	r1, [pc, #124]	; (800721c <pbuf_free+0x108>)
 800719e:	481d      	ldr	r0, [pc, #116]	; (8007214 <pbuf_free+0x100>)
 80071a0:	f009 f97e 	bl	80104a0 <iprintf>
        pc->custom_free_function(p);
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	4798      	blx	r3
 80071ac:	e01d      	b.n	80071ea <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d104      	bne.n	80071be <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80071b4:	6879      	ldr	r1, [r7, #4]
 80071b6:	2008      	movs	r0, #8
 80071b8:	f7ff f936 	bl	8006428 <memp_free>
 80071bc:	e015      	b.n	80071ea <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80071be:	7bfb      	ldrb	r3, [r7, #15]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d104      	bne.n	80071ce <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80071c4:	6879      	ldr	r1, [r7, #4]
 80071c6:	2007      	movs	r0, #7
 80071c8:	f7ff f92e 	bl	8006428 <memp_free>
 80071cc:	e00d      	b.n	80071ea <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d103      	bne.n	80071dc <pbuf_free+0xc8>
          mem_free(p);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7fe fdc1 	bl	8005d5c <mem_free>
 80071da:	e006      	b.n	80071ea <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80071dc:	4b0b      	ldr	r3, [pc, #44]	; (800720c <pbuf_free+0xf8>)
 80071de:	f240 320f 	movw	r2, #783	; 0x30f
 80071e2:	490f      	ldr	r1, [pc, #60]	; (8007220 <pbuf_free+0x10c>)
 80071e4:	480b      	ldr	r0, [pc, #44]	; (8007214 <pbuf_free+0x100>)
 80071e6:	f009 f95b 	bl	80104a0 <iprintf>
        }
      }
      count++;
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	3301      	adds	r3, #1
 80071ee:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	607b      	str	r3, [r7, #4]
 80071f4:	e001      	b.n	80071fa <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80071f6:	2300      	movs	r3, #0
 80071f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d19f      	bne.n	8007140 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007200:	7dfb      	ldrb	r3, [r7, #23]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	08011f00 	.word	0x08011f00
 8007210:	08012064 	.word	0x08012064
 8007214:	08011f60 	.word	0x08011f60
 8007218:	08012090 	.word	0x08012090
 800721c:	080120a8 	.word	0x080120a8
 8007220:	080120cc 	.word	0x080120cc

08007224 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800722c:	2300      	movs	r3, #0
 800722e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007230:	e005      	b.n	800723e <pbuf_clen+0x1a>
    ++len;
 8007232:	89fb      	ldrh	r3, [r7, #14]
 8007234:	3301      	adds	r3, #1
 8007236:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1f6      	bne.n	8007232 <pbuf_clen+0xe>
  }
  return len;
 8007244:	89fb      	ldrh	r3, [r7, #14]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
	...

08007254 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d010      	beq.n	8007284 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	7b9b      	ldrb	r3, [r3, #14]
 8007266:	3301      	adds	r3, #1
 8007268:	b2da      	uxtb	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	7b9b      	ldrb	r3, [r3, #14]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d106      	bne.n	8007284 <pbuf_ref+0x30>
 8007276:	4b05      	ldr	r3, [pc, #20]	; (800728c <pbuf_ref+0x38>)
 8007278:	f240 3242 	movw	r2, #834	; 0x342
 800727c:	4904      	ldr	r1, [pc, #16]	; (8007290 <pbuf_ref+0x3c>)
 800727e:	4805      	ldr	r0, [pc, #20]	; (8007294 <pbuf_ref+0x40>)
 8007280:	f009 f90e 	bl	80104a0 <iprintf>
  }
}
 8007284:	bf00      	nop
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	08011f00 	.word	0x08011f00
 8007290:	080120e0 	.word	0x080120e0
 8007294:	08011f60 	.word	0x08011f60

08007298 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <pbuf_cat+0x16>
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d107      	bne.n	80072be <pbuf_cat+0x26>
 80072ae:	4b20      	ldr	r3, [pc, #128]	; (8007330 <pbuf_cat+0x98>)
 80072b0:	f240 3259 	movw	r2, #857	; 0x359
 80072b4:	491f      	ldr	r1, [pc, #124]	; (8007334 <pbuf_cat+0x9c>)
 80072b6:	4820      	ldr	r0, [pc, #128]	; (8007338 <pbuf_cat+0xa0>)
 80072b8:	f009 f8f2 	bl	80104a0 <iprintf>
 80072bc:	e034      	b.n	8007328 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	e00a      	b.n	80072da <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	891a      	ldrh	r2, [r3, #8]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	891b      	ldrh	r3, [r3, #8]
 80072cc:	4413      	add	r3, r2
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	60fb      	str	r3, [r7, #12]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1f0      	bne.n	80072c4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	891a      	ldrh	r2, [r3, #8]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	895b      	ldrh	r3, [r3, #10]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d006      	beq.n	80072fc <pbuf_cat+0x64>
 80072ee:	4b10      	ldr	r3, [pc, #64]	; (8007330 <pbuf_cat+0x98>)
 80072f0:	f240 3262 	movw	r2, #866	; 0x362
 80072f4:	4911      	ldr	r1, [pc, #68]	; (800733c <pbuf_cat+0xa4>)
 80072f6:	4810      	ldr	r0, [pc, #64]	; (8007338 <pbuf_cat+0xa0>)
 80072f8:	f009 f8d2 	bl	80104a0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d006      	beq.n	8007312 <pbuf_cat+0x7a>
 8007304:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <pbuf_cat+0x98>)
 8007306:	f240 3263 	movw	r2, #867	; 0x363
 800730a:	490d      	ldr	r1, [pc, #52]	; (8007340 <pbuf_cat+0xa8>)
 800730c:	480a      	ldr	r0, [pc, #40]	; (8007338 <pbuf_cat+0xa0>)
 800730e:	f009 f8c7 	bl	80104a0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	891a      	ldrh	r2, [r3, #8]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	891b      	ldrh	r3, [r3, #8]
 800731a:	4413      	add	r3, r2
 800731c:	b29a      	uxth	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	08011f00 	.word	0x08011f00
 8007334:	080120f4 	.word	0x080120f4
 8007338:	08011f60 	.word	0x08011f60
 800733c:	0801212c 	.word	0x0801212c
 8007340:	0801215c 	.word	0x0801215c

08007344 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800734e:	2300      	movs	r3, #0
 8007350:	617b      	str	r3, [r7, #20]
 8007352:	2300      	movs	r3, #0
 8007354:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d008      	beq.n	800736e <pbuf_copy+0x2a>
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d005      	beq.n	800736e <pbuf_copy+0x2a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	891a      	ldrh	r2, [r3, #8]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	891b      	ldrh	r3, [r3, #8]
 800736a:	429a      	cmp	r2, r3
 800736c:	d209      	bcs.n	8007382 <pbuf_copy+0x3e>
 800736e:	4b57      	ldr	r3, [pc, #348]	; (80074cc <pbuf_copy+0x188>)
 8007370:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007374:	4956      	ldr	r1, [pc, #344]	; (80074d0 <pbuf_copy+0x18c>)
 8007376:	4857      	ldr	r0, [pc, #348]	; (80074d4 <pbuf_copy+0x190>)
 8007378:	f009 f892 	bl	80104a0 <iprintf>
 800737c:	f06f 030f 	mvn.w	r3, #15
 8007380:	e09f      	b.n	80074c2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	895b      	ldrh	r3, [r3, #10]
 8007386:	461a      	mov	r2, r3
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	1ad2      	subs	r2, r2, r3
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	895b      	ldrh	r3, [r3, #10]
 8007390:	4619      	mov	r1, r3
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	1acb      	subs	r3, r1, r3
 8007396:	429a      	cmp	r2, r3
 8007398:	d306      	bcc.n	80073a8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	895b      	ldrh	r3, [r3, #10]
 800739e:	461a      	mov	r2, r3
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	e005      	b.n	80073b4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	895b      	ldrh	r3, [r3, #10]
 80073ac:	461a      	mov	r2, r3
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	18d0      	adds	r0, r2, r3
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	4413      	add	r3, r2
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4619      	mov	r1, r3
 80073c8:	f009 f83a 	bl	8010440 <memcpy>
    offset_to += len;
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	4413      	add	r3, r2
 80073d2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	4413      	add	r3, r2
 80073da:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	895b      	ldrh	r3, [r3, #10]
 80073e0:	461a      	mov	r2, r3
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d906      	bls.n	80073f6 <pbuf_copy+0xb2>
 80073e8:	4b38      	ldr	r3, [pc, #224]	; (80074cc <pbuf_copy+0x188>)
 80073ea:	f240 32d9 	movw	r2, #985	; 0x3d9
 80073ee:	493a      	ldr	r1, [pc, #232]	; (80074d8 <pbuf_copy+0x194>)
 80073f0:	4838      	ldr	r0, [pc, #224]	; (80074d4 <pbuf_copy+0x190>)
 80073f2:	f009 f855 	bl	80104a0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	895b      	ldrh	r3, [r3, #10]
 80073fa:	461a      	mov	r2, r3
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	4293      	cmp	r3, r2
 8007400:	d906      	bls.n	8007410 <pbuf_copy+0xcc>
 8007402:	4b32      	ldr	r3, [pc, #200]	; (80074cc <pbuf_copy+0x188>)
 8007404:	f240 32da 	movw	r2, #986	; 0x3da
 8007408:	4934      	ldr	r1, [pc, #208]	; (80074dc <pbuf_copy+0x198>)
 800740a:	4832      	ldr	r0, [pc, #200]	; (80074d4 <pbuf_copy+0x190>)
 800740c:	f009 f848 	bl	80104a0 <iprintf>
    if (offset_from >= p_from->len) {
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	895b      	ldrh	r3, [r3, #10]
 8007414:	461a      	mov	r2, r3
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	4293      	cmp	r3, r2
 800741a:	d304      	bcc.n	8007426 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800741c:	2300      	movs	r3, #0
 800741e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	895b      	ldrh	r3, [r3, #10]
 800742a:	461a      	mov	r2, r3
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	4293      	cmp	r3, r2
 8007430:	d114      	bne.n	800745c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007432:	2300      	movs	r3, #0
 8007434:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10c      	bne.n	800745c <pbuf_copy+0x118>
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d009      	beq.n	800745c <pbuf_copy+0x118>
 8007448:	4b20      	ldr	r3, [pc, #128]	; (80074cc <pbuf_copy+0x188>)
 800744a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800744e:	4924      	ldr	r1, [pc, #144]	; (80074e0 <pbuf_copy+0x19c>)
 8007450:	4820      	ldr	r0, [pc, #128]	; (80074d4 <pbuf_copy+0x190>)
 8007452:	f009 f825 	bl	80104a0 <iprintf>
 8007456:	f06f 030f 	mvn.w	r3, #15
 800745a:	e032      	b.n	80074c2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d013      	beq.n	800748a <pbuf_copy+0x146>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	895a      	ldrh	r2, [r3, #10]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	891b      	ldrh	r3, [r3, #8]
 800746a:	429a      	cmp	r2, r3
 800746c:	d10d      	bne.n	800748a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d009      	beq.n	800748a <pbuf_copy+0x146>
 8007476:	4b15      	ldr	r3, [pc, #84]	; (80074cc <pbuf_copy+0x188>)
 8007478:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800747c:	4919      	ldr	r1, [pc, #100]	; (80074e4 <pbuf_copy+0x1a0>)
 800747e:	4815      	ldr	r0, [pc, #84]	; (80074d4 <pbuf_copy+0x190>)
 8007480:	f009 f80e 	bl	80104a0 <iprintf>
 8007484:	f06f 0305 	mvn.w	r3, #5
 8007488:	e01b      	b.n	80074c2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d013      	beq.n	80074b8 <pbuf_copy+0x174>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	895a      	ldrh	r2, [r3, #10]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	891b      	ldrh	r3, [r3, #8]
 8007498:	429a      	cmp	r2, r3
 800749a:	d10d      	bne.n	80074b8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d009      	beq.n	80074b8 <pbuf_copy+0x174>
 80074a4:	4b09      	ldr	r3, [pc, #36]	; (80074cc <pbuf_copy+0x188>)
 80074a6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80074aa:	490e      	ldr	r1, [pc, #56]	; (80074e4 <pbuf_copy+0x1a0>)
 80074ac:	4809      	ldr	r0, [pc, #36]	; (80074d4 <pbuf_copy+0x190>)
 80074ae:	f008 fff7 	bl	80104a0 <iprintf>
 80074b2:	f06f 0305 	mvn.w	r3, #5
 80074b6:	e004      	b.n	80074c2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f47f af61 	bne.w	8007382 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	08011f00 	.word	0x08011f00
 80074d0:	080121a8 	.word	0x080121a8
 80074d4:	08011f60 	.word	0x08011f60
 80074d8:	080121d8 	.word	0x080121d8
 80074dc:	080121f0 	.word	0x080121f0
 80074e0:	0801220c 	.word	0x0801220c
 80074e4:	0801221c 	.word	0x0801221c

080074e8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	4611      	mov	r1, r2
 80074f4:	461a      	mov	r2, r3
 80074f6:	460b      	mov	r3, r1
 80074f8:	80fb      	strh	r3, [r7, #6]
 80074fa:	4613      	mov	r3, r2
 80074fc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80074fe:	2300      	movs	r3, #0
 8007500:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007502:	2300      	movs	r3, #0
 8007504:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d108      	bne.n	800751e <pbuf_copy_partial+0x36>
 800750c:	4b2b      	ldr	r3, [pc, #172]	; (80075bc <pbuf_copy_partial+0xd4>)
 800750e:	f240 420a 	movw	r2, #1034	; 0x40a
 8007512:	492b      	ldr	r1, [pc, #172]	; (80075c0 <pbuf_copy_partial+0xd8>)
 8007514:	482b      	ldr	r0, [pc, #172]	; (80075c4 <pbuf_copy_partial+0xdc>)
 8007516:	f008 ffc3 	bl	80104a0 <iprintf>
 800751a:	2300      	movs	r3, #0
 800751c:	e04a      	b.n	80075b4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d108      	bne.n	8007536 <pbuf_copy_partial+0x4e>
 8007524:	4b25      	ldr	r3, [pc, #148]	; (80075bc <pbuf_copy_partial+0xd4>)
 8007526:	f240 420b 	movw	r2, #1035	; 0x40b
 800752a:	4927      	ldr	r1, [pc, #156]	; (80075c8 <pbuf_copy_partial+0xe0>)
 800752c:	4825      	ldr	r0, [pc, #148]	; (80075c4 <pbuf_copy_partial+0xdc>)
 800752e:	f008 ffb7 	bl	80104a0 <iprintf>
 8007532:	2300      	movs	r3, #0
 8007534:	e03e      	b.n	80075b4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	61fb      	str	r3, [r7, #28]
 800753a:	e034      	b.n	80075a6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800753c:	88bb      	ldrh	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <pbuf_copy_partial+0x70>
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	895b      	ldrh	r3, [r3, #10]
 8007546:	88ba      	ldrh	r2, [r7, #4]
 8007548:	429a      	cmp	r2, r3
 800754a:	d305      	bcc.n	8007558 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	895b      	ldrh	r3, [r3, #10]
 8007550:	88ba      	ldrh	r2, [r7, #4]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	80bb      	strh	r3, [r7, #4]
 8007556:	e023      	b.n	80075a0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	895a      	ldrh	r2, [r3, #10]
 800755c:	88bb      	ldrh	r3, [r7, #4]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007562:	8b3a      	ldrh	r2, [r7, #24]
 8007564:	88fb      	ldrh	r3, [r7, #6]
 8007566:	429a      	cmp	r2, r3
 8007568:	d901      	bls.n	800756e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800756a:	88fb      	ldrh	r3, [r7, #6]
 800756c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800756e:	8b7b      	ldrh	r3, [r7, #26]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	18d0      	adds	r0, r2, r3
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	88bb      	ldrh	r3, [r7, #4]
 800757a:	4413      	add	r3, r2
 800757c:	8b3a      	ldrh	r2, [r7, #24]
 800757e:	4619      	mov	r1, r3
 8007580:	f008 ff5e 	bl	8010440 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007584:	8afa      	ldrh	r2, [r7, #22]
 8007586:	8b3b      	ldrh	r3, [r7, #24]
 8007588:	4413      	add	r3, r2
 800758a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800758c:	8b7a      	ldrh	r2, [r7, #26]
 800758e:	8b3b      	ldrh	r3, [r7, #24]
 8007590:	4413      	add	r3, r2
 8007592:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007594:	88fa      	ldrh	r2, [r7, #6]
 8007596:	8b3b      	ldrh	r3, [r7, #24]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800759c:	2300      	movs	r3, #0
 800759e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	61fb      	str	r3, [r7, #28]
 80075a6:	88fb      	ldrh	r3, [r7, #6]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <pbuf_copy_partial+0xca>
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1c4      	bne.n	800753c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80075b2:	8afb      	ldrh	r3, [r7, #22]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3720      	adds	r7, #32
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	08011f00 	.word	0x08011f00
 80075c0:	08012248 	.word	0x08012248
 80075c4:	08011f60 	.word	0x08011f60
 80075c8:	08012268 	.word	0x08012268

080075cc <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	4613      	mov	r3, r2
 80075d8:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80075da:	88fb      	ldrh	r3, [r7, #6]
 80075dc:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80075de:	2300      	movs	r3, #0
 80075e0:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d109      	bne.n	80075fc <pbuf_take+0x30>
 80075e8:	4b3a      	ldr	r3, [pc, #232]	; (80076d4 <pbuf_take+0x108>)
 80075ea:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80075ee:	493a      	ldr	r1, [pc, #232]	; (80076d8 <pbuf_take+0x10c>)
 80075f0:	483a      	ldr	r0, [pc, #232]	; (80076dc <pbuf_take+0x110>)
 80075f2:	f008 ff55 	bl	80104a0 <iprintf>
 80075f6:	f06f 030f 	mvn.w	r3, #15
 80075fa:	e067      	b.n	80076cc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d109      	bne.n	8007616 <pbuf_take+0x4a>
 8007602:	4b34      	ldr	r3, [pc, #208]	; (80076d4 <pbuf_take+0x108>)
 8007604:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8007608:	4935      	ldr	r1, [pc, #212]	; (80076e0 <pbuf_take+0x114>)
 800760a:	4834      	ldr	r0, [pc, #208]	; (80076dc <pbuf_take+0x110>)
 800760c:	f008 ff48 	bl	80104a0 <iprintf>
 8007610:	f06f 030f 	mvn.w	r3, #15
 8007614:	e05a      	b.n	80076cc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	891b      	ldrh	r3, [r3, #8]
 800761a:	88fa      	ldrh	r2, [r7, #6]
 800761c:	429a      	cmp	r2, r3
 800761e:	d909      	bls.n	8007634 <pbuf_take+0x68>
 8007620:	4b2c      	ldr	r3, [pc, #176]	; (80076d4 <pbuf_take+0x108>)
 8007622:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8007626:	492f      	ldr	r1, [pc, #188]	; (80076e4 <pbuf_take+0x118>)
 8007628:	482c      	ldr	r0, [pc, #176]	; (80076dc <pbuf_take+0x110>)
 800762a:	f008 ff39 	bl	80104a0 <iprintf>
 800762e:	f04f 33ff 	mov.w	r3, #4294967295
 8007632:	e04b      	b.n	80076cc <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d007      	beq.n	800764a <pbuf_take+0x7e>
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d004      	beq.n	800764a <pbuf_take+0x7e>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	891b      	ldrh	r3, [r3, #8]
 8007644:	88fa      	ldrh	r2, [r7, #6]
 8007646:	429a      	cmp	r2, r3
 8007648:	d902      	bls.n	8007650 <pbuf_take+0x84>
    return ERR_ARG;
 800764a:	f06f 030f 	mvn.w	r3, #15
 800764e:	e03d      	b.n	80076cc <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	61fb      	str	r3, [r7, #28]
 8007654:	e028      	b.n	80076a8 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d106      	bne.n	800766a <pbuf_take+0x9e>
 800765c:	4b1d      	ldr	r3, [pc, #116]	; (80076d4 <pbuf_take+0x108>)
 800765e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8007662:	4921      	ldr	r1, [pc, #132]	; (80076e8 <pbuf_take+0x11c>)
 8007664:	481d      	ldr	r0, [pc, #116]	; (80076dc <pbuf_take+0x110>)
 8007666:	f008 ff1b 	bl	80104a0 <iprintf>
    buf_copy_len = total_copy_len;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	895b      	ldrh	r3, [r3, #10]
 8007672:	461a      	mov	r2, r3
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	4293      	cmp	r3, r2
 8007678:	d902      	bls.n	8007680 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	895b      	ldrh	r3, [r3, #10]
 800767e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	6858      	ldr	r0, [r3, #4]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	4413      	add	r3, r2
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	4619      	mov	r1, r3
 800768e:	f008 fed7 	bl	8010440 <memcpy>
    total_copy_len -= buf_copy_len;
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	4413      	add	r3, r2
 80076a0:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	61fb      	str	r3, [r7, #28]
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1d3      	bne.n	8007656 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d103      	bne.n	80076bc <pbuf_take+0xf0>
 80076b4:	88fb      	ldrh	r3, [r7, #6]
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d006      	beq.n	80076ca <pbuf_take+0xfe>
 80076bc:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <pbuf_take+0x108>)
 80076be:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80076c2:	490a      	ldr	r1, [pc, #40]	; (80076ec <pbuf_take+0x120>)
 80076c4:	4805      	ldr	r0, [pc, #20]	; (80076dc <pbuf_take+0x110>)
 80076c6:	f008 feeb 	bl	80104a0 <iprintf>
  return ERR_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3720      	adds	r7, #32
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	08011f00 	.word	0x08011f00
 80076d8:	080122d8 	.word	0x080122d8
 80076dc:	08011f60 	.word	0x08011f60
 80076e0:	080122f0 	.word	0x080122f0
 80076e4:	0801230c 	.word	0x0801230c
 80076e8:	0801232c 	.word	0x0801232c
 80076ec:	08012344 	.word	0x08012344

080076f0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	4603      	mov	r3, r0
 80076f8:	603a      	str	r2, [r7, #0]
 80076fa:	71fb      	strb	r3, [r7, #7]
 80076fc:	460b      	mov	r3, r1
 80076fe:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	8919      	ldrh	r1, [r3, #8]
 8007704:	88ba      	ldrh	r2, [r7, #4]
 8007706:	79fb      	ldrb	r3, [r7, #7]
 8007708:	4618      	mov	r0, r3
 800770a:	f7ff fa1f 	bl	8006b4c <pbuf_alloc>
 800770e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <pbuf_clone+0x2a>
    return NULL;
 8007716:	2300      	movs	r3, #0
 8007718:	e011      	b.n	800773e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f7ff fe11 	bl	8007344 <pbuf_copy>
 8007722:	4603      	mov	r3, r0
 8007724:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007726:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d006      	beq.n	800773c <pbuf_clone+0x4c>
 800772e:	4b06      	ldr	r3, [pc, #24]	; (8007748 <pbuf_clone+0x58>)
 8007730:	f240 5224 	movw	r2, #1316	; 0x524
 8007734:	4905      	ldr	r1, [pc, #20]	; (800774c <pbuf_clone+0x5c>)
 8007736:	4806      	ldr	r0, [pc, #24]	; (8007750 <pbuf_clone+0x60>)
 8007738:	f008 feb2 	bl	80104a0 <iprintf>
  return q;
 800773c:	68fb      	ldr	r3, [r7, #12]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	08011f00 	.word	0x08011f00
 800774c:	08012374 	.word	0x08012374
 8007750:	08011f60 	.word	0x08011f60

08007754 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007758:	f008 feba 	bl	80104d0 <rand>
 800775c:	4603      	mov	r3, r0
 800775e:	b29b      	uxth	r3, r3
 8007760:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007764:	b29b      	uxth	r3, r3
 8007766:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800776a:	b29a      	uxth	r2, r3
 800776c:	4b01      	ldr	r3, [pc, #4]	; (8007774 <tcp_init+0x20>)
 800776e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007770:	bf00      	nop
 8007772:	bd80      	pop	{r7, pc}
 8007774:	24000024 	.word	0x24000024

08007778 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	7d1b      	ldrb	r3, [r3, #20]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d105      	bne.n	8007794 <tcp_free+0x1c>
 8007788:	4b06      	ldr	r3, [pc, #24]	; (80077a4 <tcp_free+0x2c>)
 800778a:	22d4      	movs	r2, #212	; 0xd4
 800778c:	4906      	ldr	r1, [pc, #24]	; (80077a8 <tcp_free+0x30>)
 800778e:	4807      	ldr	r0, [pc, #28]	; (80077ac <tcp_free+0x34>)
 8007790:	f008 fe86 	bl	80104a0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007794:	6879      	ldr	r1, [r7, #4]
 8007796:	2001      	movs	r0, #1
 8007798:	f7fe fe46 	bl	8006428 <memp_free>
}
 800779c:	bf00      	nop
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	08012400 	.word	0x08012400
 80077a8:	08012430 	.word	0x08012430
 80077ac:	08012444 	.word	0x08012444

080077b0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	7d1b      	ldrb	r3, [r3, #20]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d105      	bne.n	80077cc <tcp_free_listen+0x1c>
 80077c0:	4b06      	ldr	r3, [pc, #24]	; (80077dc <tcp_free_listen+0x2c>)
 80077c2:	22df      	movs	r2, #223	; 0xdf
 80077c4:	4906      	ldr	r1, [pc, #24]	; (80077e0 <tcp_free_listen+0x30>)
 80077c6:	4807      	ldr	r0, [pc, #28]	; (80077e4 <tcp_free_listen+0x34>)
 80077c8:	f008 fe6a 	bl	80104a0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80077cc:	6879      	ldr	r1, [r7, #4]
 80077ce:	2002      	movs	r0, #2
 80077d0:	f7fe fe2a 	bl	8006428 <memp_free>
}
 80077d4:	bf00      	nop
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	08012400 	.word	0x08012400
 80077e0:	0801246c 	.word	0x0801246c
 80077e4:	08012444 	.word	0x08012444

080077e8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80077ec:	f001 f800 	bl	80087f0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80077f0:	4b07      	ldr	r3, [pc, #28]	; (8007810 <tcp_tmr+0x28>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	3301      	adds	r3, #1
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	4b05      	ldr	r3, [pc, #20]	; (8007810 <tcp_tmr+0x28>)
 80077fa:	701a      	strb	r2, [r3, #0]
 80077fc:	4b04      	ldr	r3, [pc, #16]	; (8007810 <tcp_tmr+0x28>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007808:	f000 fcb2 	bl	8008170 <tcp_slowtmr>
  }
}
 800780c:	bf00      	nop
 800780e:	bd80      	pop	{r7, pc}
 8007810:	2400319d 	.word	0x2400319d

08007814 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d105      	bne.n	8007830 <tcp_remove_listener+0x1c>
 8007824:	4b0d      	ldr	r3, [pc, #52]	; (800785c <tcp_remove_listener+0x48>)
 8007826:	22ff      	movs	r2, #255	; 0xff
 8007828:	490d      	ldr	r1, [pc, #52]	; (8007860 <tcp_remove_listener+0x4c>)
 800782a:	480e      	ldr	r0, [pc, #56]	; (8007864 <tcp_remove_listener+0x50>)
 800782c:	f008 fe38 	bl	80104a0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	e00a      	b.n	800784c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	429a      	cmp	r2, r3
 800783e:	d102      	bne.n	8007846 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1f1      	bne.n	8007836 <tcp_remove_listener+0x22>
    }
  }
}
 8007852:	bf00      	nop
 8007854:	bf00      	nop
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	08012400 	.word	0x08012400
 8007860:	08012488 	.word	0x08012488
 8007864:	08012444 	.word	0x08012444

08007868 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d106      	bne.n	8007884 <tcp_listen_closed+0x1c>
 8007876:	4b14      	ldr	r3, [pc, #80]	; (80078c8 <tcp_listen_closed+0x60>)
 8007878:	f240 1211 	movw	r2, #273	; 0x111
 800787c:	4913      	ldr	r1, [pc, #76]	; (80078cc <tcp_listen_closed+0x64>)
 800787e:	4814      	ldr	r0, [pc, #80]	; (80078d0 <tcp_listen_closed+0x68>)
 8007880:	f008 fe0e 	bl	80104a0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	7d1b      	ldrb	r3, [r3, #20]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d006      	beq.n	800789a <tcp_listen_closed+0x32>
 800788c:	4b0e      	ldr	r3, [pc, #56]	; (80078c8 <tcp_listen_closed+0x60>)
 800788e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007892:	4910      	ldr	r1, [pc, #64]	; (80078d4 <tcp_listen_closed+0x6c>)
 8007894:	480e      	ldr	r0, [pc, #56]	; (80078d0 <tcp_listen_closed+0x68>)
 8007896:	f008 fe03 	bl	80104a0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800789a:	2301      	movs	r3, #1
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	e00b      	b.n	80078b8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80078a0:	4a0d      	ldr	r2, [pc, #52]	; (80078d8 <tcp_listen_closed+0x70>)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6879      	ldr	r1, [r7, #4]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7ff ffb1 	bl	8007814 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3301      	adds	r3, #1
 80078b6:	60fb      	str	r3, [r7, #12]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d9f0      	bls.n	80078a0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80078be:	bf00      	nop
 80078c0:	bf00      	nop
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	08012400 	.word	0x08012400
 80078cc:	080124b0 	.word	0x080124b0
 80078d0:	08012444 	.word	0x08012444
 80078d4:	080124bc 	.word	0x080124bc
 80078d8:	080143d8 	.word	0x080143d8

080078dc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80078dc:	b5b0      	push	{r4, r5, r7, lr}
 80078de:	b088      	sub	sp, #32
 80078e0:	af04      	add	r7, sp, #16
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	460b      	mov	r3, r1
 80078e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d106      	bne.n	80078fc <tcp_close_shutdown+0x20>
 80078ee:	4b63      	ldr	r3, [pc, #396]	; (8007a7c <tcp_close_shutdown+0x1a0>)
 80078f0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80078f4:	4962      	ldr	r1, [pc, #392]	; (8007a80 <tcp_close_shutdown+0x1a4>)
 80078f6:	4863      	ldr	r0, [pc, #396]	; (8007a84 <tcp_close_shutdown+0x1a8>)
 80078f8:	f008 fdd2 	bl	80104a0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80078fc:	78fb      	ldrb	r3, [r7, #3]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d066      	beq.n	80079d0 <tcp_close_shutdown+0xf4>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	7d1b      	ldrb	r3, [r3, #20]
 8007906:	2b04      	cmp	r3, #4
 8007908:	d003      	beq.n	8007912 <tcp_close_shutdown+0x36>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	7d1b      	ldrb	r3, [r3, #20]
 800790e:	2b07      	cmp	r3, #7
 8007910:	d15e      	bne.n	80079d0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007916:	2b00      	cmp	r3, #0
 8007918:	d104      	bne.n	8007924 <tcp_close_shutdown+0x48>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800791e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007922:	d055      	beq.n	80079d0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	8b5b      	ldrh	r3, [r3, #26]
 8007928:	f003 0310 	and.w	r3, r3, #16
 800792c:	2b00      	cmp	r3, #0
 800792e:	d106      	bne.n	800793e <tcp_close_shutdown+0x62>
 8007930:	4b52      	ldr	r3, [pc, #328]	; (8007a7c <tcp_close_shutdown+0x1a0>)
 8007932:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8007936:	4954      	ldr	r1, [pc, #336]	; (8007a88 <tcp_close_shutdown+0x1ac>)
 8007938:	4852      	ldr	r0, [pc, #328]	; (8007a84 <tcp_close_shutdown+0x1a8>)
 800793a:	f008 fdb1 	bl	80104a0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007946:	687d      	ldr	r5, [r7, #4]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	3304      	adds	r3, #4
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	8ad2      	ldrh	r2, [r2, #22]
 8007950:	6879      	ldr	r1, [r7, #4]
 8007952:	8b09      	ldrh	r1, [r1, #24]
 8007954:	9102      	str	r1, [sp, #8]
 8007956:	9201      	str	r2, [sp, #4]
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	462b      	mov	r3, r5
 800795c:	4622      	mov	r2, r4
 800795e:	4601      	mov	r1, r0
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f005 fcf7 	bl	800d354 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f001 fad4 	bl	8008f14 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800796c:	4b47      	ldr	r3, [pc, #284]	; (8007a8c <tcp_close_shutdown+0x1b0>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	429a      	cmp	r2, r3
 8007974:	d105      	bne.n	8007982 <tcp_close_shutdown+0xa6>
 8007976:	4b45      	ldr	r3, [pc, #276]	; (8007a8c <tcp_close_shutdown+0x1b0>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	4a43      	ldr	r2, [pc, #268]	; (8007a8c <tcp_close_shutdown+0x1b0>)
 800797e:	6013      	str	r3, [r2, #0]
 8007980:	e013      	b.n	80079aa <tcp_close_shutdown+0xce>
 8007982:	4b42      	ldr	r3, [pc, #264]	; (8007a8c <tcp_close_shutdown+0x1b0>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	e00c      	b.n	80079a4 <tcp_close_shutdown+0xc8>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	429a      	cmp	r2, r3
 8007992:	d104      	bne.n	800799e <tcp_close_shutdown+0xc2>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68da      	ldr	r2, [r3, #12]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	60da      	str	r2, [r3, #12]
 800799c:	e005      	b.n	80079aa <tcp_close_shutdown+0xce>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1ef      	bne.n	800798a <tcp_close_shutdown+0xae>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	60da      	str	r2, [r3, #12]
 80079b0:	4b37      	ldr	r3, [pc, #220]	; (8007a90 <tcp_close_shutdown+0x1b4>)
 80079b2:	2201      	movs	r2, #1
 80079b4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80079b6:	4b37      	ldr	r3, [pc, #220]	; (8007a94 <tcp_close_shutdown+0x1b8>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d102      	bne.n	80079c6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80079c0:	f003 ff6c 	bl	800b89c <tcp_trigger_input_pcb_close>
 80079c4:	e002      	b.n	80079cc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f7ff fed6 	bl	8007778 <tcp_free>
      }
      return ERR_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	e050      	b.n	8007a72 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	7d1b      	ldrb	r3, [r3, #20]
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d03b      	beq.n	8007a50 <tcp_close_shutdown+0x174>
 80079d8:	2b02      	cmp	r3, #2
 80079da:	dc44      	bgt.n	8007a66 <tcp_close_shutdown+0x18a>
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <tcp_close_shutdown+0x10a>
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d02a      	beq.n	8007a3a <tcp_close_shutdown+0x15e>
 80079e4:	e03f      	b.n	8007a66 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	8adb      	ldrh	r3, [r3, #22]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d021      	beq.n	8007a32 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80079ee:	4b2a      	ldr	r3, [pc, #168]	; (8007a98 <tcp_close_shutdown+0x1bc>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d105      	bne.n	8007a04 <tcp_close_shutdown+0x128>
 80079f8:	4b27      	ldr	r3, [pc, #156]	; (8007a98 <tcp_close_shutdown+0x1bc>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	4a26      	ldr	r2, [pc, #152]	; (8007a98 <tcp_close_shutdown+0x1bc>)
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	e013      	b.n	8007a2c <tcp_close_shutdown+0x150>
 8007a04:	4b24      	ldr	r3, [pc, #144]	; (8007a98 <tcp_close_shutdown+0x1bc>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	60bb      	str	r3, [r7, #8]
 8007a0a:	e00c      	b.n	8007a26 <tcp_close_shutdown+0x14a>
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d104      	bne.n	8007a20 <tcp_close_shutdown+0x144>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68da      	ldr	r2, [r3, #12]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	60da      	str	r2, [r3, #12]
 8007a1e:	e005      	b.n	8007a2c <tcp_close_shutdown+0x150>
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	60bb      	str	r3, [r7, #8]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1ef      	bne.n	8007a0c <tcp_close_shutdown+0x130>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7ff fea0 	bl	8007778 <tcp_free>
      break;
 8007a38:	e01a      	b.n	8007a70 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7ff ff14 	bl	8007868 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007a40:	6879      	ldr	r1, [r7, #4]
 8007a42:	4816      	ldr	r0, [pc, #88]	; (8007a9c <tcp_close_shutdown+0x1c0>)
 8007a44:	f001 fab6 	bl	8008fb4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7ff feb1 	bl	80077b0 <tcp_free_listen>
      break;
 8007a4e:	e00f      	b.n	8007a70 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007a50:	6879      	ldr	r1, [r7, #4]
 8007a52:	480e      	ldr	r0, [pc, #56]	; (8007a8c <tcp_close_shutdown+0x1b0>)
 8007a54:	f001 faae 	bl	8008fb4 <tcp_pcb_remove>
 8007a58:	4b0d      	ldr	r3, [pc, #52]	; (8007a90 <tcp_close_shutdown+0x1b4>)
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7ff fe8a 	bl	8007778 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007a64:	e004      	b.n	8007a70 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f81a 	bl	8007aa0 <tcp_close_shutdown_fin>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	e000      	b.n	8007a72 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bdb0      	pop	{r4, r5, r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	08012400 	.word	0x08012400
 8007a80:	080124d4 	.word	0x080124d4
 8007a84:	08012444 	.word	0x08012444
 8007a88:	080124f4 	.word	0x080124f4
 8007a8c:	24003194 	.word	0x24003194
 8007a90:	2400319c 	.word	0x2400319c
 8007a94:	240031d4 	.word	0x240031d4
 8007a98:	2400318c 	.word	0x2400318c
 8007a9c:	24003190 	.word	0x24003190

08007aa0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d106      	bne.n	8007abc <tcp_close_shutdown_fin+0x1c>
 8007aae:	4b2e      	ldr	r3, [pc, #184]	; (8007b68 <tcp_close_shutdown_fin+0xc8>)
 8007ab0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007ab4:	492d      	ldr	r1, [pc, #180]	; (8007b6c <tcp_close_shutdown_fin+0xcc>)
 8007ab6:	482e      	ldr	r0, [pc, #184]	; (8007b70 <tcp_close_shutdown_fin+0xd0>)
 8007ab8:	f008 fcf2 	bl	80104a0 <iprintf>

  switch (pcb->state) {
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	7d1b      	ldrb	r3, [r3, #20]
 8007ac0:	2b07      	cmp	r3, #7
 8007ac2:	d020      	beq.n	8007b06 <tcp_close_shutdown_fin+0x66>
 8007ac4:	2b07      	cmp	r3, #7
 8007ac6:	dc2b      	bgt.n	8007b20 <tcp_close_shutdown_fin+0x80>
 8007ac8:	2b03      	cmp	r3, #3
 8007aca:	d002      	beq.n	8007ad2 <tcp_close_shutdown_fin+0x32>
 8007acc:	2b04      	cmp	r3, #4
 8007ace:	d00d      	beq.n	8007aec <tcp_close_shutdown_fin+0x4c>
 8007ad0:	e026      	b.n	8007b20 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f004 fd4c 	bl	800c570 <tcp_send_fin>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d11f      	bne.n	8007b24 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2205      	movs	r2, #5
 8007ae8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007aea:	e01b      	b.n	8007b24 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f004 fd3f 	bl	800c570 <tcp_send_fin>
 8007af2:	4603      	mov	r3, r0
 8007af4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d114      	bne.n	8007b28 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2205      	movs	r2, #5
 8007b02:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007b04:	e010      	b.n	8007b28 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f004 fd32 	bl	800c570 <tcp_send_fin>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d109      	bne.n	8007b2c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2209      	movs	r2, #9
 8007b1c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007b1e:	e005      	b.n	8007b2c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	e01c      	b.n	8007b5e <tcp_close_shutdown_fin+0xbe>
      break;
 8007b24:	bf00      	nop
 8007b26:	e002      	b.n	8007b2e <tcp_close_shutdown_fin+0x8e>
      break;
 8007b28:	bf00      	nop
 8007b2a:	e000      	b.n	8007b2e <tcp_close_shutdown_fin+0x8e>
      break;
 8007b2c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d103      	bne.n	8007b3e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f004 fe58 	bl	800c7ec <tcp_output>
 8007b3c:	e00d      	b.n	8007b5a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8007b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b46:	d108      	bne.n	8007b5a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	8b5b      	ldrh	r3, [r3, #26]
 8007b4c:	f043 0308 	orr.w	r3, r3, #8
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	e001      	b.n	8007b5e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8007b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	08012400 	.word	0x08012400
 8007b6c:	080124b0 	.word	0x080124b0
 8007b70:	08012444 	.word	0x08012444

08007b74 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d109      	bne.n	8007b96 <tcp_close+0x22>
 8007b82:	4b0f      	ldr	r3, [pc, #60]	; (8007bc0 <tcp_close+0x4c>)
 8007b84:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007b88:	490e      	ldr	r1, [pc, #56]	; (8007bc4 <tcp_close+0x50>)
 8007b8a:	480f      	ldr	r0, [pc, #60]	; (8007bc8 <tcp_close+0x54>)
 8007b8c:	f008 fc88 	bl	80104a0 <iprintf>
 8007b90:	f06f 030f 	mvn.w	r3, #15
 8007b94:	e00f      	b.n	8007bb6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	7d1b      	ldrb	r3, [r3, #20]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d006      	beq.n	8007bac <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	8b5b      	ldrh	r3, [r3, #26]
 8007ba2:	f043 0310 	orr.w	r3, r3, #16
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007bac:	2101      	movs	r1, #1
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f7ff fe94 	bl	80078dc <tcp_close_shutdown>
 8007bb4:	4603      	mov	r3, r0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	08012400 	.word	0x08012400
 8007bc4:	08012510 	.word	0x08012510
 8007bc8:	08012444 	.word	0x08012444

08007bcc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08e      	sub	sp, #56	; 0x38
 8007bd0:	af04      	add	r7, sp, #16
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d107      	bne.n	8007bec <tcp_abandon+0x20>
 8007bdc:	4b52      	ldr	r3, [pc, #328]	; (8007d28 <tcp_abandon+0x15c>)
 8007bde:	f240 223d 	movw	r2, #573	; 0x23d
 8007be2:	4952      	ldr	r1, [pc, #328]	; (8007d2c <tcp_abandon+0x160>)
 8007be4:	4852      	ldr	r0, [pc, #328]	; (8007d30 <tcp_abandon+0x164>)
 8007be6:	f008 fc5b 	bl	80104a0 <iprintf>
 8007bea:	e099      	b.n	8007d20 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	7d1b      	ldrb	r3, [r3, #20]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d106      	bne.n	8007c02 <tcp_abandon+0x36>
 8007bf4:	4b4c      	ldr	r3, [pc, #304]	; (8007d28 <tcp_abandon+0x15c>)
 8007bf6:	f44f 7210 	mov.w	r2, #576	; 0x240
 8007bfa:	494e      	ldr	r1, [pc, #312]	; (8007d34 <tcp_abandon+0x168>)
 8007bfc:	484c      	ldr	r0, [pc, #304]	; (8007d30 <tcp_abandon+0x164>)
 8007bfe:	f008 fc4f 	bl	80104a0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	7d1b      	ldrb	r3, [r3, #20]
 8007c06:	2b0a      	cmp	r3, #10
 8007c08:	d107      	bne.n	8007c1a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	484a      	ldr	r0, [pc, #296]	; (8007d38 <tcp_abandon+0x16c>)
 8007c0e:	f001 f9d1 	bl	8008fb4 <tcp_pcb_remove>
    tcp_free(pcb);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7ff fdb0 	bl	8007778 <tcp_free>
 8007c18:	e082      	b.n	8007d20 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c26:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c34:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	7d1b      	ldrb	r3, [r3, #20]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d126      	bne.n	8007c92 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	8adb      	ldrh	r3, [r3, #22]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d02e      	beq.n	8007caa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007c4c:	4b3b      	ldr	r3, [pc, #236]	; (8007d3c <tcp_abandon+0x170>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d105      	bne.n	8007c62 <tcp_abandon+0x96>
 8007c56:	4b39      	ldr	r3, [pc, #228]	; (8007d3c <tcp_abandon+0x170>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	4a37      	ldr	r2, [pc, #220]	; (8007d3c <tcp_abandon+0x170>)
 8007c5e:	6013      	str	r3, [r2, #0]
 8007c60:	e013      	b.n	8007c8a <tcp_abandon+0xbe>
 8007c62:	4b36      	ldr	r3, [pc, #216]	; (8007d3c <tcp_abandon+0x170>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	61fb      	str	r3, [r7, #28]
 8007c68:	e00c      	b.n	8007c84 <tcp_abandon+0xb8>
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d104      	bne.n	8007c7e <tcp_abandon+0xb2>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	68da      	ldr	r2, [r3, #12]
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	60da      	str	r2, [r3, #12]
 8007c7c:	e005      	b.n	8007c8a <tcp_abandon+0xbe>
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	61fb      	str	r3, [r7, #28]
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1ef      	bne.n	8007c6a <tcp_abandon+0x9e>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	60da      	str	r2, [r3, #12]
 8007c90:	e00b      	b.n	8007caa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	8adb      	ldrh	r3, [r3, #22]
 8007c9a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007c9c:	6879      	ldr	r1, [r7, #4]
 8007c9e:	4828      	ldr	r0, [pc, #160]	; (8007d40 <tcp_abandon+0x174>)
 8007ca0:	f001 f988 	bl	8008fb4 <tcp_pcb_remove>
 8007ca4:	4b27      	ldr	r3, [pc, #156]	; (8007d44 <tcp_abandon+0x178>)
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d004      	beq.n	8007cbc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 fe7a 	bl	80089b0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d004      	beq.n	8007cce <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 fe71 	bl	80089b0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d004      	beq.n	8007ce0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 fe68 	bl	80089b0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00e      	beq.n	8007d04 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3304      	adds	r3, #4
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	8b12      	ldrh	r2, [r2, #24]
 8007cf0:	9202      	str	r2, [sp, #8]
 8007cf2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007cf4:	9201      	str	r2, [sp, #4]
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	69b9      	ldr	r1, [r7, #24]
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f005 fb28 	bl	800d354 <tcp_rst>
    }
    last_state = pcb->state;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	7d1b      	ldrb	r3, [r3, #20]
 8007d08:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7ff fd34 	bl	8007778 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d004      	beq.n	8007d20 <tcp_abandon+0x154>
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f06f 010c 	mvn.w	r1, #12
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	4798      	blx	r3
  }
}
 8007d20:	3728      	adds	r7, #40	; 0x28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	08012400 	.word	0x08012400
 8007d2c:	08012544 	.word	0x08012544
 8007d30:	08012444 	.word	0x08012444
 8007d34:	08012560 	.word	0x08012560
 8007d38:	24003198 	.word	0x24003198
 8007d3c:	2400318c 	.word	0x2400318c
 8007d40:	24003194 	.word	0x24003194
 8007d44:	2400319c 	.word	0x2400319c

08007d48 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007d50:	2101      	movs	r1, #1
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7ff ff3a 	bl	8007bcc <tcp_abandon>
}
 8007d58:	bf00      	nop
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d106      	bne.n	8007d7c <tcp_update_rcv_ann_wnd+0x1c>
 8007d6e:	4b25      	ldr	r3, [pc, #148]	; (8007e04 <tcp_update_rcv_ann_wnd+0xa4>)
 8007d70:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007d74:	4924      	ldr	r1, [pc, #144]	; (8007e08 <tcp_update_rcv_ann_wnd+0xa8>)
 8007d76:	4825      	ldr	r0, [pc, #148]	; (8007e0c <tcp_update_rcv_ann_wnd+0xac>)
 8007d78:	f008 fb92 	bl	80104a0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007d84:	4413      	add	r3, r2
 8007d86:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007d90:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007d94:	bf28      	it	cs
 8007d96:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007d9a:	b292      	uxth	r2, r2
 8007d9c:	4413      	add	r3, r2
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	db08      	blt.n	8007db8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	e020      	b.n	8007dfa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	dd03      	ble.n	8007dce <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007dcc:	e014      	b.n	8007df8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de0:	d306      	bcc.n	8007df0 <tcp_update_rcv_ann_wnd+0x90>
 8007de2:	4b08      	ldr	r3, [pc, #32]	; (8007e04 <tcp_update_rcv_ann_wnd+0xa4>)
 8007de4:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007de8:	4909      	ldr	r1, [pc, #36]	; (8007e10 <tcp_update_rcv_ann_wnd+0xb0>)
 8007dea:	4808      	ldr	r0, [pc, #32]	; (8007e0c <tcp_update_rcv_ann_wnd+0xac>)
 8007dec:	f008 fb58 	bl	80104a0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007df8:	2300      	movs	r3, #0
  }
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	08012400 	.word	0x08012400
 8007e08:	0801265c 	.word	0x0801265c
 8007e0c:	08012444 	.word	0x08012444
 8007e10:	08012680 	.word	0x08012680

08007e14 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d107      	bne.n	8007e36 <tcp_recved+0x22>
 8007e26:	4b1f      	ldr	r3, [pc, #124]	; (8007ea4 <tcp_recved+0x90>)
 8007e28:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007e2c:	491e      	ldr	r1, [pc, #120]	; (8007ea8 <tcp_recved+0x94>)
 8007e2e:	481f      	ldr	r0, [pc, #124]	; (8007eac <tcp_recved+0x98>)
 8007e30:	f008 fb36 	bl	80104a0 <iprintf>
 8007e34:	e032      	b.n	8007e9c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	7d1b      	ldrb	r3, [r3, #20]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d106      	bne.n	8007e4c <tcp_recved+0x38>
 8007e3e:	4b19      	ldr	r3, [pc, #100]	; (8007ea4 <tcp_recved+0x90>)
 8007e40:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007e44:	491a      	ldr	r1, [pc, #104]	; (8007eb0 <tcp_recved+0x9c>)
 8007e46:	4819      	ldr	r0, [pc, #100]	; (8007eac <tcp_recved+0x98>)
 8007e48:	f008 fb2a 	bl	80104a0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007e50:	887b      	ldrh	r3, [r7, #2]
 8007e52:	4413      	add	r3, r2
 8007e54:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007e56:	89fb      	ldrh	r3, [r7, #14]
 8007e58:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007e5c:	d804      	bhi.n	8007e68 <tcp_recved+0x54>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e62:	89fa      	ldrh	r2, [r7, #14]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d204      	bcs.n	8007e72 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007e6e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007e70:	e002      	b.n	8007e78 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	89fa      	ldrh	r2, [r7, #14]
 8007e76:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7ff ff71 	bl	8007d60 <tcp_update_rcv_ann_wnd>
 8007e7e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007e86:	d309      	bcc.n	8007e9c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	8b5b      	ldrh	r3, [r3, #26]
 8007e8c:	f043 0302 	orr.w	r3, r3, #2
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f004 fca8 	bl	800c7ec <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	08012400 	.word	0x08012400
 8007ea8:	0801269c 	.word	0x0801269c
 8007eac:	08012444 	.word	0x08012444
 8007eb0:	080126b4 	.word	0x080126b4

08007eb4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8007ebe:	4b1e      	ldr	r3, [pc, #120]	; (8007f38 <tcp_new_port+0x84>)
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	4b1c      	ldr	r3, [pc, #112]	; (8007f38 <tcp_new_port+0x84>)
 8007ec8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8007eca:	4b1b      	ldr	r3, [pc, #108]	; (8007f38 <tcp_new_port+0x84>)
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d103      	bne.n	8007ede <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007ed6:	4b18      	ldr	r3, [pc, #96]	; (8007f38 <tcp_new_port+0x84>)
 8007ed8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007edc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007ede:	2300      	movs	r3, #0
 8007ee0:	71fb      	strb	r3, [r7, #7]
 8007ee2:	e01e      	b.n	8007f22 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007ee4:	79fb      	ldrb	r3, [r7, #7]
 8007ee6:	4a15      	ldr	r2, [pc, #84]	; (8007f3c <tcp_new_port+0x88>)
 8007ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	e011      	b.n	8007f16 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	8ada      	ldrh	r2, [r3, #22]
 8007ef6:	4b10      	ldr	r3, [pc, #64]	; (8007f38 <tcp_new_port+0x84>)
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d108      	bne.n	8007f10 <tcp_new_port+0x5c>
        n++;
 8007efe:	88bb      	ldrh	r3, [r7, #4]
 8007f00:	3301      	adds	r3, #1
 8007f02:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007f04:	88bb      	ldrh	r3, [r7, #4]
 8007f06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f0a:	d3d8      	bcc.n	8007ebe <tcp_new_port+0xa>
          return 0;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	e00d      	b.n	8007f2c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	603b      	str	r3, [r7, #0]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1ea      	bne.n	8007ef2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007f1c:	79fb      	ldrb	r3, [r7, #7]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	71fb      	strb	r3, [r7, #7]
 8007f22:	79fb      	ldrb	r3, [r7, #7]
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d9dd      	bls.n	8007ee4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007f28:	4b03      	ldr	r3, [pc, #12]	; (8007f38 <tcp_new_port+0x84>)
 8007f2a:	881b      	ldrh	r3, [r3, #0]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	24000024 	.word	0x24000024
 8007f3c:	080143d8 	.word	0x080143d8

08007f40 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b08a      	sub	sp, #40	; 0x28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	603b      	str	r3, [r7, #0]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8007f50:	2300      	movs	r3, #0
 8007f52:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d109      	bne.n	8007f6e <tcp_connect+0x2e>
 8007f5a:	4b7d      	ldr	r3, [pc, #500]	; (8008150 <tcp_connect+0x210>)
 8007f5c:	f240 4235 	movw	r2, #1077	; 0x435
 8007f60:	497c      	ldr	r1, [pc, #496]	; (8008154 <tcp_connect+0x214>)
 8007f62:	487d      	ldr	r0, [pc, #500]	; (8008158 <tcp_connect+0x218>)
 8007f64:	f008 fa9c 	bl	80104a0 <iprintf>
 8007f68:	f06f 030f 	mvn.w	r3, #15
 8007f6c:	e0ec      	b.n	8008148 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d109      	bne.n	8007f88 <tcp_connect+0x48>
 8007f74:	4b76      	ldr	r3, [pc, #472]	; (8008150 <tcp_connect+0x210>)
 8007f76:	f240 4236 	movw	r2, #1078	; 0x436
 8007f7a:	4978      	ldr	r1, [pc, #480]	; (800815c <tcp_connect+0x21c>)
 8007f7c:	4876      	ldr	r0, [pc, #472]	; (8008158 <tcp_connect+0x218>)
 8007f7e:	f008 fa8f 	bl	80104a0 <iprintf>
 8007f82:	f06f 030f 	mvn.w	r3, #15
 8007f86:	e0df      	b.n	8008148 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	7d1b      	ldrb	r3, [r3, #20]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d009      	beq.n	8007fa4 <tcp_connect+0x64>
 8007f90:	4b6f      	ldr	r3, [pc, #444]	; (8008150 <tcp_connect+0x210>)
 8007f92:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8007f96:	4972      	ldr	r1, [pc, #456]	; (8008160 <tcp_connect+0x220>)
 8007f98:	486f      	ldr	r0, [pc, #444]	; (8008158 <tcp_connect+0x218>)
 8007f9a:	f008 fa81 	bl	80104a0 <iprintf>
 8007f9e:	f06f 0309 	mvn.w	r3, #9
 8007fa2:	e0d1      	b.n	8008148 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <tcp_connect+0x70>
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	e000      	b.n	8007fb2 <tcp_connect+0x72>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	88fa      	ldrh	r2, [r7, #6]
 8007fba:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	7a1b      	ldrb	r3, [r3, #8]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d006      	beq.n	8007fd2 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	7a1b      	ldrb	r3, [r3, #8]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fe fd43 	bl	8006a54 <netif_get_by_index>
 8007fce:	6278      	str	r0, [r7, #36]	; 0x24
 8007fd0:	e005      	b.n	8007fde <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	3304      	adds	r3, #4
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f006 ff82 	bl	800eee0 <ip4_route>
 8007fdc:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d102      	bne.n	8007fea <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8007fe4:	f06f 0303 	mvn.w	r3, #3
 8007fe8:	e0ae      	b.n	8008148 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d003      	beq.n	8007ff8 <tcp_connect+0xb8>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d111      	bne.n	800801c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <tcp_connect+0xc4>
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	3304      	adds	r3, #4
 8008002:	e000      	b.n	8008006 <tcp_connect+0xc6>
 8008004:	2300      	movs	r3, #0
 8008006:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d102      	bne.n	8008014 <tcp_connect+0xd4>
      return ERR_RTE;
 800800e:	f06f 0303 	mvn.w	r3, #3
 8008012:	e099      	b.n	8008148 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	8adb      	ldrh	r3, [r3, #22]
 8008020:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	8adb      	ldrh	r3, [r3, #22]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10c      	bne.n	8008044 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800802a:	f7ff ff43 	bl	8007eb4 <tcp_new_port>
 800802e:	4603      	mov	r3, r0
 8008030:	461a      	mov	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	8adb      	ldrh	r3, [r3, #22]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d102      	bne.n	8008044 <tcp_connect+0x104>
      return ERR_BUF;
 800803e:	f06f 0301 	mvn.w	r3, #1
 8008042:	e081      	b.n	8008148 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f001 f849 	bl	80090dc <tcp_next_iss>
 800804a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	1e5a      	subs	r2, r3, #1
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	1e5a      	subs	r2, r3, #1
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	1e5a      	subs	r2, r3, #1
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008076:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800808e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008098:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3304      	adds	r3, #4
 80080a2:	461a      	mov	r2, r3
 80080a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080a6:	f001 f83f 	bl	8009128 <tcp_eff_send_mss_netif>
 80080aa:	4603      	mov	r3, r0
 80080ac:	461a      	mov	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80080c2:	2102      	movs	r1, #2
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f004 faa3 	bl	800c610 <tcp_enqueue_flags>
 80080ca:	4603      	mov	r3, r0
 80080cc:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 80080ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d136      	bne.n	8008144 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2202      	movs	r2, #2
 80080da:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 80080dc:	8b7b      	ldrh	r3, [r7, #26]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d021      	beq.n	8008126 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80080e2:	4b20      	ldr	r3, [pc, #128]	; (8008164 <tcp_connect+0x224>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d105      	bne.n	80080f8 <tcp_connect+0x1b8>
 80080ec:	4b1d      	ldr	r3, [pc, #116]	; (8008164 <tcp_connect+0x224>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	4a1c      	ldr	r2, [pc, #112]	; (8008164 <tcp_connect+0x224>)
 80080f4:	6013      	str	r3, [r2, #0]
 80080f6:	e013      	b.n	8008120 <tcp_connect+0x1e0>
 80080f8:	4b1a      	ldr	r3, [pc, #104]	; (8008164 <tcp_connect+0x224>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	623b      	str	r3, [r7, #32]
 80080fe:	e00c      	b.n	800811a <tcp_connect+0x1da>
 8008100:	6a3b      	ldr	r3, [r7, #32]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	429a      	cmp	r2, r3
 8008108:	d104      	bne.n	8008114 <tcp_connect+0x1d4>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	68da      	ldr	r2, [r3, #12]
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	60da      	str	r2, [r3, #12]
 8008112:	e005      	b.n	8008120 <tcp_connect+0x1e0>
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	623b      	str	r3, [r7, #32]
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1ef      	bne.n	8008100 <tcp_connect+0x1c0>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8008126:	4b10      	ldr	r3, [pc, #64]	; (8008168 <tcp_connect+0x228>)
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	60da      	str	r2, [r3, #12]
 800812e:	4a0e      	ldr	r2, [pc, #56]	; (8008168 <tcp_connect+0x228>)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6013      	str	r3, [r2, #0]
 8008134:	f005 fad0 	bl	800d6d8 <tcp_timer_needed>
 8008138:	4b0c      	ldr	r3, [pc, #48]	; (800816c <tcp_connect+0x22c>)
 800813a:	2201      	movs	r2, #1
 800813c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f004 fb54 	bl	800c7ec <tcp_output>
  }
  return ret;
 8008144:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3728      	adds	r7, #40	; 0x28
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	08012400 	.word	0x08012400
 8008154:	080126dc 	.word	0x080126dc
 8008158:	08012444 	.word	0x08012444
 800815c:	080126f8 	.word	0x080126f8
 8008160:	08012714 	.word	0x08012714
 8008164:	2400318c 	.word	0x2400318c
 8008168:	24003194 	.word	0x24003194
 800816c:	2400319c 	.word	0x2400319c

08008170 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008170:	b5b0      	push	{r4, r5, r7, lr}
 8008172:	b090      	sub	sp, #64	; 0x40
 8008174:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800817c:	4b94      	ldr	r3, [pc, #592]	; (80083d0 <tcp_slowtmr+0x260>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3301      	adds	r3, #1
 8008182:	4a93      	ldr	r2, [pc, #588]	; (80083d0 <tcp_slowtmr+0x260>)
 8008184:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008186:	4b93      	ldr	r3, [pc, #588]	; (80083d4 <tcp_slowtmr+0x264>)
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	3301      	adds	r3, #1
 800818c:	b2da      	uxtb	r2, r3
 800818e:	4b91      	ldr	r3, [pc, #580]	; (80083d4 <tcp_slowtmr+0x264>)
 8008190:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008192:	2300      	movs	r3, #0
 8008194:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008196:	4b90      	ldr	r3, [pc, #576]	; (80083d8 <tcp_slowtmr+0x268>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800819c:	e29d      	b.n	80086da <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800819e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a0:	7d1b      	ldrb	r3, [r3, #20]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d106      	bne.n	80081b4 <tcp_slowtmr+0x44>
 80081a6:	4b8d      	ldr	r3, [pc, #564]	; (80083dc <tcp_slowtmr+0x26c>)
 80081a8:	f240 42be 	movw	r2, #1214	; 0x4be
 80081ac:	498c      	ldr	r1, [pc, #560]	; (80083e0 <tcp_slowtmr+0x270>)
 80081ae:	488d      	ldr	r0, [pc, #564]	; (80083e4 <tcp_slowtmr+0x274>)
 80081b0:	f008 f976 	bl	80104a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80081b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b6:	7d1b      	ldrb	r3, [r3, #20]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d106      	bne.n	80081ca <tcp_slowtmr+0x5a>
 80081bc:	4b87      	ldr	r3, [pc, #540]	; (80083dc <tcp_slowtmr+0x26c>)
 80081be:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80081c2:	4989      	ldr	r1, [pc, #548]	; (80083e8 <tcp_slowtmr+0x278>)
 80081c4:	4887      	ldr	r0, [pc, #540]	; (80083e4 <tcp_slowtmr+0x274>)
 80081c6:	f008 f96b 	bl	80104a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80081ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081cc:	7d1b      	ldrb	r3, [r3, #20]
 80081ce:	2b0a      	cmp	r3, #10
 80081d0:	d106      	bne.n	80081e0 <tcp_slowtmr+0x70>
 80081d2:	4b82      	ldr	r3, [pc, #520]	; (80083dc <tcp_slowtmr+0x26c>)
 80081d4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80081d8:	4984      	ldr	r1, [pc, #528]	; (80083ec <tcp_slowtmr+0x27c>)
 80081da:	4882      	ldr	r0, [pc, #520]	; (80083e4 <tcp_slowtmr+0x274>)
 80081dc:	f008 f960 	bl	80104a0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80081e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e2:	7f9a      	ldrb	r2, [r3, #30]
 80081e4:	4b7b      	ldr	r3, [pc, #492]	; (80083d4 <tcp_slowtmr+0x264>)
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d105      	bne.n	80081f8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80081ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80081f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80081f6:	e270      	b.n	80086da <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80081f8:	4b76      	ldr	r3, [pc, #472]	; (80083d4 <tcp_slowtmr+0x264>)
 80081fa:	781a      	ldrb	r2, [r3, #0]
 80081fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008200:	2300      	movs	r3, #0
 8008202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008206:	2300      	movs	r3, #0
 8008208:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820e:	7d1b      	ldrb	r3, [r3, #20]
 8008210:	2b02      	cmp	r3, #2
 8008212:	d10a      	bne.n	800822a <tcp_slowtmr+0xba>
 8008214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008216:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800821a:	2b05      	cmp	r3, #5
 800821c:	d905      	bls.n	800822a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800821e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008222:	3301      	adds	r3, #1
 8008224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008228:	e11e      	b.n	8008468 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800822a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008230:	2b0b      	cmp	r3, #11
 8008232:	d905      	bls.n	8008240 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8008234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008238:	3301      	adds	r3, #1
 800823a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800823e:	e113      	b.n	8008468 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008242:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008246:	2b00      	cmp	r3, #0
 8008248:	d075      	beq.n	8008336 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800824a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824e:	2b00      	cmp	r3, #0
 8008250:	d006      	beq.n	8008260 <tcp_slowtmr+0xf0>
 8008252:	4b62      	ldr	r3, [pc, #392]	; (80083dc <tcp_slowtmr+0x26c>)
 8008254:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008258:	4965      	ldr	r1, [pc, #404]	; (80083f0 <tcp_slowtmr+0x280>)
 800825a:	4862      	ldr	r0, [pc, #392]	; (80083e4 <tcp_slowtmr+0x274>)
 800825c:	f008 f920 	bl	80104a0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008264:	2b00      	cmp	r3, #0
 8008266:	d106      	bne.n	8008276 <tcp_slowtmr+0x106>
 8008268:	4b5c      	ldr	r3, [pc, #368]	; (80083dc <tcp_slowtmr+0x26c>)
 800826a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800826e:	4961      	ldr	r1, [pc, #388]	; (80083f4 <tcp_slowtmr+0x284>)
 8008270:	485c      	ldr	r0, [pc, #368]	; (80083e4 <tcp_slowtmr+0x274>)
 8008272:	f008 f915 	bl	80104a0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008278:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800827c:	2b0b      	cmp	r3, #11
 800827e:	d905      	bls.n	800828c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008284:	3301      	adds	r3, #1
 8008286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800828a:	e0ed      	b.n	8008468 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800828c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008292:	3b01      	subs	r3, #1
 8008294:	4a58      	ldr	r2, [pc, #352]	; (80083f8 <tcp_slowtmr+0x288>)
 8008296:	5cd3      	ldrb	r3, [r2, r3]
 8008298:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800829a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80082a0:	7c7a      	ldrb	r2, [r7, #17]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d907      	bls.n	80082b6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80082a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80082ac:	3301      	adds	r3, #1
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80082b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80082bc:	7c7a      	ldrb	r2, [r7, #17]
 80082be:	429a      	cmp	r2, r3
 80082c0:	f200 80d2 	bhi.w	8008468 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80082c4:	2301      	movs	r3, #1
 80082c6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80082c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d108      	bne.n	80082e4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80082d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082d4:	f005 f932 	bl	800d53c <tcp_zero_window_probe>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d014      	beq.n	8008308 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80082de:	2300      	movs	r3, #0
 80082e0:	623b      	str	r3, [r7, #32]
 80082e2:	e011      	b.n	8008308 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80082e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80082ea:	4619      	mov	r1, r3
 80082ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082ee:	f003 fff7 	bl	800c2e0 <tcp_split_unsent_seg>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d107      	bne.n	8008308 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80082f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082fa:	f004 fa77 	bl	800c7ec <tcp_output>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008304:	2300      	movs	r3, #0
 8008306:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	2b00      	cmp	r3, #0
 800830c:	f000 80ac 	beq.w	8008468 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8008310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008312:	2200      	movs	r2, #0
 8008314:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800831e:	2b06      	cmp	r3, #6
 8008320:	f200 80a2 	bhi.w	8008468 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8008324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008326:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800832a:	3301      	adds	r3, #1
 800832c:	b2da      	uxtb	r2, r3
 800832e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008330:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8008334:	e098      	b.n	8008468 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008338:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800833c:	2b00      	cmp	r3, #0
 800833e:	db0f      	blt.n	8008360 <tcp_slowtmr+0x1f0>
 8008340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008342:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008346:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800834a:	4293      	cmp	r3, r2
 800834c:	d008      	beq.n	8008360 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008354:	b29b      	uxth	r3, r3
 8008356:	3301      	adds	r3, #1
 8008358:	b29b      	uxth	r3, r3
 800835a:	b21a      	sxth	r2, r3
 800835c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008362:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008368:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800836c:	429a      	cmp	r2, r3
 800836e:	db7b      	blt.n	8008468 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008370:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008372:	f004 fd2d 	bl	800cdd0 <tcp_rexmit_rto_prepare>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d007      	beq.n	800838c <tcp_slowtmr+0x21c>
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008380:	2b00      	cmp	r3, #0
 8008382:	d171      	bne.n	8008468 <tcp_slowtmr+0x2f8>
 8008384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008388:	2b00      	cmp	r3, #0
 800838a:	d06d      	beq.n	8008468 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800838c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838e:	7d1b      	ldrb	r3, [r3, #20]
 8008390:	2b02      	cmp	r3, #2
 8008392:	d03a      	beq.n	800840a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008396:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800839a:	2b0c      	cmp	r3, #12
 800839c:	bf28      	it	cs
 800839e:	230c      	movcs	r3, #12
 80083a0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80083a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80083a8:	10db      	asrs	r3, r3, #3
 80083aa:	b21b      	sxth	r3, r3
 80083ac:	461a      	mov	r2, r3
 80083ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80083b4:	4413      	add	r3, r2
 80083b6:	7efa      	ldrb	r2, [r7, #27]
 80083b8:	4910      	ldr	r1, [pc, #64]	; (80083fc <tcp_slowtmr+0x28c>)
 80083ba:	5c8a      	ldrb	r2, [r1, r2]
 80083bc:	4093      	lsls	r3, r2
 80083be:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80083c6:	4293      	cmp	r3, r2
 80083c8:	dc1a      	bgt.n	8008400 <tcp_slowtmr+0x290>
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	b21a      	sxth	r2, r3
 80083ce:	e019      	b.n	8008404 <tcp_slowtmr+0x294>
 80083d0:	24003188 	.word	0x24003188
 80083d4:	2400319e 	.word	0x2400319e
 80083d8:	24003194 	.word	0x24003194
 80083dc:	08012400 	.word	0x08012400
 80083e0:	08012744 	.word	0x08012744
 80083e4:	08012444 	.word	0x08012444
 80083e8:	08012770 	.word	0x08012770
 80083ec:	0801279c 	.word	0x0801279c
 80083f0:	080127cc 	.word	0x080127cc
 80083f4:	08012800 	.word	0x08012800
 80083f8:	080143d0 	.word	0x080143d0
 80083fc:	080143c0 	.word	0x080143c0
 8008400:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008406:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800840a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840c:	2200      	movs	r2, #0
 800840e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008412:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008418:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800841c:	4293      	cmp	r3, r2
 800841e:	bf28      	it	cs
 8008420:	4613      	movcs	r3, r2
 8008422:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008424:	8a7b      	ldrh	r3, [r7, #18]
 8008426:	085b      	lsrs	r3, r3, #1
 8008428:	b29a      	uxth	r2, r3
 800842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008432:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008438:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	b29b      	uxth	r3, r3
 800843e:	429a      	cmp	r2, r3
 8008440:	d206      	bcs.n	8008450 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008446:	005b      	lsls	r3, r3, #1
 8008448:	b29a      	uxth	r2, r3
 800844a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008452:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008456:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800845a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845c:	2200      	movs	r2, #0
 800845e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8008462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008464:	f004 fd24 	bl	800ceb0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846a:	7d1b      	ldrb	r3, [r3, #20]
 800846c:	2b06      	cmp	r3, #6
 800846e:	d111      	bne.n	8008494 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008472:	8b5b      	ldrh	r3, [r3, #26]
 8008474:	f003 0310 	and.w	r3, r3, #16
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00b      	beq.n	8008494 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800847c:	4b9c      	ldr	r3, [pc, #624]	; (80086f0 <tcp_slowtmr+0x580>)
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008482:	6a1b      	ldr	r3, [r3, #32]
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	2b28      	cmp	r3, #40	; 0x28
 8008488:	d904      	bls.n	8008494 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800848a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800848e:	3301      	adds	r3, #1
 8008490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008496:	7a5b      	ldrb	r3, [r3, #9]
 8008498:	f003 0308 	and.w	r3, r3, #8
 800849c:	2b00      	cmp	r3, #0
 800849e:	d04a      	beq.n	8008536 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80084a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80084a4:	2b04      	cmp	r3, #4
 80084a6:	d003      	beq.n	80084b0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80084a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084aa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80084ac:	2b07      	cmp	r3, #7
 80084ae:	d142      	bne.n	8008536 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80084b0:	4b8f      	ldr	r3, [pc, #572]	; (80086f0 <tcp_slowtmr+0x580>)
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b6:	6a1b      	ldr	r3, [r3, #32]
 80084b8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80084ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084bc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80084c0:	4b8c      	ldr	r3, [pc, #560]	; (80086f4 <tcp_slowtmr+0x584>)
 80084c2:	440b      	add	r3, r1
 80084c4:	498c      	ldr	r1, [pc, #560]	; (80086f8 <tcp_slowtmr+0x588>)
 80084c6:	fba1 1303 	umull	r1, r3, r1, r3
 80084ca:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d90a      	bls.n	80084e6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80084d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084d4:	3301      	adds	r3, #1
 80084d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80084da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80084de:	3301      	adds	r3, #1
 80084e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80084e4:	e027      	b.n	8008536 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80084e6:	4b82      	ldr	r3, [pc, #520]	; (80086f0 <tcp_slowtmr+0x580>)
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80084f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80084f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80084fc:	4618      	mov	r0, r3
 80084fe:	4b7f      	ldr	r3, [pc, #508]	; (80086fc <tcp_slowtmr+0x58c>)
 8008500:	fb00 f303 	mul.w	r3, r0, r3
 8008504:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008506:	497c      	ldr	r1, [pc, #496]	; (80086f8 <tcp_slowtmr+0x588>)
 8008508:	fba1 1303 	umull	r1, r3, r1, r3
 800850c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800850e:	429a      	cmp	r2, r3
 8008510:	d911      	bls.n	8008536 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8008512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008514:	f004 ffd2 	bl	800d4bc <tcp_keepalive>
 8008518:	4603      	mov	r3, r0
 800851a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800851e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008522:	2b00      	cmp	r3, #0
 8008524:	d107      	bne.n	8008536 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800852c:	3301      	adds	r3, #1
 800852e:	b2da      	uxtb	r2, r3
 8008530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008532:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800853a:	2b00      	cmp	r3, #0
 800853c:	d011      	beq.n	8008562 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800853e:	4b6c      	ldr	r3, [pc, #432]	; (80086f0 <tcp_slowtmr+0x580>)
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	1ad2      	subs	r2, r2, r3
 8008548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800854e:	4619      	mov	r1, r3
 8008550:	460b      	mov	r3, r1
 8008552:	005b      	lsls	r3, r3, #1
 8008554:	440b      	add	r3, r1
 8008556:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008558:	429a      	cmp	r2, r3
 800855a:	d302      	bcc.n	8008562 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800855c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800855e:	f000 fe8d 	bl	800927c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008564:	7d1b      	ldrb	r3, [r3, #20]
 8008566:	2b03      	cmp	r3, #3
 8008568:	d10b      	bne.n	8008582 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800856a:	4b61      	ldr	r3, [pc, #388]	; (80086f0 <tcp_slowtmr+0x580>)
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	2b28      	cmp	r3, #40	; 0x28
 8008576:	d904      	bls.n	8008582 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800857c:	3301      	adds	r3, #1
 800857e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008584:	7d1b      	ldrb	r3, [r3, #20]
 8008586:	2b09      	cmp	r3, #9
 8008588:	d10b      	bne.n	80085a2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800858a:	4b59      	ldr	r3, [pc, #356]	; (80086f0 <tcp_slowtmr+0x580>)
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	2bf0      	cmp	r3, #240	; 0xf0
 8008596:	d904      	bls.n	80085a2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8008598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800859c:	3301      	adds	r3, #1
 800859e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80085a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d060      	beq.n	800866c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80085aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085b0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80085b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085b4:	f000 fcae 	bl	8008f14 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80085b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d010      	beq.n	80085e0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80085be:	4b50      	ldr	r3, [pc, #320]	; (8008700 <tcp_slowtmr+0x590>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d106      	bne.n	80085d6 <tcp_slowtmr+0x466>
 80085c8:	4b4e      	ldr	r3, [pc, #312]	; (8008704 <tcp_slowtmr+0x594>)
 80085ca:	f240 526d 	movw	r2, #1389	; 0x56d
 80085ce:	494e      	ldr	r1, [pc, #312]	; (8008708 <tcp_slowtmr+0x598>)
 80085d0:	484e      	ldr	r0, [pc, #312]	; (800870c <tcp_slowtmr+0x59c>)
 80085d2:	f007 ff65 	bl	80104a0 <iprintf>
        prev->next = pcb->next;
 80085d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d8:	68da      	ldr	r2, [r3, #12]
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085dc:	60da      	str	r2, [r3, #12]
 80085de:	e00f      	b.n	8008600 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80085e0:	4b47      	ldr	r3, [pc, #284]	; (8008700 <tcp_slowtmr+0x590>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d006      	beq.n	80085f8 <tcp_slowtmr+0x488>
 80085ea:	4b46      	ldr	r3, [pc, #280]	; (8008704 <tcp_slowtmr+0x594>)
 80085ec:	f240 5271 	movw	r2, #1393	; 0x571
 80085f0:	4947      	ldr	r1, [pc, #284]	; (8008710 <tcp_slowtmr+0x5a0>)
 80085f2:	4846      	ldr	r0, [pc, #280]	; (800870c <tcp_slowtmr+0x59c>)
 80085f4:	f007 ff54 	bl	80104a0 <iprintf>
        tcp_active_pcbs = pcb->next;
 80085f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	4a40      	ldr	r2, [pc, #256]	; (8008700 <tcp_slowtmr+0x590>)
 80085fe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008600:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008604:	2b00      	cmp	r3, #0
 8008606:	d013      	beq.n	8008630 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800860c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008610:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8008612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008614:	3304      	adds	r3, #4
 8008616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008618:	8ad2      	ldrh	r2, [r2, #22]
 800861a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800861c:	8b09      	ldrh	r1, [r1, #24]
 800861e:	9102      	str	r1, [sp, #8]
 8008620:	9201      	str	r2, [sp, #4]
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	462b      	mov	r3, r5
 8008626:	4622      	mov	r2, r4
 8008628:	4601      	mov	r1, r0
 800862a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800862c:	f004 fe92 	bl	800d354 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008638:	7d1b      	ldrb	r3, [r3, #20]
 800863a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800863c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008646:	6838      	ldr	r0, [r7, #0]
 8008648:	f7ff f896 	bl	8007778 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800864c:	4b31      	ldr	r3, [pc, #196]	; (8008714 <tcp_slowtmr+0x5a4>)
 800864e:	2200      	movs	r2, #0
 8008650:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d004      	beq.n	8008662 <tcp_slowtmr+0x4f2>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f06f 010c 	mvn.w	r1, #12
 800865e:	68b8      	ldr	r0, [r7, #8]
 8008660:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008662:	4b2c      	ldr	r3, [pc, #176]	; (8008714 <tcp_slowtmr+0x5a4>)
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d037      	beq.n	80086da <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800866a:	e592      	b.n	8008192 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800866c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008678:	7f1b      	ldrb	r3, [r3, #28]
 800867a:	3301      	adds	r3, #1
 800867c:	b2da      	uxtb	r2, r3
 800867e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008680:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008684:	7f1a      	ldrb	r2, [r3, #28]
 8008686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008688:	7f5b      	ldrb	r3, [r3, #29]
 800868a:	429a      	cmp	r2, r3
 800868c:	d325      	bcc.n	80086da <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800868e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008690:	2200      	movs	r2, #0
 8008692:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008694:	4b1f      	ldr	r3, [pc, #124]	; (8008714 <tcp_slowtmr+0x5a4>)
 8008696:	2200      	movs	r2, #0
 8008698:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800869a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00b      	beq.n	80086bc <tcp_slowtmr+0x54c>
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086ac:	6912      	ldr	r2, [r2, #16]
 80086ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086b0:	4610      	mov	r0, r2
 80086b2:	4798      	blx	r3
 80086b4:	4603      	mov	r3, r0
 80086b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80086ba:	e002      	b.n	80086c2 <tcp_slowtmr+0x552>
 80086bc:	2300      	movs	r3, #0
 80086be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80086c2:	4b14      	ldr	r3, [pc, #80]	; (8008714 <tcp_slowtmr+0x5a4>)
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d000      	beq.n	80086cc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80086ca:	e562      	b.n	8008192 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80086cc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d102      	bne.n	80086da <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80086d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086d6:	f004 f889 	bl	800c7ec <tcp_output>
  while (pcb != NULL) {
 80086da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f47f ad5e 	bne.w	800819e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80086e2:	2300      	movs	r3, #0
 80086e4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80086e6:	4b0c      	ldr	r3, [pc, #48]	; (8008718 <tcp_slowtmr+0x5a8>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80086ec:	e069      	b.n	80087c2 <tcp_slowtmr+0x652>
 80086ee:	bf00      	nop
 80086f0:	24003188 	.word	0x24003188
 80086f4:	000a4cb8 	.word	0x000a4cb8
 80086f8:	10624dd3 	.word	0x10624dd3
 80086fc:	000124f8 	.word	0x000124f8
 8008700:	24003194 	.word	0x24003194
 8008704:	08012400 	.word	0x08012400
 8008708:	08012838 	.word	0x08012838
 800870c:	08012444 	.word	0x08012444
 8008710:	08012864 	.word	0x08012864
 8008714:	2400319c 	.word	0x2400319c
 8008718:	24003198 	.word	0x24003198
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800871c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871e:	7d1b      	ldrb	r3, [r3, #20]
 8008720:	2b0a      	cmp	r3, #10
 8008722:	d006      	beq.n	8008732 <tcp_slowtmr+0x5c2>
 8008724:	4b2b      	ldr	r3, [pc, #172]	; (80087d4 <tcp_slowtmr+0x664>)
 8008726:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800872a:	492b      	ldr	r1, [pc, #172]	; (80087d8 <tcp_slowtmr+0x668>)
 800872c:	482b      	ldr	r0, [pc, #172]	; (80087dc <tcp_slowtmr+0x66c>)
 800872e:	f007 feb7 	bl	80104a0 <iprintf>
    pcb_remove = 0;
 8008732:	2300      	movs	r3, #0
 8008734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008738:	4b29      	ldr	r3, [pc, #164]	; (80087e0 <tcp_slowtmr+0x670>)
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873e:	6a1b      	ldr	r3, [r3, #32]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	2bf0      	cmp	r3, #240	; 0xf0
 8008744:	d904      	bls.n	8008750 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8008746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800874a:	3301      	adds	r3, #1
 800874c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008754:	2b00      	cmp	r3, #0
 8008756:	d02f      	beq.n	80087b8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008758:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800875a:	f000 fbdb 	bl	8008f14 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008760:	2b00      	cmp	r3, #0
 8008762:	d010      	beq.n	8008786 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008764:	4b1f      	ldr	r3, [pc, #124]	; (80087e4 <tcp_slowtmr+0x674>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800876a:	429a      	cmp	r2, r3
 800876c:	d106      	bne.n	800877c <tcp_slowtmr+0x60c>
 800876e:	4b19      	ldr	r3, [pc, #100]	; (80087d4 <tcp_slowtmr+0x664>)
 8008770:	f240 52af 	movw	r2, #1455	; 0x5af
 8008774:	491c      	ldr	r1, [pc, #112]	; (80087e8 <tcp_slowtmr+0x678>)
 8008776:	4819      	ldr	r0, [pc, #100]	; (80087dc <tcp_slowtmr+0x66c>)
 8008778:	f007 fe92 	bl	80104a0 <iprintf>
        prev->next = pcb->next;
 800877c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877e:	68da      	ldr	r2, [r3, #12]
 8008780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008782:	60da      	str	r2, [r3, #12]
 8008784:	e00f      	b.n	80087a6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008786:	4b17      	ldr	r3, [pc, #92]	; (80087e4 <tcp_slowtmr+0x674>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800878c:	429a      	cmp	r2, r3
 800878e:	d006      	beq.n	800879e <tcp_slowtmr+0x62e>
 8008790:	4b10      	ldr	r3, [pc, #64]	; (80087d4 <tcp_slowtmr+0x664>)
 8008792:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008796:	4915      	ldr	r1, [pc, #84]	; (80087ec <tcp_slowtmr+0x67c>)
 8008798:	4810      	ldr	r0, [pc, #64]	; (80087dc <tcp_slowtmr+0x66c>)
 800879a:	f007 fe81 	bl	80104a0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800879e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	4a10      	ldr	r2, [pc, #64]	; (80087e4 <tcp_slowtmr+0x674>)
 80087a4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80087a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80087aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80087b0:	69f8      	ldr	r0, [r7, #28]
 80087b2:	f7fe ffe1 	bl	8007778 <tcp_free>
 80087b6:	e004      	b.n	80087c2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80087b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80087bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80087c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1a9      	bne.n	800871c <tcp_slowtmr+0x5ac>
    }
  }
}
 80087c8:	bf00      	nop
 80087ca:	bf00      	nop
 80087cc:	3730      	adds	r7, #48	; 0x30
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bdb0      	pop	{r4, r5, r7, pc}
 80087d2:	bf00      	nop
 80087d4:	08012400 	.word	0x08012400
 80087d8:	08012890 	.word	0x08012890
 80087dc:	08012444 	.word	0x08012444
 80087e0:	24003188 	.word	0x24003188
 80087e4:	24003198 	.word	0x24003198
 80087e8:	080128c0 	.word	0x080128c0
 80087ec:	080128e8 	.word	0x080128e8

080087f0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80087f6:	4b2d      	ldr	r3, [pc, #180]	; (80088ac <tcp_fasttmr+0xbc>)
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	3301      	adds	r3, #1
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	4b2b      	ldr	r3, [pc, #172]	; (80088ac <tcp_fasttmr+0xbc>)
 8008800:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008802:	4b2b      	ldr	r3, [pc, #172]	; (80088b0 <tcp_fasttmr+0xc0>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008808:	e048      	b.n	800889c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	7f9a      	ldrb	r2, [r3, #30]
 800880e:	4b27      	ldr	r3, [pc, #156]	; (80088ac <tcp_fasttmr+0xbc>)
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	429a      	cmp	r2, r3
 8008814:	d03f      	beq.n	8008896 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008816:	4b25      	ldr	r3, [pc, #148]	; (80088ac <tcp_fasttmr+0xbc>)
 8008818:	781a      	ldrb	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	8b5b      	ldrh	r3, [r3, #26]
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	2b00      	cmp	r3, #0
 8008828:	d010      	beq.n	800884c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	8b5b      	ldrh	r3, [r3, #26]
 800882e:	f043 0302 	orr.w	r3, r3, #2
 8008832:	b29a      	uxth	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f003 ffd7 	bl	800c7ec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	8b5b      	ldrh	r3, [r3, #26]
 8008842:	f023 0303 	bic.w	r3, r3, #3
 8008846:	b29a      	uxth	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	8b5b      	ldrh	r3, [r3, #26]
 8008850:	f003 0308 	and.w	r3, r3, #8
 8008854:	2b00      	cmp	r3, #0
 8008856:	d009      	beq.n	800886c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	8b5b      	ldrh	r3, [r3, #26]
 800885c:	f023 0308 	bic.w	r3, r3, #8
 8008860:	b29a      	uxth	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7ff f91a 	bl	8007aa0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00a      	beq.n	8008890 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800887a:	4b0e      	ldr	r3, [pc, #56]	; (80088b4 <tcp_fasttmr+0xc4>)
 800887c:	2200      	movs	r2, #0
 800887e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f819 	bl	80088b8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008886:	4b0b      	ldr	r3, [pc, #44]	; (80088b4 <tcp_fasttmr+0xc4>)
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d000      	beq.n	8008890 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800888e:	e7b8      	b.n	8008802 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	607b      	str	r3, [r7, #4]
 8008894:	e002      	b.n	800889c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1b3      	bne.n	800880a <tcp_fasttmr+0x1a>
    }
  }
}
 80088a2:	bf00      	nop
 80088a4:	bf00      	nop
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	2400319e 	.word	0x2400319e
 80088b0:	24003194 	.word	0x24003194
 80088b4:	2400319c 	.word	0x2400319c

080088b8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80088b8:	b590      	push	{r4, r7, lr}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d109      	bne.n	80088da <tcp_process_refused_data+0x22>
 80088c6:	4b37      	ldr	r3, [pc, #220]	; (80089a4 <tcp_process_refused_data+0xec>)
 80088c8:	f240 6209 	movw	r2, #1545	; 0x609
 80088cc:	4936      	ldr	r1, [pc, #216]	; (80089a8 <tcp_process_refused_data+0xf0>)
 80088ce:	4837      	ldr	r0, [pc, #220]	; (80089ac <tcp_process_refused_data+0xf4>)
 80088d0:	f007 fde6 	bl	80104a0 <iprintf>
 80088d4:	f06f 030f 	mvn.w	r3, #15
 80088d8:	e060      	b.n	800899c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088de:	7b5b      	ldrb	r3, [r3, #13]
 80088e0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088e6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00b      	beq.n	8008910 <tcp_process_refused_data+0x58>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6918      	ldr	r0, [r3, #16]
 8008902:	2300      	movs	r3, #0
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	6879      	ldr	r1, [r7, #4]
 8008908:	47a0      	blx	r4
 800890a:	4603      	mov	r3, r0
 800890c:	73fb      	strb	r3, [r7, #15]
 800890e:	e007      	b.n	8008920 <tcp_process_refused_data+0x68>
 8008910:	2300      	movs	r3, #0
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	6879      	ldr	r1, [r7, #4]
 8008916:	2000      	movs	r0, #0
 8008918:	f000 f8a4 	bl	8008a64 <tcp_recv_null>
 800891c:	4603      	mov	r3, r0
 800891e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d12a      	bne.n	800897e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008928:	7bbb      	ldrb	r3, [r7, #14]
 800892a:	f003 0320 	and.w	r3, r3, #32
 800892e:	2b00      	cmp	r3, #0
 8008930:	d033      	beq.n	800899a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008936:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800893a:	d005      	beq.n	8008948 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008940:	3301      	adds	r3, #1
 8008942:	b29a      	uxth	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00b      	beq.n	800896a <tcp_process_refused_data+0xb2>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6918      	ldr	r0, [r3, #16]
 800895c:	2300      	movs	r3, #0
 800895e:	2200      	movs	r2, #0
 8008960:	6879      	ldr	r1, [r7, #4]
 8008962:	47a0      	blx	r4
 8008964:	4603      	mov	r3, r0
 8008966:	73fb      	strb	r3, [r7, #15]
 8008968:	e001      	b.n	800896e <tcp_process_refused_data+0xb6>
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800896e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008972:	f113 0f0d 	cmn.w	r3, #13
 8008976:	d110      	bne.n	800899a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008978:	f06f 030c 	mvn.w	r3, #12
 800897c:	e00e      	b.n	800899c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800897e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008982:	f113 0f0d 	cmn.w	r3, #13
 8008986:	d102      	bne.n	800898e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008988:	f06f 030c 	mvn.w	r3, #12
 800898c:	e006      	b.n	800899c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8008994:	f06f 0304 	mvn.w	r3, #4
 8008998:	e000      	b.n	800899c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3714      	adds	r7, #20
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd90      	pop	{r4, r7, pc}
 80089a4:	08012400 	.word	0x08012400
 80089a8:	08012910 	.word	0x08012910
 80089ac:	08012444 	.word	0x08012444

080089b0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80089b8:	e007      	b.n	80089ca <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f80a 	bl	80089da <tcp_seg_free>
    seg = next;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1f4      	bne.n	80089ba <tcp_segs_free+0xa>
  }
}
 80089d0:	bf00      	nop
 80089d2:	bf00      	nop
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b082      	sub	sp, #8
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00c      	beq.n	8008a02 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d004      	beq.n	80089fa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fe fb8d 	bl	8007114 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80089fa:	6879      	ldr	r1, [r7, #4]
 80089fc:	2003      	movs	r0, #3
 80089fe:	f7fd fd13 	bl	8006428 <memp_free>
  }
}
 8008a02:	bf00      	nop
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
	...

08008a0c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d106      	bne.n	8008a28 <tcp_seg_copy+0x1c>
 8008a1a:	4b0f      	ldr	r3, [pc, #60]	; (8008a58 <tcp_seg_copy+0x4c>)
 8008a1c:	f240 6282 	movw	r2, #1666	; 0x682
 8008a20:	490e      	ldr	r1, [pc, #56]	; (8008a5c <tcp_seg_copy+0x50>)
 8008a22:	480f      	ldr	r0, [pc, #60]	; (8008a60 <tcp_seg_copy+0x54>)
 8008a24:	f007 fd3c 	bl	80104a0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008a28:	2003      	movs	r0, #3
 8008a2a:	f7fd fc8d 	bl	8006348 <memp_malloc>
 8008a2e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <tcp_seg_copy+0x2e>
    return NULL;
 8008a36:	2300      	movs	r3, #0
 8008a38:	e00a      	b.n	8008a50 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008a3a:	2210      	movs	r2, #16
 8008a3c:	6879      	ldr	r1, [r7, #4]
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f007 fcfe 	bl	8010440 <memcpy>
  pbuf_ref(cseg->p);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7fe fc03 	bl	8007254 <pbuf_ref>
  return cseg;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	08012400 	.word	0x08012400
 8008a5c:	08012954 	.word	0x08012954
 8008a60:	08012444 	.word	0x08012444

08008a64 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
 8008a70:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d109      	bne.n	8008a8c <tcp_recv_null+0x28>
 8008a78:	4b12      	ldr	r3, [pc, #72]	; (8008ac4 <tcp_recv_null+0x60>)
 8008a7a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8008a7e:	4912      	ldr	r1, [pc, #72]	; (8008ac8 <tcp_recv_null+0x64>)
 8008a80:	4812      	ldr	r0, [pc, #72]	; (8008acc <tcp_recv_null+0x68>)
 8008a82:	f007 fd0d 	bl	80104a0 <iprintf>
 8008a86:	f06f 030f 	mvn.w	r3, #15
 8008a8a:	e016      	b.n	8008aba <tcp_recv_null+0x56>

  if (p != NULL) {
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d009      	beq.n	8008aa6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	891b      	ldrh	r3, [r3, #8]
 8008a96:	4619      	mov	r1, r3
 8008a98:	68b8      	ldr	r0, [r7, #8]
 8008a9a:	f7ff f9bb 	bl	8007e14 <tcp_recved>
    pbuf_free(p);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7fe fb38 	bl	8007114 <pbuf_free>
 8008aa4:	e008      	b.n	8008ab8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8008aa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d104      	bne.n	8008ab8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8008aae:	68b8      	ldr	r0, [r7, #8]
 8008ab0:	f7ff f860 	bl	8007b74 <tcp_close>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	e000      	b.n	8008aba <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	08012400 	.word	0x08012400
 8008ac8:	08012970 	.word	0x08012970
 8008acc:	08012444 	.word	0x08012444

08008ad0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	db01      	blt.n	8008ae6 <tcp_kill_prio+0x16>
 8008ae2:	79fb      	ldrb	r3, [r7, #7]
 8008ae4:	e000      	b.n	8008ae8 <tcp_kill_prio+0x18>
 8008ae6:	237f      	movs	r3, #127	; 0x7f
 8008ae8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008aea:	7afb      	ldrb	r3, [r7, #11]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d034      	beq.n	8008b5a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008af0:	7afb      	ldrb	r3, [r7, #11]
 8008af2:	3b01      	subs	r3, #1
 8008af4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008af6:	2300      	movs	r3, #0
 8008af8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008afa:	2300      	movs	r3, #0
 8008afc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008afe:	4b19      	ldr	r3, [pc, #100]	; (8008b64 <tcp_kill_prio+0x94>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	617b      	str	r3, [r7, #20]
 8008b04:	e01f      	b.n	8008b46 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	7d5b      	ldrb	r3, [r3, #21]
 8008b0a:	7afa      	ldrb	r2, [r7, #11]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d80c      	bhi.n	8008b2a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008b14:	7afa      	ldrb	r2, [r7, #11]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d112      	bne.n	8008b40 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008b1a:	4b13      	ldr	r3, [pc, #76]	; (8008b68 <tcp_kill_prio+0x98>)
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d80a      	bhi.n	8008b40 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008b2a:	4b0f      	ldr	r3, [pc, #60]	; (8008b68 <tcp_kill_prio+0x98>)
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	7d5b      	ldrb	r3, [r3, #21]
 8008b3e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	617b      	str	r3, [r7, #20]
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1dc      	bne.n	8008b06 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d004      	beq.n	8008b5c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008b52:	6938      	ldr	r0, [r7, #16]
 8008b54:	f7ff f8f8 	bl	8007d48 <tcp_abort>
 8008b58:	e000      	b.n	8008b5c <tcp_kill_prio+0x8c>
    return;
 8008b5a:	bf00      	nop
  }
}
 8008b5c:	3718      	adds	r7, #24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	24003194 	.word	0x24003194
 8008b68:	24003188 	.word	0x24003188

08008b6c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	4603      	mov	r3, r0
 8008b74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008b76:	79fb      	ldrb	r3, [r7, #7]
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	d009      	beq.n	8008b90 <tcp_kill_state+0x24>
 8008b7c:	79fb      	ldrb	r3, [r7, #7]
 8008b7e:	2b09      	cmp	r3, #9
 8008b80:	d006      	beq.n	8008b90 <tcp_kill_state+0x24>
 8008b82:	4b1a      	ldr	r3, [pc, #104]	; (8008bec <tcp_kill_state+0x80>)
 8008b84:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008b88:	4919      	ldr	r1, [pc, #100]	; (8008bf0 <tcp_kill_state+0x84>)
 8008b8a:	481a      	ldr	r0, [pc, #104]	; (8008bf4 <tcp_kill_state+0x88>)
 8008b8c:	f007 fc88 	bl	80104a0 <iprintf>

  inactivity = 0;
 8008b90:	2300      	movs	r3, #0
 8008b92:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008b94:	2300      	movs	r3, #0
 8008b96:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b98:	4b17      	ldr	r3, [pc, #92]	; (8008bf8 <tcp_kill_state+0x8c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	617b      	str	r3, [r7, #20]
 8008b9e:	e017      	b.n	8008bd0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	7d1b      	ldrb	r3, [r3, #20]
 8008ba4:	79fa      	ldrb	r2, [r7, #7]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d10f      	bne.n	8008bca <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008baa:	4b14      	ldr	r3, [pc, #80]	; (8008bfc <tcp_kill_state+0x90>)
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d807      	bhi.n	8008bca <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8008bba:	4b10      	ldr	r3, [pc, #64]	; (8008bfc <tcp_kill_state+0x90>)
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	617b      	str	r3, [r7, #20]
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1e4      	bne.n	8008ba0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d003      	beq.n	8008be4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008bdc:	2100      	movs	r1, #0
 8008bde:	6938      	ldr	r0, [r7, #16]
 8008be0:	f7fe fff4 	bl	8007bcc <tcp_abandon>
  }
}
 8008be4:	bf00      	nop
 8008be6:	3718      	adds	r7, #24
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	08012400 	.word	0x08012400
 8008bf0:	0801298c 	.word	0x0801298c
 8008bf4:	08012444 	.word	0x08012444
 8008bf8:	24003194 	.word	0x24003194
 8008bfc:	24003188 	.word	0x24003188

08008c00 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008c06:	2300      	movs	r3, #0
 8008c08:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c0e:	4b12      	ldr	r3, [pc, #72]	; (8008c58 <tcp_kill_timewait+0x58>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	60fb      	str	r3, [r7, #12]
 8008c14:	e012      	b.n	8008c3c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008c16:	4b11      	ldr	r3, [pc, #68]	; (8008c5c <tcp_kill_timewait+0x5c>)
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	1ad3      	subs	r3, r2, r3
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d807      	bhi.n	8008c36 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008c26:	4b0d      	ldr	r3, [pc, #52]	; (8008c5c <tcp_kill_timewait+0x5c>)
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1e9      	bne.n	8008c16 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d002      	beq.n	8008c4e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008c48:	68b8      	ldr	r0, [r7, #8]
 8008c4a:	f7ff f87d 	bl	8007d48 <tcp_abort>
  }
}
 8008c4e:	bf00      	nop
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	24003198 	.word	0x24003198
 8008c5c:	24003188 	.word	0x24003188

08008c60 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008c66:	4b10      	ldr	r3, [pc, #64]	; (8008ca8 <tcp_handle_closepend+0x48>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008c6c:	e014      	b.n	8008c98 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	8b5b      	ldrh	r3, [r3, #26]
 8008c78:	f003 0308 	and.w	r3, r3, #8
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d009      	beq.n	8008c94 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	8b5b      	ldrh	r3, [r3, #26]
 8008c84:	f023 0308 	bic.w	r3, r3, #8
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f7fe ff06 	bl	8007aa0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1e7      	bne.n	8008c6e <tcp_handle_closepend+0xe>
  }
}
 8008c9e:	bf00      	nop
 8008ca0:	bf00      	nop
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	24003194 	.word	0x24003194

08008cac <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008cb6:	2001      	movs	r0, #1
 8008cb8:	f7fd fb46 	bl	8006348 <memp_malloc>
 8008cbc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d126      	bne.n	8008d12 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008cc4:	f7ff ffcc 	bl	8008c60 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008cc8:	f7ff ff9a 	bl	8008c00 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008ccc:	2001      	movs	r0, #1
 8008cce:	f7fd fb3b 	bl	8006348 <memp_malloc>
 8008cd2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d11b      	bne.n	8008d12 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008cda:	2009      	movs	r0, #9
 8008cdc:	f7ff ff46 	bl	8008b6c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008ce0:	2001      	movs	r0, #1
 8008ce2:	f7fd fb31 	bl	8006348 <memp_malloc>
 8008ce6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d111      	bne.n	8008d12 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008cee:	2008      	movs	r0, #8
 8008cf0:	f7ff ff3c 	bl	8008b6c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008cf4:	2001      	movs	r0, #1
 8008cf6:	f7fd fb27 	bl	8006348 <memp_malloc>
 8008cfa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d107      	bne.n	8008d12 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008d02:	79fb      	ldrb	r3, [r7, #7]
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7ff fee3 	bl	8008ad0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008d0a:	2001      	movs	r0, #1
 8008d0c:	f7fd fb1c 	bl	8006348 <memp_malloc>
 8008d10:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d03f      	beq.n	8008d98 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008d18:	229c      	movs	r2, #156	; 0x9c
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f007 fbb7 	bl	8010490 <memset>
    pcb->prio = prio;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	79fa      	ldrb	r2, [r7, #7]
 8008d26:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008d2e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008d38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	22ff      	movs	r2, #255	; 0xff
 8008d46:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008d4e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2206      	movs	r2, #6
 8008d54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2206      	movs	r2, #6
 8008d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d64:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008d6e:	4b0d      	ldr	r3, [pc, #52]	; (8008da4 <tcp_alloc+0xf8>)
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008d76:	4b0c      	ldr	r3, [pc, #48]	; (8008da8 <tcp_alloc+0xfc>)
 8008d78:	781a      	ldrb	r2, [r3, #0]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008d84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	4a08      	ldr	r2, [pc, #32]	; (8008dac <tcp_alloc+0x100>)
 8008d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	4a07      	ldr	r2, [pc, #28]	; (8008db0 <tcp_alloc+0x104>)
 8008d94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008d98:	68fb      	ldr	r3, [r7, #12]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	24003188 	.word	0x24003188
 8008da8:	2400319e 	.word	0x2400319e
 8008dac:	08008a65 	.word	0x08008a65
 8008db0:	006ddd00 	.word	0x006ddd00

08008db4 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8008db8:	2040      	movs	r0, #64	; 0x40
 8008dba:	f7ff ff77 	bl	8008cac <tcp_alloc>
 8008dbe:	4603      	mov	r3, r0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d002      	beq.n	8008dda <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	683a      	ldr	r2, [r7, #0]
 8008dd8:	611a      	str	r2, [r3, #16]
  }
}
 8008dda:	bf00      	nop
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
	...

08008de8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00e      	beq.n	8008e16 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	7d1b      	ldrb	r3, [r3, #20]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d106      	bne.n	8008e0e <tcp_recv+0x26>
 8008e00:	4b07      	ldr	r3, [pc, #28]	; (8008e20 <tcp_recv+0x38>)
 8008e02:	f240 72df 	movw	r2, #2015	; 0x7df
 8008e06:	4907      	ldr	r1, [pc, #28]	; (8008e24 <tcp_recv+0x3c>)
 8008e08:	4807      	ldr	r0, [pc, #28]	; (8008e28 <tcp_recv+0x40>)
 8008e0a:	f007 fb49 	bl	80104a0 <iprintf>
    pcb->recv = recv;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8008e16:	bf00      	nop
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	08012400 	.word	0x08012400
 8008e24:	0801299c 	.word	0x0801299c
 8008e28:	08012444 	.word	0x08012444

08008e2c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00e      	beq.n	8008e5a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	7d1b      	ldrb	r3, [r3, #20]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d106      	bne.n	8008e52 <tcp_sent+0x26>
 8008e44:	4b07      	ldr	r3, [pc, #28]	; (8008e64 <tcp_sent+0x38>)
 8008e46:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008e4a:	4907      	ldr	r1, [pc, #28]	; (8008e68 <tcp_sent+0x3c>)
 8008e4c:	4807      	ldr	r0, [pc, #28]	; (8008e6c <tcp_sent+0x40>)
 8008e4e:	f007 fb27 	bl	80104a0 <iprintf>
    pcb->sent = sent;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8008e5a:	bf00      	nop
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	08012400 	.word	0x08012400
 8008e68:	080129c4 	.word	0x080129c4
 8008e6c:	08012444 	.word	0x08012444

08008e70 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00e      	beq.n	8008e9e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	7d1b      	ldrb	r3, [r3, #20]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d106      	bne.n	8008e96 <tcp_err+0x26>
 8008e88:	4b07      	ldr	r3, [pc, #28]	; (8008ea8 <tcp_err+0x38>)
 8008e8a:	f640 020d 	movw	r2, #2061	; 0x80d
 8008e8e:	4907      	ldr	r1, [pc, #28]	; (8008eac <tcp_err+0x3c>)
 8008e90:	4807      	ldr	r0, [pc, #28]	; (8008eb0 <tcp_err+0x40>)
 8008e92:	f007 fb05 	bl	80104a0 <iprintf>
    pcb->errf = err;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8008e9e:	bf00      	nop
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	08012400 	.word	0x08012400
 8008eac:	080129ec 	.word	0x080129ec
 8008eb0:	08012444 	.word	0x08012444

08008eb4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d107      	bne.n	8008ed8 <tcp_poll+0x24>
 8008ec8:	4b0e      	ldr	r3, [pc, #56]	; (8008f04 <tcp_poll+0x50>)
 8008eca:	f640 023d 	movw	r2, #2109	; 0x83d
 8008ece:	490e      	ldr	r1, [pc, #56]	; (8008f08 <tcp_poll+0x54>)
 8008ed0:	480e      	ldr	r0, [pc, #56]	; (8008f0c <tcp_poll+0x58>)
 8008ed2:	f007 fae5 	bl	80104a0 <iprintf>
 8008ed6:	e011      	b.n	8008efc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	7d1b      	ldrb	r3, [r3, #20]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d106      	bne.n	8008eee <tcp_poll+0x3a>
 8008ee0:	4b08      	ldr	r3, [pc, #32]	; (8008f04 <tcp_poll+0x50>)
 8008ee2:	f640 023e 	movw	r2, #2110	; 0x83e
 8008ee6:	490a      	ldr	r1, [pc, #40]	; (8008f10 <tcp_poll+0x5c>)
 8008ee8:	4808      	ldr	r0, [pc, #32]	; (8008f0c <tcp_poll+0x58>)
 8008eea:	f007 fad9 	bl	80104a0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	79fa      	ldrb	r2, [r7, #7]
 8008efa:	775a      	strb	r2, [r3, #29]
}
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	08012400 	.word	0x08012400
 8008f08:	08012a14 	.word	0x08012a14
 8008f0c:	08012444 	.word	0x08012444
 8008f10:	08012a2c 	.word	0x08012a2c

08008f14 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d107      	bne.n	8008f32 <tcp_pcb_purge+0x1e>
 8008f22:	4b21      	ldr	r3, [pc, #132]	; (8008fa8 <tcp_pcb_purge+0x94>)
 8008f24:	f640 0251 	movw	r2, #2129	; 0x851
 8008f28:	4920      	ldr	r1, [pc, #128]	; (8008fac <tcp_pcb_purge+0x98>)
 8008f2a:	4821      	ldr	r0, [pc, #132]	; (8008fb0 <tcp_pcb_purge+0x9c>)
 8008f2c:	f007 fab8 	bl	80104a0 <iprintf>
 8008f30:	e037      	b.n	8008fa2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	7d1b      	ldrb	r3, [r3, #20]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d033      	beq.n	8008fa2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008f3e:	2b0a      	cmp	r3, #10
 8008f40:	d02f      	beq.n	8008fa2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d02b      	beq.n	8008fa2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d007      	beq.n	8008f62 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7fe f8dc 	bl	8007114 <pbuf_free>
      pcb->refused_data = NULL;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d002      	beq.n	8008f70 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f986 	bl	800927c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f76:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7ff fd17 	bl	80089b0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7ff fd12 	bl	80089b0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	66da      	str	r2, [r3, #108]	; 0x6c
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	08012400 	.word	0x08012400
 8008fac:	08012a4c 	.word	0x08012a4c
 8008fb0:	08012444 	.word	0x08012444

08008fb4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d106      	bne.n	8008fd2 <tcp_pcb_remove+0x1e>
 8008fc4:	4b3e      	ldr	r3, [pc, #248]	; (80090c0 <tcp_pcb_remove+0x10c>)
 8008fc6:	f640 0283 	movw	r2, #2179	; 0x883
 8008fca:	493e      	ldr	r1, [pc, #248]	; (80090c4 <tcp_pcb_remove+0x110>)
 8008fcc:	483e      	ldr	r0, [pc, #248]	; (80090c8 <tcp_pcb_remove+0x114>)
 8008fce:	f007 fa67 	bl	80104a0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d106      	bne.n	8008fe6 <tcp_pcb_remove+0x32>
 8008fd8:	4b39      	ldr	r3, [pc, #228]	; (80090c0 <tcp_pcb_remove+0x10c>)
 8008fda:	f640 0284 	movw	r2, #2180	; 0x884
 8008fde:	493b      	ldr	r1, [pc, #236]	; (80090cc <tcp_pcb_remove+0x118>)
 8008fe0:	4839      	ldr	r0, [pc, #228]	; (80090c8 <tcp_pcb_remove+0x114>)
 8008fe2:	f007 fa5d 	bl	80104a0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d105      	bne.n	8008ffc <tcp_pcb_remove+0x48>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68da      	ldr	r2, [r3, #12]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	601a      	str	r2, [r3, #0]
 8008ffa:	e013      	b.n	8009024 <tcp_pcb_remove+0x70>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	60fb      	str	r3, [r7, #12]
 8009002:	e00c      	b.n	800901e <tcp_pcb_remove+0x6a>
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	429a      	cmp	r2, r3
 800900c:	d104      	bne.n	8009018 <tcp_pcb_remove+0x64>
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	68da      	ldr	r2, [r3, #12]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	60da      	str	r2, [r3, #12]
 8009016:	e005      	b.n	8009024 <tcp_pcb_remove+0x70>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	60fb      	str	r3, [r7, #12]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1ef      	bne.n	8009004 <tcp_pcb_remove+0x50>
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	2200      	movs	r2, #0
 8009028:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800902a:	6838      	ldr	r0, [r7, #0]
 800902c:	f7ff ff72 	bl	8008f14 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	7d1b      	ldrb	r3, [r3, #20]
 8009034:	2b0a      	cmp	r3, #10
 8009036:	d013      	beq.n	8009060 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800903c:	2b01      	cmp	r3, #1
 800903e:	d00f      	beq.n	8009060 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	8b5b      	ldrh	r3, [r3, #26]
 8009044:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009048:	2b00      	cmp	r3, #0
 800904a:	d009      	beq.n	8009060 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	8b5b      	ldrh	r3, [r3, #26]
 8009050:	f043 0302 	orr.w	r3, r3, #2
 8009054:	b29a      	uxth	r2, r3
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800905a:	6838      	ldr	r0, [r7, #0]
 800905c:	f003 fbc6 	bl	800c7ec <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	7d1b      	ldrb	r3, [r3, #20]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d020      	beq.n	80090aa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800906c:	2b00      	cmp	r3, #0
 800906e:	d006      	beq.n	800907e <tcp_pcb_remove+0xca>
 8009070:	4b13      	ldr	r3, [pc, #76]	; (80090c0 <tcp_pcb_remove+0x10c>)
 8009072:	f640 0293 	movw	r2, #2195	; 0x893
 8009076:	4916      	ldr	r1, [pc, #88]	; (80090d0 <tcp_pcb_remove+0x11c>)
 8009078:	4813      	ldr	r0, [pc, #76]	; (80090c8 <tcp_pcb_remove+0x114>)
 800907a:	f007 fa11 	bl	80104a0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009082:	2b00      	cmp	r3, #0
 8009084:	d006      	beq.n	8009094 <tcp_pcb_remove+0xe0>
 8009086:	4b0e      	ldr	r3, [pc, #56]	; (80090c0 <tcp_pcb_remove+0x10c>)
 8009088:	f640 0294 	movw	r2, #2196	; 0x894
 800908c:	4911      	ldr	r1, [pc, #68]	; (80090d4 <tcp_pcb_remove+0x120>)
 800908e:	480e      	ldr	r0, [pc, #56]	; (80090c8 <tcp_pcb_remove+0x114>)
 8009090:	f007 fa06 	bl	80104a0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009098:	2b00      	cmp	r3, #0
 800909a:	d006      	beq.n	80090aa <tcp_pcb_remove+0xf6>
 800909c:	4b08      	ldr	r3, [pc, #32]	; (80090c0 <tcp_pcb_remove+0x10c>)
 800909e:	f640 0296 	movw	r2, #2198	; 0x896
 80090a2:	490d      	ldr	r1, [pc, #52]	; (80090d8 <tcp_pcb_remove+0x124>)
 80090a4:	4808      	ldr	r0, [pc, #32]	; (80090c8 <tcp_pcb_remove+0x114>)
 80090a6:	f007 f9fb 	bl	80104a0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2200      	movs	r2, #0
 80090ae:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	2200      	movs	r2, #0
 80090b4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80090b6:	bf00      	nop
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	08012400 	.word	0x08012400
 80090c4:	08012a68 	.word	0x08012a68
 80090c8:	08012444 	.word	0x08012444
 80090cc:	08012a84 	.word	0x08012a84
 80090d0:	08012aa4 	.word	0x08012aa4
 80090d4:	08012abc 	.word	0x08012abc
 80090d8:	08012ad8 	.word	0x08012ad8

080090dc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d106      	bne.n	80090f8 <tcp_next_iss+0x1c>
 80090ea:	4b0a      	ldr	r3, [pc, #40]	; (8009114 <tcp_next_iss+0x38>)
 80090ec:	f640 02af 	movw	r2, #2223	; 0x8af
 80090f0:	4909      	ldr	r1, [pc, #36]	; (8009118 <tcp_next_iss+0x3c>)
 80090f2:	480a      	ldr	r0, [pc, #40]	; (800911c <tcp_next_iss+0x40>)
 80090f4:	f007 f9d4 	bl	80104a0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80090f8:	4b09      	ldr	r3, [pc, #36]	; (8009120 <tcp_next_iss+0x44>)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	4b09      	ldr	r3, [pc, #36]	; (8009124 <tcp_next_iss+0x48>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4413      	add	r3, r2
 8009102:	4a07      	ldr	r2, [pc, #28]	; (8009120 <tcp_next_iss+0x44>)
 8009104:	6013      	str	r3, [r2, #0]
  return iss;
 8009106:	4b06      	ldr	r3, [pc, #24]	; (8009120 <tcp_next_iss+0x44>)
 8009108:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800910a:	4618      	mov	r0, r3
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	08012400 	.word	0x08012400
 8009118:	08012af0 	.word	0x08012af0
 800911c:	08012444 	.word	0x08012444
 8009120:	24000028 	.word	0x24000028
 8009124:	24003188 	.word	0x24003188

08009128 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
 8009134:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d106      	bne.n	800914a <tcp_eff_send_mss_netif+0x22>
 800913c:	4b14      	ldr	r3, [pc, #80]	; (8009190 <tcp_eff_send_mss_netif+0x68>)
 800913e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009142:	4914      	ldr	r1, [pc, #80]	; (8009194 <tcp_eff_send_mss_netif+0x6c>)
 8009144:	4814      	ldr	r0, [pc, #80]	; (8009198 <tcp_eff_send_mss_netif+0x70>)
 8009146:	f007 f9ab 	bl	80104a0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d101      	bne.n	8009154 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009150:	89fb      	ldrh	r3, [r7, #14]
 8009152:	e019      	b.n	8009188 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009158:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800915a:	8afb      	ldrh	r3, [r7, #22]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d012      	beq.n	8009186 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009160:	2328      	movs	r3, #40	; 0x28
 8009162:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009164:	8afa      	ldrh	r2, [r7, #22]
 8009166:	8abb      	ldrh	r3, [r7, #20]
 8009168:	429a      	cmp	r2, r3
 800916a:	d904      	bls.n	8009176 <tcp_eff_send_mss_netif+0x4e>
 800916c:	8afa      	ldrh	r2, [r7, #22]
 800916e:	8abb      	ldrh	r3, [r7, #20]
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	b29b      	uxth	r3, r3
 8009174:	e000      	b.n	8009178 <tcp_eff_send_mss_netif+0x50>
 8009176:	2300      	movs	r3, #0
 8009178:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800917a:	8a7a      	ldrh	r2, [r7, #18]
 800917c:	89fb      	ldrh	r3, [r7, #14]
 800917e:	4293      	cmp	r3, r2
 8009180:	bf28      	it	cs
 8009182:	4613      	movcs	r3, r2
 8009184:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009186:	89fb      	ldrh	r3, [r7, #14]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	08012400 	.word	0x08012400
 8009194:	08012b0c 	.word	0x08012b0c
 8009198:	08012444 	.word	0x08012444

0800919c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d119      	bne.n	80091e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80091b0:	4b10      	ldr	r3, [pc, #64]	; (80091f4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80091b2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80091b6:	4910      	ldr	r1, [pc, #64]	; (80091f8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80091b8:	4810      	ldr	r0, [pc, #64]	; (80091fc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80091ba:	f007 f971 	bl	80104a0 <iprintf>

  while (pcb != NULL) {
 80091be:	e011      	b.n	80091e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d108      	bne.n	80091de <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f7fe fdb8 	bl	8007d48 <tcp_abort>
      pcb = next;
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	60fb      	str	r3, [r7, #12]
 80091dc:	e002      	b.n	80091e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1ea      	bne.n	80091c0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80091ea:	bf00      	nop
 80091ec:	bf00      	nop
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	08012400 	.word	0x08012400
 80091f8:	08012b34 	.word	0x08012b34
 80091fc:	08012444 	.word	0x08012444

08009200 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d02a      	beq.n	8009266 <tcp_netif_ip_addr_changed+0x66>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d026      	beq.n	8009266 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009218:	4b15      	ldr	r3, [pc, #84]	; (8009270 <tcp_netif_ip_addr_changed+0x70>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7ff ffbc 	bl	800919c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009224:	4b13      	ldr	r3, [pc, #76]	; (8009274 <tcp_netif_ip_addr_changed+0x74>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4619      	mov	r1, r3
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7ff ffb6 	bl	800919c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d017      	beq.n	8009266 <tcp_netif_ip_addr_changed+0x66>
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d013      	beq.n	8009266 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800923e:	4b0e      	ldr	r3, [pc, #56]	; (8009278 <tcp_netif_ip_addr_changed+0x78>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	e00c      	b.n	8009260 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	429a      	cmp	r2, r3
 8009250:	d103      	bne.n	800925a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	60fb      	str	r3, [r7, #12]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1ef      	bne.n	8009246 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009266:	bf00      	nop
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	24003194 	.word	0x24003194
 8009274:	2400318c 	.word	0x2400318c
 8009278:	24003190 	.word	0x24003190

0800927c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009288:	2b00      	cmp	r3, #0
 800928a:	d007      	beq.n	800929c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009290:	4618      	mov	r0, r3
 8009292:	f7ff fb8d 	bl	80089b0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800929c:	bf00      	nop
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80092a4:	b590      	push	{r4, r7, lr}
 80092a6:	b08d      	sub	sp, #52	; 0x34
 80092a8:	af04      	add	r7, sp, #16
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d105      	bne.n	80092c0 <tcp_input+0x1c>
 80092b4:	4b9b      	ldr	r3, [pc, #620]	; (8009524 <tcp_input+0x280>)
 80092b6:	2283      	movs	r2, #131	; 0x83
 80092b8:	499b      	ldr	r1, [pc, #620]	; (8009528 <tcp_input+0x284>)
 80092ba:	489c      	ldr	r0, [pc, #624]	; (800952c <tcp_input+0x288>)
 80092bc:	f007 f8f0 	bl	80104a0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	4a9a      	ldr	r2, [pc, #616]	; (8009530 <tcp_input+0x28c>)
 80092c6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	895b      	ldrh	r3, [r3, #10]
 80092cc:	2b13      	cmp	r3, #19
 80092ce:	f240 83d1 	bls.w	8009a74 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80092d2:	4b98      	ldr	r3, [pc, #608]	; (8009534 <tcp_input+0x290>)
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	4a97      	ldr	r2, [pc, #604]	; (8009534 <tcp_input+0x290>)
 80092d8:	6812      	ldr	r2, [r2, #0]
 80092da:	4611      	mov	r1, r2
 80092dc:	4618      	mov	r0, r3
 80092de:	f006 f895 	bl	800f40c <ip4_addr_isbroadcast_u32>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f040 83c7 	bne.w	8009a78 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80092ea:	4b92      	ldr	r3, [pc, #584]	; (8009534 <tcp_input+0x290>)
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80092f2:	2be0      	cmp	r3, #224	; 0xe0
 80092f4:	f000 83c0 	beq.w	8009a78 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80092f8:	4b8d      	ldr	r3, [pc, #564]	; (8009530 <tcp_input+0x28c>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	899b      	ldrh	r3, [r3, #12]
 80092fe:	b29b      	uxth	r3, r3
 8009300:	4618      	mov	r0, r3
 8009302:	f7fc faf1 	bl	80058e8 <lwip_htons>
 8009306:	4603      	mov	r3, r0
 8009308:	0b1b      	lsrs	r3, r3, #12
 800930a:	b29b      	uxth	r3, r3
 800930c:	b2db      	uxtb	r3, r3
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009312:	7cbb      	ldrb	r3, [r7, #18]
 8009314:	2b13      	cmp	r3, #19
 8009316:	f240 83b1 	bls.w	8009a7c <tcp_input+0x7d8>
 800931a:	7cbb      	ldrb	r3, [r7, #18]
 800931c:	b29a      	uxth	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	891b      	ldrh	r3, [r3, #8]
 8009322:	429a      	cmp	r2, r3
 8009324:	f200 83aa 	bhi.w	8009a7c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009328:	7cbb      	ldrb	r3, [r7, #18]
 800932a:	b29b      	uxth	r3, r3
 800932c:	3b14      	subs	r3, #20
 800932e:	b29a      	uxth	r2, r3
 8009330:	4b81      	ldr	r3, [pc, #516]	; (8009538 <tcp_input+0x294>)
 8009332:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009334:	4b81      	ldr	r3, [pc, #516]	; (800953c <tcp_input+0x298>)
 8009336:	2200      	movs	r2, #0
 8009338:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	895a      	ldrh	r2, [r3, #10]
 800933e:	7cbb      	ldrb	r3, [r7, #18]
 8009340:	b29b      	uxth	r3, r3
 8009342:	429a      	cmp	r2, r3
 8009344:	d309      	bcc.n	800935a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009346:	4b7c      	ldr	r3, [pc, #496]	; (8009538 <tcp_input+0x294>)
 8009348:	881a      	ldrh	r2, [r3, #0]
 800934a:	4b7d      	ldr	r3, [pc, #500]	; (8009540 <tcp_input+0x29c>)
 800934c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800934e:	7cbb      	ldrb	r3, [r7, #18]
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7fd fe58 	bl	8007008 <pbuf_remove_header>
 8009358:	e04e      	b.n	80093f8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d105      	bne.n	800936e <tcp_input+0xca>
 8009362:	4b70      	ldr	r3, [pc, #448]	; (8009524 <tcp_input+0x280>)
 8009364:	22c2      	movs	r2, #194	; 0xc2
 8009366:	4977      	ldr	r1, [pc, #476]	; (8009544 <tcp_input+0x2a0>)
 8009368:	4870      	ldr	r0, [pc, #448]	; (800952c <tcp_input+0x288>)
 800936a:	f007 f899 	bl	80104a0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800936e:	2114      	movs	r1, #20
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f7fd fe49 	bl	8007008 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	895a      	ldrh	r2, [r3, #10]
 800937a:	4b71      	ldr	r3, [pc, #452]	; (8009540 <tcp_input+0x29c>)
 800937c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800937e:	4b6e      	ldr	r3, [pc, #440]	; (8009538 <tcp_input+0x294>)
 8009380:	881a      	ldrh	r2, [r3, #0]
 8009382:	4b6f      	ldr	r3, [pc, #444]	; (8009540 <tcp_input+0x29c>)
 8009384:	881b      	ldrh	r3, [r3, #0]
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800938a:	4b6d      	ldr	r3, [pc, #436]	; (8009540 <tcp_input+0x29c>)
 800938c:	881b      	ldrh	r3, [r3, #0]
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7fd fe39 	bl	8007008 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	895b      	ldrh	r3, [r3, #10]
 800939c:	8a3a      	ldrh	r2, [r7, #16]
 800939e:	429a      	cmp	r2, r3
 80093a0:	f200 836e 	bhi.w	8009a80 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	4a64      	ldr	r2, [pc, #400]	; (800953c <tcp_input+0x298>)
 80093ac:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	8a3a      	ldrh	r2, [r7, #16]
 80093b4:	4611      	mov	r1, r2
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fd fe26 	bl	8007008 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	891a      	ldrh	r2, [r3, #8]
 80093c0:	8a3b      	ldrh	r3, [r7, #16]
 80093c2:	1ad3      	subs	r3, r2, r3
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	895b      	ldrh	r3, [r3, #10]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d005      	beq.n	80093de <tcp_input+0x13a>
 80093d2:	4b54      	ldr	r3, [pc, #336]	; (8009524 <tcp_input+0x280>)
 80093d4:	22df      	movs	r2, #223	; 0xdf
 80093d6:	495c      	ldr	r1, [pc, #368]	; (8009548 <tcp_input+0x2a4>)
 80093d8:	4854      	ldr	r0, [pc, #336]	; (800952c <tcp_input+0x288>)
 80093da:	f007 f861 	bl	80104a0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	891a      	ldrh	r2, [r3, #8]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	891b      	ldrh	r3, [r3, #8]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d005      	beq.n	80093f8 <tcp_input+0x154>
 80093ec:	4b4d      	ldr	r3, [pc, #308]	; (8009524 <tcp_input+0x280>)
 80093ee:	22e0      	movs	r2, #224	; 0xe0
 80093f0:	4956      	ldr	r1, [pc, #344]	; (800954c <tcp_input+0x2a8>)
 80093f2:	484e      	ldr	r0, [pc, #312]	; (800952c <tcp_input+0x288>)
 80093f4:	f007 f854 	bl	80104a0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80093f8:	4b4d      	ldr	r3, [pc, #308]	; (8009530 <tcp_input+0x28c>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	881b      	ldrh	r3, [r3, #0]
 80093fe:	b29b      	uxth	r3, r3
 8009400:	4a4b      	ldr	r2, [pc, #300]	; (8009530 <tcp_input+0x28c>)
 8009402:	6814      	ldr	r4, [r2, #0]
 8009404:	4618      	mov	r0, r3
 8009406:	f7fc fa6f 	bl	80058e8 <lwip_htons>
 800940a:	4603      	mov	r3, r0
 800940c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800940e:	4b48      	ldr	r3, [pc, #288]	; (8009530 <tcp_input+0x28c>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	885b      	ldrh	r3, [r3, #2]
 8009414:	b29b      	uxth	r3, r3
 8009416:	4a46      	ldr	r2, [pc, #280]	; (8009530 <tcp_input+0x28c>)
 8009418:	6814      	ldr	r4, [r2, #0]
 800941a:	4618      	mov	r0, r3
 800941c:	f7fc fa64 	bl	80058e8 <lwip_htons>
 8009420:	4603      	mov	r3, r0
 8009422:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009424:	4b42      	ldr	r3, [pc, #264]	; (8009530 <tcp_input+0x28c>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	4a41      	ldr	r2, [pc, #260]	; (8009530 <tcp_input+0x28c>)
 800942c:	6814      	ldr	r4, [r2, #0]
 800942e:	4618      	mov	r0, r3
 8009430:	f7fc fa6f 	bl	8005912 <lwip_htonl>
 8009434:	4603      	mov	r3, r0
 8009436:	6063      	str	r3, [r4, #4]
 8009438:	6863      	ldr	r3, [r4, #4]
 800943a:	4a45      	ldr	r2, [pc, #276]	; (8009550 <tcp_input+0x2ac>)
 800943c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800943e:	4b3c      	ldr	r3, [pc, #240]	; (8009530 <tcp_input+0x28c>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	4a3a      	ldr	r2, [pc, #232]	; (8009530 <tcp_input+0x28c>)
 8009446:	6814      	ldr	r4, [r2, #0]
 8009448:	4618      	mov	r0, r3
 800944a:	f7fc fa62 	bl	8005912 <lwip_htonl>
 800944e:	4603      	mov	r3, r0
 8009450:	60a3      	str	r3, [r4, #8]
 8009452:	68a3      	ldr	r3, [r4, #8]
 8009454:	4a3f      	ldr	r2, [pc, #252]	; (8009554 <tcp_input+0x2b0>)
 8009456:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009458:	4b35      	ldr	r3, [pc, #212]	; (8009530 <tcp_input+0x28c>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	89db      	ldrh	r3, [r3, #14]
 800945e:	b29b      	uxth	r3, r3
 8009460:	4a33      	ldr	r2, [pc, #204]	; (8009530 <tcp_input+0x28c>)
 8009462:	6814      	ldr	r4, [r2, #0]
 8009464:	4618      	mov	r0, r3
 8009466:	f7fc fa3f 	bl	80058e8 <lwip_htons>
 800946a:	4603      	mov	r3, r0
 800946c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800946e:	4b30      	ldr	r3, [pc, #192]	; (8009530 <tcp_input+0x28c>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	899b      	ldrh	r3, [r3, #12]
 8009474:	b29b      	uxth	r3, r3
 8009476:	4618      	mov	r0, r3
 8009478:	f7fc fa36 	bl	80058e8 <lwip_htons>
 800947c:	4603      	mov	r3, r0
 800947e:	b2db      	uxtb	r3, r3
 8009480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009484:	b2da      	uxtb	r2, r3
 8009486:	4b34      	ldr	r3, [pc, #208]	; (8009558 <tcp_input+0x2b4>)
 8009488:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	891a      	ldrh	r2, [r3, #8]
 800948e:	4b33      	ldr	r3, [pc, #204]	; (800955c <tcp_input+0x2b8>)
 8009490:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009492:	4b31      	ldr	r3, [pc, #196]	; (8009558 <tcp_input+0x2b4>)
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	f003 0303 	and.w	r3, r3, #3
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00c      	beq.n	80094b8 <tcp_input+0x214>
    tcplen++;
 800949e:	4b2f      	ldr	r3, [pc, #188]	; (800955c <tcp_input+0x2b8>)
 80094a0:	881b      	ldrh	r3, [r3, #0]
 80094a2:	3301      	adds	r3, #1
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	4b2d      	ldr	r3, [pc, #180]	; (800955c <tcp_input+0x2b8>)
 80094a8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	891a      	ldrh	r2, [r3, #8]
 80094ae:	4b2b      	ldr	r3, [pc, #172]	; (800955c <tcp_input+0x2b8>)
 80094b0:	881b      	ldrh	r3, [r3, #0]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	f200 82e6 	bhi.w	8009a84 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80094b8:	2300      	movs	r3, #0
 80094ba:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80094bc:	4b28      	ldr	r3, [pc, #160]	; (8009560 <tcp_input+0x2bc>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	61fb      	str	r3, [r7, #28]
 80094c2:	e09d      	b.n	8009600 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	7d1b      	ldrb	r3, [r3, #20]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d105      	bne.n	80094d8 <tcp_input+0x234>
 80094cc:	4b15      	ldr	r3, [pc, #84]	; (8009524 <tcp_input+0x280>)
 80094ce:	22fb      	movs	r2, #251	; 0xfb
 80094d0:	4924      	ldr	r1, [pc, #144]	; (8009564 <tcp_input+0x2c0>)
 80094d2:	4816      	ldr	r0, [pc, #88]	; (800952c <tcp_input+0x288>)
 80094d4:	f006 ffe4 	bl	80104a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	7d1b      	ldrb	r3, [r3, #20]
 80094dc:	2b0a      	cmp	r3, #10
 80094de:	d105      	bne.n	80094ec <tcp_input+0x248>
 80094e0:	4b10      	ldr	r3, [pc, #64]	; (8009524 <tcp_input+0x280>)
 80094e2:	22fc      	movs	r2, #252	; 0xfc
 80094e4:	4920      	ldr	r1, [pc, #128]	; (8009568 <tcp_input+0x2c4>)
 80094e6:	4811      	ldr	r0, [pc, #68]	; (800952c <tcp_input+0x288>)
 80094e8:	f006 ffda 	bl	80104a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	7d1b      	ldrb	r3, [r3, #20]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d105      	bne.n	8009500 <tcp_input+0x25c>
 80094f4:	4b0b      	ldr	r3, [pc, #44]	; (8009524 <tcp_input+0x280>)
 80094f6:	22fd      	movs	r2, #253	; 0xfd
 80094f8:	491c      	ldr	r1, [pc, #112]	; (800956c <tcp_input+0x2c8>)
 80094fa:	480c      	ldr	r0, [pc, #48]	; (800952c <tcp_input+0x288>)
 80094fc:	f006 ffd0 	bl	80104a0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	7a1b      	ldrb	r3, [r3, #8]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d033      	beq.n	8009570 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	7a1a      	ldrb	r2, [r3, #8]
 800950c:	4b09      	ldr	r3, [pc, #36]	; (8009534 <tcp_input+0x290>)
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009514:	3301      	adds	r3, #1
 8009516:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009518:	429a      	cmp	r2, r3
 800951a:	d029      	beq.n	8009570 <tcp_input+0x2cc>
      prev = pcb;
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	61bb      	str	r3, [r7, #24]
      continue;
 8009520:	e06b      	b.n	80095fa <tcp_input+0x356>
 8009522:	bf00      	nop
 8009524:	08012b68 	.word	0x08012b68
 8009528:	08012b9c 	.word	0x08012b9c
 800952c:	08012bb4 	.word	0x08012bb4
 8009530:	240031b0 	.word	0x240031b0
 8009534:	2400026c 	.word	0x2400026c
 8009538:	240031b4 	.word	0x240031b4
 800953c:	240031b8 	.word	0x240031b8
 8009540:	240031b6 	.word	0x240031b6
 8009544:	08012bdc 	.word	0x08012bdc
 8009548:	08012bec 	.word	0x08012bec
 800954c:	08012bf8 	.word	0x08012bf8
 8009550:	240031c0 	.word	0x240031c0
 8009554:	240031c4 	.word	0x240031c4
 8009558:	240031cc 	.word	0x240031cc
 800955c:	240031ca 	.word	0x240031ca
 8009560:	24003194 	.word	0x24003194
 8009564:	08012c18 	.word	0x08012c18
 8009568:	08012c40 	.word	0x08012c40
 800956c:	08012c6c 	.word	0x08012c6c
    }

    if (pcb->remote_port == tcphdr->src &&
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	8b1a      	ldrh	r2, [r3, #24]
 8009574:	4b72      	ldr	r3, [pc, #456]	; (8009740 <tcp_input+0x49c>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	881b      	ldrh	r3, [r3, #0]
 800957a:	b29b      	uxth	r3, r3
 800957c:	429a      	cmp	r2, r3
 800957e:	d13a      	bne.n	80095f6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	8ada      	ldrh	r2, [r3, #22]
 8009584:	4b6e      	ldr	r3, [pc, #440]	; (8009740 <tcp_input+0x49c>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	885b      	ldrh	r3, [r3, #2]
 800958a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800958c:	429a      	cmp	r2, r3
 800958e:	d132      	bne.n	80095f6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	685a      	ldr	r2, [r3, #4]
 8009594:	4b6b      	ldr	r3, [pc, #428]	; (8009744 <tcp_input+0x4a0>)
 8009596:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009598:	429a      	cmp	r2, r3
 800959a:	d12c      	bne.n	80095f6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	4b68      	ldr	r3, [pc, #416]	; (8009744 <tcp_input+0x4a0>)
 80095a2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d126      	bne.n	80095f6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	69fa      	ldr	r2, [r7, #28]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d106      	bne.n	80095c0 <tcp_input+0x31c>
 80095b2:	4b65      	ldr	r3, [pc, #404]	; (8009748 <tcp_input+0x4a4>)
 80095b4:	f240 120d 	movw	r2, #269	; 0x10d
 80095b8:	4964      	ldr	r1, [pc, #400]	; (800974c <tcp_input+0x4a8>)
 80095ba:	4865      	ldr	r0, [pc, #404]	; (8009750 <tcp_input+0x4ac>)
 80095bc:	f006 ff70 	bl	80104a0 <iprintf>
      if (prev != NULL) {
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00a      	beq.n	80095dc <tcp_input+0x338>
        prev->next = pcb->next;
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	68da      	ldr	r2, [r3, #12]
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80095ce:	4b61      	ldr	r3, [pc, #388]	; (8009754 <tcp_input+0x4b0>)
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80095d6:	4a5f      	ldr	r2, [pc, #380]	; (8009754 <tcp_input+0x4b0>)
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	69fa      	ldr	r2, [r7, #28]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d111      	bne.n	800960a <tcp_input+0x366>
 80095e6:	4b58      	ldr	r3, [pc, #352]	; (8009748 <tcp_input+0x4a4>)
 80095e8:	f240 1215 	movw	r2, #277	; 0x115
 80095ec:	495a      	ldr	r1, [pc, #360]	; (8009758 <tcp_input+0x4b4>)
 80095ee:	4858      	ldr	r0, [pc, #352]	; (8009750 <tcp_input+0x4ac>)
 80095f0:	f006 ff56 	bl	80104a0 <iprintf>
      break;
 80095f4:	e009      	b.n	800960a <tcp_input+0x366>
    }
    prev = pcb;
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	61fb      	str	r3, [r7, #28]
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	2b00      	cmp	r3, #0
 8009604:	f47f af5e 	bne.w	80094c4 <tcp_input+0x220>
 8009608:	e000      	b.n	800960c <tcp_input+0x368>
      break;
 800960a:	bf00      	nop
  }

  if (pcb == NULL) {
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	2b00      	cmp	r3, #0
 8009610:	f040 80aa 	bne.w	8009768 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009614:	4b51      	ldr	r3, [pc, #324]	; (800975c <tcp_input+0x4b8>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	61fb      	str	r3, [r7, #28]
 800961a:	e03f      	b.n	800969c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	7d1b      	ldrb	r3, [r3, #20]
 8009620:	2b0a      	cmp	r3, #10
 8009622:	d006      	beq.n	8009632 <tcp_input+0x38e>
 8009624:	4b48      	ldr	r3, [pc, #288]	; (8009748 <tcp_input+0x4a4>)
 8009626:	f240 121f 	movw	r2, #287	; 0x11f
 800962a:	494d      	ldr	r1, [pc, #308]	; (8009760 <tcp_input+0x4bc>)
 800962c:	4848      	ldr	r0, [pc, #288]	; (8009750 <tcp_input+0x4ac>)
 800962e:	f006 ff37 	bl	80104a0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	7a1b      	ldrb	r3, [r3, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d009      	beq.n	800964e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	7a1a      	ldrb	r2, [r3, #8]
 800963e:	4b41      	ldr	r3, [pc, #260]	; (8009744 <tcp_input+0x4a0>)
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009646:	3301      	adds	r3, #1
 8009648:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800964a:	429a      	cmp	r2, r3
 800964c:	d122      	bne.n	8009694 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	8b1a      	ldrh	r2, [r3, #24]
 8009652:	4b3b      	ldr	r3, [pc, #236]	; (8009740 <tcp_input+0x49c>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	881b      	ldrh	r3, [r3, #0]
 8009658:	b29b      	uxth	r3, r3
 800965a:	429a      	cmp	r2, r3
 800965c:	d11b      	bne.n	8009696 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	8ada      	ldrh	r2, [r3, #22]
 8009662:	4b37      	ldr	r3, [pc, #220]	; (8009740 <tcp_input+0x49c>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	885b      	ldrh	r3, [r3, #2]
 8009668:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800966a:	429a      	cmp	r2, r3
 800966c:	d113      	bne.n	8009696 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	685a      	ldr	r2, [r3, #4]
 8009672:	4b34      	ldr	r3, [pc, #208]	; (8009744 <tcp_input+0x4a0>)
 8009674:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009676:	429a      	cmp	r2, r3
 8009678:	d10d      	bne.n	8009696 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	4b31      	ldr	r3, [pc, #196]	; (8009744 <tcp_input+0x4a0>)
 8009680:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009682:	429a      	cmp	r2, r3
 8009684:	d107      	bne.n	8009696 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009686:	69f8      	ldr	r0, [r7, #28]
 8009688:	f000 fb56 	bl	8009d38 <tcp_timewait_input>
        }
        pbuf_free(p);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7fd fd41 	bl	8007114 <pbuf_free>
        return;
 8009692:	e1fd      	b.n	8009a90 <tcp_input+0x7ec>
        continue;
 8009694:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	61fb      	str	r3, [r7, #28]
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1bc      	bne.n	800961c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80096a2:	2300      	movs	r3, #0
 80096a4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80096a6:	4b2f      	ldr	r3, [pc, #188]	; (8009764 <tcp_input+0x4c0>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	617b      	str	r3, [r7, #20]
 80096ac:	e02a      	b.n	8009704 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	7a1b      	ldrb	r3, [r3, #8]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00c      	beq.n	80096d0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	7a1a      	ldrb	r2, [r3, #8]
 80096ba:	4b22      	ldr	r3, [pc, #136]	; (8009744 <tcp_input+0x4a0>)
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80096c2:	3301      	adds	r3, #1
 80096c4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d002      	beq.n	80096d0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	61bb      	str	r3, [r7, #24]
        continue;
 80096ce:	e016      	b.n	80096fe <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	8ada      	ldrh	r2, [r3, #22]
 80096d4:	4b1a      	ldr	r3, [pc, #104]	; (8009740 <tcp_input+0x49c>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	885b      	ldrh	r3, [r3, #2]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	429a      	cmp	r2, r3
 80096de:	d10c      	bne.n	80096fa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	4b17      	ldr	r3, [pc, #92]	; (8009744 <tcp_input+0x4a0>)
 80096e6:	695b      	ldr	r3, [r3, #20]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d00f      	beq.n	800970c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00d      	beq.n	800970e <tcp_input+0x46a>
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d009      	beq.n	800970e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	617b      	str	r3, [r7, #20]
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1d1      	bne.n	80096ae <tcp_input+0x40a>
 800970a:	e000      	b.n	800970e <tcp_input+0x46a>
            break;
 800970c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d029      	beq.n	8009768 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00a      	beq.n	8009730 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	68da      	ldr	r2, [r3, #12]
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009722:	4b10      	ldr	r3, [pc, #64]	; (8009764 <tcp_input+0x4c0>)
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800972a:	4a0e      	ldr	r2, [pc, #56]	; (8009764 <tcp_input+0x4c0>)
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009730:	6978      	ldr	r0, [r7, #20]
 8009732:	f000 fa03 	bl	8009b3c <tcp_listen_input>
      }
      pbuf_free(p);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7fd fcec 	bl	8007114 <pbuf_free>
      return;
 800973c:	e1a8      	b.n	8009a90 <tcp_input+0x7ec>
 800973e:	bf00      	nop
 8009740:	240031b0 	.word	0x240031b0
 8009744:	2400026c 	.word	0x2400026c
 8009748:	08012b68 	.word	0x08012b68
 800974c:	08012c94 	.word	0x08012c94
 8009750:	08012bb4 	.word	0x08012bb4
 8009754:	24003194 	.word	0x24003194
 8009758:	08012cc0 	.word	0x08012cc0
 800975c:	24003198 	.word	0x24003198
 8009760:	08012cec 	.word	0x08012cec
 8009764:	24003190 	.word	0x24003190
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	2b00      	cmp	r3, #0
 800976c:	f000 8158 	beq.w	8009a20 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009770:	4b95      	ldr	r3, [pc, #596]	; (80099c8 <tcp_input+0x724>)
 8009772:	2200      	movs	r2, #0
 8009774:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	891a      	ldrh	r2, [r3, #8]
 800977a:	4b93      	ldr	r3, [pc, #588]	; (80099c8 <tcp_input+0x724>)
 800977c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800977e:	4a92      	ldr	r2, [pc, #584]	; (80099c8 <tcp_input+0x724>)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009784:	4b91      	ldr	r3, [pc, #580]	; (80099cc <tcp_input+0x728>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a8f      	ldr	r2, [pc, #572]	; (80099c8 <tcp_input+0x724>)
 800978a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800978c:	4b90      	ldr	r3, [pc, #576]	; (80099d0 <tcp_input+0x72c>)
 800978e:	2200      	movs	r2, #0
 8009790:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009792:	4b90      	ldr	r3, [pc, #576]	; (80099d4 <tcp_input+0x730>)
 8009794:	2200      	movs	r2, #0
 8009796:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009798:	4b8f      	ldr	r3, [pc, #572]	; (80099d8 <tcp_input+0x734>)
 800979a:	2200      	movs	r2, #0
 800979c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800979e:	4b8f      	ldr	r3, [pc, #572]	; (80099dc <tcp_input+0x738>)
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	f003 0308 	and.w	r3, r3, #8
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d006      	beq.n	80097b8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	7b5b      	ldrb	r3, [r3, #13]
 80097ae:	f043 0301 	orr.w	r3, r3, #1
 80097b2:	b2da      	uxtb	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d017      	beq.n	80097f0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80097c0:	69f8      	ldr	r0, [r7, #28]
 80097c2:	f7ff f879 	bl	80088b8 <tcp_process_refused_data>
 80097c6:	4603      	mov	r3, r0
 80097c8:	f113 0f0d 	cmn.w	r3, #13
 80097cc:	d007      	beq.n	80097de <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00c      	beq.n	80097f0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80097d6:	4b82      	ldr	r3, [pc, #520]	; (80099e0 <tcp_input+0x73c>)
 80097d8:	881b      	ldrh	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d008      	beq.n	80097f0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f040 80e3 	bne.w	80099ae <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80097e8:	69f8      	ldr	r0, [r7, #28]
 80097ea:	f003 fe05 	bl	800d3f8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80097ee:	e0de      	b.n	80099ae <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80097f0:	4a7c      	ldr	r2, [pc, #496]	; (80099e4 <tcp_input+0x740>)
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80097f6:	69f8      	ldr	r0, [r7, #28]
 80097f8:	f000 fb18 	bl	8009e2c <tcp_process>
 80097fc:	4603      	mov	r3, r0
 80097fe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009800:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009804:	f113 0f0d 	cmn.w	r3, #13
 8009808:	f000 80d3 	beq.w	80099b2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800980c:	4b71      	ldr	r3, [pc, #452]	; (80099d4 <tcp_input+0x730>)
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	f003 0308 	and.w	r3, r3, #8
 8009814:	2b00      	cmp	r3, #0
 8009816:	d015      	beq.n	8009844 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800981e:	2b00      	cmp	r3, #0
 8009820:	d008      	beq.n	8009834 <tcp_input+0x590>
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009828:	69fa      	ldr	r2, [r7, #28]
 800982a:	6912      	ldr	r2, [r2, #16]
 800982c:	f06f 010d 	mvn.w	r1, #13
 8009830:	4610      	mov	r0, r2
 8009832:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009834:	69f9      	ldr	r1, [r7, #28]
 8009836:	486c      	ldr	r0, [pc, #432]	; (80099e8 <tcp_input+0x744>)
 8009838:	f7ff fbbc 	bl	8008fb4 <tcp_pcb_remove>
        tcp_free(pcb);
 800983c:	69f8      	ldr	r0, [r7, #28]
 800983e:	f7fd ff9b 	bl	8007778 <tcp_free>
 8009842:	e0da      	b.n	80099fa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009848:	4b63      	ldr	r3, [pc, #396]	; (80099d8 <tcp_input+0x734>)
 800984a:	881b      	ldrh	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d01d      	beq.n	800988c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009850:	4b61      	ldr	r3, [pc, #388]	; (80099d8 <tcp_input+0x734>)
 8009852:	881b      	ldrh	r3, [r3, #0]
 8009854:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00a      	beq.n	8009876 <tcp_input+0x5d2>
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009866:	69fa      	ldr	r2, [r7, #28]
 8009868:	6910      	ldr	r0, [r2, #16]
 800986a:	89fa      	ldrh	r2, [r7, #14]
 800986c:	69f9      	ldr	r1, [r7, #28]
 800986e:	4798      	blx	r3
 8009870:	4603      	mov	r3, r0
 8009872:	74fb      	strb	r3, [r7, #19]
 8009874:	e001      	b.n	800987a <tcp_input+0x5d6>
 8009876:	2300      	movs	r3, #0
 8009878:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800987a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800987e:	f113 0f0d 	cmn.w	r3, #13
 8009882:	f000 8098 	beq.w	80099b6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009886:	4b54      	ldr	r3, [pc, #336]	; (80099d8 <tcp_input+0x734>)
 8009888:	2200      	movs	r2, #0
 800988a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800988c:	69f8      	ldr	r0, [r7, #28]
 800988e:	f000 f915 	bl	8009abc <tcp_input_delayed_close>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	f040 8090 	bne.w	80099ba <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800989a:	4b4d      	ldr	r3, [pc, #308]	; (80099d0 <tcp_input+0x72c>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d041      	beq.n	8009926 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d006      	beq.n	80098b8 <tcp_input+0x614>
 80098aa:	4b50      	ldr	r3, [pc, #320]	; (80099ec <tcp_input+0x748>)
 80098ac:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80098b0:	494f      	ldr	r1, [pc, #316]	; (80099f0 <tcp_input+0x74c>)
 80098b2:	4850      	ldr	r0, [pc, #320]	; (80099f4 <tcp_input+0x750>)
 80098b4:	f006 fdf4 	bl	80104a0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	8b5b      	ldrh	r3, [r3, #26]
 80098bc:	f003 0310 	and.w	r3, r3, #16
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d008      	beq.n	80098d6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80098c4:	4b42      	ldr	r3, [pc, #264]	; (80099d0 <tcp_input+0x72c>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fd fc23 	bl	8007114 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80098ce:	69f8      	ldr	r0, [r7, #28]
 80098d0:	f7fe fa3a 	bl	8007d48 <tcp_abort>
            goto aborted;
 80098d4:	e091      	b.n	80099fa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00c      	beq.n	80098fa <tcp_input+0x656>
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	6918      	ldr	r0, [r3, #16]
 80098ea:	4b39      	ldr	r3, [pc, #228]	; (80099d0 <tcp_input+0x72c>)
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	2300      	movs	r3, #0
 80098f0:	69f9      	ldr	r1, [r7, #28]
 80098f2:	47a0      	blx	r4
 80098f4:	4603      	mov	r3, r0
 80098f6:	74fb      	strb	r3, [r7, #19]
 80098f8:	e008      	b.n	800990c <tcp_input+0x668>
 80098fa:	4b35      	ldr	r3, [pc, #212]	; (80099d0 <tcp_input+0x72c>)
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	2300      	movs	r3, #0
 8009900:	69f9      	ldr	r1, [r7, #28]
 8009902:	2000      	movs	r0, #0
 8009904:	f7ff f8ae 	bl	8008a64 <tcp_recv_null>
 8009908:	4603      	mov	r3, r0
 800990a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800990c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009910:	f113 0f0d 	cmn.w	r3, #13
 8009914:	d053      	beq.n	80099be <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009916:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d003      	beq.n	8009926 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800991e:	4b2c      	ldr	r3, [pc, #176]	; (80099d0 <tcp_input+0x72c>)
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009926:	4b2b      	ldr	r3, [pc, #172]	; (80099d4 <tcp_input+0x730>)
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	f003 0320 	and.w	r3, r3, #32
 800992e:	2b00      	cmp	r3, #0
 8009930:	d030      	beq.n	8009994 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009936:	2b00      	cmp	r3, #0
 8009938:	d009      	beq.n	800994e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800993e:	7b5a      	ldrb	r2, [r3, #13]
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009944:	f042 0220 	orr.w	r2, r2, #32
 8009948:	b2d2      	uxtb	r2, r2
 800994a:	735a      	strb	r2, [r3, #13]
 800994c:	e022      	b.n	8009994 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009952:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009956:	d005      	beq.n	8009964 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800995c:	3301      	adds	r3, #1
 800995e:	b29a      	uxth	r2, r3
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00b      	beq.n	8009986 <tcp_input+0x6e2>
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	6918      	ldr	r0, [r3, #16]
 8009978:	2300      	movs	r3, #0
 800997a:	2200      	movs	r2, #0
 800997c:	69f9      	ldr	r1, [r7, #28]
 800997e:	47a0      	blx	r4
 8009980:	4603      	mov	r3, r0
 8009982:	74fb      	strb	r3, [r7, #19]
 8009984:	e001      	b.n	800998a <tcp_input+0x6e6>
 8009986:	2300      	movs	r3, #0
 8009988:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800998a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800998e:	f113 0f0d 	cmn.w	r3, #13
 8009992:	d016      	beq.n	80099c2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009994:	4b13      	ldr	r3, [pc, #76]	; (80099e4 <tcp_input+0x740>)
 8009996:	2200      	movs	r2, #0
 8009998:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800999a:	69f8      	ldr	r0, [r7, #28]
 800999c:	f000 f88e 	bl	8009abc <tcp_input_delayed_close>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d128      	bne.n	80099f8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80099a6:	69f8      	ldr	r0, [r7, #28]
 80099a8:	f002 ff20 	bl	800c7ec <tcp_output>
 80099ac:	e025      	b.n	80099fa <tcp_input+0x756>
        goto aborted;
 80099ae:	bf00      	nop
 80099b0:	e023      	b.n	80099fa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80099b2:	bf00      	nop
 80099b4:	e021      	b.n	80099fa <tcp_input+0x756>
              goto aborted;
 80099b6:	bf00      	nop
 80099b8:	e01f      	b.n	80099fa <tcp_input+0x756>
          goto aborted;
 80099ba:	bf00      	nop
 80099bc:	e01d      	b.n	80099fa <tcp_input+0x756>
            goto aborted;
 80099be:	bf00      	nop
 80099c0:	e01b      	b.n	80099fa <tcp_input+0x756>
              goto aborted;
 80099c2:	bf00      	nop
 80099c4:	e019      	b.n	80099fa <tcp_input+0x756>
 80099c6:	bf00      	nop
 80099c8:	240031a0 	.word	0x240031a0
 80099cc:	240031b0 	.word	0x240031b0
 80099d0:	240031d0 	.word	0x240031d0
 80099d4:	240031cd 	.word	0x240031cd
 80099d8:	240031c8 	.word	0x240031c8
 80099dc:	240031cc 	.word	0x240031cc
 80099e0:	240031ca 	.word	0x240031ca
 80099e4:	240031d4 	.word	0x240031d4
 80099e8:	24003194 	.word	0x24003194
 80099ec:	08012b68 	.word	0x08012b68
 80099f0:	08012d1c 	.word	0x08012d1c
 80099f4:	08012bb4 	.word	0x08012bb4
          goto aborted;
 80099f8:	bf00      	nop
    tcp_input_pcb = NULL;
 80099fa:	4b27      	ldr	r3, [pc, #156]	; (8009a98 <tcp_input+0x7f4>)
 80099fc:	2200      	movs	r2, #0
 80099fe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009a00:	4b26      	ldr	r3, [pc, #152]	; (8009a9c <tcp_input+0x7f8>)
 8009a02:	2200      	movs	r2, #0
 8009a04:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009a06:	4b26      	ldr	r3, [pc, #152]	; (8009aa0 <tcp_input+0x7fc>)
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d03f      	beq.n	8009a8e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8009a0e:	4b24      	ldr	r3, [pc, #144]	; (8009aa0 <tcp_input+0x7fc>)
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fd fb7e 	bl	8007114 <pbuf_free>
      inseg.p = NULL;
 8009a18:	4b21      	ldr	r3, [pc, #132]	; (8009aa0 <tcp_input+0x7fc>)
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009a1e:	e036      	b.n	8009a8e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009a20:	4b20      	ldr	r3, [pc, #128]	; (8009aa4 <tcp_input+0x800>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	899b      	ldrh	r3, [r3, #12]
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fb ff5d 	bl	80058e8 <lwip_htons>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	f003 0304 	and.w	r3, r3, #4
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d118      	bne.n	8009a6c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a3a:	4b1b      	ldr	r3, [pc, #108]	; (8009aa8 <tcp_input+0x804>)
 8009a3c:	6819      	ldr	r1, [r3, #0]
 8009a3e:	4b1b      	ldr	r3, [pc, #108]	; (8009aac <tcp_input+0x808>)
 8009a40:	881b      	ldrh	r3, [r3, #0]
 8009a42:	461a      	mov	r2, r3
 8009a44:	4b1a      	ldr	r3, [pc, #104]	; (8009ab0 <tcp_input+0x80c>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a4a:	4b16      	ldr	r3, [pc, #88]	; (8009aa4 <tcp_input+0x800>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a4e:	885b      	ldrh	r3, [r3, #2]
 8009a50:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a52:	4a14      	ldr	r2, [pc, #80]	; (8009aa4 <tcp_input+0x800>)
 8009a54:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a56:	8812      	ldrh	r2, [r2, #0]
 8009a58:	b292      	uxth	r2, r2
 8009a5a:	9202      	str	r2, [sp, #8]
 8009a5c:	9301      	str	r3, [sp, #4]
 8009a5e:	4b15      	ldr	r3, [pc, #84]	; (8009ab4 <tcp_input+0x810>)
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	4b15      	ldr	r3, [pc, #84]	; (8009ab8 <tcp_input+0x814>)
 8009a64:	4602      	mov	r2, r0
 8009a66:	2000      	movs	r0, #0
 8009a68:	f003 fc74 	bl	800d354 <tcp_rst>
    pbuf_free(p);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f7fd fb51 	bl	8007114 <pbuf_free>
  return;
 8009a72:	e00c      	b.n	8009a8e <tcp_input+0x7ea>
    goto dropped;
 8009a74:	bf00      	nop
 8009a76:	e006      	b.n	8009a86 <tcp_input+0x7e2>
    goto dropped;
 8009a78:	bf00      	nop
 8009a7a:	e004      	b.n	8009a86 <tcp_input+0x7e2>
    goto dropped;
 8009a7c:	bf00      	nop
 8009a7e:	e002      	b.n	8009a86 <tcp_input+0x7e2>
      goto dropped;
 8009a80:	bf00      	nop
 8009a82:	e000      	b.n	8009a86 <tcp_input+0x7e2>
      goto dropped;
 8009a84:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7fd fb44 	bl	8007114 <pbuf_free>
 8009a8c:	e000      	b.n	8009a90 <tcp_input+0x7ec>
  return;
 8009a8e:	bf00      	nop
}
 8009a90:	3724      	adds	r7, #36	; 0x24
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd90      	pop	{r4, r7, pc}
 8009a96:	bf00      	nop
 8009a98:	240031d4 	.word	0x240031d4
 8009a9c:	240031d0 	.word	0x240031d0
 8009aa0:	240031a0 	.word	0x240031a0
 8009aa4:	240031b0 	.word	0x240031b0
 8009aa8:	240031c4 	.word	0x240031c4
 8009aac:	240031ca 	.word	0x240031ca
 8009ab0:	240031c0 	.word	0x240031c0
 8009ab4:	2400027c 	.word	0x2400027c
 8009ab8:	24000280 	.word	0x24000280

08009abc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d106      	bne.n	8009ad8 <tcp_input_delayed_close+0x1c>
 8009aca:	4b17      	ldr	r3, [pc, #92]	; (8009b28 <tcp_input_delayed_close+0x6c>)
 8009acc:	f240 225a 	movw	r2, #602	; 0x25a
 8009ad0:	4916      	ldr	r1, [pc, #88]	; (8009b2c <tcp_input_delayed_close+0x70>)
 8009ad2:	4817      	ldr	r0, [pc, #92]	; (8009b30 <tcp_input_delayed_close+0x74>)
 8009ad4:	f006 fce4 	bl	80104a0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009ad8:	4b16      	ldr	r3, [pc, #88]	; (8009b34 <tcp_input_delayed_close+0x78>)
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	f003 0310 	and.w	r3, r3, #16
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d01c      	beq.n	8009b1e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	8b5b      	ldrh	r3, [r3, #26]
 8009ae8:	f003 0310 	and.w	r3, r3, #16
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10d      	bne.n	8009b0c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d008      	beq.n	8009b0c <tcp_input_delayed_close+0x50>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	6912      	ldr	r2, [r2, #16]
 8009b04:	f06f 010e 	mvn.w	r1, #14
 8009b08:	4610      	mov	r0, r2
 8009b0a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009b0c:	6879      	ldr	r1, [r7, #4]
 8009b0e:	480a      	ldr	r0, [pc, #40]	; (8009b38 <tcp_input_delayed_close+0x7c>)
 8009b10:	f7ff fa50 	bl	8008fb4 <tcp_pcb_remove>
    tcp_free(pcb);
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f7fd fe2f 	bl	8007778 <tcp_free>
    return 1;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e000      	b.n	8009b20 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	08012b68 	.word	0x08012b68
 8009b2c:	08012d38 	.word	0x08012d38
 8009b30:	08012bb4 	.word	0x08012bb4
 8009b34:	240031cd 	.word	0x240031cd
 8009b38:	24003194 	.word	0x24003194

08009b3c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009b3c:	b590      	push	{r4, r7, lr}
 8009b3e:	b08b      	sub	sp, #44	; 0x2c
 8009b40:	af04      	add	r7, sp, #16
 8009b42:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009b44:	4b6f      	ldr	r3, [pc, #444]	; (8009d04 <tcp_listen_input+0x1c8>)
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	f003 0304 	and.w	r3, r3, #4
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f040 80d2 	bne.w	8009cf6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d106      	bne.n	8009b66 <tcp_listen_input+0x2a>
 8009b58:	4b6b      	ldr	r3, [pc, #428]	; (8009d08 <tcp_listen_input+0x1cc>)
 8009b5a:	f240 2281 	movw	r2, #641	; 0x281
 8009b5e:	496b      	ldr	r1, [pc, #428]	; (8009d0c <tcp_listen_input+0x1d0>)
 8009b60:	486b      	ldr	r0, [pc, #428]	; (8009d10 <tcp_listen_input+0x1d4>)
 8009b62:	f006 fc9d 	bl	80104a0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009b66:	4b67      	ldr	r3, [pc, #412]	; (8009d04 <tcp_listen_input+0x1c8>)
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	f003 0310 	and.w	r3, r3, #16
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d019      	beq.n	8009ba6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b72:	4b68      	ldr	r3, [pc, #416]	; (8009d14 <tcp_listen_input+0x1d8>)
 8009b74:	6819      	ldr	r1, [r3, #0]
 8009b76:	4b68      	ldr	r3, [pc, #416]	; (8009d18 <tcp_listen_input+0x1dc>)
 8009b78:	881b      	ldrh	r3, [r3, #0]
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	4b67      	ldr	r3, [pc, #412]	; (8009d1c <tcp_listen_input+0x1e0>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b82:	4b67      	ldr	r3, [pc, #412]	; (8009d20 <tcp_listen_input+0x1e4>)
 8009b84:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b86:	885b      	ldrh	r3, [r3, #2]
 8009b88:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b8a:	4a65      	ldr	r2, [pc, #404]	; (8009d20 <tcp_listen_input+0x1e4>)
 8009b8c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b8e:	8812      	ldrh	r2, [r2, #0]
 8009b90:	b292      	uxth	r2, r2
 8009b92:	9202      	str	r2, [sp, #8]
 8009b94:	9301      	str	r3, [sp, #4]
 8009b96:	4b63      	ldr	r3, [pc, #396]	; (8009d24 <tcp_listen_input+0x1e8>)
 8009b98:	9300      	str	r3, [sp, #0]
 8009b9a:	4b63      	ldr	r3, [pc, #396]	; (8009d28 <tcp_listen_input+0x1ec>)
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f003 fbd8 	bl	800d354 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009ba4:	e0a9      	b.n	8009cfa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8009ba6:	4b57      	ldr	r3, [pc, #348]	; (8009d04 <tcp_listen_input+0x1c8>)
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f000 80a3 	beq.w	8009cfa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	7d5b      	ldrb	r3, [r3, #21]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7ff f877 	bl	8008cac <tcp_alloc>
 8009bbe:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d111      	bne.n	8009bea <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00a      	beq.n	8009be4 <tcp_listen_input+0xa8>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	6910      	ldr	r0, [r2, #16]
 8009bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bda:	2100      	movs	r1, #0
 8009bdc:	4798      	blx	r3
 8009bde:	4603      	mov	r3, r0
 8009be0:	73bb      	strb	r3, [r7, #14]
      return;
 8009be2:	e08b      	b.n	8009cfc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009be4:	23f0      	movs	r3, #240	; 0xf0
 8009be6:	73bb      	strb	r3, [r7, #14]
      return;
 8009be8:	e088      	b.n	8009cfc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009bea:	4b50      	ldr	r3, [pc, #320]	; (8009d2c <tcp_listen_input+0x1f0>)
 8009bec:	695a      	ldr	r2, [r3, #20]
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009bf2:	4b4e      	ldr	r3, [pc, #312]	; (8009d2c <tcp_listen_input+0x1f0>)
 8009bf4:	691a      	ldr	r2, [r3, #16]
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	8ada      	ldrh	r2, [r3, #22]
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009c02:	4b47      	ldr	r3, [pc, #284]	; (8009d20 <tcp_listen_input+0x1e4>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	881b      	ldrh	r3, [r3, #0]
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	2203      	movs	r2, #3
 8009c12:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009c14:	4b41      	ldr	r3, [pc, #260]	; (8009d1c <tcp_listen_input+0x1e0>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	1c5a      	adds	r2, r3, #1
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009c26:	6978      	ldr	r0, [r7, #20]
 8009c28:	f7ff fa58 	bl	80090dc <tcp_next_iss>
 8009c2c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	693a      	ldr	r2, [r7, #16]
 8009c32:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	693a      	ldr	r2, [r7, #16]
 8009c3e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	693a      	ldr	r2, [r7, #16]
 8009c44:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009c46:	4b35      	ldr	r3, [pc, #212]	; (8009d1c <tcp_listen_input+0x1e0>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	1e5a      	subs	r2, r3, #1
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	691a      	ldr	r2, [r3, #16]
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	7a5b      	ldrb	r3, [r3, #9]
 8009c62:	f003 030c 	and.w	r3, r3, #12
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	7a1a      	ldrb	r2, [r3, #8]
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009c74:	4b2e      	ldr	r3, [pc, #184]	; (8009d30 <tcp_listen_input+0x1f4>)
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	60da      	str	r2, [r3, #12]
 8009c7c:	4a2c      	ldr	r2, [pc, #176]	; (8009d30 <tcp_listen_input+0x1f4>)
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	6013      	str	r3, [r2, #0]
 8009c82:	f003 fd29 	bl	800d6d8 <tcp_timer_needed>
 8009c86:	4b2b      	ldr	r3, [pc, #172]	; (8009d34 <tcp_listen_input+0x1f8>)
 8009c88:	2201      	movs	r2, #1
 8009c8a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009c8c:	6978      	ldr	r0, [r7, #20]
 8009c8e:	f001 fd8f 	bl	800b7b0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009c92:	4b23      	ldr	r3, [pc, #140]	; (8009d20 <tcp_listen_input+0x1e4>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	89db      	ldrh	r3, [r3, #14]
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	3304      	adds	r3, #4
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f005 f913 	bl	800eee0 <ip4_route>
 8009cba:	4601      	mov	r1, r0
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	3304      	adds	r3, #4
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f7ff fa30 	bl	8009128 <tcp_eff_send_mss_netif>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	461a      	mov	r2, r3
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009cd0:	2112      	movs	r1, #18
 8009cd2:	6978      	ldr	r0, [r7, #20]
 8009cd4:	f002 fc9c 	bl	800c610 <tcp_enqueue_flags>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d004      	beq.n	8009cee <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	6978      	ldr	r0, [r7, #20]
 8009ce8:	f7fd ff70 	bl	8007bcc <tcp_abandon>
      return;
 8009cec:	e006      	b.n	8009cfc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8009cee:	6978      	ldr	r0, [r7, #20]
 8009cf0:	f002 fd7c 	bl	800c7ec <tcp_output>
  return;
 8009cf4:	e001      	b.n	8009cfa <tcp_listen_input+0x1be>
    return;
 8009cf6:	bf00      	nop
 8009cf8:	e000      	b.n	8009cfc <tcp_listen_input+0x1c0>
  return;
 8009cfa:	bf00      	nop
}
 8009cfc:	371c      	adds	r7, #28
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd90      	pop	{r4, r7, pc}
 8009d02:	bf00      	nop
 8009d04:	240031cc 	.word	0x240031cc
 8009d08:	08012b68 	.word	0x08012b68
 8009d0c:	08012d60 	.word	0x08012d60
 8009d10:	08012bb4 	.word	0x08012bb4
 8009d14:	240031c4 	.word	0x240031c4
 8009d18:	240031ca 	.word	0x240031ca
 8009d1c:	240031c0 	.word	0x240031c0
 8009d20:	240031b0 	.word	0x240031b0
 8009d24:	2400027c 	.word	0x2400027c
 8009d28:	24000280 	.word	0x24000280
 8009d2c:	2400026c 	.word	0x2400026c
 8009d30:	24003194 	.word	0x24003194
 8009d34:	2400319c 	.word	0x2400319c

08009d38 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b086      	sub	sp, #24
 8009d3c:	af04      	add	r7, sp, #16
 8009d3e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009d40:	4b2f      	ldr	r3, [pc, #188]	; (8009e00 <tcp_timewait_input+0xc8>)
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	f003 0304 	and.w	r3, r3, #4
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d153      	bne.n	8009df4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d106      	bne.n	8009d60 <tcp_timewait_input+0x28>
 8009d52:	4b2c      	ldr	r3, [pc, #176]	; (8009e04 <tcp_timewait_input+0xcc>)
 8009d54:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009d58:	492b      	ldr	r1, [pc, #172]	; (8009e08 <tcp_timewait_input+0xd0>)
 8009d5a:	482c      	ldr	r0, [pc, #176]	; (8009e0c <tcp_timewait_input+0xd4>)
 8009d5c:	f006 fba0 	bl	80104a0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009d60:	4b27      	ldr	r3, [pc, #156]	; (8009e00 <tcp_timewait_input+0xc8>)
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	f003 0302 	and.w	r3, r3, #2
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d02a      	beq.n	8009dc2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009d6c:	4b28      	ldr	r3, [pc, #160]	; (8009e10 <tcp_timewait_input+0xd8>)
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	db2d      	blt.n	8009dd6 <tcp_timewait_input+0x9e>
 8009d7a:	4b25      	ldr	r3, [pc, #148]	; (8009e10 <tcp_timewait_input+0xd8>)
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d82:	6879      	ldr	r1, [r7, #4]
 8009d84:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009d86:	440b      	add	r3, r1
 8009d88:	1ad3      	subs	r3, r2, r3
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	dc23      	bgt.n	8009dd6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d8e:	4b21      	ldr	r3, [pc, #132]	; (8009e14 <tcp_timewait_input+0xdc>)
 8009d90:	6819      	ldr	r1, [r3, #0]
 8009d92:	4b21      	ldr	r3, [pc, #132]	; (8009e18 <tcp_timewait_input+0xe0>)
 8009d94:	881b      	ldrh	r3, [r3, #0]
 8009d96:	461a      	mov	r2, r3
 8009d98:	4b1d      	ldr	r3, [pc, #116]	; (8009e10 <tcp_timewait_input+0xd8>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009d9e:	4b1f      	ldr	r3, [pc, #124]	; (8009e1c <tcp_timewait_input+0xe4>)
 8009da0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009da2:	885b      	ldrh	r3, [r3, #2]
 8009da4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009da6:	4a1d      	ldr	r2, [pc, #116]	; (8009e1c <tcp_timewait_input+0xe4>)
 8009da8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009daa:	8812      	ldrh	r2, [r2, #0]
 8009dac:	b292      	uxth	r2, r2
 8009dae:	9202      	str	r2, [sp, #8]
 8009db0:	9301      	str	r3, [sp, #4]
 8009db2:	4b1b      	ldr	r3, [pc, #108]	; (8009e20 <tcp_timewait_input+0xe8>)
 8009db4:	9300      	str	r3, [sp, #0]
 8009db6:	4b1b      	ldr	r3, [pc, #108]	; (8009e24 <tcp_timewait_input+0xec>)
 8009db8:	4602      	mov	r2, r0
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f003 faca 	bl	800d354 <tcp_rst>
      return;
 8009dc0:	e01b      	b.n	8009dfa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8009dc2:	4b0f      	ldr	r3, [pc, #60]	; (8009e00 <tcp_timewait_input+0xc8>)
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	f003 0301 	and.w	r3, r3, #1
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d003      	beq.n	8009dd6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009dce:	4b16      	ldr	r3, [pc, #88]	; (8009e28 <tcp_timewait_input+0xf0>)
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009dd6:	4b10      	ldr	r3, [pc, #64]	; (8009e18 <tcp_timewait_input+0xe0>)
 8009dd8:	881b      	ldrh	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00c      	beq.n	8009df8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	8b5b      	ldrh	r3, [r3, #26]
 8009de2:	f043 0302 	orr.w	r3, r3, #2
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f002 fcfd 	bl	800c7ec <tcp_output>
  }
  return;
 8009df2:	e001      	b.n	8009df8 <tcp_timewait_input+0xc0>
    return;
 8009df4:	bf00      	nop
 8009df6:	e000      	b.n	8009dfa <tcp_timewait_input+0xc2>
  return;
 8009df8:	bf00      	nop
}
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	240031cc 	.word	0x240031cc
 8009e04:	08012b68 	.word	0x08012b68
 8009e08:	08012d80 	.word	0x08012d80
 8009e0c:	08012bb4 	.word	0x08012bb4
 8009e10:	240031c0 	.word	0x240031c0
 8009e14:	240031c4 	.word	0x240031c4
 8009e18:	240031ca 	.word	0x240031ca
 8009e1c:	240031b0 	.word	0x240031b0
 8009e20:	2400027c 	.word	0x2400027c
 8009e24:	24000280 	.word	0x24000280
 8009e28:	24003188 	.word	0x24003188

08009e2c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009e2c:	b590      	push	{r4, r7, lr}
 8009e2e:	b08d      	sub	sp, #52	; 0x34
 8009e30:	af04      	add	r7, sp, #16
 8009e32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009e34:	2300      	movs	r3, #0
 8009e36:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d106      	bne.n	8009e50 <tcp_process+0x24>
 8009e42:	4b9d      	ldr	r3, [pc, #628]	; (800a0b8 <tcp_process+0x28c>)
 8009e44:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009e48:	499c      	ldr	r1, [pc, #624]	; (800a0bc <tcp_process+0x290>)
 8009e4a:	489d      	ldr	r0, [pc, #628]	; (800a0c0 <tcp_process+0x294>)
 8009e4c:	f006 fb28 	bl	80104a0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009e50:	4b9c      	ldr	r3, [pc, #624]	; (800a0c4 <tcp_process+0x298>)
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	f003 0304 	and.w	r3, r3, #4
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d04e      	beq.n	8009efa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	7d1b      	ldrb	r3, [r3, #20]
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	d108      	bne.n	8009e76 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e68:	4b97      	ldr	r3, [pc, #604]	; (800a0c8 <tcp_process+0x29c>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d123      	bne.n	8009eb8 <tcp_process+0x8c>
        acceptable = 1;
 8009e70:	2301      	movs	r3, #1
 8009e72:	76fb      	strb	r3, [r7, #27]
 8009e74:	e020      	b.n	8009eb8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e7a:	4b94      	ldr	r3, [pc, #592]	; (800a0cc <tcp_process+0x2a0>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d102      	bne.n	8009e88 <tcp_process+0x5c>
        acceptable = 1;
 8009e82:	2301      	movs	r3, #1
 8009e84:	76fb      	strb	r3, [r7, #27]
 8009e86:	e017      	b.n	8009eb8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009e88:	4b90      	ldr	r3, [pc, #576]	; (800a0cc <tcp_process+0x2a0>)
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	db10      	blt.n	8009eb8 <tcp_process+0x8c>
 8009e96:	4b8d      	ldr	r3, [pc, #564]	; (800a0cc <tcp_process+0x2a0>)
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9e:	6879      	ldr	r1, [r7, #4]
 8009ea0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009ea2:	440b      	add	r3, r1
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	dc06      	bgt.n	8009eb8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	8b5b      	ldrh	r3, [r3, #26]
 8009eae:	f043 0302 	orr.w	r3, r3, #2
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009eb8:	7efb      	ldrb	r3, [r7, #27]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d01b      	beq.n	8009ef6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	7d1b      	ldrb	r3, [r3, #20]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d106      	bne.n	8009ed4 <tcp_process+0xa8>
 8009ec6:	4b7c      	ldr	r3, [pc, #496]	; (800a0b8 <tcp_process+0x28c>)
 8009ec8:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009ecc:	4980      	ldr	r1, [pc, #512]	; (800a0d0 <tcp_process+0x2a4>)
 8009ece:	487c      	ldr	r0, [pc, #496]	; (800a0c0 <tcp_process+0x294>)
 8009ed0:	f006 fae6 	bl	80104a0 <iprintf>
      recv_flags |= TF_RESET;
 8009ed4:	4b7f      	ldr	r3, [pc, #508]	; (800a0d4 <tcp_process+0x2a8>)
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	f043 0308 	orr.w	r3, r3, #8
 8009edc:	b2da      	uxtb	r2, r3
 8009ede:	4b7d      	ldr	r3, [pc, #500]	; (800a0d4 <tcp_process+0x2a8>)
 8009ee0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	8b5b      	ldrh	r3, [r3, #26]
 8009ee6:	f023 0301 	bic.w	r3, r3, #1
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009ef0:	f06f 030d 	mvn.w	r3, #13
 8009ef4:	e37a      	b.n	800a5ec <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	e378      	b.n	800a5ec <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009efa:	4b72      	ldr	r3, [pc, #456]	; (800a0c4 <tcp_process+0x298>)
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	f003 0302 	and.w	r3, r3, #2
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d010      	beq.n	8009f28 <tcp_process+0xfc>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	7d1b      	ldrb	r3, [r3, #20]
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d00c      	beq.n	8009f28 <tcp_process+0xfc>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	7d1b      	ldrb	r3, [r3, #20]
 8009f12:	2b03      	cmp	r3, #3
 8009f14:	d008      	beq.n	8009f28 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	8b5b      	ldrh	r3, [r3, #26]
 8009f1a:	f043 0302 	orr.w	r3, r3, #2
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	e361      	b.n	800a5ec <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	8b5b      	ldrh	r3, [r3, #26]
 8009f2c:	f003 0310 	and.w	r3, r3, #16
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d103      	bne.n	8009f3c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009f34:	4b68      	ldr	r3, [pc, #416]	; (800a0d8 <tcp_process+0x2ac>)
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f001 fc2f 	bl	800b7b0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	7d1b      	ldrb	r3, [r3, #20]
 8009f56:	3b02      	subs	r3, #2
 8009f58:	2b07      	cmp	r3, #7
 8009f5a:	f200 8337 	bhi.w	800a5cc <tcp_process+0x7a0>
 8009f5e:	a201      	add	r2, pc, #4	; (adr r2, 8009f64 <tcp_process+0x138>)
 8009f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f64:	08009f85 	.word	0x08009f85
 8009f68:	0800a1b5 	.word	0x0800a1b5
 8009f6c:	0800a32d 	.word	0x0800a32d
 8009f70:	0800a357 	.word	0x0800a357
 8009f74:	0800a47b 	.word	0x0800a47b
 8009f78:	0800a32d 	.word	0x0800a32d
 8009f7c:	0800a507 	.word	0x0800a507
 8009f80:	0800a597 	.word	0x0800a597
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009f84:	4b4f      	ldr	r3, [pc, #316]	; (800a0c4 <tcp_process+0x298>)
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	f003 0310 	and.w	r3, r3, #16
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f000 80e4 	beq.w	800a15a <tcp_process+0x32e>
 8009f92:	4b4c      	ldr	r3, [pc, #304]	; (800a0c4 <tcp_process+0x298>)
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	f003 0302 	and.w	r3, r3, #2
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f000 80dd 	beq.w	800a15a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fa4:	1c5a      	adds	r2, r3, #1
 8009fa6:	4b48      	ldr	r3, [pc, #288]	; (800a0c8 <tcp_process+0x29c>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	f040 80d5 	bne.w	800a15a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009fb0:	4b46      	ldr	r3, [pc, #280]	; (800a0cc <tcp_process+0x2a0>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	1c5a      	adds	r2, r3, #1
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009fc2:	4b41      	ldr	r3, [pc, #260]	; (800a0c8 <tcp_process+0x29c>)
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009fca:	4b44      	ldr	r3, [pc, #272]	; (800a0dc <tcp_process+0x2b0>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	89db      	ldrh	r3, [r3, #14]
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009fe4:	4b39      	ldr	r3, [pc, #228]	; (800a0cc <tcp_process+0x2a0>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	1e5a      	subs	r2, r3, #1
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2204      	movs	r2, #4
 8009ff2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	3304      	adds	r3, #4
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f004 ff6f 	bl	800eee0 <ip4_route>
 800a002:	4601      	mov	r1, r0
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	3304      	adds	r3, #4
 800a008:	461a      	mov	r2, r3
 800a00a:	4620      	mov	r0, r4
 800a00c:	f7ff f88c 	bl	8009128 <tcp_eff_send_mss_netif>
 800a010:	4603      	mov	r3, r0
 800a012:	461a      	mov	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a01c:	009a      	lsls	r2, r3, #2
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a022:	005b      	lsls	r3, r3, #1
 800a024:	f241 111c 	movw	r1, #4380	; 0x111c
 800a028:	428b      	cmp	r3, r1
 800a02a:	bf38      	it	cc
 800a02c:	460b      	movcc	r3, r1
 800a02e:	429a      	cmp	r2, r3
 800a030:	d204      	bcs.n	800a03c <tcp_process+0x210>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	b29b      	uxth	r3, r3
 800a03a:	e00d      	b.n	800a058 <tcp_process+0x22c>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a040:	005b      	lsls	r3, r3, #1
 800a042:	f241 121c 	movw	r2, #4380	; 0x111c
 800a046:	4293      	cmp	r3, r2
 800a048:	d904      	bls.n	800a054 <tcp_process+0x228>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a04e:	005b      	lsls	r3, r3, #1
 800a050:	b29b      	uxth	r3, r3
 800a052:	e001      	b.n	800a058 <tcp_process+0x22c>
 800a054:	f241 131c 	movw	r3, #4380	; 0x111c
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a064:	2b00      	cmp	r3, #0
 800a066:	d106      	bne.n	800a076 <tcp_process+0x24a>
 800a068:	4b13      	ldr	r3, [pc, #76]	; (800a0b8 <tcp_process+0x28c>)
 800a06a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a06e:	491c      	ldr	r1, [pc, #112]	; (800a0e0 <tcp_process+0x2b4>)
 800a070:	4813      	ldr	r0, [pc, #76]	; (800a0c0 <tcp_process+0x294>)
 800a072:	f006 fa15 	bl	80104a0 <iprintf>
        --pcb->snd_queuelen;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a07c:	3b01      	subs	r3, #1
 800a07e:	b29a      	uxth	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a08a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d12a      	bne.n	800a0e8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a096:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d106      	bne.n	800a0ac <tcp_process+0x280>
 800a09e:	4b06      	ldr	r3, [pc, #24]	; (800a0b8 <tcp_process+0x28c>)
 800a0a0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a0a4:	490f      	ldr	r1, [pc, #60]	; (800a0e4 <tcp_process+0x2b8>)
 800a0a6:	4806      	ldr	r0, [pc, #24]	; (800a0c0 <tcp_process+0x294>)
 800a0a8:	f006 f9fa 	bl	80104a0 <iprintf>
          pcb->unsent = rseg->next;
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	66da      	str	r2, [r3, #108]	; 0x6c
 800a0b4:	e01c      	b.n	800a0f0 <tcp_process+0x2c4>
 800a0b6:	bf00      	nop
 800a0b8:	08012b68 	.word	0x08012b68
 800a0bc:	08012da0 	.word	0x08012da0
 800a0c0:	08012bb4 	.word	0x08012bb4
 800a0c4:	240031cc 	.word	0x240031cc
 800a0c8:	240031c4 	.word	0x240031c4
 800a0cc:	240031c0 	.word	0x240031c0
 800a0d0:	08012dbc 	.word	0x08012dbc
 800a0d4:	240031cd 	.word	0x240031cd
 800a0d8:	24003188 	.word	0x24003188
 800a0dc:	240031b0 	.word	0x240031b0
 800a0e0:	08012ddc 	.word	0x08012ddc
 800a0e4:	08012df4 	.word	0x08012df4
        } else {
          pcb->unacked = rseg->next;
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800a0f0:	69f8      	ldr	r0, [r7, #28]
 800a0f2:	f7fe fc72 	bl	80089da <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d104      	bne.n	800a108 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a104:	861a      	strh	r2, [r3, #48]	; 0x30
 800a106:	e006      	b.n	800a116 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00a      	beq.n	800a136 <tcp_process+0x30a>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	6910      	ldr	r0, [r2, #16]
 800a12a:	2200      	movs	r2, #0
 800a12c:	6879      	ldr	r1, [r7, #4]
 800a12e:	4798      	blx	r3
 800a130:	4603      	mov	r3, r0
 800a132:	76bb      	strb	r3, [r7, #26]
 800a134:	e001      	b.n	800a13a <tcp_process+0x30e>
 800a136:	2300      	movs	r3, #0
 800a138:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a13a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a13e:	f113 0f0d 	cmn.w	r3, #13
 800a142:	d102      	bne.n	800a14a <tcp_process+0x31e>
          return ERR_ABRT;
 800a144:	f06f 030c 	mvn.w	r3, #12
 800a148:	e250      	b.n	800a5ec <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	8b5b      	ldrh	r3, [r3, #26]
 800a14e:	f043 0302 	orr.w	r3, r3, #2
 800a152:	b29a      	uxth	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a158:	e23a      	b.n	800a5d0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a15a:	4b98      	ldr	r3, [pc, #608]	; (800a3bc <tcp_process+0x590>)
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	f003 0310 	and.w	r3, r3, #16
 800a162:	2b00      	cmp	r3, #0
 800a164:	f000 8234 	beq.w	800a5d0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a168:	4b95      	ldr	r3, [pc, #596]	; (800a3c0 <tcp_process+0x594>)
 800a16a:	6819      	ldr	r1, [r3, #0]
 800a16c:	4b95      	ldr	r3, [pc, #596]	; (800a3c4 <tcp_process+0x598>)
 800a16e:	881b      	ldrh	r3, [r3, #0]
 800a170:	461a      	mov	r2, r3
 800a172:	4b95      	ldr	r3, [pc, #596]	; (800a3c8 <tcp_process+0x59c>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a178:	4b94      	ldr	r3, [pc, #592]	; (800a3cc <tcp_process+0x5a0>)
 800a17a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a17c:	885b      	ldrh	r3, [r3, #2]
 800a17e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a180:	4a92      	ldr	r2, [pc, #584]	; (800a3cc <tcp_process+0x5a0>)
 800a182:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a184:	8812      	ldrh	r2, [r2, #0]
 800a186:	b292      	uxth	r2, r2
 800a188:	9202      	str	r2, [sp, #8]
 800a18a:	9301      	str	r3, [sp, #4]
 800a18c:	4b90      	ldr	r3, [pc, #576]	; (800a3d0 <tcp_process+0x5a4>)
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	4b90      	ldr	r3, [pc, #576]	; (800a3d4 <tcp_process+0x5a8>)
 800a192:	4602      	mov	r2, r0
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f003 f8dd 	bl	800d354 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1a0:	2b05      	cmp	r3, #5
 800a1a2:	f200 8215 	bhi.w	800a5d0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f002 fea7 	bl	800cf00 <tcp_rexmit_rto>
      break;
 800a1b2:	e20d      	b.n	800a5d0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a1b4:	4b81      	ldr	r3, [pc, #516]	; (800a3bc <tcp_process+0x590>)
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	f003 0310 	and.w	r3, r3, #16
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f000 80a1 	beq.w	800a304 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a1c2:	4b7f      	ldr	r3, [pc, #508]	; (800a3c0 <tcp_process+0x594>)
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ca:	1ad3      	subs	r3, r2, r3
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	db7e      	blt.n	800a2d0 <tcp_process+0x4a4>
 800a1d2:	4b7b      	ldr	r3, [pc, #492]	; (800a3c0 <tcp_process+0x594>)
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1da:	1ad3      	subs	r3, r2, r3
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	dc77      	bgt.n	800a2d0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2204      	movs	r2, #4
 800a1e4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d102      	bne.n	800a1f4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a1ee:	23fa      	movs	r3, #250	; 0xfa
 800a1f0:	76bb      	strb	r3, [r7, #26]
 800a1f2:	e01d      	b.n	800a230 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1f8:	699b      	ldr	r3, [r3, #24]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d106      	bne.n	800a20c <tcp_process+0x3e0>
 800a1fe:	4b76      	ldr	r3, [pc, #472]	; (800a3d8 <tcp_process+0x5ac>)
 800a200:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800a204:	4975      	ldr	r1, [pc, #468]	; (800a3dc <tcp_process+0x5b0>)
 800a206:	4876      	ldr	r0, [pc, #472]	; (800a3e0 <tcp_process+0x5b4>)
 800a208:	f006 f94a 	bl	80104a0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a210:	699b      	ldr	r3, [r3, #24]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00a      	beq.n	800a22c <tcp_process+0x400>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	6910      	ldr	r0, [r2, #16]
 800a220:	2200      	movs	r2, #0
 800a222:	6879      	ldr	r1, [r7, #4]
 800a224:	4798      	blx	r3
 800a226:	4603      	mov	r3, r0
 800a228:	76bb      	strb	r3, [r7, #26]
 800a22a:	e001      	b.n	800a230 <tcp_process+0x404>
 800a22c:	23f0      	movs	r3, #240	; 0xf0
 800a22e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a230:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00a      	beq.n	800a24e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a238:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a23c:	f113 0f0d 	cmn.w	r3, #13
 800a240:	d002      	beq.n	800a248 <tcp_process+0x41c>
              tcp_abort(pcb);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7fd fd80 	bl	8007d48 <tcp_abort>
            }
            return ERR_ABRT;
 800a248:	f06f 030c 	mvn.w	r3, #12
 800a24c:	e1ce      	b.n	800a5ec <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fae0 	bl	800a814 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a254:	4b63      	ldr	r3, [pc, #396]	; (800a3e4 <tcp_process+0x5b8>)
 800a256:	881b      	ldrh	r3, [r3, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d005      	beq.n	800a268 <tcp_process+0x43c>
            recv_acked--;
 800a25c:	4b61      	ldr	r3, [pc, #388]	; (800a3e4 <tcp_process+0x5b8>)
 800a25e:	881b      	ldrh	r3, [r3, #0]
 800a260:	3b01      	subs	r3, #1
 800a262:	b29a      	uxth	r2, r3
 800a264:	4b5f      	ldr	r3, [pc, #380]	; (800a3e4 <tcp_process+0x5b8>)
 800a266:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a26c:	009a      	lsls	r2, r3, #2
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a272:	005b      	lsls	r3, r3, #1
 800a274:	f241 111c 	movw	r1, #4380	; 0x111c
 800a278:	428b      	cmp	r3, r1
 800a27a:	bf38      	it	cc
 800a27c:	460b      	movcc	r3, r1
 800a27e:	429a      	cmp	r2, r3
 800a280:	d204      	bcs.n	800a28c <tcp_process+0x460>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	b29b      	uxth	r3, r3
 800a28a:	e00d      	b.n	800a2a8 <tcp_process+0x47c>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a290:	005b      	lsls	r3, r3, #1
 800a292:	f241 121c 	movw	r2, #4380	; 0x111c
 800a296:	4293      	cmp	r3, r2
 800a298:	d904      	bls.n	800a2a4 <tcp_process+0x478>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a29e:	005b      	lsls	r3, r3, #1
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	e001      	b.n	800a2a8 <tcp_process+0x47c>
 800a2a4:	f241 131c 	movw	r3, #4380	; 0x111c
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a2ae:	4b4e      	ldr	r3, [pc, #312]	; (800a3e8 <tcp_process+0x5bc>)
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	f003 0320 	and.w	r3, r3, #32
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d037      	beq.n	800a32a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	8b5b      	ldrh	r3, [r3, #26]
 800a2be:	f043 0302 	orr.w	r3, r3, #2
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2207      	movs	r2, #7
 800a2cc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a2ce:	e02c      	b.n	800a32a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2d0:	4b3b      	ldr	r3, [pc, #236]	; (800a3c0 <tcp_process+0x594>)
 800a2d2:	6819      	ldr	r1, [r3, #0]
 800a2d4:	4b3b      	ldr	r3, [pc, #236]	; (800a3c4 <tcp_process+0x598>)
 800a2d6:	881b      	ldrh	r3, [r3, #0]
 800a2d8:	461a      	mov	r2, r3
 800a2da:	4b3b      	ldr	r3, [pc, #236]	; (800a3c8 <tcp_process+0x59c>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a2e0:	4b3a      	ldr	r3, [pc, #232]	; (800a3cc <tcp_process+0x5a0>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2e4:	885b      	ldrh	r3, [r3, #2]
 800a2e6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a2e8:	4a38      	ldr	r2, [pc, #224]	; (800a3cc <tcp_process+0x5a0>)
 800a2ea:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2ec:	8812      	ldrh	r2, [r2, #0]
 800a2ee:	b292      	uxth	r2, r2
 800a2f0:	9202      	str	r2, [sp, #8]
 800a2f2:	9301      	str	r3, [sp, #4]
 800a2f4:	4b36      	ldr	r3, [pc, #216]	; (800a3d0 <tcp_process+0x5a4>)
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	4b36      	ldr	r3, [pc, #216]	; (800a3d4 <tcp_process+0x5a8>)
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f003 f829 	bl	800d354 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a302:	e167      	b.n	800a5d4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a304:	4b2d      	ldr	r3, [pc, #180]	; (800a3bc <tcp_process+0x590>)
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	f003 0302 	and.w	r3, r3, #2
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f000 8161 	beq.w	800a5d4 <tcp_process+0x7a8>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a316:	1e5a      	subs	r2, r3, #1
 800a318:	4b2b      	ldr	r3, [pc, #172]	; (800a3c8 <tcp_process+0x59c>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	f040 8159 	bne.w	800a5d4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f002 fe0e 	bl	800cf44 <tcp_rexmit>
      break;
 800a328:	e154      	b.n	800a5d4 <tcp_process+0x7a8>
 800a32a:	e153      	b.n	800a5d4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fa71 	bl	800a814 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a332:	4b2d      	ldr	r3, [pc, #180]	; (800a3e8 <tcp_process+0x5bc>)
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	f003 0320 	and.w	r3, r3, #32
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f000 814c 	beq.w	800a5d8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	8b5b      	ldrh	r3, [r3, #26]
 800a344:	f043 0302 	orr.w	r3, r3, #2
 800a348:	b29a      	uxth	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2207      	movs	r2, #7
 800a352:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a354:	e140      	b.n	800a5d8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fa5c 	bl	800a814 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a35c:	4b22      	ldr	r3, [pc, #136]	; (800a3e8 <tcp_process+0x5bc>)
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	f003 0320 	and.w	r3, r3, #32
 800a364:	2b00      	cmp	r3, #0
 800a366:	d071      	beq.n	800a44c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a368:	4b14      	ldr	r3, [pc, #80]	; (800a3bc <tcp_process+0x590>)
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	f003 0310 	and.w	r3, r3, #16
 800a370:	2b00      	cmp	r3, #0
 800a372:	d060      	beq.n	800a436 <tcp_process+0x60a>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a378:	4b11      	ldr	r3, [pc, #68]	; (800a3c0 <tcp_process+0x594>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d15a      	bne.n	800a436 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a384:	2b00      	cmp	r3, #0
 800a386:	d156      	bne.n	800a436 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	8b5b      	ldrh	r3, [r3, #26]
 800a38c:	f043 0302 	orr.w	r3, r3, #2
 800a390:	b29a      	uxth	r2, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7fe fdbc 	bl	8008f14 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a39c:	4b13      	ldr	r3, [pc, #76]	; (800a3ec <tcp_process+0x5c0>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d105      	bne.n	800a3b2 <tcp_process+0x586>
 800a3a6:	4b11      	ldr	r3, [pc, #68]	; (800a3ec <tcp_process+0x5c0>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	4a0f      	ldr	r2, [pc, #60]	; (800a3ec <tcp_process+0x5c0>)
 800a3ae:	6013      	str	r3, [r2, #0]
 800a3b0:	e02e      	b.n	800a410 <tcp_process+0x5e4>
 800a3b2:	4b0e      	ldr	r3, [pc, #56]	; (800a3ec <tcp_process+0x5c0>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	617b      	str	r3, [r7, #20]
 800a3b8:	e027      	b.n	800a40a <tcp_process+0x5de>
 800a3ba:	bf00      	nop
 800a3bc:	240031cc 	.word	0x240031cc
 800a3c0:	240031c4 	.word	0x240031c4
 800a3c4:	240031ca 	.word	0x240031ca
 800a3c8:	240031c0 	.word	0x240031c0
 800a3cc:	240031b0 	.word	0x240031b0
 800a3d0:	2400027c 	.word	0x2400027c
 800a3d4:	24000280 	.word	0x24000280
 800a3d8:	08012b68 	.word	0x08012b68
 800a3dc:	08012e08 	.word	0x08012e08
 800a3e0:	08012bb4 	.word	0x08012bb4
 800a3e4:	240031c8 	.word	0x240031c8
 800a3e8:	240031cd 	.word	0x240031cd
 800a3ec:	24003194 	.word	0x24003194
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d104      	bne.n	800a404 <tcp_process+0x5d8>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	68da      	ldr	r2, [r3, #12]
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	60da      	str	r2, [r3, #12]
 800a402:	e005      	b.n	800a410 <tcp_process+0x5e4>
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	617b      	str	r3, [r7, #20]
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1ef      	bne.n	800a3f0 <tcp_process+0x5c4>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	60da      	str	r2, [r3, #12]
 800a416:	4b77      	ldr	r3, [pc, #476]	; (800a5f4 <tcp_process+0x7c8>)
 800a418:	2201      	movs	r2, #1
 800a41a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	220a      	movs	r2, #10
 800a420:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a422:	4b75      	ldr	r3, [pc, #468]	; (800a5f8 <tcp_process+0x7cc>)
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	60da      	str	r2, [r3, #12]
 800a42a:	4a73      	ldr	r2, [pc, #460]	; (800a5f8 <tcp_process+0x7cc>)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6013      	str	r3, [r2, #0]
 800a430:	f003 f952 	bl	800d6d8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a434:	e0d2      	b.n	800a5dc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	8b5b      	ldrh	r3, [r3, #26]
 800a43a:	f043 0302 	orr.w	r3, r3, #2
 800a43e:	b29a      	uxth	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2208      	movs	r2, #8
 800a448:	751a      	strb	r2, [r3, #20]
      break;
 800a44a:	e0c7      	b.n	800a5dc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a44c:	4b6b      	ldr	r3, [pc, #428]	; (800a5fc <tcp_process+0x7d0>)
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	f003 0310 	and.w	r3, r3, #16
 800a454:	2b00      	cmp	r3, #0
 800a456:	f000 80c1 	beq.w	800a5dc <tcp_process+0x7b0>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a45e:	4b68      	ldr	r3, [pc, #416]	; (800a600 <tcp_process+0x7d4>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	429a      	cmp	r2, r3
 800a464:	f040 80ba 	bne.w	800a5dc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f040 80b5 	bne.w	800a5dc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2206      	movs	r2, #6
 800a476:	751a      	strb	r2, [r3, #20]
      break;
 800a478:	e0b0      	b.n	800a5dc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f9ca 	bl	800a814 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a480:	4b60      	ldr	r3, [pc, #384]	; (800a604 <tcp_process+0x7d8>)
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	f003 0320 	and.w	r3, r3, #32
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 80a9 	beq.w	800a5e0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	8b5b      	ldrh	r3, [r3, #26]
 800a492:	f043 0302 	orr.w	r3, r3, #2
 800a496:	b29a      	uxth	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7fe fd39 	bl	8008f14 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a4a2:	4b59      	ldr	r3, [pc, #356]	; (800a608 <tcp_process+0x7dc>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d105      	bne.n	800a4b8 <tcp_process+0x68c>
 800a4ac:	4b56      	ldr	r3, [pc, #344]	; (800a608 <tcp_process+0x7dc>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	4a55      	ldr	r2, [pc, #340]	; (800a608 <tcp_process+0x7dc>)
 800a4b4:	6013      	str	r3, [r2, #0]
 800a4b6:	e013      	b.n	800a4e0 <tcp_process+0x6b4>
 800a4b8:	4b53      	ldr	r3, [pc, #332]	; (800a608 <tcp_process+0x7dc>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	613b      	str	r3, [r7, #16]
 800a4be:	e00c      	b.n	800a4da <tcp_process+0x6ae>
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d104      	bne.n	800a4d4 <tcp_process+0x6a8>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	68da      	ldr	r2, [r3, #12]
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	60da      	str	r2, [r3, #12]
 800a4d2:	e005      	b.n	800a4e0 <tcp_process+0x6b4>
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	613b      	str	r3, [r7, #16]
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d1ef      	bne.n	800a4c0 <tcp_process+0x694>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	60da      	str	r2, [r3, #12]
 800a4e6:	4b43      	ldr	r3, [pc, #268]	; (800a5f4 <tcp_process+0x7c8>)
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	220a      	movs	r2, #10
 800a4f0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a4f2:	4b41      	ldr	r3, [pc, #260]	; (800a5f8 <tcp_process+0x7cc>)
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	60da      	str	r2, [r3, #12]
 800a4fa:	4a3f      	ldr	r2, [pc, #252]	; (800a5f8 <tcp_process+0x7cc>)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6013      	str	r3, [r2, #0]
 800a500:	f003 f8ea 	bl	800d6d8 <tcp_timer_needed>
      }
      break;
 800a504:	e06c      	b.n	800a5e0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f984 	bl	800a814 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a50c:	4b3b      	ldr	r3, [pc, #236]	; (800a5fc <tcp_process+0x7d0>)
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	f003 0310 	and.w	r3, r3, #16
 800a514:	2b00      	cmp	r3, #0
 800a516:	d065      	beq.n	800a5e4 <tcp_process+0x7b8>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a51c:	4b38      	ldr	r3, [pc, #224]	; (800a600 <tcp_process+0x7d4>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	429a      	cmp	r2, r3
 800a522:	d15f      	bne.n	800a5e4 <tcp_process+0x7b8>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d15b      	bne.n	800a5e4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f7fe fcf1 	bl	8008f14 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a532:	4b35      	ldr	r3, [pc, #212]	; (800a608 <tcp_process+0x7dc>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d105      	bne.n	800a548 <tcp_process+0x71c>
 800a53c:	4b32      	ldr	r3, [pc, #200]	; (800a608 <tcp_process+0x7dc>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	4a31      	ldr	r2, [pc, #196]	; (800a608 <tcp_process+0x7dc>)
 800a544:	6013      	str	r3, [r2, #0]
 800a546:	e013      	b.n	800a570 <tcp_process+0x744>
 800a548:	4b2f      	ldr	r3, [pc, #188]	; (800a608 <tcp_process+0x7dc>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	60fb      	str	r3, [r7, #12]
 800a54e:	e00c      	b.n	800a56a <tcp_process+0x73e>
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	429a      	cmp	r2, r3
 800a558:	d104      	bne.n	800a564 <tcp_process+0x738>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	68da      	ldr	r2, [r3, #12]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	60da      	str	r2, [r3, #12]
 800a562:	e005      	b.n	800a570 <tcp_process+0x744>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	60fb      	str	r3, [r7, #12]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1ef      	bne.n	800a550 <tcp_process+0x724>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	60da      	str	r2, [r3, #12]
 800a576:	4b1f      	ldr	r3, [pc, #124]	; (800a5f4 <tcp_process+0x7c8>)
 800a578:	2201      	movs	r2, #1
 800a57a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	220a      	movs	r2, #10
 800a580:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a582:	4b1d      	ldr	r3, [pc, #116]	; (800a5f8 <tcp_process+0x7cc>)
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	60da      	str	r2, [r3, #12]
 800a58a:	4a1b      	ldr	r2, [pc, #108]	; (800a5f8 <tcp_process+0x7cc>)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6013      	str	r3, [r2, #0]
 800a590:	f003 f8a2 	bl	800d6d8 <tcp_timer_needed>
      }
      break;
 800a594:	e026      	b.n	800a5e4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 f93c 	bl	800a814 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a59c:	4b17      	ldr	r3, [pc, #92]	; (800a5fc <tcp_process+0x7d0>)
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	f003 0310 	and.w	r3, r3, #16
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d01f      	beq.n	800a5e8 <tcp_process+0x7bc>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a5ac:	4b14      	ldr	r3, [pc, #80]	; (800a600 <tcp_process+0x7d4>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d119      	bne.n	800a5e8 <tcp_process+0x7bc>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d115      	bne.n	800a5e8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a5bc:	4b11      	ldr	r3, [pc, #68]	; (800a604 <tcp_process+0x7d8>)
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	f043 0310 	orr.w	r3, r3, #16
 800a5c4:	b2da      	uxtb	r2, r3
 800a5c6:	4b0f      	ldr	r3, [pc, #60]	; (800a604 <tcp_process+0x7d8>)
 800a5c8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a5ca:	e00d      	b.n	800a5e8 <tcp_process+0x7bc>
    default:
      break;
 800a5cc:	bf00      	nop
 800a5ce:	e00c      	b.n	800a5ea <tcp_process+0x7be>
      break;
 800a5d0:	bf00      	nop
 800a5d2:	e00a      	b.n	800a5ea <tcp_process+0x7be>
      break;
 800a5d4:	bf00      	nop
 800a5d6:	e008      	b.n	800a5ea <tcp_process+0x7be>
      break;
 800a5d8:	bf00      	nop
 800a5da:	e006      	b.n	800a5ea <tcp_process+0x7be>
      break;
 800a5dc:	bf00      	nop
 800a5de:	e004      	b.n	800a5ea <tcp_process+0x7be>
      break;
 800a5e0:	bf00      	nop
 800a5e2:	e002      	b.n	800a5ea <tcp_process+0x7be>
      break;
 800a5e4:	bf00      	nop
 800a5e6:	e000      	b.n	800a5ea <tcp_process+0x7be>
      break;
 800a5e8:	bf00      	nop
  }
  return ERR_OK;
 800a5ea:	2300      	movs	r3, #0
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3724      	adds	r7, #36	; 0x24
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd90      	pop	{r4, r7, pc}
 800a5f4:	2400319c 	.word	0x2400319c
 800a5f8:	24003198 	.word	0x24003198
 800a5fc:	240031cc 	.word	0x240031cc
 800a600:	240031c4 	.word	0x240031c4
 800a604:	240031cd 	.word	0x240031cd
 800a608:	24003194 	.word	0x24003194

0800a60c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a60c:	b590      	push	{r4, r7, lr}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d106      	bne.n	800a62a <tcp_oos_insert_segment+0x1e>
 800a61c:	4b3b      	ldr	r3, [pc, #236]	; (800a70c <tcp_oos_insert_segment+0x100>)
 800a61e:	f240 421f 	movw	r2, #1055	; 0x41f
 800a622:	493b      	ldr	r1, [pc, #236]	; (800a710 <tcp_oos_insert_segment+0x104>)
 800a624:	483b      	ldr	r0, [pc, #236]	; (800a714 <tcp_oos_insert_segment+0x108>)
 800a626:	f005 ff3b 	bl	80104a0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	899b      	ldrh	r3, [r3, #12]
 800a630:	b29b      	uxth	r3, r3
 800a632:	4618      	mov	r0, r3
 800a634:	f7fb f958 	bl	80058e8 <lwip_htons>
 800a638:	4603      	mov	r3, r0
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	f003 0301 	and.w	r3, r3, #1
 800a640:	2b00      	cmp	r3, #0
 800a642:	d028      	beq.n	800a696 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a644:	6838      	ldr	r0, [r7, #0]
 800a646:	f7fe f9b3 	bl	80089b0 <tcp_segs_free>
    next = NULL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	603b      	str	r3, [r7, #0]
 800a64e:	e056      	b.n	800a6fe <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	899b      	ldrh	r3, [r3, #12]
 800a656:	b29b      	uxth	r3, r3
 800a658:	4618      	mov	r0, r3
 800a65a:	f7fb f945 	bl	80058e8 <lwip_htons>
 800a65e:	4603      	mov	r3, r0
 800a660:	b2db      	uxtb	r3, r3
 800a662:	f003 0301 	and.w	r3, r3, #1
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00d      	beq.n	800a686 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	899b      	ldrh	r3, [r3, #12]
 800a670:	b29c      	uxth	r4, r3
 800a672:	2001      	movs	r0, #1
 800a674:	f7fb f938 	bl	80058e8 <lwip_htons>
 800a678:	4603      	mov	r3, r0
 800a67a:	461a      	mov	r2, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	4322      	orrs	r2, r4
 800a682:	b292      	uxth	r2, r2
 800a684:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	f7fe f9a2 	bl	80089da <tcp_seg_free>
    while (next &&
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00e      	beq.n	800a6ba <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	891b      	ldrh	r3, [r3, #8]
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	4b1d      	ldr	r3, [pc, #116]	; (800a718 <tcp_oos_insert_segment+0x10c>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	441a      	add	r2, r3
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	6839      	ldr	r1, [r7, #0]
 800a6b0:	8909      	ldrh	r1, [r1, #8]
 800a6b2:	440b      	add	r3, r1
 800a6b4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	daca      	bge.n	800a650 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d01e      	beq.n	800a6fe <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	891b      	ldrh	r3, [r3, #8]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	4b14      	ldr	r3, [pc, #80]	; (800a718 <tcp_oos_insert_segment+0x10c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	441a      	add	r2, r3
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	dd12      	ble.n	800a6fe <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	4b0d      	ldr	r3, [pc, #52]	; (800a718 <tcp_oos_insert_segment+0x10c>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685a      	ldr	r2, [r3, #4]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	891b      	ldrh	r3, [r3, #8]
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	f7fc fb85 	bl	8006e08 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	683a      	ldr	r2, [r7, #0]
 800a702:	601a      	str	r2, [r3, #0]
}
 800a704:	bf00      	nop
 800a706:	3714      	adds	r7, #20
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd90      	pop	{r4, r7, pc}
 800a70c:	08012b68 	.word	0x08012b68
 800a710:	08012e28 	.word	0x08012e28
 800a714:	08012bb4 	.word	0x08012bb4
 800a718:	240031c0 	.word	0x240031c0

0800a71c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a71c:	b5b0      	push	{r4, r5, r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
 800a728:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a72a:	e03e      	b.n	800a7aa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7fc fd72 	bl	8007224 <pbuf_clen>
 800a740:	4603      	mov	r3, r0
 800a742:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a74a:	8a7a      	ldrh	r2, [r7, #18]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d906      	bls.n	800a75e <tcp_free_acked_segments+0x42>
 800a750:	4b2a      	ldr	r3, [pc, #168]	; (800a7fc <tcp_free_acked_segments+0xe0>)
 800a752:	f240 4257 	movw	r2, #1111	; 0x457
 800a756:	492a      	ldr	r1, [pc, #168]	; (800a800 <tcp_free_acked_segments+0xe4>)
 800a758:	482a      	ldr	r0, [pc, #168]	; (800a804 <tcp_free_acked_segments+0xe8>)
 800a75a:	f005 fea1 	bl	80104a0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800a764:	8a7b      	ldrh	r3, [r7, #18]
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	b29a      	uxth	r2, r3
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	891a      	ldrh	r2, [r3, #8]
 800a774:	4b24      	ldr	r3, [pc, #144]	; (800a808 <tcp_free_acked_segments+0xec>)
 800a776:	881b      	ldrh	r3, [r3, #0]
 800a778:	4413      	add	r3, r2
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	4b22      	ldr	r3, [pc, #136]	; (800a808 <tcp_free_acked_segments+0xec>)
 800a77e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a780:	6978      	ldr	r0, [r7, #20]
 800a782:	f7fe f92a 	bl	80089da <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00c      	beq.n	800a7aa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d109      	bne.n	800a7aa <tcp_free_acked_segments+0x8e>
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d106      	bne.n	800a7aa <tcp_free_acked_segments+0x8e>
 800a79c:	4b17      	ldr	r3, [pc, #92]	; (800a7fc <tcp_free_acked_segments+0xe0>)
 800a79e:	f240 4261 	movw	r2, #1121	; 0x461
 800a7a2:	491a      	ldr	r1, [pc, #104]	; (800a80c <tcp_free_acked_segments+0xf0>)
 800a7a4:	4817      	ldr	r0, [pc, #92]	; (800a804 <tcp_free_acked_segments+0xe8>)
 800a7a6:	f005 fe7b 	bl	80104a0 <iprintf>
  while (seg_list != NULL &&
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d020      	beq.n	800a7f2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7fb f8ab 	bl	8005912 <lwip_htonl>
 800a7bc:	4604      	mov	r4, r0
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	891b      	ldrh	r3, [r3, #8]
 800a7c2:	461d      	mov	r5, r3
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	899b      	ldrh	r3, [r3, #12]
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7fb f88b 	bl	80058e8 <lwip_htons>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	f003 0303 	and.w	r3, r3, #3
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d001      	beq.n	800a7e2 <tcp_free_acked_segments+0xc6>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e000      	b.n	800a7e4 <tcp_free_acked_segments+0xc8>
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	442b      	add	r3, r5
 800a7e6:	18e2      	adds	r2, r4, r3
 800a7e8:	4b09      	ldr	r3, [pc, #36]	; (800a810 <tcp_free_acked_segments+0xf4>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	dd9c      	ble.n	800a72c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a7f2:	68bb      	ldr	r3, [r7, #8]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3718      	adds	r7, #24
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bdb0      	pop	{r4, r5, r7, pc}
 800a7fc:	08012b68 	.word	0x08012b68
 800a800:	08012e50 	.word	0x08012e50
 800a804:	08012bb4 	.word	0x08012bb4
 800a808:	240031c8 	.word	0x240031c8
 800a80c:	08012e78 	.word	0x08012e78
 800a810:	240031c4 	.word	0x240031c4

0800a814 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a814:	b5b0      	push	{r4, r5, r7, lr}
 800a816:	b094      	sub	sp, #80	; 0x50
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a81c:	2300      	movs	r3, #0
 800a81e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d106      	bne.n	800a834 <tcp_receive+0x20>
 800a826:	4b91      	ldr	r3, [pc, #580]	; (800aa6c <tcp_receive+0x258>)
 800a828:	f240 427b 	movw	r2, #1147	; 0x47b
 800a82c:	4990      	ldr	r1, [pc, #576]	; (800aa70 <tcp_receive+0x25c>)
 800a82e:	4891      	ldr	r0, [pc, #580]	; (800aa74 <tcp_receive+0x260>)
 800a830:	f005 fe36 	bl	80104a0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	7d1b      	ldrb	r3, [r3, #20]
 800a838:	2b03      	cmp	r3, #3
 800a83a:	d806      	bhi.n	800a84a <tcp_receive+0x36>
 800a83c:	4b8b      	ldr	r3, [pc, #556]	; (800aa6c <tcp_receive+0x258>)
 800a83e:	f240 427c 	movw	r2, #1148	; 0x47c
 800a842:	498d      	ldr	r1, [pc, #564]	; (800aa78 <tcp_receive+0x264>)
 800a844:	488b      	ldr	r0, [pc, #556]	; (800aa74 <tcp_receive+0x260>)
 800a846:	f005 fe2b 	bl	80104a0 <iprintf>

  if (flags & TCP_ACK) {
 800a84a:	4b8c      	ldr	r3, [pc, #560]	; (800aa7c <tcp_receive+0x268>)
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	f003 0310 	and.w	r3, r3, #16
 800a852:	2b00      	cmp	r3, #0
 800a854:	f000 8264 	beq.w	800ad20 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a85e:	461a      	mov	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a864:	4413      	add	r3, r2
 800a866:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a86c:	4b84      	ldr	r3, [pc, #528]	; (800aa80 <tcp_receive+0x26c>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	1ad3      	subs	r3, r2, r3
 800a872:	2b00      	cmp	r3, #0
 800a874:	db1b      	blt.n	800a8ae <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a87a:	4b81      	ldr	r3, [pc, #516]	; (800aa80 <tcp_receive+0x26c>)
 800a87c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a87e:	429a      	cmp	r2, r3
 800a880:	d106      	bne.n	800a890 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a886:	4b7f      	ldr	r3, [pc, #508]	; (800aa84 <tcp_receive+0x270>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	1ad3      	subs	r3, r2, r3
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	db0e      	blt.n	800a8ae <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a894:	4b7b      	ldr	r3, [pc, #492]	; (800aa84 <tcp_receive+0x270>)
 800a896:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a898:	429a      	cmp	r2, r3
 800a89a:	d125      	bne.n	800a8e8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a89c:	4b7a      	ldr	r3, [pc, #488]	; (800aa88 <tcp_receive+0x274>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	89db      	ldrh	r3, [r3, #14]
 800a8a2:	b29a      	uxth	r2, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d91c      	bls.n	800a8e8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a8ae:	4b76      	ldr	r3, [pc, #472]	; (800aa88 <tcp_receive+0x274>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	89db      	ldrh	r3, [r3, #14]
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d205      	bcs.n	800a8d8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a8d8:	4b69      	ldr	r3, [pc, #420]	; (800aa80 <tcp_receive+0x26c>)
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a8e0:	4b68      	ldr	r3, [pc, #416]	; (800aa84 <tcp_receive+0x270>)
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a8e8:	4b66      	ldr	r3, [pc, #408]	; (800aa84 <tcp_receive+0x270>)
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	dc58      	bgt.n	800a9a8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a8f6:	4b65      	ldr	r3, [pc, #404]	; (800aa8c <tcp_receive+0x278>)
 800a8f8:	881b      	ldrh	r3, [r3, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d14b      	bne.n	800a996 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a908:	4413      	add	r3, r2
 800a90a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d142      	bne.n	800a996 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a916:	2b00      	cmp	r3, #0
 800a918:	db3d      	blt.n	800a996 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a91e:	4b59      	ldr	r3, [pc, #356]	; (800aa84 <tcp_receive+0x270>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	429a      	cmp	r2, r3
 800a924:	d137      	bne.n	800a996 <tcp_receive+0x182>
              found_dupack = 1;
 800a926:	2301      	movs	r3, #1
 800a928:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a930:	2bff      	cmp	r3, #255	; 0xff
 800a932:	d007      	beq.n	800a944 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a93a:	3301      	adds	r3, #1
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a94a:	2b03      	cmp	r3, #3
 800a94c:	d91b      	bls.n	800a986 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a958:	4413      	add	r3, r2
 800a95a:	b29a      	uxth	r2, r3
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a962:	429a      	cmp	r2, r3
 800a964:	d30a      	bcc.n	800a97c <tcp_receive+0x168>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a970:	4413      	add	r3, r2
 800a972:	b29a      	uxth	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a97a:	e004      	b.n	800a986 <tcp_receive+0x172>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a982:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d902      	bls.n	800a996 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f002 fb43 	bl	800d01c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f040 8161 	bne.w	800ac60 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a9a6:	e15b      	b.n	800ac60 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a9a8:	4b36      	ldr	r3, [pc, #216]	; (800aa84 <tcp_receive+0x270>)
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9b0:	1ad3      	subs	r3, r2, r3
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f2c0 814e 	blt.w	800ac56 <tcp_receive+0x442>
 800a9ba:	4b32      	ldr	r3, [pc, #200]	; (800aa84 <tcp_receive+0x270>)
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f300 8146 	bgt.w	800ac56 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	8b5b      	ldrh	r3, [r3, #26]
 800a9ce:	f003 0304 	and.w	r3, r3, #4
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d010      	beq.n	800a9f8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	8b5b      	ldrh	r3, [r3, #26]
 800a9da:	f023 0304 	bic.w	r3, r3, #4
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800aa06:	10db      	asrs	r3, r3, #3
 800aa08:	b21b      	sxth	r3, r3
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	4413      	add	r3, r2
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	b21a      	sxth	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800aa20:	4b18      	ldr	r3, [pc, #96]	; (800aa84 <tcp_receive+0x270>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	b29a      	uxth	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	1ad3      	subs	r3, r2, r3
 800aa2e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800aa38:	4b12      	ldr	r3, [pc, #72]	; (800aa84 <tcp_receive+0x270>)
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	7d1b      	ldrb	r3, [r3, #20]
 800aa44:	2b03      	cmp	r3, #3
 800aa46:	f240 8097 	bls.w	800ab78 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d245      	bcs.n	800aae6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	8b5b      	ldrh	r3, [r3, #26]
 800aa5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d014      	beq.n	800aa90 <tcp_receive+0x27c>
 800aa66:	2301      	movs	r3, #1
 800aa68:	e013      	b.n	800aa92 <tcp_receive+0x27e>
 800aa6a:	bf00      	nop
 800aa6c:	08012b68 	.word	0x08012b68
 800aa70:	08012e98 	.word	0x08012e98
 800aa74:	08012bb4 	.word	0x08012bb4
 800aa78:	08012eb4 	.word	0x08012eb4
 800aa7c:	240031cc 	.word	0x240031cc
 800aa80:	240031c0 	.word	0x240031c0
 800aa84:	240031c4 	.word	0x240031c4
 800aa88:	240031b0 	.word	0x240031b0
 800aa8c:	240031ca 	.word	0x240031ca
 800aa90:	2302      	movs	r3, #2
 800aa92:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800aa96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800aa9a:	b29a      	uxth	r2, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aaa0:	fb12 f303 	smulbb	r3, r2, r3
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	bf28      	it	cs
 800aaac:	4613      	movcs	r3, r2
 800aaae:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aab6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800aab8:	4413      	add	r3, r2
 800aaba:	b29a      	uxth	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d309      	bcc.n	800aada <tcp_receive+0x2c6>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aacc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800aace:	4413      	add	r3, r2
 800aad0:	b29a      	uxth	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800aad8:	e04e      	b.n	800ab78 <tcp_receive+0x364>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aae0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800aae4:	e048      	b.n	800ab78 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800aaec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aaee:	4413      	add	r3, r2
 800aaf0:	b29a      	uxth	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d309      	bcc.n	800ab10 <tcp_receive+0x2fc>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ab02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ab04:	4413      	add	r3, r2
 800ab06:	b29a      	uxth	r2, r3
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ab0e:	e004      	b.n	800ab1a <tcp_receive+0x306>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d326      	bcc.n	800ab78 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ab36:	1ad3      	subs	r3, r2, r3
 800ab38:	b29a      	uxth	r2, r3
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab4a:	4413      	add	r3, r2
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d30a      	bcc.n	800ab6e <tcp_receive+0x35a>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab62:	4413      	add	r3, r2
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ab6c:	e004      	b.n	800ab78 <tcp_receive+0x364>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab74:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab80:	4a98      	ldr	r2, [pc, #608]	; (800ade4 <tcp_receive+0x5d0>)
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f7ff fdca 	bl	800a71c <tcp_free_acked_segments>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab96:	4a94      	ldr	r2, [pc, #592]	; (800ade8 <tcp_receive+0x5d4>)
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f7ff fdbf 	bl	800a71c <tcp_free_acked_segments>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d104      	bne.n	800abb6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abb2:	861a      	strh	r2, [r3, #48]	; 0x30
 800abb4:	e002      	b.n	800abbc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d103      	bne.n	800abd2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800abd8:	4b84      	ldr	r3, [pc, #528]	; (800adec <tcp_receive+0x5d8>)
 800abda:	881b      	ldrh	r3, [r3, #0]
 800abdc:	4413      	add	r3, r2
 800abde:	b29a      	uxth	r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	8b5b      	ldrh	r3, [r3, #26]
 800abea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d035      	beq.n	800ac5e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d118      	bne.n	800ac2c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00c      	beq.n	800ac1c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7fa fe7f 	bl	8005912 <lwip_htonl>
 800ac14:	4603      	mov	r3, r0
 800ac16:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	dc20      	bgt.n	800ac5e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	8b5b      	ldrh	r3, [r3, #26]
 800ac20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac24:	b29a      	uxth	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ac2a:	e018      	b.n	800ac5e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7fa fe6a 	bl	8005912 <lwip_htonl>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	1ae3      	subs	r3, r4, r3
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	dc0b      	bgt.n	800ac5e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	8b5b      	ldrh	r3, [r3, #26]
 800ac4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac4e:	b29a      	uxth	r2, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ac54:	e003      	b.n	800ac5e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f002 fbce 	bl	800d3f8 <tcp_send_empty_ack>
 800ac5c:	e000      	b.n	800ac60 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ac5e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d05b      	beq.n	800ad20 <tcp_receive+0x50c>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac6c:	4b60      	ldr	r3, [pc, #384]	; (800adf0 <tcp_receive+0x5dc>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	1ad3      	subs	r3, r2, r3
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	da54      	bge.n	800ad20 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ac76:	4b5f      	ldr	r3, [pc, #380]	; (800adf4 <tcp_receive+0x5e0>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ac8a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ac94:	10db      	asrs	r3, r3, #3
 800ac96:	b21b      	sxth	r3, r3
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	1ad3      	subs	r3, r2, r3
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800acae:	4413      	add	r3, r2
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	b21a      	sxth	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800acb8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	da05      	bge.n	800accc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800acc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800acc4:	425b      	negs	r3, r3
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800accc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800acd6:	109b      	asrs	r3, r3, #2
 800acd8:	b21b      	sxth	r3, r3
 800acda:	b29b      	uxth	r3, r3
 800acdc:	1ad3      	subs	r3, r2, r3
 800acde:	b29b      	uxth	r3, r3
 800ace0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800acea:	b29a      	uxth	r2, r3
 800acec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800acf0:	4413      	add	r3, r2
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	b21a      	sxth	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ad00:	10db      	asrs	r3, r3, #3
 800ad02:	b21b      	sxth	r3, r3
 800ad04:	b29a      	uxth	r2, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	4413      	add	r3, r2
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	b21a      	sxth	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ad20:	4b35      	ldr	r3, [pc, #212]	; (800adf8 <tcp_receive+0x5e4>)
 800ad22:	881b      	ldrh	r3, [r3, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f000 84e2 	beq.w	800b6ee <tcp_receive+0xeda>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	7d1b      	ldrb	r3, [r3, #20]
 800ad2e:	2b06      	cmp	r3, #6
 800ad30:	f200 84dd 	bhi.w	800b6ee <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad38:	4b30      	ldr	r3, [pc, #192]	; (800adfc <tcp_receive+0x5e8>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	1ad3      	subs	r3, r2, r3
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f2c0 808f 	blt.w	800ae64 <tcp_receive+0x650>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad4a:	4b2b      	ldr	r3, [pc, #172]	; (800adf8 <tcp_receive+0x5e4>)
 800ad4c:	881b      	ldrh	r3, [r3, #0]
 800ad4e:	4619      	mov	r1, r3
 800ad50:	4b2a      	ldr	r3, [pc, #168]	; (800adfc <tcp_receive+0x5e8>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	440b      	add	r3, r1
 800ad56:	1ad3      	subs	r3, r2, r3
 800ad58:	3301      	adds	r3, #1
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	f300 8082 	bgt.w	800ae64 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ad60:	4b27      	ldr	r3, [pc, #156]	; (800ae00 <tcp_receive+0x5ec>)
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad6a:	4b24      	ldr	r3, [pc, #144]	; (800adfc <tcp_receive+0x5e8>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	1ad3      	subs	r3, r2, r3
 800ad70:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ad72:	4b23      	ldr	r3, [pc, #140]	; (800ae00 <tcp_receive+0x5ec>)
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d106      	bne.n	800ad88 <tcp_receive+0x574>
 800ad7a:	4b22      	ldr	r3, [pc, #136]	; (800ae04 <tcp_receive+0x5f0>)
 800ad7c:	f240 5294 	movw	r2, #1428	; 0x594
 800ad80:	4921      	ldr	r1, [pc, #132]	; (800ae08 <tcp_receive+0x5f4>)
 800ad82:	4822      	ldr	r0, [pc, #136]	; (800ae0c <tcp_receive+0x5f8>)
 800ad84:	f005 fb8c 	bl	80104a0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ad88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d906      	bls.n	800ada0 <tcp_receive+0x58c>
 800ad92:	4b1c      	ldr	r3, [pc, #112]	; (800ae04 <tcp_receive+0x5f0>)
 800ad94:	f240 5295 	movw	r2, #1429	; 0x595
 800ad98:	491d      	ldr	r1, [pc, #116]	; (800ae10 <tcp_receive+0x5fc>)
 800ad9a:	481c      	ldr	r0, [pc, #112]	; (800ae0c <tcp_receive+0x5f8>)
 800ad9c:	f005 fb80 	bl	80104a0 <iprintf>
      off = (u16_t)off32;
 800ada0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ada6:	4b16      	ldr	r3, [pc, #88]	; (800ae00 <tcp_receive+0x5ec>)
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	891b      	ldrh	r3, [r3, #8]
 800adac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d906      	bls.n	800adc2 <tcp_receive+0x5ae>
 800adb4:	4b13      	ldr	r3, [pc, #76]	; (800ae04 <tcp_receive+0x5f0>)
 800adb6:	f240 5297 	movw	r2, #1431	; 0x597
 800adba:	4916      	ldr	r1, [pc, #88]	; (800ae14 <tcp_receive+0x600>)
 800adbc:	4813      	ldr	r0, [pc, #76]	; (800ae0c <tcp_receive+0x5f8>)
 800adbe:	f005 fb6f 	bl	80104a0 <iprintf>
      inseg.len -= off;
 800adc2:	4b0f      	ldr	r3, [pc, #60]	; (800ae00 <tcp_receive+0x5ec>)
 800adc4:	891a      	ldrh	r2, [r3, #8]
 800adc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800adca:	1ad3      	subs	r3, r2, r3
 800adcc:	b29a      	uxth	r2, r3
 800adce:	4b0c      	ldr	r3, [pc, #48]	; (800ae00 <tcp_receive+0x5ec>)
 800add0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800add2:	4b0b      	ldr	r3, [pc, #44]	; (800ae00 <tcp_receive+0x5ec>)
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	891a      	ldrh	r2, [r3, #8]
 800add8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ade0:	e02a      	b.n	800ae38 <tcp_receive+0x624>
 800ade2:	bf00      	nop
 800ade4:	08012ed0 	.word	0x08012ed0
 800ade8:	08012ed8 	.word	0x08012ed8
 800adec:	240031c8 	.word	0x240031c8
 800adf0:	240031c4 	.word	0x240031c4
 800adf4:	24003188 	.word	0x24003188
 800adf8:	240031ca 	.word	0x240031ca
 800adfc:	240031c0 	.word	0x240031c0
 800ae00:	240031a0 	.word	0x240031a0
 800ae04:	08012b68 	.word	0x08012b68
 800ae08:	08012ee0 	.word	0x08012ee0
 800ae0c:	08012bb4 	.word	0x08012bb4
 800ae10:	08012ef0 	.word	0x08012ef0
 800ae14:	08012f00 	.word	0x08012f00
        off -= p->len;
 800ae18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae1a:	895b      	ldrh	r3, [r3, #10]
 800ae1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ae26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae28:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ae2a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ae2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae2e:	2200      	movs	r2, #0
 800ae30:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ae32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ae38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae3a:	895b      	ldrh	r3, [r3, #10]
 800ae3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d8e9      	bhi.n	800ae18 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ae44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ae48:	4619      	mov	r1, r3
 800ae4a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ae4c:	f7fc f8dc 	bl	8007008 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae54:	4a91      	ldr	r2, [pc, #580]	; (800b09c <tcp_receive+0x888>)
 800ae56:	6013      	str	r3, [r2, #0]
 800ae58:	4b91      	ldr	r3, [pc, #580]	; (800b0a0 <tcp_receive+0x88c>)
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	4a8f      	ldr	r2, [pc, #572]	; (800b09c <tcp_receive+0x888>)
 800ae5e:	6812      	ldr	r2, [r2, #0]
 800ae60:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ae62:	e00d      	b.n	800ae80 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ae64:	4b8d      	ldr	r3, [pc, #564]	; (800b09c <tcp_receive+0x888>)
 800ae66:	681a      	ldr	r2, [r3, #0]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6c:	1ad3      	subs	r3, r2, r3
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	da06      	bge.n	800ae80 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	8b5b      	ldrh	r3, [r3, #26]
 800ae76:	f043 0302 	orr.w	r3, r3, #2
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ae80:	4b86      	ldr	r3, [pc, #536]	; (800b09c <tcp_receive+0x888>)
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae88:	1ad3      	subs	r3, r2, r3
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f2c0 842a 	blt.w	800b6e4 <tcp_receive+0xed0>
 800ae90:	4b82      	ldr	r3, [pc, #520]	; (800b09c <tcp_receive+0x888>)
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae98:	6879      	ldr	r1, [r7, #4]
 800ae9a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae9c:	440b      	add	r3, r1
 800ae9e:	1ad3      	subs	r3, r2, r3
 800aea0:	3301      	adds	r3, #1
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f300 841e 	bgt.w	800b6e4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aeac:	4b7b      	ldr	r3, [pc, #492]	; (800b09c <tcp_receive+0x888>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	f040 829a 	bne.w	800b3ea <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800aeb6:	4b7a      	ldr	r3, [pc, #488]	; (800b0a0 <tcp_receive+0x88c>)
 800aeb8:	891c      	ldrh	r4, [r3, #8]
 800aeba:	4b79      	ldr	r3, [pc, #484]	; (800b0a0 <tcp_receive+0x88c>)
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	899b      	ldrh	r3, [r3, #12]
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fa fd10 	bl	80058e8 <lwip_htons>
 800aec8:	4603      	mov	r3, r0
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	f003 0303 	and.w	r3, r3, #3
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d001      	beq.n	800aed8 <tcp_receive+0x6c4>
 800aed4:	2301      	movs	r3, #1
 800aed6:	e000      	b.n	800aeda <tcp_receive+0x6c6>
 800aed8:	2300      	movs	r3, #0
 800aeda:	4423      	add	r3, r4
 800aedc:	b29a      	uxth	r2, r3
 800aede:	4b71      	ldr	r3, [pc, #452]	; (800b0a4 <tcp_receive+0x890>)
 800aee0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aee6:	4b6f      	ldr	r3, [pc, #444]	; (800b0a4 <tcp_receive+0x890>)
 800aee8:	881b      	ldrh	r3, [r3, #0]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d275      	bcs.n	800afda <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aeee:	4b6c      	ldr	r3, [pc, #432]	; (800b0a0 <tcp_receive+0x88c>)
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	899b      	ldrh	r3, [r3, #12]
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7fa fcf6 	bl	80058e8 <lwip_htons>
 800aefc:	4603      	mov	r3, r0
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	f003 0301 	and.w	r3, r3, #1
 800af04:	2b00      	cmp	r3, #0
 800af06:	d01f      	beq.n	800af48 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800af08:	4b65      	ldr	r3, [pc, #404]	; (800b0a0 <tcp_receive+0x88c>)
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	899b      	ldrh	r3, [r3, #12]
 800af0e:	b29b      	uxth	r3, r3
 800af10:	b21b      	sxth	r3, r3
 800af12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800af16:	b21c      	sxth	r4, r3
 800af18:	4b61      	ldr	r3, [pc, #388]	; (800b0a0 <tcp_receive+0x88c>)
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	899b      	ldrh	r3, [r3, #12]
 800af1e:	b29b      	uxth	r3, r3
 800af20:	4618      	mov	r0, r3
 800af22:	f7fa fce1 	bl	80058e8 <lwip_htons>
 800af26:	4603      	mov	r3, r0
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800af30:	b29b      	uxth	r3, r3
 800af32:	4618      	mov	r0, r3
 800af34:	f7fa fcd8 	bl	80058e8 <lwip_htons>
 800af38:	4603      	mov	r3, r0
 800af3a:	b21b      	sxth	r3, r3
 800af3c:	4323      	orrs	r3, r4
 800af3e:	b21a      	sxth	r2, r3
 800af40:	4b57      	ldr	r3, [pc, #348]	; (800b0a0 <tcp_receive+0x88c>)
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	b292      	uxth	r2, r2
 800af46:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800af4c:	4b54      	ldr	r3, [pc, #336]	; (800b0a0 <tcp_receive+0x88c>)
 800af4e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800af50:	4b53      	ldr	r3, [pc, #332]	; (800b0a0 <tcp_receive+0x88c>)
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	899b      	ldrh	r3, [r3, #12]
 800af56:	b29b      	uxth	r3, r3
 800af58:	4618      	mov	r0, r3
 800af5a:	f7fa fcc5 	bl	80058e8 <lwip_htons>
 800af5e:	4603      	mov	r3, r0
 800af60:	b2db      	uxtb	r3, r3
 800af62:	f003 0302 	and.w	r3, r3, #2
 800af66:	2b00      	cmp	r3, #0
 800af68:	d005      	beq.n	800af76 <tcp_receive+0x762>
            inseg.len -= 1;
 800af6a:	4b4d      	ldr	r3, [pc, #308]	; (800b0a0 <tcp_receive+0x88c>)
 800af6c:	891b      	ldrh	r3, [r3, #8]
 800af6e:	3b01      	subs	r3, #1
 800af70:	b29a      	uxth	r2, r3
 800af72:	4b4b      	ldr	r3, [pc, #300]	; (800b0a0 <tcp_receive+0x88c>)
 800af74:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800af76:	4b4a      	ldr	r3, [pc, #296]	; (800b0a0 <tcp_receive+0x88c>)
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	4a49      	ldr	r2, [pc, #292]	; (800b0a0 <tcp_receive+0x88c>)
 800af7c:	8912      	ldrh	r2, [r2, #8]
 800af7e:	4611      	mov	r1, r2
 800af80:	4618      	mov	r0, r3
 800af82:	f7fb ff41 	bl	8006e08 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800af86:	4b46      	ldr	r3, [pc, #280]	; (800b0a0 <tcp_receive+0x88c>)
 800af88:	891c      	ldrh	r4, [r3, #8]
 800af8a:	4b45      	ldr	r3, [pc, #276]	; (800b0a0 <tcp_receive+0x88c>)
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	899b      	ldrh	r3, [r3, #12]
 800af90:	b29b      	uxth	r3, r3
 800af92:	4618      	mov	r0, r3
 800af94:	f7fa fca8 	bl	80058e8 <lwip_htons>
 800af98:	4603      	mov	r3, r0
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	f003 0303 	and.w	r3, r3, #3
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d001      	beq.n	800afa8 <tcp_receive+0x794>
 800afa4:	2301      	movs	r3, #1
 800afa6:	e000      	b.n	800afaa <tcp_receive+0x796>
 800afa8:	2300      	movs	r3, #0
 800afaa:	4423      	add	r3, r4
 800afac:	b29a      	uxth	r2, r3
 800afae:	4b3d      	ldr	r3, [pc, #244]	; (800b0a4 <tcp_receive+0x890>)
 800afb0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800afb2:	4b3c      	ldr	r3, [pc, #240]	; (800b0a4 <tcp_receive+0x890>)
 800afb4:	881b      	ldrh	r3, [r3, #0]
 800afb6:	461a      	mov	r2, r3
 800afb8:	4b38      	ldr	r3, [pc, #224]	; (800b09c <tcp_receive+0x888>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	441a      	add	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc2:	6879      	ldr	r1, [r7, #4]
 800afc4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800afc6:	440b      	add	r3, r1
 800afc8:	429a      	cmp	r2, r3
 800afca:	d006      	beq.n	800afda <tcp_receive+0x7c6>
 800afcc:	4b36      	ldr	r3, [pc, #216]	; (800b0a8 <tcp_receive+0x894>)
 800afce:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800afd2:	4936      	ldr	r1, [pc, #216]	; (800b0ac <tcp_receive+0x898>)
 800afd4:	4836      	ldr	r0, [pc, #216]	; (800b0b0 <tcp_receive+0x89c>)
 800afd6:	f005 fa63 	bl	80104a0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afde:	2b00      	cmp	r3, #0
 800afe0:	f000 80e7 	beq.w	800b1b2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800afe4:	4b2e      	ldr	r3, [pc, #184]	; (800b0a0 <tcp_receive+0x88c>)
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	899b      	ldrh	r3, [r3, #12]
 800afea:	b29b      	uxth	r3, r3
 800afec:	4618      	mov	r0, r3
 800afee:	f7fa fc7b 	bl	80058e8 <lwip_htons>
 800aff2:	4603      	mov	r3, r0
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	f003 0301 	and.w	r3, r3, #1
 800affa:	2b00      	cmp	r3, #0
 800affc:	d010      	beq.n	800b020 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800affe:	e00a      	b.n	800b016 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b004:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f7fd fce2 	bl	80089da <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d1f0      	bne.n	800b000 <tcp_receive+0x7ec>
 800b01e:	e0c8      	b.n	800b1b2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b024:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b026:	e052      	b.n	800b0ce <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	899b      	ldrh	r3, [r3, #12]
 800b02e:	b29b      	uxth	r3, r3
 800b030:	4618      	mov	r0, r3
 800b032:	f7fa fc59 	bl	80058e8 <lwip_htons>
 800b036:	4603      	mov	r3, r0
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	f003 0301 	and.w	r3, r3, #1
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d03d      	beq.n	800b0be <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b042:	4b17      	ldr	r3, [pc, #92]	; (800b0a0 <tcp_receive+0x88c>)
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	899b      	ldrh	r3, [r3, #12]
 800b048:	b29b      	uxth	r3, r3
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7fa fc4c 	bl	80058e8 <lwip_htons>
 800b050:	4603      	mov	r3, r0
 800b052:	b2db      	uxtb	r3, r3
 800b054:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d130      	bne.n	800b0be <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b05c:	4b10      	ldr	r3, [pc, #64]	; (800b0a0 <tcp_receive+0x88c>)
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	899b      	ldrh	r3, [r3, #12]
 800b062:	b29c      	uxth	r4, r3
 800b064:	2001      	movs	r0, #1
 800b066:	f7fa fc3f 	bl	80058e8 <lwip_htons>
 800b06a:	4603      	mov	r3, r0
 800b06c:	461a      	mov	r2, r3
 800b06e:	4b0c      	ldr	r3, [pc, #48]	; (800b0a0 <tcp_receive+0x88c>)
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	4322      	orrs	r2, r4
 800b074:	b292      	uxth	r2, r2
 800b076:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b078:	4b09      	ldr	r3, [pc, #36]	; (800b0a0 <tcp_receive+0x88c>)
 800b07a:	891c      	ldrh	r4, [r3, #8]
 800b07c:	4b08      	ldr	r3, [pc, #32]	; (800b0a0 <tcp_receive+0x88c>)
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	899b      	ldrh	r3, [r3, #12]
 800b082:	b29b      	uxth	r3, r3
 800b084:	4618      	mov	r0, r3
 800b086:	f7fa fc2f 	bl	80058e8 <lwip_htons>
 800b08a:	4603      	mov	r3, r0
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	f003 0303 	and.w	r3, r3, #3
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00e      	beq.n	800b0b4 <tcp_receive+0x8a0>
 800b096:	2301      	movs	r3, #1
 800b098:	e00d      	b.n	800b0b6 <tcp_receive+0x8a2>
 800b09a:	bf00      	nop
 800b09c:	240031c0 	.word	0x240031c0
 800b0a0:	240031a0 	.word	0x240031a0
 800b0a4:	240031ca 	.word	0x240031ca
 800b0a8:	08012b68 	.word	0x08012b68
 800b0ac:	08012f10 	.word	0x08012f10
 800b0b0:	08012bb4 	.word	0x08012bb4
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	4423      	add	r3, r4
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	4b98      	ldr	r3, [pc, #608]	; (800b31c <tcp_receive+0xb08>)
 800b0bc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b0be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0c0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b0c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800b0c8:	6938      	ldr	r0, [r7, #16]
 800b0ca:	f7fd fc86 	bl	80089da <tcp_seg_free>
            while (next &&
 800b0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00e      	beq.n	800b0f2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b0d4:	4b91      	ldr	r3, [pc, #580]	; (800b31c <tcp_receive+0xb08>)
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	461a      	mov	r2, r3
 800b0da:	4b91      	ldr	r3, [pc, #580]	; (800b320 <tcp_receive+0xb0c>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	441a      	add	r2, r3
 800b0e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b0e8:	8909      	ldrh	r1, [r1, #8]
 800b0ea:	440b      	add	r3, r1
 800b0ec:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	da9a      	bge.n	800b028 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d059      	beq.n	800b1ac <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800b0f8:	4b88      	ldr	r3, [pc, #544]	; (800b31c <tcp_receive+0xb08>)
 800b0fa:	881b      	ldrh	r3, [r3, #0]
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	4b88      	ldr	r3, [pc, #544]	; (800b320 <tcp_receive+0xb0c>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	441a      	add	r2, r3
 800b104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	dd4d      	ble.n	800b1ac <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	b29a      	uxth	r2, r3
 800b118:	4b81      	ldr	r3, [pc, #516]	; (800b320 <tcp_receive+0xb0c>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	1ad3      	subs	r3, r2, r3
 800b120:	b29a      	uxth	r2, r3
 800b122:	4b80      	ldr	r3, [pc, #512]	; (800b324 <tcp_receive+0xb10>)
 800b124:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b126:	4b7f      	ldr	r3, [pc, #508]	; (800b324 <tcp_receive+0xb10>)
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	899b      	ldrh	r3, [r3, #12]
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	4618      	mov	r0, r3
 800b130:	f7fa fbda 	bl	80058e8 <lwip_htons>
 800b134:	4603      	mov	r3, r0
 800b136:	b2db      	uxtb	r3, r3
 800b138:	f003 0302 	and.w	r3, r3, #2
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d005      	beq.n	800b14c <tcp_receive+0x938>
                inseg.len -= 1;
 800b140:	4b78      	ldr	r3, [pc, #480]	; (800b324 <tcp_receive+0xb10>)
 800b142:	891b      	ldrh	r3, [r3, #8]
 800b144:	3b01      	subs	r3, #1
 800b146:	b29a      	uxth	r2, r3
 800b148:	4b76      	ldr	r3, [pc, #472]	; (800b324 <tcp_receive+0xb10>)
 800b14a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b14c:	4b75      	ldr	r3, [pc, #468]	; (800b324 <tcp_receive+0xb10>)
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	4a74      	ldr	r2, [pc, #464]	; (800b324 <tcp_receive+0xb10>)
 800b152:	8912      	ldrh	r2, [r2, #8]
 800b154:	4611      	mov	r1, r2
 800b156:	4618      	mov	r0, r3
 800b158:	f7fb fe56 	bl	8006e08 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b15c:	4b71      	ldr	r3, [pc, #452]	; (800b324 <tcp_receive+0xb10>)
 800b15e:	891c      	ldrh	r4, [r3, #8]
 800b160:	4b70      	ldr	r3, [pc, #448]	; (800b324 <tcp_receive+0xb10>)
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	899b      	ldrh	r3, [r3, #12]
 800b166:	b29b      	uxth	r3, r3
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fa fbbd 	bl	80058e8 <lwip_htons>
 800b16e:	4603      	mov	r3, r0
 800b170:	b2db      	uxtb	r3, r3
 800b172:	f003 0303 	and.w	r3, r3, #3
 800b176:	2b00      	cmp	r3, #0
 800b178:	d001      	beq.n	800b17e <tcp_receive+0x96a>
 800b17a:	2301      	movs	r3, #1
 800b17c:	e000      	b.n	800b180 <tcp_receive+0x96c>
 800b17e:	2300      	movs	r3, #0
 800b180:	4423      	add	r3, r4
 800b182:	b29a      	uxth	r2, r3
 800b184:	4b65      	ldr	r3, [pc, #404]	; (800b31c <tcp_receive+0xb08>)
 800b186:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b188:	4b64      	ldr	r3, [pc, #400]	; (800b31c <tcp_receive+0xb08>)
 800b18a:	881b      	ldrh	r3, [r3, #0]
 800b18c:	461a      	mov	r2, r3
 800b18e:	4b64      	ldr	r3, [pc, #400]	; (800b320 <tcp_receive+0xb0c>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	441a      	add	r2, r3
 800b194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d006      	beq.n	800b1ac <tcp_receive+0x998>
 800b19e:	4b62      	ldr	r3, [pc, #392]	; (800b328 <tcp_receive+0xb14>)
 800b1a0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800b1a4:	4961      	ldr	r1, [pc, #388]	; (800b32c <tcp_receive+0xb18>)
 800b1a6:	4862      	ldr	r0, [pc, #392]	; (800b330 <tcp_receive+0xb1c>)
 800b1a8:	f005 f97a 	bl	80104a0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b1b0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b1b2:	4b5a      	ldr	r3, [pc, #360]	; (800b31c <tcp_receive+0xb08>)
 800b1b4:	881b      	ldrh	r3, [r3, #0]
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	4b59      	ldr	r3, [pc, #356]	; (800b320 <tcp_receive+0xb0c>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	441a      	add	r2, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b1c6:	4b55      	ldr	r3, [pc, #340]	; (800b31c <tcp_receive+0xb08>)
 800b1c8:	881b      	ldrh	r3, [r3, #0]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d206      	bcs.n	800b1dc <tcp_receive+0x9c8>
 800b1ce:	4b56      	ldr	r3, [pc, #344]	; (800b328 <tcp_receive+0xb14>)
 800b1d0:	f240 6207 	movw	r2, #1543	; 0x607
 800b1d4:	4957      	ldr	r1, [pc, #348]	; (800b334 <tcp_receive+0xb20>)
 800b1d6:	4856      	ldr	r0, [pc, #344]	; (800b330 <tcp_receive+0xb1c>)
 800b1d8:	f005 f962 	bl	80104a0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b1e0:	4b4e      	ldr	r3, [pc, #312]	; (800b31c <tcp_receive+0xb08>)
 800b1e2:	881b      	ldrh	r3, [r3, #0]
 800b1e4:	1ad3      	subs	r3, r2, r3
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f7fc fdb7 	bl	8007d60 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b1f2:	4b4c      	ldr	r3, [pc, #304]	; (800b324 <tcp_receive+0xb10>)
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	891b      	ldrh	r3, [r3, #8]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d006      	beq.n	800b20a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800b1fc:	4b49      	ldr	r3, [pc, #292]	; (800b324 <tcp_receive+0xb10>)
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	4a4d      	ldr	r2, [pc, #308]	; (800b338 <tcp_receive+0xb24>)
 800b202:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b204:	4b47      	ldr	r3, [pc, #284]	; (800b324 <tcp_receive+0xb10>)
 800b206:	2200      	movs	r2, #0
 800b208:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b20a:	4b46      	ldr	r3, [pc, #280]	; (800b324 <tcp_receive+0xb10>)
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	899b      	ldrh	r3, [r3, #12]
 800b210:	b29b      	uxth	r3, r3
 800b212:	4618      	mov	r0, r3
 800b214:	f7fa fb68 	bl	80058e8 <lwip_htons>
 800b218:	4603      	mov	r3, r0
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	f003 0301 	and.w	r3, r3, #1
 800b220:	2b00      	cmp	r3, #0
 800b222:	f000 80b8 	beq.w	800b396 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b226:	4b45      	ldr	r3, [pc, #276]	; (800b33c <tcp_receive+0xb28>)
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	f043 0320 	orr.w	r3, r3, #32
 800b22e:	b2da      	uxtb	r2, r3
 800b230:	4b42      	ldr	r3, [pc, #264]	; (800b33c <tcp_receive+0xb28>)
 800b232:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b234:	e0af      	b.n	800b396 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b23a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	4a36      	ldr	r2, [pc, #216]	; (800b320 <tcp_receive+0xb0c>)
 800b246:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	891b      	ldrh	r3, [r3, #8]
 800b24c:	461c      	mov	r4, r3
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	899b      	ldrh	r3, [r3, #12]
 800b254:	b29b      	uxth	r3, r3
 800b256:	4618      	mov	r0, r3
 800b258:	f7fa fb46 	bl	80058e8 <lwip_htons>
 800b25c:	4603      	mov	r3, r0
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	f003 0303 	and.w	r3, r3, #3
 800b264:	2b00      	cmp	r3, #0
 800b266:	d001      	beq.n	800b26c <tcp_receive+0xa58>
 800b268:	2301      	movs	r3, #1
 800b26a:	e000      	b.n	800b26e <tcp_receive+0xa5a>
 800b26c:	2300      	movs	r3, #0
 800b26e:	191a      	adds	r2, r3, r4
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b274:	441a      	add	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b27e:	461c      	mov	r4, r3
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	891b      	ldrh	r3, [r3, #8]
 800b284:	461d      	mov	r5, r3
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	899b      	ldrh	r3, [r3, #12]
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	4618      	mov	r0, r3
 800b290:	f7fa fb2a 	bl	80058e8 <lwip_htons>
 800b294:	4603      	mov	r3, r0
 800b296:	b2db      	uxtb	r3, r3
 800b298:	f003 0303 	and.w	r3, r3, #3
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d001      	beq.n	800b2a4 <tcp_receive+0xa90>
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e000      	b.n	800b2a6 <tcp_receive+0xa92>
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	442b      	add	r3, r5
 800b2a8:	429c      	cmp	r4, r3
 800b2aa:	d206      	bcs.n	800b2ba <tcp_receive+0xaa6>
 800b2ac:	4b1e      	ldr	r3, [pc, #120]	; (800b328 <tcp_receive+0xb14>)
 800b2ae:	f240 622b 	movw	r2, #1579	; 0x62b
 800b2b2:	4923      	ldr	r1, [pc, #140]	; (800b340 <tcp_receive+0xb2c>)
 800b2b4:	481e      	ldr	r0, [pc, #120]	; (800b330 <tcp_receive+0xb1c>)
 800b2b6:	f005 f8f3 	bl	80104a0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	891b      	ldrh	r3, [r3, #8]
 800b2be:	461c      	mov	r4, r3
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	899b      	ldrh	r3, [r3, #12]
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7fa fb0d 	bl	80058e8 <lwip_htons>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	f003 0303 	and.w	r3, r3, #3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d001      	beq.n	800b2de <tcp_receive+0xaca>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e000      	b.n	800b2e0 <tcp_receive+0xacc>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	1919      	adds	r1, r3, r4
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b2e6:	b28b      	uxth	r3, r1
 800b2e8:	1ad3      	subs	r3, r2, r3
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f7fc fd35 	bl	8007d60 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	891b      	ldrh	r3, [r3, #8]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d028      	beq.n	800b352 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b300:	4b0d      	ldr	r3, [pc, #52]	; (800b338 <tcp_receive+0xb24>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d01d      	beq.n	800b344 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800b308:	4b0b      	ldr	r3, [pc, #44]	; (800b338 <tcp_receive+0xb24>)
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	4619      	mov	r1, r3
 800b312:	4610      	mov	r0, r2
 800b314:	f7fb ffc0 	bl	8007298 <pbuf_cat>
 800b318:	e018      	b.n	800b34c <tcp_receive+0xb38>
 800b31a:	bf00      	nop
 800b31c:	240031ca 	.word	0x240031ca
 800b320:	240031c0 	.word	0x240031c0
 800b324:	240031a0 	.word	0x240031a0
 800b328:	08012b68 	.word	0x08012b68
 800b32c:	08012f48 	.word	0x08012f48
 800b330:	08012bb4 	.word	0x08012bb4
 800b334:	08012f84 	.word	0x08012f84
 800b338:	240031d0 	.word	0x240031d0
 800b33c:	240031cd 	.word	0x240031cd
 800b340:	08012fa4 	.word	0x08012fa4
            } else {
              recv_data = cseg->p;
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	4a70      	ldr	r2, [pc, #448]	; (800b50c <tcp_receive+0xcf8>)
 800b34a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	2200      	movs	r2, #0
 800b350:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	899b      	ldrh	r3, [r3, #12]
 800b358:	b29b      	uxth	r3, r3
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fa fac4 	bl	80058e8 <lwip_htons>
 800b360:	4603      	mov	r3, r0
 800b362:	b2db      	uxtb	r3, r3
 800b364:	f003 0301 	and.w	r3, r3, #1
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d00d      	beq.n	800b388 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b36c:	4b68      	ldr	r3, [pc, #416]	; (800b510 <tcp_receive+0xcfc>)
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	f043 0320 	orr.w	r3, r3, #32
 800b374:	b2da      	uxtb	r2, r3
 800b376:	4b66      	ldr	r3, [pc, #408]	; (800b510 <tcp_receive+0xcfc>)
 800b378:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	7d1b      	ldrb	r3, [r3, #20]
 800b37e:	2b04      	cmp	r3, #4
 800b380:	d102      	bne.n	800b388 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2207      	movs	r2, #7
 800b386:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800b390:	68b8      	ldr	r0, [r7, #8]
 800b392:	f7fd fb22 	bl	80089da <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d008      	beq.n	800b3b0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	685a      	ldr	r2, [r3, #4]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	f43f af43 	beq.w	800b236 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	8b5b      	ldrh	r3, [r3, #26]
 800b3b4:	f003 0301 	and.w	r3, r3, #1
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00e      	beq.n	800b3da <tcp_receive+0xbc6>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	8b5b      	ldrh	r3, [r3, #26]
 800b3c0:	f023 0301 	bic.w	r3, r3, #1
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	835a      	strh	r2, [r3, #26]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	8b5b      	ldrh	r3, [r3, #26]
 800b3ce:	f043 0302 	orr.w	r3, r3, #2
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b3d8:	e188      	b.n	800b6ec <tcp_receive+0xed8>
        tcp_ack(pcb);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	8b5b      	ldrh	r3, [r3, #26]
 800b3de:	f043 0301 	orr.w	r3, r3, #1
 800b3e2:	b29a      	uxth	r2, r3
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b3e8:	e180      	b.n	800b6ec <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d106      	bne.n	800b400 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b3f2:	4848      	ldr	r0, [pc, #288]	; (800b514 <tcp_receive+0xd00>)
 800b3f4:	f7fd fb0a 	bl	8008a0c <tcp_seg_copy>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	675a      	str	r2, [r3, #116]	; 0x74
 800b3fe:	e16d      	b.n	800b6dc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b400:	2300      	movs	r3, #0
 800b402:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b408:	63bb      	str	r3, [r7, #56]	; 0x38
 800b40a:	e157      	b.n	800b6bc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800b40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	685a      	ldr	r2, [r3, #4]
 800b412:	4b41      	ldr	r3, [pc, #260]	; (800b518 <tcp_receive+0xd04>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	429a      	cmp	r2, r3
 800b418:	d11d      	bne.n	800b456 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b41a:	4b3e      	ldr	r3, [pc, #248]	; (800b514 <tcp_receive+0xd00>)
 800b41c:	891a      	ldrh	r2, [r3, #8]
 800b41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b420:	891b      	ldrh	r3, [r3, #8]
 800b422:	429a      	cmp	r2, r3
 800b424:	f240 814f 	bls.w	800b6c6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b428:	483a      	ldr	r0, [pc, #232]	; (800b514 <tcp_receive+0xd00>)
 800b42a:	f7fd faef 	bl	8008a0c <tcp_seg_copy>
 800b42e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	2b00      	cmp	r3, #0
 800b434:	f000 8149 	beq.w	800b6ca <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800b438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d003      	beq.n	800b446 <tcp_receive+0xc32>
                    prev->next = cseg;
 800b43e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b440:	697a      	ldr	r2, [r7, #20]
 800b442:	601a      	str	r2, [r3, #0]
 800b444:	e002      	b.n	800b44c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	697a      	ldr	r2, [r7, #20]
 800b44a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b44c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b44e:	6978      	ldr	r0, [r7, #20]
 800b450:	f7ff f8dc 	bl	800a60c <tcp_oos_insert_segment>
                }
                break;
 800b454:	e139      	b.n	800b6ca <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d117      	bne.n	800b48c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b45c:	4b2e      	ldr	r3, [pc, #184]	; (800b518 <tcp_receive+0xd04>)
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	1ad3      	subs	r3, r2, r3
 800b468:	2b00      	cmp	r3, #0
 800b46a:	da57      	bge.n	800b51c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b46c:	4829      	ldr	r0, [pc, #164]	; (800b514 <tcp_receive+0xd00>)
 800b46e:	f7fd facd 	bl	8008a0c <tcp_seg_copy>
 800b472:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	2b00      	cmp	r3, #0
 800b478:	f000 8129 	beq.w	800b6ce <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	69ba      	ldr	r2, [r7, #24]
 800b480:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b482:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b484:	69b8      	ldr	r0, [r7, #24]
 800b486:	f7ff f8c1 	bl	800a60c <tcp_oos_insert_segment>
                  }
                  break;
 800b48a:	e120      	b.n	800b6ce <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b48c:	4b22      	ldr	r3, [pc, #136]	; (800b518 <tcp_receive+0xd04>)
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	1ad3      	subs	r3, r2, r3
 800b498:	3b01      	subs	r3, #1
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	db3e      	blt.n	800b51c <tcp_receive+0xd08>
 800b49e:	4b1e      	ldr	r3, [pc, #120]	; (800b518 <tcp_receive+0xd04>)
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	1ad3      	subs	r3, r2, r3
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	dc35      	bgt.n	800b51c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b4b0:	4818      	ldr	r0, [pc, #96]	; (800b514 <tcp_receive+0xd00>)
 800b4b2:	f7fd faab 	bl	8008a0c <tcp_seg_copy>
 800b4b6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	f000 8109 	beq.w	800b6d2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4c2:	68db      	ldr	r3, [r3, #12]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4c8:	8912      	ldrh	r2, [r2, #8]
 800b4ca:	441a      	add	r2, r3
 800b4cc:	4b12      	ldr	r3, [pc, #72]	; (800b518 <tcp_receive+0xd04>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	1ad3      	subs	r3, r2, r3
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	dd12      	ble.n	800b4fc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b4d6:	4b10      	ldr	r3, [pc, #64]	; (800b518 <tcp_receive+0xd04>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	b29a      	uxth	r2, r3
 800b4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4de:	68db      	ldr	r3, [r3, #12]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	1ad3      	subs	r3, r2, r3
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ea:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b4ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ee:	685a      	ldr	r2, [r3, #4]
 800b4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4f2:	891b      	ldrh	r3, [r3, #8]
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	4610      	mov	r0, r2
 800b4f8:	f7fb fc86 	bl	8006e08 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4fe:	69fa      	ldr	r2, [r7, #28]
 800b500:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b502:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b504:	69f8      	ldr	r0, [r7, #28]
 800b506:	f7ff f881 	bl	800a60c <tcp_oos_insert_segment>
                  }
                  break;
 800b50a:	e0e2      	b.n	800b6d2 <tcp_receive+0xebe>
 800b50c:	240031d0 	.word	0x240031d0
 800b510:	240031cd 	.word	0x240031cd
 800b514:	240031a0 	.word	0x240031a0
 800b518:	240031c0 	.word	0x240031c0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800b51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	f040 80c6 	bne.w	800b6b6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b52a:	4b80      	ldr	r3, [pc, #512]	; (800b72c <tcp_receive+0xf18>)
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b536:	2b00      	cmp	r3, #0
 800b538:	f340 80bd 	ble.w	800b6b6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	899b      	ldrh	r3, [r3, #12]
 800b542:	b29b      	uxth	r3, r3
 800b544:	4618      	mov	r0, r3
 800b546:	f7fa f9cf 	bl	80058e8 <lwip_htons>
 800b54a:	4603      	mov	r3, r0
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	f003 0301 	and.w	r3, r3, #1
 800b552:	2b00      	cmp	r3, #0
 800b554:	f040 80bf 	bne.w	800b6d6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b558:	4875      	ldr	r0, [pc, #468]	; (800b730 <tcp_receive+0xf1c>)
 800b55a:	f7fd fa57 	bl	8008a0c <tcp_seg_copy>
 800b55e:	4602      	mov	r2, r0
 800b560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b562:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f000 80b6 	beq.w	800b6da <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b570:	68db      	ldr	r3, [r3, #12]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b576:	8912      	ldrh	r2, [r2, #8]
 800b578:	441a      	add	r2, r3
 800b57a:	4b6c      	ldr	r3, [pc, #432]	; (800b72c <tcp_receive+0xf18>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	2b00      	cmp	r3, #0
 800b582:	dd12      	ble.n	800b5aa <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b584:	4b69      	ldr	r3, [pc, #420]	; (800b72c <tcp_receive+0xf18>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	b29a      	uxth	r2, r3
 800b58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	b29b      	uxth	r3, r3
 800b592:	1ad3      	subs	r3, r2, r3
 800b594:	b29a      	uxth	r2, r3
 800b596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b598:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59c:	685a      	ldr	r2, [r3, #4]
 800b59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a0:	891b      	ldrh	r3, [r3, #8]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	f7fb fc2f 	bl	8006e08 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b5aa:	4b62      	ldr	r3, [pc, #392]	; (800b734 <tcp_receive+0xf20>)
 800b5ac:	881b      	ldrh	r3, [r3, #0]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	4b5e      	ldr	r3, [pc, #376]	; (800b72c <tcp_receive+0xf18>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	441a      	add	r2, r3
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ba:	6879      	ldr	r1, [r7, #4]
 800b5bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b5be:	440b      	add	r3, r1
 800b5c0:	1ad3      	subs	r3, r2, r3
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	f340 8089 	ble.w	800b6da <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	68db      	ldr	r3, [r3, #12]
 800b5ce:	899b      	ldrh	r3, [r3, #12]
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7fa f988 	bl	80058e8 <lwip_htons>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	f003 0301 	and.w	r3, r3, #1
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d022      	beq.n	800b62a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	899b      	ldrh	r3, [r3, #12]
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	b21b      	sxth	r3, r3
 800b5f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b5f4:	b21c      	sxth	r4, r3
 800b5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	899b      	ldrh	r3, [r3, #12]
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	4618      	mov	r0, r3
 800b602:	f7fa f971 	bl	80058e8 <lwip_htons>
 800b606:	4603      	mov	r3, r0
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b610:	b29b      	uxth	r3, r3
 800b612:	4618      	mov	r0, r3
 800b614:	f7fa f968 	bl	80058e8 <lwip_htons>
 800b618:	4603      	mov	r3, r0
 800b61a:	b21b      	sxth	r3, r3
 800b61c:	4323      	orrs	r3, r4
 800b61e:	b21a      	sxth	r2, r3
 800b620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	b292      	uxth	r2, r2
 800b628:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62e:	b29a      	uxth	r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b634:	4413      	add	r3, r2
 800b636:	b299      	uxth	r1, r3
 800b638:	4b3c      	ldr	r3, [pc, #240]	; (800b72c <tcp_receive+0xf18>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	1a8a      	subs	r2, r1, r2
 800b644:	b292      	uxth	r2, r2
 800b646:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	685a      	ldr	r2, [r3, #4]
 800b64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	891b      	ldrh	r3, [r3, #8]
 800b654:	4619      	mov	r1, r3
 800b656:	4610      	mov	r0, r2
 800b658:	f7fb fbd6 	bl	8006e08 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	891c      	ldrh	r4, [r3, #8]
 800b662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	899b      	ldrh	r3, [r3, #12]
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7fa f93b 	bl	80058e8 <lwip_htons>
 800b672:	4603      	mov	r3, r0
 800b674:	b2db      	uxtb	r3, r3
 800b676:	f003 0303 	and.w	r3, r3, #3
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d001      	beq.n	800b682 <tcp_receive+0xe6e>
 800b67e:	2301      	movs	r3, #1
 800b680:	e000      	b.n	800b684 <tcp_receive+0xe70>
 800b682:	2300      	movs	r3, #0
 800b684:	4423      	add	r3, r4
 800b686:	b29a      	uxth	r2, r3
 800b688:	4b2a      	ldr	r3, [pc, #168]	; (800b734 <tcp_receive+0xf20>)
 800b68a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b68c:	4b29      	ldr	r3, [pc, #164]	; (800b734 <tcp_receive+0xf20>)
 800b68e:	881b      	ldrh	r3, [r3, #0]
 800b690:	461a      	mov	r2, r3
 800b692:	4b26      	ldr	r3, [pc, #152]	; (800b72c <tcp_receive+0xf18>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	441a      	add	r2, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69c:	6879      	ldr	r1, [r7, #4]
 800b69e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b6a0:	440b      	add	r3, r1
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d019      	beq.n	800b6da <tcp_receive+0xec6>
 800b6a6:	4b24      	ldr	r3, [pc, #144]	; (800b738 <tcp_receive+0xf24>)
 800b6a8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800b6ac:	4923      	ldr	r1, [pc, #140]	; (800b73c <tcp_receive+0xf28>)
 800b6ae:	4824      	ldr	r0, [pc, #144]	; (800b740 <tcp_receive+0xf2c>)
 800b6b0:	f004 fef6 	bl	80104a0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b6b4:	e011      	b.n	800b6da <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800b6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f47f aea4 	bne.w	800b40c <tcp_receive+0xbf8>
 800b6c4:	e00a      	b.n	800b6dc <tcp_receive+0xec8>
                break;
 800b6c6:	bf00      	nop
 800b6c8:	e008      	b.n	800b6dc <tcp_receive+0xec8>
                break;
 800b6ca:	bf00      	nop
 800b6cc:	e006      	b.n	800b6dc <tcp_receive+0xec8>
                  break;
 800b6ce:	bf00      	nop
 800b6d0:	e004      	b.n	800b6dc <tcp_receive+0xec8>
                  break;
 800b6d2:	bf00      	nop
 800b6d4:	e002      	b.n	800b6dc <tcp_receive+0xec8>
                  break;
 800b6d6:	bf00      	nop
 800b6d8:	e000      	b.n	800b6dc <tcp_receive+0xec8>
                break;
 800b6da:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f001 fe8b 	bl	800d3f8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b6e2:	e003      	b.n	800b6ec <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f001 fe87 	bl	800d3f8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b6ea:	e01a      	b.n	800b722 <tcp_receive+0xf0e>
 800b6ec:	e019      	b.n	800b722 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b6ee:	4b0f      	ldr	r3, [pc, #60]	; (800b72c <tcp_receive+0xf18>)
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	db0a      	blt.n	800b712 <tcp_receive+0xefe>
 800b6fc:	4b0b      	ldr	r3, [pc, #44]	; (800b72c <tcp_receive+0xf18>)
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b704:	6879      	ldr	r1, [r7, #4]
 800b706:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b708:	440b      	add	r3, r1
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	3301      	adds	r3, #1
 800b70e:	2b00      	cmp	r3, #0
 800b710:	dd07      	ble.n	800b722 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	8b5b      	ldrh	r3, [r3, #26]
 800b716:	f043 0302 	orr.w	r3, r3, #2
 800b71a:	b29a      	uxth	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b720:	e7ff      	b.n	800b722 <tcp_receive+0xf0e>
 800b722:	bf00      	nop
 800b724:	3750      	adds	r7, #80	; 0x50
 800b726:	46bd      	mov	sp, r7
 800b728:	bdb0      	pop	{r4, r5, r7, pc}
 800b72a:	bf00      	nop
 800b72c:	240031c0 	.word	0x240031c0
 800b730:	240031a0 	.word	0x240031a0
 800b734:	240031ca 	.word	0x240031ca
 800b738:	08012b68 	.word	0x08012b68
 800b73c:	08012f10 	.word	0x08012f10
 800b740:	08012bb4 	.word	0x08012bb4

0800b744 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b74a:	4b15      	ldr	r3, [pc, #84]	; (800b7a0 <tcp_get_next_optbyte+0x5c>)
 800b74c:	881b      	ldrh	r3, [r3, #0]
 800b74e:	1c5a      	adds	r2, r3, #1
 800b750:	b291      	uxth	r1, r2
 800b752:	4a13      	ldr	r2, [pc, #76]	; (800b7a0 <tcp_get_next_optbyte+0x5c>)
 800b754:	8011      	strh	r1, [r2, #0]
 800b756:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b758:	4b12      	ldr	r3, [pc, #72]	; (800b7a4 <tcp_get_next_optbyte+0x60>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d004      	beq.n	800b76a <tcp_get_next_optbyte+0x26>
 800b760:	4b11      	ldr	r3, [pc, #68]	; (800b7a8 <tcp_get_next_optbyte+0x64>)
 800b762:	881b      	ldrh	r3, [r3, #0]
 800b764:	88fa      	ldrh	r2, [r7, #6]
 800b766:	429a      	cmp	r2, r3
 800b768:	d208      	bcs.n	800b77c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b76a:	4b10      	ldr	r3, [pc, #64]	; (800b7ac <tcp_get_next_optbyte+0x68>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	3314      	adds	r3, #20
 800b770:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b772:	88fb      	ldrh	r3, [r7, #6]
 800b774:	683a      	ldr	r2, [r7, #0]
 800b776:	4413      	add	r3, r2
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	e00b      	b.n	800b794 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b77c:	88fb      	ldrh	r3, [r7, #6]
 800b77e:	b2da      	uxtb	r2, r3
 800b780:	4b09      	ldr	r3, [pc, #36]	; (800b7a8 <tcp_get_next_optbyte+0x64>)
 800b782:	881b      	ldrh	r3, [r3, #0]
 800b784:	b2db      	uxtb	r3, r3
 800b786:	1ad3      	subs	r3, r2, r3
 800b788:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b78a:	4b06      	ldr	r3, [pc, #24]	; (800b7a4 <tcp_get_next_optbyte+0x60>)
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	797b      	ldrb	r3, [r7, #5]
 800b790:	4413      	add	r3, r2
 800b792:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b794:	4618      	mov	r0, r3
 800b796:	370c      	adds	r7, #12
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr
 800b7a0:	240031bc 	.word	0x240031bc
 800b7a4:	240031b8 	.word	0x240031b8
 800b7a8:	240031b6 	.word	0x240031b6
 800b7ac:	240031b0 	.word	0x240031b0

0800b7b0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d106      	bne.n	800b7cc <tcp_parseopt+0x1c>
 800b7be:	4b32      	ldr	r3, [pc, #200]	; (800b888 <tcp_parseopt+0xd8>)
 800b7c0:	f240 727d 	movw	r2, #1917	; 0x77d
 800b7c4:	4931      	ldr	r1, [pc, #196]	; (800b88c <tcp_parseopt+0xdc>)
 800b7c6:	4832      	ldr	r0, [pc, #200]	; (800b890 <tcp_parseopt+0xe0>)
 800b7c8:	f004 fe6a 	bl	80104a0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b7cc:	4b31      	ldr	r3, [pc, #196]	; (800b894 <tcp_parseopt+0xe4>)
 800b7ce:	881b      	ldrh	r3, [r3, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d055      	beq.n	800b880 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b7d4:	4b30      	ldr	r3, [pc, #192]	; (800b898 <tcp_parseopt+0xe8>)
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	801a      	strh	r2, [r3, #0]
 800b7da:	e045      	b.n	800b868 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800b7dc:	f7ff ffb2 	bl	800b744 <tcp_get_next_optbyte>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	d006      	beq.n	800b7f8 <tcp_parseopt+0x48>
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	dc2b      	bgt.n	800b846 <tcp_parseopt+0x96>
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d041      	beq.n	800b876 <tcp_parseopt+0xc6>
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d127      	bne.n	800b846 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800b7f6:	e037      	b.n	800b868 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b7f8:	f7ff ffa4 	bl	800b744 <tcp_get_next_optbyte>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b04      	cmp	r3, #4
 800b800:	d13b      	bne.n	800b87a <tcp_parseopt+0xca>
 800b802:	4b25      	ldr	r3, [pc, #148]	; (800b898 <tcp_parseopt+0xe8>)
 800b804:	881b      	ldrh	r3, [r3, #0]
 800b806:	3301      	adds	r3, #1
 800b808:	4a22      	ldr	r2, [pc, #136]	; (800b894 <tcp_parseopt+0xe4>)
 800b80a:	8812      	ldrh	r2, [r2, #0]
 800b80c:	4293      	cmp	r3, r2
 800b80e:	da34      	bge.n	800b87a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b810:	f7ff ff98 	bl	800b744 <tcp_get_next_optbyte>
 800b814:	4603      	mov	r3, r0
 800b816:	b29b      	uxth	r3, r3
 800b818:	021b      	lsls	r3, r3, #8
 800b81a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b81c:	f7ff ff92 	bl	800b744 <tcp_get_next_optbyte>
 800b820:	4603      	mov	r3, r0
 800b822:	b29a      	uxth	r2, r3
 800b824:	89bb      	ldrh	r3, [r7, #12]
 800b826:	4313      	orrs	r3, r2
 800b828:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b82a:	89bb      	ldrh	r3, [r7, #12]
 800b82c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b830:	d804      	bhi.n	800b83c <tcp_parseopt+0x8c>
 800b832:	89bb      	ldrh	r3, [r7, #12]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d001      	beq.n	800b83c <tcp_parseopt+0x8c>
 800b838:	89ba      	ldrh	r2, [r7, #12]
 800b83a:	e001      	b.n	800b840 <tcp_parseopt+0x90>
 800b83c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b844:	e010      	b.n	800b868 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b846:	f7ff ff7d 	bl	800b744 <tcp_get_next_optbyte>
 800b84a:	4603      	mov	r3, r0
 800b84c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b84e:	7afb      	ldrb	r3, [r7, #11]
 800b850:	2b01      	cmp	r3, #1
 800b852:	d914      	bls.n	800b87e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b854:	7afb      	ldrb	r3, [r7, #11]
 800b856:	b29a      	uxth	r2, r3
 800b858:	4b0f      	ldr	r3, [pc, #60]	; (800b898 <tcp_parseopt+0xe8>)
 800b85a:	881b      	ldrh	r3, [r3, #0]
 800b85c:	4413      	add	r3, r2
 800b85e:	b29b      	uxth	r3, r3
 800b860:	3b02      	subs	r3, #2
 800b862:	b29a      	uxth	r2, r3
 800b864:	4b0c      	ldr	r3, [pc, #48]	; (800b898 <tcp_parseopt+0xe8>)
 800b866:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b868:	4b0b      	ldr	r3, [pc, #44]	; (800b898 <tcp_parseopt+0xe8>)
 800b86a:	881a      	ldrh	r2, [r3, #0]
 800b86c:	4b09      	ldr	r3, [pc, #36]	; (800b894 <tcp_parseopt+0xe4>)
 800b86e:	881b      	ldrh	r3, [r3, #0]
 800b870:	429a      	cmp	r2, r3
 800b872:	d3b3      	bcc.n	800b7dc <tcp_parseopt+0x2c>
 800b874:	e004      	b.n	800b880 <tcp_parseopt+0xd0>
          return;
 800b876:	bf00      	nop
 800b878:	e002      	b.n	800b880 <tcp_parseopt+0xd0>
            return;
 800b87a:	bf00      	nop
 800b87c:	e000      	b.n	800b880 <tcp_parseopt+0xd0>
            return;
 800b87e:	bf00      	nop
      }
    }
  }
}
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	08012b68 	.word	0x08012b68
 800b88c:	08012fcc 	.word	0x08012fcc
 800b890:	08012bb4 	.word	0x08012bb4
 800b894:	240031b4 	.word	0x240031b4
 800b898:	240031bc 	.word	0x240031bc

0800b89c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b89c:	b480      	push	{r7}
 800b89e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b8a0:	4b05      	ldr	r3, [pc, #20]	; (800b8b8 <tcp_trigger_input_pcb_close+0x1c>)
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	f043 0310 	orr.w	r3, r3, #16
 800b8a8:	b2da      	uxtb	r2, r3
 800b8aa:	4b03      	ldr	r3, [pc, #12]	; (800b8b8 <tcp_trigger_input_pcb_close+0x1c>)
 800b8ac:	701a      	strb	r2, [r3, #0]
}
 800b8ae:	bf00      	nop
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr
 800b8b8:	240031cd 	.word	0x240031cd

0800b8bc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00a      	beq.n	800b8e4 <tcp_route+0x28>
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	7a1b      	ldrb	r3, [r3, #8]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d006      	beq.n	800b8e4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	7a1b      	ldrb	r3, [r3, #8]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fb f8ba 	bl	8006a54 <netif_get_by_index>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	e003      	b.n	800b8ec <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f003 fafb 	bl	800eee0 <ip4_route>
 800b8ea:	4603      	mov	r3, r0
  }
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3710      	adds	r7, #16
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b8f4:	b590      	push	{r4, r7, lr}
 800b8f6:	b087      	sub	sp, #28
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	603b      	str	r3, [r7, #0]
 800b900:	4613      	mov	r3, r2
 800b902:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d105      	bne.n	800b916 <tcp_create_segment+0x22>
 800b90a:	4b44      	ldr	r3, [pc, #272]	; (800ba1c <tcp_create_segment+0x128>)
 800b90c:	22a3      	movs	r2, #163	; 0xa3
 800b90e:	4944      	ldr	r1, [pc, #272]	; (800ba20 <tcp_create_segment+0x12c>)
 800b910:	4844      	ldr	r0, [pc, #272]	; (800ba24 <tcp_create_segment+0x130>)
 800b912:	f004 fdc5 	bl	80104a0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d105      	bne.n	800b928 <tcp_create_segment+0x34>
 800b91c:	4b3f      	ldr	r3, [pc, #252]	; (800ba1c <tcp_create_segment+0x128>)
 800b91e:	22a4      	movs	r2, #164	; 0xa4
 800b920:	4941      	ldr	r1, [pc, #260]	; (800ba28 <tcp_create_segment+0x134>)
 800b922:	4840      	ldr	r0, [pc, #256]	; (800ba24 <tcp_create_segment+0x130>)
 800b924:	f004 fdbc 	bl	80104a0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b928:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	f003 0304 	and.w	r3, r3, #4
 800b934:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b936:	2003      	movs	r0, #3
 800b938:	f7fa fd06 	bl	8006348 <memp_malloc>
 800b93c:	6138      	str	r0, [r7, #16]
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d104      	bne.n	800b94e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b944:	68b8      	ldr	r0, [r7, #8]
 800b946:	f7fb fbe5 	bl	8007114 <pbuf_free>
    return NULL;
 800b94a:	2300      	movs	r3, #0
 800b94c:	e061      	b.n	800ba12 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b954:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	2200      	movs	r2, #0
 800b95a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	68ba      	ldr	r2, [r7, #8]
 800b960:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	891a      	ldrh	r2, [r3, #8]
 800b966:	7dfb      	ldrb	r3, [r7, #23]
 800b968:	b29b      	uxth	r3, r3
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d205      	bcs.n	800b97a <tcp_create_segment+0x86>
 800b96e:	4b2b      	ldr	r3, [pc, #172]	; (800ba1c <tcp_create_segment+0x128>)
 800b970:	22b0      	movs	r2, #176	; 0xb0
 800b972:	492e      	ldr	r1, [pc, #184]	; (800ba2c <tcp_create_segment+0x138>)
 800b974:	482b      	ldr	r0, [pc, #172]	; (800ba24 <tcp_create_segment+0x130>)
 800b976:	f004 fd93 	bl	80104a0 <iprintf>
  seg->len = p->tot_len - optlen;
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	891a      	ldrh	r2, [r3, #8]
 800b97e:	7dfb      	ldrb	r3, [r7, #23]
 800b980:	b29b      	uxth	r3, r3
 800b982:	1ad3      	subs	r3, r2, r3
 800b984:	b29a      	uxth	r2, r3
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b98a:	2114      	movs	r1, #20
 800b98c:	68b8      	ldr	r0, [r7, #8]
 800b98e:	f7fb fb2b 	bl	8006fe8 <pbuf_add_header>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d004      	beq.n	800b9a2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b998:	6938      	ldr	r0, [r7, #16]
 800b99a:	f7fd f81e 	bl	80089da <tcp_seg_free>
    return NULL;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	e037      	b.n	800ba12 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	685a      	ldr	r2, [r3, #4]
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	8ada      	ldrh	r2, [r3, #22]
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	68dc      	ldr	r4, [r3, #12]
 800b9b4:	4610      	mov	r0, r2
 800b9b6:	f7f9 ff97 	bl	80058e8 <lwip_htons>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	8b1a      	ldrh	r2, [r3, #24]
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	68dc      	ldr	r4, [r3, #12]
 800b9c6:	4610      	mov	r0, r2
 800b9c8:	f7f9 ff8e 	bl	80058e8 <lwip_htons>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	68dc      	ldr	r4, [r3, #12]
 800b9d4:	6838      	ldr	r0, [r7, #0]
 800b9d6:	f7f9 ff9c 	bl	8005912 <lwip_htonl>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b9de:	7dfb      	ldrb	r3, [r7, #23]
 800b9e0:	089b      	lsrs	r3, r3, #2
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	3305      	adds	r3, #5
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	031b      	lsls	r3, r3, #12
 800b9ec:	b29a      	uxth	r2, r3
 800b9ee:	79fb      	ldrb	r3, [r7, #7]
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	68dc      	ldr	r4, [r3, #12]
 800b9fa:	4610      	mov	r0, r2
 800b9fc:	f7f9 ff74 	bl	80058e8 <lwip_htons>
 800ba00:	4603      	mov	r3, r0
 800ba02:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	749a      	strb	r2, [r3, #18]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	74da      	strb	r2, [r3, #19]
  return seg;
 800ba10:	693b      	ldr	r3, [r7, #16]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	371c      	adds	r7, #28
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd90      	pop	{r4, r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	08012fe8 	.word	0x08012fe8
 800ba20:	0801301c 	.word	0x0801301c
 800ba24:	0801303c 	.word	0x0801303c
 800ba28:	08013064 	.word	0x08013064
 800ba2c:	08013088 	.word	0x08013088

0800ba30 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	607b      	str	r3, [r7, #4]
 800ba38:	4603      	mov	r3, r0
 800ba3a:	73fb      	strb	r3, [r7, #15]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	81bb      	strh	r3, [r7, #12]
 800ba40:	4613      	mov	r3, r2
 800ba42:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800ba44:	89bb      	ldrh	r3, [r7, #12]
 800ba46:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d105      	bne.n	800ba5a <tcp_pbuf_prealloc+0x2a>
 800ba4e:	4b30      	ldr	r3, [pc, #192]	; (800bb10 <tcp_pbuf_prealloc+0xe0>)
 800ba50:	22e8      	movs	r2, #232	; 0xe8
 800ba52:	4930      	ldr	r1, [pc, #192]	; (800bb14 <tcp_pbuf_prealloc+0xe4>)
 800ba54:	4830      	ldr	r0, [pc, #192]	; (800bb18 <tcp_pbuf_prealloc+0xe8>)
 800ba56:	f004 fd23 	bl	80104a0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800ba5a:	6a3b      	ldr	r3, [r7, #32]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d105      	bne.n	800ba6c <tcp_pbuf_prealloc+0x3c>
 800ba60:	4b2b      	ldr	r3, [pc, #172]	; (800bb10 <tcp_pbuf_prealloc+0xe0>)
 800ba62:	22e9      	movs	r2, #233	; 0xe9
 800ba64:	492d      	ldr	r1, [pc, #180]	; (800bb1c <tcp_pbuf_prealloc+0xec>)
 800ba66:	482c      	ldr	r0, [pc, #176]	; (800bb18 <tcp_pbuf_prealloc+0xe8>)
 800ba68:	f004 fd1a 	bl	80104a0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800ba6c:	89ba      	ldrh	r2, [r7, #12]
 800ba6e:	897b      	ldrh	r3, [r7, #10]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d221      	bcs.n	800bab8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ba74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ba78:	f003 0302 	and.w	r3, r3, #2
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d111      	bne.n	800baa4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800ba80:	6a3b      	ldr	r3, [r7, #32]
 800ba82:	8b5b      	ldrh	r3, [r3, #26]
 800ba84:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d115      	bne.n	800bab8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800ba8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d007      	beq.n	800baa4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800ba94:	6a3b      	ldr	r3, [r7, #32]
 800ba96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d103      	bne.n	800baa4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800ba9c:	6a3b      	ldr	r3, [r7, #32]
 800ba9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d009      	beq.n	800bab8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800baa4:	89bb      	ldrh	r3, [r7, #12]
 800baa6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800baaa:	f023 0203 	bic.w	r2, r3, #3
 800baae:	897b      	ldrh	r3, [r7, #10]
 800bab0:	4293      	cmp	r3, r2
 800bab2:	bf28      	it	cs
 800bab4:	4613      	movcs	r3, r2
 800bab6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800bab8:	8af9      	ldrh	r1, [r7, #22]
 800baba:	7bfb      	ldrb	r3, [r7, #15]
 800babc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7fb f843 	bl	8006b4c <pbuf_alloc>
 800bac6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d101      	bne.n	800bad2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800bace:	2300      	movs	r3, #0
 800bad0:	e019      	b.n	800bb06 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d006      	beq.n	800bae8 <tcp_pbuf_prealloc+0xb8>
 800bada:	4b0d      	ldr	r3, [pc, #52]	; (800bb10 <tcp_pbuf_prealloc+0xe0>)
 800badc:	f240 120b 	movw	r2, #267	; 0x10b
 800bae0:	490f      	ldr	r1, [pc, #60]	; (800bb20 <tcp_pbuf_prealloc+0xf0>)
 800bae2:	480d      	ldr	r0, [pc, #52]	; (800bb18 <tcp_pbuf_prealloc+0xe8>)
 800bae4:	f004 fcdc 	bl	80104a0 <iprintf>
  *oversize = p->len - length;
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	895a      	ldrh	r2, [r3, #10]
 800baec:	89bb      	ldrh	r3, [r7, #12]
 800baee:	1ad3      	subs	r3, r2, r3
 800baf0:	b29a      	uxth	r2, r3
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	89ba      	ldrh	r2, [r7, #12]
 800bafa:	811a      	strh	r2, [r3, #8]
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	891a      	ldrh	r2, [r3, #8]
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	815a      	strh	r2, [r3, #10]
  return p;
 800bb04:	693b      	ldr	r3, [r7, #16]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3718      	adds	r7, #24
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	08012fe8 	.word	0x08012fe8
 800bb14:	080130a0 	.word	0x080130a0
 800bb18:	0801303c 	.word	0x0801303c
 800bb1c:	080130c4 	.word	0x080130c4
 800bb20:	080130e4 	.word	0x080130e4

0800bb24 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d106      	bne.n	800bb44 <tcp_write_checks+0x20>
 800bb36:	4b33      	ldr	r3, [pc, #204]	; (800bc04 <tcp_write_checks+0xe0>)
 800bb38:	f240 1233 	movw	r2, #307	; 0x133
 800bb3c:	4932      	ldr	r1, [pc, #200]	; (800bc08 <tcp_write_checks+0xe4>)
 800bb3e:	4833      	ldr	r0, [pc, #204]	; (800bc0c <tcp_write_checks+0xe8>)
 800bb40:	f004 fcae 	bl	80104a0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	7d1b      	ldrb	r3, [r3, #20]
 800bb48:	2b04      	cmp	r3, #4
 800bb4a:	d00e      	beq.n	800bb6a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800bb50:	2b07      	cmp	r3, #7
 800bb52:	d00a      	beq.n	800bb6a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800bb58:	2b02      	cmp	r3, #2
 800bb5a:	d006      	beq.n	800bb6a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800bb60:	2b03      	cmp	r3, #3
 800bb62:	d002      	beq.n	800bb6a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800bb64:	f06f 030a 	mvn.w	r3, #10
 800bb68:	e048      	b.n	800bbfc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800bb6a:	887b      	ldrh	r3, [r7, #2]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d101      	bne.n	800bb74 <tcp_write_checks+0x50>
    return ERR_OK;
 800bb70:	2300      	movs	r3, #0
 800bb72:	e043      	b.n	800bbfc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bb7a:	887a      	ldrh	r2, [r7, #2]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d909      	bls.n	800bb94 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	8b5b      	ldrh	r3, [r3, #26]
 800bb84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb88:	b29a      	uxth	r2, r3
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800bb8e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb92:	e033      	b.n	800bbfc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb9a:	2b08      	cmp	r3, #8
 800bb9c:	d909      	bls.n	800bbb2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	8b5b      	ldrh	r3, [r3, #26]
 800bba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800bbac:	f04f 33ff 	mov.w	r3, #4294967295
 800bbb0:	e024      	b.n	800bbfc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00f      	beq.n	800bbdc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d11a      	bne.n	800bbfa <tcp_write_checks+0xd6>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d116      	bne.n	800bbfa <tcp_write_checks+0xd6>
 800bbcc:	4b0d      	ldr	r3, [pc, #52]	; (800bc04 <tcp_write_checks+0xe0>)
 800bbce:	f240 1255 	movw	r2, #341	; 0x155
 800bbd2:	490f      	ldr	r1, [pc, #60]	; (800bc10 <tcp_write_checks+0xec>)
 800bbd4:	480d      	ldr	r0, [pc, #52]	; (800bc0c <tcp_write_checks+0xe8>)
 800bbd6:	f004 fc63 	bl	80104a0 <iprintf>
 800bbda:	e00e      	b.n	800bbfa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d103      	bne.n	800bbec <tcp_write_checks+0xc8>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d006      	beq.n	800bbfa <tcp_write_checks+0xd6>
 800bbec:	4b05      	ldr	r3, [pc, #20]	; (800bc04 <tcp_write_checks+0xe0>)
 800bbee:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800bbf2:	4908      	ldr	r1, [pc, #32]	; (800bc14 <tcp_write_checks+0xf0>)
 800bbf4:	4805      	ldr	r0, [pc, #20]	; (800bc0c <tcp_write_checks+0xe8>)
 800bbf6:	f004 fc53 	bl	80104a0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	08012fe8 	.word	0x08012fe8
 800bc08:	080130f8 	.word	0x080130f8
 800bc0c:	0801303c 	.word	0x0801303c
 800bc10:	08013118 	.word	0x08013118
 800bc14:	08013154 	.word	0x08013154

0800bc18 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800bc18:	b590      	push	{r4, r7, lr}
 800bc1a:	b09b      	sub	sp, #108	; 0x6c
 800bc1c:	af04      	add	r7, sp, #16
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	4611      	mov	r1, r2
 800bc24:	461a      	mov	r2, r3
 800bc26:	460b      	mov	r3, r1
 800bc28:	80fb      	strh	r3, [r7, #6]
 800bc2a:	4613      	mov	r3, r2
 800bc2c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bc32:	2300      	movs	r3, #0
 800bc34:	653b      	str	r3, [r7, #80]	; 0x50
 800bc36:	2300      	movs	r3, #0
 800bc38:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc3e:	2300      	movs	r3, #0
 800bc40:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800bc42:	2300      	movs	r3, #0
 800bc44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800bc52:	2300      	movs	r3, #0
 800bc54:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800bc56:	2300      	movs	r3, #0
 800bc58:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d109      	bne.n	800bc74 <tcp_write+0x5c>
 800bc60:	4ba4      	ldr	r3, [pc, #656]	; (800bef4 <tcp_write+0x2dc>)
 800bc62:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800bc66:	49a4      	ldr	r1, [pc, #656]	; (800bef8 <tcp_write+0x2e0>)
 800bc68:	48a4      	ldr	r0, [pc, #656]	; (800befc <tcp_write+0x2e4>)
 800bc6a:	f004 fc19 	bl	80104a0 <iprintf>
 800bc6e:	f06f 030f 	mvn.w	r3, #15
 800bc72:	e32a      	b.n	800c2ca <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc7a:	085b      	lsrs	r3, r3, #1
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc82:	4293      	cmp	r3, r2
 800bc84:	bf28      	it	cs
 800bc86:	4613      	movcs	r3, r2
 800bc88:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800bc8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d102      	bne.n	800bc96 <tcp_write+0x7e>
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc94:	e000      	b.n	800bc98 <tcp_write+0x80>
 800bc96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc98:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d109      	bne.n	800bcb4 <tcp_write+0x9c>
 800bca0:	4b94      	ldr	r3, [pc, #592]	; (800bef4 <tcp_write+0x2dc>)
 800bca2:	f240 12ad 	movw	r2, #429	; 0x1ad
 800bca6:	4996      	ldr	r1, [pc, #600]	; (800bf00 <tcp_write+0x2e8>)
 800bca8:	4894      	ldr	r0, [pc, #592]	; (800befc <tcp_write+0x2e4>)
 800bcaa:	f004 fbf9 	bl	80104a0 <iprintf>
 800bcae:	f06f 030f 	mvn.w	r3, #15
 800bcb2:	e30a      	b.n	800c2ca <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800bcb4:	88fb      	ldrh	r3, [r7, #6]
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	68f8      	ldr	r0, [r7, #12]
 800bcba:	f7ff ff33 	bl	800bb24 <tcp_write_checks>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800bcc4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d002      	beq.n	800bcd2 <tcp_write+0xba>
    return err;
 800bccc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800bcd0:	e2fb      	b.n	800c2ca <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bcd8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	f000 80f6 	beq.w	800bed8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcf0:	653b      	str	r3, [r7, #80]	; 0x50
 800bcf2:	e002      	b.n	800bcfa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800bcf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bcfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d1f8      	bne.n	800bcf4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800bd02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd04:	7a9b      	ldrb	r3, [r3, #10]
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	b29b      	uxth	r3, r3
 800bd0a:	f003 0304 	and.w	r3, r3, #4
 800bd0e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bd10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bd12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd14:	891b      	ldrh	r3, [r3, #8]
 800bd16:	4619      	mov	r1, r3
 800bd18:	8c3b      	ldrh	r3, [r7, #32]
 800bd1a:	440b      	add	r3, r1
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	da06      	bge.n	800bd2e <tcp_write+0x116>
 800bd20:	4b74      	ldr	r3, [pc, #464]	; (800bef4 <tcp_write+0x2dc>)
 800bd22:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bd26:	4977      	ldr	r1, [pc, #476]	; (800bf04 <tcp_write+0x2ec>)
 800bd28:	4874      	ldr	r0, [pc, #464]	; (800befc <tcp_write+0x2e4>)
 800bd2a:	f004 fbb9 	bl	80104a0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800bd2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd30:	891a      	ldrh	r2, [r3, #8]
 800bd32:	8c3b      	ldrh	r3, [r7, #32]
 800bd34:	4413      	add	r3, r2
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bd3a:	1ad3      	subs	r3, r2, r3
 800bd3c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bd44:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800bd46:	8a7b      	ldrh	r3, [r7, #18]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d026      	beq.n	800bd9a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800bd4c:	8a7b      	ldrh	r3, [r7, #18]
 800bd4e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d206      	bcs.n	800bd62 <tcp_write+0x14a>
 800bd54:	4b67      	ldr	r3, [pc, #412]	; (800bef4 <tcp_write+0x2dc>)
 800bd56:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800bd5a:	496b      	ldr	r1, [pc, #428]	; (800bf08 <tcp_write+0x2f0>)
 800bd5c:	4867      	ldr	r0, [pc, #412]	; (800befc <tcp_write+0x2e4>)
 800bd5e:	f004 fb9f 	bl	80104a0 <iprintf>
      seg = last_unsent;
 800bd62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd64:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800bd66:	8a7b      	ldrh	r3, [r7, #18]
 800bd68:	88fa      	ldrh	r2, [r7, #6]
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	bf28      	it	cs
 800bd6e:	4613      	movcs	r3, r2
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bd74:	4293      	cmp	r3, r2
 800bd76:	bf28      	it	cs
 800bd78:	4613      	movcs	r3, r2
 800bd7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800bd7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bd80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bd82:	4413      	add	r3, r2
 800bd84:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800bd88:	8a7a      	ldrh	r2, [r7, #18]
 800bd8a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bd8c:	1ad3      	subs	r3, r2, r3
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800bd92:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bd94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bd96:	1ad3      	subs	r3, r2, r3
 800bd98:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800bd9a:	8a7b      	ldrh	r3, [r7, #18]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d00b      	beq.n	800bdb8 <tcp_write+0x1a0>
 800bda0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bda4:	88fb      	ldrh	r3, [r7, #6]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d006      	beq.n	800bdb8 <tcp_write+0x1a0>
 800bdaa:	4b52      	ldr	r3, [pc, #328]	; (800bef4 <tcp_write+0x2dc>)
 800bdac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdb0:	4956      	ldr	r1, [pc, #344]	; (800bf0c <tcp_write+0x2f4>)
 800bdb2:	4852      	ldr	r0, [pc, #328]	; (800befc <tcp_write+0x2e4>)
 800bdb4:	f004 fb74 	bl	80104a0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800bdb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bdbc:	88fb      	ldrh	r3, [r7, #6]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	f080 8167 	bcs.w	800c092 <tcp_write+0x47a>
 800bdc4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	f000 8163 	beq.w	800c092 <tcp_write+0x47a>
 800bdcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdce:	891b      	ldrh	r3, [r3, #8]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f000 815e 	beq.w	800c092 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800bdd6:	88fa      	ldrh	r2, [r7, #6]
 800bdd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bddc:	1ad2      	subs	r2, r2, r3
 800bdde:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bde0:	4293      	cmp	r3, r2
 800bde2:	bfa8      	it	ge
 800bde4:	4613      	movge	r3, r2
 800bde6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800bde8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdea:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bdec:	797b      	ldrb	r3, [r7, #5]
 800bdee:	f003 0301 	and.w	r3, r3, #1
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d027      	beq.n	800be46 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800bdf6:	f107 0012 	add.w	r0, r7, #18
 800bdfa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bdfc:	8bf9      	ldrh	r1, [r7, #30]
 800bdfe:	2301      	movs	r3, #1
 800be00:	9302      	str	r3, [sp, #8]
 800be02:	797b      	ldrb	r3, [r7, #5]
 800be04:	9301      	str	r3, [sp, #4]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	9300      	str	r3, [sp, #0]
 800be0a:	4603      	mov	r3, r0
 800be0c:	2000      	movs	r0, #0
 800be0e:	f7ff fe0f 	bl	800ba30 <tcp_pbuf_prealloc>
 800be12:	6578      	str	r0, [r7, #84]	; 0x54
 800be14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be16:	2b00      	cmp	r3, #0
 800be18:	f000 8225 	beq.w	800c266 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800be1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be1e:	6858      	ldr	r0, [r3, #4]
 800be20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800be24:	68ba      	ldr	r2, [r7, #8]
 800be26:	4413      	add	r3, r2
 800be28:	8bfa      	ldrh	r2, [r7, #30]
 800be2a:	4619      	mov	r1, r3
 800be2c:	f004 fb08 	bl	8010440 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800be30:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800be32:	f7fb f9f7 	bl	8007224 <pbuf_clen>
 800be36:	4603      	mov	r3, r0
 800be38:	461a      	mov	r2, r3
 800be3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800be3e:	4413      	add	r3, r2
 800be40:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800be44:	e041      	b.n	800beca <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800be46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	637b      	str	r3, [r7, #52]	; 0x34
 800be4c:	e002      	b.n	800be54 <tcp_write+0x23c>
 800be4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	637b      	str	r3, [r7, #52]	; 0x34
 800be54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1f8      	bne.n	800be4e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800be5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be5e:	7b1b      	ldrb	r3, [r3, #12]
 800be60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800be64:	2b00      	cmp	r3, #0
 800be66:	d115      	bne.n	800be94 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800be68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be6e:	8952      	ldrh	r2, [r2, #10]
 800be70:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800be72:	68ba      	ldr	r2, [r7, #8]
 800be74:	429a      	cmp	r2, r3
 800be76:	d10d      	bne.n	800be94 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800be78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d006      	beq.n	800be8e <tcp_write+0x276>
 800be80:	4b1c      	ldr	r3, [pc, #112]	; (800bef4 <tcp_write+0x2dc>)
 800be82:	f240 2231 	movw	r2, #561	; 0x231
 800be86:	4922      	ldr	r1, [pc, #136]	; (800bf10 <tcp_write+0x2f8>)
 800be88:	481c      	ldr	r0, [pc, #112]	; (800befc <tcp_write+0x2e4>)
 800be8a:	f004 fb09 	bl	80104a0 <iprintf>
          extendlen = seglen;
 800be8e:	8bfb      	ldrh	r3, [r7, #30]
 800be90:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800be92:	e01a      	b.n	800beca <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800be94:	8bfb      	ldrh	r3, [r7, #30]
 800be96:	2201      	movs	r2, #1
 800be98:	4619      	mov	r1, r3
 800be9a:	2000      	movs	r0, #0
 800be9c:	f7fa fe56 	bl	8006b4c <pbuf_alloc>
 800bea0:	6578      	str	r0, [r7, #84]	; 0x54
 800bea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	f000 81e0 	beq.w	800c26a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800beaa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800beae:	68ba      	ldr	r2, [r7, #8]
 800beb0:	441a      	add	r2, r3
 800beb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800beb4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800beb6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800beb8:	f7fb f9b4 	bl	8007224 <pbuf_clen>
 800bebc:	4603      	mov	r3, r0
 800bebe:	461a      	mov	r2, r3
 800bec0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bec4:	4413      	add	r3, r2
 800bec6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800beca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bece:	8bfb      	ldrh	r3, [r7, #30]
 800bed0:	4413      	add	r3, r2
 800bed2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800bed6:	e0dc      	b.n	800c092 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bede:	2b00      	cmp	r3, #0
 800bee0:	f000 80d7 	beq.w	800c092 <tcp_write+0x47a>
 800bee4:	4b03      	ldr	r3, [pc, #12]	; (800bef4 <tcp_write+0x2dc>)
 800bee6:	f240 224a 	movw	r2, #586	; 0x24a
 800beea:	490a      	ldr	r1, [pc, #40]	; (800bf14 <tcp_write+0x2fc>)
 800beec:	4803      	ldr	r0, [pc, #12]	; (800befc <tcp_write+0x2e4>)
 800beee:	f004 fad7 	bl	80104a0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800bef2:	e0ce      	b.n	800c092 <tcp_write+0x47a>
 800bef4:	08012fe8 	.word	0x08012fe8
 800bef8:	08013188 	.word	0x08013188
 800befc:	0801303c 	.word	0x0801303c
 800bf00:	080131a0 	.word	0x080131a0
 800bf04:	080131d4 	.word	0x080131d4
 800bf08:	080131ec 	.word	0x080131ec
 800bf0c:	0801320c 	.word	0x0801320c
 800bf10:	0801322c 	.word	0x0801322c
 800bf14:	08013258 	.word	0x08013258
    struct pbuf *p;
    u16_t left = len - pos;
 800bf18:	88fa      	ldrh	r2, [r7, #6]
 800bf1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bf1e:	1ad3      	subs	r3, r2, r3
 800bf20:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800bf22:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bf2a:	1ad3      	subs	r3, r2, r3
 800bf2c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800bf2e:	8b7a      	ldrh	r2, [r7, #26]
 800bf30:	8bbb      	ldrh	r3, [r7, #28]
 800bf32:	4293      	cmp	r3, r2
 800bf34:	bf28      	it	cs
 800bf36:	4613      	movcs	r3, r2
 800bf38:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bf3a:	797b      	ldrb	r3, [r7, #5]
 800bf3c:	f003 0301 	and.w	r3, r3, #1
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d036      	beq.n	800bfb2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800bf44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bf48:	b29a      	uxth	r2, r3
 800bf4a:	8b3b      	ldrh	r3, [r7, #24]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	b299      	uxth	r1, r3
 800bf50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	bf0c      	ite	eq
 800bf56:	2301      	moveq	r3, #1
 800bf58:	2300      	movne	r3, #0
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	f107 0012 	add.w	r0, r7, #18
 800bf60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bf62:	9302      	str	r3, [sp, #8]
 800bf64:	797b      	ldrb	r3, [r7, #5]
 800bf66:	9301      	str	r3, [sp, #4]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	9300      	str	r3, [sp, #0]
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	2036      	movs	r0, #54	; 0x36
 800bf70:	f7ff fd5e 	bl	800ba30 <tcp_pbuf_prealloc>
 800bf74:	6338      	str	r0, [r7, #48]	; 0x30
 800bf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	f000 8178 	beq.w	800c26e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800bf7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf80:	895b      	ldrh	r3, [r3, #10]
 800bf82:	8b3a      	ldrh	r2, [r7, #24]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d906      	bls.n	800bf96 <tcp_write+0x37e>
 800bf88:	4b8c      	ldr	r3, [pc, #560]	; (800c1bc <tcp_write+0x5a4>)
 800bf8a:	f240 2266 	movw	r2, #614	; 0x266
 800bf8e:	498c      	ldr	r1, [pc, #560]	; (800c1c0 <tcp_write+0x5a8>)
 800bf90:	488c      	ldr	r0, [pc, #560]	; (800c1c4 <tcp_write+0x5ac>)
 800bf92:	f004 fa85 	bl	80104a0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800bf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf98:	685a      	ldr	r2, [r3, #4]
 800bf9a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bf9e:	18d0      	adds	r0, r2, r3
 800bfa0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bfa4:	68ba      	ldr	r2, [r7, #8]
 800bfa6:	4413      	add	r3, r2
 800bfa8:	8b3a      	ldrh	r2, [r7, #24]
 800bfaa:	4619      	mov	r1, r3
 800bfac:	f004 fa48 	bl	8010440 <memcpy>
 800bfb0:	e02f      	b.n	800c012 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800bfb2:	8a7b      	ldrh	r3, [r7, #18]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d006      	beq.n	800bfc6 <tcp_write+0x3ae>
 800bfb8:	4b80      	ldr	r3, [pc, #512]	; (800c1bc <tcp_write+0x5a4>)
 800bfba:	f240 2271 	movw	r2, #625	; 0x271
 800bfbe:	4982      	ldr	r1, [pc, #520]	; (800c1c8 <tcp_write+0x5b0>)
 800bfc0:	4880      	ldr	r0, [pc, #512]	; (800c1c4 <tcp_write+0x5ac>)
 800bfc2:	f004 fa6d 	bl	80104a0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800bfc6:	8b3b      	ldrh	r3, [r7, #24]
 800bfc8:	2201      	movs	r2, #1
 800bfca:	4619      	mov	r1, r3
 800bfcc:	2036      	movs	r0, #54	; 0x36
 800bfce:	f7fa fdbd 	bl	8006b4c <pbuf_alloc>
 800bfd2:	6178      	str	r0, [r7, #20]
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	f000 814b 	beq.w	800c272 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800bfdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bfe0:	68ba      	ldr	r2, [r7, #8]
 800bfe2:	441a      	add	r2, r3
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bfe8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bff2:	4619      	mov	r1, r3
 800bff4:	2036      	movs	r0, #54	; 0x36
 800bff6:	f7fa fda9 	bl	8006b4c <pbuf_alloc>
 800bffa:	6338      	str	r0, [r7, #48]	; 0x30
 800bffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d103      	bne.n	800c00a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800c002:	6978      	ldr	r0, [r7, #20]
 800c004:	f7fb f886 	bl	8007114 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800c008:	e136      	b.n	800c278 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800c00a:	6979      	ldr	r1, [r7, #20]
 800c00c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c00e:	f7fb f943 	bl	8007298 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800c012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c014:	f7fb f906 	bl	8007224 <pbuf_clen>
 800c018:	4603      	mov	r3, r0
 800c01a:	461a      	mov	r2, r3
 800c01c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c020:	4413      	add	r3, r2
 800c022:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c026:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c02a:	2b09      	cmp	r3, #9
 800c02c:	d903      	bls.n	800c036 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800c02e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c030:	f7fb f870 	bl	8007114 <pbuf_free>
      goto memerr;
 800c034:	e120      	b.n	800c278 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c03a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c03e:	441a      	add	r2, r3
 800c040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	4613      	mov	r3, r2
 800c048:	2200      	movs	r2, #0
 800c04a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	f7ff fc51 	bl	800b8f4 <tcp_create_segment>
 800c052:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c056:	2b00      	cmp	r3, #0
 800c058:	f000 810d 	beq.w	800c276 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800c05c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d102      	bne.n	800c068 <tcp_write+0x450>
      queue = seg;
 800c062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c064:	647b      	str	r3, [r7, #68]	; 0x44
 800c066:	e00c      	b.n	800c082 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d106      	bne.n	800c07c <tcp_write+0x464>
 800c06e:	4b53      	ldr	r3, [pc, #332]	; (800c1bc <tcp_write+0x5a4>)
 800c070:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c074:	4955      	ldr	r1, [pc, #340]	; (800c1cc <tcp_write+0x5b4>)
 800c076:	4853      	ldr	r0, [pc, #332]	; (800c1c4 <tcp_write+0x5ac>)
 800c078:	f004 fa12 	bl	80104a0 <iprintf>
      prev_seg->next = seg;
 800c07c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c07e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c080:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800c082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c084:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800c086:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c08a:	8b3b      	ldrh	r3, [r7, #24]
 800c08c:	4413      	add	r3, r2
 800c08e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800c092:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c096:	88fb      	ldrh	r3, [r7, #6]
 800c098:	429a      	cmp	r2, r3
 800c09a:	f4ff af3d 	bcc.w	800bf18 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800c09e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d02c      	beq.n	800c0fe <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800c0a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0aa:	e01e      	b.n	800c0ea <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800c0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ae:	891a      	ldrh	r2, [r3, #8]
 800c0b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c0b2:	4413      	add	r3, r2
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800c0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d110      	bne.n	800c0e4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0c8:	8952      	ldrh	r2, [r2, #10]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c0ce:	68b9      	ldr	r1, [r7, #8]
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f004 f9b5 	bl	8010440 <memcpy>
        p->len += oversize_used;
 800c0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d8:	895a      	ldrh	r2, [r3, #10]
 800c0da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c0dc:	4413      	add	r3, r2
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d1dd      	bne.n	800c0ac <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800c0f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0f2:	891a      	ldrh	r2, [r3, #8]
 800c0f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c0f6:	4413      	add	r3, r2
 800c0f8:	b29a      	uxth	r2, r3
 800c0fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0fc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800c0fe:	8a7a      	ldrh	r2, [r7, #18]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800c106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d018      	beq.n	800c13e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c10c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d106      	bne.n	800c120 <tcp_write+0x508>
 800c112:	4b2a      	ldr	r3, [pc, #168]	; (800c1bc <tcp_write+0x5a4>)
 800c114:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800c118:	492d      	ldr	r1, [pc, #180]	; (800c1d0 <tcp_write+0x5b8>)
 800c11a:	482a      	ldr	r0, [pc, #168]	; (800c1c4 <tcp_write+0x5ac>)
 800c11c:	f004 f9c0 	bl	80104a0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800c120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c126:	4618      	mov	r0, r3
 800c128:	f7fb f8b6 	bl	8007298 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c12c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c12e:	891a      	ldrh	r2, [r3, #8]
 800c130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c132:	891b      	ldrh	r3, [r3, #8]
 800c134:	4413      	add	r3, r2
 800c136:	b29a      	uxth	r2, r3
 800c138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c13a:	811a      	strh	r2, [r3, #8]
 800c13c:	e037      	b.n	800c1ae <tcp_write+0x596>
  } else if (extendlen > 0) {
 800c13e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c140:	2b00      	cmp	r3, #0
 800c142:	d034      	beq.n	800c1ae <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c146:	2b00      	cmp	r3, #0
 800c148:	d003      	beq.n	800c152 <tcp_write+0x53a>
 800c14a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d106      	bne.n	800c160 <tcp_write+0x548>
 800c152:	4b1a      	ldr	r3, [pc, #104]	; (800c1bc <tcp_write+0x5a4>)
 800c154:	f240 22e6 	movw	r2, #742	; 0x2e6
 800c158:	491e      	ldr	r1, [pc, #120]	; (800c1d4 <tcp_write+0x5bc>)
 800c15a:	481a      	ldr	r0, [pc, #104]	; (800c1c4 <tcp_write+0x5ac>)
 800c15c:	f004 f9a0 	bl	80104a0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	62bb      	str	r3, [r7, #40]	; 0x28
 800c166:	e009      	b.n	800c17c <tcp_write+0x564>
      p->tot_len += extendlen;
 800c168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16a:	891a      	ldrh	r2, [r3, #8]
 800c16c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c16e:	4413      	add	r3, r2
 800c170:	b29a      	uxth	r2, r3
 800c172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c174:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1f1      	bne.n	800c168 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800c184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c186:	891a      	ldrh	r2, [r3, #8]
 800c188:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c18a:	4413      	add	r3, r2
 800c18c:	b29a      	uxth	r2, r3
 800c18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c190:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800c192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c194:	895a      	ldrh	r2, [r3, #10]
 800c196:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c198:	4413      	add	r3, r2
 800c19a:	b29a      	uxth	r2, r3
 800c19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800c1a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1a2:	891a      	ldrh	r2, [r3, #8]
 800c1a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c1a6:	4413      	add	r3, r2
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1ac:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800c1ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d111      	bne.n	800c1d8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1b8:	66da      	str	r2, [r3, #108]	; 0x6c
 800c1ba:	e010      	b.n	800c1de <tcp_write+0x5c6>
 800c1bc:	08012fe8 	.word	0x08012fe8
 800c1c0:	08013288 	.word	0x08013288
 800c1c4:	0801303c 	.word	0x0801303c
 800c1c8:	080132c8 	.word	0x080132c8
 800c1cc:	080132d8 	.word	0x080132d8
 800c1d0:	080132ec 	.word	0x080132ec
 800c1d4:	08013324 	.word	0x08013324
  } else {
    last_unsent->next = queue;
 800c1d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1dc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c1e2:	88fb      	ldrh	r3, [r7, #6]
 800c1e4:	441a      	add	r2, r3
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c1f0:	88fb      	ldrh	r3, [r7, #6]
 800c1f2:	1ad3      	subs	r3, r2, r3
 800c1f4:	b29a      	uxth	r2, r3
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c202:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d00e      	beq.n	800c22e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c214:	2b00      	cmp	r3, #0
 800c216:	d10a      	bne.n	800c22e <tcp_write+0x616>
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d106      	bne.n	800c22e <tcp_write+0x616>
 800c220:	4b2c      	ldr	r3, [pc, #176]	; (800c2d4 <tcp_write+0x6bc>)
 800c222:	f240 3212 	movw	r2, #786	; 0x312
 800c226:	492c      	ldr	r1, [pc, #176]	; (800c2d8 <tcp_write+0x6c0>)
 800c228:	482c      	ldr	r0, [pc, #176]	; (800c2dc <tcp_write+0x6c4>)
 800c22a:	f004 f939 	bl	80104a0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c22e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c230:	2b00      	cmp	r3, #0
 800c232:	d016      	beq.n	800c262 <tcp_write+0x64a>
 800c234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c236:	68db      	ldr	r3, [r3, #12]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d012      	beq.n	800c262 <tcp_write+0x64a>
 800c23c:	797b      	ldrb	r3, [r7, #5]
 800c23e:	f003 0302 	and.w	r3, r3, #2
 800c242:	2b00      	cmp	r3, #0
 800c244:	d10d      	bne.n	800c262 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	899b      	ldrh	r3, [r3, #12]
 800c24c:	b29c      	uxth	r4, r3
 800c24e:	2008      	movs	r0, #8
 800c250:	f7f9 fb4a 	bl	80058e8 <lwip_htons>
 800c254:	4603      	mov	r3, r0
 800c256:	461a      	mov	r2, r3
 800c258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	4322      	orrs	r2, r4
 800c25e:	b292      	uxth	r2, r2
 800c260:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800c262:	2300      	movs	r3, #0
 800c264:	e031      	b.n	800c2ca <tcp_write+0x6b2>
          goto memerr;
 800c266:	bf00      	nop
 800c268:	e006      	b.n	800c278 <tcp_write+0x660>
            goto memerr;
 800c26a:	bf00      	nop
 800c26c:	e004      	b.n	800c278 <tcp_write+0x660>
        goto memerr;
 800c26e:	bf00      	nop
 800c270:	e002      	b.n	800c278 <tcp_write+0x660>
        goto memerr;
 800c272:	bf00      	nop
 800c274:	e000      	b.n	800c278 <tcp_write+0x660>
      goto memerr;
 800c276:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	8b5b      	ldrh	r3, [r3, #26]
 800c27c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c280:	b29a      	uxth	r2, r3
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800c286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d002      	beq.n	800c292 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800c28c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c28e:	f7fa ff41 	bl	8007114 <pbuf_free>
  }
  if (queue != NULL) {
 800c292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c294:	2b00      	cmp	r3, #0
 800c296:	d002      	beq.n	800c29e <tcp_write+0x686>
    tcp_segs_free(queue);
 800c298:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c29a:	f7fc fb89 	bl	80089b0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d00e      	beq.n	800c2c6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d10a      	bne.n	800c2c6 <tcp_write+0x6ae>
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d106      	bne.n	800c2c6 <tcp_write+0x6ae>
 800c2b8:	4b06      	ldr	r3, [pc, #24]	; (800c2d4 <tcp_write+0x6bc>)
 800c2ba:	f240 3227 	movw	r2, #807	; 0x327
 800c2be:	4906      	ldr	r1, [pc, #24]	; (800c2d8 <tcp_write+0x6c0>)
 800c2c0:	4806      	ldr	r0, [pc, #24]	; (800c2dc <tcp_write+0x6c4>)
 800c2c2:	f004 f8ed 	bl	80104a0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800c2c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	375c      	adds	r7, #92	; 0x5c
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd90      	pop	{r4, r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	08012fe8 	.word	0x08012fe8
 800c2d8:	0801335c 	.word	0x0801335c
 800c2dc:	0801303c 	.word	0x0801303c

0800c2e0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c2e0:	b590      	push	{r4, r7, lr}
 800c2e2:	b08b      	sub	sp, #44	; 0x2c
 800c2e4:	af02      	add	r7, sp, #8
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	61fb      	str	r3, [r7, #28]
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d106      	bne.n	800c30c <tcp_split_unsent_seg+0x2c>
 800c2fe:	4b95      	ldr	r3, [pc, #596]	; (800c554 <tcp_split_unsent_seg+0x274>)
 800c300:	f240 324b 	movw	r2, #843	; 0x34b
 800c304:	4994      	ldr	r1, [pc, #592]	; (800c558 <tcp_split_unsent_seg+0x278>)
 800c306:	4895      	ldr	r0, [pc, #596]	; (800c55c <tcp_split_unsent_seg+0x27c>)
 800c308:	f004 f8ca 	bl	80104a0 <iprintf>

  useg = pcb->unsent;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c310:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d102      	bne.n	800c31e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c318:	f04f 33ff 	mov.w	r3, #4294967295
 800c31c:	e116      	b.n	800c54c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c31e:	887b      	ldrh	r3, [r7, #2]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d109      	bne.n	800c338 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c324:	4b8b      	ldr	r3, [pc, #556]	; (800c554 <tcp_split_unsent_seg+0x274>)
 800c326:	f240 3253 	movw	r2, #851	; 0x353
 800c32a:	498d      	ldr	r1, [pc, #564]	; (800c560 <tcp_split_unsent_seg+0x280>)
 800c32c:	488b      	ldr	r0, [pc, #556]	; (800c55c <tcp_split_unsent_seg+0x27c>)
 800c32e:	f004 f8b7 	bl	80104a0 <iprintf>
    return ERR_VAL;
 800c332:	f06f 0305 	mvn.w	r3, #5
 800c336:	e109      	b.n	800c54c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	891b      	ldrh	r3, [r3, #8]
 800c33c:	887a      	ldrh	r2, [r7, #2]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d301      	bcc.n	800c346 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c342:	2300      	movs	r3, #0
 800c344:	e102      	b.n	800c54c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c34a:	887a      	ldrh	r2, [r7, #2]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d906      	bls.n	800c35e <tcp_split_unsent_seg+0x7e>
 800c350:	4b80      	ldr	r3, [pc, #512]	; (800c554 <tcp_split_unsent_seg+0x274>)
 800c352:	f240 325b 	movw	r2, #859	; 0x35b
 800c356:	4983      	ldr	r1, [pc, #524]	; (800c564 <tcp_split_unsent_seg+0x284>)
 800c358:	4880      	ldr	r0, [pc, #512]	; (800c55c <tcp_split_unsent_seg+0x27c>)
 800c35a:	f004 f8a1 	bl	80104a0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	891b      	ldrh	r3, [r3, #8]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d106      	bne.n	800c374 <tcp_split_unsent_seg+0x94>
 800c366:	4b7b      	ldr	r3, [pc, #492]	; (800c554 <tcp_split_unsent_seg+0x274>)
 800c368:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c36c:	497e      	ldr	r1, [pc, #504]	; (800c568 <tcp_split_unsent_seg+0x288>)
 800c36e:	487b      	ldr	r0, [pc, #492]	; (800c55c <tcp_split_unsent_seg+0x27c>)
 800c370:	f004 f896 	bl	80104a0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	7a9b      	ldrb	r3, [r3, #10]
 800c378:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c37a:	7bfb      	ldrb	r3, [r7, #15]
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	f003 0304 	and.w	r3, r3, #4
 800c384:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	891a      	ldrh	r2, [r3, #8]
 800c38a:	887b      	ldrh	r3, [r7, #2]
 800c38c:	1ad3      	subs	r3, r2, r3
 800c38e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c390:	7bbb      	ldrb	r3, [r7, #14]
 800c392:	b29a      	uxth	r2, r3
 800c394:	89bb      	ldrh	r3, [r7, #12]
 800c396:	4413      	add	r3, r2
 800c398:	b29b      	uxth	r3, r3
 800c39a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c39e:	4619      	mov	r1, r3
 800c3a0:	2036      	movs	r0, #54	; 0x36
 800c3a2:	f7fa fbd3 	bl	8006b4c <pbuf_alloc>
 800c3a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	f000 80b7 	beq.w	800c51e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	891a      	ldrh	r2, [r3, #8]
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	891b      	ldrh	r3, [r3, #8]
 800c3ba:	1ad3      	subs	r3, r2, r3
 800c3bc:	b29a      	uxth	r2, r3
 800c3be:	887b      	ldrh	r3, [r7, #2]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	6858      	ldr	r0, [r3, #4]
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	685a      	ldr	r2, [r3, #4]
 800c3cc:	7bbb      	ldrb	r3, [r7, #14]
 800c3ce:	18d1      	adds	r1, r2, r3
 800c3d0:	897b      	ldrh	r3, [r7, #10]
 800c3d2:	89ba      	ldrh	r2, [r7, #12]
 800c3d4:	f7fb f888 	bl	80074e8 <pbuf_copy_partial>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	461a      	mov	r2, r3
 800c3dc:	89bb      	ldrh	r3, [r7, #12]
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	f040 809f 	bne.w	800c522 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	899b      	ldrh	r3, [r3, #12]
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7f9 fa7b 	bl	80058e8 <lwip_htons>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3fa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c400:	7efb      	ldrb	r3, [r7, #27]
 800c402:	f003 0308 	and.w	r3, r3, #8
 800c406:	2b00      	cmp	r3, #0
 800c408:	d007      	beq.n	800c41a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c40a:	7efb      	ldrb	r3, [r7, #27]
 800c40c:	f023 0308 	bic.w	r3, r3, #8
 800c410:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c412:	7ebb      	ldrb	r3, [r7, #26]
 800c414:	f043 0308 	orr.w	r3, r3, #8
 800c418:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c41a:	7efb      	ldrb	r3, [r7, #27]
 800c41c:	f003 0301 	and.w	r3, r3, #1
 800c420:	2b00      	cmp	r3, #0
 800c422:	d007      	beq.n	800c434 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c424:	7efb      	ldrb	r3, [r7, #27]
 800c426:	f023 0301 	bic.w	r3, r3, #1
 800c42a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c42c:	7ebb      	ldrb	r3, [r7, #26]
 800c42e:	f043 0301 	orr.w	r3, r3, #1
 800c432:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7f9 fa69 	bl	8005912 <lwip_htonl>
 800c440:	4602      	mov	r2, r0
 800c442:	887b      	ldrh	r3, [r7, #2]
 800c444:	18d1      	adds	r1, r2, r3
 800c446:	7eba      	ldrb	r2, [r7, #26]
 800c448:	7bfb      	ldrb	r3, [r7, #15]
 800c44a:	9300      	str	r3, [sp, #0]
 800c44c:	460b      	mov	r3, r1
 800c44e:	6939      	ldr	r1, [r7, #16]
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f7ff fa4f 	bl	800b8f4 <tcp_create_segment>
 800c456:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d063      	beq.n	800c526 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	4618      	mov	r0, r3
 800c464:	f7fa fede 	bl	8007224 <pbuf_clen>
 800c468:	4603      	mov	r3, r0
 800c46a:	461a      	mov	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c472:	1a9b      	subs	r3, r3, r2
 800c474:	b29a      	uxth	r2, r3
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	6858      	ldr	r0, [r3, #4]
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	891a      	ldrh	r2, [r3, #8]
 800c486:	89bb      	ldrh	r3, [r7, #12]
 800c488:	1ad3      	subs	r3, r2, r3
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	4619      	mov	r1, r3
 800c48e:	f7fa fcbb 	bl	8006e08 <pbuf_realloc>
  useg->len -= remainder;
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	891a      	ldrh	r2, [r3, #8]
 800c496:	89bb      	ldrh	r3, [r7, #12]
 800c498:	1ad3      	subs	r3, r2, r3
 800c49a:	b29a      	uxth	r2, r3
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	899b      	ldrh	r3, [r3, #12]
 800c4a6:	b29c      	uxth	r4, r3
 800c4a8:	7efb      	ldrb	r3, [r7, #27]
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7f9 fa1b 	bl	80058e8 <lwip_htons>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	68db      	ldr	r3, [r3, #12]
 800c4ba:	4322      	orrs	r2, r4
 800c4bc:	b292      	uxth	r2, r2
 800c4be:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7fa fead 	bl	8007224 <pbuf_clen>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c4d4:	4413      	add	r3, r2
 800c4d6:	b29a      	uxth	r2, r3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7fa fe9e 	bl	8007224 <pbuf_clen>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c4f2:	4413      	add	r3, r2
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	69fa      	ldr	r2, [r7, #28]
 800c508:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d103      	bne.n	800c51a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c51a:	2300      	movs	r3, #0
 800c51c:	e016      	b.n	800c54c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c51e:	bf00      	nop
 800c520:	e002      	b.n	800c528 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c522:	bf00      	nop
 800c524:	e000      	b.n	800c528 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c526:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d006      	beq.n	800c53c <tcp_split_unsent_seg+0x25c>
 800c52e:	4b09      	ldr	r3, [pc, #36]	; (800c554 <tcp_split_unsent_seg+0x274>)
 800c530:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c534:	490d      	ldr	r1, [pc, #52]	; (800c56c <tcp_split_unsent_seg+0x28c>)
 800c536:	4809      	ldr	r0, [pc, #36]	; (800c55c <tcp_split_unsent_seg+0x27c>)
 800c538:	f003 ffb2 	bl	80104a0 <iprintf>
  if (p != NULL) {
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d002      	beq.n	800c548 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c542:	6938      	ldr	r0, [r7, #16]
 800c544:	f7fa fde6 	bl	8007114 <pbuf_free>
  }

  return ERR_MEM;
 800c548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3724      	adds	r7, #36	; 0x24
 800c550:	46bd      	mov	sp, r7
 800c552:	bd90      	pop	{r4, r7, pc}
 800c554:	08012fe8 	.word	0x08012fe8
 800c558:	0801337c 	.word	0x0801337c
 800c55c:	0801303c 	.word	0x0801303c
 800c560:	080133a0 	.word	0x080133a0
 800c564:	080133c4 	.word	0x080133c4
 800c568:	080133d4 	.word	0x080133d4
 800c56c:	080133e4 	.word	0x080133e4

0800c570 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c570:	b590      	push	{r4, r7, lr}
 800c572:	b085      	sub	sp, #20
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d106      	bne.n	800c58c <tcp_send_fin+0x1c>
 800c57e:	4b21      	ldr	r3, [pc, #132]	; (800c604 <tcp_send_fin+0x94>)
 800c580:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c584:	4920      	ldr	r1, [pc, #128]	; (800c608 <tcp_send_fin+0x98>)
 800c586:	4821      	ldr	r0, [pc, #132]	; (800c60c <tcp_send_fin+0x9c>)
 800c588:	f003 ff8a 	bl	80104a0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c590:	2b00      	cmp	r3, #0
 800c592:	d02e      	beq.n	800c5f2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c598:	60fb      	str	r3, [r7, #12]
 800c59a:	e002      	b.n	800c5a2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d1f8      	bne.n	800c59c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	899b      	ldrh	r3, [r3, #12]
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7f9 f998 	bl	80058e8 <lwip_htons>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	f003 0307 	and.w	r3, r3, #7
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d116      	bne.n	800c5f2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	68db      	ldr	r3, [r3, #12]
 800c5c8:	899b      	ldrh	r3, [r3, #12]
 800c5ca:	b29c      	uxth	r4, r3
 800c5cc:	2001      	movs	r0, #1
 800c5ce:	f7f9 f98b 	bl	80058e8 <lwip_htons>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	4322      	orrs	r2, r4
 800c5dc:	b292      	uxth	r2, r2
 800c5de:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	8b5b      	ldrh	r3, [r3, #26]
 800c5e4:	f043 0320 	orr.w	r3, r3, #32
 800c5e8:	b29a      	uxth	r2, r3
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	e004      	b.n	800c5fc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c5f2:	2101      	movs	r1, #1
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 f80b 	bl	800c610 <tcp_enqueue_flags>
 800c5fa:	4603      	mov	r3, r0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3714      	adds	r7, #20
 800c600:	46bd      	mov	sp, r7
 800c602:	bd90      	pop	{r4, r7, pc}
 800c604:	08012fe8 	.word	0x08012fe8
 800c608:	080133f0 	.word	0x080133f0
 800c60c:	0801303c 	.word	0x0801303c

0800c610 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b08a      	sub	sp, #40	; 0x28
 800c614:	af02      	add	r7, sp, #8
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	460b      	mov	r3, r1
 800c61a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c61c:	2300      	movs	r3, #0
 800c61e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c620:	2300      	movs	r3, #0
 800c622:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c624:	78fb      	ldrb	r3, [r7, #3]
 800c626:	f003 0303 	and.w	r3, r3, #3
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d106      	bne.n	800c63c <tcp_enqueue_flags+0x2c>
 800c62e:	4b67      	ldr	r3, [pc, #412]	; (800c7cc <tcp_enqueue_flags+0x1bc>)
 800c630:	f240 4211 	movw	r2, #1041	; 0x411
 800c634:	4966      	ldr	r1, [pc, #408]	; (800c7d0 <tcp_enqueue_flags+0x1c0>)
 800c636:	4867      	ldr	r0, [pc, #412]	; (800c7d4 <tcp_enqueue_flags+0x1c4>)
 800c638:	f003 ff32 	bl	80104a0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d106      	bne.n	800c650 <tcp_enqueue_flags+0x40>
 800c642:	4b62      	ldr	r3, [pc, #392]	; (800c7cc <tcp_enqueue_flags+0x1bc>)
 800c644:	f240 4213 	movw	r2, #1043	; 0x413
 800c648:	4963      	ldr	r1, [pc, #396]	; (800c7d8 <tcp_enqueue_flags+0x1c8>)
 800c64a:	4862      	ldr	r0, [pc, #392]	; (800c7d4 <tcp_enqueue_flags+0x1c4>)
 800c64c:	f003 ff28 	bl	80104a0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c650:	78fb      	ldrb	r3, [r7, #3]
 800c652:	f003 0302 	and.w	r3, r3, #2
 800c656:	2b00      	cmp	r3, #0
 800c658:	d001      	beq.n	800c65e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c65a:	2301      	movs	r3, #1
 800c65c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c65e:	7ffb      	ldrb	r3, [r7, #31]
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	b2db      	uxtb	r3, r3
 800c664:	f003 0304 	and.w	r3, r3, #4
 800c668:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c66a:	7dfb      	ldrb	r3, [r7, #23]
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c672:	4619      	mov	r1, r3
 800c674:	2036      	movs	r0, #54	; 0x36
 800c676:	f7fa fa69 	bl	8006b4c <pbuf_alloc>
 800c67a:	6138      	str	r0, [r7, #16]
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d109      	bne.n	800c696 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	8b5b      	ldrh	r3, [r3, #26]
 800c686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c68a:	b29a      	uxth	r2, r3
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c690:	f04f 33ff 	mov.w	r3, #4294967295
 800c694:	e095      	b.n	800c7c2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	895a      	ldrh	r2, [r3, #10]
 800c69a:	7dfb      	ldrb	r3, [r7, #23]
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d206      	bcs.n	800c6b0 <tcp_enqueue_flags+0xa0>
 800c6a2:	4b4a      	ldr	r3, [pc, #296]	; (800c7cc <tcp_enqueue_flags+0x1bc>)
 800c6a4:	f240 4239 	movw	r2, #1081	; 0x439
 800c6a8:	494c      	ldr	r1, [pc, #304]	; (800c7dc <tcp_enqueue_flags+0x1cc>)
 800c6aa:	484a      	ldr	r0, [pc, #296]	; (800c7d4 <tcp_enqueue_flags+0x1c4>)
 800c6ac:	f003 fef8 	bl	80104a0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c6b4:	78fa      	ldrb	r2, [r7, #3]
 800c6b6:	7ffb      	ldrb	r3, [r7, #31]
 800c6b8:	9300      	str	r3, [sp, #0]
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	6939      	ldr	r1, [r7, #16]
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f7ff f918 	bl	800b8f4 <tcp_create_segment>
 800c6c4:	60f8      	str	r0, [r7, #12]
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d109      	bne.n	800c6e0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	8b5b      	ldrh	r3, [r3, #26]
 800c6d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6d4:	b29a      	uxth	r2, r3
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c6da:	f04f 33ff 	mov.w	r3, #4294967295
 800c6de:	e070      	b.n	800c7c2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	f003 0303 	and.w	r3, r3, #3
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d006      	beq.n	800c6fa <tcp_enqueue_flags+0xea>
 800c6ec:	4b37      	ldr	r3, [pc, #220]	; (800c7cc <tcp_enqueue_flags+0x1bc>)
 800c6ee:	f240 4242 	movw	r2, #1090	; 0x442
 800c6f2:	493b      	ldr	r1, [pc, #236]	; (800c7e0 <tcp_enqueue_flags+0x1d0>)
 800c6f4:	4837      	ldr	r0, [pc, #220]	; (800c7d4 <tcp_enqueue_flags+0x1c4>)
 800c6f6:	f003 fed3 	bl	80104a0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	891b      	ldrh	r3, [r3, #8]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d006      	beq.n	800c710 <tcp_enqueue_flags+0x100>
 800c702:	4b32      	ldr	r3, [pc, #200]	; (800c7cc <tcp_enqueue_flags+0x1bc>)
 800c704:	f240 4243 	movw	r2, #1091	; 0x443
 800c708:	4936      	ldr	r1, [pc, #216]	; (800c7e4 <tcp_enqueue_flags+0x1d4>)
 800c70a:	4832      	ldr	r0, [pc, #200]	; (800c7d4 <tcp_enqueue_flags+0x1c4>)
 800c70c:	f003 fec8 	bl	80104a0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c714:	2b00      	cmp	r3, #0
 800c716:	d103      	bne.n	800c720 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	66da      	str	r2, [r3, #108]	; 0x6c
 800c71e:	e00d      	b.n	800c73c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c724:	61bb      	str	r3, [r7, #24]
 800c726:	e002      	b.n	800c72e <tcp_enqueue_flags+0x11e>
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	61bb      	str	r3, [r7, #24]
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1f8      	bne.n	800c728 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c744:	78fb      	ldrb	r3, [r7, #3]
 800c746:	f003 0302 	and.w	r3, r3, #2
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d104      	bne.n	800c758 <tcp_enqueue_flags+0x148>
 800c74e:	78fb      	ldrb	r3, [r7, #3]
 800c750:	f003 0301 	and.w	r3, r3, #1
 800c754:	2b00      	cmp	r3, #0
 800c756:	d004      	beq.n	800c762 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c75c:	1c5a      	adds	r2, r3, #1
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c762:	78fb      	ldrb	r3, [r7, #3]
 800c764:	f003 0301 	and.w	r3, r3, #1
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d006      	beq.n	800c77a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	8b5b      	ldrh	r3, [r3, #26]
 800c770:	f043 0320 	orr.w	r3, r3, #32
 800c774:	b29a      	uxth	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	4618      	mov	r0, r3
 800c780:	f7fa fd50 	bl	8007224 <pbuf_clen>
 800c784:	4603      	mov	r3, r0
 800c786:	461a      	mov	r2, r3
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c78e:	4413      	add	r3, r2
 800c790:	b29a      	uxth	r2, r3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00e      	beq.n	800c7c0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d10a      	bne.n	800c7c0 <tcp_enqueue_flags+0x1b0>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d106      	bne.n	800c7c0 <tcp_enqueue_flags+0x1b0>
 800c7b2:	4b06      	ldr	r3, [pc, #24]	; (800c7cc <tcp_enqueue_flags+0x1bc>)
 800c7b4:	f240 4265 	movw	r2, #1125	; 0x465
 800c7b8:	490b      	ldr	r1, [pc, #44]	; (800c7e8 <tcp_enqueue_flags+0x1d8>)
 800c7ba:	4806      	ldr	r0, [pc, #24]	; (800c7d4 <tcp_enqueue_flags+0x1c4>)
 800c7bc:	f003 fe70 	bl	80104a0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c7c0:	2300      	movs	r3, #0
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3720      	adds	r7, #32
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	08012fe8 	.word	0x08012fe8
 800c7d0:	0801340c 	.word	0x0801340c
 800c7d4:	0801303c 	.word	0x0801303c
 800c7d8:	08013464 	.word	0x08013464
 800c7dc:	08013484 	.word	0x08013484
 800c7e0:	080134c0 	.word	0x080134c0
 800c7e4:	080134d8 	.word	0x080134d8
 800c7e8:	08013504 	.word	0x08013504

0800c7ec <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c7ec:	b5b0      	push	{r4, r5, r7, lr}
 800c7ee:	b08a      	sub	sp, #40	; 0x28
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d106      	bne.n	800c808 <tcp_output+0x1c>
 800c7fa:	4b8a      	ldr	r3, [pc, #552]	; (800ca24 <tcp_output+0x238>)
 800c7fc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c800:	4989      	ldr	r1, [pc, #548]	; (800ca28 <tcp_output+0x23c>)
 800c802:	488a      	ldr	r0, [pc, #552]	; (800ca2c <tcp_output+0x240>)
 800c804:	f003 fe4c 	bl	80104a0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	7d1b      	ldrb	r3, [r3, #20]
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d106      	bne.n	800c81e <tcp_output+0x32>
 800c810:	4b84      	ldr	r3, [pc, #528]	; (800ca24 <tcp_output+0x238>)
 800c812:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c816:	4986      	ldr	r1, [pc, #536]	; (800ca30 <tcp_output+0x244>)
 800c818:	4884      	ldr	r0, [pc, #528]	; (800ca2c <tcp_output+0x240>)
 800c81a:	f003 fe41 	bl	80104a0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c81e:	4b85      	ldr	r3, [pc, #532]	; (800ca34 <tcp_output+0x248>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	429a      	cmp	r2, r3
 800c826:	d101      	bne.n	800c82c <tcp_output+0x40>
    return ERR_OK;
 800c828:	2300      	movs	r3, #0
 800c82a:	e1ce      	b.n	800cbca <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c838:	4293      	cmp	r3, r2
 800c83a:	bf28      	it	cs
 800c83c:	4613      	movcs	r3, r2
 800c83e:	b29b      	uxth	r3, r3
 800c840:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c846:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d10b      	bne.n	800c866 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	8b5b      	ldrh	r3, [r3, #26]
 800c852:	f003 0302 	and.w	r3, r3, #2
 800c856:	2b00      	cmp	r3, #0
 800c858:	f000 81aa 	beq.w	800cbb0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 fdcb 	bl	800d3f8 <tcp_send_empty_ack>
 800c862:	4603      	mov	r3, r0
 800c864:	e1b1      	b.n	800cbca <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c866:	6879      	ldr	r1, [r7, #4]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	3304      	adds	r3, #4
 800c86c:	461a      	mov	r2, r3
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f7ff f824 	bl	800b8bc <tcp_route>
 800c874:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d102      	bne.n	800c882 <tcp_output+0x96>
    return ERR_RTE;
 800c87c:	f06f 0303 	mvn.w	r3, #3
 800c880:	e1a3      	b.n	800cbca <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d003      	beq.n	800c890 <tcp_output+0xa4>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d111      	bne.n	800c8b4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d002      	beq.n	800c89c <tcp_output+0xb0>
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	3304      	adds	r3, #4
 800c89a:	e000      	b.n	800c89e <tcp_output+0xb2>
 800c89c:	2300      	movs	r3, #0
 800c89e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d102      	bne.n	800c8ac <tcp_output+0xc0>
      return ERR_RTE;
 800c8a6:	f06f 0303 	mvn.w	r3, #3
 800c8aa:	e18e      	b.n	800cbca <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	681a      	ldr	r2, [r3, #0]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7f9 f829 	bl	8005912 <lwip_htonl>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8c6:	1ad3      	subs	r3, r2, r3
 800c8c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8ca:	8912      	ldrh	r2, [r2, #8]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	69ba      	ldr	r2, [r7, #24]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d227      	bcs.n	800c924 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c8da:	461a      	mov	r2, r3
 800c8dc:	69bb      	ldr	r3, [r7, #24]
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d114      	bne.n	800c90c <tcp_output+0x120>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d110      	bne.n	800c90c <tcp_output+0x120>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d10b      	bne.n	800c90c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2201      	movs	r2, #1
 800c900:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2200      	movs	r2, #0
 800c908:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	8b5b      	ldrh	r3, [r3, #26]
 800c910:	f003 0302 	and.w	r3, r3, #2
 800c914:	2b00      	cmp	r3, #0
 800c916:	f000 814d 	beq.w	800cbb4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fd6c 	bl	800d3f8 <tcp_send_empty_ack>
 800c920:	4603      	mov	r3, r0
 800c922:	e152      	b.n	800cbca <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2200      	movs	r2, #0
 800c928:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c930:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c932:	6a3b      	ldr	r3, [r7, #32]
 800c934:	2b00      	cmp	r3, #0
 800c936:	f000 811c 	beq.w	800cb72 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c93a:	e002      	b.n	800c942 <tcp_output+0x156>
 800c93c:	6a3b      	ldr	r3, [r7, #32]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	623b      	str	r3, [r7, #32]
 800c942:	6a3b      	ldr	r3, [r7, #32]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1f8      	bne.n	800c93c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c94a:	e112      	b.n	800cb72 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94e:	68db      	ldr	r3, [r3, #12]
 800c950:	899b      	ldrh	r3, [r3, #12]
 800c952:	b29b      	uxth	r3, r3
 800c954:	4618      	mov	r0, r3
 800c956:	f7f8 ffc7 	bl	80058e8 <lwip_htons>
 800c95a:	4603      	mov	r3, r0
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	f003 0304 	and.w	r3, r3, #4
 800c962:	2b00      	cmp	r3, #0
 800c964:	d006      	beq.n	800c974 <tcp_output+0x188>
 800c966:	4b2f      	ldr	r3, [pc, #188]	; (800ca24 <tcp_output+0x238>)
 800c968:	f240 5236 	movw	r2, #1334	; 0x536
 800c96c:	4932      	ldr	r1, [pc, #200]	; (800ca38 <tcp_output+0x24c>)
 800c96e:	482f      	ldr	r0, [pc, #188]	; (800ca2c <tcp_output+0x240>)
 800c970:	f003 fd96 	bl	80104a0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d01f      	beq.n	800c9bc <tcp_output+0x1d0>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	8b5b      	ldrh	r3, [r3, #26]
 800c980:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c984:	2b00      	cmp	r3, #0
 800c986:	d119      	bne.n	800c9bc <tcp_output+0x1d0>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d00b      	beq.n	800c9a8 <tcp_output+0x1bc>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d110      	bne.n	800c9bc <tcp_output+0x1d0>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c99e:	891a      	ldrh	r2, [r3, #8]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d209      	bcs.n	800c9bc <tcp_output+0x1d0>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d004      	beq.n	800c9bc <tcp_output+0x1d0>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c9b8:	2b08      	cmp	r3, #8
 800c9ba:	d901      	bls.n	800c9c0 <tcp_output+0x1d4>
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e000      	b.n	800c9c2 <tcp_output+0x1d6>
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d106      	bne.n	800c9d4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	8b5b      	ldrh	r3, [r3, #26]
 800c9ca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	f000 80e4 	beq.w	800cb9c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	7d1b      	ldrb	r3, [r3, #20]
 800c9d8:	2b02      	cmp	r3, #2
 800c9da:	d00d      	beq.n	800c9f8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	899b      	ldrh	r3, [r3, #12]
 800c9e2:	b29c      	uxth	r4, r3
 800c9e4:	2010      	movs	r0, #16
 800c9e6:	f7f8 ff7f 	bl	80058e8 <lwip_htons>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	4322      	orrs	r2, r4
 800c9f4:	b292      	uxth	r2, r2
 800c9f6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c9f8:	697a      	ldr	r2, [r7, #20]
 800c9fa:	6879      	ldr	r1, [r7, #4]
 800c9fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9fe:	f000 f909 	bl	800cc14 <tcp_output_segment>
 800ca02:	4603      	mov	r3, r0
 800ca04:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ca06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d016      	beq.n	800ca3c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	8b5b      	ldrh	r3, [r3, #26]
 800ca12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca16:	b29a      	uxth	r2, r3
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	835a      	strh	r2, [r3, #26]
      return err;
 800ca1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca20:	e0d3      	b.n	800cbca <tcp_output+0x3de>
 800ca22:	bf00      	nop
 800ca24:	08012fe8 	.word	0x08012fe8
 800ca28:	0801352c 	.word	0x0801352c
 800ca2c:	0801303c 	.word	0x0801303c
 800ca30:	08013544 	.word	0x08013544
 800ca34:	240031d4 	.word	0x240031d4
 800ca38:	0801356c 	.word	0x0801356c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ca3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3e:	681a      	ldr	r2, [r3, #0]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	7d1b      	ldrb	r3, [r3, #20]
 800ca48:	2b02      	cmp	r3, #2
 800ca4a:	d006      	beq.n	800ca5a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	8b5b      	ldrh	r3, [r3, #26]
 800ca50:	f023 0303 	bic.w	r3, r3, #3
 800ca54:	b29a      	uxth	r2, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ca5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7f8 ff56 	bl	8005912 <lwip_htonl>
 800ca66:	4604      	mov	r4, r0
 800ca68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6a:	891b      	ldrh	r3, [r3, #8]
 800ca6c:	461d      	mov	r5, r3
 800ca6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	899b      	ldrh	r3, [r3, #12]
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7f8 ff36 	bl	80058e8 <lwip_htons>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	f003 0303 	and.w	r3, r3, #3
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d001      	beq.n	800ca8c <tcp_output+0x2a0>
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e000      	b.n	800ca8e <tcp_output+0x2a2>
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	442b      	add	r3, r5
 800ca90:	4423      	add	r3, r4
 800ca92:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	1ad3      	subs	r3, r2, r3
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	da02      	bge.n	800caa6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	68ba      	ldr	r2, [r7, #8]
 800caa4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800caa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa8:	891b      	ldrh	r3, [r3, #8]
 800caaa:	461c      	mov	r4, r3
 800caac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caae:	68db      	ldr	r3, [r3, #12]
 800cab0:	899b      	ldrh	r3, [r3, #12]
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7f8 ff17 	bl	80058e8 <lwip_htons>
 800caba:	4603      	mov	r3, r0
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	f003 0303 	and.w	r3, r3, #3
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d001      	beq.n	800caca <tcp_output+0x2de>
 800cac6:	2301      	movs	r3, #1
 800cac8:	e000      	b.n	800cacc <tcp_output+0x2e0>
 800caca:	2300      	movs	r3, #0
 800cacc:	4423      	add	r3, r4
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d049      	beq.n	800cb66 <tcp_output+0x37a>
      seg->next = NULL;
 800cad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad4:	2200      	movs	r2, #0
 800cad6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d105      	bne.n	800caec <tcp_output+0x300>
        pcb->unacked = seg;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cae4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800cae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae8:	623b      	str	r3, [r7, #32]
 800caea:	e03f      	b.n	800cb6c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800caec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caee:	68db      	ldr	r3, [r3, #12]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7f8 ff0d 	bl	8005912 <lwip_htonl>
 800caf8:	4604      	mov	r4, r0
 800cafa:	6a3b      	ldr	r3, [r7, #32]
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7f8 ff06 	bl	8005912 <lwip_htonl>
 800cb06:	4603      	mov	r3, r0
 800cb08:	1ae3      	subs	r3, r4, r3
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	da24      	bge.n	800cb58 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	3370      	adds	r3, #112	; 0x70
 800cb12:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800cb14:	e002      	b.n	800cb1c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800cb16:	69fb      	ldr	r3, [r7, #28]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d011      	beq.n	800cb48 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cb24:	69fb      	ldr	r3, [r7, #28]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f7f8 fef0 	bl	8005912 <lwip_htonl>
 800cb32:	4604      	mov	r4, r0
 800cb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb36:	68db      	ldr	r3, [r3, #12]
 800cb38:	685b      	ldr	r3, [r3, #4]
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7f8 fee9 	bl	8005912 <lwip_htonl>
 800cb40:	4603      	mov	r3, r0
 800cb42:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	dbe6      	blt.n	800cb16 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800cb48:	69fb      	ldr	r3, [r7, #28]
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb54:	601a      	str	r2, [r3, #0]
 800cb56:	e009      	b.n	800cb6c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800cb58:	6a3b      	ldr	r3, [r7, #32]
 800cb5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb5c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800cb5e:	6a3b      	ldr	r3, [r7, #32]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	623b      	str	r3, [r7, #32]
 800cb64:	e002      	b.n	800cb6c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800cb66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb68:	f7fb ff37 	bl	80089da <tcp_seg_free>
    }
    seg = pcb->unsent;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb70:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800cb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d012      	beq.n	800cb9e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7f8 fec7 	bl	8005912 <lwip_htonl>
 800cb84:	4602      	mov	r2, r0
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb8a:	1ad3      	subs	r3, r2, r3
 800cb8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb8e:	8912      	ldrh	r2, [r2, #8]
 800cb90:	4413      	add	r3, r2
  while (seg != NULL &&
 800cb92:	69ba      	ldr	r2, [r7, #24]
 800cb94:	429a      	cmp	r2, r3
 800cb96:	f4bf aed9 	bcs.w	800c94c <tcp_output+0x160>
 800cb9a:	e000      	b.n	800cb9e <tcp_output+0x3b2>
      break;
 800cb9c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d108      	bne.n	800cbb8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800cbae:	e004      	b.n	800cbba <tcp_output+0x3ce>
    goto output_done;
 800cbb0:	bf00      	nop
 800cbb2:	e002      	b.n	800cbba <tcp_output+0x3ce>
    goto output_done;
 800cbb4:	bf00      	nop
 800cbb6:	e000      	b.n	800cbba <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800cbb8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	8b5b      	ldrh	r3, [r3, #26]
 800cbbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800cbc8:	2300      	movs	r3, #0
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3728      	adds	r7, #40	; 0x28
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bdb0      	pop	{r4, r5, r7, pc}
 800cbd2:	bf00      	nop

0800cbd4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d106      	bne.n	800cbf0 <tcp_output_segment_busy+0x1c>
 800cbe2:	4b09      	ldr	r3, [pc, #36]	; (800cc08 <tcp_output_segment_busy+0x34>)
 800cbe4:	f240 529a 	movw	r2, #1434	; 0x59a
 800cbe8:	4908      	ldr	r1, [pc, #32]	; (800cc0c <tcp_output_segment_busy+0x38>)
 800cbea:	4809      	ldr	r0, [pc, #36]	; (800cc10 <tcp_output_segment_busy+0x3c>)
 800cbec:	f003 fc58 	bl	80104a0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	685b      	ldr	r3, [r3, #4]
 800cbf4:	7b9b      	ldrb	r3, [r3, #14]
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	d001      	beq.n	800cbfe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	e000      	b.n	800cc00 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800cbfe:	2300      	movs	r3, #0
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3708      	adds	r7, #8
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	08012fe8 	.word	0x08012fe8
 800cc0c:	08013584 	.word	0x08013584
 800cc10:	0801303c 	.word	0x0801303c

0800cc14 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800cc14:	b5b0      	push	{r4, r5, r7, lr}
 800cc16:	b08c      	sub	sp, #48	; 0x30
 800cc18:	af04      	add	r7, sp, #16
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d106      	bne.n	800cc34 <tcp_output_segment+0x20>
 800cc26:	4b63      	ldr	r3, [pc, #396]	; (800cdb4 <tcp_output_segment+0x1a0>)
 800cc28:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800cc2c:	4962      	ldr	r1, [pc, #392]	; (800cdb8 <tcp_output_segment+0x1a4>)
 800cc2e:	4863      	ldr	r0, [pc, #396]	; (800cdbc <tcp_output_segment+0x1a8>)
 800cc30:	f003 fc36 	bl	80104a0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d106      	bne.n	800cc48 <tcp_output_segment+0x34>
 800cc3a:	4b5e      	ldr	r3, [pc, #376]	; (800cdb4 <tcp_output_segment+0x1a0>)
 800cc3c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800cc40:	495f      	ldr	r1, [pc, #380]	; (800cdc0 <tcp_output_segment+0x1ac>)
 800cc42:	485e      	ldr	r0, [pc, #376]	; (800cdbc <tcp_output_segment+0x1a8>)
 800cc44:	f003 fc2c 	bl	80104a0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d106      	bne.n	800cc5c <tcp_output_segment+0x48>
 800cc4e:	4b59      	ldr	r3, [pc, #356]	; (800cdb4 <tcp_output_segment+0x1a0>)
 800cc50:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800cc54:	495b      	ldr	r1, [pc, #364]	; (800cdc4 <tcp_output_segment+0x1b0>)
 800cc56:	4859      	ldr	r0, [pc, #356]	; (800cdbc <tcp_output_segment+0x1a8>)
 800cc58:	f003 fc22 	bl	80104a0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800cc5c:	68f8      	ldr	r0, [r7, #12]
 800cc5e:	f7ff ffb9 	bl	800cbd4 <tcp_output_segment_busy>
 800cc62:	4603      	mov	r3, r0
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d001      	beq.n	800cc6c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	e09f      	b.n	800cdac <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	68dc      	ldr	r4, [r3, #12]
 800cc74:	4610      	mov	r0, r2
 800cc76:	f7f8 fe4c 	bl	8005912 <lwip_htonl>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	68dc      	ldr	r4, [r3, #12]
 800cc86:	4610      	mov	r0, r2
 800cc88:	f7f8 fe2e 	bl	80058e8 <lwip_htons>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc94:	68ba      	ldr	r2, [r7, #8]
 800cc96:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cc98:	441a      	add	r2, r3
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	68db      	ldr	r3, [r3, #12]
 800cca2:	3314      	adds	r3, #20
 800cca4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	7a9b      	ldrb	r3, [r3, #10]
 800ccaa:	f003 0301 	and.w	r3, r3, #1
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d015      	beq.n	800ccde <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	3304      	adds	r3, #4
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	6879      	ldr	r1, [r7, #4]
 800ccba:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ccbe:	f7fc fa33 	bl	8009128 <tcp_eff_send_mss_netif>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ccc6:	8b7b      	ldrh	r3, [r7, #26]
 800ccc8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7f8 fe20 	bl	8005912 <lwip_htonl>
 800ccd2:	4602      	mov	r2, r0
 800ccd4:	69fb      	ldr	r3, [r7, #28]
 800ccd6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	3304      	adds	r3, #4
 800ccdc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	da02      	bge.n	800ccee <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	2200      	movs	r2, #0
 800ccec:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d10c      	bne.n	800cd10 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ccf6:	4b34      	ldr	r3, [pc, #208]	; (800cdc8 <tcp_output_segment+0x1b4>)
 800ccf8:	681a      	ldr	r2, [r3, #0]
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7f8 fe04 	bl	8005912 <lwip_htonl>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	68da      	ldr	r2, [r3, #12]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	1ad3      	subs	r3, r2, r3
 800cd1c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	8959      	ldrh	r1, [r3, #10]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	8b3a      	ldrh	r2, [r7, #24]
 800cd2a:	1a8a      	subs	r2, r1, r2
 800cd2c:	b292      	uxth	r2, r2
 800cd2e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	8919      	ldrh	r1, [r3, #8]
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	8b3a      	ldrh	r2, [r7, #24]
 800cd3c:	1a8a      	subs	r2, r1, r2
 800cd3e:	b292      	uxth	r2, r2
 800cd40:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	68d2      	ldr	r2, [r2, #12]
 800cd4a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	2200      	movs	r2, #0
 800cd52:	741a      	strb	r2, [r3, #16]
 800cd54:	2200      	movs	r2, #0
 800cd56:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	f103 0214 	add.w	r2, r3, #20
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	7a9b      	ldrb	r3, [r3, #10]
 800cd64:	009b      	lsls	r3, r3, #2
 800cd66:	f003 0304 	and.w	r3, r3, #4
 800cd6a:	4413      	add	r3, r2
 800cd6c:	69fa      	ldr	r2, [r7, #28]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d006      	beq.n	800cd80 <tcp_output_segment+0x16c>
 800cd72:	4b10      	ldr	r3, [pc, #64]	; (800cdb4 <tcp_output_segment+0x1a0>)
 800cd74:	f240 621c 	movw	r2, #1564	; 0x61c
 800cd78:	4914      	ldr	r1, [pc, #80]	; (800cdcc <tcp_output_segment+0x1b8>)
 800cd7a:	4810      	ldr	r0, [pc, #64]	; (800cdbc <tcp_output_segment+0x1a8>)
 800cd7c:	f003 fb90 	bl	80104a0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	6858      	ldr	r0, [r3, #4]
 800cd84:	68b9      	ldr	r1, [r7, #8]
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	1d1c      	adds	r4, r3, #4
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	7add      	ldrb	r5, [r3, #11]
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	7a9b      	ldrb	r3, [r3, #10]
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	9202      	str	r2, [sp, #8]
 800cd96:	2206      	movs	r2, #6
 800cd98:	9201      	str	r2, [sp, #4]
 800cd9a:	9300      	str	r3, [sp, #0]
 800cd9c:	462b      	mov	r3, r5
 800cd9e:	4622      	mov	r2, r4
 800cda0:	f002 fa5c 	bl	800f25c <ip4_output_if>
 800cda4:	4603      	mov	r3, r0
 800cda6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800cda8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3720      	adds	r7, #32
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bdb0      	pop	{r4, r5, r7, pc}
 800cdb4:	08012fe8 	.word	0x08012fe8
 800cdb8:	080135ac 	.word	0x080135ac
 800cdbc:	0801303c 	.word	0x0801303c
 800cdc0:	080135cc 	.word	0x080135cc
 800cdc4:	080135ec 	.word	0x080135ec
 800cdc8:	24003188 	.word	0x24003188
 800cdcc:	08013610 	.word	0x08013610

0800cdd0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800cdd0:	b5b0      	push	{r4, r5, r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d106      	bne.n	800cdec <tcp_rexmit_rto_prepare+0x1c>
 800cdde:	4b31      	ldr	r3, [pc, #196]	; (800cea4 <tcp_rexmit_rto_prepare+0xd4>)
 800cde0:	f240 6263 	movw	r2, #1635	; 0x663
 800cde4:	4930      	ldr	r1, [pc, #192]	; (800cea8 <tcp_rexmit_rto_prepare+0xd8>)
 800cde6:	4831      	ldr	r0, [pc, #196]	; (800ceac <tcp_rexmit_rto_prepare+0xdc>)
 800cde8:	f003 fb5a 	bl	80104a0 <iprintf>

  if (pcb->unacked == NULL) {
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d102      	bne.n	800cdfa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800cdf4:	f06f 0305 	mvn.w	r3, #5
 800cdf8:	e050      	b.n	800ce9c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdfe:	60fb      	str	r3, [r7, #12]
 800ce00:	e00b      	b.n	800ce1a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ce02:	68f8      	ldr	r0, [r7, #12]
 800ce04:	f7ff fee6 	bl	800cbd4 <tcp_output_segment_busy>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d002      	beq.n	800ce14 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ce0e:	f06f 0305 	mvn.w	r3, #5
 800ce12:	e043      	b.n	800ce9c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	60fb      	str	r3, [r7, #12]
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d1ef      	bne.n	800ce02 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ce22:	68f8      	ldr	r0, [r7, #12]
 800ce24:	f7ff fed6 	bl	800cbd4 <tcp_output_segment_busy>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d002      	beq.n	800ce34 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ce2e:	f06f 0305 	mvn.w	r3, #5
 800ce32:	e033      	b.n	800ce9c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	8b5b      	ldrh	r3, [r3, #26]
 800ce4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ce52:	b29a      	uxth	r2, r3
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	68db      	ldr	r3, [r3, #12]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7f8 fd57 	bl	8005912 <lwip_htonl>
 800ce64:	4604      	mov	r4, r0
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	891b      	ldrh	r3, [r3, #8]
 800ce6a:	461d      	mov	r5, r3
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	68db      	ldr	r3, [r3, #12]
 800ce70:	899b      	ldrh	r3, [r3, #12]
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7f8 fd37 	bl	80058e8 <lwip_htons>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	b2db      	uxtb	r3, r3
 800ce7e:	f003 0303 	and.w	r3, r3, #3
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d001      	beq.n	800ce8a <tcp_rexmit_rto_prepare+0xba>
 800ce86:	2301      	movs	r3, #1
 800ce88:	e000      	b.n	800ce8c <tcp_rexmit_rto_prepare+0xbc>
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	442b      	add	r3, r5
 800ce8e:	18e2      	adds	r2, r4, r3
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ce9a:	2300      	movs	r3, #0
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bdb0      	pop	{r4, r5, r7, pc}
 800cea4:	08012fe8 	.word	0x08012fe8
 800cea8:	08013624 	.word	0x08013624
 800ceac:	0801303c 	.word	0x0801303c

0800ceb0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d106      	bne.n	800cecc <tcp_rexmit_rto_commit+0x1c>
 800cebe:	4b0d      	ldr	r3, [pc, #52]	; (800cef4 <tcp_rexmit_rto_commit+0x44>)
 800cec0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cec4:	490c      	ldr	r1, [pc, #48]	; (800cef8 <tcp_rexmit_rto_commit+0x48>)
 800cec6:	480d      	ldr	r0, [pc, #52]	; (800cefc <tcp_rexmit_rto_commit+0x4c>)
 800cec8:	f003 faea 	bl	80104a0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ced2:	2bff      	cmp	r3, #255	; 0xff
 800ced4:	d007      	beq.n	800cee6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cedc:	3301      	adds	r3, #1
 800cede:	b2da      	uxtb	r2, r3
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f7ff fc80 	bl	800c7ec <tcp_output>
}
 800ceec:	bf00      	nop
 800ceee:	3708      	adds	r7, #8
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	08012fe8 	.word	0x08012fe8
 800cef8:	08013648 	.word	0x08013648
 800cefc:	0801303c 	.word	0x0801303c

0800cf00 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d106      	bne.n	800cf1c <tcp_rexmit_rto+0x1c>
 800cf0e:	4b0a      	ldr	r3, [pc, #40]	; (800cf38 <tcp_rexmit_rto+0x38>)
 800cf10:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800cf14:	4909      	ldr	r1, [pc, #36]	; (800cf3c <tcp_rexmit_rto+0x3c>)
 800cf16:	480a      	ldr	r0, [pc, #40]	; (800cf40 <tcp_rexmit_rto+0x40>)
 800cf18:	f003 fac2 	bl	80104a0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f7ff ff57 	bl	800cdd0 <tcp_rexmit_rto_prepare>
 800cf22:	4603      	mov	r3, r0
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d102      	bne.n	800cf2e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f7ff ffc1 	bl	800ceb0 <tcp_rexmit_rto_commit>
  }
}
 800cf2e:	bf00      	nop
 800cf30:	3708      	adds	r7, #8
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	08012fe8 	.word	0x08012fe8
 800cf3c:	0801366c 	.word	0x0801366c
 800cf40:	0801303c 	.word	0x0801303c

0800cf44 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800cf44:	b590      	push	{r4, r7, lr}
 800cf46:	b085      	sub	sp, #20
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d106      	bne.n	800cf60 <tcp_rexmit+0x1c>
 800cf52:	4b2f      	ldr	r3, [pc, #188]	; (800d010 <tcp_rexmit+0xcc>)
 800cf54:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800cf58:	492e      	ldr	r1, [pc, #184]	; (800d014 <tcp_rexmit+0xd0>)
 800cf5a:	482f      	ldr	r0, [pc, #188]	; (800d018 <tcp_rexmit+0xd4>)
 800cf5c:	f003 faa0 	bl	80104a0 <iprintf>

  if (pcb->unacked == NULL) {
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d102      	bne.n	800cf6e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800cf68:	f06f 0305 	mvn.w	r3, #5
 800cf6c:	e04c      	b.n	800d008 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf72:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800cf74:	68b8      	ldr	r0, [r7, #8]
 800cf76:	f7ff fe2d 	bl	800cbd4 <tcp_output_segment_busy>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d002      	beq.n	800cf86 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800cf80:	f06f 0305 	mvn.w	r3, #5
 800cf84:	e040      	b.n	800d008 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	681a      	ldr	r2, [r3, #0]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	336c      	adds	r3, #108	; 0x6c
 800cf92:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cf94:	e002      	b.n	800cf9c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d011      	beq.n	800cfc8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	685b      	ldr	r3, [r3, #4]
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7f8 fcb0 	bl	8005912 <lwip_htonl>
 800cfb2:	4604      	mov	r4, r0
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	68db      	ldr	r3, [r3, #12]
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7f8 fca9 	bl	8005912 <lwip_htonl>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	dbe6      	blt.n	800cf96 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	68ba      	ldr	r2, [r7, #8]
 800cfd4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d103      	bne.n	800cfe6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cfec:	2bff      	cmp	r3, #255	; 0xff
 800cfee:	d007      	beq.n	800d000 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cff6:	3301      	adds	r3, #1
 800cff8:	b2da      	uxtb	r2, r3
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d006:	2300      	movs	r3, #0
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3714      	adds	r7, #20
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd90      	pop	{r4, r7, pc}
 800d010:	08012fe8 	.word	0x08012fe8
 800d014:	08013688 	.word	0x08013688
 800d018:	0801303c 	.word	0x0801303c

0800d01c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d106      	bne.n	800d038 <tcp_rexmit_fast+0x1c>
 800d02a:	4b2a      	ldr	r3, [pc, #168]	; (800d0d4 <tcp_rexmit_fast+0xb8>)
 800d02c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d030:	4929      	ldr	r1, [pc, #164]	; (800d0d8 <tcp_rexmit_fast+0xbc>)
 800d032:	482a      	ldr	r0, [pc, #168]	; (800d0dc <tcp_rexmit_fast+0xc0>)
 800d034:	f003 fa34 	bl	80104a0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d045      	beq.n	800d0cc <tcp_rexmit_fast+0xb0>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	8b5b      	ldrh	r3, [r3, #26]
 800d044:	f003 0304 	and.w	r3, r3, #4
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d13f      	bne.n	800d0cc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f7ff ff79 	bl	800cf44 <tcp_rexmit>
 800d052:	4603      	mov	r3, r0
 800d054:	2b00      	cmp	r3, #0
 800d056:	d139      	bne.n	800d0cc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d064:	4293      	cmp	r3, r2
 800d066:	bf28      	it	cs
 800d068:	4613      	movcs	r3, r2
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	da00      	bge.n	800d072 <tcp_rexmit_fast+0x56>
 800d070:	3301      	adds	r3, #1
 800d072:	105b      	asrs	r3, r3, #1
 800d074:	b29a      	uxth	r2, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d082:	461a      	mov	r2, r3
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d088:	005b      	lsls	r3, r3, #1
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d206      	bcs.n	800d09c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d092:	005b      	lsls	r3, r3, #1
 800d094:	b29a      	uxth	r2, r3
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	0049      	lsls	r1, r1, #1
 800d0aa:	440b      	add	r3, r1
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	4413      	add	r3, r2
 800d0b0:	b29a      	uxth	r2, r3
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	8b5b      	ldrh	r3, [r3, #26]
 800d0bc:	f043 0304 	orr.w	r3, r3, #4
 800d0c0:	b29a      	uxth	r2, r3
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d0cc:	bf00      	nop
 800d0ce:	3708      	adds	r7, #8
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	08012fe8 	.word	0x08012fe8
 800d0d8:	080136a0 	.word	0x080136a0
 800d0dc:	0801303c 	.word	0x0801303c

0800d0e0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b086      	sub	sp, #24
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	607b      	str	r3, [r7, #4]
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	817b      	strh	r3, [r7, #10]
 800d0ee:	4613      	mov	r3, r2
 800d0f0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d0f2:	897a      	ldrh	r2, [r7, #10]
 800d0f4:	893b      	ldrh	r3, [r7, #8]
 800d0f6:	4413      	add	r3, r2
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	3314      	adds	r3, #20
 800d0fc:	b29b      	uxth	r3, r3
 800d0fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d102:	4619      	mov	r1, r3
 800d104:	2022      	movs	r0, #34	; 0x22
 800d106:	f7f9 fd21 	bl	8006b4c <pbuf_alloc>
 800d10a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d04d      	beq.n	800d1ae <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d112:	897b      	ldrh	r3, [r7, #10]
 800d114:	3313      	adds	r3, #19
 800d116:	697a      	ldr	r2, [r7, #20]
 800d118:	8952      	ldrh	r2, [r2, #10]
 800d11a:	4293      	cmp	r3, r2
 800d11c:	db06      	blt.n	800d12c <tcp_output_alloc_header_common+0x4c>
 800d11e:	4b26      	ldr	r3, [pc, #152]	; (800d1b8 <tcp_output_alloc_header_common+0xd8>)
 800d120:	f240 7223 	movw	r2, #1827	; 0x723
 800d124:	4925      	ldr	r1, [pc, #148]	; (800d1bc <tcp_output_alloc_header_common+0xdc>)
 800d126:	4826      	ldr	r0, [pc, #152]	; (800d1c0 <tcp_output_alloc_header_common+0xe0>)
 800d128:	f003 f9ba 	bl	80104a0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d132:	8c3b      	ldrh	r3, [r7, #32]
 800d134:	4618      	mov	r0, r3
 800d136:	f7f8 fbd7 	bl	80058e8 <lwip_htons>
 800d13a:	4603      	mov	r3, r0
 800d13c:	461a      	mov	r2, r3
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d142:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d144:	4618      	mov	r0, r3
 800d146:	f7f8 fbcf 	bl	80058e8 <lwip_htons>
 800d14a:	4603      	mov	r3, r0
 800d14c:	461a      	mov	r2, r3
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d158:	68f8      	ldr	r0, [r7, #12]
 800d15a:	f7f8 fbda 	bl	8005912 <lwip_htonl>
 800d15e:	4602      	mov	r2, r0
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d164:	897b      	ldrh	r3, [r7, #10]
 800d166:	089b      	lsrs	r3, r3, #2
 800d168:	b29b      	uxth	r3, r3
 800d16a:	3305      	adds	r3, #5
 800d16c:	b29b      	uxth	r3, r3
 800d16e:	031b      	lsls	r3, r3, #12
 800d170:	b29a      	uxth	r2, r3
 800d172:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d176:	b29b      	uxth	r3, r3
 800d178:	4313      	orrs	r3, r2
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7f8 fbb3 	bl	80058e8 <lwip_htons>
 800d182:	4603      	mov	r3, r0
 800d184:	461a      	mov	r2, r3
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d18a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7f8 fbab 	bl	80058e8 <lwip_htons>
 800d192:	4603      	mov	r3, r0
 800d194:	461a      	mov	r2, r3
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	2200      	movs	r2, #0
 800d19e:	741a      	strb	r2, [r3, #16]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	749a      	strb	r2, [r3, #18]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d1ae:	697b      	ldr	r3, [r7, #20]
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3718      	adds	r7, #24
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	08012fe8 	.word	0x08012fe8
 800d1bc:	080136c0 	.word	0x080136c0
 800d1c0:	0801303c 	.word	0x0801303c

0800d1c4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d1c4:	b5b0      	push	{r4, r5, r7, lr}
 800d1c6:	b08a      	sub	sp, #40	; 0x28
 800d1c8:	af04      	add	r7, sp, #16
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	607b      	str	r3, [r7, #4]
 800d1ce:	460b      	mov	r3, r1
 800d1d0:	817b      	strh	r3, [r7, #10]
 800d1d2:	4613      	mov	r3, r2
 800d1d4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d106      	bne.n	800d1ea <tcp_output_alloc_header+0x26>
 800d1dc:	4b15      	ldr	r3, [pc, #84]	; (800d234 <tcp_output_alloc_header+0x70>)
 800d1de:	f240 7242 	movw	r2, #1858	; 0x742
 800d1e2:	4915      	ldr	r1, [pc, #84]	; (800d238 <tcp_output_alloc_header+0x74>)
 800d1e4:	4815      	ldr	r0, [pc, #84]	; (800d23c <tcp_output_alloc_header+0x78>)
 800d1e6:	f003 f95b 	bl	80104a0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	8adb      	ldrh	r3, [r3, #22]
 800d1f2:	68fa      	ldr	r2, [r7, #12]
 800d1f4:	8b12      	ldrh	r2, [r2, #24]
 800d1f6:	68f9      	ldr	r1, [r7, #12]
 800d1f8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800d1fa:	893d      	ldrh	r5, [r7, #8]
 800d1fc:	897c      	ldrh	r4, [r7, #10]
 800d1fe:	9103      	str	r1, [sp, #12]
 800d200:	2110      	movs	r1, #16
 800d202:	9102      	str	r1, [sp, #8]
 800d204:	9201      	str	r2, [sp, #4]
 800d206:	9300      	str	r3, [sp, #0]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	462a      	mov	r2, r5
 800d20c:	4621      	mov	r1, r4
 800d20e:	f7ff ff67 	bl	800d0e0 <tcp_output_alloc_header_common>
 800d212:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d006      	beq.n	800d228 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d21e:	68fa      	ldr	r2, [r7, #12]
 800d220:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d222:	441a      	add	r2, r3
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d228:	697b      	ldr	r3, [r7, #20]
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3718      	adds	r7, #24
 800d22e:	46bd      	mov	sp, r7
 800d230:	bdb0      	pop	{r4, r5, r7, pc}
 800d232:	bf00      	nop
 800d234:	08012fe8 	.word	0x08012fe8
 800d238:	080136f0 	.word	0x080136f0
 800d23c:	0801303c 	.word	0x0801303c

0800d240 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b088      	sub	sp, #32
 800d244:	af00      	add	r7, sp, #0
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	4611      	mov	r1, r2
 800d24c:	461a      	mov	r2, r3
 800d24e:	460b      	mov	r3, r1
 800d250:	71fb      	strb	r3, [r7, #7]
 800d252:	4613      	mov	r3, r2
 800d254:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d256:	2300      	movs	r3, #0
 800d258:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d106      	bne.n	800d26e <tcp_output_fill_options+0x2e>
 800d260:	4b13      	ldr	r3, [pc, #76]	; (800d2b0 <tcp_output_fill_options+0x70>)
 800d262:	f240 7256 	movw	r2, #1878	; 0x756
 800d266:	4913      	ldr	r1, [pc, #76]	; (800d2b4 <tcp_output_fill_options+0x74>)
 800d268:	4813      	ldr	r0, [pc, #76]	; (800d2b8 <tcp_output_fill_options+0x78>)
 800d26a:	f003 f919 	bl	80104a0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d274:	69bb      	ldr	r3, [r7, #24]
 800d276:	3314      	adds	r3, #20
 800d278:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	f103 0214 	add.w	r2, r3, #20
 800d280:	8bfb      	ldrh	r3, [r7, #30]
 800d282:	009b      	lsls	r3, r3, #2
 800d284:	4619      	mov	r1, r3
 800d286:	79fb      	ldrb	r3, [r7, #7]
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	f003 0304 	and.w	r3, r3, #4
 800d28e:	440b      	add	r3, r1
 800d290:	4413      	add	r3, r2
 800d292:	697a      	ldr	r2, [r7, #20]
 800d294:	429a      	cmp	r2, r3
 800d296:	d006      	beq.n	800d2a6 <tcp_output_fill_options+0x66>
 800d298:	4b05      	ldr	r3, [pc, #20]	; (800d2b0 <tcp_output_fill_options+0x70>)
 800d29a:	f240 7275 	movw	r2, #1909	; 0x775
 800d29e:	4907      	ldr	r1, [pc, #28]	; (800d2bc <tcp_output_fill_options+0x7c>)
 800d2a0:	4805      	ldr	r0, [pc, #20]	; (800d2b8 <tcp_output_fill_options+0x78>)
 800d2a2:	f003 f8fd 	bl	80104a0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d2a6:	bf00      	nop
 800d2a8:	3720      	adds	r7, #32
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	08012fe8 	.word	0x08012fe8
 800d2b4:	08013718 	.word	0x08013718
 800d2b8:	0801303c 	.word	0x0801303c
 800d2bc:	08013610 	.word	0x08013610

0800d2c0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b08a      	sub	sp, #40	; 0x28
 800d2c4:	af04      	add	r7, sp, #16
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	607a      	str	r2, [r7, #4]
 800d2cc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d106      	bne.n	800d2e2 <tcp_output_control_segment+0x22>
 800d2d4:	4b1c      	ldr	r3, [pc, #112]	; (800d348 <tcp_output_control_segment+0x88>)
 800d2d6:	f240 7287 	movw	r2, #1927	; 0x787
 800d2da:	491c      	ldr	r1, [pc, #112]	; (800d34c <tcp_output_control_segment+0x8c>)
 800d2dc:	481c      	ldr	r0, [pc, #112]	; (800d350 <tcp_output_control_segment+0x90>)
 800d2de:	f003 f8df 	bl	80104a0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d2e2:	683a      	ldr	r2, [r7, #0]
 800d2e4:	6879      	ldr	r1, [r7, #4]
 800d2e6:	68f8      	ldr	r0, [r7, #12]
 800d2e8:	f7fe fae8 	bl	800b8bc <tcp_route>
 800d2ec:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d102      	bne.n	800d2fa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d2f4:	23fc      	movs	r3, #252	; 0xfc
 800d2f6:	75fb      	strb	r3, [r7, #23]
 800d2f8:	e01c      	b.n	800d334 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d006      	beq.n	800d30e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	7adb      	ldrb	r3, [r3, #11]
 800d304:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	7a9b      	ldrb	r3, [r3, #10]
 800d30a:	757b      	strb	r3, [r7, #21]
 800d30c:	e003      	b.n	800d316 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d30e:	23ff      	movs	r3, #255	; 0xff
 800d310:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d312:	2300      	movs	r3, #0
 800d314:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d316:	7dba      	ldrb	r2, [r7, #22]
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	9302      	str	r3, [sp, #8]
 800d31c:	2306      	movs	r3, #6
 800d31e:	9301      	str	r3, [sp, #4]
 800d320:	7d7b      	ldrb	r3, [r7, #21]
 800d322:	9300      	str	r3, [sp, #0]
 800d324:	4613      	mov	r3, r2
 800d326:	683a      	ldr	r2, [r7, #0]
 800d328:	6879      	ldr	r1, [r7, #4]
 800d32a:	68b8      	ldr	r0, [r7, #8]
 800d32c:	f001 ff96 	bl	800f25c <ip4_output_if>
 800d330:	4603      	mov	r3, r0
 800d332:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d334:	68b8      	ldr	r0, [r7, #8]
 800d336:	f7f9 feed 	bl	8007114 <pbuf_free>
  return err;
 800d33a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3718      	adds	r7, #24
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	08012fe8 	.word	0x08012fe8
 800d34c:	08013740 	.word	0x08013740
 800d350:	0801303c 	.word	0x0801303c

0800d354 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d354:	b590      	push	{r4, r7, lr}
 800d356:	b08b      	sub	sp, #44	; 0x2c
 800d358:	af04      	add	r7, sp, #16
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	60b9      	str	r1, [r7, #8]
 800d35e:	607a      	str	r2, [r7, #4]
 800d360:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d106      	bne.n	800d376 <tcp_rst+0x22>
 800d368:	4b1f      	ldr	r3, [pc, #124]	; (800d3e8 <tcp_rst+0x94>)
 800d36a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d36e:	491f      	ldr	r1, [pc, #124]	; (800d3ec <tcp_rst+0x98>)
 800d370:	481f      	ldr	r0, [pc, #124]	; (800d3f0 <tcp_rst+0x9c>)
 800d372:	f003 f895 	bl	80104a0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d106      	bne.n	800d38a <tcp_rst+0x36>
 800d37c:	4b1a      	ldr	r3, [pc, #104]	; (800d3e8 <tcp_rst+0x94>)
 800d37e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d382:	491c      	ldr	r1, [pc, #112]	; (800d3f4 <tcp_rst+0xa0>)
 800d384:	481a      	ldr	r0, [pc, #104]	; (800d3f0 <tcp_rst+0x9c>)
 800d386:	f003 f88b 	bl	80104a0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d38a:	2300      	movs	r3, #0
 800d38c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d38e:	f246 0308 	movw	r3, #24584	; 0x6008
 800d392:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d394:	7dfb      	ldrb	r3, [r7, #23]
 800d396:	b29c      	uxth	r4, r3
 800d398:	68b8      	ldr	r0, [r7, #8]
 800d39a:	f7f8 faba 	bl	8005912 <lwip_htonl>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	8abb      	ldrh	r3, [r7, #20]
 800d3a2:	9303      	str	r3, [sp, #12]
 800d3a4:	2314      	movs	r3, #20
 800d3a6:	9302      	str	r3, [sp, #8]
 800d3a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d3aa:	9301      	str	r3, [sp, #4]
 800d3ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d3ae:	9300      	str	r3, [sp, #0]
 800d3b0:	4613      	mov	r3, r2
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	4621      	mov	r1, r4
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f7ff fe92 	bl	800d0e0 <tcp_output_alloc_header_common>
 800d3bc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d00c      	beq.n	800d3de <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d3c4:	7dfb      	ldrb	r3, [r7, #23]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	6939      	ldr	r1, [r7, #16]
 800d3ca:	68f8      	ldr	r0, [r7, #12]
 800d3cc:	f7ff ff38 	bl	800d240 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d2:	683a      	ldr	r2, [r7, #0]
 800d3d4:	6939      	ldr	r1, [r7, #16]
 800d3d6:	68f8      	ldr	r0, [r7, #12]
 800d3d8:	f7ff ff72 	bl	800d2c0 <tcp_output_control_segment>
 800d3dc:	e000      	b.n	800d3e0 <tcp_rst+0x8c>
    return;
 800d3de:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d3e0:	371c      	adds	r7, #28
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd90      	pop	{r4, r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	08012fe8 	.word	0x08012fe8
 800d3ec:	0801376c 	.word	0x0801376c
 800d3f0:	0801303c 	.word	0x0801303c
 800d3f4:	08013788 	.word	0x08013788

0800d3f8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d3f8:	b590      	push	{r4, r7, lr}
 800d3fa:	b087      	sub	sp, #28
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d400:	2300      	movs	r3, #0
 800d402:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d404:	2300      	movs	r3, #0
 800d406:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d106      	bne.n	800d41c <tcp_send_empty_ack+0x24>
 800d40e:	4b28      	ldr	r3, [pc, #160]	; (800d4b0 <tcp_send_empty_ack+0xb8>)
 800d410:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d414:	4927      	ldr	r1, [pc, #156]	; (800d4b4 <tcp_send_empty_ack+0xbc>)
 800d416:	4828      	ldr	r0, [pc, #160]	; (800d4b8 <tcp_send_empty_ack+0xc0>)
 800d418:	f003 f842 	bl	80104a0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d41c:	7dfb      	ldrb	r3, [r7, #23]
 800d41e:	009b      	lsls	r3, r3, #2
 800d420:	b2db      	uxtb	r3, r3
 800d422:	f003 0304 	and.w	r3, r3, #4
 800d426:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d428:	7d7b      	ldrb	r3, [r7, #21]
 800d42a:	b29c      	uxth	r4, r3
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d430:	4618      	mov	r0, r3
 800d432:	f7f8 fa6e 	bl	8005912 <lwip_htonl>
 800d436:	4603      	mov	r3, r0
 800d438:	2200      	movs	r2, #0
 800d43a:	4621      	mov	r1, r4
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f7ff fec1 	bl	800d1c4 <tcp_output_alloc_header>
 800d442:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d109      	bne.n	800d45e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	8b5b      	ldrh	r3, [r3, #26]
 800d44e:	f043 0303 	orr.w	r3, r3, #3
 800d452:	b29a      	uxth	r2, r3
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d458:	f06f 0301 	mvn.w	r3, #1
 800d45c:	e023      	b.n	800d4a6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d45e:	7dbb      	ldrb	r3, [r7, #22]
 800d460:	7dfa      	ldrb	r2, [r7, #23]
 800d462:	6939      	ldr	r1, [r7, #16]
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f7ff feeb 	bl	800d240 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d46a:	687a      	ldr	r2, [r7, #4]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	3304      	adds	r3, #4
 800d470:	6939      	ldr	r1, [r7, #16]
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f7ff ff24 	bl	800d2c0 <tcp_output_control_segment>
 800d478:	4603      	mov	r3, r0
 800d47a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d47c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d007      	beq.n	800d494 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	8b5b      	ldrh	r3, [r3, #26]
 800d488:	f043 0303 	orr.w	r3, r3, #3
 800d48c:	b29a      	uxth	r2, r3
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	835a      	strh	r2, [r3, #26]
 800d492:	e006      	b.n	800d4a2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	8b5b      	ldrh	r3, [r3, #26]
 800d498:	f023 0303 	bic.w	r3, r3, #3
 800d49c:	b29a      	uxth	r2, r3
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d4a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	371c      	adds	r7, #28
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd90      	pop	{r4, r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	08012fe8 	.word	0x08012fe8
 800d4b4:	080137a4 	.word	0x080137a4
 800d4b8:	0801303c 	.word	0x0801303c

0800d4bc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d4bc:	b590      	push	{r4, r7, lr}
 800d4be:	b087      	sub	sp, #28
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d106      	bne.n	800d4dc <tcp_keepalive+0x20>
 800d4ce:	4b18      	ldr	r3, [pc, #96]	; (800d530 <tcp_keepalive+0x74>)
 800d4d0:	f640 0224 	movw	r2, #2084	; 0x824
 800d4d4:	4917      	ldr	r1, [pc, #92]	; (800d534 <tcp_keepalive+0x78>)
 800d4d6:	4818      	ldr	r0, [pc, #96]	; (800d538 <tcp_keepalive+0x7c>)
 800d4d8:	f002 ffe2 	bl	80104a0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d4dc:	7dfb      	ldrb	r3, [r7, #23]
 800d4de:	b29c      	uxth	r4, r3
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7f8 fa13 	bl	8005912 <lwip_htonl>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	4621      	mov	r1, r4
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f7ff fe66 	bl	800d1c4 <tcp_output_alloc_header>
 800d4f8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d102      	bne.n	800d506 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d500:	f04f 33ff 	mov.w	r3, #4294967295
 800d504:	e010      	b.n	800d528 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d506:	7dfb      	ldrb	r3, [r7, #23]
 800d508:	2200      	movs	r2, #0
 800d50a:	6939      	ldr	r1, [r7, #16]
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f7ff fe97 	bl	800d240 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	3304      	adds	r3, #4
 800d518:	6939      	ldr	r1, [r7, #16]
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f7ff fed0 	bl	800d2c0 <tcp_output_control_segment>
 800d520:	4603      	mov	r3, r0
 800d522:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d524:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d528:	4618      	mov	r0, r3
 800d52a:	371c      	adds	r7, #28
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd90      	pop	{r4, r7, pc}
 800d530:	08012fe8 	.word	0x08012fe8
 800d534:	080137c4 	.word	0x080137c4
 800d538:	0801303c 	.word	0x0801303c

0800d53c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d53c:	b590      	push	{r4, r7, lr}
 800d53e:	b08b      	sub	sp, #44	; 0x2c
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d544:	2300      	movs	r3, #0
 800d546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d106      	bne.n	800d55e <tcp_zero_window_probe+0x22>
 800d550:	4b4c      	ldr	r3, [pc, #304]	; (800d684 <tcp_zero_window_probe+0x148>)
 800d552:	f640 024f 	movw	r2, #2127	; 0x84f
 800d556:	494c      	ldr	r1, [pc, #304]	; (800d688 <tcp_zero_window_probe+0x14c>)
 800d558:	484c      	ldr	r0, [pc, #304]	; (800d68c <tcp_zero_window_probe+0x150>)
 800d55a:	f002 ffa1 	bl	80104a0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d562:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d564:	6a3b      	ldr	r3, [r7, #32]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d101      	bne.n	800d56e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d56a:	2300      	movs	r3, #0
 800d56c:	e086      	b.n	800d67c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d574:	2bff      	cmp	r3, #255	; 0xff
 800d576:	d007      	beq.n	800d588 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d57e:	3301      	adds	r3, #1
 800d580:	b2da      	uxtb	r2, r3
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d588:	6a3b      	ldr	r3, [r7, #32]
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	899b      	ldrh	r3, [r3, #12]
 800d58e:	b29b      	uxth	r3, r3
 800d590:	4618      	mov	r0, r3
 800d592:	f7f8 f9a9 	bl	80058e8 <lwip_htons>
 800d596:	4603      	mov	r3, r0
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	f003 0301 	and.w	r3, r3, #1
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d005      	beq.n	800d5ae <tcp_zero_window_probe+0x72>
 800d5a2:	6a3b      	ldr	r3, [r7, #32]
 800d5a4:	891b      	ldrh	r3, [r3, #8]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d101      	bne.n	800d5ae <tcp_zero_window_probe+0x72>
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e000      	b.n	800d5b0 <tcp_zero_window_probe+0x74>
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d5b2:	7ffb      	ldrb	r3, [r7, #31]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	bf0c      	ite	eq
 800d5b8:	2301      	moveq	r3, #1
 800d5ba:	2300      	movne	r3, #0
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d5c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5c4:	b299      	uxth	r1, r3
 800d5c6:	6a3b      	ldr	r3, [r7, #32]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	8bba      	ldrh	r2, [r7, #28]
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f7ff fdf8 	bl	800d1c4 <tcp_output_alloc_header>
 800d5d4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d5d6:	69bb      	ldr	r3, [r7, #24]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d102      	bne.n	800d5e2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d5e0:	e04c      	b.n	800d67c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d5e2:	69bb      	ldr	r3, [r7, #24]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d5e8:	7ffb      	ldrb	r3, [r7, #31]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d011      	beq.n	800d612 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	899b      	ldrh	r3, [r3, #12]
 800d5f2:	b29b      	uxth	r3, r3
 800d5f4:	b21b      	sxth	r3, r3
 800d5f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d5fa:	b21c      	sxth	r4, r3
 800d5fc:	2011      	movs	r0, #17
 800d5fe:	f7f8 f973 	bl	80058e8 <lwip_htons>
 800d602:	4603      	mov	r3, r0
 800d604:	b21b      	sxth	r3, r3
 800d606:	4323      	orrs	r3, r4
 800d608:	b21b      	sxth	r3, r3
 800d60a:	b29a      	uxth	r2, r3
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	819a      	strh	r2, [r3, #12]
 800d610:	e010      	b.n	800d634 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d612:	69bb      	ldr	r3, [r7, #24]
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	3314      	adds	r3, #20
 800d618:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d61a:	6a3b      	ldr	r3, [r7, #32]
 800d61c:	6858      	ldr	r0, [r3, #4]
 800d61e:	6a3b      	ldr	r3, [r7, #32]
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	891a      	ldrh	r2, [r3, #8]
 800d624:	6a3b      	ldr	r3, [r7, #32]
 800d626:	891b      	ldrh	r3, [r3, #8]
 800d628:	1ad3      	subs	r3, r2, r3
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	2201      	movs	r2, #1
 800d62e:	6939      	ldr	r1, [r7, #16]
 800d630:	f7f9 ff5a 	bl	80074e8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d634:	6a3b      	ldr	r3, [r7, #32]
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7f8 f969 	bl	8005912 <lwip_htonl>
 800d640:	4603      	mov	r3, r0
 800d642:	3301      	adds	r3, #1
 800d644:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	1ad3      	subs	r3, r2, r3
 800d64e:	2b00      	cmp	r3, #0
 800d650:	da02      	bge.n	800d658 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	68fa      	ldr	r2, [r7, #12]
 800d656:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d65c:	2200      	movs	r2, #0
 800d65e:	69b9      	ldr	r1, [r7, #24]
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f7ff fded 	bl	800d240 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d666:	687a      	ldr	r2, [r7, #4]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	3304      	adds	r3, #4
 800d66c:	69b9      	ldr	r1, [r7, #24]
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f7ff fe26 	bl	800d2c0 <tcp_output_control_segment>
 800d674:	4603      	mov	r3, r0
 800d676:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d678:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	372c      	adds	r7, #44	; 0x2c
 800d680:	46bd      	mov	sp, r7
 800d682:	bd90      	pop	{r4, r7, pc}
 800d684:	08012fe8 	.word	0x08012fe8
 800d688:	080137e0 	.word	0x080137e0
 800d68c:	0801303c 	.word	0x0801303c

0800d690 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d698:	f7fa f8a6 	bl	80077e8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d69c:	4b0a      	ldr	r3, [pc, #40]	; (800d6c8 <tcpip_tcp_timer+0x38>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d103      	bne.n	800d6ac <tcpip_tcp_timer+0x1c>
 800d6a4:	4b09      	ldr	r3, [pc, #36]	; (800d6cc <tcpip_tcp_timer+0x3c>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d005      	beq.n	800d6b8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	4908      	ldr	r1, [pc, #32]	; (800d6d0 <tcpip_tcp_timer+0x40>)
 800d6b0:	20fa      	movs	r0, #250	; 0xfa
 800d6b2:	f000 f8f3 	bl	800d89c <sys_timeout>
 800d6b6:	e003      	b.n	800d6c0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d6b8:	4b06      	ldr	r3, [pc, #24]	; (800d6d4 <tcpip_tcp_timer+0x44>)
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	601a      	str	r2, [r3, #0]
  }
}
 800d6be:	bf00      	nop
 800d6c0:	bf00      	nop
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	24003194 	.word	0x24003194
 800d6cc:	24003198 	.word	0x24003198
 800d6d0:	0800d691 	.word	0x0800d691
 800d6d4:	240031e0 	.word	0x240031e0

0800d6d8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d6dc:	4b0a      	ldr	r3, [pc, #40]	; (800d708 <tcp_timer_needed+0x30>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d10f      	bne.n	800d704 <tcp_timer_needed+0x2c>
 800d6e4:	4b09      	ldr	r3, [pc, #36]	; (800d70c <tcp_timer_needed+0x34>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d103      	bne.n	800d6f4 <tcp_timer_needed+0x1c>
 800d6ec:	4b08      	ldr	r3, [pc, #32]	; (800d710 <tcp_timer_needed+0x38>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d007      	beq.n	800d704 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d6f4:	4b04      	ldr	r3, [pc, #16]	; (800d708 <tcp_timer_needed+0x30>)
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	4905      	ldr	r1, [pc, #20]	; (800d714 <tcp_timer_needed+0x3c>)
 800d6fe:	20fa      	movs	r0, #250	; 0xfa
 800d700:	f000 f8cc 	bl	800d89c <sys_timeout>
  }
}
 800d704:	bf00      	nop
 800d706:	bd80      	pop	{r7, pc}
 800d708:	240031e0 	.word	0x240031e0
 800d70c:	24003194 	.word	0x24003194
 800d710:	24003198 	.word	0x24003198
 800d714:	0800d691 	.word	0x0800d691

0800d718 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b086      	sub	sp, #24
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	60f8      	str	r0, [r7, #12]
 800d720:	60b9      	str	r1, [r7, #8]
 800d722:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d724:	2006      	movs	r0, #6
 800d726:	f7f8 fe0f 	bl	8006348 <memp_malloc>
 800d72a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d109      	bne.n	800d746 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d151      	bne.n	800d7dc <sys_timeout_abs+0xc4>
 800d738:	4b2a      	ldr	r3, [pc, #168]	; (800d7e4 <sys_timeout_abs+0xcc>)
 800d73a:	22be      	movs	r2, #190	; 0xbe
 800d73c:	492a      	ldr	r1, [pc, #168]	; (800d7e8 <sys_timeout_abs+0xd0>)
 800d73e:	482b      	ldr	r0, [pc, #172]	; (800d7ec <sys_timeout_abs+0xd4>)
 800d740:	f002 feae 	bl	80104a0 <iprintf>
    return;
 800d744:	e04a      	b.n	800d7dc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	2200      	movs	r2, #0
 800d74a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	68ba      	ldr	r2, [r7, #8]
 800d750:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	687a      	ldr	r2, [r7, #4]
 800d756:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	68fa      	ldr	r2, [r7, #12]
 800d75c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d75e:	4b24      	ldr	r3, [pc, #144]	; (800d7f0 <sys_timeout_abs+0xd8>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d103      	bne.n	800d76e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d766:	4a22      	ldr	r2, [pc, #136]	; (800d7f0 <sys_timeout_abs+0xd8>)
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	6013      	str	r3, [r2, #0]
    return;
 800d76c:	e037      	b.n	800d7de <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	685a      	ldr	r2, [r3, #4]
 800d772:	4b1f      	ldr	r3, [pc, #124]	; (800d7f0 <sys_timeout_abs+0xd8>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	1ad3      	subs	r3, r2, r3
 800d77a:	0fdb      	lsrs	r3, r3, #31
 800d77c:	f003 0301 	and.w	r3, r3, #1
 800d780:	b2db      	uxtb	r3, r3
 800d782:	2b00      	cmp	r3, #0
 800d784:	d007      	beq.n	800d796 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d786:	4b1a      	ldr	r3, [pc, #104]	; (800d7f0 <sys_timeout_abs+0xd8>)
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d78e:	4a18      	ldr	r2, [pc, #96]	; (800d7f0 <sys_timeout_abs+0xd8>)
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	6013      	str	r3, [r2, #0]
 800d794:	e023      	b.n	800d7de <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d796:	4b16      	ldr	r3, [pc, #88]	; (800d7f0 <sys_timeout_abs+0xd8>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	617b      	str	r3, [r7, #20]
 800d79c:	e01a      	b.n	800d7d4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d00b      	beq.n	800d7be <sys_timeout_abs+0xa6>
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	685a      	ldr	r2, [r3, #4]
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	1ad3      	subs	r3, r2, r3
 800d7b2:	0fdb      	lsrs	r3, r3, #31
 800d7b4:	f003 0301 	and.w	r3, r3, #1
 800d7b8:	b2db      	uxtb	r3, r3
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d007      	beq.n	800d7ce <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	681a      	ldr	r2, [r3, #0]
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	693a      	ldr	r2, [r7, #16]
 800d7ca:	601a      	str	r2, [r3, #0]
        break;
 800d7cc:	e007      	b.n	800d7de <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	617b      	str	r3, [r7, #20]
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d1e1      	bne.n	800d79e <sys_timeout_abs+0x86>
 800d7da:	e000      	b.n	800d7de <sys_timeout_abs+0xc6>
    return;
 800d7dc:	bf00      	nop
      }
    }
  }
}
 800d7de:	3718      	adds	r7, #24
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	08013804 	.word	0x08013804
 800d7e8:	08013838 	.word	0x08013838
 800d7ec:	08013878 	.word	0x08013878
 800d7f0:	240031d8 	.word	0x240031d8

0800d7f4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b086      	sub	sp, #24
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	685b      	ldr	r3, [r3, #4]
 800d804:	4798      	blx	r3

  now = sys_now();
 800d806:	f7f7 fe1f 	bl	8005448 <sys_now>
 800d80a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	681a      	ldr	r2, [r3, #0]
 800d810:	4b0f      	ldr	r3, [pc, #60]	; (800d850 <lwip_cyclic_timer+0x5c>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4413      	add	r3, r2
 800d816:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d818:	68fa      	ldr	r2, [r7, #12]
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	1ad3      	subs	r3, r2, r3
 800d81e:	0fdb      	lsrs	r3, r3, #31
 800d820:	f003 0301 	and.w	r3, r3, #1
 800d824:	b2db      	uxtb	r3, r3
 800d826:	2b00      	cmp	r3, #0
 800d828:	d009      	beq.n	800d83e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	4413      	add	r3, r2
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	4907      	ldr	r1, [pc, #28]	; (800d854 <lwip_cyclic_timer+0x60>)
 800d836:	4618      	mov	r0, r3
 800d838:	f7ff ff6e 	bl	800d718 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d83c:	e004      	b.n	800d848 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	4904      	ldr	r1, [pc, #16]	; (800d854 <lwip_cyclic_timer+0x60>)
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	f7ff ff68 	bl	800d718 <sys_timeout_abs>
}
 800d848:	bf00      	nop
 800d84a:	3718      	adds	r7, #24
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	240031dc 	.word	0x240031dc
 800d854:	0800d7f5 	.word	0x0800d7f5

0800d858 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d85e:	2301      	movs	r3, #1
 800d860:	607b      	str	r3, [r7, #4]
 800d862:	e00e      	b.n	800d882 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d864:	4a0b      	ldr	r2, [pc, #44]	; (800d894 <sys_timeouts_init+0x3c>)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	00db      	lsls	r3, r3, #3
 800d870:	4a08      	ldr	r2, [pc, #32]	; (800d894 <sys_timeouts_init+0x3c>)
 800d872:	4413      	add	r3, r2
 800d874:	461a      	mov	r2, r3
 800d876:	4908      	ldr	r1, [pc, #32]	; (800d898 <sys_timeouts_init+0x40>)
 800d878:	f000 f810 	bl	800d89c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	3301      	adds	r3, #1
 800d880:	607b      	str	r3, [r7, #4]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2b02      	cmp	r3, #2
 800d886:	d9ed      	bls.n	800d864 <sys_timeouts_init+0xc>
  }
}
 800d888:	bf00      	nop
 800d88a:	bf00      	nop
 800d88c:	3708      	adds	r7, #8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	080143e8 	.word	0x080143e8
 800d898:	0800d7f5 	.word	0x0800d7f5

0800d89c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b086      	sub	sp, #24
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	60b9      	str	r1, [r7, #8]
 800d8a6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8ae:	d306      	bcc.n	800d8be <sys_timeout+0x22>
 800d8b0:	4b0a      	ldr	r3, [pc, #40]	; (800d8dc <sys_timeout+0x40>)
 800d8b2:	f240 1229 	movw	r2, #297	; 0x129
 800d8b6:	490a      	ldr	r1, [pc, #40]	; (800d8e0 <sys_timeout+0x44>)
 800d8b8:	480a      	ldr	r0, [pc, #40]	; (800d8e4 <sys_timeout+0x48>)
 800d8ba:	f002 fdf1 	bl	80104a0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d8be:	f7f7 fdc3 	bl	8005448 <sys_now>
 800d8c2:	4602      	mov	r2, r0
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	4413      	add	r3, r2
 800d8c8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	68b9      	ldr	r1, [r7, #8]
 800d8ce:	6978      	ldr	r0, [r7, #20]
 800d8d0:	f7ff ff22 	bl	800d718 <sys_timeout_abs>
#endif
}
 800d8d4:	bf00      	nop
 800d8d6:	3718      	adds	r7, #24
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}
 800d8dc:	08013804 	.word	0x08013804
 800d8e0:	080138a0 	.word	0x080138a0
 800d8e4:	08013878 	.word	0x08013878

0800d8e8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d8ee:	f7f7 fdab 	bl	8005448 <sys_now>
 800d8f2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d8f4:	4b1a      	ldr	r3, [pc, #104]	; (800d960 <sys_check_timeouts+0x78>)
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	b2db      	uxtb	r3, r3
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d001      	beq.n	800d902 <sys_check_timeouts+0x1a>
 800d8fe:	f7f9 f8cf 	bl	8006aa0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d902:	4b18      	ldr	r3, [pc, #96]	; (800d964 <sys_check_timeouts+0x7c>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d022      	beq.n	800d954 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	68fa      	ldr	r2, [r7, #12]
 800d914:	1ad3      	subs	r3, r2, r3
 800d916:	0fdb      	lsrs	r3, r3, #31
 800d918:	f003 0301 	and.w	r3, r3, #1
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d11a      	bne.n	800d958 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	4a0f      	ldr	r2, [pc, #60]	; (800d964 <sys_check_timeouts+0x7c>)
 800d928:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	689b      	ldr	r3, [r3, #8]
 800d92e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	68db      	ldr	r3, [r3, #12]
 800d934:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	4a0b      	ldr	r2, [pc, #44]	; (800d968 <sys_check_timeouts+0x80>)
 800d93c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d93e:	68b9      	ldr	r1, [r7, #8]
 800d940:	2006      	movs	r0, #6
 800d942:	f7f8 fd71 	bl	8006428 <memp_free>
    if (handler != NULL) {
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d0d3      	beq.n	800d8f4 <sys_check_timeouts+0xc>
      handler(arg);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6838      	ldr	r0, [r7, #0]
 800d950:	4798      	blx	r3
  do {
 800d952:	e7cf      	b.n	800d8f4 <sys_check_timeouts+0xc>
      return;
 800d954:	bf00      	nop
 800d956:	e000      	b.n	800d95a <sys_check_timeouts+0x72>
      return;
 800d958:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d95a:	3710      	adds	r7, #16
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	24003185 	.word	0x24003185
 800d964:	240031d8 	.word	0x240031d8
 800d968:	240031dc 	.word	0x240031dc

0800d96c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d970:	f002 fdae 	bl	80104d0 <rand>
 800d974:	4603      	mov	r3, r0
 800d976:	b29b      	uxth	r3, r3
 800d978:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d97c:	b29b      	uxth	r3, r3
 800d97e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d982:	b29a      	uxth	r2, r3
 800d984:	4b01      	ldr	r3, [pc, #4]	; (800d98c <udp_init+0x20>)
 800d986:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d988:	bf00      	nop
 800d98a:	bd80      	pop	{r7, pc}
 800d98c:	2400002c 	.word	0x2400002c

0800d990 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	4613      	mov	r3, r2
 800d99c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d105      	bne.n	800d9b0 <udp_input_local_match+0x20>
 800d9a4:	4b27      	ldr	r3, [pc, #156]	; (800da44 <udp_input_local_match+0xb4>)
 800d9a6:	2287      	movs	r2, #135	; 0x87
 800d9a8:	4927      	ldr	r1, [pc, #156]	; (800da48 <udp_input_local_match+0xb8>)
 800d9aa:	4828      	ldr	r0, [pc, #160]	; (800da4c <udp_input_local_match+0xbc>)
 800d9ac:	f002 fd78 	bl	80104a0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d105      	bne.n	800d9c2 <udp_input_local_match+0x32>
 800d9b6:	4b23      	ldr	r3, [pc, #140]	; (800da44 <udp_input_local_match+0xb4>)
 800d9b8:	2288      	movs	r2, #136	; 0x88
 800d9ba:	4925      	ldr	r1, [pc, #148]	; (800da50 <udp_input_local_match+0xc0>)
 800d9bc:	4823      	ldr	r0, [pc, #140]	; (800da4c <udp_input_local_match+0xbc>)
 800d9be:	f002 fd6f 	bl	80104a0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	7a1b      	ldrb	r3, [r3, #8]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00b      	beq.n	800d9e2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	7a1a      	ldrb	r2, [r3, #8]
 800d9ce:	4b21      	ldr	r3, [pc, #132]	; (800da54 <udp_input_local_match+0xc4>)
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d001      	beq.n	800d9e2 <udp_input_local_match+0x52>
    return 0;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	e02b      	b.n	800da3a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d9e2:	79fb      	ldrb	r3, [r7, #7]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d018      	beq.n	800da1a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d013      	beq.n	800da16 <udp_input_local_match+0x86>
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d00f      	beq.n	800da16 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d9f6:	4b17      	ldr	r3, [pc, #92]	; (800da54 <udp_input_local_match+0xc4>)
 800d9f8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d9fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9fe:	d00a      	beq.n	800da16 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	4b13      	ldr	r3, [pc, #76]	; (800da54 <udp_input_local_match+0xc4>)
 800da06:	695b      	ldr	r3, [r3, #20]
 800da08:	405a      	eors	r2, r3
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	3308      	adds	r3, #8
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800da12:	2b00      	cmp	r3, #0
 800da14:	d110      	bne.n	800da38 <udp_input_local_match+0xa8>
          return 1;
 800da16:	2301      	movs	r3, #1
 800da18:	e00f      	b.n	800da3a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d009      	beq.n	800da34 <udp_input_local_match+0xa4>
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d005      	beq.n	800da34 <udp_input_local_match+0xa4>
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	4b09      	ldr	r3, [pc, #36]	; (800da54 <udp_input_local_match+0xc4>)
 800da2e:	695b      	ldr	r3, [r3, #20]
 800da30:	429a      	cmp	r2, r3
 800da32:	d101      	bne.n	800da38 <udp_input_local_match+0xa8>
        return 1;
 800da34:	2301      	movs	r3, #1
 800da36:	e000      	b.n	800da3a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800da38:	2300      	movs	r3, #0
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3710      	adds	r7, #16
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	080138ec 	.word	0x080138ec
 800da48:	0801391c 	.word	0x0801391c
 800da4c:	08013940 	.word	0x08013940
 800da50:	08013968 	.word	0x08013968
 800da54:	2400026c 	.word	0x2400026c

0800da58 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800da58:	b590      	push	{r4, r7, lr}
 800da5a:	b08d      	sub	sp, #52	; 0x34
 800da5c:	af02      	add	r7, sp, #8
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800da62:	2300      	movs	r3, #0
 800da64:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d105      	bne.n	800da78 <udp_input+0x20>
 800da6c:	4b7c      	ldr	r3, [pc, #496]	; (800dc60 <udp_input+0x208>)
 800da6e:	22cf      	movs	r2, #207	; 0xcf
 800da70:	497c      	ldr	r1, [pc, #496]	; (800dc64 <udp_input+0x20c>)
 800da72:	487d      	ldr	r0, [pc, #500]	; (800dc68 <udp_input+0x210>)
 800da74:	f002 fd14 	bl	80104a0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d105      	bne.n	800da8a <udp_input+0x32>
 800da7e:	4b78      	ldr	r3, [pc, #480]	; (800dc60 <udp_input+0x208>)
 800da80:	22d0      	movs	r2, #208	; 0xd0
 800da82:	497a      	ldr	r1, [pc, #488]	; (800dc6c <udp_input+0x214>)
 800da84:	4878      	ldr	r0, [pc, #480]	; (800dc68 <udp_input+0x210>)
 800da86:	f002 fd0b 	bl	80104a0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	895b      	ldrh	r3, [r3, #10]
 800da8e:	2b07      	cmp	r3, #7
 800da90:	d803      	bhi.n	800da9a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f7f9 fb3e 	bl	8007114 <pbuf_free>
    goto end;
 800da98:	e0de      	b.n	800dc58 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800daa0:	4b73      	ldr	r3, [pc, #460]	; (800dc70 <udp_input+0x218>)
 800daa2:	695b      	ldr	r3, [r3, #20]
 800daa4:	4a72      	ldr	r2, [pc, #456]	; (800dc70 <udp_input+0x218>)
 800daa6:	6812      	ldr	r2, [r2, #0]
 800daa8:	4611      	mov	r1, r2
 800daaa:	4618      	mov	r0, r3
 800daac:	f001 fcae 	bl	800f40c <ip4_addr_isbroadcast_u32>
 800dab0:	4603      	mov	r3, r0
 800dab2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	881b      	ldrh	r3, [r3, #0]
 800dab8:	b29b      	uxth	r3, r3
 800daba:	4618      	mov	r0, r3
 800dabc:	f7f7 ff14 	bl	80058e8 <lwip_htons>
 800dac0:	4603      	mov	r3, r0
 800dac2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	885b      	ldrh	r3, [r3, #2]
 800dac8:	b29b      	uxth	r3, r3
 800daca:	4618      	mov	r0, r3
 800dacc:	f7f7 ff0c 	bl	80058e8 <lwip_htons>
 800dad0:	4603      	mov	r3, r0
 800dad2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800dad4:	2300      	movs	r3, #0
 800dad6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800dad8:	2300      	movs	r3, #0
 800dada:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800dadc:	2300      	movs	r3, #0
 800dade:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dae0:	4b64      	ldr	r3, [pc, #400]	; (800dc74 <udp_input+0x21c>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	627b      	str	r3, [r7, #36]	; 0x24
 800dae6:	e054      	b.n	800db92 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800dae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daea:	8a5b      	ldrh	r3, [r3, #18]
 800daec:	89fa      	ldrh	r2, [r7, #14]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d14a      	bne.n	800db88 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800daf2:	7cfb      	ldrb	r3, [r7, #19]
 800daf4:	461a      	mov	r2, r3
 800daf6:	6839      	ldr	r1, [r7, #0]
 800daf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dafa:	f7ff ff49 	bl	800d990 <udp_input_local_match>
 800dafe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800db00:	2b00      	cmp	r3, #0
 800db02:	d041      	beq.n	800db88 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800db04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db06:	7c1b      	ldrb	r3, [r3, #16]
 800db08:	f003 0304 	and.w	r3, r3, #4
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d11d      	bne.n	800db4c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800db10:	69fb      	ldr	r3, [r7, #28]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d102      	bne.n	800db1c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800db16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db18:	61fb      	str	r3, [r7, #28]
 800db1a:	e017      	b.n	800db4c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800db1c:	7cfb      	ldrb	r3, [r7, #19]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d014      	beq.n	800db4c <udp_input+0xf4>
 800db22:	4b53      	ldr	r3, [pc, #332]	; (800dc70 <udp_input+0x218>)
 800db24:	695b      	ldr	r3, [r3, #20]
 800db26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db2a:	d10f      	bne.n	800db4c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	3304      	adds	r3, #4
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	429a      	cmp	r2, r3
 800db38:	d008      	beq.n	800db4c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800db3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3c:	681a      	ldr	r2, [r3, #0]
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	3304      	adds	r3, #4
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	429a      	cmp	r2, r3
 800db46:	d101      	bne.n	800db4c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800db48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800db4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4e:	8a9b      	ldrh	r3, [r3, #20]
 800db50:	8a3a      	ldrh	r2, [r7, #16]
 800db52:	429a      	cmp	r2, r3
 800db54:	d118      	bne.n	800db88 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800db56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db58:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d005      	beq.n	800db6a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800db5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db60:	685a      	ldr	r2, [r3, #4]
 800db62:	4b43      	ldr	r3, [pc, #268]	; (800dc70 <udp_input+0x218>)
 800db64:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800db66:	429a      	cmp	r2, r3
 800db68:	d10e      	bne.n	800db88 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800db6a:	6a3b      	ldr	r3, [r7, #32]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d014      	beq.n	800db9a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800db70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db72:	68da      	ldr	r2, [r3, #12]
 800db74:	6a3b      	ldr	r3, [r7, #32]
 800db76:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800db78:	4b3e      	ldr	r3, [pc, #248]	; (800dc74 <udp_input+0x21c>)
 800db7a:	681a      	ldr	r2, [r3, #0]
 800db7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800db80:	4a3c      	ldr	r2, [pc, #240]	; (800dc74 <udp_input+0x21c>)
 800db82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db84:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800db86:	e008      	b.n	800db9a <udp_input+0x142>
      }
    }

    prev = pcb;
 800db88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800db8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8e:	68db      	ldr	r3, [r3, #12]
 800db90:	627b      	str	r3, [r7, #36]	; 0x24
 800db92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db94:	2b00      	cmp	r3, #0
 800db96:	d1a7      	bne.n	800dae8 <udp_input+0x90>
 800db98:	e000      	b.n	800db9c <udp_input+0x144>
        break;
 800db9a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800db9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d101      	bne.n	800dba6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800dba2:	69fb      	ldr	r3, [r7, #28]
 800dba4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800dba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d002      	beq.n	800dbb2 <udp_input+0x15a>
    for_us = 1;
 800dbac:	2301      	movs	r3, #1
 800dbae:	76fb      	strb	r3, [r7, #27]
 800dbb0:	e00a      	b.n	800dbc8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	3304      	adds	r3, #4
 800dbb6:	681a      	ldr	r2, [r3, #0]
 800dbb8:	4b2d      	ldr	r3, [pc, #180]	; (800dc70 <udp_input+0x218>)
 800dbba:	695b      	ldr	r3, [r3, #20]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	bf0c      	ite	eq
 800dbc0:	2301      	moveq	r3, #1
 800dbc2:	2300      	movne	r3, #0
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800dbc8:	7efb      	ldrb	r3, [r7, #27]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d041      	beq.n	800dc52 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800dbce:	2108      	movs	r1, #8
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f7f9 fa19 	bl	8007008 <pbuf_remove_header>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d00a      	beq.n	800dbf2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800dbdc:	4b20      	ldr	r3, [pc, #128]	; (800dc60 <udp_input+0x208>)
 800dbde:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800dbe2:	4925      	ldr	r1, [pc, #148]	; (800dc78 <udp_input+0x220>)
 800dbe4:	4820      	ldr	r0, [pc, #128]	; (800dc68 <udp_input+0x210>)
 800dbe6:	f002 fc5b 	bl	80104a0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f7f9 fa92 	bl	8007114 <pbuf_free>
      goto end;
 800dbf0:	e032      	b.n	800dc58 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800dbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d012      	beq.n	800dc1e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800dbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfa:	699b      	ldr	r3, [r3, #24]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d00a      	beq.n	800dc16 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800dc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc02:	699c      	ldr	r4, [r3, #24]
 800dc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc06:	69d8      	ldr	r0, [r3, #28]
 800dc08:	8a3b      	ldrh	r3, [r7, #16]
 800dc0a:	9300      	str	r3, [sp, #0]
 800dc0c:	4b1b      	ldr	r3, [pc, #108]	; (800dc7c <udp_input+0x224>)
 800dc0e:	687a      	ldr	r2, [r7, #4]
 800dc10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc12:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800dc14:	e021      	b.n	800dc5a <udp_input+0x202>
        pbuf_free(p);
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f7f9 fa7c 	bl	8007114 <pbuf_free>
        goto end;
 800dc1c:	e01c      	b.n	800dc58 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800dc1e:	7cfb      	ldrb	r3, [r7, #19]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d112      	bne.n	800dc4a <udp_input+0x1f2>
 800dc24:	4b12      	ldr	r3, [pc, #72]	; (800dc70 <udp_input+0x218>)
 800dc26:	695b      	ldr	r3, [r3, #20]
 800dc28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc2c:	2be0      	cmp	r3, #224	; 0xe0
 800dc2e:	d00c      	beq.n	800dc4a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800dc30:	4b0f      	ldr	r3, [pc, #60]	; (800dc70 <udp_input+0x218>)
 800dc32:	899b      	ldrh	r3, [r3, #12]
 800dc34:	3308      	adds	r3, #8
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	b21b      	sxth	r3, r3
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f7f9 fa56 	bl	80070ee <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800dc42:	2103      	movs	r1, #3
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f001 f8b7 	bl	800edb8 <icmp_dest_unreach>
      pbuf_free(p);
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7f9 fa62 	bl	8007114 <pbuf_free>
  return;
 800dc50:	e003      	b.n	800dc5a <udp_input+0x202>
    pbuf_free(p);
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f7f9 fa5e 	bl	8007114 <pbuf_free>
  return;
 800dc58:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800dc5a:	372c      	adds	r7, #44	; 0x2c
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd90      	pop	{r4, r7, pc}
 800dc60:	080138ec 	.word	0x080138ec
 800dc64:	08013990 	.word	0x08013990
 800dc68:	08013940 	.word	0x08013940
 800dc6c:	080139a8 	.word	0x080139a8
 800dc70:	2400026c 	.word	0x2400026c
 800dc74:	240031e4 	.word	0x240031e4
 800dc78:	080139c4 	.word	0x080139c4
 800dc7c:	2400027c 	.word	0x2400027c

0800dc80 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b085      	sub	sp, #20
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d01e      	beq.n	800dcce <udp_netif_ip_addr_changed+0x4e>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d01a      	beq.n	800dcce <udp_netif_ip_addr_changed+0x4e>
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d017      	beq.n	800dcce <udp_netif_ip_addr_changed+0x4e>
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d013      	beq.n	800dcce <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800dca6:	4b0d      	ldr	r3, [pc, #52]	; (800dcdc <udp_netif_ip_addr_changed+0x5c>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	60fb      	str	r3, [r7, #12]
 800dcac:	e00c      	b.n	800dcc8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d103      	bne.n	800dcc2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	60fb      	str	r3, [r7, #12]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d1ef      	bne.n	800dcae <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800dcce:	bf00      	nop
 800dcd0:	3714      	adds	r7, #20
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd8:	4770      	bx	lr
 800dcda:	bf00      	nop
 800dcdc:	240031e4 	.word	0x240031e4

0800dce0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800dce8:	4915      	ldr	r1, [pc, #84]	; (800dd40 <etharp_free_entry+0x60>)
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	4613      	mov	r3, r2
 800dcee:	005b      	lsls	r3, r3, #1
 800dcf0:	4413      	add	r3, r2
 800dcf2:	00db      	lsls	r3, r3, #3
 800dcf4:	440b      	add	r3, r1
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d013      	beq.n	800dd24 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800dcfc:	4910      	ldr	r1, [pc, #64]	; (800dd40 <etharp_free_entry+0x60>)
 800dcfe:	687a      	ldr	r2, [r7, #4]
 800dd00:	4613      	mov	r3, r2
 800dd02:	005b      	lsls	r3, r3, #1
 800dd04:	4413      	add	r3, r2
 800dd06:	00db      	lsls	r3, r3, #3
 800dd08:	440b      	add	r3, r1
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f7f9 fa01 	bl	8007114 <pbuf_free>
    arp_table[i].q = NULL;
 800dd12:	490b      	ldr	r1, [pc, #44]	; (800dd40 <etharp_free_entry+0x60>)
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	4613      	mov	r3, r2
 800dd18:	005b      	lsls	r3, r3, #1
 800dd1a:	4413      	add	r3, r2
 800dd1c:	00db      	lsls	r3, r3, #3
 800dd1e:	440b      	add	r3, r1
 800dd20:	2200      	movs	r2, #0
 800dd22:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800dd24:	4906      	ldr	r1, [pc, #24]	; (800dd40 <etharp_free_entry+0x60>)
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	4613      	mov	r3, r2
 800dd2a:	005b      	lsls	r3, r3, #1
 800dd2c:	4413      	add	r3, r2
 800dd2e:	00db      	lsls	r3, r3, #3
 800dd30:	440b      	add	r3, r1
 800dd32:	3314      	adds	r3, #20
 800dd34:	2200      	movs	r2, #0
 800dd36:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800dd38:	bf00      	nop
 800dd3a:	3708      	adds	r7, #8
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	240031e8 	.word	0x240031e8

0800dd44 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	607b      	str	r3, [r7, #4]
 800dd4e:	e096      	b.n	800de7e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800dd50:	494f      	ldr	r1, [pc, #316]	; (800de90 <etharp_tmr+0x14c>)
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	4613      	mov	r3, r2
 800dd56:	005b      	lsls	r3, r3, #1
 800dd58:	4413      	add	r3, r2
 800dd5a:	00db      	lsls	r3, r3, #3
 800dd5c:	440b      	add	r3, r1
 800dd5e:	3314      	adds	r3, #20
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800dd64:	78fb      	ldrb	r3, [r7, #3]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	f000 8086 	beq.w	800de78 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800dd6c:	4948      	ldr	r1, [pc, #288]	; (800de90 <etharp_tmr+0x14c>)
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	4613      	mov	r3, r2
 800dd72:	005b      	lsls	r3, r3, #1
 800dd74:	4413      	add	r3, r2
 800dd76:	00db      	lsls	r3, r3, #3
 800dd78:	440b      	add	r3, r1
 800dd7a:	3312      	adds	r3, #18
 800dd7c:	881b      	ldrh	r3, [r3, #0]
 800dd7e:	3301      	adds	r3, #1
 800dd80:	b298      	uxth	r0, r3
 800dd82:	4943      	ldr	r1, [pc, #268]	; (800de90 <etharp_tmr+0x14c>)
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	4613      	mov	r3, r2
 800dd88:	005b      	lsls	r3, r3, #1
 800dd8a:	4413      	add	r3, r2
 800dd8c:	00db      	lsls	r3, r3, #3
 800dd8e:	440b      	add	r3, r1
 800dd90:	3312      	adds	r3, #18
 800dd92:	4602      	mov	r2, r0
 800dd94:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dd96:	493e      	ldr	r1, [pc, #248]	; (800de90 <etharp_tmr+0x14c>)
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	4613      	mov	r3, r2
 800dd9c:	005b      	lsls	r3, r3, #1
 800dd9e:	4413      	add	r3, r2
 800dda0:	00db      	lsls	r3, r3, #3
 800dda2:	440b      	add	r3, r1
 800dda4:	3312      	adds	r3, #18
 800dda6:	881b      	ldrh	r3, [r3, #0]
 800dda8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ddac:	d215      	bcs.n	800ddda <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ddae:	4938      	ldr	r1, [pc, #224]	; (800de90 <etharp_tmr+0x14c>)
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	4613      	mov	r3, r2
 800ddb4:	005b      	lsls	r3, r3, #1
 800ddb6:	4413      	add	r3, r2
 800ddb8:	00db      	lsls	r3, r3, #3
 800ddba:	440b      	add	r3, r1
 800ddbc:	3314      	adds	r3, #20
 800ddbe:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d10e      	bne.n	800dde2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ddc4:	4932      	ldr	r1, [pc, #200]	; (800de90 <etharp_tmr+0x14c>)
 800ddc6:	687a      	ldr	r2, [r7, #4]
 800ddc8:	4613      	mov	r3, r2
 800ddca:	005b      	lsls	r3, r3, #1
 800ddcc:	4413      	add	r3, r2
 800ddce:	00db      	lsls	r3, r3, #3
 800ddd0:	440b      	add	r3, r1
 800ddd2:	3312      	adds	r3, #18
 800ddd4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ddd6:	2b04      	cmp	r3, #4
 800ddd8:	d903      	bls.n	800dde2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f7ff ff80 	bl	800dce0 <etharp_free_entry>
 800dde0:	e04a      	b.n	800de78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800dde2:	492b      	ldr	r1, [pc, #172]	; (800de90 <etharp_tmr+0x14c>)
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	4613      	mov	r3, r2
 800dde8:	005b      	lsls	r3, r3, #1
 800ddea:	4413      	add	r3, r2
 800ddec:	00db      	lsls	r3, r3, #3
 800ddee:	440b      	add	r3, r1
 800ddf0:	3314      	adds	r3, #20
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	2b03      	cmp	r3, #3
 800ddf6:	d10a      	bne.n	800de0e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ddf8:	4925      	ldr	r1, [pc, #148]	; (800de90 <etharp_tmr+0x14c>)
 800ddfa:	687a      	ldr	r2, [r7, #4]
 800ddfc:	4613      	mov	r3, r2
 800ddfe:	005b      	lsls	r3, r3, #1
 800de00:	4413      	add	r3, r2
 800de02:	00db      	lsls	r3, r3, #3
 800de04:	440b      	add	r3, r1
 800de06:	3314      	adds	r3, #20
 800de08:	2204      	movs	r2, #4
 800de0a:	701a      	strb	r2, [r3, #0]
 800de0c:	e034      	b.n	800de78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800de0e:	4920      	ldr	r1, [pc, #128]	; (800de90 <etharp_tmr+0x14c>)
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	4613      	mov	r3, r2
 800de14:	005b      	lsls	r3, r3, #1
 800de16:	4413      	add	r3, r2
 800de18:	00db      	lsls	r3, r3, #3
 800de1a:	440b      	add	r3, r1
 800de1c:	3314      	adds	r3, #20
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	2b04      	cmp	r3, #4
 800de22:	d10a      	bne.n	800de3a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800de24:	491a      	ldr	r1, [pc, #104]	; (800de90 <etharp_tmr+0x14c>)
 800de26:	687a      	ldr	r2, [r7, #4]
 800de28:	4613      	mov	r3, r2
 800de2a:	005b      	lsls	r3, r3, #1
 800de2c:	4413      	add	r3, r2
 800de2e:	00db      	lsls	r3, r3, #3
 800de30:	440b      	add	r3, r1
 800de32:	3314      	adds	r3, #20
 800de34:	2202      	movs	r2, #2
 800de36:	701a      	strb	r2, [r3, #0]
 800de38:	e01e      	b.n	800de78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800de3a:	4915      	ldr	r1, [pc, #84]	; (800de90 <etharp_tmr+0x14c>)
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	4613      	mov	r3, r2
 800de40:	005b      	lsls	r3, r3, #1
 800de42:	4413      	add	r3, r2
 800de44:	00db      	lsls	r3, r3, #3
 800de46:	440b      	add	r3, r1
 800de48:	3314      	adds	r3, #20
 800de4a:	781b      	ldrb	r3, [r3, #0]
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d113      	bne.n	800de78 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800de50:	490f      	ldr	r1, [pc, #60]	; (800de90 <etharp_tmr+0x14c>)
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	4613      	mov	r3, r2
 800de56:	005b      	lsls	r3, r3, #1
 800de58:	4413      	add	r3, r2
 800de5a:	00db      	lsls	r3, r3, #3
 800de5c:	440b      	add	r3, r1
 800de5e:	3308      	adds	r3, #8
 800de60:	6818      	ldr	r0, [r3, #0]
 800de62:	687a      	ldr	r2, [r7, #4]
 800de64:	4613      	mov	r3, r2
 800de66:	005b      	lsls	r3, r3, #1
 800de68:	4413      	add	r3, r2
 800de6a:	00db      	lsls	r3, r3, #3
 800de6c:	4a08      	ldr	r2, [pc, #32]	; (800de90 <etharp_tmr+0x14c>)
 800de6e:	4413      	add	r3, r2
 800de70:	3304      	adds	r3, #4
 800de72:	4619      	mov	r1, r3
 800de74:	f000 fe6e 	bl	800eb54 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	3301      	adds	r3, #1
 800de7c:	607b      	str	r3, [r7, #4]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2b09      	cmp	r3, #9
 800de82:	f77f af65 	ble.w	800dd50 <etharp_tmr+0xc>
      }
    }
  }
}
 800de86:	bf00      	nop
 800de88:	bf00      	nop
 800de8a:	3708      	adds	r7, #8
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	240031e8 	.word	0x240031e8

0800de94 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b08a      	sub	sp, #40	; 0x28
 800de98:	af00      	add	r7, sp, #0
 800de9a:	60f8      	str	r0, [r7, #12]
 800de9c:	460b      	mov	r3, r1
 800de9e:	607a      	str	r2, [r7, #4]
 800dea0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800dea2:	230a      	movs	r3, #10
 800dea4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800dea6:	230a      	movs	r3, #10
 800dea8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800deaa:	230a      	movs	r3, #10
 800deac:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800deae:	2300      	movs	r3, #0
 800deb0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800deb2:	230a      	movs	r3, #10
 800deb4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800deb6:	2300      	movs	r3, #0
 800deb8:	83bb      	strh	r3, [r7, #28]
 800deba:	2300      	movs	r3, #0
 800debc:	837b      	strh	r3, [r7, #26]
 800debe:	2300      	movs	r3, #0
 800dec0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dec2:	2300      	movs	r3, #0
 800dec4:	843b      	strh	r3, [r7, #32]
 800dec6:	e0ae      	b.n	800e026 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800dec8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800decc:	49a6      	ldr	r1, [pc, #664]	; (800e168 <etharp_find_entry+0x2d4>)
 800dece:	4613      	mov	r3, r2
 800ded0:	005b      	lsls	r3, r3, #1
 800ded2:	4413      	add	r3, r2
 800ded4:	00db      	lsls	r3, r3, #3
 800ded6:	440b      	add	r3, r1
 800ded8:	3314      	adds	r3, #20
 800deda:	781b      	ldrb	r3, [r3, #0]
 800dedc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800dede:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dee2:	2b0a      	cmp	r3, #10
 800dee4:	d105      	bne.n	800def2 <etharp_find_entry+0x5e>
 800dee6:	7dfb      	ldrb	r3, [r7, #23]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d102      	bne.n	800def2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800deec:	8c3b      	ldrh	r3, [r7, #32]
 800deee:	847b      	strh	r3, [r7, #34]	; 0x22
 800def0:	e095      	b.n	800e01e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800def2:	7dfb      	ldrb	r3, [r7, #23]
 800def4:	2b00      	cmp	r3, #0
 800def6:	f000 8092 	beq.w	800e01e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800defa:	7dfb      	ldrb	r3, [r7, #23]
 800defc:	2b01      	cmp	r3, #1
 800defe:	d009      	beq.n	800df14 <etharp_find_entry+0x80>
 800df00:	7dfb      	ldrb	r3, [r7, #23]
 800df02:	2b01      	cmp	r3, #1
 800df04:	d806      	bhi.n	800df14 <etharp_find_entry+0x80>
 800df06:	4b99      	ldr	r3, [pc, #612]	; (800e16c <etharp_find_entry+0x2d8>)
 800df08:	f240 1223 	movw	r2, #291	; 0x123
 800df0c:	4998      	ldr	r1, [pc, #608]	; (800e170 <etharp_find_entry+0x2dc>)
 800df0e:	4899      	ldr	r0, [pc, #612]	; (800e174 <etharp_find_entry+0x2e0>)
 800df10:	f002 fac6 	bl	80104a0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d020      	beq.n	800df5c <etharp_find_entry+0xc8>
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	6819      	ldr	r1, [r3, #0]
 800df1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df22:	4891      	ldr	r0, [pc, #580]	; (800e168 <etharp_find_entry+0x2d4>)
 800df24:	4613      	mov	r3, r2
 800df26:	005b      	lsls	r3, r3, #1
 800df28:	4413      	add	r3, r2
 800df2a:	00db      	lsls	r3, r3, #3
 800df2c:	4403      	add	r3, r0
 800df2e:	3304      	adds	r3, #4
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	4299      	cmp	r1, r3
 800df34:	d112      	bne.n	800df5c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d00c      	beq.n	800df56 <etharp_find_entry+0xc2>
 800df3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df40:	4989      	ldr	r1, [pc, #548]	; (800e168 <etharp_find_entry+0x2d4>)
 800df42:	4613      	mov	r3, r2
 800df44:	005b      	lsls	r3, r3, #1
 800df46:	4413      	add	r3, r2
 800df48:	00db      	lsls	r3, r3, #3
 800df4a:	440b      	add	r3, r1
 800df4c:	3308      	adds	r3, #8
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	429a      	cmp	r2, r3
 800df54:	d102      	bne.n	800df5c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800df56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800df5a:	e100      	b.n	800e15e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800df5c:	7dfb      	ldrb	r3, [r7, #23]
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d140      	bne.n	800dfe4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800df62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df66:	4980      	ldr	r1, [pc, #512]	; (800e168 <etharp_find_entry+0x2d4>)
 800df68:	4613      	mov	r3, r2
 800df6a:	005b      	lsls	r3, r3, #1
 800df6c:	4413      	add	r3, r2
 800df6e:	00db      	lsls	r3, r3, #3
 800df70:	440b      	add	r3, r1
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d01a      	beq.n	800dfae <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800df78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df7c:	497a      	ldr	r1, [pc, #488]	; (800e168 <etharp_find_entry+0x2d4>)
 800df7e:	4613      	mov	r3, r2
 800df80:	005b      	lsls	r3, r3, #1
 800df82:	4413      	add	r3, r2
 800df84:	00db      	lsls	r3, r3, #3
 800df86:	440b      	add	r3, r1
 800df88:	3312      	adds	r3, #18
 800df8a:	881b      	ldrh	r3, [r3, #0]
 800df8c:	8bba      	ldrh	r2, [r7, #28]
 800df8e:	429a      	cmp	r2, r3
 800df90:	d845      	bhi.n	800e01e <etharp_find_entry+0x18a>
            old_queue = i;
 800df92:	8c3b      	ldrh	r3, [r7, #32]
 800df94:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800df96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df9a:	4973      	ldr	r1, [pc, #460]	; (800e168 <etharp_find_entry+0x2d4>)
 800df9c:	4613      	mov	r3, r2
 800df9e:	005b      	lsls	r3, r3, #1
 800dfa0:	4413      	add	r3, r2
 800dfa2:	00db      	lsls	r3, r3, #3
 800dfa4:	440b      	add	r3, r1
 800dfa6:	3312      	adds	r3, #18
 800dfa8:	881b      	ldrh	r3, [r3, #0]
 800dfaa:	83bb      	strh	r3, [r7, #28]
 800dfac:	e037      	b.n	800e01e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800dfae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dfb2:	496d      	ldr	r1, [pc, #436]	; (800e168 <etharp_find_entry+0x2d4>)
 800dfb4:	4613      	mov	r3, r2
 800dfb6:	005b      	lsls	r3, r3, #1
 800dfb8:	4413      	add	r3, r2
 800dfba:	00db      	lsls	r3, r3, #3
 800dfbc:	440b      	add	r3, r1
 800dfbe:	3312      	adds	r3, #18
 800dfc0:	881b      	ldrh	r3, [r3, #0]
 800dfc2:	8b7a      	ldrh	r2, [r7, #26]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d82a      	bhi.n	800e01e <etharp_find_entry+0x18a>
            old_pending = i;
 800dfc8:	8c3b      	ldrh	r3, [r7, #32]
 800dfca:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800dfcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dfd0:	4965      	ldr	r1, [pc, #404]	; (800e168 <etharp_find_entry+0x2d4>)
 800dfd2:	4613      	mov	r3, r2
 800dfd4:	005b      	lsls	r3, r3, #1
 800dfd6:	4413      	add	r3, r2
 800dfd8:	00db      	lsls	r3, r3, #3
 800dfda:	440b      	add	r3, r1
 800dfdc:	3312      	adds	r3, #18
 800dfde:	881b      	ldrh	r3, [r3, #0]
 800dfe0:	837b      	strh	r3, [r7, #26]
 800dfe2:	e01c      	b.n	800e01e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800dfe4:	7dfb      	ldrb	r3, [r7, #23]
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d919      	bls.n	800e01e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800dfea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dfee:	495e      	ldr	r1, [pc, #376]	; (800e168 <etharp_find_entry+0x2d4>)
 800dff0:	4613      	mov	r3, r2
 800dff2:	005b      	lsls	r3, r3, #1
 800dff4:	4413      	add	r3, r2
 800dff6:	00db      	lsls	r3, r3, #3
 800dff8:	440b      	add	r3, r1
 800dffa:	3312      	adds	r3, #18
 800dffc:	881b      	ldrh	r3, [r3, #0]
 800dffe:	8b3a      	ldrh	r2, [r7, #24]
 800e000:	429a      	cmp	r2, r3
 800e002:	d80c      	bhi.n	800e01e <etharp_find_entry+0x18a>
            old_stable = i;
 800e004:	8c3b      	ldrh	r3, [r7, #32]
 800e006:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800e008:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e00c:	4956      	ldr	r1, [pc, #344]	; (800e168 <etharp_find_entry+0x2d4>)
 800e00e:	4613      	mov	r3, r2
 800e010:	005b      	lsls	r3, r3, #1
 800e012:	4413      	add	r3, r2
 800e014:	00db      	lsls	r3, r3, #3
 800e016:	440b      	add	r3, r1
 800e018:	3312      	adds	r3, #18
 800e01a:	881b      	ldrh	r3, [r3, #0]
 800e01c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e01e:	8c3b      	ldrh	r3, [r7, #32]
 800e020:	3301      	adds	r3, #1
 800e022:	b29b      	uxth	r3, r3
 800e024:	843b      	strh	r3, [r7, #32]
 800e026:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e02a:	2b09      	cmp	r3, #9
 800e02c:	f77f af4c 	ble.w	800dec8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e030:	7afb      	ldrb	r3, [r7, #11]
 800e032:	f003 0302 	and.w	r3, r3, #2
 800e036:	2b00      	cmp	r3, #0
 800e038:	d108      	bne.n	800e04c <etharp_find_entry+0x1b8>
 800e03a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e03e:	2b0a      	cmp	r3, #10
 800e040:	d107      	bne.n	800e052 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e042:	7afb      	ldrb	r3, [r7, #11]
 800e044:	f003 0301 	and.w	r3, r3, #1
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d102      	bne.n	800e052 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e04c:	f04f 33ff 	mov.w	r3, #4294967295
 800e050:	e085      	b.n	800e15e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e052:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e056:	2b09      	cmp	r3, #9
 800e058:	dc02      	bgt.n	800e060 <etharp_find_entry+0x1cc>
    i = empty;
 800e05a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e05c:	843b      	strh	r3, [r7, #32]
 800e05e:	e039      	b.n	800e0d4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e060:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e064:	2b09      	cmp	r3, #9
 800e066:	dc14      	bgt.n	800e092 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e06a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e06c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e070:	493d      	ldr	r1, [pc, #244]	; (800e168 <etharp_find_entry+0x2d4>)
 800e072:	4613      	mov	r3, r2
 800e074:	005b      	lsls	r3, r3, #1
 800e076:	4413      	add	r3, r2
 800e078:	00db      	lsls	r3, r3, #3
 800e07a:	440b      	add	r3, r1
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d018      	beq.n	800e0b4 <etharp_find_entry+0x220>
 800e082:	4b3a      	ldr	r3, [pc, #232]	; (800e16c <etharp_find_entry+0x2d8>)
 800e084:	f240 126d 	movw	r2, #365	; 0x16d
 800e088:	493b      	ldr	r1, [pc, #236]	; (800e178 <etharp_find_entry+0x2e4>)
 800e08a:	483a      	ldr	r0, [pc, #232]	; (800e174 <etharp_find_entry+0x2e0>)
 800e08c:	f002 fa08 	bl	80104a0 <iprintf>
 800e090:	e010      	b.n	800e0b4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e092:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e096:	2b09      	cmp	r3, #9
 800e098:	dc02      	bgt.n	800e0a0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e09a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e09c:	843b      	strh	r3, [r7, #32]
 800e09e:	e009      	b.n	800e0b4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e0a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e0a4:	2b09      	cmp	r3, #9
 800e0a6:	dc02      	bgt.n	800e0ae <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e0a8:	8bfb      	ldrh	r3, [r7, #30]
 800e0aa:	843b      	strh	r3, [r7, #32]
 800e0ac:	e002      	b.n	800e0b4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e0ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e0b2:	e054      	b.n	800e15e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e0b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e0b8:	2b09      	cmp	r3, #9
 800e0ba:	dd06      	ble.n	800e0ca <etharp_find_entry+0x236>
 800e0bc:	4b2b      	ldr	r3, [pc, #172]	; (800e16c <etharp_find_entry+0x2d8>)
 800e0be:	f240 127f 	movw	r2, #383	; 0x17f
 800e0c2:	492e      	ldr	r1, [pc, #184]	; (800e17c <etharp_find_entry+0x2e8>)
 800e0c4:	482b      	ldr	r0, [pc, #172]	; (800e174 <etharp_find_entry+0x2e0>)
 800e0c6:	f002 f9eb 	bl	80104a0 <iprintf>
    etharp_free_entry(i);
 800e0ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7ff fe06 	bl	800dce0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e0d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e0d8:	2b09      	cmp	r3, #9
 800e0da:	dd06      	ble.n	800e0ea <etharp_find_entry+0x256>
 800e0dc:	4b23      	ldr	r3, [pc, #140]	; (800e16c <etharp_find_entry+0x2d8>)
 800e0de:	f240 1283 	movw	r2, #387	; 0x183
 800e0e2:	4926      	ldr	r1, [pc, #152]	; (800e17c <etharp_find_entry+0x2e8>)
 800e0e4:	4823      	ldr	r0, [pc, #140]	; (800e174 <etharp_find_entry+0x2e0>)
 800e0e6:	f002 f9db 	bl	80104a0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e0ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e0ee:	491e      	ldr	r1, [pc, #120]	; (800e168 <etharp_find_entry+0x2d4>)
 800e0f0:	4613      	mov	r3, r2
 800e0f2:	005b      	lsls	r3, r3, #1
 800e0f4:	4413      	add	r3, r2
 800e0f6:	00db      	lsls	r3, r3, #3
 800e0f8:	440b      	add	r3, r1
 800e0fa:	3314      	adds	r3, #20
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d006      	beq.n	800e110 <etharp_find_entry+0x27c>
 800e102:	4b1a      	ldr	r3, [pc, #104]	; (800e16c <etharp_find_entry+0x2d8>)
 800e104:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800e108:	491d      	ldr	r1, [pc, #116]	; (800e180 <etharp_find_entry+0x2ec>)
 800e10a:	481a      	ldr	r0, [pc, #104]	; (800e174 <etharp_find_entry+0x2e0>)
 800e10c:	f002 f9c8 	bl	80104a0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d00b      	beq.n	800e12e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e116:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	6819      	ldr	r1, [r3, #0]
 800e11e:	4812      	ldr	r0, [pc, #72]	; (800e168 <etharp_find_entry+0x2d4>)
 800e120:	4613      	mov	r3, r2
 800e122:	005b      	lsls	r3, r3, #1
 800e124:	4413      	add	r3, r2
 800e126:	00db      	lsls	r3, r3, #3
 800e128:	4403      	add	r3, r0
 800e12a:	3304      	adds	r3, #4
 800e12c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e12e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e132:	490d      	ldr	r1, [pc, #52]	; (800e168 <etharp_find_entry+0x2d4>)
 800e134:	4613      	mov	r3, r2
 800e136:	005b      	lsls	r3, r3, #1
 800e138:	4413      	add	r3, r2
 800e13a:	00db      	lsls	r3, r3, #3
 800e13c:	440b      	add	r3, r1
 800e13e:	3312      	adds	r3, #18
 800e140:	2200      	movs	r2, #0
 800e142:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e144:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e148:	4907      	ldr	r1, [pc, #28]	; (800e168 <etharp_find_entry+0x2d4>)
 800e14a:	4613      	mov	r3, r2
 800e14c:	005b      	lsls	r3, r3, #1
 800e14e:	4413      	add	r3, r2
 800e150:	00db      	lsls	r3, r3, #3
 800e152:	440b      	add	r3, r1
 800e154:	3308      	adds	r3, #8
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e15a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3728      	adds	r7, #40	; 0x28
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	240031e8 	.word	0x240031e8
 800e16c:	08013c50 	.word	0x08013c50
 800e170:	08013c88 	.word	0x08013c88
 800e174:	08013cc8 	.word	0x08013cc8
 800e178:	08013cf0 	.word	0x08013cf0
 800e17c:	08013d08 	.word	0x08013d08
 800e180:	08013d1c 	.word	0x08013d1c

0800e184 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b088      	sub	sp, #32
 800e188:	af02      	add	r7, sp, #8
 800e18a:	60f8      	str	r0, [r7, #12]
 800e18c:	60b9      	str	r1, [r7, #8]
 800e18e:	607a      	str	r2, [r7, #4]
 800e190:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e198:	2b06      	cmp	r3, #6
 800e19a:	d006      	beq.n	800e1aa <etharp_update_arp_entry+0x26>
 800e19c:	4b48      	ldr	r3, [pc, #288]	; (800e2c0 <etharp_update_arp_entry+0x13c>)
 800e19e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800e1a2:	4948      	ldr	r1, [pc, #288]	; (800e2c4 <etharp_update_arp_entry+0x140>)
 800e1a4:	4848      	ldr	r0, [pc, #288]	; (800e2c8 <etharp_update_arp_entry+0x144>)
 800e1a6:	f002 f97b 	bl	80104a0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d012      	beq.n	800e1d6 <etharp_update_arp_entry+0x52>
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d00e      	beq.n	800e1d6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	68f9      	ldr	r1, [r7, #12]
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f001 f924 	bl	800f40c <ip4_addr_isbroadcast_u32>
 800e1c4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d105      	bne.n	800e1d6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e1d2:	2be0      	cmp	r3, #224	; 0xe0
 800e1d4:	d102      	bne.n	800e1dc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e1d6:	f06f 030f 	mvn.w	r3, #15
 800e1da:	e06c      	b.n	800e2b6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e1dc:	78fb      	ldrb	r3, [r7, #3]
 800e1de:	68fa      	ldr	r2, [r7, #12]
 800e1e0:	4619      	mov	r1, r3
 800e1e2:	68b8      	ldr	r0, [r7, #8]
 800e1e4:	f7ff fe56 	bl	800de94 <etharp_find_entry>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e1ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	da02      	bge.n	800e1fa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e1f4:	8afb      	ldrh	r3, [r7, #22]
 800e1f6:	b25b      	sxtb	r3, r3
 800e1f8:	e05d      	b.n	800e2b6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e1fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e1fe:	4933      	ldr	r1, [pc, #204]	; (800e2cc <etharp_update_arp_entry+0x148>)
 800e200:	4613      	mov	r3, r2
 800e202:	005b      	lsls	r3, r3, #1
 800e204:	4413      	add	r3, r2
 800e206:	00db      	lsls	r3, r3, #3
 800e208:	440b      	add	r3, r1
 800e20a:	3314      	adds	r3, #20
 800e20c:	2202      	movs	r2, #2
 800e20e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e210:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e214:	492d      	ldr	r1, [pc, #180]	; (800e2cc <etharp_update_arp_entry+0x148>)
 800e216:	4613      	mov	r3, r2
 800e218:	005b      	lsls	r3, r3, #1
 800e21a:	4413      	add	r3, r2
 800e21c:	00db      	lsls	r3, r3, #3
 800e21e:	440b      	add	r3, r1
 800e220:	3308      	adds	r3, #8
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e226:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e22a:	4613      	mov	r3, r2
 800e22c:	005b      	lsls	r3, r3, #1
 800e22e:	4413      	add	r3, r2
 800e230:	00db      	lsls	r3, r3, #3
 800e232:	3308      	adds	r3, #8
 800e234:	4a25      	ldr	r2, [pc, #148]	; (800e2cc <etharp_update_arp_entry+0x148>)
 800e236:	4413      	add	r3, r2
 800e238:	3304      	adds	r3, #4
 800e23a:	2206      	movs	r2, #6
 800e23c:	6879      	ldr	r1, [r7, #4]
 800e23e:	4618      	mov	r0, r3
 800e240:	f002 f8fe 	bl	8010440 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e244:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e248:	4920      	ldr	r1, [pc, #128]	; (800e2cc <etharp_update_arp_entry+0x148>)
 800e24a:	4613      	mov	r3, r2
 800e24c:	005b      	lsls	r3, r3, #1
 800e24e:	4413      	add	r3, r2
 800e250:	00db      	lsls	r3, r3, #3
 800e252:	440b      	add	r3, r1
 800e254:	3312      	adds	r3, #18
 800e256:	2200      	movs	r2, #0
 800e258:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e25a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e25e:	491b      	ldr	r1, [pc, #108]	; (800e2cc <etharp_update_arp_entry+0x148>)
 800e260:	4613      	mov	r3, r2
 800e262:	005b      	lsls	r3, r3, #1
 800e264:	4413      	add	r3, r2
 800e266:	00db      	lsls	r3, r3, #3
 800e268:	440b      	add	r3, r1
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d021      	beq.n	800e2b4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e270:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e274:	4915      	ldr	r1, [pc, #84]	; (800e2cc <etharp_update_arp_entry+0x148>)
 800e276:	4613      	mov	r3, r2
 800e278:	005b      	lsls	r3, r3, #1
 800e27a:	4413      	add	r3, r2
 800e27c:	00db      	lsls	r3, r3, #3
 800e27e:	440b      	add	r3, r1
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e284:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e288:	4910      	ldr	r1, [pc, #64]	; (800e2cc <etharp_update_arp_entry+0x148>)
 800e28a:	4613      	mov	r3, r2
 800e28c:	005b      	lsls	r3, r3, #1
 800e28e:	4413      	add	r3, r2
 800e290:	00db      	lsls	r3, r3, #3
 800e292:	440b      	add	r3, r1
 800e294:	2200      	movs	r2, #0
 800e296:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e29e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2a2:	9300      	str	r3, [sp, #0]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6939      	ldr	r1, [r7, #16]
 800e2a8:	68f8      	ldr	r0, [r7, #12]
 800e2aa:	f002 f84d 	bl	8010348 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e2ae:	6938      	ldr	r0, [r7, #16]
 800e2b0:	f7f8 ff30 	bl	8007114 <pbuf_free>
  }
  return ERR_OK;
 800e2b4:	2300      	movs	r3, #0
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3718      	adds	r7, #24
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	08013c50 	.word	0x08013c50
 800e2c4:	08013d48 	.word	0x08013d48
 800e2c8:	08013cc8 	.word	0x08013cc8
 800e2cc:	240031e8 	.word	0x240031e8

0800e2d0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b084      	sub	sp, #16
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e2d8:	2300      	movs	r3, #0
 800e2da:	60fb      	str	r3, [r7, #12]
 800e2dc:	e01e      	b.n	800e31c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e2de:	4913      	ldr	r1, [pc, #76]	; (800e32c <etharp_cleanup_netif+0x5c>)
 800e2e0:	68fa      	ldr	r2, [r7, #12]
 800e2e2:	4613      	mov	r3, r2
 800e2e4:	005b      	lsls	r3, r3, #1
 800e2e6:	4413      	add	r3, r2
 800e2e8:	00db      	lsls	r3, r3, #3
 800e2ea:	440b      	add	r3, r1
 800e2ec:	3314      	adds	r3, #20
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e2f2:	7afb      	ldrb	r3, [r7, #11]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d00e      	beq.n	800e316 <etharp_cleanup_netif+0x46>
 800e2f8:	490c      	ldr	r1, [pc, #48]	; (800e32c <etharp_cleanup_netif+0x5c>)
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	4613      	mov	r3, r2
 800e2fe:	005b      	lsls	r3, r3, #1
 800e300:	4413      	add	r3, r2
 800e302:	00db      	lsls	r3, r3, #3
 800e304:	440b      	add	r3, r1
 800e306:	3308      	adds	r3, #8
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	687a      	ldr	r2, [r7, #4]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d102      	bne.n	800e316 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e310:	68f8      	ldr	r0, [r7, #12]
 800e312:	f7ff fce5 	bl	800dce0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	3301      	adds	r3, #1
 800e31a:	60fb      	str	r3, [r7, #12]
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2b09      	cmp	r3, #9
 800e320:	dddd      	ble.n	800e2de <etharp_cleanup_netif+0xe>
    }
  }
}
 800e322:	bf00      	nop
 800e324:	bf00      	nop
 800e326:	3710      	adds	r7, #16
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}
 800e32c:	240031e8 	.word	0x240031e8

0800e330 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e330:	b5b0      	push	{r4, r5, r7, lr}
 800e332:	b08a      	sub	sp, #40	; 0x28
 800e334:	af04      	add	r7, sp, #16
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d107      	bne.n	800e350 <etharp_input+0x20>
 800e340:	4b3d      	ldr	r3, [pc, #244]	; (800e438 <etharp_input+0x108>)
 800e342:	f240 228a 	movw	r2, #650	; 0x28a
 800e346:	493d      	ldr	r1, [pc, #244]	; (800e43c <etharp_input+0x10c>)
 800e348:	483d      	ldr	r0, [pc, #244]	; (800e440 <etharp_input+0x110>)
 800e34a:	f002 f8a9 	bl	80104a0 <iprintf>
 800e34e:	e06f      	b.n	800e430 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	881b      	ldrh	r3, [r3, #0]
 800e35a:	b29b      	uxth	r3, r3
 800e35c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e360:	d10c      	bne.n	800e37c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e366:	2b06      	cmp	r3, #6
 800e368:	d108      	bne.n	800e37c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e36e:	2b04      	cmp	r3, #4
 800e370:	d104      	bne.n	800e37c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	885b      	ldrh	r3, [r3, #2]
 800e376:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e378:	2b08      	cmp	r3, #8
 800e37a:	d003      	beq.n	800e384 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f7f8 fec9 	bl	8007114 <pbuf_free>
    return;
 800e382:	e055      	b.n	800e430 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	330e      	adds	r3, #14
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	3318      	adds	r3, #24
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	3304      	adds	r3, #4
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d102      	bne.n	800e3a4 <etharp_input+0x74>
    for_us = 0;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	75fb      	strb	r3, [r7, #23]
 800e3a2:	e009      	b.n	800e3b8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e3a4:	68ba      	ldr	r2, [r7, #8]
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	3304      	adds	r3, #4
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	bf0c      	ite	eq
 800e3b0:	2301      	moveq	r3, #1
 800e3b2:	2300      	movne	r3, #0
 800e3b4:	b2db      	uxtb	r3, r3
 800e3b6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	f103 0208 	add.w	r2, r3, #8
 800e3be:	7dfb      	ldrb	r3, [r7, #23]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d001      	beq.n	800e3c8 <etharp_input+0x98>
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	e000      	b.n	800e3ca <etharp_input+0x9a>
 800e3c8:	2302      	movs	r3, #2
 800e3ca:	f107 010c 	add.w	r1, r7, #12
 800e3ce:	6838      	ldr	r0, [r7, #0]
 800e3d0:	f7ff fed8 	bl	800e184 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	88db      	ldrh	r3, [r3, #6]
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3de:	d003      	beq.n	800e3e8 <etharp_input+0xb8>
 800e3e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3e4:	d01e      	beq.n	800e424 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e3e6:	e020      	b.n	800e42a <etharp_input+0xfa>
      if (for_us) {
 800e3e8:	7dfb      	ldrb	r3, [r7, #23]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d01c      	beq.n	800e428 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e3f4:	693b      	ldr	r3, [r7, #16]
 800e3f6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e404:	693a      	ldr	r2, [r7, #16]
 800e406:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e408:	2102      	movs	r1, #2
 800e40a:	9103      	str	r1, [sp, #12]
 800e40c:	f107 010c 	add.w	r1, r7, #12
 800e410:	9102      	str	r1, [sp, #8]
 800e412:	9201      	str	r2, [sp, #4]
 800e414:	9300      	str	r3, [sp, #0]
 800e416:	462b      	mov	r3, r5
 800e418:	4622      	mov	r2, r4
 800e41a:	4601      	mov	r1, r0
 800e41c:	6838      	ldr	r0, [r7, #0]
 800e41e:	f000 faeb 	bl	800e9f8 <etharp_raw>
      break;
 800e422:	e001      	b.n	800e428 <etharp_input+0xf8>
      break;
 800e424:	bf00      	nop
 800e426:	e000      	b.n	800e42a <etharp_input+0xfa>
      break;
 800e428:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f7f8 fe72 	bl	8007114 <pbuf_free>
}
 800e430:	3718      	adds	r7, #24
 800e432:	46bd      	mov	sp, r7
 800e434:	bdb0      	pop	{r4, r5, r7, pc}
 800e436:	bf00      	nop
 800e438:	08013c50 	.word	0x08013c50
 800e43c:	08013da0 	.word	0x08013da0
 800e440:	08013cc8 	.word	0x08013cc8

0800e444 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b086      	sub	sp, #24
 800e448:	af02      	add	r7, sp, #8
 800e44a:	60f8      	str	r0, [r7, #12]
 800e44c:	60b9      	str	r1, [r7, #8]
 800e44e:	4613      	mov	r3, r2
 800e450:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e452:	79fa      	ldrb	r2, [r7, #7]
 800e454:	4944      	ldr	r1, [pc, #272]	; (800e568 <etharp_output_to_arp_index+0x124>)
 800e456:	4613      	mov	r3, r2
 800e458:	005b      	lsls	r3, r3, #1
 800e45a:	4413      	add	r3, r2
 800e45c:	00db      	lsls	r3, r3, #3
 800e45e:	440b      	add	r3, r1
 800e460:	3314      	adds	r3, #20
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	2b01      	cmp	r3, #1
 800e466:	d806      	bhi.n	800e476 <etharp_output_to_arp_index+0x32>
 800e468:	4b40      	ldr	r3, [pc, #256]	; (800e56c <etharp_output_to_arp_index+0x128>)
 800e46a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e46e:	4940      	ldr	r1, [pc, #256]	; (800e570 <etharp_output_to_arp_index+0x12c>)
 800e470:	4840      	ldr	r0, [pc, #256]	; (800e574 <etharp_output_to_arp_index+0x130>)
 800e472:	f002 f815 	bl	80104a0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e476:	79fa      	ldrb	r2, [r7, #7]
 800e478:	493b      	ldr	r1, [pc, #236]	; (800e568 <etharp_output_to_arp_index+0x124>)
 800e47a:	4613      	mov	r3, r2
 800e47c:	005b      	lsls	r3, r3, #1
 800e47e:	4413      	add	r3, r2
 800e480:	00db      	lsls	r3, r3, #3
 800e482:	440b      	add	r3, r1
 800e484:	3314      	adds	r3, #20
 800e486:	781b      	ldrb	r3, [r3, #0]
 800e488:	2b02      	cmp	r3, #2
 800e48a:	d153      	bne.n	800e534 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e48c:	79fa      	ldrb	r2, [r7, #7]
 800e48e:	4936      	ldr	r1, [pc, #216]	; (800e568 <etharp_output_to_arp_index+0x124>)
 800e490:	4613      	mov	r3, r2
 800e492:	005b      	lsls	r3, r3, #1
 800e494:	4413      	add	r3, r2
 800e496:	00db      	lsls	r3, r3, #3
 800e498:	440b      	add	r3, r1
 800e49a:	3312      	adds	r3, #18
 800e49c:	881b      	ldrh	r3, [r3, #0]
 800e49e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e4a2:	d919      	bls.n	800e4d8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e4a4:	79fa      	ldrb	r2, [r7, #7]
 800e4a6:	4613      	mov	r3, r2
 800e4a8:	005b      	lsls	r3, r3, #1
 800e4aa:	4413      	add	r3, r2
 800e4ac:	00db      	lsls	r3, r3, #3
 800e4ae:	4a2e      	ldr	r2, [pc, #184]	; (800e568 <etharp_output_to_arp_index+0x124>)
 800e4b0:	4413      	add	r3, r2
 800e4b2:	3304      	adds	r3, #4
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	68f8      	ldr	r0, [r7, #12]
 800e4b8:	f000 fb4c 	bl	800eb54 <etharp_request>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d138      	bne.n	800e534 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e4c2:	79fa      	ldrb	r2, [r7, #7]
 800e4c4:	4928      	ldr	r1, [pc, #160]	; (800e568 <etharp_output_to_arp_index+0x124>)
 800e4c6:	4613      	mov	r3, r2
 800e4c8:	005b      	lsls	r3, r3, #1
 800e4ca:	4413      	add	r3, r2
 800e4cc:	00db      	lsls	r3, r3, #3
 800e4ce:	440b      	add	r3, r1
 800e4d0:	3314      	adds	r3, #20
 800e4d2:	2203      	movs	r2, #3
 800e4d4:	701a      	strb	r2, [r3, #0]
 800e4d6:	e02d      	b.n	800e534 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e4d8:	79fa      	ldrb	r2, [r7, #7]
 800e4da:	4923      	ldr	r1, [pc, #140]	; (800e568 <etharp_output_to_arp_index+0x124>)
 800e4dc:	4613      	mov	r3, r2
 800e4de:	005b      	lsls	r3, r3, #1
 800e4e0:	4413      	add	r3, r2
 800e4e2:	00db      	lsls	r3, r3, #3
 800e4e4:	440b      	add	r3, r1
 800e4e6:	3312      	adds	r3, #18
 800e4e8:	881b      	ldrh	r3, [r3, #0]
 800e4ea:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e4ee:	d321      	bcc.n	800e534 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e4f0:	79fa      	ldrb	r2, [r7, #7]
 800e4f2:	4613      	mov	r3, r2
 800e4f4:	005b      	lsls	r3, r3, #1
 800e4f6:	4413      	add	r3, r2
 800e4f8:	00db      	lsls	r3, r3, #3
 800e4fa:	4a1b      	ldr	r2, [pc, #108]	; (800e568 <etharp_output_to_arp_index+0x124>)
 800e4fc:	4413      	add	r3, r2
 800e4fe:	1d19      	adds	r1, r3, #4
 800e500:	79fa      	ldrb	r2, [r7, #7]
 800e502:	4613      	mov	r3, r2
 800e504:	005b      	lsls	r3, r3, #1
 800e506:	4413      	add	r3, r2
 800e508:	00db      	lsls	r3, r3, #3
 800e50a:	3308      	adds	r3, #8
 800e50c:	4a16      	ldr	r2, [pc, #88]	; (800e568 <etharp_output_to_arp_index+0x124>)
 800e50e:	4413      	add	r3, r2
 800e510:	3304      	adds	r3, #4
 800e512:	461a      	mov	r2, r3
 800e514:	68f8      	ldr	r0, [r7, #12]
 800e516:	f000 fafb 	bl	800eb10 <etharp_request_dst>
 800e51a:	4603      	mov	r3, r0
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d109      	bne.n	800e534 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e520:	79fa      	ldrb	r2, [r7, #7]
 800e522:	4911      	ldr	r1, [pc, #68]	; (800e568 <etharp_output_to_arp_index+0x124>)
 800e524:	4613      	mov	r3, r2
 800e526:	005b      	lsls	r3, r3, #1
 800e528:	4413      	add	r3, r2
 800e52a:	00db      	lsls	r3, r3, #3
 800e52c:	440b      	add	r3, r1
 800e52e:	3314      	adds	r3, #20
 800e530:	2203      	movs	r2, #3
 800e532:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800e53a:	79fa      	ldrb	r2, [r7, #7]
 800e53c:	4613      	mov	r3, r2
 800e53e:	005b      	lsls	r3, r3, #1
 800e540:	4413      	add	r3, r2
 800e542:	00db      	lsls	r3, r3, #3
 800e544:	3308      	adds	r3, #8
 800e546:	4a08      	ldr	r2, [pc, #32]	; (800e568 <etharp_output_to_arp_index+0x124>)
 800e548:	4413      	add	r3, r2
 800e54a:	3304      	adds	r3, #4
 800e54c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e550:	9200      	str	r2, [sp, #0]
 800e552:	460a      	mov	r2, r1
 800e554:	68b9      	ldr	r1, [r7, #8]
 800e556:	68f8      	ldr	r0, [r7, #12]
 800e558:	f001 fef6 	bl	8010348 <ethernet_output>
 800e55c:	4603      	mov	r3, r0
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3710      	adds	r7, #16
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	240031e8 	.word	0x240031e8
 800e56c:	08013c50 	.word	0x08013c50
 800e570:	08013dc0 	.word	0x08013dc0
 800e574:	08013cc8 	.word	0x08013cc8

0800e578 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b08a      	sub	sp, #40	; 0x28
 800e57c:	af02      	add	r7, sp, #8
 800e57e:	60f8      	str	r0, [r7, #12]
 800e580:	60b9      	str	r1, [r7, #8]
 800e582:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d106      	bne.n	800e59c <etharp_output+0x24>
 800e58e:	4b73      	ldr	r3, [pc, #460]	; (800e75c <etharp_output+0x1e4>)
 800e590:	f240 321e 	movw	r2, #798	; 0x31e
 800e594:	4972      	ldr	r1, [pc, #456]	; (800e760 <etharp_output+0x1e8>)
 800e596:	4873      	ldr	r0, [pc, #460]	; (800e764 <etharp_output+0x1ec>)
 800e598:	f001 ff82 	bl	80104a0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d106      	bne.n	800e5b0 <etharp_output+0x38>
 800e5a2:	4b6e      	ldr	r3, [pc, #440]	; (800e75c <etharp_output+0x1e4>)
 800e5a4:	f240 321f 	movw	r2, #799	; 0x31f
 800e5a8:	496f      	ldr	r1, [pc, #444]	; (800e768 <etharp_output+0x1f0>)
 800e5aa:	486e      	ldr	r0, [pc, #440]	; (800e764 <etharp_output+0x1ec>)
 800e5ac:	f001 ff78 	bl	80104a0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d106      	bne.n	800e5c4 <etharp_output+0x4c>
 800e5b6:	4b69      	ldr	r3, [pc, #420]	; (800e75c <etharp_output+0x1e4>)
 800e5b8:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e5bc:	496b      	ldr	r1, [pc, #428]	; (800e76c <etharp_output+0x1f4>)
 800e5be:	4869      	ldr	r0, [pc, #420]	; (800e764 <etharp_output+0x1ec>)
 800e5c0:	f001 ff6e 	bl	80104a0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	68f9      	ldr	r1, [r7, #12]
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f000 ff1e 	bl	800f40c <ip4_addr_isbroadcast_u32>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d002      	beq.n	800e5dc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e5d6:	4b66      	ldr	r3, [pc, #408]	; (800e770 <etharp_output+0x1f8>)
 800e5d8:	61fb      	str	r3, [r7, #28]
 800e5da:	e0af      	b.n	800e73c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e5e4:	2be0      	cmp	r3, #224	; 0xe0
 800e5e6:	d118      	bne.n	800e61a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e5f0:	235e      	movs	r3, #94	; 0x5e
 800e5f2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	3302      	adds	r3, #2
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	3303      	adds	r3, #3
 800e60e:	781b      	ldrb	r3, [r3, #0]
 800e610:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e612:	f107 0310 	add.w	r3, r7, #16
 800e616:	61fb      	str	r3, [r7, #28]
 800e618:	e090      	b.n	800e73c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	3304      	adds	r3, #4
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	405a      	eors	r2, r3
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	3308      	adds	r3, #8
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	4013      	ands	r3, r2
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d012      	beq.n	800e658 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e638:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d00b      	beq.n	800e658 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	330c      	adds	r3, #12
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d003      	beq.n	800e652 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	330c      	adds	r3, #12
 800e64e:	61bb      	str	r3, [r7, #24]
 800e650:	e002      	b.n	800e658 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e652:	f06f 0303 	mvn.w	r3, #3
 800e656:	e07d      	b.n	800e754 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e658:	4b46      	ldr	r3, [pc, #280]	; (800e774 <etharp_output+0x1fc>)
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	4619      	mov	r1, r3
 800e65e:	4a46      	ldr	r2, [pc, #280]	; (800e778 <etharp_output+0x200>)
 800e660:	460b      	mov	r3, r1
 800e662:	005b      	lsls	r3, r3, #1
 800e664:	440b      	add	r3, r1
 800e666:	00db      	lsls	r3, r3, #3
 800e668:	4413      	add	r3, r2
 800e66a:	3314      	adds	r3, #20
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	2b01      	cmp	r3, #1
 800e670:	d925      	bls.n	800e6be <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e672:	4b40      	ldr	r3, [pc, #256]	; (800e774 <etharp_output+0x1fc>)
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	4619      	mov	r1, r3
 800e678:	4a3f      	ldr	r2, [pc, #252]	; (800e778 <etharp_output+0x200>)
 800e67a:	460b      	mov	r3, r1
 800e67c:	005b      	lsls	r3, r3, #1
 800e67e:	440b      	add	r3, r1
 800e680:	00db      	lsls	r3, r3, #3
 800e682:	4413      	add	r3, r2
 800e684:	3308      	adds	r3, #8
 800e686:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e688:	68fa      	ldr	r2, [r7, #12]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d117      	bne.n	800e6be <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e68e:	69bb      	ldr	r3, [r7, #24]
 800e690:	681a      	ldr	r2, [r3, #0]
 800e692:	4b38      	ldr	r3, [pc, #224]	; (800e774 <etharp_output+0x1fc>)
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	4618      	mov	r0, r3
 800e698:	4937      	ldr	r1, [pc, #220]	; (800e778 <etharp_output+0x200>)
 800e69a:	4603      	mov	r3, r0
 800e69c:	005b      	lsls	r3, r3, #1
 800e69e:	4403      	add	r3, r0
 800e6a0:	00db      	lsls	r3, r3, #3
 800e6a2:	440b      	add	r3, r1
 800e6a4:	3304      	adds	r3, #4
 800e6a6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d108      	bne.n	800e6be <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e6ac:	4b31      	ldr	r3, [pc, #196]	; (800e774 <etharp_output+0x1fc>)
 800e6ae:	781b      	ldrb	r3, [r3, #0]
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	68b9      	ldr	r1, [r7, #8]
 800e6b4:	68f8      	ldr	r0, [r7, #12]
 800e6b6:	f7ff fec5 	bl	800e444 <etharp_output_to_arp_index>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	e04a      	b.n	800e754 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e6be:	2300      	movs	r3, #0
 800e6c0:	75fb      	strb	r3, [r7, #23]
 800e6c2:	e031      	b.n	800e728 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e6c4:	7dfa      	ldrb	r2, [r7, #23]
 800e6c6:	492c      	ldr	r1, [pc, #176]	; (800e778 <etharp_output+0x200>)
 800e6c8:	4613      	mov	r3, r2
 800e6ca:	005b      	lsls	r3, r3, #1
 800e6cc:	4413      	add	r3, r2
 800e6ce:	00db      	lsls	r3, r3, #3
 800e6d0:	440b      	add	r3, r1
 800e6d2:	3314      	adds	r3, #20
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	2b01      	cmp	r3, #1
 800e6d8:	d923      	bls.n	800e722 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e6da:	7dfa      	ldrb	r2, [r7, #23]
 800e6dc:	4926      	ldr	r1, [pc, #152]	; (800e778 <etharp_output+0x200>)
 800e6de:	4613      	mov	r3, r2
 800e6e0:	005b      	lsls	r3, r3, #1
 800e6e2:	4413      	add	r3, r2
 800e6e4:	00db      	lsls	r3, r3, #3
 800e6e6:	440b      	add	r3, r1
 800e6e8:	3308      	adds	r3, #8
 800e6ea:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e6ec:	68fa      	ldr	r2, [r7, #12]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d117      	bne.n	800e722 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e6f2:	69bb      	ldr	r3, [r7, #24]
 800e6f4:	6819      	ldr	r1, [r3, #0]
 800e6f6:	7dfa      	ldrb	r2, [r7, #23]
 800e6f8:	481f      	ldr	r0, [pc, #124]	; (800e778 <etharp_output+0x200>)
 800e6fa:	4613      	mov	r3, r2
 800e6fc:	005b      	lsls	r3, r3, #1
 800e6fe:	4413      	add	r3, r2
 800e700:	00db      	lsls	r3, r3, #3
 800e702:	4403      	add	r3, r0
 800e704:	3304      	adds	r3, #4
 800e706:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e708:	4299      	cmp	r1, r3
 800e70a:	d10a      	bne.n	800e722 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e70c:	4a19      	ldr	r2, [pc, #100]	; (800e774 <etharp_output+0x1fc>)
 800e70e:	7dfb      	ldrb	r3, [r7, #23]
 800e710:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e712:	7dfb      	ldrb	r3, [r7, #23]
 800e714:	461a      	mov	r2, r3
 800e716:	68b9      	ldr	r1, [r7, #8]
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	f7ff fe93 	bl	800e444 <etharp_output_to_arp_index>
 800e71e:	4603      	mov	r3, r0
 800e720:	e018      	b.n	800e754 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e722:	7dfb      	ldrb	r3, [r7, #23]
 800e724:	3301      	adds	r3, #1
 800e726:	75fb      	strb	r3, [r7, #23]
 800e728:	7dfb      	ldrb	r3, [r7, #23]
 800e72a:	2b09      	cmp	r3, #9
 800e72c:	d9ca      	bls.n	800e6c4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e72e:	68ba      	ldr	r2, [r7, #8]
 800e730:	69b9      	ldr	r1, [r7, #24]
 800e732:	68f8      	ldr	r0, [r7, #12]
 800e734:	f000 f822 	bl	800e77c <etharp_query>
 800e738:	4603      	mov	r3, r0
 800e73a:	e00b      	b.n	800e754 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	69fb      	ldr	r3, [r7, #28]
 800e74a:	68b9      	ldr	r1, [r7, #8]
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f001 fdfb 	bl	8010348 <ethernet_output>
 800e752:	4603      	mov	r3, r0
}
 800e754:	4618      	mov	r0, r3
 800e756:	3720      	adds	r7, #32
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	08013c50 	.word	0x08013c50
 800e760:	08013da0 	.word	0x08013da0
 800e764:	08013cc8 	.word	0x08013cc8
 800e768:	08013df0 	.word	0x08013df0
 800e76c:	08013d90 	.word	0x08013d90
 800e770:	08014404 	.word	0x08014404
 800e774:	240032d8 	.word	0x240032d8
 800e778:	240031e8 	.word	0x240031e8

0800e77c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b08c      	sub	sp, #48	; 0x30
 800e780:	af02      	add	r7, sp, #8
 800e782:	60f8      	str	r0, [r7, #12]
 800e784:	60b9      	str	r1, [r7, #8]
 800e786:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	3326      	adds	r3, #38	; 0x26
 800e78c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e78e:	23ff      	movs	r3, #255	; 0xff
 800e790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e794:	2300      	movs	r3, #0
 800e796:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	68f9      	ldr	r1, [r7, #12]
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f000 fe34 	bl	800f40c <ip4_addr_isbroadcast_u32>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d10c      	bne.n	800e7c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e7b2:	2be0      	cmp	r3, #224	; 0xe0
 800e7b4:	d006      	beq.n	800e7c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d003      	beq.n	800e7c4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d102      	bne.n	800e7ca <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e7c4:	f06f 030f 	mvn.w	r3, #15
 800e7c8:	e101      	b.n	800e9ce <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e7ca:	68fa      	ldr	r2, [r7, #12]
 800e7cc:	2101      	movs	r1, #1
 800e7ce:	68b8      	ldr	r0, [r7, #8]
 800e7d0:	f7ff fb60 	bl	800de94 <etharp_find_entry>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e7d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	da02      	bge.n	800e7e6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e7e0:	8a7b      	ldrh	r3, [r7, #18]
 800e7e2:	b25b      	sxtb	r3, r3
 800e7e4:	e0f3      	b.n	800e9ce <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e7e6:	8a7b      	ldrh	r3, [r7, #18]
 800e7e8:	2b7e      	cmp	r3, #126	; 0x7e
 800e7ea:	d906      	bls.n	800e7fa <etharp_query+0x7e>
 800e7ec:	4b7a      	ldr	r3, [pc, #488]	; (800e9d8 <etharp_query+0x25c>)
 800e7ee:	f240 32c1 	movw	r2, #961	; 0x3c1
 800e7f2:	497a      	ldr	r1, [pc, #488]	; (800e9dc <etharp_query+0x260>)
 800e7f4:	487a      	ldr	r0, [pc, #488]	; (800e9e0 <etharp_query+0x264>)
 800e7f6:	f001 fe53 	bl	80104a0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e7fa:	8a7b      	ldrh	r3, [r7, #18]
 800e7fc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e7fe:	7c7a      	ldrb	r2, [r7, #17]
 800e800:	4978      	ldr	r1, [pc, #480]	; (800e9e4 <etharp_query+0x268>)
 800e802:	4613      	mov	r3, r2
 800e804:	005b      	lsls	r3, r3, #1
 800e806:	4413      	add	r3, r2
 800e808:	00db      	lsls	r3, r3, #3
 800e80a:	440b      	add	r3, r1
 800e80c:	3314      	adds	r3, #20
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d115      	bne.n	800e840 <etharp_query+0xc4>
    is_new_entry = 1;
 800e814:	2301      	movs	r3, #1
 800e816:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e818:	7c7a      	ldrb	r2, [r7, #17]
 800e81a:	4972      	ldr	r1, [pc, #456]	; (800e9e4 <etharp_query+0x268>)
 800e81c:	4613      	mov	r3, r2
 800e81e:	005b      	lsls	r3, r3, #1
 800e820:	4413      	add	r3, r2
 800e822:	00db      	lsls	r3, r3, #3
 800e824:	440b      	add	r3, r1
 800e826:	3314      	adds	r3, #20
 800e828:	2201      	movs	r2, #1
 800e82a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e82c:	7c7a      	ldrb	r2, [r7, #17]
 800e82e:	496d      	ldr	r1, [pc, #436]	; (800e9e4 <etharp_query+0x268>)
 800e830:	4613      	mov	r3, r2
 800e832:	005b      	lsls	r3, r3, #1
 800e834:	4413      	add	r3, r2
 800e836:	00db      	lsls	r3, r3, #3
 800e838:	440b      	add	r3, r1
 800e83a:	3308      	adds	r3, #8
 800e83c:	68fa      	ldr	r2, [r7, #12]
 800e83e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e840:	7c7a      	ldrb	r2, [r7, #17]
 800e842:	4968      	ldr	r1, [pc, #416]	; (800e9e4 <etharp_query+0x268>)
 800e844:	4613      	mov	r3, r2
 800e846:	005b      	lsls	r3, r3, #1
 800e848:	4413      	add	r3, r2
 800e84a:	00db      	lsls	r3, r3, #3
 800e84c:	440b      	add	r3, r1
 800e84e:	3314      	adds	r3, #20
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	2b01      	cmp	r3, #1
 800e854:	d011      	beq.n	800e87a <etharp_query+0xfe>
 800e856:	7c7a      	ldrb	r2, [r7, #17]
 800e858:	4962      	ldr	r1, [pc, #392]	; (800e9e4 <etharp_query+0x268>)
 800e85a:	4613      	mov	r3, r2
 800e85c:	005b      	lsls	r3, r3, #1
 800e85e:	4413      	add	r3, r2
 800e860:	00db      	lsls	r3, r3, #3
 800e862:	440b      	add	r3, r1
 800e864:	3314      	adds	r3, #20
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	2b01      	cmp	r3, #1
 800e86a:	d806      	bhi.n	800e87a <etharp_query+0xfe>
 800e86c:	4b5a      	ldr	r3, [pc, #360]	; (800e9d8 <etharp_query+0x25c>)
 800e86e:	f240 32cd 	movw	r2, #973	; 0x3cd
 800e872:	495d      	ldr	r1, [pc, #372]	; (800e9e8 <etharp_query+0x26c>)
 800e874:	485a      	ldr	r0, [pc, #360]	; (800e9e0 <etharp_query+0x264>)
 800e876:	f001 fe13 	bl	80104a0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e87a:	6a3b      	ldr	r3, [r7, #32]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d102      	bne.n	800e886 <etharp_query+0x10a>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d10c      	bne.n	800e8a0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e886:	68b9      	ldr	r1, [r7, #8]
 800e888:	68f8      	ldr	r0, [r7, #12]
 800e88a:	f000 f963 	bl	800eb54 <etharp_request>
 800e88e:	4603      	mov	r3, r0
 800e890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d102      	bne.n	800e8a0 <etharp_query+0x124>
      return result;
 800e89a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e89e:	e096      	b.n	800e9ce <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d106      	bne.n	800e8b4 <etharp_query+0x138>
 800e8a6:	4b4c      	ldr	r3, [pc, #304]	; (800e9d8 <etharp_query+0x25c>)
 800e8a8:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e8ac:	494f      	ldr	r1, [pc, #316]	; (800e9ec <etharp_query+0x270>)
 800e8ae:	484c      	ldr	r0, [pc, #304]	; (800e9e0 <etharp_query+0x264>)
 800e8b0:	f001 fdf6 	bl	80104a0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e8b4:	7c7a      	ldrb	r2, [r7, #17]
 800e8b6:	494b      	ldr	r1, [pc, #300]	; (800e9e4 <etharp_query+0x268>)
 800e8b8:	4613      	mov	r3, r2
 800e8ba:	005b      	lsls	r3, r3, #1
 800e8bc:	4413      	add	r3, r2
 800e8be:	00db      	lsls	r3, r3, #3
 800e8c0:	440b      	add	r3, r1
 800e8c2:	3314      	adds	r3, #20
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	2b01      	cmp	r3, #1
 800e8c8:	d917      	bls.n	800e8fa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e8ca:	4a49      	ldr	r2, [pc, #292]	; (800e9f0 <etharp_query+0x274>)
 800e8cc:	7c7b      	ldrb	r3, [r7, #17]
 800e8ce:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e8d0:	7c7a      	ldrb	r2, [r7, #17]
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	005b      	lsls	r3, r3, #1
 800e8d6:	4413      	add	r3, r2
 800e8d8:	00db      	lsls	r3, r3, #3
 800e8da:	3308      	adds	r3, #8
 800e8dc:	4a41      	ldr	r2, [pc, #260]	; (800e9e4 <etharp_query+0x268>)
 800e8de:	4413      	add	r3, r2
 800e8e0:	3304      	adds	r3, #4
 800e8e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e8e6:	9200      	str	r2, [sp, #0]
 800e8e8:	697a      	ldr	r2, [r7, #20]
 800e8ea:	6879      	ldr	r1, [r7, #4]
 800e8ec:	68f8      	ldr	r0, [r7, #12]
 800e8ee:	f001 fd2b 	bl	8010348 <ethernet_output>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8f8:	e067      	b.n	800e9ca <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e8fa:	7c7a      	ldrb	r2, [r7, #17]
 800e8fc:	4939      	ldr	r1, [pc, #228]	; (800e9e4 <etharp_query+0x268>)
 800e8fe:	4613      	mov	r3, r2
 800e900:	005b      	lsls	r3, r3, #1
 800e902:	4413      	add	r3, r2
 800e904:	00db      	lsls	r3, r3, #3
 800e906:	440b      	add	r3, r1
 800e908:	3314      	adds	r3, #20
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	d15c      	bne.n	800e9ca <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e910:	2300      	movs	r3, #0
 800e912:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e918:	e01c      	b.n	800e954 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e91a:	69fb      	ldr	r3, [r7, #28]
 800e91c:	895a      	ldrh	r2, [r3, #10]
 800e91e:	69fb      	ldr	r3, [r7, #28]
 800e920:	891b      	ldrh	r3, [r3, #8]
 800e922:	429a      	cmp	r2, r3
 800e924:	d10a      	bne.n	800e93c <etharp_query+0x1c0>
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d006      	beq.n	800e93c <etharp_query+0x1c0>
 800e92e:	4b2a      	ldr	r3, [pc, #168]	; (800e9d8 <etharp_query+0x25c>)
 800e930:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e934:	492f      	ldr	r1, [pc, #188]	; (800e9f4 <etharp_query+0x278>)
 800e936:	482a      	ldr	r0, [pc, #168]	; (800e9e0 <etharp_query+0x264>)
 800e938:	f001 fdb2 	bl	80104a0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e93c:	69fb      	ldr	r3, [r7, #28]
 800e93e:	7b1b      	ldrb	r3, [r3, #12]
 800e940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e944:	2b00      	cmp	r3, #0
 800e946:	d002      	beq.n	800e94e <etharp_query+0x1d2>
        copy_needed = 1;
 800e948:	2301      	movs	r3, #1
 800e94a:	61bb      	str	r3, [r7, #24]
        break;
 800e94c:	e005      	b.n	800e95a <etharp_query+0x1de>
      }
      p = p->next;
 800e94e:	69fb      	ldr	r3, [r7, #28]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d1df      	bne.n	800e91a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e95a:	69bb      	ldr	r3, [r7, #24]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d007      	beq.n	800e970 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e960:	687a      	ldr	r2, [r7, #4]
 800e962:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e966:	200e      	movs	r0, #14
 800e968:	f7f8 fec2 	bl	80076f0 <pbuf_clone>
 800e96c:	61f8      	str	r0, [r7, #28]
 800e96e:	e004      	b.n	800e97a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e974:	69f8      	ldr	r0, [r7, #28]
 800e976:	f7f8 fc6d 	bl	8007254 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e97a:	69fb      	ldr	r3, [r7, #28]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d021      	beq.n	800e9c4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e980:	7c7a      	ldrb	r2, [r7, #17]
 800e982:	4918      	ldr	r1, [pc, #96]	; (800e9e4 <etharp_query+0x268>)
 800e984:	4613      	mov	r3, r2
 800e986:	005b      	lsls	r3, r3, #1
 800e988:	4413      	add	r3, r2
 800e98a:	00db      	lsls	r3, r3, #3
 800e98c:	440b      	add	r3, r1
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d00a      	beq.n	800e9aa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e994:	7c7a      	ldrb	r2, [r7, #17]
 800e996:	4913      	ldr	r1, [pc, #76]	; (800e9e4 <etharp_query+0x268>)
 800e998:	4613      	mov	r3, r2
 800e99a:	005b      	lsls	r3, r3, #1
 800e99c:	4413      	add	r3, r2
 800e99e:	00db      	lsls	r3, r3, #3
 800e9a0:	440b      	add	r3, r1
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f7f8 fbb5 	bl	8007114 <pbuf_free>
      }
      arp_table[i].q = p;
 800e9aa:	7c7a      	ldrb	r2, [r7, #17]
 800e9ac:	490d      	ldr	r1, [pc, #52]	; (800e9e4 <etharp_query+0x268>)
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	005b      	lsls	r3, r3, #1
 800e9b2:	4413      	add	r3, r2
 800e9b4:	00db      	lsls	r3, r3, #3
 800e9b6:	440b      	add	r3, r1
 800e9b8:	69fa      	ldr	r2, [r7, #28]
 800e9ba:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e9bc:	2300      	movs	r3, #0
 800e9be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e9c2:	e002      	b.n	800e9ca <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e9c4:	23ff      	movs	r3, #255	; 0xff
 800e9c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e9ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3728      	adds	r7, #40	; 0x28
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
 800e9d6:	bf00      	nop
 800e9d8:	08013c50 	.word	0x08013c50
 800e9dc:	08013dfc 	.word	0x08013dfc
 800e9e0:	08013cc8 	.word	0x08013cc8
 800e9e4:	240031e8 	.word	0x240031e8
 800e9e8:	08013e0c 	.word	0x08013e0c
 800e9ec:	08013df0 	.word	0x08013df0
 800e9f0:	240032d8 	.word	0x240032d8
 800e9f4:	08013e34 	.word	0x08013e34

0800e9f8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b08a      	sub	sp, #40	; 0x28
 800e9fc:	af02      	add	r7, sp, #8
 800e9fe:	60f8      	str	r0, [r7, #12]
 800ea00:	60b9      	str	r1, [r7, #8]
 800ea02:	607a      	str	r2, [r7, #4]
 800ea04:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800ea06:	2300      	movs	r3, #0
 800ea08:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d106      	bne.n	800ea1e <etharp_raw+0x26>
 800ea10:	4b3a      	ldr	r3, [pc, #232]	; (800eafc <etharp_raw+0x104>)
 800ea12:	f240 4257 	movw	r2, #1111	; 0x457
 800ea16:	493a      	ldr	r1, [pc, #232]	; (800eb00 <etharp_raw+0x108>)
 800ea18:	483a      	ldr	r0, [pc, #232]	; (800eb04 <etharp_raw+0x10c>)
 800ea1a:	f001 fd41 	bl	80104a0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800ea1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ea22:	211c      	movs	r1, #28
 800ea24:	200e      	movs	r0, #14
 800ea26:	f7f8 f891 	bl	8006b4c <pbuf_alloc>
 800ea2a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ea2c:	69bb      	ldr	r3, [r7, #24]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d102      	bne.n	800ea38 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ea32:	f04f 33ff 	mov.w	r3, #4294967295
 800ea36:	e05d      	b.n	800eaf4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	895b      	ldrh	r3, [r3, #10]
 800ea3c:	2b1b      	cmp	r3, #27
 800ea3e:	d806      	bhi.n	800ea4e <etharp_raw+0x56>
 800ea40:	4b2e      	ldr	r3, [pc, #184]	; (800eafc <etharp_raw+0x104>)
 800ea42:	f240 4262 	movw	r2, #1122	; 0x462
 800ea46:	4930      	ldr	r1, [pc, #192]	; (800eb08 <etharp_raw+0x110>)
 800ea48:	482e      	ldr	r0, [pc, #184]	; (800eb04 <etharp_raw+0x10c>)
 800ea4a:	f001 fd29 	bl	80104a0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ea4e:	69bb      	ldr	r3, [r7, #24]
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ea54:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ea56:	4618      	mov	r0, r3
 800ea58:	f7f6 ff46 	bl	80058e8 <lwip_htons>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	461a      	mov	r2, r3
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ea6a:	2b06      	cmp	r3, #6
 800ea6c:	d006      	beq.n	800ea7c <etharp_raw+0x84>
 800ea6e:	4b23      	ldr	r3, [pc, #140]	; (800eafc <etharp_raw+0x104>)
 800ea70:	f240 4269 	movw	r2, #1129	; 0x469
 800ea74:	4925      	ldr	r1, [pc, #148]	; (800eb0c <etharp_raw+0x114>)
 800ea76:	4823      	ldr	r0, [pc, #140]	; (800eb04 <etharp_raw+0x10c>)
 800ea78:	f001 fd12 	bl	80104a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	3308      	adds	r3, #8
 800ea80:	2206      	movs	r2, #6
 800ea82:	6839      	ldr	r1, [r7, #0]
 800ea84:	4618      	mov	r0, r3
 800ea86:	f001 fcdb 	bl	8010440 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	3312      	adds	r3, #18
 800ea8e:	2206      	movs	r2, #6
 800ea90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea92:	4618      	mov	r0, r3
 800ea94:	f001 fcd4 	bl	8010440 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	330e      	adds	r3, #14
 800ea9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea9e:	6812      	ldr	r2, [r2, #0]
 800eaa0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	3318      	adds	r3, #24
 800eaa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eaa8:	6812      	ldr	r2, [r2, #0]
 800eaaa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800eaac:	697b      	ldr	r3, [r7, #20]
 800eaae:	2200      	movs	r2, #0
 800eab0:	701a      	strb	r2, [r3, #0]
 800eab2:	2200      	movs	r2, #0
 800eab4:	f042 0201 	orr.w	r2, r2, #1
 800eab8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	2200      	movs	r2, #0
 800eabe:	f042 0208 	orr.w	r2, r2, #8
 800eac2:	709a      	strb	r2, [r3, #2]
 800eac4:	2200      	movs	r2, #0
 800eac6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	2206      	movs	r2, #6
 800eacc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	2204      	movs	r2, #4
 800ead2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ead4:	f640 0306 	movw	r3, #2054	; 0x806
 800ead8:	9300      	str	r3, [sp, #0]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	68ba      	ldr	r2, [r7, #8]
 800eade:	69b9      	ldr	r1, [r7, #24]
 800eae0:	68f8      	ldr	r0, [r7, #12]
 800eae2:	f001 fc31 	bl	8010348 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800eae6:	69b8      	ldr	r0, [r7, #24]
 800eae8:	f7f8 fb14 	bl	8007114 <pbuf_free>
  p = NULL;
 800eaec:	2300      	movs	r3, #0
 800eaee:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800eaf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3720      	adds	r7, #32
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	08013c50 	.word	0x08013c50
 800eb00:	08013da0 	.word	0x08013da0
 800eb04:	08013cc8 	.word	0x08013cc8
 800eb08:	08013e50 	.word	0x08013e50
 800eb0c:	08013e84 	.word	0x08013e84

0800eb10 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b088      	sub	sp, #32
 800eb14:	af04      	add	r7, sp, #16
 800eb16:	60f8      	str	r0, [r7, #12]
 800eb18:	60b9      	str	r1, [r7, #8]
 800eb1a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	9203      	str	r2, [sp, #12]
 800eb30:	68ba      	ldr	r2, [r7, #8]
 800eb32:	9202      	str	r2, [sp, #8]
 800eb34:	4a06      	ldr	r2, [pc, #24]	; (800eb50 <etharp_request_dst+0x40>)
 800eb36:	9201      	str	r2, [sp, #4]
 800eb38:	9300      	str	r3, [sp, #0]
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	687a      	ldr	r2, [r7, #4]
 800eb3e:	68f8      	ldr	r0, [r7, #12]
 800eb40:	f7ff ff5a 	bl	800e9f8 <etharp_raw>
 800eb44:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3710      	adds	r7, #16
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	0801440c 	.word	0x0801440c

0800eb54 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800eb5e:	4a05      	ldr	r2, [pc, #20]	; (800eb74 <etharp_request+0x20>)
 800eb60:	6839      	ldr	r1, [r7, #0]
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f7ff ffd4 	bl	800eb10 <etharp_request_dst>
 800eb68:	4603      	mov	r3, r0
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	3708      	adds	r7, #8
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	bf00      	nop
 800eb74:	08014404 	.word	0x08014404

0800eb78 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b08e      	sub	sp, #56	; 0x38
 800eb7c:	af04      	add	r7, sp, #16
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800eb82:	4b87      	ldr	r3, [pc, #540]	; (800eda0 <icmp_input+0x228>)
 800eb84:	689b      	ldr	r3, [r3, #8]
 800eb86:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800eb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	f003 030f 	and.w	r3, r3, #15
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	009b      	lsls	r3, r3, #2
 800eb94:	b2db      	uxtb	r3, r3
 800eb96:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800eb98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eb9a:	2b13      	cmp	r3, #19
 800eb9c:	f240 80e8 	bls.w	800ed70 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	895b      	ldrh	r3, [r3, #10]
 800eba4:	2b03      	cmp	r3, #3
 800eba6:	f240 80e5 	bls.w	800ed74 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ebb4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	f000 80d2 	beq.w	800ed62 <icmp_input+0x1ea>
 800ebbe:	2b08      	cmp	r3, #8
 800ebc0:	f040 80d2 	bne.w	800ed68 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ebc4:	4b77      	ldr	r3, [pc, #476]	; (800eda4 <icmp_input+0x22c>)
 800ebc6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ebc8:	4b75      	ldr	r3, [pc, #468]	; (800eda0 <icmp_input+0x228>)
 800ebca:	695b      	ldr	r3, [r3, #20]
 800ebcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ebd0:	2be0      	cmp	r3, #224	; 0xe0
 800ebd2:	f000 80d6 	beq.w	800ed82 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ebd6:	4b72      	ldr	r3, [pc, #456]	; (800eda0 <icmp_input+0x228>)
 800ebd8:	695b      	ldr	r3, [r3, #20]
 800ebda:	4a71      	ldr	r2, [pc, #452]	; (800eda0 <icmp_input+0x228>)
 800ebdc:	6812      	ldr	r2, [r2, #0]
 800ebde:	4611      	mov	r1, r2
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f000 fc13 	bl	800f40c <ip4_addr_isbroadcast_u32>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	f040 80cc 	bne.w	800ed86 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	891b      	ldrh	r3, [r3, #8]
 800ebf2:	2b07      	cmp	r3, #7
 800ebf4:	f240 80c0 	bls.w	800ed78 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f7f6 ff12 	bl	8005a22 <inet_chksum_pbuf>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d003      	beq.n	800ec0c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f7f8 fa85 	bl	8007114 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800ec0a:	e0c5      	b.n	800ed98 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ec0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec0e:	330e      	adds	r3, #14
 800ec10:	4619      	mov	r1, r3
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f7f8 f9e8 	bl	8006fe8 <pbuf_add_header>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d04b      	beq.n	800ecb6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	891a      	ldrh	r2, [r3, #8]
 800ec22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec24:	4413      	add	r3, r2
 800ec26:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	891b      	ldrh	r3, [r3, #8]
 800ec2c:	8b7a      	ldrh	r2, [r7, #26]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	f0c0 80ab 	bcc.w	800ed8a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ec34:	8b7b      	ldrh	r3, [r7, #26]
 800ec36:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ec3a:	4619      	mov	r1, r3
 800ec3c:	200e      	movs	r0, #14
 800ec3e:	f7f7 ff85 	bl	8006b4c <pbuf_alloc>
 800ec42:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	f000 80a1 	beq.w	800ed8e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	895b      	ldrh	r3, [r3, #10]
 800ec50:	461a      	mov	r2, r3
 800ec52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec54:	3308      	adds	r3, #8
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d203      	bcs.n	800ec62 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800ec5a:	6978      	ldr	r0, [r7, #20]
 800ec5c:	f7f8 fa5a 	bl	8007114 <pbuf_free>
          goto icmperr;
 800ec60:	e096      	b.n	800ed90 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ec68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f001 fbe8 	bl	8010440 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800ec70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec72:	4619      	mov	r1, r3
 800ec74:	6978      	ldr	r0, [r7, #20]
 800ec76:	f7f8 f9c7 	bl	8007008 <pbuf_remove_header>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d009      	beq.n	800ec94 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ec80:	4b49      	ldr	r3, [pc, #292]	; (800eda8 <icmp_input+0x230>)
 800ec82:	22b6      	movs	r2, #182	; 0xb6
 800ec84:	4949      	ldr	r1, [pc, #292]	; (800edac <icmp_input+0x234>)
 800ec86:	484a      	ldr	r0, [pc, #296]	; (800edb0 <icmp_input+0x238>)
 800ec88:	f001 fc0a 	bl	80104a0 <iprintf>
          pbuf_free(r);
 800ec8c:	6978      	ldr	r0, [r7, #20]
 800ec8e:	f7f8 fa41 	bl	8007114 <pbuf_free>
          goto icmperr;
 800ec92:	e07d      	b.n	800ed90 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800ec94:	6879      	ldr	r1, [r7, #4]
 800ec96:	6978      	ldr	r0, [r7, #20]
 800ec98:	f7f8 fb54 	bl	8007344 <pbuf_copy>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d003      	beq.n	800ecaa <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800eca2:	6978      	ldr	r0, [r7, #20]
 800eca4:	f7f8 fa36 	bl	8007114 <pbuf_free>
          goto icmperr;
 800eca8:	e072      	b.n	800ed90 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f7f8 fa32 	bl	8007114 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	607b      	str	r3, [r7, #4]
 800ecb4:	e00f      	b.n	800ecd6 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ecb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ecb8:	330e      	adds	r3, #14
 800ecba:	4619      	mov	r1, r3
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f7f8 f9a3 	bl	8007008 <pbuf_remove_header>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d006      	beq.n	800ecd6 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ecc8:	4b37      	ldr	r3, [pc, #220]	; (800eda8 <icmp_input+0x230>)
 800ecca:	22c7      	movs	r2, #199	; 0xc7
 800eccc:	4939      	ldr	r1, [pc, #228]	; (800edb4 <icmp_input+0x23c>)
 800ecce:	4838      	ldr	r0, [pc, #224]	; (800edb0 <icmp_input+0x238>)
 800ecd0:	f001 fbe6 	bl	80104a0 <iprintf>
          goto icmperr;
 800ecd4:	e05c      	b.n	800ed90 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800ecdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ecde:	4619      	mov	r1, r3
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f7f8 f981 	bl	8006fe8 <pbuf_add_header>
 800ece6:	4603      	mov	r3, r0
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d13c      	bne.n	800ed66 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	685b      	ldr	r3, [r3, #4]
 800ecf0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800ecf2:	69fb      	ldr	r3, [r7, #28]
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ecfa:	4b29      	ldr	r3, [pc, #164]	; (800eda0 <icmp_input+0x228>)
 800ecfc:	691a      	ldr	r2, [r3, #16]
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	2200      	movs	r2, #0
 800ed06:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	885b      	ldrh	r3, [r3, #2]
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d907      	bls.n	800ed26 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	885b      	ldrh	r3, [r3, #2]
 800ed1a:	b29b      	uxth	r3, r3
 800ed1c:	3309      	adds	r3, #9
 800ed1e:	b29a      	uxth	r2, r3
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	805a      	strh	r2, [r3, #2]
 800ed24:	e006      	b.n	800ed34 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	885b      	ldrh	r3, [r3, #2]
 800ed2a:	b29b      	uxth	r3, r3
 800ed2c:	3308      	adds	r3, #8
 800ed2e:	b29a      	uxth	r2, r3
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	22ff      	movs	r2, #255	; 0xff
 800ed38:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	729a      	strb	r2, [r3, #10]
 800ed40:	2200      	movs	r2, #0
 800ed42:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	9302      	str	r3, [sp, #8]
 800ed48:	2301      	movs	r3, #1
 800ed4a:	9301      	str	r3, [sp, #4]
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	9300      	str	r3, [sp, #0]
 800ed50:	23ff      	movs	r3, #255	; 0xff
 800ed52:	2200      	movs	r2, #0
 800ed54:	69f9      	ldr	r1, [r7, #28]
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f000 fa80 	bl	800f25c <ip4_output_if>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ed60:	e001      	b.n	800ed66 <icmp_input+0x1ee>
      break;
 800ed62:	bf00      	nop
 800ed64:	e000      	b.n	800ed68 <icmp_input+0x1f0>
      break;
 800ed66:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f7f8 f9d3 	bl	8007114 <pbuf_free>
  return;
 800ed6e:	e013      	b.n	800ed98 <icmp_input+0x220>
    goto lenerr;
 800ed70:	bf00      	nop
 800ed72:	e002      	b.n	800ed7a <icmp_input+0x202>
    goto lenerr;
 800ed74:	bf00      	nop
 800ed76:	e000      	b.n	800ed7a <icmp_input+0x202>
        goto lenerr;
 800ed78:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f7f8 f9ca 	bl	8007114 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ed80:	e00a      	b.n	800ed98 <icmp_input+0x220>
        goto icmperr;
 800ed82:	bf00      	nop
 800ed84:	e004      	b.n	800ed90 <icmp_input+0x218>
        goto icmperr;
 800ed86:	bf00      	nop
 800ed88:	e002      	b.n	800ed90 <icmp_input+0x218>
          goto icmperr;
 800ed8a:	bf00      	nop
 800ed8c:	e000      	b.n	800ed90 <icmp_input+0x218>
          goto icmperr;
 800ed8e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f7f8 f9bf 	bl	8007114 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ed96:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ed98:	3728      	adds	r7, #40	; 0x28
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	2400026c 	.word	0x2400026c
 800eda4:	24000280 	.word	0x24000280
 800eda8:	08013ec8 	.word	0x08013ec8
 800edac:	08013f00 	.word	0x08013f00
 800edb0:	08013f38 	.word	0x08013f38
 800edb4:	08013f60 	.word	0x08013f60

0800edb8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b082      	sub	sp, #8
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	460b      	mov	r3, r1
 800edc2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800edc4:	78fb      	ldrb	r3, [r7, #3]
 800edc6:	461a      	mov	r2, r3
 800edc8:	2103      	movs	r1, #3
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f000 f814 	bl	800edf8 <icmp_send_response>
}
 800edd0:	bf00      	nop
 800edd2:	3708      	adds	r7, #8
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}

0800edd8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	460b      	mov	r3, r1
 800ede2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ede4:	78fb      	ldrb	r3, [r7, #3]
 800ede6:	461a      	mov	r2, r3
 800ede8:	210b      	movs	r1, #11
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f000 f804 	bl	800edf8 <icmp_send_response>
}
 800edf0:	bf00      	nop
 800edf2:	3708      	adds	r7, #8
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b08c      	sub	sp, #48	; 0x30
 800edfc:	af04      	add	r7, sp, #16
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	460b      	mov	r3, r1
 800ee02:	70fb      	strb	r3, [r7, #3]
 800ee04:	4613      	mov	r3, r2
 800ee06:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ee08:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ee0c:	2124      	movs	r1, #36	; 0x24
 800ee0e:	2022      	movs	r0, #34	; 0x22
 800ee10:	f7f7 fe9c 	bl	8006b4c <pbuf_alloc>
 800ee14:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ee16:	69fb      	ldr	r3, [r7, #28]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d056      	beq.n	800eeca <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	895b      	ldrh	r3, [r3, #10]
 800ee20:	2b23      	cmp	r3, #35	; 0x23
 800ee22:	d806      	bhi.n	800ee32 <icmp_send_response+0x3a>
 800ee24:	4b2b      	ldr	r3, [pc, #172]	; (800eed4 <icmp_send_response+0xdc>)
 800ee26:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ee2a:	492b      	ldr	r1, [pc, #172]	; (800eed8 <icmp_send_response+0xe0>)
 800ee2c:	482b      	ldr	r0, [pc, #172]	; (800eedc <icmp_send_response+0xe4>)
 800ee2e:	f001 fb37 	bl	80104a0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	685b      	ldr	r3, [r3, #4]
 800ee36:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	78fa      	ldrb	r2, [r7, #3]
 800ee42:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	78ba      	ldrb	r2, [r7, #2]
 800ee48:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	711a      	strb	r2, [r3, #4]
 800ee50:	2200      	movs	r2, #0
 800ee52:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	2200      	movs	r2, #0
 800ee58:	719a      	strb	r2, [r3, #6]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ee5e:	69fb      	ldr	r3, [r7, #28]
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	f103 0008 	add.w	r0, r3, #8
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	685b      	ldr	r3, [r3, #4]
 800ee6a:	221c      	movs	r2, #28
 800ee6c:	4619      	mov	r1, r3
 800ee6e:	f001 fae7 	bl	8010440 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ee72:	69bb      	ldr	r3, [r7, #24]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ee78:	f107 030c 	add.w	r3, r7, #12
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f000 f82f 	bl	800eee0 <ip4_route>
 800ee82:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ee84:	693b      	ldr	r3, [r7, #16]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d01b      	beq.n	800eec2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	709a      	strb	r2, [r3, #2]
 800ee90:	2200      	movs	r2, #0
 800ee92:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800ee94:	69fb      	ldr	r3, [r7, #28]
 800ee96:	895b      	ldrh	r3, [r3, #10]
 800ee98:	4619      	mov	r1, r3
 800ee9a:	6978      	ldr	r0, [r7, #20]
 800ee9c:	f7f6 fdaf 	bl	80059fe <inet_chksum>
 800eea0:	4603      	mov	r3, r0
 800eea2:	461a      	mov	r2, r3
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800eea8:	f107 020c 	add.w	r2, r7, #12
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	9302      	str	r3, [sp, #8]
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	9301      	str	r3, [sp, #4]
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	9300      	str	r3, [sp, #0]
 800eeb8:	23ff      	movs	r3, #255	; 0xff
 800eeba:	2100      	movs	r1, #0
 800eebc:	69f8      	ldr	r0, [r7, #28]
 800eebe:	f000 f9cd 	bl	800f25c <ip4_output_if>
  }
  pbuf_free(q);
 800eec2:	69f8      	ldr	r0, [r7, #28]
 800eec4:	f7f8 f926 	bl	8007114 <pbuf_free>
 800eec8:	e000      	b.n	800eecc <icmp_send_response+0xd4>
    return;
 800eeca:	bf00      	nop
}
 800eecc:	3720      	adds	r7, #32
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	08013ec8 	.word	0x08013ec8
 800eed8:	08013f94 	.word	0x08013f94
 800eedc:	08013f38 	.word	0x08013f38

0800eee0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b085      	sub	sp, #20
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800eee8:	4b33      	ldr	r3, [pc, #204]	; (800efb8 <ip4_route+0xd8>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	60fb      	str	r3, [r7, #12]
 800eeee:	e036      	b.n	800ef5e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eef6:	f003 0301 	and.w	r3, r3, #1
 800eefa:	b2db      	uxtb	r3, r3
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d02b      	beq.n	800ef58 <ip4_route+0x78>
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef06:	089b      	lsrs	r3, r3, #2
 800ef08:	f003 0301 	and.w	r3, r3, #1
 800ef0c:	b2db      	uxtb	r3, r3
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d022      	beq.n	800ef58 <ip4_route+0x78>
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	3304      	adds	r3, #4
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d01d      	beq.n	800ef58 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681a      	ldr	r2, [r3, #0]
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	3304      	adds	r3, #4
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	405a      	eors	r2, r3
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	3308      	adds	r3, #8
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	4013      	ands	r3, r2
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d101      	bne.n	800ef38 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	e038      	b.n	800efaa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef3e:	f003 0302 	and.w	r3, r3, #2
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d108      	bne.n	800ef58 <ip4_route+0x78>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681a      	ldr	r2, [r3, #0]
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	330c      	adds	r3, #12
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d101      	bne.n	800ef58 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	e028      	b.n	800efaa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	60fb      	str	r3, [r7, #12]
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d1c5      	bne.n	800eef0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ef64:	4b15      	ldr	r3, [pc, #84]	; (800efbc <ip4_route+0xdc>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d01a      	beq.n	800efa2 <ip4_route+0xc2>
 800ef6c:	4b13      	ldr	r3, [pc, #76]	; (800efbc <ip4_route+0xdc>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef74:	f003 0301 	and.w	r3, r3, #1
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d012      	beq.n	800efa2 <ip4_route+0xc2>
 800ef7c:	4b0f      	ldr	r3, [pc, #60]	; (800efbc <ip4_route+0xdc>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef84:	f003 0304 	and.w	r3, r3, #4
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d00a      	beq.n	800efa2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ef8c:	4b0b      	ldr	r3, [pc, #44]	; (800efbc <ip4_route+0xdc>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	3304      	adds	r3, #4
 800ef92:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d004      	beq.n	800efa2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	b2db      	uxtb	r3, r3
 800ef9e:	2b7f      	cmp	r3, #127	; 0x7f
 800efa0:	d101      	bne.n	800efa6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800efa2:	2300      	movs	r3, #0
 800efa4:	e001      	b.n	800efaa <ip4_route+0xca>
  }

  return netif_default;
 800efa6:	4b05      	ldr	r3, [pc, #20]	; (800efbc <ip4_route+0xdc>)
 800efa8:	681b      	ldr	r3, [r3, #0]
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3714      	adds	r7, #20
 800efae:	46bd      	mov	sp, r7
 800efb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb4:	4770      	bx	lr
 800efb6:	bf00      	nop
 800efb8:	2400317c 	.word	0x2400317c
 800efbc:	24003180 	.word	0x24003180

0800efc0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b082      	sub	sp, #8
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800efce:	f003 0301 	and.w	r3, r3, #1
 800efd2:	b2db      	uxtb	r3, r3
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d016      	beq.n	800f006 <ip4_input_accept+0x46>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	3304      	adds	r3, #4
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d011      	beq.n	800f006 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800efe2:	4b0b      	ldr	r3, [pc, #44]	; (800f010 <ip4_input_accept+0x50>)
 800efe4:	695a      	ldr	r2, [r3, #20]
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	3304      	adds	r3, #4
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	429a      	cmp	r2, r3
 800efee:	d008      	beq.n	800f002 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800eff0:	4b07      	ldr	r3, [pc, #28]	; (800f010 <ip4_input_accept+0x50>)
 800eff2:	695b      	ldr	r3, [r3, #20]
 800eff4:	6879      	ldr	r1, [r7, #4]
 800eff6:	4618      	mov	r0, r3
 800eff8:	f000 fa08 	bl	800f40c <ip4_addr_isbroadcast_u32>
 800effc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800effe:	2b00      	cmp	r3, #0
 800f000:	d001      	beq.n	800f006 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f002:	2301      	movs	r3, #1
 800f004:	e000      	b.n	800f008 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f006:	2300      	movs	r3, #0
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3708      	adds	r7, #8
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}
 800f010:	2400026c 	.word	0x2400026c

0800f014 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b086      	sub	sp, #24
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	685b      	ldr	r3, [r3, #4]
 800f022:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	091b      	lsrs	r3, r3, #4
 800f02a:	b2db      	uxtb	r3, r3
 800f02c:	2b04      	cmp	r3, #4
 800f02e:	d004      	beq.n	800f03a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f7f8 f86f 	bl	8007114 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f036:	2300      	movs	r3, #0
 800f038:	e107      	b.n	800f24a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	f003 030f 	and.w	r3, r3, #15
 800f042:	b2db      	uxtb	r3, r3
 800f044:	009b      	lsls	r3, r3, #2
 800f046:	b2db      	uxtb	r3, r3
 800f048:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	885b      	ldrh	r3, [r3, #2]
 800f04e:	b29b      	uxth	r3, r3
 800f050:	4618      	mov	r0, r3
 800f052:	f7f6 fc49 	bl	80058e8 <lwip_htons>
 800f056:	4603      	mov	r3, r0
 800f058:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	891b      	ldrh	r3, [r3, #8]
 800f05e:	89ba      	ldrh	r2, [r7, #12]
 800f060:	429a      	cmp	r2, r3
 800f062:	d204      	bcs.n	800f06e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800f064:	89bb      	ldrh	r3, [r7, #12]
 800f066:	4619      	mov	r1, r3
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	f7f7 fecd 	bl	8006e08 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	895b      	ldrh	r3, [r3, #10]
 800f072:	89fa      	ldrh	r2, [r7, #14]
 800f074:	429a      	cmp	r2, r3
 800f076:	d807      	bhi.n	800f088 <ip4_input+0x74>
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	891b      	ldrh	r3, [r3, #8]
 800f07c:	89ba      	ldrh	r2, [r7, #12]
 800f07e:	429a      	cmp	r2, r3
 800f080:	d802      	bhi.n	800f088 <ip4_input+0x74>
 800f082:	89fb      	ldrh	r3, [r7, #14]
 800f084:	2b13      	cmp	r3, #19
 800f086:	d804      	bhi.n	800f092 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f7f8 f843 	bl	8007114 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f08e:	2300      	movs	r3, #0
 800f090:	e0db      	b.n	800f24a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	691b      	ldr	r3, [r3, #16]
 800f096:	4a6f      	ldr	r2, [pc, #444]	; (800f254 <ip4_input+0x240>)
 800f098:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	68db      	ldr	r3, [r3, #12]
 800f09e:	4a6d      	ldr	r2, [pc, #436]	; (800f254 <ip4_input+0x240>)
 800f0a0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f0a2:	4b6c      	ldr	r3, [pc, #432]	; (800f254 <ip4_input+0x240>)
 800f0a4:	695b      	ldr	r3, [r3, #20]
 800f0a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f0aa:	2be0      	cmp	r3, #224	; 0xe0
 800f0ac:	d112      	bne.n	800f0d4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f0b4:	f003 0301 	and.w	r3, r3, #1
 800f0b8:	b2db      	uxtb	r3, r3
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d007      	beq.n	800f0ce <ip4_input+0xba>
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	3304      	adds	r3, #4
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d002      	beq.n	800f0ce <ip4_input+0xba>
      netif = inp;
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	613b      	str	r3, [r7, #16]
 800f0cc:	e02a      	b.n	800f124 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	613b      	str	r3, [r7, #16]
 800f0d2:	e027      	b.n	800f124 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f0d4:	6838      	ldr	r0, [r7, #0]
 800f0d6:	f7ff ff73 	bl	800efc0 <ip4_input_accept>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d002      	beq.n	800f0e6 <ip4_input+0xd2>
      netif = inp;
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	613b      	str	r3, [r7, #16]
 800f0e4:	e01e      	b.n	800f124 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f0ea:	4b5a      	ldr	r3, [pc, #360]	; (800f254 <ip4_input+0x240>)
 800f0ec:	695b      	ldr	r3, [r3, #20]
 800f0ee:	b2db      	uxtb	r3, r3
 800f0f0:	2b7f      	cmp	r3, #127	; 0x7f
 800f0f2:	d017      	beq.n	800f124 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f0f4:	4b58      	ldr	r3, [pc, #352]	; (800f258 <ip4_input+0x244>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	613b      	str	r3, [r7, #16]
 800f0fa:	e00e      	b.n	800f11a <ip4_input+0x106>
          if (netif == inp) {
 800f0fc:	693a      	ldr	r2, [r7, #16]
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	429a      	cmp	r2, r3
 800f102:	d006      	beq.n	800f112 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f104:	6938      	ldr	r0, [r7, #16]
 800f106:	f7ff ff5b 	bl	800efc0 <ip4_input_accept>
 800f10a:	4603      	mov	r3, r0
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d108      	bne.n	800f122 <ip4_input+0x10e>
 800f110:	e000      	b.n	800f114 <ip4_input+0x100>
            continue;
 800f112:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f114:	693b      	ldr	r3, [r7, #16]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	613b      	str	r3, [r7, #16]
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d1ed      	bne.n	800f0fc <ip4_input+0xe8>
 800f120:	e000      	b.n	800f124 <ip4_input+0x110>
            break;
 800f122:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f124:	4b4b      	ldr	r3, [pc, #300]	; (800f254 <ip4_input+0x240>)
 800f126:	691b      	ldr	r3, [r3, #16]
 800f128:	6839      	ldr	r1, [r7, #0]
 800f12a:	4618      	mov	r0, r3
 800f12c:	f000 f96e 	bl	800f40c <ip4_addr_isbroadcast_u32>
 800f130:	4603      	mov	r3, r0
 800f132:	2b00      	cmp	r3, #0
 800f134:	d105      	bne.n	800f142 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f136:	4b47      	ldr	r3, [pc, #284]	; (800f254 <ip4_input+0x240>)
 800f138:	691b      	ldr	r3, [r3, #16]
 800f13a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f13e:	2be0      	cmp	r3, #224	; 0xe0
 800f140:	d104      	bne.n	800f14c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f7f7 ffe6 	bl	8007114 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f148:	2300      	movs	r3, #0
 800f14a:	e07e      	b.n	800f24a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f14c:	693b      	ldr	r3, [r7, #16]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d104      	bne.n	800f15c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f7f7 ffde 	bl	8007114 <pbuf_free>
    return ERR_OK;
 800f158:	2300      	movs	r3, #0
 800f15a:	e076      	b.n	800f24a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	88db      	ldrh	r3, [r3, #6]
 800f160:	b29b      	uxth	r3, r3
 800f162:	461a      	mov	r2, r3
 800f164:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800f168:	4013      	ands	r3, r2
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d00b      	beq.n	800f186 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f000 fd22 	bl	800fbb8 <ip4_reass>
 800f174:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d101      	bne.n	800f180 <ip4_input+0x16c>
      return ERR_OK;
 800f17c:	2300      	movs	r3, #0
 800f17e:	e064      	b.n	800f24a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f186:	4a33      	ldr	r2, [pc, #204]	; (800f254 <ip4_input+0x240>)
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f18c:	4a31      	ldr	r2, [pc, #196]	; (800f254 <ip4_input+0x240>)
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f192:	4a30      	ldr	r2, [pc, #192]	; (800f254 <ip4_input+0x240>)
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	f003 030f 	and.w	r3, r3, #15
 800f1a0:	b2db      	uxtb	r3, r3
 800f1a2:	009b      	lsls	r3, r3, #2
 800f1a4:	b2db      	uxtb	r3, r3
 800f1a6:	b29a      	uxth	r2, r3
 800f1a8:	4b2a      	ldr	r3, [pc, #168]	; (800f254 <ip4_input+0x240>)
 800f1aa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f1ac:	89fb      	ldrh	r3, [r7, #14]
 800f1ae:	4619      	mov	r1, r3
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f7f7 ff29 	bl	8007008 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	7a5b      	ldrb	r3, [r3, #9]
 800f1ba:	2b11      	cmp	r3, #17
 800f1bc:	d006      	beq.n	800f1cc <ip4_input+0x1b8>
 800f1be:	2b11      	cmp	r3, #17
 800f1c0:	dc13      	bgt.n	800f1ea <ip4_input+0x1d6>
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d00c      	beq.n	800f1e0 <ip4_input+0x1cc>
 800f1c6:	2b06      	cmp	r3, #6
 800f1c8:	d005      	beq.n	800f1d6 <ip4_input+0x1c2>
 800f1ca:	e00e      	b.n	800f1ea <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f1cc:	6839      	ldr	r1, [r7, #0]
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f7fe fc42 	bl	800da58 <udp_input>
        break;
 800f1d4:	e026      	b.n	800f224 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f1d6:	6839      	ldr	r1, [r7, #0]
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f7fa f863 	bl	80092a4 <tcp_input>
        break;
 800f1de:	e021      	b.n	800f224 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f1e0:	6839      	ldr	r1, [r7, #0]
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f7ff fcc8 	bl	800eb78 <icmp_input>
        break;
 800f1e8:	e01c      	b.n	800f224 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f1ea:	4b1a      	ldr	r3, [pc, #104]	; (800f254 <ip4_input+0x240>)
 800f1ec:	695b      	ldr	r3, [r3, #20]
 800f1ee:	6939      	ldr	r1, [r7, #16]
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f000 f90b 	bl	800f40c <ip4_addr_isbroadcast_u32>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d10f      	bne.n	800f21c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f1fc:	4b15      	ldr	r3, [pc, #84]	; (800f254 <ip4_input+0x240>)
 800f1fe:	695b      	ldr	r3, [r3, #20]
 800f200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f204:	2be0      	cmp	r3, #224	; 0xe0
 800f206:	d009      	beq.n	800f21c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f208:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f20c:	4619      	mov	r1, r3
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f7f7 ff6d 	bl	80070ee <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f214:	2102      	movs	r1, #2
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f7ff fdce 	bl	800edb8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f7f7 ff79 	bl	8007114 <pbuf_free>
        break;
 800f222:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f224:	4b0b      	ldr	r3, [pc, #44]	; (800f254 <ip4_input+0x240>)
 800f226:	2200      	movs	r2, #0
 800f228:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f22a:	4b0a      	ldr	r3, [pc, #40]	; (800f254 <ip4_input+0x240>)
 800f22c:	2200      	movs	r2, #0
 800f22e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f230:	4b08      	ldr	r3, [pc, #32]	; (800f254 <ip4_input+0x240>)
 800f232:	2200      	movs	r2, #0
 800f234:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f236:	4b07      	ldr	r3, [pc, #28]	; (800f254 <ip4_input+0x240>)
 800f238:	2200      	movs	r2, #0
 800f23a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f23c:	4b05      	ldr	r3, [pc, #20]	; (800f254 <ip4_input+0x240>)
 800f23e:	2200      	movs	r2, #0
 800f240:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f242:	4b04      	ldr	r3, [pc, #16]	; (800f254 <ip4_input+0x240>)
 800f244:	2200      	movs	r2, #0
 800f246:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f248:	2300      	movs	r3, #0
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3718      	adds	r7, #24
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop
 800f254:	2400026c 	.word	0x2400026c
 800f258:	2400317c 	.word	0x2400317c

0800f25c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b08a      	sub	sp, #40	; 0x28
 800f260:	af04      	add	r7, sp, #16
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	60b9      	str	r1, [r7, #8]
 800f266:	607a      	str	r2, [r7, #4]
 800f268:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d009      	beq.n	800f288 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d003      	beq.n	800f282 <ip4_output_if+0x26>
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d102      	bne.n	800f288 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f284:	3304      	adds	r3, #4
 800f286:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f288:	78fa      	ldrb	r2, [r7, #3]
 800f28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28c:	9302      	str	r3, [sp, #8]
 800f28e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f292:	9301      	str	r3, [sp, #4]
 800f294:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f298:	9300      	str	r3, [sp, #0]
 800f29a:	4613      	mov	r3, r2
 800f29c:	687a      	ldr	r2, [r7, #4]
 800f29e:	6979      	ldr	r1, [r7, #20]
 800f2a0:	68f8      	ldr	r0, [r7, #12]
 800f2a2:	f000 f805 	bl	800f2b0 <ip4_output_if_src>
 800f2a6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3718      	adds	r7, #24
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b088      	sub	sp, #32
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	60f8      	str	r0, [r7, #12]
 800f2b8:	60b9      	str	r1, [r7, #8]
 800f2ba:	607a      	str	r2, [r7, #4]
 800f2bc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	7b9b      	ldrb	r3, [r3, #14]
 800f2c2:	2b01      	cmp	r3, #1
 800f2c4:	d006      	beq.n	800f2d4 <ip4_output_if_src+0x24>
 800f2c6:	4b4b      	ldr	r3, [pc, #300]	; (800f3f4 <ip4_output_if_src+0x144>)
 800f2c8:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f2cc:	494a      	ldr	r1, [pc, #296]	; (800f3f8 <ip4_output_if_src+0x148>)
 800f2ce:	484b      	ldr	r0, [pc, #300]	; (800f3fc <ip4_output_if_src+0x14c>)
 800f2d0:	f001 f8e6 	bl	80104a0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d060      	beq.n	800f39c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f2da:	2314      	movs	r3, #20
 800f2dc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f2de:	2114      	movs	r1, #20
 800f2e0:	68f8      	ldr	r0, [r7, #12]
 800f2e2:	f7f7 fe81 	bl	8006fe8 <pbuf_add_header>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d002      	beq.n	800f2f2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f2ec:	f06f 0301 	mvn.w	r3, #1
 800f2f0:	e07c      	b.n	800f3ec <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	895b      	ldrh	r3, [r3, #10]
 800f2fc:	2b13      	cmp	r3, #19
 800f2fe:	d806      	bhi.n	800f30e <ip4_output_if_src+0x5e>
 800f300:	4b3c      	ldr	r3, [pc, #240]	; (800f3f4 <ip4_output_if_src+0x144>)
 800f302:	f44f 7262 	mov.w	r2, #904	; 0x388
 800f306:	493e      	ldr	r1, [pc, #248]	; (800f400 <ip4_output_if_src+0x150>)
 800f308:	483c      	ldr	r0, [pc, #240]	; (800f3fc <ip4_output_if_src+0x14c>)
 800f30a:	f001 f8c9 	bl	80104a0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f30e:	69fb      	ldr	r3, [r7, #28]
 800f310:	78fa      	ldrb	r2, [r7, #3]
 800f312:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f314:	69fb      	ldr	r3, [r7, #28]
 800f316:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f31a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681a      	ldr	r2, [r3, #0]
 800f320:	69fb      	ldr	r3, [r7, #28]
 800f322:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f324:	8b7b      	ldrh	r3, [r7, #26]
 800f326:	089b      	lsrs	r3, r3, #2
 800f328:	b29b      	uxth	r3, r3
 800f32a:	b2db      	uxtb	r3, r3
 800f32c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f330:	b2da      	uxtb	r2, r3
 800f332:	69fb      	ldr	r3, [r7, #28]
 800f334:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f336:	69fb      	ldr	r3, [r7, #28]
 800f338:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f33c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	891b      	ldrh	r3, [r3, #8]
 800f342:	4618      	mov	r0, r3
 800f344:	f7f6 fad0 	bl	80058e8 <lwip_htons>
 800f348:	4603      	mov	r3, r0
 800f34a:	461a      	mov	r2, r3
 800f34c:	69fb      	ldr	r3, [r7, #28]
 800f34e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f350:	69fb      	ldr	r3, [r7, #28]
 800f352:	2200      	movs	r2, #0
 800f354:	719a      	strb	r2, [r3, #6]
 800f356:	2200      	movs	r2, #0
 800f358:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f35a:	4b2a      	ldr	r3, [pc, #168]	; (800f404 <ip4_output_if_src+0x154>)
 800f35c:	881b      	ldrh	r3, [r3, #0]
 800f35e:	4618      	mov	r0, r3
 800f360:	f7f6 fac2 	bl	80058e8 <lwip_htons>
 800f364:	4603      	mov	r3, r0
 800f366:	461a      	mov	r2, r3
 800f368:	69fb      	ldr	r3, [r7, #28]
 800f36a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f36c:	4b25      	ldr	r3, [pc, #148]	; (800f404 <ip4_output_if_src+0x154>)
 800f36e:	881b      	ldrh	r3, [r3, #0]
 800f370:	3301      	adds	r3, #1
 800f372:	b29a      	uxth	r2, r3
 800f374:	4b23      	ldr	r3, [pc, #140]	; (800f404 <ip4_output_if_src+0x154>)
 800f376:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d104      	bne.n	800f388 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f37e:	4b22      	ldr	r3, [pc, #136]	; (800f408 <ip4_output_if_src+0x158>)
 800f380:	681a      	ldr	r2, [r3, #0]
 800f382:	69fb      	ldr	r3, [r7, #28]
 800f384:	60da      	str	r2, [r3, #12]
 800f386:	e003      	b.n	800f390 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	681a      	ldr	r2, [r3, #0]
 800f38c:	69fb      	ldr	r3, [r7, #28]
 800f38e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f390:	69fb      	ldr	r3, [r7, #28]
 800f392:	2200      	movs	r2, #0
 800f394:	729a      	strb	r2, [r3, #10]
 800f396:	2200      	movs	r2, #0
 800f398:	72da      	strb	r2, [r3, #11]
 800f39a:	e00f      	b.n	800f3bc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	895b      	ldrh	r3, [r3, #10]
 800f3a0:	2b13      	cmp	r3, #19
 800f3a2:	d802      	bhi.n	800f3aa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f3a4:	f06f 0301 	mvn.w	r3, #1
 800f3a8:	e020      	b.n	800f3ec <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f3b0:	69fb      	ldr	r3, [r7, #28]
 800f3b2:	691b      	ldr	r3, [r3, #16]
 800f3b4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f3b6:	f107 0314 	add.w	r3, r7, #20
 800f3ba:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d00c      	beq.n	800f3de <ip4_output_if_src+0x12e>
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	891a      	ldrh	r2, [r3, #8]
 800f3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d906      	bls.n	800f3de <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f3d4:	68f8      	ldr	r0, [r7, #12]
 800f3d6:	f000 fde3 	bl	800ffa0 <ip4_frag>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	e006      	b.n	800f3ec <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e0:	695b      	ldr	r3, [r3, #20]
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	68f9      	ldr	r1, [r7, #12]
 800f3e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3e8:	4798      	blx	r3
 800f3ea:	4603      	mov	r3, r0
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3720      	adds	r7, #32
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}
 800f3f4:	08013fc0 	.word	0x08013fc0
 800f3f8:	08013ff4 	.word	0x08013ff4
 800f3fc:	08014000 	.word	0x08014000
 800f400:	08014028 	.word	0x08014028
 800f404:	240032da 	.word	0x240032da
 800f408:	08014400 	.word	0x08014400

0800f40c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f40c:	b480      	push	{r7}
 800f40e:	b085      	sub	sp, #20
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f420:	d002      	beq.n	800f428 <ip4_addr_isbroadcast_u32+0x1c>
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d101      	bne.n	800f42c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f428:	2301      	movs	r3, #1
 800f42a:	e02a      	b.n	800f482 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f432:	f003 0302 	and.w	r3, r3, #2
 800f436:	2b00      	cmp	r3, #0
 800f438:	d101      	bne.n	800f43e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f43a:	2300      	movs	r3, #0
 800f43c:	e021      	b.n	800f482 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	3304      	adds	r3, #4
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	429a      	cmp	r2, r3
 800f448:	d101      	bne.n	800f44e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f44a:	2300      	movs	r3, #0
 800f44c:	e019      	b.n	800f482 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f44e:	68fa      	ldr	r2, [r7, #12]
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	3304      	adds	r3, #4
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	405a      	eors	r2, r3
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	3308      	adds	r3, #8
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	4013      	ands	r3, r2
 800f460:	2b00      	cmp	r3, #0
 800f462:	d10d      	bne.n	800f480 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	3308      	adds	r3, #8
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	43da      	mvns	r2, r3
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	3308      	adds	r3, #8
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f478:	429a      	cmp	r2, r3
 800f47a:	d101      	bne.n	800f480 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f47c:	2301      	movs	r3, #1
 800f47e:	e000      	b.n	800f482 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f480:	2300      	movs	r3, #0
  }
}
 800f482:	4618      	mov	r0, r3
 800f484:	3714      	adds	r7, #20
 800f486:	46bd      	mov	sp, r7
 800f488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48c:	4770      	bx	lr
	...

0800f490 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800f498:	2210      	movs	r2, #16
 800f49a:	4904      	ldr	r1, [pc, #16]	; (800f4ac <ip4addr_ntoa+0x1c>)
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f000 f807 	bl	800f4b0 <ip4addr_ntoa_r>
 800f4a2:	4603      	mov	r3, r0
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3708      	adds	r7, #8
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	240032dc 	.word	0x240032dc

0800f4b0 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b08d      	sub	sp, #52	; 0x34
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	60f8      	str	r0, [r7, #12]
 800f4b8:	60b9      	str	r1, [r7, #8]
 800f4ba:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800f4ca:	f107 0318 	add.w	r3, r7, #24
 800f4ce:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f4d6:	e058      	b.n	800f58a <ip4addr_ntoa_r+0xda>
    i = 0;
 800f4d8:	2300      	movs	r3, #0
 800f4da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800f4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e0:	781a      	ldrb	r2, [r3, #0]
 800f4e2:	4b32      	ldr	r3, [pc, #200]	; (800f5ac <ip4addr_ntoa_r+0xfc>)
 800f4e4:	fba3 1302 	umull	r1, r3, r3, r2
 800f4e8:	08d9      	lsrs	r1, r3, #3
 800f4ea:	460b      	mov	r3, r1
 800f4ec:	009b      	lsls	r3, r3, #2
 800f4ee:	440b      	add	r3, r1
 800f4f0:	005b      	lsls	r3, r3, #1
 800f4f2:	1ad3      	subs	r3, r2, r3
 800f4f4:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800f4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	4a2c      	ldr	r2, [pc, #176]	; (800f5ac <ip4addr_ntoa_r+0xfc>)
 800f4fc:	fba2 2303 	umull	r2, r3, r2, r3
 800f500:	08db      	lsrs	r3, r3, #3
 800f502:	b2da      	uxtb	r2, r3
 800f504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f506:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800f508:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f50c:	1c5a      	adds	r2, r3, #1
 800f50e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800f512:	4619      	mov	r1, r3
 800f514:	7ffb      	ldrb	r3, [r7, #31]
 800f516:	3330      	adds	r3, #48	; 0x30
 800f518:	b2da      	uxtb	r2, r3
 800f51a:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800f51e:	443b      	add	r3, r7
 800f520:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800f524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d1d8      	bne.n	800f4de <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800f52c:	e011      	b.n	800f552 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800f52e:	6a3b      	ldr	r3, [r7, #32]
 800f530:	1c5a      	adds	r2, r3, #1
 800f532:	623a      	str	r2, [r7, #32]
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	429a      	cmp	r2, r3
 800f538:	dc01      	bgt.n	800f53e <ip4addr_ntoa_r+0x8e>
        return NULL;
 800f53a:	2300      	movs	r3, #0
 800f53c:	e030      	b.n	800f5a0 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800f53e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f544:	1c59      	adds	r1, r3, #1
 800f546:	62f9      	str	r1, [r7, #44]	; 0x2c
 800f548:	3230      	adds	r2, #48	; 0x30
 800f54a:	443a      	add	r2, r7
 800f54c:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800f550:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800f552:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f556:	1e5a      	subs	r2, r3, #1
 800f558:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d1e6      	bne.n	800f52e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800f560:	6a3b      	ldr	r3, [r7, #32]
 800f562:	1c5a      	adds	r2, r3, #1
 800f564:	623a      	str	r2, [r7, #32]
 800f566:	687a      	ldr	r2, [r7, #4]
 800f568:	429a      	cmp	r2, r3
 800f56a:	dc01      	bgt.n	800f570 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800f56c:	2300      	movs	r3, #0
 800f56e:	e017      	b.n	800f5a0 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800f570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f572:	1c5a      	adds	r2, r3, #1
 800f574:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f576:	222e      	movs	r2, #46	; 0x2e
 800f578:	701a      	strb	r2, [r3, #0]
    ap++;
 800f57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57c:	3301      	adds	r3, #1
 800f57e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800f580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f584:	3301      	adds	r3, #1
 800f586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f58a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f58e:	2b03      	cmp	r3, #3
 800f590:	d9a2      	bls.n	800f4d8 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800f592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f594:	3b01      	subs	r3, #1
 800f596:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f59a:	2200      	movs	r2, #0
 800f59c:	701a      	strb	r2, [r3, #0]
  return buf;
 800f59e:	68bb      	ldr	r3, [r7, #8]
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3734      	adds	r7, #52	; 0x34
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr
 800f5ac:	cccccccd 	.word	0xcccccccd

0800f5b0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f5ba:	4b12      	ldr	r3, [pc, #72]	; (800f604 <ip_reass_tmr+0x54>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f5c0:	e018      	b.n	800f5f4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	7fdb      	ldrb	r3, [r3, #31]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00b      	beq.n	800f5e2 <ip_reass_tmr+0x32>
      r->timer--;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	7fdb      	ldrb	r3, [r3, #31]
 800f5ce:	3b01      	subs	r3, #1
 800f5d0:	b2da      	uxtb	r2, r3
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	60fb      	str	r3, [r7, #12]
 800f5e0:	e008      	b.n	800f5f4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f5ec:	68b9      	ldr	r1, [r7, #8]
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f000 f80a 	bl	800f608 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d1e3      	bne.n	800f5c2 <ip_reass_tmr+0x12>
    }
  }
}
 800f5fa:	bf00      	nop
 800f5fc:	bf00      	nop
 800f5fe:	3710      	adds	r7, #16
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}
 800f604:	240032ec 	.word	0x240032ec

0800f608 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b088      	sub	sp, #32
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f612:	2300      	movs	r3, #0
 800f614:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f616:	683a      	ldr	r2, [r7, #0]
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d105      	bne.n	800f62a <ip_reass_free_complete_datagram+0x22>
 800f61e:	4b45      	ldr	r3, [pc, #276]	; (800f734 <ip_reass_free_complete_datagram+0x12c>)
 800f620:	22ab      	movs	r2, #171	; 0xab
 800f622:	4945      	ldr	r1, [pc, #276]	; (800f738 <ip_reass_free_complete_datagram+0x130>)
 800f624:	4845      	ldr	r0, [pc, #276]	; (800f73c <ip_reass_free_complete_datagram+0x134>)
 800f626:	f000 ff3b 	bl	80104a0 <iprintf>
  if (prev != NULL) {
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d00a      	beq.n	800f646 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	687a      	ldr	r2, [r7, #4]
 800f636:	429a      	cmp	r2, r3
 800f638:	d005      	beq.n	800f646 <ip_reass_free_complete_datagram+0x3e>
 800f63a:	4b3e      	ldr	r3, [pc, #248]	; (800f734 <ip_reass_free_complete_datagram+0x12c>)
 800f63c:	22ad      	movs	r2, #173	; 0xad
 800f63e:	4940      	ldr	r1, [pc, #256]	; (800f740 <ip_reass_free_complete_datagram+0x138>)
 800f640:	483e      	ldr	r0, [pc, #248]	; (800f73c <ip_reass_free_complete_datagram+0x134>)
 800f642:	f000 ff2d 	bl	80104a0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	685b      	ldr	r3, [r3, #4]
 800f64a:	685b      	ldr	r3, [r3, #4]
 800f64c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	889b      	ldrh	r3, [r3, #4]
 800f652:	b29b      	uxth	r3, r3
 800f654:	2b00      	cmp	r3, #0
 800f656:	d12a      	bne.n	800f6ae <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	681a      	ldr	r2, [r3, #0]
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f666:	69bb      	ldr	r3, [r7, #24]
 800f668:	6858      	ldr	r0, [r3, #4]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	3308      	adds	r3, #8
 800f66e:	2214      	movs	r2, #20
 800f670:	4619      	mov	r1, r3
 800f672:	f000 fee5 	bl	8010440 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f676:	2101      	movs	r1, #1
 800f678:	69b8      	ldr	r0, [r7, #24]
 800f67a:	f7ff fbad 	bl	800edd8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f67e:	69b8      	ldr	r0, [r7, #24]
 800f680:	f7f7 fdd0 	bl	8007224 <pbuf_clen>
 800f684:	4603      	mov	r3, r0
 800f686:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f688:	8bfa      	ldrh	r2, [r7, #30]
 800f68a:	8a7b      	ldrh	r3, [r7, #18]
 800f68c:	4413      	add	r3, r2
 800f68e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f692:	db05      	blt.n	800f6a0 <ip_reass_free_complete_datagram+0x98>
 800f694:	4b27      	ldr	r3, [pc, #156]	; (800f734 <ip_reass_free_complete_datagram+0x12c>)
 800f696:	22bc      	movs	r2, #188	; 0xbc
 800f698:	492a      	ldr	r1, [pc, #168]	; (800f744 <ip_reass_free_complete_datagram+0x13c>)
 800f69a:	4828      	ldr	r0, [pc, #160]	; (800f73c <ip_reass_free_complete_datagram+0x134>)
 800f69c:	f000 ff00 	bl	80104a0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f6a0:	8bfa      	ldrh	r2, [r7, #30]
 800f6a2:	8a7b      	ldrh	r3, [r7, #18]
 800f6a4:	4413      	add	r3, r2
 800f6a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f6a8:	69b8      	ldr	r0, [r7, #24]
 800f6aa:	f7f7 fd33 	bl	8007114 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	685b      	ldr	r3, [r3, #4]
 800f6b2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f6b4:	e01f      	b.n	800f6f6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	685b      	ldr	r3, [r3, #4]
 800f6ba:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f6bc:	69bb      	ldr	r3, [r7, #24]
 800f6be:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f6c6:	68f8      	ldr	r0, [r7, #12]
 800f6c8:	f7f7 fdac 	bl	8007224 <pbuf_clen>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f6d0:	8bfa      	ldrh	r2, [r7, #30]
 800f6d2:	8a7b      	ldrh	r3, [r7, #18]
 800f6d4:	4413      	add	r3, r2
 800f6d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6da:	db05      	blt.n	800f6e8 <ip_reass_free_complete_datagram+0xe0>
 800f6dc:	4b15      	ldr	r3, [pc, #84]	; (800f734 <ip_reass_free_complete_datagram+0x12c>)
 800f6de:	22cc      	movs	r2, #204	; 0xcc
 800f6e0:	4918      	ldr	r1, [pc, #96]	; (800f744 <ip_reass_free_complete_datagram+0x13c>)
 800f6e2:	4816      	ldr	r0, [pc, #88]	; (800f73c <ip_reass_free_complete_datagram+0x134>)
 800f6e4:	f000 fedc 	bl	80104a0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f6e8:	8bfa      	ldrh	r2, [r7, #30]
 800f6ea:	8a7b      	ldrh	r3, [r7, #18]
 800f6ec:	4413      	add	r3, r2
 800f6ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f6f0:	68f8      	ldr	r0, [r7, #12]
 800f6f2:	f7f7 fd0f 	bl	8007114 <pbuf_free>
  while (p != NULL) {
 800f6f6:	69bb      	ldr	r3, [r7, #24]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d1dc      	bne.n	800f6b6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f6fc:	6839      	ldr	r1, [r7, #0]
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f000 f8c2 	bl	800f888 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f704:	4b10      	ldr	r3, [pc, #64]	; (800f748 <ip_reass_free_complete_datagram+0x140>)
 800f706:	881b      	ldrh	r3, [r3, #0]
 800f708:	8bfa      	ldrh	r2, [r7, #30]
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d905      	bls.n	800f71a <ip_reass_free_complete_datagram+0x112>
 800f70e:	4b09      	ldr	r3, [pc, #36]	; (800f734 <ip_reass_free_complete_datagram+0x12c>)
 800f710:	22d2      	movs	r2, #210	; 0xd2
 800f712:	490e      	ldr	r1, [pc, #56]	; (800f74c <ip_reass_free_complete_datagram+0x144>)
 800f714:	4809      	ldr	r0, [pc, #36]	; (800f73c <ip_reass_free_complete_datagram+0x134>)
 800f716:	f000 fec3 	bl	80104a0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f71a:	4b0b      	ldr	r3, [pc, #44]	; (800f748 <ip_reass_free_complete_datagram+0x140>)
 800f71c:	881a      	ldrh	r2, [r3, #0]
 800f71e:	8bfb      	ldrh	r3, [r7, #30]
 800f720:	1ad3      	subs	r3, r2, r3
 800f722:	b29a      	uxth	r2, r3
 800f724:	4b08      	ldr	r3, [pc, #32]	; (800f748 <ip_reass_free_complete_datagram+0x140>)
 800f726:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f728:	8bfb      	ldrh	r3, [r7, #30]
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3720      	adds	r7, #32
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}
 800f732:	bf00      	nop
 800f734:	08014058 	.word	0x08014058
 800f738:	08014094 	.word	0x08014094
 800f73c:	080140a0 	.word	0x080140a0
 800f740:	080140c8 	.word	0x080140c8
 800f744:	080140dc 	.word	0x080140dc
 800f748:	240032f0 	.word	0x240032f0
 800f74c:	080140fc 	.word	0x080140fc

0800f750 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b08a      	sub	sp, #40	; 0x28
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f75a:	2300      	movs	r3, #0
 800f75c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f75e:	2300      	movs	r3, #0
 800f760:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f762:	2300      	movs	r3, #0
 800f764:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f766:	2300      	movs	r3, #0
 800f768:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f76a:	2300      	movs	r3, #0
 800f76c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f76e:	4b28      	ldr	r3, [pc, #160]	; (800f810 <ip_reass_remove_oldest_datagram+0xc0>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f774:	e030      	b.n	800f7d8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f778:	695a      	ldr	r2, [r3, #20]
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	68db      	ldr	r3, [r3, #12]
 800f77e:	429a      	cmp	r2, r3
 800f780:	d10c      	bne.n	800f79c <ip_reass_remove_oldest_datagram+0x4c>
 800f782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f784:	699a      	ldr	r2, [r3, #24]
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	691b      	ldr	r3, [r3, #16]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d106      	bne.n	800f79c <ip_reass_remove_oldest_datagram+0x4c>
 800f78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f790:	899a      	ldrh	r2, [r3, #12]
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	889b      	ldrh	r3, [r3, #4]
 800f796:	b29b      	uxth	r3, r3
 800f798:	429a      	cmp	r2, r3
 800f79a:	d014      	beq.n	800f7c6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f79c:	693b      	ldr	r3, [r7, #16]
 800f79e:	3301      	adds	r3, #1
 800f7a0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f7a2:	6a3b      	ldr	r3, [r7, #32]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d104      	bne.n	800f7b2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7aa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f7ac:	69fb      	ldr	r3, [r7, #28]
 800f7ae:	61bb      	str	r3, [r7, #24]
 800f7b0:	e009      	b.n	800f7c6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b4:	7fda      	ldrb	r2, [r3, #31]
 800f7b6:	6a3b      	ldr	r3, [r7, #32]
 800f7b8:	7fdb      	ldrb	r3, [r3, #31]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d803      	bhi.n	800f7c6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f7c2:	69fb      	ldr	r3, [r7, #28]
 800f7c4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d001      	beq.n	800f7d2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d1cb      	bne.n	800f776 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f7de:	6a3b      	ldr	r3, [r7, #32]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d008      	beq.n	800f7f6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f7e4:	69b9      	ldr	r1, [r7, #24]
 800f7e6:	6a38      	ldr	r0, [r7, #32]
 800f7e8:	f7ff ff0e 	bl	800f608 <ip_reass_free_complete_datagram>
 800f7ec:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f7ee:	697a      	ldr	r2, [r7, #20]
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	4413      	add	r3, r2
 800f7f4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f7f6:	697a      	ldr	r2, [r7, #20]
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	429a      	cmp	r2, r3
 800f7fc:	da02      	bge.n	800f804 <ip_reass_remove_oldest_datagram+0xb4>
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	2b01      	cmp	r3, #1
 800f802:	dcac      	bgt.n	800f75e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f804:	697b      	ldr	r3, [r7, #20]
}
 800f806:	4618      	mov	r0, r3
 800f808:	3728      	adds	r7, #40	; 0x28
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	240032ec 	.word	0x240032ec

0800f814 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b084      	sub	sp, #16
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f81e:	2004      	movs	r0, #4
 800f820:	f7f6 fd92 	bl	8006348 <memp_malloc>
 800f824:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d110      	bne.n	800f84e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f82c:	6839      	ldr	r1, [r7, #0]
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f7ff ff8e 	bl	800f750 <ip_reass_remove_oldest_datagram>
 800f834:	4602      	mov	r2, r0
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	4293      	cmp	r3, r2
 800f83a:	dc03      	bgt.n	800f844 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f83c:	2004      	movs	r0, #4
 800f83e:	f7f6 fd83 	bl	8006348 <memp_malloc>
 800f842:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d101      	bne.n	800f84e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f84a:	2300      	movs	r3, #0
 800f84c:	e016      	b.n	800f87c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f84e:	2220      	movs	r2, #32
 800f850:	2100      	movs	r1, #0
 800f852:	68f8      	ldr	r0, [r7, #12]
 800f854:	f000 fe1c 	bl	8010490 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	220f      	movs	r2, #15
 800f85c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f85e:	4b09      	ldr	r3, [pc, #36]	; (800f884 <ip_reass_enqueue_new_datagram+0x70>)
 800f860:	681a      	ldr	r2, [r3, #0]
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f866:	4a07      	ldr	r2, [pc, #28]	; (800f884 <ip_reass_enqueue_new_datagram+0x70>)
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	3308      	adds	r3, #8
 800f870:	2214      	movs	r2, #20
 800f872:	6879      	ldr	r1, [r7, #4]
 800f874:	4618      	mov	r0, r3
 800f876:	f000 fde3 	bl	8010440 <memcpy>
  return ipr;
 800f87a:	68fb      	ldr	r3, [r7, #12]
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	3710      	adds	r7, #16
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}
 800f884:	240032ec 	.word	0x240032ec

0800f888 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b082      	sub	sp, #8
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
 800f890:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f892:	4b10      	ldr	r3, [pc, #64]	; (800f8d4 <ip_reass_dequeue_datagram+0x4c>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	687a      	ldr	r2, [r7, #4]
 800f898:	429a      	cmp	r2, r3
 800f89a:	d104      	bne.n	800f8a6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	4a0c      	ldr	r2, [pc, #48]	; (800f8d4 <ip_reass_dequeue_datagram+0x4c>)
 800f8a2:	6013      	str	r3, [r2, #0]
 800f8a4:	e00d      	b.n	800f8c2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d106      	bne.n	800f8ba <ip_reass_dequeue_datagram+0x32>
 800f8ac:	4b0a      	ldr	r3, [pc, #40]	; (800f8d8 <ip_reass_dequeue_datagram+0x50>)
 800f8ae:	f240 1245 	movw	r2, #325	; 0x145
 800f8b2:	490a      	ldr	r1, [pc, #40]	; (800f8dc <ip_reass_dequeue_datagram+0x54>)
 800f8b4:	480a      	ldr	r0, [pc, #40]	; (800f8e0 <ip_reass_dequeue_datagram+0x58>)
 800f8b6:	f000 fdf3 	bl	80104a0 <iprintf>
    prev->next = ipr->next;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681a      	ldr	r2, [r3, #0]
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f8c2:	6879      	ldr	r1, [r7, #4]
 800f8c4:	2004      	movs	r0, #4
 800f8c6:	f7f6 fdaf 	bl	8006428 <memp_free>
}
 800f8ca:	bf00      	nop
 800f8cc:	3708      	adds	r7, #8
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	bf00      	nop
 800f8d4:	240032ec 	.word	0x240032ec
 800f8d8:	08014058 	.word	0x08014058
 800f8dc:	08014120 	.word	0x08014120
 800f8e0:	080140a0 	.word	0x080140a0

0800f8e4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b08c      	sub	sp, #48	; 0x30
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	60f8      	str	r0, [r7, #12]
 800f8ec:	60b9      	str	r1, [r7, #8]
 800f8ee:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	685b      	ldr	r3, [r3, #4]
 800f8fc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f8fe:	69fb      	ldr	r3, [r7, #28]
 800f900:	885b      	ldrh	r3, [r3, #2]
 800f902:	b29b      	uxth	r3, r3
 800f904:	4618      	mov	r0, r3
 800f906:	f7f5 ffef 	bl	80058e8 <lwip_htons>
 800f90a:	4603      	mov	r3, r0
 800f90c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	781b      	ldrb	r3, [r3, #0]
 800f912:	f003 030f 	and.w	r3, r3, #15
 800f916:	b2db      	uxtb	r3, r3
 800f918:	009b      	lsls	r3, r3, #2
 800f91a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f91c:	7e7b      	ldrb	r3, [r7, #25]
 800f91e:	b29b      	uxth	r3, r3
 800f920:	8b7a      	ldrh	r2, [r7, #26]
 800f922:	429a      	cmp	r2, r3
 800f924:	d202      	bcs.n	800f92c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f926:	f04f 33ff 	mov.w	r3, #4294967295
 800f92a:	e135      	b.n	800fb98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f92c:	7e7b      	ldrb	r3, [r7, #25]
 800f92e:	b29b      	uxth	r3, r3
 800f930:	8b7a      	ldrh	r2, [r7, #26]
 800f932:	1ad3      	subs	r3, r2, r3
 800f934:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f936:	69fb      	ldr	r3, [r7, #28]
 800f938:	88db      	ldrh	r3, [r3, #6]
 800f93a:	b29b      	uxth	r3, r3
 800f93c:	4618      	mov	r0, r3
 800f93e:	f7f5 ffd3 	bl	80058e8 <lwip_htons>
 800f942:	4603      	mov	r3, r0
 800f944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f948:	b29b      	uxth	r3, r3
 800f94a:	00db      	lsls	r3, r3, #3
 800f94c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	685b      	ldr	r3, [r3, #4]
 800f952:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f956:	2200      	movs	r2, #0
 800f958:	701a      	strb	r2, [r3, #0]
 800f95a:	2200      	movs	r2, #0
 800f95c:	705a      	strb	r2, [r3, #1]
 800f95e:	2200      	movs	r2, #0
 800f960:	709a      	strb	r2, [r3, #2]
 800f962:	2200      	movs	r2, #0
 800f964:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f968:	8afa      	ldrh	r2, [r7, #22]
 800f96a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f96c:	8afa      	ldrh	r2, [r7, #22]
 800f96e:	8b7b      	ldrh	r3, [r7, #26]
 800f970:	4413      	add	r3, r2
 800f972:	b29a      	uxth	r2, r3
 800f974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f976:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97a:	88db      	ldrh	r3, [r3, #6]
 800f97c:	b29b      	uxth	r3, r3
 800f97e:	8afa      	ldrh	r2, [r7, #22]
 800f980:	429a      	cmp	r2, r3
 800f982:	d902      	bls.n	800f98a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f984:	f04f 33ff 	mov.w	r3, #4294967295
 800f988:	e106      	b.n	800fb98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	685b      	ldr	r3, [r3, #4]
 800f98e:	627b      	str	r3, [r7, #36]	; 0x24
 800f990:	e068      	b.n	800fa64 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f994:	685b      	ldr	r3, [r3, #4]
 800f996:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f99a:	889b      	ldrh	r3, [r3, #4]
 800f99c:	b29a      	uxth	r2, r3
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	889b      	ldrh	r3, [r3, #4]
 800f9a2:	b29b      	uxth	r3, r3
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d235      	bcs.n	800fa14 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d020      	beq.n	800f9f6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b6:	889b      	ldrh	r3, [r3, #4]
 800f9b8:	b29a      	uxth	r2, r3
 800f9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9bc:	88db      	ldrh	r3, [r3, #6]
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	d307      	bcc.n	800f9d4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c6:	88db      	ldrh	r3, [r3, #6]
 800f9c8:	b29a      	uxth	r2, r3
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	889b      	ldrh	r3, [r3, #4]
 800f9ce:	b29b      	uxth	r3, r3
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d902      	bls.n	800f9da <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f9d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f9d8:	e0de      	b.n	800fb98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9dc:	68ba      	ldr	r2, [r7, #8]
 800f9de:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9e2:	88db      	ldrh	r3, [r3, #6]
 800f9e4:	b29a      	uxth	r2, r3
 800f9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e8:	889b      	ldrh	r3, [r3, #4]
 800f9ea:	b29b      	uxth	r3, r3
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d03d      	beq.n	800fa6c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f9f4:	e03a      	b.n	800fa6c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f8:	88db      	ldrh	r3, [r3, #6]
 800f9fa:	b29a      	uxth	r2, r3
 800f9fc:	693b      	ldr	r3, [r7, #16]
 800f9fe:	889b      	ldrh	r3, [r3, #4]
 800fa00:	b29b      	uxth	r3, r3
 800fa02:	429a      	cmp	r2, r3
 800fa04:	d902      	bls.n	800fa0c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fa06:	f04f 33ff 	mov.w	r3, #4294967295
 800fa0a:	e0c5      	b.n	800fb98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	68ba      	ldr	r2, [r7, #8]
 800fa10:	605a      	str	r2, [r3, #4]
      break;
 800fa12:	e02b      	b.n	800fa6c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800fa14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa16:	889b      	ldrh	r3, [r3, #4]
 800fa18:	b29a      	uxth	r2, r3
 800fa1a:	693b      	ldr	r3, [r7, #16]
 800fa1c:	889b      	ldrh	r3, [r3, #4]
 800fa1e:	b29b      	uxth	r3, r3
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d102      	bne.n	800fa2a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fa24:	f04f 33ff 	mov.w	r3, #4294967295
 800fa28:	e0b6      	b.n	800fb98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800fa2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa2c:	889b      	ldrh	r3, [r3, #4]
 800fa2e:	b29a      	uxth	r2, r3
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	88db      	ldrh	r3, [r3, #6]
 800fa34:	b29b      	uxth	r3, r3
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d202      	bcs.n	800fa40 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fa3a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa3e:	e0ab      	b.n	800fb98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800fa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d009      	beq.n	800fa5a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800fa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa48:	88db      	ldrh	r3, [r3, #6]
 800fa4a:	b29a      	uxth	r2, r3
 800fa4c:	693b      	ldr	r3, [r7, #16]
 800fa4e:	889b      	ldrh	r3, [r3, #4]
 800fa50:	b29b      	uxth	r3, r3
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d001      	beq.n	800fa5a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fa56:	2300      	movs	r3, #0
 800fa58:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800fa5a:	693b      	ldr	r3, [r7, #16]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800fa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d193      	bne.n	800f992 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800fa6a:	e000      	b.n	800fa6e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800fa6c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800fa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d12d      	bne.n	800fad0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800fa74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d01c      	beq.n	800fab4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800fa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa7c:	88db      	ldrh	r3, [r3, #6]
 800fa7e:	b29a      	uxth	r2, r3
 800fa80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa82:	889b      	ldrh	r3, [r3, #4]
 800fa84:	b29b      	uxth	r3, r3
 800fa86:	429a      	cmp	r2, r3
 800fa88:	d906      	bls.n	800fa98 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800fa8a:	4b45      	ldr	r3, [pc, #276]	; (800fba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fa8c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800fa90:	4944      	ldr	r1, [pc, #272]	; (800fba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800fa92:	4845      	ldr	r0, [pc, #276]	; (800fba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fa94:	f000 fd04 	bl	80104a0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800fa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9a:	68ba      	ldr	r2, [r7, #8]
 800fa9c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800fa9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa0:	88db      	ldrh	r3, [r3, #6]
 800faa2:	b29a      	uxth	r2, r3
 800faa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa6:	889b      	ldrh	r3, [r3, #4]
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	429a      	cmp	r2, r3
 800faac:	d010      	beq.n	800fad0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800faae:	2300      	movs	r3, #0
 800fab0:	623b      	str	r3, [r7, #32]
 800fab2:	e00d      	b.n	800fad0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	685b      	ldr	r3, [r3, #4]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d006      	beq.n	800faca <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800fabc:	4b38      	ldr	r3, [pc, #224]	; (800fba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fabe:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800fac2:	493a      	ldr	r1, [pc, #232]	; (800fbac <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800fac4:	4838      	ldr	r0, [pc, #224]	; (800fba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fac6:	f000 fceb 	bl	80104a0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	68ba      	ldr	r2, [r7, #8]
 800face:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d105      	bne.n	800fae2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	7f9b      	ldrb	r3, [r3, #30]
 800fada:	f003 0301 	and.w	r3, r3, #1
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d059      	beq.n	800fb96 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800fae2:	6a3b      	ldr	r3, [r7, #32]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d04f      	beq.n	800fb88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	685b      	ldr	r3, [r3, #4]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d006      	beq.n	800fafe <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	685b      	ldr	r3, [r3, #4]
 800faf4:	685b      	ldr	r3, [r3, #4]
 800faf6:	889b      	ldrh	r3, [r3, #4]
 800faf8:	b29b      	uxth	r3, r3
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d002      	beq.n	800fb04 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800fafe:	2300      	movs	r3, #0
 800fb00:	623b      	str	r3, [r7, #32]
 800fb02:	e041      	b.n	800fb88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800fb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb06:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800fb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800fb0e:	e012      	b.n	800fb36 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800fb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb12:	685b      	ldr	r3, [r3, #4]
 800fb14:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800fb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb18:	88db      	ldrh	r3, [r3, #6]
 800fb1a:	b29a      	uxth	r2, r3
 800fb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1e:	889b      	ldrh	r3, [r3, #4]
 800fb20:	b29b      	uxth	r3, r3
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d002      	beq.n	800fb2c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800fb26:	2300      	movs	r3, #0
 800fb28:	623b      	str	r3, [r7, #32]
            break;
 800fb2a:	e007      	b.n	800fb3c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800fb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800fb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800fb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d1e9      	bne.n	800fb10 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800fb3c:	6a3b      	ldr	r3, [r7, #32]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d022      	beq.n	800fb88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	685b      	ldr	r3, [r3, #4]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d106      	bne.n	800fb58 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800fb4a:	4b15      	ldr	r3, [pc, #84]	; (800fba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fb4c:	f240 12df 	movw	r2, #479	; 0x1df
 800fb50:	4917      	ldr	r1, [pc, #92]	; (800fbb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fb52:	4815      	ldr	r0, [pc, #84]	; (800fba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fb54:	f000 fca4 	bl	80104a0 <iprintf>
          LWIP_ASSERT("sanity check",
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	685b      	ldr	r3, [r3, #4]
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d106      	bne.n	800fb72 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800fb64:	4b0e      	ldr	r3, [pc, #56]	; (800fba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fb66:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fb6a:	4911      	ldr	r1, [pc, #68]	; (800fbb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fb6c:	480e      	ldr	r0, [pc, #56]	; (800fba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fb6e:	f000 fc97 	bl	80104a0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800fb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d006      	beq.n	800fb88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800fb7a:	4b09      	ldr	r3, [pc, #36]	; (800fba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fb7c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800fb80:	490c      	ldr	r1, [pc, #48]	; (800fbb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800fb82:	4809      	ldr	r0, [pc, #36]	; (800fba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fb84:	f000 fc8c 	bl	80104a0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800fb88:	6a3b      	ldr	r3, [r7, #32]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	bf14      	ite	ne
 800fb8e:	2301      	movne	r3, #1
 800fb90:	2300      	moveq	r3, #0
 800fb92:	b2db      	uxtb	r3, r3
 800fb94:	e000      	b.n	800fb98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800fb96:	2300      	movs	r3, #0
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3730      	adds	r7, #48	; 0x30
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}
 800fba0:	08014058 	.word	0x08014058
 800fba4:	0801413c 	.word	0x0801413c
 800fba8:	080140a0 	.word	0x080140a0
 800fbac:	0801415c 	.word	0x0801415c
 800fbb0:	08014194 	.word	0x08014194
 800fbb4:	080141a4 	.word	0x080141a4

0800fbb8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b08e      	sub	sp, #56	; 0x38
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800fbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc8:	781b      	ldrb	r3, [r3, #0]
 800fbca:	f003 030f 	and.w	r3, r3, #15
 800fbce:	b2db      	uxtb	r3, r3
 800fbd0:	009b      	lsls	r3, r3, #2
 800fbd2:	b2db      	uxtb	r3, r3
 800fbd4:	2b14      	cmp	r3, #20
 800fbd6:	f040 8171 	bne.w	800febc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800fbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbdc:	88db      	ldrh	r3, [r3, #6]
 800fbde:	b29b      	uxth	r3, r3
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7f5 fe81 	bl	80058e8 <lwip_htons>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fbec:	b29b      	uxth	r3, r3
 800fbee:	00db      	lsls	r3, r3, #3
 800fbf0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbf4:	885b      	ldrh	r3, [r3, #2]
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f7f5 fe75 	bl	80058e8 <lwip_htons>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800fc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	f003 030f 	and.w	r3, r3, #15
 800fc0a:	b2db      	uxtb	r3, r3
 800fc0c:	009b      	lsls	r3, r3, #2
 800fc0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800fc12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	f0c0 8150 	bcc.w	800fec0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800fc20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fc24:	b29b      	uxth	r3, r3
 800fc26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fc28:	1ad3      	subs	r3, r2, r3
 800fc2a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f7f7 faf9 	bl	8007224 <pbuf_clen>
 800fc32:	4603      	mov	r3, r0
 800fc34:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800fc36:	4b8c      	ldr	r3, [pc, #560]	; (800fe68 <ip4_reass+0x2b0>)
 800fc38:	881b      	ldrh	r3, [r3, #0]
 800fc3a:	461a      	mov	r2, r3
 800fc3c:	8c3b      	ldrh	r3, [r7, #32]
 800fc3e:	4413      	add	r3, r2
 800fc40:	2b0a      	cmp	r3, #10
 800fc42:	dd10      	ble.n	800fc66 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fc44:	8c3b      	ldrh	r3, [r7, #32]
 800fc46:	4619      	mov	r1, r3
 800fc48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc4a:	f7ff fd81 	bl	800f750 <ip_reass_remove_oldest_datagram>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	f000 8137 	beq.w	800fec4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800fc56:	4b84      	ldr	r3, [pc, #528]	; (800fe68 <ip4_reass+0x2b0>)
 800fc58:	881b      	ldrh	r3, [r3, #0]
 800fc5a:	461a      	mov	r2, r3
 800fc5c:	8c3b      	ldrh	r3, [r7, #32]
 800fc5e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fc60:	2b0a      	cmp	r3, #10
 800fc62:	f300 812f 	bgt.w	800fec4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fc66:	4b81      	ldr	r3, [pc, #516]	; (800fe6c <ip4_reass+0x2b4>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	633b      	str	r3, [r7, #48]	; 0x30
 800fc6c:	e015      	b.n	800fc9a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800fc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc70:	695a      	ldr	r2, [r3, #20]
 800fc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc74:	68db      	ldr	r3, [r3, #12]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d10c      	bne.n	800fc94 <ip4_reass+0xdc>
 800fc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7c:	699a      	ldr	r2, [r3, #24]
 800fc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc80:	691b      	ldr	r3, [r3, #16]
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d106      	bne.n	800fc94 <ip4_reass+0xdc>
 800fc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc88:	899a      	ldrh	r2, [r3, #12]
 800fc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc8c:	889b      	ldrh	r3, [r3, #4]
 800fc8e:	b29b      	uxth	r3, r3
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d006      	beq.n	800fca2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	633b      	str	r3, [r7, #48]	; 0x30
 800fc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d1e6      	bne.n	800fc6e <ip4_reass+0xb6>
 800fca0:	e000      	b.n	800fca4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800fca2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800fca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d109      	bne.n	800fcbe <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800fcaa:	8c3b      	ldrh	r3, [r7, #32]
 800fcac:	4619      	mov	r1, r3
 800fcae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcb0:	f7ff fdb0 	bl	800f814 <ip_reass_enqueue_new_datagram>
 800fcb4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800fcb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d11c      	bne.n	800fcf6 <ip4_reass+0x13e>
      goto nullreturn;
 800fcbc:	e105      	b.n	800feca <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc0:	88db      	ldrh	r3, [r3, #6]
 800fcc2:	b29b      	uxth	r3, r3
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f7f5 fe0f 	bl	80058e8 <lwip_htons>
 800fcca:	4603      	mov	r3, r0
 800fccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d110      	bne.n	800fcf6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800fcd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd6:	89db      	ldrh	r3, [r3, #14]
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7f5 fe05 	bl	80058e8 <lwip_htons>
 800fcde:	4603      	mov	r3, r0
 800fce0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d006      	beq.n	800fcf6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800fce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcea:	3308      	adds	r3, #8
 800fcec:	2214      	movs	r2, #20
 800fcee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f000 fba5 	bl	8010440 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800fcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf8:	88db      	ldrh	r3, [r3, #6]
 800fcfa:	b29b      	uxth	r3, r3
 800fcfc:	f003 0320 	and.w	r3, r3, #32
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	bf0c      	ite	eq
 800fd04:	2301      	moveq	r3, #1
 800fd06:	2300      	movne	r3, #0
 800fd08:	b2db      	uxtb	r3, r3
 800fd0a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800fd0c:	69fb      	ldr	r3, [r7, #28]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d00e      	beq.n	800fd30 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800fd12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fd14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd16:	4413      	add	r3, r2
 800fd18:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800fd1a:	8b7a      	ldrh	r2, [r7, #26]
 800fd1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	f0c0 80a0 	bcc.w	800fe64 <ip4_reass+0x2ac>
 800fd24:	8b7b      	ldrh	r3, [r7, #26]
 800fd26:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800fd2a:	4293      	cmp	r3, r2
 800fd2c:	f200 809a 	bhi.w	800fe64 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800fd30:	69fa      	ldr	r2, [r7, #28]
 800fd32:	6879      	ldr	r1, [r7, #4]
 800fd34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd36:	f7ff fdd5 	bl	800f8e4 <ip_reass_chain_frag_into_datagram_and_validate>
 800fd3a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd42:	f000 809b 	beq.w	800fe7c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800fd46:	4b48      	ldr	r3, [pc, #288]	; (800fe68 <ip4_reass+0x2b0>)
 800fd48:	881a      	ldrh	r2, [r3, #0]
 800fd4a:	8c3b      	ldrh	r3, [r7, #32]
 800fd4c:	4413      	add	r3, r2
 800fd4e:	b29a      	uxth	r2, r3
 800fd50:	4b45      	ldr	r3, [pc, #276]	; (800fe68 <ip4_reass+0x2b0>)
 800fd52:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800fd54:	69fb      	ldr	r3, [r7, #28]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d00d      	beq.n	800fd76 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800fd5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fd5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd5e:	4413      	add	r3, r2
 800fd60:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800fd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd64:	8a7a      	ldrh	r2, [r7, #18]
 800fd66:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800fd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6a:	7f9b      	ldrb	r3, [r3, #30]
 800fd6c:	f043 0301 	orr.w	r3, r3, #1
 800fd70:	b2da      	uxtb	r2, r3
 800fd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd74:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	2b01      	cmp	r3, #1
 800fd7a:	d171      	bne.n	800fe60 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800fd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd7e:	8b9b      	ldrh	r3, [r3, #28]
 800fd80:	3314      	adds	r3, #20
 800fd82:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800fd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	685b      	ldr	r3, [r3, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800fd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd90:	685b      	ldr	r3, [r3, #4]
 800fd92:	685b      	ldr	r3, [r3, #4]
 800fd94:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800fd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd98:	3308      	adds	r3, #8
 800fd9a:	2214      	movs	r2, #20
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fda0:	f000 fb4e 	bl	8010440 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800fda4:	8a3b      	ldrh	r3, [r7, #16]
 800fda6:	4618      	mov	r0, r3
 800fda8:	f7f5 fd9e 	bl	80058e8 <lwip_htons>
 800fdac:	4603      	mov	r3, r0
 800fdae:	461a      	mov	r2, r3
 800fdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800fdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	719a      	strb	r2, [r3, #6]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800fdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	729a      	strb	r2, [r3, #10]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800fdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdca:	685b      	ldr	r3, [r3, #4]
 800fdcc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800fdce:	e00d      	b.n	800fdec <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800fdd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdd2:	685b      	ldr	r3, [r3, #4]
 800fdd4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800fdd6:	2114      	movs	r1, #20
 800fdd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fdda:	f7f7 f915 	bl	8007008 <pbuf_remove_header>
      pbuf_cat(p, r);
 800fdde:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f7f7 fa59 	bl	8007298 <pbuf_cat>
      r = iprh->next_pbuf;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800fdec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d1ee      	bne.n	800fdd0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800fdf2:	4b1e      	ldr	r3, [pc, #120]	; (800fe6c <ip4_reass+0x2b4>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d102      	bne.n	800fe02 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe00:	e010      	b.n	800fe24 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fe02:	4b1a      	ldr	r3, [pc, #104]	; (800fe6c <ip4_reass+0x2b4>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe08:	e007      	b.n	800fe1a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800fe0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe10:	429a      	cmp	r2, r3
 800fe12:	d006      	beq.n	800fe22 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fe14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d1f4      	bne.n	800fe0a <ip4_reass+0x252>
 800fe20:	e000      	b.n	800fe24 <ip4_reass+0x26c>
          break;
 800fe22:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800fe24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe28:	f7ff fd2e 	bl	800f888 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f7f7 f9f9 	bl	8007224 <pbuf_clen>
 800fe32:	4603      	mov	r3, r0
 800fe34:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800fe36:	4b0c      	ldr	r3, [pc, #48]	; (800fe68 <ip4_reass+0x2b0>)
 800fe38:	881b      	ldrh	r3, [r3, #0]
 800fe3a:	8c3a      	ldrh	r2, [r7, #32]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d906      	bls.n	800fe4e <ip4_reass+0x296>
 800fe40:	4b0b      	ldr	r3, [pc, #44]	; (800fe70 <ip4_reass+0x2b8>)
 800fe42:	f240 229b 	movw	r2, #667	; 0x29b
 800fe46:	490b      	ldr	r1, [pc, #44]	; (800fe74 <ip4_reass+0x2bc>)
 800fe48:	480b      	ldr	r0, [pc, #44]	; (800fe78 <ip4_reass+0x2c0>)
 800fe4a:	f000 fb29 	bl	80104a0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800fe4e:	4b06      	ldr	r3, [pc, #24]	; (800fe68 <ip4_reass+0x2b0>)
 800fe50:	881a      	ldrh	r2, [r3, #0]
 800fe52:	8c3b      	ldrh	r3, [r7, #32]
 800fe54:	1ad3      	subs	r3, r2, r3
 800fe56:	b29a      	uxth	r2, r3
 800fe58:	4b03      	ldr	r3, [pc, #12]	; (800fe68 <ip4_reass+0x2b0>)
 800fe5a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	e038      	b.n	800fed2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800fe60:	2300      	movs	r3, #0
 800fe62:	e036      	b.n	800fed2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800fe64:	bf00      	nop
 800fe66:	e00a      	b.n	800fe7e <ip4_reass+0x2c6>
 800fe68:	240032f0 	.word	0x240032f0
 800fe6c:	240032ec 	.word	0x240032ec
 800fe70:	08014058 	.word	0x08014058
 800fe74:	080141c8 	.word	0x080141c8
 800fe78:	080140a0 	.word	0x080140a0
    goto nullreturn_ipr;
 800fe7c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800fe7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d106      	bne.n	800fe92 <ip4_reass+0x2da>
 800fe84:	4b15      	ldr	r3, [pc, #84]	; (800fedc <ip4_reass+0x324>)
 800fe86:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800fe8a:	4915      	ldr	r1, [pc, #84]	; (800fee0 <ip4_reass+0x328>)
 800fe8c:	4815      	ldr	r0, [pc, #84]	; (800fee4 <ip4_reass+0x32c>)
 800fe8e:	f000 fb07 	bl	80104a0 <iprintf>
  if (ipr->p == NULL) {
 800fe92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe94:	685b      	ldr	r3, [r3, #4]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d116      	bne.n	800fec8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800fe9a:	4b13      	ldr	r3, [pc, #76]	; (800fee8 <ip4_reass+0x330>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d006      	beq.n	800feb2 <ip4_reass+0x2fa>
 800fea4:	4b0d      	ldr	r3, [pc, #52]	; (800fedc <ip4_reass+0x324>)
 800fea6:	f240 22ab 	movw	r2, #683	; 0x2ab
 800feaa:	4910      	ldr	r1, [pc, #64]	; (800feec <ip4_reass+0x334>)
 800feac:	480d      	ldr	r0, [pc, #52]	; (800fee4 <ip4_reass+0x32c>)
 800feae:	f000 faf7 	bl	80104a0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800feb2:	2100      	movs	r1, #0
 800feb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800feb6:	f7ff fce7 	bl	800f888 <ip_reass_dequeue_datagram>
 800feba:	e006      	b.n	800feca <ip4_reass+0x312>
    goto nullreturn;
 800febc:	bf00      	nop
 800febe:	e004      	b.n	800feca <ip4_reass+0x312>
    goto nullreturn;
 800fec0:	bf00      	nop
 800fec2:	e002      	b.n	800feca <ip4_reass+0x312>
      goto nullreturn;
 800fec4:	bf00      	nop
 800fec6:	e000      	b.n	800feca <ip4_reass+0x312>
  }

nullreturn:
 800fec8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f7f7 f922 	bl	8007114 <pbuf_free>
  return NULL;
 800fed0:	2300      	movs	r3, #0
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3738      	adds	r7, #56	; 0x38
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
 800feda:	bf00      	nop
 800fedc:	08014058 	.word	0x08014058
 800fee0:	080141e4 	.word	0x080141e4
 800fee4:	080140a0 	.word	0x080140a0
 800fee8:	240032ec 	.word	0x240032ec
 800feec:	080141f0 	.word	0x080141f0

0800fef0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800fef4:	2005      	movs	r0, #5
 800fef6:	f7f6 fa27 	bl	8006348 <memp_malloc>
 800fefa:	4603      	mov	r3, r0
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	bd80      	pop	{r7, pc}

0800ff00 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b082      	sub	sp, #8
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d106      	bne.n	800ff1c <ip_frag_free_pbuf_custom_ref+0x1c>
 800ff0e:	4b07      	ldr	r3, [pc, #28]	; (800ff2c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ff10:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800ff14:	4906      	ldr	r1, [pc, #24]	; (800ff30 <ip_frag_free_pbuf_custom_ref+0x30>)
 800ff16:	4807      	ldr	r0, [pc, #28]	; (800ff34 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ff18:	f000 fac2 	bl	80104a0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ff1c:	6879      	ldr	r1, [r7, #4]
 800ff1e:	2005      	movs	r0, #5
 800ff20:	f7f6 fa82 	bl	8006428 <memp_free>
}
 800ff24:	bf00      	nop
 800ff26:	3708      	adds	r7, #8
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}
 800ff2c:	08014058 	.word	0x08014058
 800ff30:	08014210 	.word	0x08014210
 800ff34:	080140a0 	.word	0x080140a0

0800ff38 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b084      	sub	sp, #16
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d106      	bne.n	800ff58 <ipfrag_free_pbuf_custom+0x20>
 800ff4a:	4b11      	ldr	r3, [pc, #68]	; (800ff90 <ipfrag_free_pbuf_custom+0x58>)
 800ff4c:	f240 22ce 	movw	r2, #718	; 0x2ce
 800ff50:	4910      	ldr	r1, [pc, #64]	; (800ff94 <ipfrag_free_pbuf_custom+0x5c>)
 800ff52:	4811      	ldr	r0, [pc, #68]	; (800ff98 <ipfrag_free_pbuf_custom+0x60>)
 800ff54:	f000 faa4 	bl	80104a0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ff58:	68fa      	ldr	r2, [r7, #12]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	d006      	beq.n	800ff6e <ipfrag_free_pbuf_custom+0x36>
 800ff60:	4b0b      	ldr	r3, [pc, #44]	; (800ff90 <ipfrag_free_pbuf_custom+0x58>)
 800ff62:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ff66:	490d      	ldr	r1, [pc, #52]	; (800ff9c <ipfrag_free_pbuf_custom+0x64>)
 800ff68:	480b      	ldr	r0, [pc, #44]	; (800ff98 <ipfrag_free_pbuf_custom+0x60>)
 800ff6a:	f000 fa99 	bl	80104a0 <iprintf>
  if (pcr->original != NULL) {
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	695b      	ldr	r3, [r3, #20]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d004      	beq.n	800ff80 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	695b      	ldr	r3, [r3, #20]
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7f7 f8ca 	bl	8007114 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ff80:	68f8      	ldr	r0, [r7, #12]
 800ff82:	f7ff ffbd 	bl	800ff00 <ip_frag_free_pbuf_custom_ref>
}
 800ff86:	bf00      	nop
 800ff88:	3710      	adds	r7, #16
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	bf00      	nop
 800ff90:	08014058 	.word	0x08014058
 800ff94:	0801421c 	.word	0x0801421c
 800ff98:	080140a0 	.word	0x080140a0
 800ff9c:	08014228 	.word	0x08014228

0800ffa0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b094      	sub	sp, #80	; 0x50
 800ffa4:	af02      	add	r7, sp, #8
 800ffa6:	60f8      	str	r0, [r7, #12]
 800ffa8:	60b9      	str	r1, [r7, #8]
 800ffaa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ffac:	2300      	movs	r3, #0
 800ffae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ffb6:	3b14      	subs	r3, #20
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	da00      	bge.n	800ffbe <ip4_frag+0x1e>
 800ffbc:	3307      	adds	r3, #7
 800ffbe:	10db      	asrs	r3, r3, #3
 800ffc0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ffc2:	2314      	movs	r3, #20
 800ffc4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	685b      	ldr	r3, [r3, #4]
 800ffca:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ffcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffce:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ffd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd2:	781b      	ldrb	r3, [r3, #0]
 800ffd4:	f003 030f 	and.w	r3, r3, #15
 800ffd8:	b2db      	uxtb	r3, r3
 800ffda:	009b      	lsls	r3, r3, #2
 800ffdc:	b2db      	uxtb	r3, r3
 800ffde:	2b14      	cmp	r3, #20
 800ffe0:	d002      	beq.n	800ffe8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ffe2:	f06f 0305 	mvn.w	r3, #5
 800ffe6:	e110      	b.n	801020a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	895b      	ldrh	r3, [r3, #10]
 800ffec:	2b13      	cmp	r3, #19
 800ffee:	d809      	bhi.n	8010004 <ip4_frag+0x64>
 800fff0:	4b88      	ldr	r3, [pc, #544]	; (8010214 <ip4_frag+0x274>)
 800fff2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800fff6:	4988      	ldr	r1, [pc, #544]	; (8010218 <ip4_frag+0x278>)
 800fff8:	4888      	ldr	r0, [pc, #544]	; (801021c <ip4_frag+0x27c>)
 800fffa:	f000 fa51 	bl	80104a0 <iprintf>
 800fffe:	f06f 0305 	mvn.w	r3, #5
 8010002:	e102      	b.n	801020a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010006:	88db      	ldrh	r3, [r3, #6]
 8010008:	b29b      	uxth	r3, r3
 801000a:	4618      	mov	r0, r3
 801000c:	f7f5 fc6c 	bl	80058e8 <lwip_htons>
 8010010:	4603      	mov	r3, r0
 8010012:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010014:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010016:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801001a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801001e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010024:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	891b      	ldrh	r3, [r3, #8]
 801002a:	3b14      	subs	r3, #20
 801002c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010030:	e0e1      	b.n	80101f6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010032:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010034:	00db      	lsls	r3, r3, #3
 8010036:	b29b      	uxth	r3, r3
 8010038:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801003c:	4293      	cmp	r3, r2
 801003e:	bf28      	it	cs
 8010040:	4613      	movcs	r3, r2
 8010042:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010044:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010048:	2114      	movs	r1, #20
 801004a:	200e      	movs	r0, #14
 801004c:	f7f6 fd7e 	bl	8006b4c <pbuf_alloc>
 8010050:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8010052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010054:	2b00      	cmp	r3, #0
 8010056:	f000 80d5 	beq.w	8010204 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801005a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801005c:	895b      	ldrh	r3, [r3, #10]
 801005e:	2b13      	cmp	r3, #19
 8010060:	d806      	bhi.n	8010070 <ip4_frag+0xd0>
 8010062:	4b6c      	ldr	r3, [pc, #432]	; (8010214 <ip4_frag+0x274>)
 8010064:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010068:	496d      	ldr	r1, [pc, #436]	; (8010220 <ip4_frag+0x280>)
 801006a:	486c      	ldr	r0, [pc, #432]	; (801021c <ip4_frag+0x27c>)
 801006c:	f000 fa18 	bl	80104a0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010072:	685b      	ldr	r3, [r3, #4]
 8010074:	2214      	movs	r2, #20
 8010076:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010078:	4618      	mov	r0, r3
 801007a:	f000 f9e1 	bl	8010440 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801007e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010080:	685b      	ldr	r3, [r3, #4]
 8010082:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010084:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010086:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801008a:	e064      	b.n	8010156 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	895a      	ldrh	r2, [r3, #10]
 8010090:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010092:	1ad3      	subs	r3, r2, r3
 8010094:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	895b      	ldrh	r3, [r3, #10]
 801009a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801009c:	429a      	cmp	r2, r3
 801009e:	d906      	bls.n	80100ae <ip4_frag+0x10e>
 80100a0:	4b5c      	ldr	r3, [pc, #368]	; (8010214 <ip4_frag+0x274>)
 80100a2:	f240 322d 	movw	r2, #813	; 0x32d
 80100a6:	495f      	ldr	r1, [pc, #380]	; (8010224 <ip4_frag+0x284>)
 80100a8:	485c      	ldr	r0, [pc, #368]	; (801021c <ip4_frag+0x27c>)
 80100aa:	f000 f9f9 	bl	80104a0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80100ae:	8bfa      	ldrh	r2, [r7, #30]
 80100b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80100b4:	4293      	cmp	r3, r2
 80100b6:	bf28      	it	cs
 80100b8:	4613      	movcs	r3, r2
 80100ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80100be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d105      	bne.n	80100d2 <ip4_frag+0x132>
        poff = 0;
 80100c6:	2300      	movs	r3, #0
 80100c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	60fb      	str	r3, [r7, #12]
        continue;
 80100d0:	e041      	b.n	8010156 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80100d2:	f7ff ff0d 	bl	800fef0 <ip_frag_alloc_pbuf_custom_ref>
 80100d6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80100d8:	69bb      	ldr	r3, [r7, #24]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d103      	bne.n	80100e6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80100de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100e0:	f7f7 f818 	bl	8007114 <pbuf_free>
        goto memerr;
 80100e4:	e08f      	b.n	8010206 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80100e6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80100ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80100ee:	4413      	add	r3, r2
 80100f0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80100f4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80100f8:	9201      	str	r2, [sp, #4]
 80100fa:	9300      	str	r3, [sp, #0]
 80100fc:	4603      	mov	r3, r0
 80100fe:	2241      	movs	r2, #65	; 0x41
 8010100:	2000      	movs	r0, #0
 8010102:	f7f6 fe4d 	bl	8006da0 <pbuf_alloced_custom>
 8010106:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d106      	bne.n	801011c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801010e:	69b8      	ldr	r0, [r7, #24]
 8010110:	f7ff fef6 	bl	800ff00 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010114:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010116:	f7f6 fffd 	bl	8007114 <pbuf_free>
        goto memerr;
 801011a:	e074      	b.n	8010206 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801011c:	68f8      	ldr	r0, [r7, #12]
 801011e:	f7f7 f899 	bl	8007254 <pbuf_ref>
      pcr->original = p;
 8010122:	69bb      	ldr	r3, [r7, #24]
 8010124:	68fa      	ldr	r2, [r7, #12]
 8010126:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	4a3f      	ldr	r2, [pc, #252]	; (8010228 <ip4_frag+0x288>)
 801012c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801012e:	6979      	ldr	r1, [r7, #20]
 8010130:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010132:	f7f7 f8b1 	bl	8007298 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010136:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801013a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801013e:	1ad3      	subs	r3, r2, r3
 8010140:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010144:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010148:	2b00      	cmp	r3, #0
 801014a:	d004      	beq.n	8010156 <ip4_frag+0x1b6>
        poff = 0;
 801014c:	2300      	movs	r3, #0
 801014e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010156:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801015a:	2b00      	cmp	r3, #0
 801015c:	d196      	bne.n	801008c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801015e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010160:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010164:	4413      	add	r3, r2
 8010166:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801016c:	f1a3 0213 	sub.w	r2, r3, #19
 8010170:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010174:	429a      	cmp	r2, r3
 8010176:	bfcc      	ite	gt
 8010178:	2301      	movgt	r3, #1
 801017a:	2300      	movle	r3, #0
 801017c:	b2db      	uxtb	r3, r3
 801017e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010180:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010184:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010188:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801018a:	6a3b      	ldr	r3, [r7, #32]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d002      	beq.n	8010196 <ip4_frag+0x1f6>
 8010190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010192:	2b00      	cmp	r3, #0
 8010194:	d003      	beq.n	801019e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010196:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010198:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801019c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801019e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7f5 fba1 	bl	80058e8 <lwip_htons>
 80101a6:	4603      	mov	r3, r0
 80101a8:	461a      	mov	r2, r3
 80101aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ac:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80101ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80101b0:	3314      	adds	r3, #20
 80101b2:	b29b      	uxth	r3, r3
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7f5 fb97 	bl	80058e8 <lwip_htons>
 80101ba:	4603      	mov	r3, r0
 80101bc:	461a      	mov	r2, r3
 80101be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80101c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c4:	2200      	movs	r2, #0
 80101c6:	729a      	strb	r2, [r3, #10]
 80101c8:	2200      	movs	r2, #0
 80101ca:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	695b      	ldr	r3, [r3, #20]
 80101d0:	687a      	ldr	r2, [r7, #4]
 80101d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80101d4:	68b8      	ldr	r0, [r7, #8]
 80101d6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80101d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101da:	f7f6 ff9b 	bl	8007114 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80101de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80101e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80101e4:	1ad3      	subs	r3, r2, r3
 80101e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80101ea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80101ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80101f0:	4413      	add	r3, r2
 80101f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80101f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	f47f af19 	bne.w	8010032 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010200:	2300      	movs	r3, #0
 8010202:	e002      	b.n	801020a <ip4_frag+0x26a>
      goto memerr;
 8010204:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010206:	f04f 33ff 	mov.w	r3, #4294967295
}
 801020a:	4618      	mov	r0, r3
 801020c:	3748      	adds	r7, #72	; 0x48
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}
 8010212:	bf00      	nop
 8010214:	08014058 	.word	0x08014058
 8010218:	08014234 	.word	0x08014234
 801021c:	080140a0 	.word	0x080140a0
 8010220:	08014250 	.word	0x08014250
 8010224:	08014270 	.word	0x08014270
 8010228:	0800ff39 	.word	0x0800ff39

0801022c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b086      	sub	sp, #24
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010236:	230e      	movs	r3, #14
 8010238:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	895b      	ldrh	r3, [r3, #10]
 801023e:	2b0e      	cmp	r3, #14
 8010240:	d96e      	bls.n	8010320 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	7bdb      	ldrb	r3, [r3, #15]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d106      	bne.n	8010258 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010250:	3301      	adds	r3, #1
 8010252:	b2da      	uxtb	r2, r3
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	7b1a      	ldrb	r2, [r3, #12]
 8010262:	7b5b      	ldrb	r3, [r3, #13]
 8010264:	021b      	lsls	r3, r3, #8
 8010266:	4313      	orrs	r3, r2
 8010268:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801026a:	693b      	ldr	r3, [r7, #16]
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	f003 0301 	and.w	r3, r3, #1
 8010272:	2b00      	cmp	r3, #0
 8010274:	d023      	beq.n	80102be <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	2b01      	cmp	r3, #1
 801027c:	d10f      	bne.n	801029e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	785b      	ldrb	r3, [r3, #1]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d11b      	bne.n	80102be <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010286:	693b      	ldr	r3, [r7, #16]
 8010288:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801028a:	2b5e      	cmp	r3, #94	; 0x5e
 801028c:	d117      	bne.n	80102be <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	7b5b      	ldrb	r3, [r3, #13]
 8010292:	f043 0310 	orr.w	r3, r3, #16
 8010296:	b2da      	uxtb	r2, r3
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	735a      	strb	r2, [r3, #13]
 801029c:	e00f      	b.n	80102be <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801029e:	693b      	ldr	r3, [r7, #16]
 80102a0:	2206      	movs	r2, #6
 80102a2:	4928      	ldr	r1, [pc, #160]	; (8010344 <ethernet_input+0x118>)
 80102a4:	4618      	mov	r0, r3
 80102a6:	f000 f8bb 	bl	8010420 <memcmp>
 80102aa:	4603      	mov	r3, r0
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d106      	bne.n	80102be <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	7b5b      	ldrb	r3, [r3, #13]
 80102b4:	f043 0308 	orr.w	r3, r3, #8
 80102b8:	b2da      	uxtb	r2, r3
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80102be:	89fb      	ldrh	r3, [r7, #14]
 80102c0:	2b08      	cmp	r3, #8
 80102c2:	d003      	beq.n	80102cc <ethernet_input+0xa0>
 80102c4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80102c8:	d014      	beq.n	80102f4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80102ca:	e032      	b.n	8010332 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80102d2:	f003 0308 	and.w	r3, r3, #8
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d024      	beq.n	8010324 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80102da:	8afb      	ldrh	r3, [r7, #22]
 80102dc:	4619      	mov	r1, r3
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f7f6 fe92 	bl	8007008 <pbuf_remove_header>
 80102e4:	4603      	mov	r3, r0
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d11e      	bne.n	8010328 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80102ea:	6839      	ldr	r1, [r7, #0]
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f7fe fe91 	bl	800f014 <ip4_input>
      break;
 80102f2:	e013      	b.n	801031c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80102fa:	f003 0308 	and.w	r3, r3, #8
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d014      	beq.n	801032c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010302:	8afb      	ldrh	r3, [r7, #22]
 8010304:	4619      	mov	r1, r3
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f7f6 fe7e 	bl	8007008 <pbuf_remove_header>
 801030c:	4603      	mov	r3, r0
 801030e:	2b00      	cmp	r3, #0
 8010310:	d10e      	bne.n	8010330 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010312:	6839      	ldr	r1, [r7, #0]
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f7fe f80b 	bl	800e330 <etharp_input>
      break;
 801031a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801031c:	2300      	movs	r3, #0
 801031e:	e00c      	b.n	801033a <ethernet_input+0x10e>
    goto free_and_return;
 8010320:	bf00      	nop
 8010322:	e006      	b.n	8010332 <ethernet_input+0x106>
        goto free_and_return;
 8010324:	bf00      	nop
 8010326:	e004      	b.n	8010332 <ethernet_input+0x106>
        goto free_and_return;
 8010328:	bf00      	nop
 801032a:	e002      	b.n	8010332 <ethernet_input+0x106>
        goto free_and_return;
 801032c:	bf00      	nop
 801032e:	e000      	b.n	8010332 <ethernet_input+0x106>
        goto free_and_return;
 8010330:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	f7f6 feee 	bl	8007114 <pbuf_free>
  return ERR_OK;
 8010338:	2300      	movs	r3, #0
}
 801033a:	4618      	mov	r0, r3
 801033c:	3718      	adds	r7, #24
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}
 8010342:	bf00      	nop
 8010344:	08014404 	.word	0x08014404

08010348 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010348:	b580      	push	{r7, lr}
 801034a:	b086      	sub	sp, #24
 801034c:	af00      	add	r7, sp, #0
 801034e:	60f8      	str	r0, [r7, #12]
 8010350:	60b9      	str	r1, [r7, #8]
 8010352:	607a      	str	r2, [r7, #4]
 8010354:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010356:	8c3b      	ldrh	r3, [r7, #32]
 8010358:	4618      	mov	r0, r3
 801035a:	f7f5 fac5 	bl	80058e8 <lwip_htons>
 801035e:	4603      	mov	r3, r0
 8010360:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010362:	210e      	movs	r1, #14
 8010364:	68b8      	ldr	r0, [r7, #8]
 8010366:	f7f6 fe3f 	bl	8006fe8 <pbuf_add_header>
 801036a:	4603      	mov	r3, r0
 801036c:	2b00      	cmp	r3, #0
 801036e:	d125      	bne.n	80103bc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	685b      	ldr	r3, [r3, #4]
 8010374:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	8afa      	ldrh	r2, [r7, #22]
 801037a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	2206      	movs	r2, #6
 8010380:	6839      	ldr	r1, [r7, #0]
 8010382:	4618      	mov	r0, r3
 8010384:	f000 f85c 	bl	8010440 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	3306      	adds	r3, #6
 801038c:	2206      	movs	r2, #6
 801038e:	6879      	ldr	r1, [r7, #4]
 8010390:	4618      	mov	r0, r3
 8010392:	f000 f855 	bl	8010440 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801039c:	2b06      	cmp	r3, #6
 801039e:	d006      	beq.n	80103ae <ethernet_output+0x66>
 80103a0:	4b0a      	ldr	r3, [pc, #40]	; (80103cc <ethernet_output+0x84>)
 80103a2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80103a6:	490a      	ldr	r1, [pc, #40]	; (80103d0 <ethernet_output+0x88>)
 80103a8:	480a      	ldr	r0, [pc, #40]	; (80103d4 <ethernet_output+0x8c>)
 80103aa:	f000 f879 	bl	80104a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	699b      	ldr	r3, [r3, #24]
 80103b2:	68b9      	ldr	r1, [r7, #8]
 80103b4:	68f8      	ldr	r0, [r7, #12]
 80103b6:	4798      	blx	r3
 80103b8:	4603      	mov	r3, r0
 80103ba:	e002      	b.n	80103c2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80103bc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80103be:	f06f 0301 	mvn.w	r3, #1
}
 80103c2:	4618      	mov	r0, r3
 80103c4:	3718      	adds	r7, #24
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}
 80103ca:	bf00      	nop
 80103cc:	08014280 	.word	0x08014280
 80103d0:	080142b8 	.word	0x080142b8
 80103d4:	080142ec 	.word	0x080142ec

080103d8 <__libc_init_array>:
 80103d8:	b570      	push	{r4, r5, r6, lr}
 80103da:	4d0d      	ldr	r5, [pc, #52]	; (8010410 <__libc_init_array+0x38>)
 80103dc:	4c0d      	ldr	r4, [pc, #52]	; (8010414 <__libc_init_array+0x3c>)
 80103de:	1b64      	subs	r4, r4, r5
 80103e0:	10a4      	asrs	r4, r4, #2
 80103e2:	2600      	movs	r6, #0
 80103e4:	42a6      	cmp	r6, r4
 80103e6:	d109      	bne.n	80103fc <__libc_init_array+0x24>
 80103e8:	4d0b      	ldr	r5, [pc, #44]	; (8010418 <__libc_init_array+0x40>)
 80103ea:	4c0c      	ldr	r4, [pc, #48]	; (801041c <__libc_init_array+0x44>)
 80103ec:	f001 fa5c 	bl	80118a8 <_init>
 80103f0:	1b64      	subs	r4, r4, r5
 80103f2:	10a4      	asrs	r4, r4, #2
 80103f4:	2600      	movs	r6, #0
 80103f6:	42a6      	cmp	r6, r4
 80103f8:	d105      	bne.n	8010406 <__libc_init_array+0x2e>
 80103fa:	bd70      	pop	{r4, r5, r6, pc}
 80103fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8010400:	4798      	blx	r3
 8010402:	3601      	adds	r6, #1
 8010404:	e7ee      	b.n	80103e4 <__libc_init_array+0xc>
 8010406:	f855 3b04 	ldr.w	r3, [r5], #4
 801040a:	4798      	blx	r3
 801040c:	3601      	adds	r6, #1
 801040e:	e7f2      	b.n	80103f6 <__libc_init_array+0x1e>
 8010410:	0801455c 	.word	0x0801455c
 8010414:	0801455c 	.word	0x0801455c
 8010418:	0801455c 	.word	0x0801455c
 801041c:	08014560 	.word	0x08014560

08010420 <memcmp>:
 8010420:	b510      	push	{r4, lr}
 8010422:	3901      	subs	r1, #1
 8010424:	4402      	add	r2, r0
 8010426:	4290      	cmp	r0, r2
 8010428:	d101      	bne.n	801042e <memcmp+0xe>
 801042a:	2000      	movs	r0, #0
 801042c:	e005      	b.n	801043a <memcmp+0x1a>
 801042e:	7803      	ldrb	r3, [r0, #0]
 8010430:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010434:	42a3      	cmp	r3, r4
 8010436:	d001      	beq.n	801043c <memcmp+0x1c>
 8010438:	1b18      	subs	r0, r3, r4
 801043a:	bd10      	pop	{r4, pc}
 801043c:	3001      	adds	r0, #1
 801043e:	e7f2      	b.n	8010426 <memcmp+0x6>

08010440 <memcpy>:
 8010440:	440a      	add	r2, r1
 8010442:	4291      	cmp	r1, r2
 8010444:	f100 33ff 	add.w	r3, r0, #4294967295
 8010448:	d100      	bne.n	801044c <memcpy+0xc>
 801044a:	4770      	bx	lr
 801044c:	b510      	push	{r4, lr}
 801044e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010452:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010456:	4291      	cmp	r1, r2
 8010458:	d1f9      	bne.n	801044e <memcpy+0xe>
 801045a:	bd10      	pop	{r4, pc}

0801045c <memmove>:
 801045c:	4288      	cmp	r0, r1
 801045e:	b510      	push	{r4, lr}
 8010460:	eb01 0402 	add.w	r4, r1, r2
 8010464:	d902      	bls.n	801046c <memmove+0x10>
 8010466:	4284      	cmp	r4, r0
 8010468:	4623      	mov	r3, r4
 801046a:	d807      	bhi.n	801047c <memmove+0x20>
 801046c:	1e43      	subs	r3, r0, #1
 801046e:	42a1      	cmp	r1, r4
 8010470:	d008      	beq.n	8010484 <memmove+0x28>
 8010472:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010476:	f803 2f01 	strb.w	r2, [r3, #1]!
 801047a:	e7f8      	b.n	801046e <memmove+0x12>
 801047c:	4402      	add	r2, r0
 801047e:	4601      	mov	r1, r0
 8010480:	428a      	cmp	r2, r1
 8010482:	d100      	bne.n	8010486 <memmove+0x2a>
 8010484:	bd10      	pop	{r4, pc}
 8010486:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801048a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801048e:	e7f7      	b.n	8010480 <memmove+0x24>

08010490 <memset>:
 8010490:	4402      	add	r2, r0
 8010492:	4603      	mov	r3, r0
 8010494:	4293      	cmp	r3, r2
 8010496:	d100      	bne.n	801049a <memset+0xa>
 8010498:	4770      	bx	lr
 801049a:	f803 1b01 	strb.w	r1, [r3], #1
 801049e:	e7f9      	b.n	8010494 <memset+0x4>

080104a0 <iprintf>:
 80104a0:	b40f      	push	{r0, r1, r2, r3}
 80104a2:	4b0a      	ldr	r3, [pc, #40]	; (80104cc <iprintf+0x2c>)
 80104a4:	b513      	push	{r0, r1, r4, lr}
 80104a6:	681c      	ldr	r4, [r3, #0]
 80104a8:	b124      	cbz	r4, 80104b4 <iprintf+0x14>
 80104aa:	69a3      	ldr	r3, [r4, #24]
 80104ac:	b913      	cbnz	r3, 80104b4 <iprintf+0x14>
 80104ae:	4620      	mov	r0, r4
 80104b0:	f000 f8e2 	bl	8010678 <__sinit>
 80104b4:	ab05      	add	r3, sp, #20
 80104b6:	9a04      	ldr	r2, [sp, #16]
 80104b8:	68a1      	ldr	r1, [r4, #8]
 80104ba:	9301      	str	r3, [sp, #4]
 80104bc:	4620      	mov	r0, r4
 80104be:	f000 fbfb 	bl	8010cb8 <_vfiprintf_r>
 80104c2:	b002      	add	sp, #8
 80104c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104c8:	b004      	add	sp, #16
 80104ca:	4770      	bx	lr
 80104cc:	24000030 	.word	0x24000030

080104d0 <rand>:
 80104d0:	4b16      	ldr	r3, [pc, #88]	; (801052c <rand+0x5c>)
 80104d2:	b510      	push	{r4, lr}
 80104d4:	681c      	ldr	r4, [r3, #0]
 80104d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80104d8:	b9b3      	cbnz	r3, 8010508 <rand+0x38>
 80104da:	2018      	movs	r0, #24
 80104dc:	f000 f97e 	bl	80107dc <malloc>
 80104e0:	63a0      	str	r0, [r4, #56]	; 0x38
 80104e2:	b928      	cbnz	r0, 80104f0 <rand+0x20>
 80104e4:	4602      	mov	r2, r0
 80104e6:	4b12      	ldr	r3, [pc, #72]	; (8010530 <rand+0x60>)
 80104e8:	4812      	ldr	r0, [pc, #72]	; (8010534 <rand+0x64>)
 80104ea:	214e      	movs	r1, #78	; 0x4e
 80104ec:	f000 f84e 	bl	801058c <__assert_func>
 80104f0:	4a11      	ldr	r2, [pc, #68]	; (8010538 <rand+0x68>)
 80104f2:	4b12      	ldr	r3, [pc, #72]	; (801053c <rand+0x6c>)
 80104f4:	e9c0 2300 	strd	r2, r3, [r0]
 80104f8:	4b11      	ldr	r3, [pc, #68]	; (8010540 <rand+0x70>)
 80104fa:	6083      	str	r3, [r0, #8]
 80104fc:	230b      	movs	r3, #11
 80104fe:	8183      	strh	r3, [r0, #12]
 8010500:	2201      	movs	r2, #1
 8010502:	2300      	movs	r3, #0
 8010504:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010508:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801050a:	4a0e      	ldr	r2, [pc, #56]	; (8010544 <rand+0x74>)
 801050c:	6920      	ldr	r0, [r4, #16]
 801050e:	6963      	ldr	r3, [r4, #20]
 8010510:	490d      	ldr	r1, [pc, #52]	; (8010548 <rand+0x78>)
 8010512:	4342      	muls	r2, r0
 8010514:	fb01 2203 	mla	r2, r1, r3, r2
 8010518:	fba0 0101 	umull	r0, r1, r0, r1
 801051c:	1c43      	adds	r3, r0, #1
 801051e:	eb42 0001 	adc.w	r0, r2, r1
 8010522:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8010526:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801052a:	bd10      	pop	{r4, pc}
 801052c:	24000030 	.word	0x24000030
 8010530:	08014418 	.word	0x08014418
 8010534:	0801442f 	.word	0x0801442f
 8010538:	abcd330e 	.word	0xabcd330e
 801053c:	e66d1234 	.word	0xe66d1234
 8010540:	0005deec 	.word	0x0005deec
 8010544:	5851f42d 	.word	0x5851f42d
 8010548:	4c957f2d 	.word	0x4c957f2d

0801054c <siprintf>:
 801054c:	b40e      	push	{r1, r2, r3}
 801054e:	b500      	push	{lr}
 8010550:	b09c      	sub	sp, #112	; 0x70
 8010552:	ab1d      	add	r3, sp, #116	; 0x74
 8010554:	9002      	str	r0, [sp, #8]
 8010556:	9006      	str	r0, [sp, #24]
 8010558:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801055c:	4809      	ldr	r0, [pc, #36]	; (8010584 <siprintf+0x38>)
 801055e:	9107      	str	r1, [sp, #28]
 8010560:	9104      	str	r1, [sp, #16]
 8010562:	4909      	ldr	r1, [pc, #36]	; (8010588 <siprintf+0x3c>)
 8010564:	f853 2b04 	ldr.w	r2, [r3], #4
 8010568:	9105      	str	r1, [sp, #20]
 801056a:	6800      	ldr	r0, [r0, #0]
 801056c:	9301      	str	r3, [sp, #4]
 801056e:	a902      	add	r1, sp, #8
 8010570:	f000 fa78 	bl	8010a64 <_svfiprintf_r>
 8010574:	9b02      	ldr	r3, [sp, #8]
 8010576:	2200      	movs	r2, #0
 8010578:	701a      	strb	r2, [r3, #0]
 801057a:	b01c      	add	sp, #112	; 0x70
 801057c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010580:	b003      	add	sp, #12
 8010582:	4770      	bx	lr
 8010584:	24000030 	.word	0x24000030
 8010588:	ffff0208 	.word	0xffff0208

0801058c <__assert_func>:
 801058c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801058e:	4614      	mov	r4, r2
 8010590:	461a      	mov	r2, r3
 8010592:	4b09      	ldr	r3, [pc, #36]	; (80105b8 <__assert_func+0x2c>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	4605      	mov	r5, r0
 8010598:	68d8      	ldr	r0, [r3, #12]
 801059a:	b14c      	cbz	r4, 80105b0 <__assert_func+0x24>
 801059c:	4b07      	ldr	r3, [pc, #28]	; (80105bc <__assert_func+0x30>)
 801059e:	9100      	str	r1, [sp, #0]
 80105a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80105a4:	4906      	ldr	r1, [pc, #24]	; (80105c0 <__assert_func+0x34>)
 80105a6:	462b      	mov	r3, r5
 80105a8:	f000 f8e4 	bl	8010774 <fiprintf>
 80105ac:	f000 ff6e 	bl	801148c <abort>
 80105b0:	4b04      	ldr	r3, [pc, #16]	; (80105c4 <__assert_func+0x38>)
 80105b2:	461c      	mov	r4, r3
 80105b4:	e7f3      	b.n	801059e <__assert_func+0x12>
 80105b6:	bf00      	nop
 80105b8:	24000030 	.word	0x24000030
 80105bc:	0801448a 	.word	0x0801448a
 80105c0:	08014497 	.word	0x08014497
 80105c4:	080144c5 	.word	0x080144c5

080105c8 <std>:
 80105c8:	2300      	movs	r3, #0
 80105ca:	b510      	push	{r4, lr}
 80105cc:	4604      	mov	r4, r0
 80105ce:	e9c0 3300 	strd	r3, r3, [r0]
 80105d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80105d6:	6083      	str	r3, [r0, #8]
 80105d8:	8181      	strh	r1, [r0, #12]
 80105da:	6643      	str	r3, [r0, #100]	; 0x64
 80105dc:	81c2      	strh	r2, [r0, #14]
 80105de:	6183      	str	r3, [r0, #24]
 80105e0:	4619      	mov	r1, r3
 80105e2:	2208      	movs	r2, #8
 80105e4:	305c      	adds	r0, #92	; 0x5c
 80105e6:	f7ff ff53 	bl	8010490 <memset>
 80105ea:	4b05      	ldr	r3, [pc, #20]	; (8010600 <std+0x38>)
 80105ec:	6263      	str	r3, [r4, #36]	; 0x24
 80105ee:	4b05      	ldr	r3, [pc, #20]	; (8010604 <std+0x3c>)
 80105f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80105f2:	4b05      	ldr	r3, [pc, #20]	; (8010608 <std+0x40>)
 80105f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80105f6:	4b05      	ldr	r3, [pc, #20]	; (801060c <std+0x44>)
 80105f8:	6224      	str	r4, [r4, #32]
 80105fa:	6323      	str	r3, [r4, #48]	; 0x30
 80105fc:	bd10      	pop	{r4, pc}
 80105fe:	bf00      	nop
 8010600:	08011261 	.word	0x08011261
 8010604:	08011283 	.word	0x08011283
 8010608:	080112bb 	.word	0x080112bb
 801060c:	080112df 	.word	0x080112df

08010610 <_cleanup_r>:
 8010610:	4901      	ldr	r1, [pc, #4]	; (8010618 <_cleanup_r+0x8>)
 8010612:	f000 b8c1 	b.w	8010798 <_fwalk_reent>
 8010616:	bf00      	nop
 8010618:	080115c9 	.word	0x080115c9

0801061c <__sfmoreglue>:
 801061c:	b570      	push	{r4, r5, r6, lr}
 801061e:	2268      	movs	r2, #104	; 0x68
 8010620:	1e4d      	subs	r5, r1, #1
 8010622:	4355      	muls	r5, r2
 8010624:	460e      	mov	r6, r1
 8010626:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801062a:	f000 f94b 	bl	80108c4 <_malloc_r>
 801062e:	4604      	mov	r4, r0
 8010630:	b140      	cbz	r0, 8010644 <__sfmoreglue+0x28>
 8010632:	2100      	movs	r1, #0
 8010634:	e9c0 1600 	strd	r1, r6, [r0]
 8010638:	300c      	adds	r0, #12
 801063a:	60a0      	str	r0, [r4, #8]
 801063c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010640:	f7ff ff26 	bl	8010490 <memset>
 8010644:	4620      	mov	r0, r4
 8010646:	bd70      	pop	{r4, r5, r6, pc}

08010648 <__sfp_lock_acquire>:
 8010648:	4801      	ldr	r0, [pc, #4]	; (8010650 <__sfp_lock_acquire+0x8>)
 801064a:	f000 b8c5 	b.w	80107d8 <__retarget_lock_acquire_recursive>
 801064e:	bf00      	nop
 8010650:	240032f9 	.word	0x240032f9

08010654 <__sfp_lock_release>:
 8010654:	4801      	ldr	r0, [pc, #4]	; (801065c <__sfp_lock_release+0x8>)
 8010656:	f000 b8c0 	b.w	80107da <__retarget_lock_release_recursive>
 801065a:	bf00      	nop
 801065c:	240032f9 	.word	0x240032f9

08010660 <__sinit_lock_acquire>:
 8010660:	4801      	ldr	r0, [pc, #4]	; (8010668 <__sinit_lock_acquire+0x8>)
 8010662:	f000 b8b9 	b.w	80107d8 <__retarget_lock_acquire_recursive>
 8010666:	bf00      	nop
 8010668:	240032fa 	.word	0x240032fa

0801066c <__sinit_lock_release>:
 801066c:	4801      	ldr	r0, [pc, #4]	; (8010674 <__sinit_lock_release+0x8>)
 801066e:	f000 b8b4 	b.w	80107da <__retarget_lock_release_recursive>
 8010672:	bf00      	nop
 8010674:	240032fa 	.word	0x240032fa

08010678 <__sinit>:
 8010678:	b510      	push	{r4, lr}
 801067a:	4604      	mov	r4, r0
 801067c:	f7ff fff0 	bl	8010660 <__sinit_lock_acquire>
 8010680:	69a3      	ldr	r3, [r4, #24]
 8010682:	b11b      	cbz	r3, 801068c <__sinit+0x14>
 8010684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010688:	f7ff bff0 	b.w	801066c <__sinit_lock_release>
 801068c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010690:	6523      	str	r3, [r4, #80]	; 0x50
 8010692:	4b13      	ldr	r3, [pc, #76]	; (80106e0 <__sinit+0x68>)
 8010694:	4a13      	ldr	r2, [pc, #76]	; (80106e4 <__sinit+0x6c>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	62a2      	str	r2, [r4, #40]	; 0x28
 801069a:	42a3      	cmp	r3, r4
 801069c:	bf04      	itt	eq
 801069e:	2301      	moveq	r3, #1
 80106a0:	61a3      	streq	r3, [r4, #24]
 80106a2:	4620      	mov	r0, r4
 80106a4:	f000 f820 	bl	80106e8 <__sfp>
 80106a8:	6060      	str	r0, [r4, #4]
 80106aa:	4620      	mov	r0, r4
 80106ac:	f000 f81c 	bl	80106e8 <__sfp>
 80106b0:	60a0      	str	r0, [r4, #8]
 80106b2:	4620      	mov	r0, r4
 80106b4:	f000 f818 	bl	80106e8 <__sfp>
 80106b8:	2200      	movs	r2, #0
 80106ba:	60e0      	str	r0, [r4, #12]
 80106bc:	2104      	movs	r1, #4
 80106be:	6860      	ldr	r0, [r4, #4]
 80106c0:	f7ff ff82 	bl	80105c8 <std>
 80106c4:	68a0      	ldr	r0, [r4, #8]
 80106c6:	2201      	movs	r2, #1
 80106c8:	2109      	movs	r1, #9
 80106ca:	f7ff ff7d 	bl	80105c8 <std>
 80106ce:	68e0      	ldr	r0, [r4, #12]
 80106d0:	2202      	movs	r2, #2
 80106d2:	2112      	movs	r1, #18
 80106d4:	f7ff ff78 	bl	80105c8 <std>
 80106d8:	2301      	movs	r3, #1
 80106da:	61a3      	str	r3, [r4, #24]
 80106dc:	e7d2      	b.n	8010684 <__sinit+0xc>
 80106de:	bf00      	nop
 80106e0:	08014414 	.word	0x08014414
 80106e4:	08010611 	.word	0x08010611

080106e8 <__sfp>:
 80106e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ea:	4607      	mov	r7, r0
 80106ec:	f7ff ffac 	bl	8010648 <__sfp_lock_acquire>
 80106f0:	4b1e      	ldr	r3, [pc, #120]	; (801076c <__sfp+0x84>)
 80106f2:	681e      	ldr	r6, [r3, #0]
 80106f4:	69b3      	ldr	r3, [r6, #24]
 80106f6:	b913      	cbnz	r3, 80106fe <__sfp+0x16>
 80106f8:	4630      	mov	r0, r6
 80106fa:	f7ff ffbd 	bl	8010678 <__sinit>
 80106fe:	3648      	adds	r6, #72	; 0x48
 8010700:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010704:	3b01      	subs	r3, #1
 8010706:	d503      	bpl.n	8010710 <__sfp+0x28>
 8010708:	6833      	ldr	r3, [r6, #0]
 801070a:	b30b      	cbz	r3, 8010750 <__sfp+0x68>
 801070c:	6836      	ldr	r6, [r6, #0]
 801070e:	e7f7      	b.n	8010700 <__sfp+0x18>
 8010710:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010714:	b9d5      	cbnz	r5, 801074c <__sfp+0x64>
 8010716:	4b16      	ldr	r3, [pc, #88]	; (8010770 <__sfp+0x88>)
 8010718:	60e3      	str	r3, [r4, #12]
 801071a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801071e:	6665      	str	r5, [r4, #100]	; 0x64
 8010720:	f000 f859 	bl	80107d6 <__retarget_lock_init_recursive>
 8010724:	f7ff ff96 	bl	8010654 <__sfp_lock_release>
 8010728:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801072c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010730:	6025      	str	r5, [r4, #0]
 8010732:	61a5      	str	r5, [r4, #24]
 8010734:	2208      	movs	r2, #8
 8010736:	4629      	mov	r1, r5
 8010738:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801073c:	f7ff fea8 	bl	8010490 <memset>
 8010740:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010744:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010748:	4620      	mov	r0, r4
 801074a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801074c:	3468      	adds	r4, #104	; 0x68
 801074e:	e7d9      	b.n	8010704 <__sfp+0x1c>
 8010750:	2104      	movs	r1, #4
 8010752:	4638      	mov	r0, r7
 8010754:	f7ff ff62 	bl	801061c <__sfmoreglue>
 8010758:	4604      	mov	r4, r0
 801075a:	6030      	str	r0, [r6, #0]
 801075c:	2800      	cmp	r0, #0
 801075e:	d1d5      	bne.n	801070c <__sfp+0x24>
 8010760:	f7ff ff78 	bl	8010654 <__sfp_lock_release>
 8010764:	230c      	movs	r3, #12
 8010766:	603b      	str	r3, [r7, #0]
 8010768:	e7ee      	b.n	8010748 <__sfp+0x60>
 801076a:	bf00      	nop
 801076c:	08014414 	.word	0x08014414
 8010770:	ffff0001 	.word	0xffff0001

08010774 <fiprintf>:
 8010774:	b40e      	push	{r1, r2, r3}
 8010776:	b503      	push	{r0, r1, lr}
 8010778:	4601      	mov	r1, r0
 801077a:	ab03      	add	r3, sp, #12
 801077c:	4805      	ldr	r0, [pc, #20]	; (8010794 <fiprintf+0x20>)
 801077e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010782:	6800      	ldr	r0, [r0, #0]
 8010784:	9301      	str	r3, [sp, #4]
 8010786:	f000 fa97 	bl	8010cb8 <_vfiprintf_r>
 801078a:	b002      	add	sp, #8
 801078c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010790:	b003      	add	sp, #12
 8010792:	4770      	bx	lr
 8010794:	24000030 	.word	0x24000030

08010798 <_fwalk_reent>:
 8010798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801079c:	4606      	mov	r6, r0
 801079e:	4688      	mov	r8, r1
 80107a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80107a4:	2700      	movs	r7, #0
 80107a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80107aa:	f1b9 0901 	subs.w	r9, r9, #1
 80107ae:	d505      	bpl.n	80107bc <_fwalk_reent+0x24>
 80107b0:	6824      	ldr	r4, [r4, #0]
 80107b2:	2c00      	cmp	r4, #0
 80107b4:	d1f7      	bne.n	80107a6 <_fwalk_reent+0xe>
 80107b6:	4638      	mov	r0, r7
 80107b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107bc:	89ab      	ldrh	r3, [r5, #12]
 80107be:	2b01      	cmp	r3, #1
 80107c0:	d907      	bls.n	80107d2 <_fwalk_reent+0x3a>
 80107c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80107c6:	3301      	adds	r3, #1
 80107c8:	d003      	beq.n	80107d2 <_fwalk_reent+0x3a>
 80107ca:	4629      	mov	r1, r5
 80107cc:	4630      	mov	r0, r6
 80107ce:	47c0      	blx	r8
 80107d0:	4307      	orrs	r7, r0
 80107d2:	3568      	adds	r5, #104	; 0x68
 80107d4:	e7e9      	b.n	80107aa <_fwalk_reent+0x12>

080107d6 <__retarget_lock_init_recursive>:
 80107d6:	4770      	bx	lr

080107d8 <__retarget_lock_acquire_recursive>:
 80107d8:	4770      	bx	lr

080107da <__retarget_lock_release_recursive>:
 80107da:	4770      	bx	lr

080107dc <malloc>:
 80107dc:	4b02      	ldr	r3, [pc, #8]	; (80107e8 <malloc+0xc>)
 80107de:	4601      	mov	r1, r0
 80107e0:	6818      	ldr	r0, [r3, #0]
 80107e2:	f000 b86f 	b.w	80108c4 <_malloc_r>
 80107e6:	bf00      	nop
 80107e8:	24000030 	.word	0x24000030

080107ec <_free_r>:
 80107ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80107ee:	2900      	cmp	r1, #0
 80107f0:	d044      	beq.n	801087c <_free_r+0x90>
 80107f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107f6:	9001      	str	r0, [sp, #4]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	f1a1 0404 	sub.w	r4, r1, #4
 80107fe:	bfb8      	it	lt
 8010800:	18e4      	addlt	r4, r4, r3
 8010802:	f000 ff95 	bl	8011730 <__malloc_lock>
 8010806:	4a1e      	ldr	r2, [pc, #120]	; (8010880 <_free_r+0x94>)
 8010808:	9801      	ldr	r0, [sp, #4]
 801080a:	6813      	ldr	r3, [r2, #0]
 801080c:	b933      	cbnz	r3, 801081c <_free_r+0x30>
 801080e:	6063      	str	r3, [r4, #4]
 8010810:	6014      	str	r4, [r2, #0]
 8010812:	b003      	add	sp, #12
 8010814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010818:	f000 bf90 	b.w	801173c <__malloc_unlock>
 801081c:	42a3      	cmp	r3, r4
 801081e:	d908      	bls.n	8010832 <_free_r+0x46>
 8010820:	6825      	ldr	r5, [r4, #0]
 8010822:	1961      	adds	r1, r4, r5
 8010824:	428b      	cmp	r3, r1
 8010826:	bf01      	itttt	eq
 8010828:	6819      	ldreq	r1, [r3, #0]
 801082a:	685b      	ldreq	r3, [r3, #4]
 801082c:	1949      	addeq	r1, r1, r5
 801082e:	6021      	streq	r1, [r4, #0]
 8010830:	e7ed      	b.n	801080e <_free_r+0x22>
 8010832:	461a      	mov	r2, r3
 8010834:	685b      	ldr	r3, [r3, #4]
 8010836:	b10b      	cbz	r3, 801083c <_free_r+0x50>
 8010838:	42a3      	cmp	r3, r4
 801083a:	d9fa      	bls.n	8010832 <_free_r+0x46>
 801083c:	6811      	ldr	r1, [r2, #0]
 801083e:	1855      	adds	r5, r2, r1
 8010840:	42a5      	cmp	r5, r4
 8010842:	d10b      	bne.n	801085c <_free_r+0x70>
 8010844:	6824      	ldr	r4, [r4, #0]
 8010846:	4421      	add	r1, r4
 8010848:	1854      	adds	r4, r2, r1
 801084a:	42a3      	cmp	r3, r4
 801084c:	6011      	str	r1, [r2, #0]
 801084e:	d1e0      	bne.n	8010812 <_free_r+0x26>
 8010850:	681c      	ldr	r4, [r3, #0]
 8010852:	685b      	ldr	r3, [r3, #4]
 8010854:	6053      	str	r3, [r2, #4]
 8010856:	4421      	add	r1, r4
 8010858:	6011      	str	r1, [r2, #0]
 801085a:	e7da      	b.n	8010812 <_free_r+0x26>
 801085c:	d902      	bls.n	8010864 <_free_r+0x78>
 801085e:	230c      	movs	r3, #12
 8010860:	6003      	str	r3, [r0, #0]
 8010862:	e7d6      	b.n	8010812 <_free_r+0x26>
 8010864:	6825      	ldr	r5, [r4, #0]
 8010866:	1961      	adds	r1, r4, r5
 8010868:	428b      	cmp	r3, r1
 801086a:	bf04      	itt	eq
 801086c:	6819      	ldreq	r1, [r3, #0]
 801086e:	685b      	ldreq	r3, [r3, #4]
 8010870:	6063      	str	r3, [r4, #4]
 8010872:	bf04      	itt	eq
 8010874:	1949      	addeq	r1, r1, r5
 8010876:	6021      	streq	r1, [r4, #0]
 8010878:	6054      	str	r4, [r2, #4]
 801087a:	e7ca      	b.n	8010812 <_free_r+0x26>
 801087c:	b003      	add	sp, #12
 801087e:	bd30      	pop	{r4, r5, pc}
 8010880:	240032fc 	.word	0x240032fc

08010884 <sbrk_aligned>:
 8010884:	b570      	push	{r4, r5, r6, lr}
 8010886:	4e0e      	ldr	r6, [pc, #56]	; (80108c0 <sbrk_aligned+0x3c>)
 8010888:	460c      	mov	r4, r1
 801088a:	6831      	ldr	r1, [r6, #0]
 801088c:	4605      	mov	r5, r0
 801088e:	b911      	cbnz	r1, 8010896 <sbrk_aligned+0x12>
 8010890:	f000 fcd6 	bl	8011240 <_sbrk_r>
 8010894:	6030      	str	r0, [r6, #0]
 8010896:	4621      	mov	r1, r4
 8010898:	4628      	mov	r0, r5
 801089a:	f000 fcd1 	bl	8011240 <_sbrk_r>
 801089e:	1c43      	adds	r3, r0, #1
 80108a0:	d00a      	beq.n	80108b8 <sbrk_aligned+0x34>
 80108a2:	1cc4      	adds	r4, r0, #3
 80108a4:	f024 0403 	bic.w	r4, r4, #3
 80108a8:	42a0      	cmp	r0, r4
 80108aa:	d007      	beq.n	80108bc <sbrk_aligned+0x38>
 80108ac:	1a21      	subs	r1, r4, r0
 80108ae:	4628      	mov	r0, r5
 80108b0:	f000 fcc6 	bl	8011240 <_sbrk_r>
 80108b4:	3001      	adds	r0, #1
 80108b6:	d101      	bne.n	80108bc <sbrk_aligned+0x38>
 80108b8:	f04f 34ff 	mov.w	r4, #4294967295
 80108bc:	4620      	mov	r0, r4
 80108be:	bd70      	pop	{r4, r5, r6, pc}
 80108c0:	24003300 	.word	0x24003300

080108c4 <_malloc_r>:
 80108c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108c8:	1ccd      	adds	r5, r1, #3
 80108ca:	f025 0503 	bic.w	r5, r5, #3
 80108ce:	3508      	adds	r5, #8
 80108d0:	2d0c      	cmp	r5, #12
 80108d2:	bf38      	it	cc
 80108d4:	250c      	movcc	r5, #12
 80108d6:	2d00      	cmp	r5, #0
 80108d8:	4607      	mov	r7, r0
 80108da:	db01      	blt.n	80108e0 <_malloc_r+0x1c>
 80108dc:	42a9      	cmp	r1, r5
 80108de:	d905      	bls.n	80108ec <_malloc_r+0x28>
 80108e0:	230c      	movs	r3, #12
 80108e2:	603b      	str	r3, [r7, #0]
 80108e4:	2600      	movs	r6, #0
 80108e6:	4630      	mov	r0, r6
 80108e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108ec:	4e2e      	ldr	r6, [pc, #184]	; (80109a8 <_malloc_r+0xe4>)
 80108ee:	f000 ff1f 	bl	8011730 <__malloc_lock>
 80108f2:	6833      	ldr	r3, [r6, #0]
 80108f4:	461c      	mov	r4, r3
 80108f6:	bb34      	cbnz	r4, 8010946 <_malloc_r+0x82>
 80108f8:	4629      	mov	r1, r5
 80108fa:	4638      	mov	r0, r7
 80108fc:	f7ff ffc2 	bl	8010884 <sbrk_aligned>
 8010900:	1c43      	adds	r3, r0, #1
 8010902:	4604      	mov	r4, r0
 8010904:	d14d      	bne.n	80109a2 <_malloc_r+0xde>
 8010906:	6834      	ldr	r4, [r6, #0]
 8010908:	4626      	mov	r6, r4
 801090a:	2e00      	cmp	r6, #0
 801090c:	d140      	bne.n	8010990 <_malloc_r+0xcc>
 801090e:	6823      	ldr	r3, [r4, #0]
 8010910:	4631      	mov	r1, r6
 8010912:	4638      	mov	r0, r7
 8010914:	eb04 0803 	add.w	r8, r4, r3
 8010918:	f000 fc92 	bl	8011240 <_sbrk_r>
 801091c:	4580      	cmp	r8, r0
 801091e:	d13a      	bne.n	8010996 <_malloc_r+0xd2>
 8010920:	6821      	ldr	r1, [r4, #0]
 8010922:	3503      	adds	r5, #3
 8010924:	1a6d      	subs	r5, r5, r1
 8010926:	f025 0503 	bic.w	r5, r5, #3
 801092a:	3508      	adds	r5, #8
 801092c:	2d0c      	cmp	r5, #12
 801092e:	bf38      	it	cc
 8010930:	250c      	movcc	r5, #12
 8010932:	4629      	mov	r1, r5
 8010934:	4638      	mov	r0, r7
 8010936:	f7ff ffa5 	bl	8010884 <sbrk_aligned>
 801093a:	3001      	adds	r0, #1
 801093c:	d02b      	beq.n	8010996 <_malloc_r+0xd2>
 801093e:	6823      	ldr	r3, [r4, #0]
 8010940:	442b      	add	r3, r5
 8010942:	6023      	str	r3, [r4, #0]
 8010944:	e00e      	b.n	8010964 <_malloc_r+0xa0>
 8010946:	6822      	ldr	r2, [r4, #0]
 8010948:	1b52      	subs	r2, r2, r5
 801094a:	d41e      	bmi.n	801098a <_malloc_r+0xc6>
 801094c:	2a0b      	cmp	r2, #11
 801094e:	d916      	bls.n	801097e <_malloc_r+0xba>
 8010950:	1961      	adds	r1, r4, r5
 8010952:	42a3      	cmp	r3, r4
 8010954:	6025      	str	r5, [r4, #0]
 8010956:	bf18      	it	ne
 8010958:	6059      	strne	r1, [r3, #4]
 801095a:	6863      	ldr	r3, [r4, #4]
 801095c:	bf08      	it	eq
 801095e:	6031      	streq	r1, [r6, #0]
 8010960:	5162      	str	r2, [r4, r5]
 8010962:	604b      	str	r3, [r1, #4]
 8010964:	4638      	mov	r0, r7
 8010966:	f104 060b 	add.w	r6, r4, #11
 801096a:	f000 fee7 	bl	801173c <__malloc_unlock>
 801096e:	f026 0607 	bic.w	r6, r6, #7
 8010972:	1d23      	adds	r3, r4, #4
 8010974:	1af2      	subs	r2, r6, r3
 8010976:	d0b6      	beq.n	80108e6 <_malloc_r+0x22>
 8010978:	1b9b      	subs	r3, r3, r6
 801097a:	50a3      	str	r3, [r4, r2]
 801097c:	e7b3      	b.n	80108e6 <_malloc_r+0x22>
 801097e:	6862      	ldr	r2, [r4, #4]
 8010980:	42a3      	cmp	r3, r4
 8010982:	bf0c      	ite	eq
 8010984:	6032      	streq	r2, [r6, #0]
 8010986:	605a      	strne	r2, [r3, #4]
 8010988:	e7ec      	b.n	8010964 <_malloc_r+0xa0>
 801098a:	4623      	mov	r3, r4
 801098c:	6864      	ldr	r4, [r4, #4]
 801098e:	e7b2      	b.n	80108f6 <_malloc_r+0x32>
 8010990:	4634      	mov	r4, r6
 8010992:	6876      	ldr	r6, [r6, #4]
 8010994:	e7b9      	b.n	801090a <_malloc_r+0x46>
 8010996:	230c      	movs	r3, #12
 8010998:	603b      	str	r3, [r7, #0]
 801099a:	4638      	mov	r0, r7
 801099c:	f000 fece 	bl	801173c <__malloc_unlock>
 80109a0:	e7a1      	b.n	80108e6 <_malloc_r+0x22>
 80109a2:	6025      	str	r5, [r4, #0]
 80109a4:	e7de      	b.n	8010964 <_malloc_r+0xa0>
 80109a6:	bf00      	nop
 80109a8:	240032fc 	.word	0x240032fc

080109ac <__ssputs_r>:
 80109ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109b0:	688e      	ldr	r6, [r1, #8]
 80109b2:	429e      	cmp	r6, r3
 80109b4:	4682      	mov	sl, r0
 80109b6:	460c      	mov	r4, r1
 80109b8:	4690      	mov	r8, r2
 80109ba:	461f      	mov	r7, r3
 80109bc:	d838      	bhi.n	8010a30 <__ssputs_r+0x84>
 80109be:	898a      	ldrh	r2, [r1, #12]
 80109c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80109c4:	d032      	beq.n	8010a2c <__ssputs_r+0x80>
 80109c6:	6825      	ldr	r5, [r4, #0]
 80109c8:	6909      	ldr	r1, [r1, #16]
 80109ca:	eba5 0901 	sub.w	r9, r5, r1
 80109ce:	6965      	ldr	r5, [r4, #20]
 80109d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80109d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80109d8:	3301      	adds	r3, #1
 80109da:	444b      	add	r3, r9
 80109dc:	106d      	asrs	r5, r5, #1
 80109de:	429d      	cmp	r5, r3
 80109e0:	bf38      	it	cc
 80109e2:	461d      	movcc	r5, r3
 80109e4:	0553      	lsls	r3, r2, #21
 80109e6:	d531      	bpl.n	8010a4c <__ssputs_r+0xa0>
 80109e8:	4629      	mov	r1, r5
 80109ea:	f7ff ff6b 	bl	80108c4 <_malloc_r>
 80109ee:	4606      	mov	r6, r0
 80109f0:	b950      	cbnz	r0, 8010a08 <__ssputs_r+0x5c>
 80109f2:	230c      	movs	r3, #12
 80109f4:	f8ca 3000 	str.w	r3, [sl]
 80109f8:	89a3      	ldrh	r3, [r4, #12]
 80109fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109fe:	81a3      	strh	r3, [r4, #12]
 8010a00:	f04f 30ff 	mov.w	r0, #4294967295
 8010a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a08:	6921      	ldr	r1, [r4, #16]
 8010a0a:	464a      	mov	r2, r9
 8010a0c:	f7ff fd18 	bl	8010440 <memcpy>
 8010a10:	89a3      	ldrh	r3, [r4, #12]
 8010a12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a1a:	81a3      	strh	r3, [r4, #12]
 8010a1c:	6126      	str	r6, [r4, #16]
 8010a1e:	6165      	str	r5, [r4, #20]
 8010a20:	444e      	add	r6, r9
 8010a22:	eba5 0509 	sub.w	r5, r5, r9
 8010a26:	6026      	str	r6, [r4, #0]
 8010a28:	60a5      	str	r5, [r4, #8]
 8010a2a:	463e      	mov	r6, r7
 8010a2c:	42be      	cmp	r6, r7
 8010a2e:	d900      	bls.n	8010a32 <__ssputs_r+0x86>
 8010a30:	463e      	mov	r6, r7
 8010a32:	6820      	ldr	r0, [r4, #0]
 8010a34:	4632      	mov	r2, r6
 8010a36:	4641      	mov	r1, r8
 8010a38:	f7ff fd10 	bl	801045c <memmove>
 8010a3c:	68a3      	ldr	r3, [r4, #8]
 8010a3e:	1b9b      	subs	r3, r3, r6
 8010a40:	60a3      	str	r3, [r4, #8]
 8010a42:	6823      	ldr	r3, [r4, #0]
 8010a44:	4433      	add	r3, r6
 8010a46:	6023      	str	r3, [r4, #0]
 8010a48:	2000      	movs	r0, #0
 8010a4a:	e7db      	b.n	8010a04 <__ssputs_r+0x58>
 8010a4c:	462a      	mov	r2, r5
 8010a4e:	f000 fe7b 	bl	8011748 <_realloc_r>
 8010a52:	4606      	mov	r6, r0
 8010a54:	2800      	cmp	r0, #0
 8010a56:	d1e1      	bne.n	8010a1c <__ssputs_r+0x70>
 8010a58:	6921      	ldr	r1, [r4, #16]
 8010a5a:	4650      	mov	r0, sl
 8010a5c:	f7ff fec6 	bl	80107ec <_free_r>
 8010a60:	e7c7      	b.n	80109f2 <__ssputs_r+0x46>
	...

08010a64 <_svfiprintf_r>:
 8010a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a68:	4698      	mov	r8, r3
 8010a6a:	898b      	ldrh	r3, [r1, #12]
 8010a6c:	061b      	lsls	r3, r3, #24
 8010a6e:	b09d      	sub	sp, #116	; 0x74
 8010a70:	4607      	mov	r7, r0
 8010a72:	460d      	mov	r5, r1
 8010a74:	4614      	mov	r4, r2
 8010a76:	d50e      	bpl.n	8010a96 <_svfiprintf_r+0x32>
 8010a78:	690b      	ldr	r3, [r1, #16]
 8010a7a:	b963      	cbnz	r3, 8010a96 <_svfiprintf_r+0x32>
 8010a7c:	2140      	movs	r1, #64	; 0x40
 8010a7e:	f7ff ff21 	bl	80108c4 <_malloc_r>
 8010a82:	6028      	str	r0, [r5, #0]
 8010a84:	6128      	str	r0, [r5, #16]
 8010a86:	b920      	cbnz	r0, 8010a92 <_svfiprintf_r+0x2e>
 8010a88:	230c      	movs	r3, #12
 8010a8a:	603b      	str	r3, [r7, #0]
 8010a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8010a90:	e0d1      	b.n	8010c36 <_svfiprintf_r+0x1d2>
 8010a92:	2340      	movs	r3, #64	; 0x40
 8010a94:	616b      	str	r3, [r5, #20]
 8010a96:	2300      	movs	r3, #0
 8010a98:	9309      	str	r3, [sp, #36]	; 0x24
 8010a9a:	2320      	movs	r3, #32
 8010a9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010aa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8010aa4:	2330      	movs	r3, #48	; 0x30
 8010aa6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010c50 <_svfiprintf_r+0x1ec>
 8010aaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010aae:	f04f 0901 	mov.w	r9, #1
 8010ab2:	4623      	mov	r3, r4
 8010ab4:	469a      	mov	sl, r3
 8010ab6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010aba:	b10a      	cbz	r2, 8010ac0 <_svfiprintf_r+0x5c>
 8010abc:	2a25      	cmp	r2, #37	; 0x25
 8010abe:	d1f9      	bne.n	8010ab4 <_svfiprintf_r+0x50>
 8010ac0:	ebba 0b04 	subs.w	fp, sl, r4
 8010ac4:	d00b      	beq.n	8010ade <_svfiprintf_r+0x7a>
 8010ac6:	465b      	mov	r3, fp
 8010ac8:	4622      	mov	r2, r4
 8010aca:	4629      	mov	r1, r5
 8010acc:	4638      	mov	r0, r7
 8010ace:	f7ff ff6d 	bl	80109ac <__ssputs_r>
 8010ad2:	3001      	adds	r0, #1
 8010ad4:	f000 80aa 	beq.w	8010c2c <_svfiprintf_r+0x1c8>
 8010ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ada:	445a      	add	r2, fp
 8010adc:	9209      	str	r2, [sp, #36]	; 0x24
 8010ade:	f89a 3000 	ldrb.w	r3, [sl]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	f000 80a2 	beq.w	8010c2c <_svfiprintf_r+0x1c8>
 8010ae8:	2300      	movs	r3, #0
 8010aea:	f04f 32ff 	mov.w	r2, #4294967295
 8010aee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010af2:	f10a 0a01 	add.w	sl, sl, #1
 8010af6:	9304      	str	r3, [sp, #16]
 8010af8:	9307      	str	r3, [sp, #28]
 8010afa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010afe:	931a      	str	r3, [sp, #104]	; 0x68
 8010b00:	4654      	mov	r4, sl
 8010b02:	2205      	movs	r2, #5
 8010b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b08:	4851      	ldr	r0, [pc, #324]	; (8010c50 <_svfiprintf_r+0x1ec>)
 8010b0a:	f7ef fc01 	bl	8000310 <memchr>
 8010b0e:	9a04      	ldr	r2, [sp, #16]
 8010b10:	b9d8      	cbnz	r0, 8010b4a <_svfiprintf_r+0xe6>
 8010b12:	06d0      	lsls	r0, r2, #27
 8010b14:	bf44      	itt	mi
 8010b16:	2320      	movmi	r3, #32
 8010b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b1c:	0711      	lsls	r1, r2, #28
 8010b1e:	bf44      	itt	mi
 8010b20:	232b      	movmi	r3, #43	; 0x2b
 8010b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b26:	f89a 3000 	ldrb.w	r3, [sl]
 8010b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8010b2c:	d015      	beq.n	8010b5a <_svfiprintf_r+0xf6>
 8010b2e:	9a07      	ldr	r2, [sp, #28]
 8010b30:	4654      	mov	r4, sl
 8010b32:	2000      	movs	r0, #0
 8010b34:	f04f 0c0a 	mov.w	ip, #10
 8010b38:	4621      	mov	r1, r4
 8010b3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b3e:	3b30      	subs	r3, #48	; 0x30
 8010b40:	2b09      	cmp	r3, #9
 8010b42:	d94e      	bls.n	8010be2 <_svfiprintf_r+0x17e>
 8010b44:	b1b0      	cbz	r0, 8010b74 <_svfiprintf_r+0x110>
 8010b46:	9207      	str	r2, [sp, #28]
 8010b48:	e014      	b.n	8010b74 <_svfiprintf_r+0x110>
 8010b4a:	eba0 0308 	sub.w	r3, r0, r8
 8010b4e:	fa09 f303 	lsl.w	r3, r9, r3
 8010b52:	4313      	orrs	r3, r2
 8010b54:	9304      	str	r3, [sp, #16]
 8010b56:	46a2      	mov	sl, r4
 8010b58:	e7d2      	b.n	8010b00 <_svfiprintf_r+0x9c>
 8010b5a:	9b03      	ldr	r3, [sp, #12]
 8010b5c:	1d19      	adds	r1, r3, #4
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	9103      	str	r1, [sp, #12]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	bfbb      	ittet	lt
 8010b66:	425b      	neglt	r3, r3
 8010b68:	f042 0202 	orrlt.w	r2, r2, #2
 8010b6c:	9307      	strge	r3, [sp, #28]
 8010b6e:	9307      	strlt	r3, [sp, #28]
 8010b70:	bfb8      	it	lt
 8010b72:	9204      	strlt	r2, [sp, #16]
 8010b74:	7823      	ldrb	r3, [r4, #0]
 8010b76:	2b2e      	cmp	r3, #46	; 0x2e
 8010b78:	d10c      	bne.n	8010b94 <_svfiprintf_r+0x130>
 8010b7a:	7863      	ldrb	r3, [r4, #1]
 8010b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8010b7e:	d135      	bne.n	8010bec <_svfiprintf_r+0x188>
 8010b80:	9b03      	ldr	r3, [sp, #12]
 8010b82:	1d1a      	adds	r2, r3, #4
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	9203      	str	r2, [sp, #12]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	bfb8      	it	lt
 8010b8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b90:	3402      	adds	r4, #2
 8010b92:	9305      	str	r3, [sp, #20]
 8010b94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010c60 <_svfiprintf_r+0x1fc>
 8010b98:	7821      	ldrb	r1, [r4, #0]
 8010b9a:	2203      	movs	r2, #3
 8010b9c:	4650      	mov	r0, sl
 8010b9e:	f7ef fbb7 	bl	8000310 <memchr>
 8010ba2:	b140      	cbz	r0, 8010bb6 <_svfiprintf_r+0x152>
 8010ba4:	2340      	movs	r3, #64	; 0x40
 8010ba6:	eba0 000a 	sub.w	r0, r0, sl
 8010baa:	fa03 f000 	lsl.w	r0, r3, r0
 8010bae:	9b04      	ldr	r3, [sp, #16]
 8010bb0:	4303      	orrs	r3, r0
 8010bb2:	3401      	adds	r4, #1
 8010bb4:	9304      	str	r3, [sp, #16]
 8010bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bba:	4826      	ldr	r0, [pc, #152]	; (8010c54 <_svfiprintf_r+0x1f0>)
 8010bbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010bc0:	2206      	movs	r2, #6
 8010bc2:	f7ef fba5 	bl	8000310 <memchr>
 8010bc6:	2800      	cmp	r0, #0
 8010bc8:	d038      	beq.n	8010c3c <_svfiprintf_r+0x1d8>
 8010bca:	4b23      	ldr	r3, [pc, #140]	; (8010c58 <_svfiprintf_r+0x1f4>)
 8010bcc:	bb1b      	cbnz	r3, 8010c16 <_svfiprintf_r+0x1b2>
 8010bce:	9b03      	ldr	r3, [sp, #12]
 8010bd0:	3307      	adds	r3, #7
 8010bd2:	f023 0307 	bic.w	r3, r3, #7
 8010bd6:	3308      	adds	r3, #8
 8010bd8:	9303      	str	r3, [sp, #12]
 8010bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bdc:	4433      	add	r3, r6
 8010bde:	9309      	str	r3, [sp, #36]	; 0x24
 8010be0:	e767      	b.n	8010ab2 <_svfiprintf_r+0x4e>
 8010be2:	fb0c 3202 	mla	r2, ip, r2, r3
 8010be6:	460c      	mov	r4, r1
 8010be8:	2001      	movs	r0, #1
 8010bea:	e7a5      	b.n	8010b38 <_svfiprintf_r+0xd4>
 8010bec:	2300      	movs	r3, #0
 8010bee:	3401      	adds	r4, #1
 8010bf0:	9305      	str	r3, [sp, #20]
 8010bf2:	4619      	mov	r1, r3
 8010bf4:	f04f 0c0a 	mov.w	ip, #10
 8010bf8:	4620      	mov	r0, r4
 8010bfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010bfe:	3a30      	subs	r2, #48	; 0x30
 8010c00:	2a09      	cmp	r2, #9
 8010c02:	d903      	bls.n	8010c0c <_svfiprintf_r+0x1a8>
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d0c5      	beq.n	8010b94 <_svfiprintf_r+0x130>
 8010c08:	9105      	str	r1, [sp, #20]
 8010c0a:	e7c3      	b.n	8010b94 <_svfiprintf_r+0x130>
 8010c0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c10:	4604      	mov	r4, r0
 8010c12:	2301      	movs	r3, #1
 8010c14:	e7f0      	b.n	8010bf8 <_svfiprintf_r+0x194>
 8010c16:	ab03      	add	r3, sp, #12
 8010c18:	9300      	str	r3, [sp, #0]
 8010c1a:	462a      	mov	r2, r5
 8010c1c:	4b0f      	ldr	r3, [pc, #60]	; (8010c5c <_svfiprintf_r+0x1f8>)
 8010c1e:	a904      	add	r1, sp, #16
 8010c20:	4638      	mov	r0, r7
 8010c22:	f3af 8000 	nop.w
 8010c26:	1c42      	adds	r2, r0, #1
 8010c28:	4606      	mov	r6, r0
 8010c2a:	d1d6      	bne.n	8010bda <_svfiprintf_r+0x176>
 8010c2c:	89ab      	ldrh	r3, [r5, #12]
 8010c2e:	065b      	lsls	r3, r3, #25
 8010c30:	f53f af2c 	bmi.w	8010a8c <_svfiprintf_r+0x28>
 8010c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c36:	b01d      	add	sp, #116	; 0x74
 8010c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c3c:	ab03      	add	r3, sp, #12
 8010c3e:	9300      	str	r3, [sp, #0]
 8010c40:	462a      	mov	r2, r5
 8010c42:	4b06      	ldr	r3, [pc, #24]	; (8010c5c <_svfiprintf_r+0x1f8>)
 8010c44:	a904      	add	r1, sp, #16
 8010c46:	4638      	mov	r0, r7
 8010c48:	f000 f9d4 	bl	8010ff4 <_printf_i>
 8010c4c:	e7eb      	b.n	8010c26 <_svfiprintf_r+0x1c2>
 8010c4e:	bf00      	nop
 8010c50:	08014528 	.word	0x08014528
 8010c54:	08014532 	.word	0x08014532
 8010c58:	00000000 	.word	0x00000000
 8010c5c:	080109ad 	.word	0x080109ad
 8010c60:	0801452e 	.word	0x0801452e

08010c64 <__sfputc_r>:
 8010c64:	6893      	ldr	r3, [r2, #8]
 8010c66:	3b01      	subs	r3, #1
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	b410      	push	{r4}
 8010c6c:	6093      	str	r3, [r2, #8]
 8010c6e:	da08      	bge.n	8010c82 <__sfputc_r+0x1e>
 8010c70:	6994      	ldr	r4, [r2, #24]
 8010c72:	42a3      	cmp	r3, r4
 8010c74:	db01      	blt.n	8010c7a <__sfputc_r+0x16>
 8010c76:	290a      	cmp	r1, #10
 8010c78:	d103      	bne.n	8010c82 <__sfputc_r+0x1e>
 8010c7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c7e:	f000 bb33 	b.w	80112e8 <__swbuf_r>
 8010c82:	6813      	ldr	r3, [r2, #0]
 8010c84:	1c58      	adds	r0, r3, #1
 8010c86:	6010      	str	r0, [r2, #0]
 8010c88:	7019      	strb	r1, [r3, #0]
 8010c8a:	4608      	mov	r0, r1
 8010c8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c90:	4770      	bx	lr

08010c92 <__sfputs_r>:
 8010c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c94:	4606      	mov	r6, r0
 8010c96:	460f      	mov	r7, r1
 8010c98:	4614      	mov	r4, r2
 8010c9a:	18d5      	adds	r5, r2, r3
 8010c9c:	42ac      	cmp	r4, r5
 8010c9e:	d101      	bne.n	8010ca4 <__sfputs_r+0x12>
 8010ca0:	2000      	movs	r0, #0
 8010ca2:	e007      	b.n	8010cb4 <__sfputs_r+0x22>
 8010ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ca8:	463a      	mov	r2, r7
 8010caa:	4630      	mov	r0, r6
 8010cac:	f7ff ffda 	bl	8010c64 <__sfputc_r>
 8010cb0:	1c43      	adds	r3, r0, #1
 8010cb2:	d1f3      	bne.n	8010c9c <__sfputs_r+0xa>
 8010cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010cb8 <_vfiprintf_r>:
 8010cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cbc:	460d      	mov	r5, r1
 8010cbe:	b09d      	sub	sp, #116	; 0x74
 8010cc0:	4614      	mov	r4, r2
 8010cc2:	4698      	mov	r8, r3
 8010cc4:	4606      	mov	r6, r0
 8010cc6:	b118      	cbz	r0, 8010cd0 <_vfiprintf_r+0x18>
 8010cc8:	6983      	ldr	r3, [r0, #24]
 8010cca:	b90b      	cbnz	r3, 8010cd0 <_vfiprintf_r+0x18>
 8010ccc:	f7ff fcd4 	bl	8010678 <__sinit>
 8010cd0:	4b89      	ldr	r3, [pc, #548]	; (8010ef8 <_vfiprintf_r+0x240>)
 8010cd2:	429d      	cmp	r5, r3
 8010cd4:	d11b      	bne.n	8010d0e <_vfiprintf_r+0x56>
 8010cd6:	6875      	ldr	r5, [r6, #4]
 8010cd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010cda:	07d9      	lsls	r1, r3, #31
 8010cdc:	d405      	bmi.n	8010cea <_vfiprintf_r+0x32>
 8010cde:	89ab      	ldrh	r3, [r5, #12]
 8010ce0:	059a      	lsls	r2, r3, #22
 8010ce2:	d402      	bmi.n	8010cea <_vfiprintf_r+0x32>
 8010ce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ce6:	f7ff fd77 	bl	80107d8 <__retarget_lock_acquire_recursive>
 8010cea:	89ab      	ldrh	r3, [r5, #12]
 8010cec:	071b      	lsls	r3, r3, #28
 8010cee:	d501      	bpl.n	8010cf4 <_vfiprintf_r+0x3c>
 8010cf0:	692b      	ldr	r3, [r5, #16]
 8010cf2:	b9eb      	cbnz	r3, 8010d30 <_vfiprintf_r+0x78>
 8010cf4:	4629      	mov	r1, r5
 8010cf6:	4630      	mov	r0, r6
 8010cf8:	f000 fb5a 	bl	80113b0 <__swsetup_r>
 8010cfc:	b1c0      	cbz	r0, 8010d30 <_vfiprintf_r+0x78>
 8010cfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d00:	07dc      	lsls	r4, r3, #31
 8010d02:	d50e      	bpl.n	8010d22 <_vfiprintf_r+0x6a>
 8010d04:	f04f 30ff 	mov.w	r0, #4294967295
 8010d08:	b01d      	add	sp, #116	; 0x74
 8010d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d0e:	4b7b      	ldr	r3, [pc, #492]	; (8010efc <_vfiprintf_r+0x244>)
 8010d10:	429d      	cmp	r5, r3
 8010d12:	d101      	bne.n	8010d18 <_vfiprintf_r+0x60>
 8010d14:	68b5      	ldr	r5, [r6, #8]
 8010d16:	e7df      	b.n	8010cd8 <_vfiprintf_r+0x20>
 8010d18:	4b79      	ldr	r3, [pc, #484]	; (8010f00 <_vfiprintf_r+0x248>)
 8010d1a:	429d      	cmp	r5, r3
 8010d1c:	bf08      	it	eq
 8010d1e:	68f5      	ldreq	r5, [r6, #12]
 8010d20:	e7da      	b.n	8010cd8 <_vfiprintf_r+0x20>
 8010d22:	89ab      	ldrh	r3, [r5, #12]
 8010d24:	0598      	lsls	r0, r3, #22
 8010d26:	d4ed      	bmi.n	8010d04 <_vfiprintf_r+0x4c>
 8010d28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d2a:	f7ff fd56 	bl	80107da <__retarget_lock_release_recursive>
 8010d2e:	e7e9      	b.n	8010d04 <_vfiprintf_r+0x4c>
 8010d30:	2300      	movs	r3, #0
 8010d32:	9309      	str	r3, [sp, #36]	; 0x24
 8010d34:	2320      	movs	r3, #32
 8010d36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d3e:	2330      	movs	r3, #48	; 0x30
 8010d40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010f04 <_vfiprintf_r+0x24c>
 8010d44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d48:	f04f 0901 	mov.w	r9, #1
 8010d4c:	4623      	mov	r3, r4
 8010d4e:	469a      	mov	sl, r3
 8010d50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d54:	b10a      	cbz	r2, 8010d5a <_vfiprintf_r+0xa2>
 8010d56:	2a25      	cmp	r2, #37	; 0x25
 8010d58:	d1f9      	bne.n	8010d4e <_vfiprintf_r+0x96>
 8010d5a:	ebba 0b04 	subs.w	fp, sl, r4
 8010d5e:	d00b      	beq.n	8010d78 <_vfiprintf_r+0xc0>
 8010d60:	465b      	mov	r3, fp
 8010d62:	4622      	mov	r2, r4
 8010d64:	4629      	mov	r1, r5
 8010d66:	4630      	mov	r0, r6
 8010d68:	f7ff ff93 	bl	8010c92 <__sfputs_r>
 8010d6c:	3001      	adds	r0, #1
 8010d6e:	f000 80aa 	beq.w	8010ec6 <_vfiprintf_r+0x20e>
 8010d72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d74:	445a      	add	r2, fp
 8010d76:	9209      	str	r2, [sp, #36]	; 0x24
 8010d78:	f89a 3000 	ldrb.w	r3, [sl]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	f000 80a2 	beq.w	8010ec6 <_vfiprintf_r+0x20e>
 8010d82:	2300      	movs	r3, #0
 8010d84:	f04f 32ff 	mov.w	r2, #4294967295
 8010d88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d8c:	f10a 0a01 	add.w	sl, sl, #1
 8010d90:	9304      	str	r3, [sp, #16]
 8010d92:	9307      	str	r3, [sp, #28]
 8010d94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d98:	931a      	str	r3, [sp, #104]	; 0x68
 8010d9a:	4654      	mov	r4, sl
 8010d9c:	2205      	movs	r2, #5
 8010d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010da2:	4858      	ldr	r0, [pc, #352]	; (8010f04 <_vfiprintf_r+0x24c>)
 8010da4:	f7ef fab4 	bl	8000310 <memchr>
 8010da8:	9a04      	ldr	r2, [sp, #16]
 8010daa:	b9d8      	cbnz	r0, 8010de4 <_vfiprintf_r+0x12c>
 8010dac:	06d1      	lsls	r1, r2, #27
 8010dae:	bf44      	itt	mi
 8010db0:	2320      	movmi	r3, #32
 8010db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010db6:	0713      	lsls	r3, r2, #28
 8010db8:	bf44      	itt	mi
 8010dba:	232b      	movmi	r3, #43	; 0x2b
 8010dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8010dc4:	2b2a      	cmp	r3, #42	; 0x2a
 8010dc6:	d015      	beq.n	8010df4 <_vfiprintf_r+0x13c>
 8010dc8:	9a07      	ldr	r2, [sp, #28]
 8010dca:	4654      	mov	r4, sl
 8010dcc:	2000      	movs	r0, #0
 8010dce:	f04f 0c0a 	mov.w	ip, #10
 8010dd2:	4621      	mov	r1, r4
 8010dd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010dd8:	3b30      	subs	r3, #48	; 0x30
 8010dda:	2b09      	cmp	r3, #9
 8010ddc:	d94e      	bls.n	8010e7c <_vfiprintf_r+0x1c4>
 8010dde:	b1b0      	cbz	r0, 8010e0e <_vfiprintf_r+0x156>
 8010de0:	9207      	str	r2, [sp, #28]
 8010de2:	e014      	b.n	8010e0e <_vfiprintf_r+0x156>
 8010de4:	eba0 0308 	sub.w	r3, r0, r8
 8010de8:	fa09 f303 	lsl.w	r3, r9, r3
 8010dec:	4313      	orrs	r3, r2
 8010dee:	9304      	str	r3, [sp, #16]
 8010df0:	46a2      	mov	sl, r4
 8010df2:	e7d2      	b.n	8010d9a <_vfiprintf_r+0xe2>
 8010df4:	9b03      	ldr	r3, [sp, #12]
 8010df6:	1d19      	adds	r1, r3, #4
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	9103      	str	r1, [sp, #12]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	bfbb      	ittet	lt
 8010e00:	425b      	neglt	r3, r3
 8010e02:	f042 0202 	orrlt.w	r2, r2, #2
 8010e06:	9307      	strge	r3, [sp, #28]
 8010e08:	9307      	strlt	r3, [sp, #28]
 8010e0a:	bfb8      	it	lt
 8010e0c:	9204      	strlt	r2, [sp, #16]
 8010e0e:	7823      	ldrb	r3, [r4, #0]
 8010e10:	2b2e      	cmp	r3, #46	; 0x2e
 8010e12:	d10c      	bne.n	8010e2e <_vfiprintf_r+0x176>
 8010e14:	7863      	ldrb	r3, [r4, #1]
 8010e16:	2b2a      	cmp	r3, #42	; 0x2a
 8010e18:	d135      	bne.n	8010e86 <_vfiprintf_r+0x1ce>
 8010e1a:	9b03      	ldr	r3, [sp, #12]
 8010e1c:	1d1a      	adds	r2, r3, #4
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	9203      	str	r2, [sp, #12]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	bfb8      	it	lt
 8010e26:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e2a:	3402      	adds	r4, #2
 8010e2c:	9305      	str	r3, [sp, #20]
 8010e2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010f14 <_vfiprintf_r+0x25c>
 8010e32:	7821      	ldrb	r1, [r4, #0]
 8010e34:	2203      	movs	r2, #3
 8010e36:	4650      	mov	r0, sl
 8010e38:	f7ef fa6a 	bl	8000310 <memchr>
 8010e3c:	b140      	cbz	r0, 8010e50 <_vfiprintf_r+0x198>
 8010e3e:	2340      	movs	r3, #64	; 0x40
 8010e40:	eba0 000a 	sub.w	r0, r0, sl
 8010e44:	fa03 f000 	lsl.w	r0, r3, r0
 8010e48:	9b04      	ldr	r3, [sp, #16]
 8010e4a:	4303      	orrs	r3, r0
 8010e4c:	3401      	adds	r4, #1
 8010e4e:	9304      	str	r3, [sp, #16]
 8010e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e54:	482c      	ldr	r0, [pc, #176]	; (8010f08 <_vfiprintf_r+0x250>)
 8010e56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e5a:	2206      	movs	r2, #6
 8010e5c:	f7ef fa58 	bl	8000310 <memchr>
 8010e60:	2800      	cmp	r0, #0
 8010e62:	d03f      	beq.n	8010ee4 <_vfiprintf_r+0x22c>
 8010e64:	4b29      	ldr	r3, [pc, #164]	; (8010f0c <_vfiprintf_r+0x254>)
 8010e66:	bb1b      	cbnz	r3, 8010eb0 <_vfiprintf_r+0x1f8>
 8010e68:	9b03      	ldr	r3, [sp, #12]
 8010e6a:	3307      	adds	r3, #7
 8010e6c:	f023 0307 	bic.w	r3, r3, #7
 8010e70:	3308      	adds	r3, #8
 8010e72:	9303      	str	r3, [sp, #12]
 8010e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e76:	443b      	add	r3, r7
 8010e78:	9309      	str	r3, [sp, #36]	; 0x24
 8010e7a:	e767      	b.n	8010d4c <_vfiprintf_r+0x94>
 8010e7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e80:	460c      	mov	r4, r1
 8010e82:	2001      	movs	r0, #1
 8010e84:	e7a5      	b.n	8010dd2 <_vfiprintf_r+0x11a>
 8010e86:	2300      	movs	r3, #0
 8010e88:	3401      	adds	r4, #1
 8010e8a:	9305      	str	r3, [sp, #20]
 8010e8c:	4619      	mov	r1, r3
 8010e8e:	f04f 0c0a 	mov.w	ip, #10
 8010e92:	4620      	mov	r0, r4
 8010e94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e98:	3a30      	subs	r2, #48	; 0x30
 8010e9a:	2a09      	cmp	r2, #9
 8010e9c:	d903      	bls.n	8010ea6 <_vfiprintf_r+0x1ee>
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d0c5      	beq.n	8010e2e <_vfiprintf_r+0x176>
 8010ea2:	9105      	str	r1, [sp, #20]
 8010ea4:	e7c3      	b.n	8010e2e <_vfiprintf_r+0x176>
 8010ea6:	fb0c 2101 	mla	r1, ip, r1, r2
 8010eaa:	4604      	mov	r4, r0
 8010eac:	2301      	movs	r3, #1
 8010eae:	e7f0      	b.n	8010e92 <_vfiprintf_r+0x1da>
 8010eb0:	ab03      	add	r3, sp, #12
 8010eb2:	9300      	str	r3, [sp, #0]
 8010eb4:	462a      	mov	r2, r5
 8010eb6:	4b16      	ldr	r3, [pc, #88]	; (8010f10 <_vfiprintf_r+0x258>)
 8010eb8:	a904      	add	r1, sp, #16
 8010eba:	4630      	mov	r0, r6
 8010ebc:	f3af 8000 	nop.w
 8010ec0:	4607      	mov	r7, r0
 8010ec2:	1c78      	adds	r0, r7, #1
 8010ec4:	d1d6      	bne.n	8010e74 <_vfiprintf_r+0x1bc>
 8010ec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ec8:	07d9      	lsls	r1, r3, #31
 8010eca:	d405      	bmi.n	8010ed8 <_vfiprintf_r+0x220>
 8010ecc:	89ab      	ldrh	r3, [r5, #12]
 8010ece:	059a      	lsls	r2, r3, #22
 8010ed0:	d402      	bmi.n	8010ed8 <_vfiprintf_r+0x220>
 8010ed2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ed4:	f7ff fc81 	bl	80107da <__retarget_lock_release_recursive>
 8010ed8:	89ab      	ldrh	r3, [r5, #12]
 8010eda:	065b      	lsls	r3, r3, #25
 8010edc:	f53f af12 	bmi.w	8010d04 <_vfiprintf_r+0x4c>
 8010ee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ee2:	e711      	b.n	8010d08 <_vfiprintf_r+0x50>
 8010ee4:	ab03      	add	r3, sp, #12
 8010ee6:	9300      	str	r3, [sp, #0]
 8010ee8:	462a      	mov	r2, r5
 8010eea:	4b09      	ldr	r3, [pc, #36]	; (8010f10 <_vfiprintf_r+0x258>)
 8010eec:	a904      	add	r1, sp, #16
 8010eee:	4630      	mov	r0, r6
 8010ef0:	f000 f880 	bl	8010ff4 <_printf_i>
 8010ef4:	e7e4      	b.n	8010ec0 <_vfiprintf_r+0x208>
 8010ef6:	bf00      	nop
 8010ef8:	080144e8 	.word	0x080144e8
 8010efc:	08014508 	.word	0x08014508
 8010f00:	080144c8 	.word	0x080144c8
 8010f04:	08014528 	.word	0x08014528
 8010f08:	08014532 	.word	0x08014532
 8010f0c:	00000000 	.word	0x00000000
 8010f10:	08010c93 	.word	0x08010c93
 8010f14:	0801452e 	.word	0x0801452e

08010f18 <_printf_common>:
 8010f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f1c:	4616      	mov	r6, r2
 8010f1e:	4699      	mov	r9, r3
 8010f20:	688a      	ldr	r2, [r1, #8]
 8010f22:	690b      	ldr	r3, [r1, #16]
 8010f24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010f28:	4293      	cmp	r3, r2
 8010f2a:	bfb8      	it	lt
 8010f2c:	4613      	movlt	r3, r2
 8010f2e:	6033      	str	r3, [r6, #0]
 8010f30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010f34:	4607      	mov	r7, r0
 8010f36:	460c      	mov	r4, r1
 8010f38:	b10a      	cbz	r2, 8010f3e <_printf_common+0x26>
 8010f3a:	3301      	adds	r3, #1
 8010f3c:	6033      	str	r3, [r6, #0]
 8010f3e:	6823      	ldr	r3, [r4, #0]
 8010f40:	0699      	lsls	r1, r3, #26
 8010f42:	bf42      	ittt	mi
 8010f44:	6833      	ldrmi	r3, [r6, #0]
 8010f46:	3302      	addmi	r3, #2
 8010f48:	6033      	strmi	r3, [r6, #0]
 8010f4a:	6825      	ldr	r5, [r4, #0]
 8010f4c:	f015 0506 	ands.w	r5, r5, #6
 8010f50:	d106      	bne.n	8010f60 <_printf_common+0x48>
 8010f52:	f104 0a19 	add.w	sl, r4, #25
 8010f56:	68e3      	ldr	r3, [r4, #12]
 8010f58:	6832      	ldr	r2, [r6, #0]
 8010f5a:	1a9b      	subs	r3, r3, r2
 8010f5c:	42ab      	cmp	r3, r5
 8010f5e:	dc26      	bgt.n	8010fae <_printf_common+0x96>
 8010f60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010f64:	1e13      	subs	r3, r2, #0
 8010f66:	6822      	ldr	r2, [r4, #0]
 8010f68:	bf18      	it	ne
 8010f6a:	2301      	movne	r3, #1
 8010f6c:	0692      	lsls	r2, r2, #26
 8010f6e:	d42b      	bmi.n	8010fc8 <_printf_common+0xb0>
 8010f70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010f74:	4649      	mov	r1, r9
 8010f76:	4638      	mov	r0, r7
 8010f78:	47c0      	blx	r8
 8010f7a:	3001      	adds	r0, #1
 8010f7c:	d01e      	beq.n	8010fbc <_printf_common+0xa4>
 8010f7e:	6823      	ldr	r3, [r4, #0]
 8010f80:	68e5      	ldr	r5, [r4, #12]
 8010f82:	6832      	ldr	r2, [r6, #0]
 8010f84:	f003 0306 	and.w	r3, r3, #6
 8010f88:	2b04      	cmp	r3, #4
 8010f8a:	bf08      	it	eq
 8010f8c:	1aad      	subeq	r5, r5, r2
 8010f8e:	68a3      	ldr	r3, [r4, #8]
 8010f90:	6922      	ldr	r2, [r4, #16]
 8010f92:	bf0c      	ite	eq
 8010f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f98:	2500      	movne	r5, #0
 8010f9a:	4293      	cmp	r3, r2
 8010f9c:	bfc4      	itt	gt
 8010f9e:	1a9b      	subgt	r3, r3, r2
 8010fa0:	18ed      	addgt	r5, r5, r3
 8010fa2:	2600      	movs	r6, #0
 8010fa4:	341a      	adds	r4, #26
 8010fa6:	42b5      	cmp	r5, r6
 8010fa8:	d11a      	bne.n	8010fe0 <_printf_common+0xc8>
 8010faa:	2000      	movs	r0, #0
 8010fac:	e008      	b.n	8010fc0 <_printf_common+0xa8>
 8010fae:	2301      	movs	r3, #1
 8010fb0:	4652      	mov	r2, sl
 8010fb2:	4649      	mov	r1, r9
 8010fb4:	4638      	mov	r0, r7
 8010fb6:	47c0      	blx	r8
 8010fb8:	3001      	adds	r0, #1
 8010fba:	d103      	bne.n	8010fc4 <_printf_common+0xac>
 8010fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8010fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fc4:	3501      	adds	r5, #1
 8010fc6:	e7c6      	b.n	8010f56 <_printf_common+0x3e>
 8010fc8:	18e1      	adds	r1, r4, r3
 8010fca:	1c5a      	adds	r2, r3, #1
 8010fcc:	2030      	movs	r0, #48	; 0x30
 8010fce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010fd2:	4422      	add	r2, r4
 8010fd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010fd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010fdc:	3302      	adds	r3, #2
 8010fde:	e7c7      	b.n	8010f70 <_printf_common+0x58>
 8010fe0:	2301      	movs	r3, #1
 8010fe2:	4622      	mov	r2, r4
 8010fe4:	4649      	mov	r1, r9
 8010fe6:	4638      	mov	r0, r7
 8010fe8:	47c0      	blx	r8
 8010fea:	3001      	adds	r0, #1
 8010fec:	d0e6      	beq.n	8010fbc <_printf_common+0xa4>
 8010fee:	3601      	adds	r6, #1
 8010ff0:	e7d9      	b.n	8010fa6 <_printf_common+0x8e>
	...

08010ff4 <_printf_i>:
 8010ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ff8:	7e0f      	ldrb	r7, [r1, #24]
 8010ffa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010ffc:	2f78      	cmp	r7, #120	; 0x78
 8010ffe:	4691      	mov	r9, r2
 8011000:	4680      	mov	r8, r0
 8011002:	460c      	mov	r4, r1
 8011004:	469a      	mov	sl, r3
 8011006:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801100a:	d807      	bhi.n	801101c <_printf_i+0x28>
 801100c:	2f62      	cmp	r7, #98	; 0x62
 801100e:	d80a      	bhi.n	8011026 <_printf_i+0x32>
 8011010:	2f00      	cmp	r7, #0
 8011012:	f000 80d8 	beq.w	80111c6 <_printf_i+0x1d2>
 8011016:	2f58      	cmp	r7, #88	; 0x58
 8011018:	f000 80a3 	beq.w	8011162 <_printf_i+0x16e>
 801101c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011020:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011024:	e03a      	b.n	801109c <_printf_i+0xa8>
 8011026:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801102a:	2b15      	cmp	r3, #21
 801102c:	d8f6      	bhi.n	801101c <_printf_i+0x28>
 801102e:	a101      	add	r1, pc, #4	; (adr r1, 8011034 <_printf_i+0x40>)
 8011030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011034:	0801108d 	.word	0x0801108d
 8011038:	080110a1 	.word	0x080110a1
 801103c:	0801101d 	.word	0x0801101d
 8011040:	0801101d 	.word	0x0801101d
 8011044:	0801101d 	.word	0x0801101d
 8011048:	0801101d 	.word	0x0801101d
 801104c:	080110a1 	.word	0x080110a1
 8011050:	0801101d 	.word	0x0801101d
 8011054:	0801101d 	.word	0x0801101d
 8011058:	0801101d 	.word	0x0801101d
 801105c:	0801101d 	.word	0x0801101d
 8011060:	080111ad 	.word	0x080111ad
 8011064:	080110d1 	.word	0x080110d1
 8011068:	0801118f 	.word	0x0801118f
 801106c:	0801101d 	.word	0x0801101d
 8011070:	0801101d 	.word	0x0801101d
 8011074:	080111cf 	.word	0x080111cf
 8011078:	0801101d 	.word	0x0801101d
 801107c:	080110d1 	.word	0x080110d1
 8011080:	0801101d 	.word	0x0801101d
 8011084:	0801101d 	.word	0x0801101d
 8011088:	08011197 	.word	0x08011197
 801108c:	682b      	ldr	r3, [r5, #0]
 801108e:	1d1a      	adds	r2, r3, #4
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	602a      	str	r2, [r5, #0]
 8011094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011098:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801109c:	2301      	movs	r3, #1
 801109e:	e0a3      	b.n	80111e8 <_printf_i+0x1f4>
 80110a0:	6820      	ldr	r0, [r4, #0]
 80110a2:	6829      	ldr	r1, [r5, #0]
 80110a4:	0606      	lsls	r6, r0, #24
 80110a6:	f101 0304 	add.w	r3, r1, #4
 80110aa:	d50a      	bpl.n	80110c2 <_printf_i+0xce>
 80110ac:	680e      	ldr	r6, [r1, #0]
 80110ae:	602b      	str	r3, [r5, #0]
 80110b0:	2e00      	cmp	r6, #0
 80110b2:	da03      	bge.n	80110bc <_printf_i+0xc8>
 80110b4:	232d      	movs	r3, #45	; 0x2d
 80110b6:	4276      	negs	r6, r6
 80110b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80110bc:	485e      	ldr	r0, [pc, #376]	; (8011238 <_printf_i+0x244>)
 80110be:	230a      	movs	r3, #10
 80110c0:	e019      	b.n	80110f6 <_printf_i+0x102>
 80110c2:	680e      	ldr	r6, [r1, #0]
 80110c4:	602b      	str	r3, [r5, #0]
 80110c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80110ca:	bf18      	it	ne
 80110cc:	b236      	sxthne	r6, r6
 80110ce:	e7ef      	b.n	80110b0 <_printf_i+0xbc>
 80110d0:	682b      	ldr	r3, [r5, #0]
 80110d2:	6820      	ldr	r0, [r4, #0]
 80110d4:	1d19      	adds	r1, r3, #4
 80110d6:	6029      	str	r1, [r5, #0]
 80110d8:	0601      	lsls	r1, r0, #24
 80110da:	d501      	bpl.n	80110e0 <_printf_i+0xec>
 80110dc:	681e      	ldr	r6, [r3, #0]
 80110de:	e002      	b.n	80110e6 <_printf_i+0xf2>
 80110e0:	0646      	lsls	r6, r0, #25
 80110e2:	d5fb      	bpl.n	80110dc <_printf_i+0xe8>
 80110e4:	881e      	ldrh	r6, [r3, #0]
 80110e6:	4854      	ldr	r0, [pc, #336]	; (8011238 <_printf_i+0x244>)
 80110e8:	2f6f      	cmp	r7, #111	; 0x6f
 80110ea:	bf0c      	ite	eq
 80110ec:	2308      	moveq	r3, #8
 80110ee:	230a      	movne	r3, #10
 80110f0:	2100      	movs	r1, #0
 80110f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80110f6:	6865      	ldr	r5, [r4, #4]
 80110f8:	60a5      	str	r5, [r4, #8]
 80110fa:	2d00      	cmp	r5, #0
 80110fc:	bfa2      	ittt	ge
 80110fe:	6821      	ldrge	r1, [r4, #0]
 8011100:	f021 0104 	bicge.w	r1, r1, #4
 8011104:	6021      	strge	r1, [r4, #0]
 8011106:	b90e      	cbnz	r6, 801110c <_printf_i+0x118>
 8011108:	2d00      	cmp	r5, #0
 801110a:	d04d      	beq.n	80111a8 <_printf_i+0x1b4>
 801110c:	4615      	mov	r5, r2
 801110e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011112:	fb03 6711 	mls	r7, r3, r1, r6
 8011116:	5dc7      	ldrb	r7, [r0, r7]
 8011118:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801111c:	4637      	mov	r7, r6
 801111e:	42bb      	cmp	r3, r7
 8011120:	460e      	mov	r6, r1
 8011122:	d9f4      	bls.n	801110e <_printf_i+0x11a>
 8011124:	2b08      	cmp	r3, #8
 8011126:	d10b      	bne.n	8011140 <_printf_i+0x14c>
 8011128:	6823      	ldr	r3, [r4, #0]
 801112a:	07de      	lsls	r6, r3, #31
 801112c:	d508      	bpl.n	8011140 <_printf_i+0x14c>
 801112e:	6923      	ldr	r3, [r4, #16]
 8011130:	6861      	ldr	r1, [r4, #4]
 8011132:	4299      	cmp	r1, r3
 8011134:	bfde      	ittt	le
 8011136:	2330      	movle	r3, #48	; 0x30
 8011138:	f805 3c01 	strble.w	r3, [r5, #-1]
 801113c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011140:	1b52      	subs	r2, r2, r5
 8011142:	6122      	str	r2, [r4, #16]
 8011144:	f8cd a000 	str.w	sl, [sp]
 8011148:	464b      	mov	r3, r9
 801114a:	aa03      	add	r2, sp, #12
 801114c:	4621      	mov	r1, r4
 801114e:	4640      	mov	r0, r8
 8011150:	f7ff fee2 	bl	8010f18 <_printf_common>
 8011154:	3001      	adds	r0, #1
 8011156:	d14c      	bne.n	80111f2 <_printf_i+0x1fe>
 8011158:	f04f 30ff 	mov.w	r0, #4294967295
 801115c:	b004      	add	sp, #16
 801115e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011162:	4835      	ldr	r0, [pc, #212]	; (8011238 <_printf_i+0x244>)
 8011164:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011168:	6829      	ldr	r1, [r5, #0]
 801116a:	6823      	ldr	r3, [r4, #0]
 801116c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011170:	6029      	str	r1, [r5, #0]
 8011172:	061d      	lsls	r5, r3, #24
 8011174:	d514      	bpl.n	80111a0 <_printf_i+0x1ac>
 8011176:	07df      	lsls	r7, r3, #31
 8011178:	bf44      	itt	mi
 801117a:	f043 0320 	orrmi.w	r3, r3, #32
 801117e:	6023      	strmi	r3, [r4, #0]
 8011180:	b91e      	cbnz	r6, 801118a <_printf_i+0x196>
 8011182:	6823      	ldr	r3, [r4, #0]
 8011184:	f023 0320 	bic.w	r3, r3, #32
 8011188:	6023      	str	r3, [r4, #0]
 801118a:	2310      	movs	r3, #16
 801118c:	e7b0      	b.n	80110f0 <_printf_i+0xfc>
 801118e:	6823      	ldr	r3, [r4, #0]
 8011190:	f043 0320 	orr.w	r3, r3, #32
 8011194:	6023      	str	r3, [r4, #0]
 8011196:	2378      	movs	r3, #120	; 0x78
 8011198:	4828      	ldr	r0, [pc, #160]	; (801123c <_printf_i+0x248>)
 801119a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801119e:	e7e3      	b.n	8011168 <_printf_i+0x174>
 80111a0:	0659      	lsls	r1, r3, #25
 80111a2:	bf48      	it	mi
 80111a4:	b2b6      	uxthmi	r6, r6
 80111a6:	e7e6      	b.n	8011176 <_printf_i+0x182>
 80111a8:	4615      	mov	r5, r2
 80111aa:	e7bb      	b.n	8011124 <_printf_i+0x130>
 80111ac:	682b      	ldr	r3, [r5, #0]
 80111ae:	6826      	ldr	r6, [r4, #0]
 80111b0:	6961      	ldr	r1, [r4, #20]
 80111b2:	1d18      	adds	r0, r3, #4
 80111b4:	6028      	str	r0, [r5, #0]
 80111b6:	0635      	lsls	r5, r6, #24
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	d501      	bpl.n	80111c0 <_printf_i+0x1cc>
 80111bc:	6019      	str	r1, [r3, #0]
 80111be:	e002      	b.n	80111c6 <_printf_i+0x1d2>
 80111c0:	0670      	lsls	r0, r6, #25
 80111c2:	d5fb      	bpl.n	80111bc <_printf_i+0x1c8>
 80111c4:	8019      	strh	r1, [r3, #0]
 80111c6:	2300      	movs	r3, #0
 80111c8:	6123      	str	r3, [r4, #16]
 80111ca:	4615      	mov	r5, r2
 80111cc:	e7ba      	b.n	8011144 <_printf_i+0x150>
 80111ce:	682b      	ldr	r3, [r5, #0]
 80111d0:	1d1a      	adds	r2, r3, #4
 80111d2:	602a      	str	r2, [r5, #0]
 80111d4:	681d      	ldr	r5, [r3, #0]
 80111d6:	6862      	ldr	r2, [r4, #4]
 80111d8:	2100      	movs	r1, #0
 80111da:	4628      	mov	r0, r5
 80111dc:	f7ef f898 	bl	8000310 <memchr>
 80111e0:	b108      	cbz	r0, 80111e6 <_printf_i+0x1f2>
 80111e2:	1b40      	subs	r0, r0, r5
 80111e4:	6060      	str	r0, [r4, #4]
 80111e6:	6863      	ldr	r3, [r4, #4]
 80111e8:	6123      	str	r3, [r4, #16]
 80111ea:	2300      	movs	r3, #0
 80111ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111f0:	e7a8      	b.n	8011144 <_printf_i+0x150>
 80111f2:	6923      	ldr	r3, [r4, #16]
 80111f4:	462a      	mov	r2, r5
 80111f6:	4649      	mov	r1, r9
 80111f8:	4640      	mov	r0, r8
 80111fa:	47d0      	blx	sl
 80111fc:	3001      	adds	r0, #1
 80111fe:	d0ab      	beq.n	8011158 <_printf_i+0x164>
 8011200:	6823      	ldr	r3, [r4, #0]
 8011202:	079b      	lsls	r3, r3, #30
 8011204:	d413      	bmi.n	801122e <_printf_i+0x23a>
 8011206:	68e0      	ldr	r0, [r4, #12]
 8011208:	9b03      	ldr	r3, [sp, #12]
 801120a:	4298      	cmp	r0, r3
 801120c:	bfb8      	it	lt
 801120e:	4618      	movlt	r0, r3
 8011210:	e7a4      	b.n	801115c <_printf_i+0x168>
 8011212:	2301      	movs	r3, #1
 8011214:	4632      	mov	r2, r6
 8011216:	4649      	mov	r1, r9
 8011218:	4640      	mov	r0, r8
 801121a:	47d0      	blx	sl
 801121c:	3001      	adds	r0, #1
 801121e:	d09b      	beq.n	8011158 <_printf_i+0x164>
 8011220:	3501      	adds	r5, #1
 8011222:	68e3      	ldr	r3, [r4, #12]
 8011224:	9903      	ldr	r1, [sp, #12]
 8011226:	1a5b      	subs	r3, r3, r1
 8011228:	42ab      	cmp	r3, r5
 801122a:	dcf2      	bgt.n	8011212 <_printf_i+0x21e>
 801122c:	e7eb      	b.n	8011206 <_printf_i+0x212>
 801122e:	2500      	movs	r5, #0
 8011230:	f104 0619 	add.w	r6, r4, #25
 8011234:	e7f5      	b.n	8011222 <_printf_i+0x22e>
 8011236:	bf00      	nop
 8011238:	08014539 	.word	0x08014539
 801123c:	0801454a 	.word	0x0801454a

08011240 <_sbrk_r>:
 8011240:	b538      	push	{r3, r4, r5, lr}
 8011242:	4d06      	ldr	r5, [pc, #24]	; (801125c <_sbrk_r+0x1c>)
 8011244:	2300      	movs	r3, #0
 8011246:	4604      	mov	r4, r0
 8011248:	4608      	mov	r0, r1
 801124a:	602b      	str	r3, [r5, #0]
 801124c:	f7ef fc7e 	bl	8000b4c <_sbrk>
 8011250:	1c43      	adds	r3, r0, #1
 8011252:	d102      	bne.n	801125a <_sbrk_r+0x1a>
 8011254:	682b      	ldr	r3, [r5, #0]
 8011256:	b103      	cbz	r3, 801125a <_sbrk_r+0x1a>
 8011258:	6023      	str	r3, [r4, #0]
 801125a:	bd38      	pop	{r3, r4, r5, pc}
 801125c:	240032f4 	.word	0x240032f4

08011260 <__sread>:
 8011260:	b510      	push	{r4, lr}
 8011262:	460c      	mov	r4, r1
 8011264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011268:	f000 fa9e 	bl	80117a8 <_read_r>
 801126c:	2800      	cmp	r0, #0
 801126e:	bfab      	itete	ge
 8011270:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011272:	89a3      	ldrhlt	r3, [r4, #12]
 8011274:	181b      	addge	r3, r3, r0
 8011276:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801127a:	bfac      	ite	ge
 801127c:	6563      	strge	r3, [r4, #84]	; 0x54
 801127e:	81a3      	strhlt	r3, [r4, #12]
 8011280:	bd10      	pop	{r4, pc}

08011282 <__swrite>:
 8011282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011286:	461f      	mov	r7, r3
 8011288:	898b      	ldrh	r3, [r1, #12]
 801128a:	05db      	lsls	r3, r3, #23
 801128c:	4605      	mov	r5, r0
 801128e:	460c      	mov	r4, r1
 8011290:	4616      	mov	r6, r2
 8011292:	d505      	bpl.n	80112a0 <__swrite+0x1e>
 8011294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011298:	2302      	movs	r3, #2
 801129a:	2200      	movs	r2, #0
 801129c:	f000 f9d0 	bl	8011640 <_lseek_r>
 80112a0:	89a3      	ldrh	r3, [r4, #12]
 80112a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80112aa:	81a3      	strh	r3, [r4, #12]
 80112ac:	4632      	mov	r2, r6
 80112ae:	463b      	mov	r3, r7
 80112b0:	4628      	mov	r0, r5
 80112b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112b6:	f000 b869 	b.w	801138c <_write_r>

080112ba <__sseek>:
 80112ba:	b510      	push	{r4, lr}
 80112bc:	460c      	mov	r4, r1
 80112be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112c2:	f000 f9bd 	bl	8011640 <_lseek_r>
 80112c6:	1c43      	adds	r3, r0, #1
 80112c8:	89a3      	ldrh	r3, [r4, #12]
 80112ca:	bf15      	itete	ne
 80112cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80112ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80112d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80112d6:	81a3      	strheq	r3, [r4, #12]
 80112d8:	bf18      	it	ne
 80112da:	81a3      	strhne	r3, [r4, #12]
 80112dc:	bd10      	pop	{r4, pc}

080112de <__sclose>:
 80112de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112e2:	f000 b8db 	b.w	801149c <_close_r>
	...

080112e8 <__swbuf_r>:
 80112e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ea:	460e      	mov	r6, r1
 80112ec:	4614      	mov	r4, r2
 80112ee:	4605      	mov	r5, r0
 80112f0:	b118      	cbz	r0, 80112fa <__swbuf_r+0x12>
 80112f2:	6983      	ldr	r3, [r0, #24]
 80112f4:	b90b      	cbnz	r3, 80112fa <__swbuf_r+0x12>
 80112f6:	f7ff f9bf 	bl	8010678 <__sinit>
 80112fa:	4b21      	ldr	r3, [pc, #132]	; (8011380 <__swbuf_r+0x98>)
 80112fc:	429c      	cmp	r4, r3
 80112fe:	d12b      	bne.n	8011358 <__swbuf_r+0x70>
 8011300:	686c      	ldr	r4, [r5, #4]
 8011302:	69a3      	ldr	r3, [r4, #24]
 8011304:	60a3      	str	r3, [r4, #8]
 8011306:	89a3      	ldrh	r3, [r4, #12]
 8011308:	071a      	lsls	r2, r3, #28
 801130a:	d52f      	bpl.n	801136c <__swbuf_r+0x84>
 801130c:	6923      	ldr	r3, [r4, #16]
 801130e:	b36b      	cbz	r3, 801136c <__swbuf_r+0x84>
 8011310:	6923      	ldr	r3, [r4, #16]
 8011312:	6820      	ldr	r0, [r4, #0]
 8011314:	1ac0      	subs	r0, r0, r3
 8011316:	6963      	ldr	r3, [r4, #20]
 8011318:	b2f6      	uxtb	r6, r6
 801131a:	4283      	cmp	r3, r0
 801131c:	4637      	mov	r7, r6
 801131e:	dc04      	bgt.n	801132a <__swbuf_r+0x42>
 8011320:	4621      	mov	r1, r4
 8011322:	4628      	mov	r0, r5
 8011324:	f000 f950 	bl	80115c8 <_fflush_r>
 8011328:	bb30      	cbnz	r0, 8011378 <__swbuf_r+0x90>
 801132a:	68a3      	ldr	r3, [r4, #8]
 801132c:	3b01      	subs	r3, #1
 801132e:	60a3      	str	r3, [r4, #8]
 8011330:	6823      	ldr	r3, [r4, #0]
 8011332:	1c5a      	adds	r2, r3, #1
 8011334:	6022      	str	r2, [r4, #0]
 8011336:	701e      	strb	r6, [r3, #0]
 8011338:	6963      	ldr	r3, [r4, #20]
 801133a:	3001      	adds	r0, #1
 801133c:	4283      	cmp	r3, r0
 801133e:	d004      	beq.n	801134a <__swbuf_r+0x62>
 8011340:	89a3      	ldrh	r3, [r4, #12]
 8011342:	07db      	lsls	r3, r3, #31
 8011344:	d506      	bpl.n	8011354 <__swbuf_r+0x6c>
 8011346:	2e0a      	cmp	r6, #10
 8011348:	d104      	bne.n	8011354 <__swbuf_r+0x6c>
 801134a:	4621      	mov	r1, r4
 801134c:	4628      	mov	r0, r5
 801134e:	f000 f93b 	bl	80115c8 <_fflush_r>
 8011352:	b988      	cbnz	r0, 8011378 <__swbuf_r+0x90>
 8011354:	4638      	mov	r0, r7
 8011356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011358:	4b0a      	ldr	r3, [pc, #40]	; (8011384 <__swbuf_r+0x9c>)
 801135a:	429c      	cmp	r4, r3
 801135c:	d101      	bne.n	8011362 <__swbuf_r+0x7a>
 801135e:	68ac      	ldr	r4, [r5, #8]
 8011360:	e7cf      	b.n	8011302 <__swbuf_r+0x1a>
 8011362:	4b09      	ldr	r3, [pc, #36]	; (8011388 <__swbuf_r+0xa0>)
 8011364:	429c      	cmp	r4, r3
 8011366:	bf08      	it	eq
 8011368:	68ec      	ldreq	r4, [r5, #12]
 801136a:	e7ca      	b.n	8011302 <__swbuf_r+0x1a>
 801136c:	4621      	mov	r1, r4
 801136e:	4628      	mov	r0, r5
 8011370:	f000 f81e 	bl	80113b0 <__swsetup_r>
 8011374:	2800      	cmp	r0, #0
 8011376:	d0cb      	beq.n	8011310 <__swbuf_r+0x28>
 8011378:	f04f 37ff 	mov.w	r7, #4294967295
 801137c:	e7ea      	b.n	8011354 <__swbuf_r+0x6c>
 801137e:	bf00      	nop
 8011380:	080144e8 	.word	0x080144e8
 8011384:	08014508 	.word	0x08014508
 8011388:	080144c8 	.word	0x080144c8

0801138c <_write_r>:
 801138c:	b538      	push	{r3, r4, r5, lr}
 801138e:	4d07      	ldr	r5, [pc, #28]	; (80113ac <_write_r+0x20>)
 8011390:	4604      	mov	r4, r0
 8011392:	4608      	mov	r0, r1
 8011394:	4611      	mov	r1, r2
 8011396:	2200      	movs	r2, #0
 8011398:	602a      	str	r2, [r5, #0]
 801139a:	461a      	mov	r2, r3
 801139c:	f7ef fb85 	bl	8000aaa <_write>
 80113a0:	1c43      	adds	r3, r0, #1
 80113a2:	d102      	bne.n	80113aa <_write_r+0x1e>
 80113a4:	682b      	ldr	r3, [r5, #0]
 80113a6:	b103      	cbz	r3, 80113aa <_write_r+0x1e>
 80113a8:	6023      	str	r3, [r4, #0]
 80113aa:	bd38      	pop	{r3, r4, r5, pc}
 80113ac:	240032f4 	.word	0x240032f4

080113b0 <__swsetup_r>:
 80113b0:	4b32      	ldr	r3, [pc, #200]	; (801147c <__swsetup_r+0xcc>)
 80113b2:	b570      	push	{r4, r5, r6, lr}
 80113b4:	681d      	ldr	r5, [r3, #0]
 80113b6:	4606      	mov	r6, r0
 80113b8:	460c      	mov	r4, r1
 80113ba:	b125      	cbz	r5, 80113c6 <__swsetup_r+0x16>
 80113bc:	69ab      	ldr	r3, [r5, #24]
 80113be:	b913      	cbnz	r3, 80113c6 <__swsetup_r+0x16>
 80113c0:	4628      	mov	r0, r5
 80113c2:	f7ff f959 	bl	8010678 <__sinit>
 80113c6:	4b2e      	ldr	r3, [pc, #184]	; (8011480 <__swsetup_r+0xd0>)
 80113c8:	429c      	cmp	r4, r3
 80113ca:	d10f      	bne.n	80113ec <__swsetup_r+0x3c>
 80113cc:	686c      	ldr	r4, [r5, #4]
 80113ce:	89a3      	ldrh	r3, [r4, #12]
 80113d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80113d4:	0719      	lsls	r1, r3, #28
 80113d6:	d42c      	bmi.n	8011432 <__swsetup_r+0x82>
 80113d8:	06dd      	lsls	r5, r3, #27
 80113da:	d411      	bmi.n	8011400 <__swsetup_r+0x50>
 80113dc:	2309      	movs	r3, #9
 80113de:	6033      	str	r3, [r6, #0]
 80113e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80113e4:	81a3      	strh	r3, [r4, #12]
 80113e6:	f04f 30ff 	mov.w	r0, #4294967295
 80113ea:	e03e      	b.n	801146a <__swsetup_r+0xba>
 80113ec:	4b25      	ldr	r3, [pc, #148]	; (8011484 <__swsetup_r+0xd4>)
 80113ee:	429c      	cmp	r4, r3
 80113f0:	d101      	bne.n	80113f6 <__swsetup_r+0x46>
 80113f2:	68ac      	ldr	r4, [r5, #8]
 80113f4:	e7eb      	b.n	80113ce <__swsetup_r+0x1e>
 80113f6:	4b24      	ldr	r3, [pc, #144]	; (8011488 <__swsetup_r+0xd8>)
 80113f8:	429c      	cmp	r4, r3
 80113fa:	bf08      	it	eq
 80113fc:	68ec      	ldreq	r4, [r5, #12]
 80113fe:	e7e6      	b.n	80113ce <__swsetup_r+0x1e>
 8011400:	0758      	lsls	r0, r3, #29
 8011402:	d512      	bpl.n	801142a <__swsetup_r+0x7a>
 8011404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011406:	b141      	cbz	r1, 801141a <__swsetup_r+0x6a>
 8011408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801140c:	4299      	cmp	r1, r3
 801140e:	d002      	beq.n	8011416 <__swsetup_r+0x66>
 8011410:	4630      	mov	r0, r6
 8011412:	f7ff f9eb 	bl	80107ec <_free_r>
 8011416:	2300      	movs	r3, #0
 8011418:	6363      	str	r3, [r4, #52]	; 0x34
 801141a:	89a3      	ldrh	r3, [r4, #12]
 801141c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011420:	81a3      	strh	r3, [r4, #12]
 8011422:	2300      	movs	r3, #0
 8011424:	6063      	str	r3, [r4, #4]
 8011426:	6923      	ldr	r3, [r4, #16]
 8011428:	6023      	str	r3, [r4, #0]
 801142a:	89a3      	ldrh	r3, [r4, #12]
 801142c:	f043 0308 	orr.w	r3, r3, #8
 8011430:	81a3      	strh	r3, [r4, #12]
 8011432:	6923      	ldr	r3, [r4, #16]
 8011434:	b94b      	cbnz	r3, 801144a <__swsetup_r+0x9a>
 8011436:	89a3      	ldrh	r3, [r4, #12]
 8011438:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801143c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011440:	d003      	beq.n	801144a <__swsetup_r+0x9a>
 8011442:	4621      	mov	r1, r4
 8011444:	4630      	mov	r0, r6
 8011446:	f000 f933 	bl	80116b0 <__smakebuf_r>
 801144a:	89a0      	ldrh	r0, [r4, #12]
 801144c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011450:	f010 0301 	ands.w	r3, r0, #1
 8011454:	d00a      	beq.n	801146c <__swsetup_r+0xbc>
 8011456:	2300      	movs	r3, #0
 8011458:	60a3      	str	r3, [r4, #8]
 801145a:	6963      	ldr	r3, [r4, #20]
 801145c:	425b      	negs	r3, r3
 801145e:	61a3      	str	r3, [r4, #24]
 8011460:	6923      	ldr	r3, [r4, #16]
 8011462:	b943      	cbnz	r3, 8011476 <__swsetup_r+0xc6>
 8011464:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011468:	d1ba      	bne.n	80113e0 <__swsetup_r+0x30>
 801146a:	bd70      	pop	{r4, r5, r6, pc}
 801146c:	0781      	lsls	r1, r0, #30
 801146e:	bf58      	it	pl
 8011470:	6963      	ldrpl	r3, [r4, #20]
 8011472:	60a3      	str	r3, [r4, #8]
 8011474:	e7f4      	b.n	8011460 <__swsetup_r+0xb0>
 8011476:	2000      	movs	r0, #0
 8011478:	e7f7      	b.n	801146a <__swsetup_r+0xba>
 801147a:	bf00      	nop
 801147c:	24000030 	.word	0x24000030
 8011480:	080144e8 	.word	0x080144e8
 8011484:	08014508 	.word	0x08014508
 8011488:	080144c8 	.word	0x080144c8

0801148c <abort>:
 801148c:	b508      	push	{r3, lr}
 801148e:	2006      	movs	r0, #6
 8011490:	f000 f9c4 	bl	801181c <raise>
 8011494:	2001      	movs	r0, #1
 8011496:	f7ef fae1 	bl	8000a5c <_exit>
	...

0801149c <_close_r>:
 801149c:	b538      	push	{r3, r4, r5, lr}
 801149e:	4d06      	ldr	r5, [pc, #24]	; (80114b8 <_close_r+0x1c>)
 80114a0:	2300      	movs	r3, #0
 80114a2:	4604      	mov	r4, r0
 80114a4:	4608      	mov	r0, r1
 80114a6:	602b      	str	r3, [r5, #0]
 80114a8:	f7ef fb1b 	bl	8000ae2 <_close>
 80114ac:	1c43      	adds	r3, r0, #1
 80114ae:	d102      	bne.n	80114b6 <_close_r+0x1a>
 80114b0:	682b      	ldr	r3, [r5, #0]
 80114b2:	b103      	cbz	r3, 80114b6 <_close_r+0x1a>
 80114b4:	6023      	str	r3, [r4, #0]
 80114b6:	bd38      	pop	{r3, r4, r5, pc}
 80114b8:	240032f4 	.word	0x240032f4

080114bc <__sflush_r>:
 80114bc:	898a      	ldrh	r2, [r1, #12]
 80114be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114c2:	4605      	mov	r5, r0
 80114c4:	0710      	lsls	r0, r2, #28
 80114c6:	460c      	mov	r4, r1
 80114c8:	d458      	bmi.n	801157c <__sflush_r+0xc0>
 80114ca:	684b      	ldr	r3, [r1, #4]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	dc05      	bgt.n	80114dc <__sflush_r+0x20>
 80114d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	dc02      	bgt.n	80114dc <__sflush_r+0x20>
 80114d6:	2000      	movs	r0, #0
 80114d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80114de:	2e00      	cmp	r6, #0
 80114e0:	d0f9      	beq.n	80114d6 <__sflush_r+0x1a>
 80114e2:	2300      	movs	r3, #0
 80114e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80114e8:	682f      	ldr	r7, [r5, #0]
 80114ea:	602b      	str	r3, [r5, #0]
 80114ec:	d032      	beq.n	8011554 <__sflush_r+0x98>
 80114ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80114f0:	89a3      	ldrh	r3, [r4, #12]
 80114f2:	075a      	lsls	r2, r3, #29
 80114f4:	d505      	bpl.n	8011502 <__sflush_r+0x46>
 80114f6:	6863      	ldr	r3, [r4, #4]
 80114f8:	1ac0      	subs	r0, r0, r3
 80114fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80114fc:	b10b      	cbz	r3, 8011502 <__sflush_r+0x46>
 80114fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011500:	1ac0      	subs	r0, r0, r3
 8011502:	2300      	movs	r3, #0
 8011504:	4602      	mov	r2, r0
 8011506:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011508:	6a21      	ldr	r1, [r4, #32]
 801150a:	4628      	mov	r0, r5
 801150c:	47b0      	blx	r6
 801150e:	1c43      	adds	r3, r0, #1
 8011510:	89a3      	ldrh	r3, [r4, #12]
 8011512:	d106      	bne.n	8011522 <__sflush_r+0x66>
 8011514:	6829      	ldr	r1, [r5, #0]
 8011516:	291d      	cmp	r1, #29
 8011518:	d82c      	bhi.n	8011574 <__sflush_r+0xb8>
 801151a:	4a2a      	ldr	r2, [pc, #168]	; (80115c4 <__sflush_r+0x108>)
 801151c:	40ca      	lsrs	r2, r1
 801151e:	07d6      	lsls	r6, r2, #31
 8011520:	d528      	bpl.n	8011574 <__sflush_r+0xb8>
 8011522:	2200      	movs	r2, #0
 8011524:	6062      	str	r2, [r4, #4]
 8011526:	04d9      	lsls	r1, r3, #19
 8011528:	6922      	ldr	r2, [r4, #16]
 801152a:	6022      	str	r2, [r4, #0]
 801152c:	d504      	bpl.n	8011538 <__sflush_r+0x7c>
 801152e:	1c42      	adds	r2, r0, #1
 8011530:	d101      	bne.n	8011536 <__sflush_r+0x7a>
 8011532:	682b      	ldr	r3, [r5, #0]
 8011534:	b903      	cbnz	r3, 8011538 <__sflush_r+0x7c>
 8011536:	6560      	str	r0, [r4, #84]	; 0x54
 8011538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801153a:	602f      	str	r7, [r5, #0]
 801153c:	2900      	cmp	r1, #0
 801153e:	d0ca      	beq.n	80114d6 <__sflush_r+0x1a>
 8011540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011544:	4299      	cmp	r1, r3
 8011546:	d002      	beq.n	801154e <__sflush_r+0x92>
 8011548:	4628      	mov	r0, r5
 801154a:	f7ff f94f 	bl	80107ec <_free_r>
 801154e:	2000      	movs	r0, #0
 8011550:	6360      	str	r0, [r4, #52]	; 0x34
 8011552:	e7c1      	b.n	80114d8 <__sflush_r+0x1c>
 8011554:	6a21      	ldr	r1, [r4, #32]
 8011556:	2301      	movs	r3, #1
 8011558:	4628      	mov	r0, r5
 801155a:	47b0      	blx	r6
 801155c:	1c41      	adds	r1, r0, #1
 801155e:	d1c7      	bne.n	80114f0 <__sflush_r+0x34>
 8011560:	682b      	ldr	r3, [r5, #0]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d0c4      	beq.n	80114f0 <__sflush_r+0x34>
 8011566:	2b1d      	cmp	r3, #29
 8011568:	d001      	beq.n	801156e <__sflush_r+0xb2>
 801156a:	2b16      	cmp	r3, #22
 801156c:	d101      	bne.n	8011572 <__sflush_r+0xb6>
 801156e:	602f      	str	r7, [r5, #0]
 8011570:	e7b1      	b.n	80114d6 <__sflush_r+0x1a>
 8011572:	89a3      	ldrh	r3, [r4, #12]
 8011574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011578:	81a3      	strh	r3, [r4, #12]
 801157a:	e7ad      	b.n	80114d8 <__sflush_r+0x1c>
 801157c:	690f      	ldr	r7, [r1, #16]
 801157e:	2f00      	cmp	r7, #0
 8011580:	d0a9      	beq.n	80114d6 <__sflush_r+0x1a>
 8011582:	0793      	lsls	r3, r2, #30
 8011584:	680e      	ldr	r6, [r1, #0]
 8011586:	bf08      	it	eq
 8011588:	694b      	ldreq	r3, [r1, #20]
 801158a:	600f      	str	r7, [r1, #0]
 801158c:	bf18      	it	ne
 801158e:	2300      	movne	r3, #0
 8011590:	eba6 0807 	sub.w	r8, r6, r7
 8011594:	608b      	str	r3, [r1, #8]
 8011596:	f1b8 0f00 	cmp.w	r8, #0
 801159a:	dd9c      	ble.n	80114d6 <__sflush_r+0x1a>
 801159c:	6a21      	ldr	r1, [r4, #32]
 801159e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80115a0:	4643      	mov	r3, r8
 80115a2:	463a      	mov	r2, r7
 80115a4:	4628      	mov	r0, r5
 80115a6:	47b0      	blx	r6
 80115a8:	2800      	cmp	r0, #0
 80115aa:	dc06      	bgt.n	80115ba <__sflush_r+0xfe>
 80115ac:	89a3      	ldrh	r3, [r4, #12]
 80115ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115b2:	81a3      	strh	r3, [r4, #12]
 80115b4:	f04f 30ff 	mov.w	r0, #4294967295
 80115b8:	e78e      	b.n	80114d8 <__sflush_r+0x1c>
 80115ba:	4407      	add	r7, r0
 80115bc:	eba8 0800 	sub.w	r8, r8, r0
 80115c0:	e7e9      	b.n	8011596 <__sflush_r+0xda>
 80115c2:	bf00      	nop
 80115c4:	20400001 	.word	0x20400001

080115c8 <_fflush_r>:
 80115c8:	b538      	push	{r3, r4, r5, lr}
 80115ca:	690b      	ldr	r3, [r1, #16]
 80115cc:	4605      	mov	r5, r0
 80115ce:	460c      	mov	r4, r1
 80115d0:	b913      	cbnz	r3, 80115d8 <_fflush_r+0x10>
 80115d2:	2500      	movs	r5, #0
 80115d4:	4628      	mov	r0, r5
 80115d6:	bd38      	pop	{r3, r4, r5, pc}
 80115d8:	b118      	cbz	r0, 80115e2 <_fflush_r+0x1a>
 80115da:	6983      	ldr	r3, [r0, #24]
 80115dc:	b90b      	cbnz	r3, 80115e2 <_fflush_r+0x1a>
 80115de:	f7ff f84b 	bl	8010678 <__sinit>
 80115e2:	4b14      	ldr	r3, [pc, #80]	; (8011634 <_fflush_r+0x6c>)
 80115e4:	429c      	cmp	r4, r3
 80115e6:	d11b      	bne.n	8011620 <_fflush_r+0x58>
 80115e8:	686c      	ldr	r4, [r5, #4]
 80115ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d0ef      	beq.n	80115d2 <_fflush_r+0xa>
 80115f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80115f4:	07d0      	lsls	r0, r2, #31
 80115f6:	d404      	bmi.n	8011602 <_fflush_r+0x3a>
 80115f8:	0599      	lsls	r1, r3, #22
 80115fa:	d402      	bmi.n	8011602 <_fflush_r+0x3a>
 80115fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115fe:	f7ff f8eb 	bl	80107d8 <__retarget_lock_acquire_recursive>
 8011602:	4628      	mov	r0, r5
 8011604:	4621      	mov	r1, r4
 8011606:	f7ff ff59 	bl	80114bc <__sflush_r>
 801160a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801160c:	07da      	lsls	r2, r3, #31
 801160e:	4605      	mov	r5, r0
 8011610:	d4e0      	bmi.n	80115d4 <_fflush_r+0xc>
 8011612:	89a3      	ldrh	r3, [r4, #12]
 8011614:	059b      	lsls	r3, r3, #22
 8011616:	d4dd      	bmi.n	80115d4 <_fflush_r+0xc>
 8011618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801161a:	f7ff f8de 	bl	80107da <__retarget_lock_release_recursive>
 801161e:	e7d9      	b.n	80115d4 <_fflush_r+0xc>
 8011620:	4b05      	ldr	r3, [pc, #20]	; (8011638 <_fflush_r+0x70>)
 8011622:	429c      	cmp	r4, r3
 8011624:	d101      	bne.n	801162a <_fflush_r+0x62>
 8011626:	68ac      	ldr	r4, [r5, #8]
 8011628:	e7df      	b.n	80115ea <_fflush_r+0x22>
 801162a:	4b04      	ldr	r3, [pc, #16]	; (801163c <_fflush_r+0x74>)
 801162c:	429c      	cmp	r4, r3
 801162e:	bf08      	it	eq
 8011630:	68ec      	ldreq	r4, [r5, #12]
 8011632:	e7da      	b.n	80115ea <_fflush_r+0x22>
 8011634:	080144e8 	.word	0x080144e8
 8011638:	08014508 	.word	0x08014508
 801163c:	080144c8 	.word	0x080144c8

08011640 <_lseek_r>:
 8011640:	b538      	push	{r3, r4, r5, lr}
 8011642:	4d07      	ldr	r5, [pc, #28]	; (8011660 <_lseek_r+0x20>)
 8011644:	4604      	mov	r4, r0
 8011646:	4608      	mov	r0, r1
 8011648:	4611      	mov	r1, r2
 801164a:	2200      	movs	r2, #0
 801164c:	602a      	str	r2, [r5, #0]
 801164e:	461a      	mov	r2, r3
 8011650:	f7ef fa6e 	bl	8000b30 <_lseek>
 8011654:	1c43      	adds	r3, r0, #1
 8011656:	d102      	bne.n	801165e <_lseek_r+0x1e>
 8011658:	682b      	ldr	r3, [r5, #0]
 801165a:	b103      	cbz	r3, 801165e <_lseek_r+0x1e>
 801165c:	6023      	str	r3, [r4, #0]
 801165e:	bd38      	pop	{r3, r4, r5, pc}
 8011660:	240032f4 	.word	0x240032f4

08011664 <__swhatbuf_r>:
 8011664:	b570      	push	{r4, r5, r6, lr}
 8011666:	460e      	mov	r6, r1
 8011668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801166c:	2900      	cmp	r1, #0
 801166e:	b096      	sub	sp, #88	; 0x58
 8011670:	4614      	mov	r4, r2
 8011672:	461d      	mov	r5, r3
 8011674:	da08      	bge.n	8011688 <__swhatbuf_r+0x24>
 8011676:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801167a:	2200      	movs	r2, #0
 801167c:	602a      	str	r2, [r5, #0]
 801167e:	061a      	lsls	r2, r3, #24
 8011680:	d410      	bmi.n	80116a4 <__swhatbuf_r+0x40>
 8011682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011686:	e00e      	b.n	80116a6 <__swhatbuf_r+0x42>
 8011688:	466a      	mov	r2, sp
 801168a:	f000 f8e3 	bl	8011854 <_fstat_r>
 801168e:	2800      	cmp	r0, #0
 8011690:	dbf1      	blt.n	8011676 <__swhatbuf_r+0x12>
 8011692:	9a01      	ldr	r2, [sp, #4]
 8011694:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011698:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801169c:	425a      	negs	r2, r3
 801169e:	415a      	adcs	r2, r3
 80116a0:	602a      	str	r2, [r5, #0]
 80116a2:	e7ee      	b.n	8011682 <__swhatbuf_r+0x1e>
 80116a4:	2340      	movs	r3, #64	; 0x40
 80116a6:	2000      	movs	r0, #0
 80116a8:	6023      	str	r3, [r4, #0]
 80116aa:	b016      	add	sp, #88	; 0x58
 80116ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080116b0 <__smakebuf_r>:
 80116b0:	898b      	ldrh	r3, [r1, #12]
 80116b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80116b4:	079d      	lsls	r5, r3, #30
 80116b6:	4606      	mov	r6, r0
 80116b8:	460c      	mov	r4, r1
 80116ba:	d507      	bpl.n	80116cc <__smakebuf_r+0x1c>
 80116bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80116c0:	6023      	str	r3, [r4, #0]
 80116c2:	6123      	str	r3, [r4, #16]
 80116c4:	2301      	movs	r3, #1
 80116c6:	6163      	str	r3, [r4, #20]
 80116c8:	b002      	add	sp, #8
 80116ca:	bd70      	pop	{r4, r5, r6, pc}
 80116cc:	ab01      	add	r3, sp, #4
 80116ce:	466a      	mov	r2, sp
 80116d0:	f7ff ffc8 	bl	8011664 <__swhatbuf_r>
 80116d4:	9900      	ldr	r1, [sp, #0]
 80116d6:	4605      	mov	r5, r0
 80116d8:	4630      	mov	r0, r6
 80116da:	f7ff f8f3 	bl	80108c4 <_malloc_r>
 80116de:	b948      	cbnz	r0, 80116f4 <__smakebuf_r+0x44>
 80116e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116e4:	059a      	lsls	r2, r3, #22
 80116e6:	d4ef      	bmi.n	80116c8 <__smakebuf_r+0x18>
 80116e8:	f023 0303 	bic.w	r3, r3, #3
 80116ec:	f043 0302 	orr.w	r3, r3, #2
 80116f0:	81a3      	strh	r3, [r4, #12]
 80116f2:	e7e3      	b.n	80116bc <__smakebuf_r+0xc>
 80116f4:	4b0d      	ldr	r3, [pc, #52]	; (801172c <__smakebuf_r+0x7c>)
 80116f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80116f8:	89a3      	ldrh	r3, [r4, #12]
 80116fa:	6020      	str	r0, [r4, #0]
 80116fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011700:	81a3      	strh	r3, [r4, #12]
 8011702:	9b00      	ldr	r3, [sp, #0]
 8011704:	6163      	str	r3, [r4, #20]
 8011706:	9b01      	ldr	r3, [sp, #4]
 8011708:	6120      	str	r0, [r4, #16]
 801170a:	b15b      	cbz	r3, 8011724 <__smakebuf_r+0x74>
 801170c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011710:	4630      	mov	r0, r6
 8011712:	f000 f8b1 	bl	8011878 <_isatty_r>
 8011716:	b128      	cbz	r0, 8011724 <__smakebuf_r+0x74>
 8011718:	89a3      	ldrh	r3, [r4, #12]
 801171a:	f023 0303 	bic.w	r3, r3, #3
 801171e:	f043 0301 	orr.w	r3, r3, #1
 8011722:	81a3      	strh	r3, [r4, #12]
 8011724:	89a0      	ldrh	r0, [r4, #12]
 8011726:	4305      	orrs	r5, r0
 8011728:	81a5      	strh	r5, [r4, #12]
 801172a:	e7cd      	b.n	80116c8 <__smakebuf_r+0x18>
 801172c:	08010611 	.word	0x08010611

08011730 <__malloc_lock>:
 8011730:	4801      	ldr	r0, [pc, #4]	; (8011738 <__malloc_lock+0x8>)
 8011732:	f7ff b851 	b.w	80107d8 <__retarget_lock_acquire_recursive>
 8011736:	bf00      	nop
 8011738:	240032f8 	.word	0x240032f8

0801173c <__malloc_unlock>:
 801173c:	4801      	ldr	r0, [pc, #4]	; (8011744 <__malloc_unlock+0x8>)
 801173e:	f7ff b84c 	b.w	80107da <__retarget_lock_release_recursive>
 8011742:	bf00      	nop
 8011744:	240032f8 	.word	0x240032f8

08011748 <_realloc_r>:
 8011748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801174c:	4680      	mov	r8, r0
 801174e:	4614      	mov	r4, r2
 8011750:	460e      	mov	r6, r1
 8011752:	b921      	cbnz	r1, 801175e <_realloc_r+0x16>
 8011754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011758:	4611      	mov	r1, r2
 801175a:	f7ff b8b3 	b.w	80108c4 <_malloc_r>
 801175e:	b92a      	cbnz	r2, 801176c <_realloc_r+0x24>
 8011760:	f7ff f844 	bl	80107ec <_free_r>
 8011764:	4625      	mov	r5, r4
 8011766:	4628      	mov	r0, r5
 8011768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801176c:	f000 f894 	bl	8011898 <_malloc_usable_size_r>
 8011770:	4284      	cmp	r4, r0
 8011772:	4607      	mov	r7, r0
 8011774:	d802      	bhi.n	801177c <_realloc_r+0x34>
 8011776:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801177a:	d812      	bhi.n	80117a2 <_realloc_r+0x5a>
 801177c:	4621      	mov	r1, r4
 801177e:	4640      	mov	r0, r8
 8011780:	f7ff f8a0 	bl	80108c4 <_malloc_r>
 8011784:	4605      	mov	r5, r0
 8011786:	2800      	cmp	r0, #0
 8011788:	d0ed      	beq.n	8011766 <_realloc_r+0x1e>
 801178a:	42bc      	cmp	r4, r7
 801178c:	4622      	mov	r2, r4
 801178e:	4631      	mov	r1, r6
 8011790:	bf28      	it	cs
 8011792:	463a      	movcs	r2, r7
 8011794:	f7fe fe54 	bl	8010440 <memcpy>
 8011798:	4631      	mov	r1, r6
 801179a:	4640      	mov	r0, r8
 801179c:	f7ff f826 	bl	80107ec <_free_r>
 80117a0:	e7e1      	b.n	8011766 <_realloc_r+0x1e>
 80117a2:	4635      	mov	r5, r6
 80117a4:	e7df      	b.n	8011766 <_realloc_r+0x1e>
	...

080117a8 <_read_r>:
 80117a8:	b538      	push	{r3, r4, r5, lr}
 80117aa:	4d07      	ldr	r5, [pc, #28]	; (80117c8 <_read_r+0x20>)
 80117ac:	4604      	mov	r4, r0
 80117ae:	4608      	mov	r0, r1
 80117b0:	4611      	mov	r1, r2
 80117b2:	2200      	movs	r2, #0
 80117b4:	602a      	str	r2, [r5, #0]
 80117b6:	461a      	mov	r2, r3
 80117b8:	f7ef f95a 	bl	8000a70 <_read>
 80117bc:	1c43      	adds	r3, r0, #1
 80117be:	d102      	bne.n	80117c6 <_read_r+0x1e>
 80117c0:	682b      	ldr	r3, [r5, #0]
 80117c2:	b103      	cbz	r3, 80117c6 <_read_r+0x1e>
 80117c4:	6023      	str	r3, [r4, #0]
 80117c6:	bd38      	pop	{r3, r4, r5, pc}
 80117c8:	240032f4 	.word	0x240032f4

080117cc <_raise_r>:
 80117cc:	291f      	cmp	r1, #31
 80117ce:	b538      	push	{r3, r4, r5, lr}
 80117d0:	4604      	mov	r4, r0
 80117d2:	460d      	mov	r5, r1
 80117d4:	d904      	bls.n	80117e0 <_raise_r+0x14>
 80117d6:	2316      	movs	r3, #22
 80117d8:	6003      	str	r3, [r0, #0]
 80117da:	f04f 30ff 	mov.w	r0, #4294967295
 80117de:	bd38      	pop	{r3, r4, r5, pc}
 80117e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80117e2:	b112      	cbz	r2, 80117ea <_raise_r+0x1e>
 80117e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80117e8:	b94b      	cbnz	r3, 80117fe <_raise_r+0x32>
 80117ea:	4620      	mov	r0, r4
 80117ec:	f000 f830 	bl	8011850 <_getpid_r>
 80117f0:	462a      	mov	r2, r5
 80117f2:	4601      	mov	r1, r0
 80117f4:	4620      	mov	r0, r4
 80117f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80117fa:	f000 b817 	b.w	801182c <_kill_r>
 80117fe:	2b01      	cmp	r3, #1
 8011800:	d00a      	beq.n	8011818 <_raise_r+0x4c>
 8011802:	1c59      	adds	r1, r3, #1
 8011804:	d103      	bne.n	801180e <_raise_r+0x42>
 8011806:	2316      	movs	r3, #22
 8011808:	6003      	str	r3, [r0, #0]
 801180a:	2001      	movs	r0, #1
 801180c:	e7e7      	b.n	80117de <_raise_r+0x12>
 801180e:	2400      	movs	r4, #0
 8011810:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011814:	4628      	mov	r0, r5
 8011816:	4798      	blx	r3
 8011818:	2000      	movs	r0, #0
 801181a:	e7e0      	b.n	80117de <_raise_r+0x12>

0801181c <raise>:
 801181c:	4b02      	ldr	r3, [pc, #8]	; (8011828 <raise+0xc>)
 801181e:	4601      	mov	r1, r0
 8011820:	6818      	ldr	r0, [r3, #0]
 8011822:	f7ff bfd3 	b.w	80117cc <_raise_r>
 8011826:	bf00      	nop
 8011828:	24000030 	.word	0x24000030

0801182c <_kill_r>:
 801182c:	b538      	push	{r3, r4, r5, lr}
 801182e:	4d07      	ldr	r5, [pc, #28]	; (801184c <_kill_r+0x20>)
 8011830:	2300      	movs	r3, #0
 8011832:	4604      	mov	r4, r0
 8011834:	4608      	mov	r0, r1
 8011836:	4611      	mov	r1, r2
 8011838:	602b      	str	r3, [r5, #0]
 801183a:	f7ef f8fd 	bl	8000a38 <_kill>
 801183e:	1c43      	adds	r3, r0, #1
 8011840:	d102      	bne.n	8011848 <_kill_r+0x1c>
 8011842:	682b      	ldr	r3, [r5, #0]
 8011844:	b103      	cbz	r3, 8011848 <_kill_r+0x1c>
 8011846:	6023      	str	r3, [r4, #0]
 8011848:	bd38      	pop	{r3, r4, r5, pc}
 801184a:	bf00      	nop
 801184c:	240032f4 	.word	0x240032f4

08011850 <_getpid_r>:
 8011850:	f7ef b8ea 	b.w	8000a28 <_getpid>

08011854 <_fstat_r>:
 8011854:	b538      	push	{r3, r4, r5, lr}
 8011856:	4d07      	ldr	r5, [pc, #28]	; (8011874 <_fstat_r+0x20>)
 8011858:	2300      	movs	r3, #0
 801185a:	4604      	mov	r4, r0
 801185c:	4608      	mov	r0, r1
 801185e:	4611      	mov	r1, r2
 8011860:	602b      	str	r3, [r5, #0]
 8011862:	f7ef f94a 	bl	8000afa <_fstat>
 8011866:	1c43      	adds	r3, r0, #1
 8011868:	d102      	bne.n	8011870 <_fstat_r+0x1c>
 801186a:	682b      	ldr	r3, [r5, #0]
 801186c:	b103      	cbz	r3, 8011870 <_fstat_r+0x1c>
 801186e:	6023      	str	r3, [r4, #0]
 8011870:	bd38      	pop	{r3, r4, r5, pc}
 8011872:	bf00      	nop
 8011874:	240032f4 	.word	0x240032f4

08011878 <_isatty_r>:
 8011878:	b538      	push	{r3, r4, r5, lr}
 801187a:	4d06      	ldr	r5, [pc, #24]	; (8011894 <_isatty_r+0x1c>)
 801187c:	2300      	movs	r3, #0
 801187e:	4604      	mov	r4, r0
 8011880:	4608      	mov	r0, r1
 8011882:	602b      	str	r3, [r5, #0]
 8011884:	f7ef f949 	bl	8000b1a <_isatty>
 8011888:	1c43      	adds	r3, r0, #1
 801188a:	d102      	bne.n	8011892 <_isatty_r+0x1a>
 801188c:	682b      	ldr	r3, [r5, #0]
 801188e:	b103      	cbz	r3, 8011892 <_isatty_r+0x1a>
 8011890:	6023      	str	r3, [r4, #0]
 8011892:	bd38      	pop	{r3, r4, r5, pc}
 8011894:	240032f4 	.word	0x240032f4

08011898 <_malloc_usable_size_r>:
 8011898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801189c:	1f18      	subs	r0, r3, #4
 801189e:	2b00      	cmp	r3, #0
 80118a0:	bfbc      	itt	lt
 80118a2:	580b      	ldrlt	r3, [r1, r0]
 80118a4:	18c0      	addlt	r0, r0, r3
 80118a6:	4770      	bx	lr

080118a8 <_init>:
 80118a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118aa:	bf00      	nop
 80118ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118ae:	bc08      	pop	{r3}
 80118b0:	469e      	mov	lr, r3
 80118b2:	4770      	bx	lr

080118b4 <_fini>:
 80118b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118b6:	bf00      	nop
 80118b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118ba:	bc08      	pop	{r3}
 80118bc:	469e      	mov	lr, r3
 80118be:	4770      	bx	lr
