
ADC_CANFD_TIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab78  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800ae44  0800ae44  0001ae44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800aeb8  0800aeb8  0001aeb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800aebc  0800aebc  0001aebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  24000000  0800aec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002c8  24000018  0800aed8  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240002e0  0800aed8  000202e0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .debug_info   00019c2f  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002722  00000000  00000000  00039c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001538  00000000  00000000  0003c398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001430  00000000  00000000  0003d8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034e73  00000000  00000000  0003ed00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001875e  00000000  00000000  00073b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00164a71  00000000  00000000  0008c2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f0d42  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005d54  00000000  00000000  001f0d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000018 	.word	0x24000018
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800ae2c 	.word	0x0800ae2c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400001c 	.word	0x2400001c
 8000308:	0800ae2c 	.word	0x0800ae2c

0800030c <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	isADCcomplite = 1;
 8000314:	4b04      	ldr	r3, [pc, #16]	; (8000328 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000316:	2201      	movs	r2, #1
 8000318:	601a      	str	r2, [r3, #0]
}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	2400020c 	.word	0x2400020c

0800032c <HAL_FDCAN_RxFifo0Callback>:
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	f003 0301 	and.w	r3, r3, #1
 800033c:	2b00      	cmp	r3, #0
 800033e:	d014      	beq.n	800036a <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8000342:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000344:	2140      	movs	r1, #64	; 0x40
 8000346:	6878      	ldr	r0, [r7, #4]
 8000348:	f006 f8f8 	bl	800653c <HAL_FDCAN_GetRxMessage>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 8000352:	f000 fc4c 	bl	8000bee <Error_Handler>
    }
    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000356:	2200      	movs	r2, #0
 8000358:	2101      	movs	r1, #1
 800035a:	6878      	ldr	r0, [r7, #4]
 800035c:	f006 fa5c 	bl	8006818 <HAL_FDCAN_ActivateNotification>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 8000366:	f000 fc42 	bl	8000bee <Error_Handler>
    }
  }
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	2400029c 	.word	0x2400029c
 8000378:	24000234 	.word	0x24000234

0800037c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000382:	f000 fc07 	bl	8000b94 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000386:	f000 fe8f 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800038a:	f000 f8ab 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038e:	f000 fa9b 	bl	80008c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000392:	f000 fa79 	bl	8000888 <MX_DMA_Init>
  MX_TIM6_Init();
 8000396:	f000 fa3f 	bl	8000818 <MX_TIM6_Init>
  MX_FDCAN1_Init();
 800039a:	f000 f9bb 	bl	8000714 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  MX_ADC3_Init();
 800039e:	f000 f919 	bl	80005d4 <MX_ADC3_Init>
  __HAL_TIM_SET_COUNTER(&htim6 , 0) ;
 80003a2:	4b47      	ldr	r3, [pc, #284]	; (80004c0 <main+0x144>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2200      	movs	r2, #0
 80003a8:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_CLEAR_FLAG (&htim6, TIM_FLAG_UPDATE);
 80003aa:	4b45      	ldr	r3, [pc, #276]	; (80004c0 <main+0x144>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f06f 0201 	mvn.w	r2, #1
 80003b2:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim6) ;
 80003b4:	4842      	ldr	r0, [pc, #264]	; (80004c0 <main+0x144>)
 80003b6:	f00a f9c7 	bl	800a748 <HAL_TIM_Base_Start_IT>

  TxHeader.Identifier = 0x11;
 80003ba:	4b42      	ldr	r3, [pc, #264]	; (80004c4 <main+0x148>)
 80003bc:	2211      	movs	r2, #17
 80003be:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80003c0:	4b40      	ldr	r3, [pc, #256]	; (80004c4 <main+0x148>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80003c6:	4b3f      	ldr	r3, [pc, #252]	; (80004c4 <main+0x148>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 80003cc:	4b3d      	ldr	r3, [pc, #244]	; (80004c4 <main+0x148>)
 80003ce:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80003d2:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80003d4:	4b3b      	ldr	r3, [pc, #236]	; (80004c4 <main+0x148>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80003da:	4b3a      	ldr	r3, [pc, #232]	; (80004c4 <main+0x148>)
 80003dc:	2200      	movs	r2, #0
 80003de:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 80003e0:	4b38      	ldr	r3, [pc, #224]	; (80004c4 <main+0x148>)
 80003e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003e6:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80003e8:	4b36      	ldr	r3, [pc, #216]	; (80004c4 <main+0x148>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80003ee:	4b35      	ldr	r3, [pc, #212]	; (80004c4 <main+0x148>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	621a      	str	r2, [r3, #32]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 80003f4:	4834      	ldr	r0, [pc, #208]	; (80004c8 <main+0x14c>)
 80003f6:	f006 f81b 	bl	8006430 <HAL_FDCAN_Start>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <main+0x88>
  {
	  Error_Handler();
 8000400:	f000 fbf5 	bl	8000bee <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000404:	2200      	movs	r2, #0
 8000406:	2101      	movs	r1, #1
 8000408:	482f      	ldr	r0, [pc, #188]	; (80004c8 <main+0x14c>)
 800040a:	f006 fa05 	bl	8006818 <HAL_FDCAN_ActivateNotification>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <main+0x9c>
  {
    /* Notification Error */
    Error_Handler();
 8000414:	f000 fbeb 	bl	8000bee <Error_Handler>
  }
  while (1)
  {
	  if(timer_flag)
 8000418:	4b2c      	ldr	r3, [pc, #176]	; (80004cc <main+0x150>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d0fb      	beq.n	8000418 <main+0x9c>
	  {
		  int status = HAL_ADC_Start_DMA(&hadc3, (uint32_t*)ADC_READS, 4);
 8000420:	2204      	movs	r2, #4
 8000422:	492b      	ldr	r1, [pc, #172]	; (80004d0 <main+0x154>)
 8000424:	482b      	ldr	r0, [pc, #172]	; (80004d4 <main+0x158>)
 8000426:	f001 fc15 	bl	8001c54 <HAL_ADC_Start_DMA>
 800042a:	4603      	mov	r3, r0
 800042c:	603b      	str	r3, [r7, #0]
		  while(isADCcomplite == 0);
 800042e:	bf00      	nop
 8000430:	4b29      	ldr	r3, [pc, #164]	; (80004d8 <main+0x15c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d0fb      	beq.n	8000430 <main+0xb4>
		  isADCcomplite = 0;
 8000438:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <main+0x15c>)
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
		  if(status == HAL_OK)
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d1e9      	bne.n	8000418 <main+0x9c>
		  {
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8000444:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000448:	4824      	ldr	r0, [pc, #144]	; (80004dc <main+0x160>)
 800044a:	f007 f92e 	bl	80076aa <HAL_GPIO_TogglePin>
			  HAL_ADC_Stop_DMA(&hadc3);
 800044e:	4821      	ldr	r0, [pc, #132]	; (80004d4 <main+0x158>)
 8000450:	f001 fcdc 	bl	8001e0c <HAL_ADC_Stop_DMA>

			  for (int i=0; i<8; i+=2)
 8000454:	2300      	movs	r3, #0
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	e021      	b.n	800049e <main+0x122>
			  {
			   TxData[i] = (uint8_t) ADC_READS[i/2]  ;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2b00      	cmp	r3, #0
 800045e:	da00      	bge.n	8000462 <main+0xe6>
 8000460:	3301      	adds	r3, #1
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	461a      	mov	r2, r3
 8000466:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <main+0x154>)
 8000468:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800046c:	b2d9      	uxtb	r1, r3
 800046e:	4a1c      	ldr	r2, [pc, #112]	; (80004e0 <main+0x164>)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4413      	add	r3, r2
 8000474:	460a      	mov	r2, r1
 8000476:	701a      	strb	r2, [r3, #0]
			   TxData[i+1] = (uint8_t) (ADC_READS[i/2] >> 8);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2b00      	cmp	r3, #0
 800047c:	da00      	bge.n	8000480 <main+0x104>
 800047e:	3301      	adds	r3, #1
 8000480:	105b      	asrs	r3, r3, #1
 8000482:	461a      	mov	r2, r3
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <main+0x154>)
 8000486:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	b29a      	uxth	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	3301      	adds	r3, #1
 8000492:	b2d1      	uxtb	r1, r2
 8000494:	4a12      	ldr	r2, [pc, #72]	; (80004e0 <main+0x164>)
 8000496:	54d1      	strb	r1, [r2, r3]
			  for (int i=0; i<8; i+=2)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	3302      	adds	r3, #2
 800049c:	607b      	str	r3, [r7, #4]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2b07      	cmp	r3, #7
 80004a2:	ddda      	ble.n	800045a <main+0xde>
			  }

			  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData)!= HAL_OK)
 80004a4:	4a0e      	ldr	r2, [pc, #56]	; (80004e0 <main+0x164>)
 80004a6:	4907      	ldr	r1, [pc, #28]	; (80004c4 <main+0x148>)
 80004a8:	4807      	ldr	r0, [pc, #28]	; (80004c8 <main+0x14c>)
 80004aa:	f005 ffec 	bl	8006486 <HAL_FDCAN_AddMessageToTxFifoQ>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <main+0x13c>
			  {
			   Error_Handler();
 80004b4:	f000 fb9b 	bl	8000bee <Error_Handler>
			  }
			  timer_flag = 0;
 80004b8:	4b04      	ldr	r3, [pc, #16]	; (80004cc <main+0x150>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
	  if(timer_flag)
 80004be:	e7ab      	b.n	8000418 <main+0x9c>
 80004c0:	240001bc 	.word	0x240001bc
 80004c4:	24000210 	.word	0x24000210
 80004c8:	2400011c 	.word	0x2400011c
 80004cc:	24000208 	.word	0x24000208
 80004d0:	24000000 	.word	0x24000000
 80004d4:	24000034 	.word	0x24000034
 80004d8:	2400020c 	.word	0x2400020c
 80004dc:	58020800 	.word	0x58020800
 80004e0:	2400025c 	.word	0x2400025c

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b09c      	sub	sp, #112	; 0x70
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ee:	224c      	movs	r2, #76	; 0x4c
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f00a fc92 	bl	800ae1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2220      	movs	r2, #32
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f00a fc8c 	bl	800ae1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000504:	2002      	movs	r0, #2
 8000506:	f007 f8eb 	bl	80076e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800050a:	2300      	movs	r3, #0
 800050c:	603b      	str	r3, [r7, #0]
 800050e:	4b2f      	ldr	r3, [pc, #188]	; (80005cc <SystemClock_Config+0xe8>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000516:	4a2d      	ldr	r2, [pc, #180]	; (80005cc <SystemClock_Config+0xe8>)
 8000518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800051c:	6193      	str	r3, [r2, #24]
 800051e:	4b2b      	ldr	r3, [pc, #172]	; (80005cc <SystemClock_Config+0xe8>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800052a:	bf00      	nop
 800052c:	4b27      	ldr	r3, [pc, #156]	; (80005cc <SystemClock_Config+0xe8>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000538:	d1f8      	bne.n	800052c <SystemClock_Config+0x48>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800053a:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <SystemClock_Config+0xec>)
 800053c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800053e:	4a24      	ldr	r2, [pc, #144]	; (80005d0 <SystemClock_Config+0xec>)
 8000540:	f023 0303 	bic.w	r3, r3, #3
 8000544:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000546:	2302      	movs	r3, #2
 8000548:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800054a:	2301      	movs	r3, #1
 800054c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054e:	2340      	movs	r3, #64	; 0x40
 8000550:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000556:	2300      	movs	r3, #0
 8000558:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800055a:	2304      	movs	r3, #4
 800055c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800055e:	230c      	movs	r3, #12
 8000560:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000562:	2301      	movs	r3, #1
 8000564:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000566:	2304      	movs	r3, #4
 8000568:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800056a:	2302      	movs	r3, #2
 800056c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800056e:	230c      	movs	r3, #12
 8000570:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000572:	2300      	movs	r3, #0
 8000574:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800057e:	4618      	mov	r0, r3
 8000580:	f007 f8e8 	bl	8007754 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800058a:	f000 fb30 	bl	8000bee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	233f      	movs	r3, #63	; 0x3f
 8000590:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	2303      	movs	r3, #3
 8000594:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800059a:	2308      	movs	r3, #8
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800059e:	2340      	movs	r3, #64	; 0x40
 80005a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005a2:	2340      	movs	r3, #64	; 0x40
 80005a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005ac:	2340      	movs	r3, #64	; 0x40
 80005ae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2101      	movs	r1, #1
 80005b4:	4618      	mov	r0, r3
 80005b6:	f007 fc7b 	bl	8007eb0 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80005c0:	f000 fb15 	bl	8000bee <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3770      	adds	r7, #112	; 0x70
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	58024800 	.word	0x58024800
 80005d0:	58024400 	.word	0x58024400

080005d4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2224      	movs	r2, #36	; 0x24
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f00a fc1b 	bl	800ae1c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80005e6:	4b45      	ldr	r3, [pc, #276]	; (80006fc <MX_ADC3_Init+0x128>)
 80005e8:	4a45      	ldr	r2, [pc, #276]	; (8000700 <MX_ADC3_Init+0x12c>)
 80005ea:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005ec:	4b43      	ldr	r3, [pc, #268]	; (80006fc <MX_ADC3_Init+0x128>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80005f2:	4b42      	ldr	r3, [pc, #264]	; (80006fc <MX_ADC3_Init+0x128>)
 80005f4:	2208      	movs	r2, #8
 80005f6:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80005f8:	4b40      	ldr	r3, [pc, #256]	; (80006fc <MX_ADC3_Init+0x128>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005fe:	4b3f      	ldr	r3, [pc, #252]	; (80006fc <MX_ADC3_Init+0x128>)
 8000600:	2201      	movs	r2, #1
 8000602:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000604:	4b3d      	ldr	r3, [pc, #244]	; (80006fc <MX_ADC3_Init+0x128>)
 8000606:	2208      	movs	r2, #8
 8000608:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800060a:	4b3c      	ldr	r3, [pc, #240]	; (80006fc <MX_ADC3_Init+0x128>)
 800060c:	2200      	movs	r2, #0
 800060e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000610:	4b3a      	ldr	r3, [pc, #232]	; (80006fc <MX_ADC3_Init+0x128>)
 8000612:	2201      	movs	r2, #1
 8000614:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 4;
 8000616:	4b39      	ldr	r3, [pc, #228]	; (80006fc <MX_ADC3_Init+0x128>)
 8000618:	2204      	movs	r2, #4
 800061a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800061c:	4b37      	ldr	r3, [pc, #220]	; (80006fc <MX_ADC3_Init+0x128>)
 800061e:	2200      	movs	r2, #0
 8000620:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000624:	4b35      	ldr	r3, [pc, #212]	; (80006fc <MX_ADC3_Init+0x128>)
 8000626:	2200      	movs	r2, #0
 8000628:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062a:	4b34      	ldr	r3, [pc, #208]	; (80006fc <MX_ADC3_Init+0x128>)
 800062c:	2200      	movs	r2, #0
 800062e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000630:	4b32      	ldr	r3, [pc, #200]	; (80006fc <MX_ADC3_Init+0x128>)
 8000632:	2200      	movs	r2, #0
 8000634:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000638:	4b30      	ldr	r3, [pc, #192]	; (80006fc <MX_ADC3_Init+0x128>)
 800063a:	2200      	movs	r2, #0
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800063e:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <MX_ADC3_Init+0x128>)
 8000640:	2203      	movs	r2, #3
 8000642:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000644:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <MX_ADC3_Init+0x128>)
 8000646:	2200      	movs	r2, #0
 8000648:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800064a:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <MX_ADC3_Init+0x128>)
 800064c:	2200      	movs	r2, #0
 800064e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000650:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <MX_ADC3_Init+0x128>)
 8000652:	2200      	movs	r2, #0
 8000654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000658:	4828      	ldr	r0, [pc, #160]	; (80006fc <MX_ADC3_Init+0x128>)
 800065a:	f001 f8f3 	bl	8001844 <HAL_ADC_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000664:	f000 fac3 	bl	8000bee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000668:	4b26      	ldr	r3, [pc, #152]	; (8000704 <MX_ADC3_Init+0x130>)
 800066a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800066c:	2306      	movs	r3, #6
 800066e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_12CYCLES_5;
 8000670:	2302      	movs	r3, #2
 8000672:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000674:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000678:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800067a:	2304      	movs	r3, #4
 800067c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_POSITIVE;
 8000682:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000686:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4619      	mov	r1, r3
 800068c:	481b      	ldr	r0, [pc, #108]	; (80006fc <MX_ADC3_Init+0x128>)
 800068e:	f001 fe77 	bl	8002380 <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000698:	f000 faa9 	bl	8000bee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800069c:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_ADC3_Init+0x134>)
 800069e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006a0:	230c      	movs	r3, #12
 80006a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4619      	mov	r1, r3
 80006a8:	4814      	ldr	r0, [pc, #80]	; (80006fc <MX_ADC3_Init+0x128>)
 80006aa:	f001 fe69 	bl	8002380 <HAL_ADC_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 80006b4:	f000 fa9b 	bl	8000bee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_ADC3_Init+0x138>)
 80006ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006bc:	2312      	movs	r3, #18
 80006be:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	4619      	mov	r1, r3
 80006c8:	480c      	ldr	r0, [pc, #48]	; (80006fc <MX_ADC3_Init+0x128>)
 80006ca:	f001 fe59 	bl	8002380 <HAL_ADC_ConfigChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC3_Init+0x104>
  {
    Error_Handler();
 80006d4:	f000 fa8b 	bl	8000bee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006d8:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <MX_ADC3_Init+0x13c>)
 80006da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006dc:	2318      	movs	r3, #24
 80006de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_ADC3_Init+0x128>)
 80006e6:	f001 fe4b 	bl	8002380 <HAL_ADC_ConfigChannel>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC3_Init+0x120>
  {
    Error_Handler();
 80006f0:	f000 fa7d 	bl	8000bee <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	3728      	adds	r7, #40	; 0x28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	24000034 	.word	0x24000034
 8000700:	58026000 	.word	0x58026000
 8000704:	21800100 	.word	0x21800100
 8000708:	0c900008 	.word	0x0c900008
 800070c:	1d500080 	.word	0x1d500080
 8000710:	08600004 	.word	0x08600004

08000714 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800071a:	4b3d      	ldr	r3, [pc, #244]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 800071c:	4a3d      	ldr	r2, [pc, #244]	; (8000814 <MX_FDCAN1_Init+0x100>)
 800071e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000720:	4b3b      	ldr	r3, [pc, #236]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 8000722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000726:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 8000728:	4b39      	ldr	r3, [pc, #228]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 800072a:	2204      	movs	r2, #4
 800072c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800072e:	4b38      	ldr	r3, [pc, #224]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 8000730:	2201      	movs	r2, #1
 8000732:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000734:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 8000736:	2200      	movs	r2, #0
 8000738:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800073a:	4b35      	ldr	r3, [pc, #212]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 800073c:	2200      	movs	r2, #0
 800073e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000740:	4b33      	ldr	r3, [pc, #204]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 8000742:	2206      	movs	r2, #6
 8000744:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000746:	4b32      	ldr	r3, [pc, #200]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 8000748:	2201      	movs	r2, #1
 800074a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800074c:	4b30      	ldr	r3, [pc, #192]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 800074e:	220d      	movs	r2, #13
 8000750:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000752:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 8000754:	2202      	movs	r2, #2
 8000756:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000758:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 800075a:	2201      	movs	r2, #1
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800075e:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 8000760:	2201      	movs	r2, #1
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000764:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 8000766:	2201      	movs	r2, #1
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800076a:	4b29      	ldr	r3, [pc, #164]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 800076c:	2201      	movs	r2, #1
 800076e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 8000772:	2200      	movs	r2, #0
 8000774:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 8000778:	2201      	movs	r2, #1
 800077a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 800077e:	2200      	movs	r2, #0
 8000780:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000782:	4b23      	ldr	r3, [pc, #140]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 8000784:	2201      	movs	r2, #1
 8000786:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 800078a:	2204      	movs	r2, #4
 800078c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 8000790:	2200      	movs	r2, #0
 8000792:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 8000796:	2204      	movs	r2, #4
 8000798:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 800079c:	2200      	movs	r2, #0
 800079e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_64;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 80007a2:	2212      	movs	r2, #18
 80007a4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_QUEUE_OPERATION;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 80007ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007be:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 80007c2:	2212      	movs	r2, #18
 80007c4:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007c6:	4812      	ldr	r0, [pc, #72]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 80007c8:	f005 fbde 	bl	8005f88 <HAL_FDCAN_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_FDCAN1_Init+0xc2>
  {
    Error_Handler();
 80007d2:	f000 fa0c 	bl	8000bee <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80007de:	2302      	movs	r3, #2
 80007e0:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80007e2:	2301      	movs	r3, #1
 80007e4:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x11;
 80007e6:	2311      	movs	r3, #17
 80007e8:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x11;
 80007ea:	2311      	movs	r3, #17
 80007ec:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	4619      	mov	r1, r3
 80007f6:	4806      	ldr	r0, [pc, #24]	; (8000810 <MX_FDCAN1_Init+0xfc>)
 80007f8:	f005 fda4 	bl	8006344 <HAL_FDCAN_ConfigFilter>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_FDCAN1_Init+0xf2>
  {
    /* Filter configuration Error */
    Error_Handler();
 8000802:	f000 f9f4 	bl	8000bee <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	3720      	adds	r7, #32
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2400011c 	.word	0x2400011c
 8000814:	4000a000 	.word	0x4000a000

08000818 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_TIM6_Init+0x68>)
 800082a:	4a16      	ldr	r2, [pc, #88]	; (8000884 <MX_TIM6_Init+0x6c>)
 800082c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 960-1;
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_TIM6_Init+0x68>)
 8000830:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000834:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_TIM6_Init+0x68>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_TIM6_Init+0x68>)
 800083e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000842:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000844:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_TIM6_Init+0x68>)
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800084a:	480d      	ldr	r0, [pc, #52]	; (8000880 <MX_TIM6_Init+0x68>)
 800084c:	f009 ff24 	bl	800a698 <HAL_TIM_Base_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000856:	f000 f9ca 	bl	8000bee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	; (8000880 <MX_TIM6_Init+0x68>)
 8000868:	f00a f9ec 	bl	800ac44 <HAL_TIMEx_MasterConfigSynchronization>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000872:	f000 f9bc 	bl	8000bee <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	240001bc 	.word	0x240001bc
 8000884:	40001000 	.word	0x40001000

08000888 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <MX_DMA_Init+0x3c>)
 8000890:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000894:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <MX_DMA_Init+0x3c>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_DMA_Init+0x3c>)
 80008a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2100      	movs	r1, #0
 80008b0:	200b      	movs	r0, #11
 80008b2:	f002 fec4 	bl	800363e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008b6:	200b      	movs	r0, #11
 80008b8:	f002 fedb 	bl	8003672 <HAL_NVIC_EnableIRQ>

}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	58024400 	.word	0x58024400

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08e      	sub	sp, #56	; 0x38
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4ba6      	ldr	r3, [pc, #664]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e4:	4aa4      	ldr	r2, [pc, #656]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ee:	4ba2      	ldr	r3, [pc, #648]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f4:	f003 0304 	and.w	r3, r3, #4
 80008f8:	623b      	str	r3, [r7, #32]
 80008fa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fc:	4b9e      	ldr	r3, [pc, #632]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000902:	4a9d      	ldr	r2, [pc, #628]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 8000904:	f043 0320 	orr.w	r3, r3, #32
 8000908:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090c:	4b9a      	ldr	r3, [pc, #616]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 800090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000912:	f003 0320 	and.w	r3, r3, #32
 8000916:	61fb      	str	r3, [r7, #28]
 8000918:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	4b97      	ldr	r3, [pc, #604]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	4a95      	ldr	r2, [pc, #596]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 8000922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092a:	4b93      	ldr	r3, [pc, #588]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000934:	61bb      	str	r3, [r7, #24]
 8000936:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	4b8f      	ldr	r3, [pc, #572]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093e:	4a8e      	ldr	r2, [pc, #568]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000948:	4b8b      	ldr	r3, [pc, #556]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	4b88      	ldr	r3, [pc, #544]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095c:	4a86      	ldr	r2, [pc, #536]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 800095e:	f043 0302 	orr.w	r3, r3, #2
 8000962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000966:	4b84      	ldr	r3, [pc, #528]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096c:	f003 0302 	and.w	r3, r3, #2
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000974:	4b80      	ldr	r3, [pc, #512]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097a:	4a7f      	ldr	r2, [pc, #508]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000984:	4b7c      	ldr	r3, [pc, #496]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000992:	4b79      	ldr	r3, [pc, #484]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	4a77      	ldr	r2, [pc, #476]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 800099a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800099e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a2:	4b75      	ldr	r3, [pc, #468]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b0:	4b71      	ldr	r3, [pc, #452]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	4a70      	ldr	r2, [pc, #448]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 80009b8:	f043 0310 	orr.w	r3, r3, #16
 80009bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c0:	4b6d      	ldr	r3, [pc, #436]	; (8000b78 <MX_GPIO_Init+0x2b0>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f244 0101 	movw	r1, #16385	; 0x4001
 80009d4:	4869      	ldr	r0, [pc, #420]	; (8000b7c <MX_GPIO_Init+0x2b4>)
 80009d6:	f006 fe4f 	bl	8007678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e0:	4867      	ldr	r0, [pc, #412]	; (8000b80 <MX_GPIO_Init+0x2b8>)
 80009e2:	f006 fe49 	bl	8007678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ec:	4865      	ldr	r0, [pc, #404]	; (8000b84 <MX_GPIO_Init+0x2bc>)
 80009ee:	f006 fe43 	bl	8007678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2102      	movs	r1, #2
 80009f6:	4864      	ldr	r0, [pc, #400]	; (8000b88 <MX_GPIO_Init+0x2c0>)
 80009f8:	f006 fe3e 	bl	8007678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	485c      	ldr	r0, [pc, #368]	; (8000b84 <MX_GPIO_Init+0x2bc>)
 8000a12:	f006 fc89 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a16:	2332      	movs	r3, #50	; 0x32
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a26:	230b      	movs	r3, #11
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4854      	ldr	r0, [pc, #336]	; (8000b84 <MX_GPIO_Init+0x2bc>)
 8000a32:	f006 fc79 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a36:	2386      	movs	r3, #134	; 0x86
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a46:	230b      	movs	r3, #11
 8000a48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	4619      	mov	r1, r3
 8000a50:	484e      	ldr	r0, [pc, #312]	; (8000b8c <MX_GPIO_Init+0x2c4>)
 8000a52:	f006 fc69 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000a56:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4843      	ldr	r0, [pc, #268]	; (8000b7c <MX_GPIO_Init+0x2b4>)
 8000a70:	f006 fc5a 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a86:	230b      	movs	r3, #11
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	483a      	ldr	r0, [pc, #232]	; (8000b7c <MX_GPIO_Init+0x2b4>)
 8000a92:	f006 fc49 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000a96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4833      	ldr	r0, [pc, #204]	; (8000b80 <MX_GPIO_Init+0x2b8>)
 8000ab4:	f006 fc38 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	482b      	ldr	r0, [pc, #172]	; (8000b80 <MX_GPIO_Init+0x2b8>)
 8000ad2:	f006 fc29 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000ad6:	2380      	movs	r3, #128	; 0x80
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ada:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4829      	ldr	r0, [pc, #164]	; (8000b90 <MX_GPIO_Init+0x2c8>)
 8000aec:	f006 fc1c 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000b02:	230a      	movs	r3, #10
 8000b04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	481f      	ldr	r0, [pc, #124]	; (8000b8c <MX_GPIO_Init+0x2c4>)
 8000b0e:	f006 fc0b 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4816      	ldr	r0, [pc, #88]	; (8000b84 <MX_GPIO_Init+0x2bc>)
 8000b2c:	f006 fbfc 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b30:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b42:	230b      	movs	r3, #11
 8000b44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4810      	ldr	r0, [pc, #64]	; (8000b90 <MX_GPIO_Init+0x2c8>)
 8000b4e:	f006 fbeb 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000b52:	2302      	movs	r3, #2
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b66:	4619      	mov	r1, r3
 8000b68:	4807      	ldr	r0, [pc, #28]	; (8000b88 <MX_GPIO_Init+0x2c0>)
 8000b6a:	f006 fbdd 	bl	8007328 <HAL_GPIO_Init>

}
 8000b6e:	bf00      	nop
 8000b70:	3738      	adds	r7, #56	; 0x38
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	58020400 	.word	0x58020400
 8000b80:	58020c00 	.word	0x58020c00
 8000b84:	58020800 	.word	0x58020800
 8000b88:	58021000 	.word	0x58021000
 8000b8c:	58020000 	.word	0x58020000
 8000b90:	58021800 	.word	0x58021800

08000b94 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ba6:	f002 fd7f 	bl	80036a8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000baa:	2301      	movs	r3, #1
 8000bac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000bb2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000bb6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32B;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bd8:	463b      	mov	r3, r7
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f002 fd9c 	bl	8003718 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8000be0:	2006      	movs	r0, #6
 8000be2:	f002 fd79 	bl	80036d8 <HAL_MPU_Enable>

}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf2:	b672      	cpsid	i
}
 8000bf4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <Error_Handler+0x8>

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_MspInit+0x30>)
 8000c00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c04:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_MspInit+0x30>)
 8000c06:	f043 0302 	orr.w	r3, r3, #2
 8000c0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_MspInit+0x30>)
 8000c10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	58024400 	.word	0x58024400

08000c2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0b6      	sub	sp, #216	; 0xd8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	22b4      	movs	r2, #180	; 0xb4
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f00a f8e5 	bl	800ae1c <memset>
  if(hadc->Instance==ADC3)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a47      	ldr	r2, [pc, #284]	; (8000d74 <HAL_ADC_MspInit+0x148>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	f040 8087 	bne.w	8000d6c <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c5e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c62:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000c64:	2304      	movs	r3, #4
 8000c66:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000c68:	230c      	movs	r3, #12
 8000c6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c78:	23c0      	movs	r3, #192	; 0xc0
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f007 fc6e 	bl	8008570 <HAL_RCCEx_PeriphCLKConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000c9a:	f7ff ffa8 	bl	8000bee <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000c9e:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <HAL_ADC_MspInit+0x14c>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	4a34      	ldr	r2, [pc, #208]	; (8000d78 <HAL_ADC_MspInit+0x14c>)
 8000ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cae:	4b32      	ldr	r3, [pc, #200]	; (8000d78 <HAL_ADC_MspInit+0x14c>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cbc:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <HAL_ADC_MspInit+0x14c>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	4a2d      	ldr	r2, [pc, #180]	; (8000d78 <HAL_ADC_MspInit+0x14c>)
 8000cc4:	f043 0320 	orr.w	r3, r3, #32
 8000cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ccc:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <HAL_ADC_MspInit+0x14c>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd2:	f003 0320 	and.w	r3, r3, #32
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> ADC3_INP8
    PF7     ------> ADC3_INP3
    PF8     ------> ADC3_INP7
    PF9     ------> ADC3_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000cda:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000cde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4821      	ldr	r0, [pc, #132]	; (8000d7c <HAL_ADC_MspInit+0x150>)
 8000cf6:	f006 fb17 	bl	8007328 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <HAL_ADC_MspInit+0x154>)
 8000cfc:	4a21      	ldr	r2, [pc, #132]	; (8000d84 <HAL_ADC_MspInit+0x158>)
 8000cfe:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000d00:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <HAL_ADC_MspInit+0x154>)
 8000d02:	2273      	movs	r2, #115	; 0x73
 8000d04:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d06:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <HAL_ADC_MspInit+0x154>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <HAL_ADC_MspInit+0x154>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000d12:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <HAL_ADC_MspInit+0x154>)
 8000d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d18:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <HAL_ADC_MspInit+0x154>)
 8000d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d20:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <HAL_ADC_MspInit+0x154>)
 8000d24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d28:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_ADC_MspInit+0x154>)
 8000d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d30:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <HAL_ADC_MspInit+0x154>)
 8000d34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d38:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_ADC_MspInit+0x154>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000d40:	480f      	ldr	r0, [pc, #60]	; (8000d80 <HAL_ADC_MspInit+0x154>)
 8000d42:	f002 fd2d 	bl	80037a0 <HAL_DMA_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_ADC_MspInit+0x124>
    {
      Error_Handler();
 8000d4c:	f7ff ff4f 	bl	8000bee <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <HAL_ADC_MspInit+0x154>)
 8000d54:	659a      	str	r2, [r3, #88]	; 0x58
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_ADC_MspInit+0x154>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	207f      	movs	r0, #127	; 0x7f
 8000d62:	f002 fc6c 	bl	800363e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000d66:	207f      	movs	r0, #127	; 0x7f
 8000d68:	f002 fc83 	bl	8003672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000d6c:	bf00      	nop
 8000d6e:	37d8      	adds	r7, #216	; 0xd8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	58026000 	.word	0x58026000
 8000d78:	58024400 	.word	0x58024400
 8000d7c:	58021400 	.word	0x58021400
 8000d80:	240000a4 	.word	0x240000a4
 8000d84:	40020010 	.word	0x40020010

08000d88 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0b6      	sub	sp, #216	; 0xd8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	22b4      	movs	r2, #180	; 0xb4
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f00a f837 	bl	800ae1c <memset>
  if(hfdcan->Instance==FDCAN1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a29      	ldr	r2, [pc, #164]	; (8000e58 <HAL_FDCAN_MspInit+0xd0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d14b      	bne.n	8000e50 <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000db8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dbc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000dbe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dc2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f007 fbd1 	bl	8008570 <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000dd4:	f7ff ff0b 	bl	8000bee <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000dd8:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <HAL_FDCAN_MspInit+0xd4>)
 8000dda:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000dde:	4a1f      	ldr	r2, [pc, #124]	; (8000e5c <HAL_FDCAN_MspInit+0xd4>)
 8000de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000de8:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <HAL_FDCAN_MspInit+0xd4>)
 8000dea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_FDCAN_MspInit+0xd4>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <HAL_FDCAN_MspInit+0xd4>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <HAL_FDCAN_MspInit+0xd4>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e14:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e2e:	2309      	movs	r3, #9
 8000e30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4809      	ldr	r0, [pc, #36]	; (8000e60 <HAL_FDCAN_MspInit+0xd8>)
 8000e3c:	f006 fa74 	bl	8007328 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2100      	movs	r1, #0
 8000e44:	2013      	movs	r0, #19
 8000e46:	f002 fbfa 	bl	800363e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000e4a:	2013      	movs	r0, #19
 8000e4c:	f002 fc11 	bl	8003672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	37d8      	adds	r7, #216	; 0xd8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	4000a000 	.word	0x4000a000
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	58020000 	.word	0x58020000

08000e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <HAL_TIM_Base_MspInit+0x48>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d116      	bne.n	8000ea4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_TIM_Base_MspInit+0x4c>)
 8000e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <HAL_TIM_Base_MspInit+0x4c>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_TIM_Base_MspInit+0x4c>)
 8000e88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e8c:	f003 0310 	and.w	r3, r3, #16
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2100      	movs	r1, #0
 8000e98:	2036      	movs	r0, #54	; 0x36
 8000e9a:	f002 fbd0 	bl	800363e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e9e:	2036      	movs	r0, #54	; 0x36
 8000ea0:	f002 fbe7 	bl	8003672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40001000 	.word	0x40001000
 8000eb0:	58024400 	.word	0x58024400

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <NMI_Handler+0x4>

08000eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f00:	f000 f944 	bl	800118c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <DMA1_Stream0_IRQHandler+0x10>)
 8000f0e:	f003 fd29 	bl	8004964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	240000a4 	.word	0x240000a4

08000f1c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <FDCAN1_IT0_IRQHandler+0x10>)
 8000f22:	f005 fcf3 	bl	800690c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2400011c 	.word	0x2400011c

08000f30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	  timer_flag = 1;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <TIM6_DAC_IRQHandler+0x14>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f3a:	4803      	ldr	r0, [pc, #12]	; (8000f48 <TIM6_DAC_IRQHandler+0x18>)
 8000f3c:	f009 fc8a 	bl	800a854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	24000208 	.word	0x24000208
 8000f48:	240001bc 	.word	0x240001bc

08000f4c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	 HAL_ADC_ConvCpltCallback(&hadc3);
 8000f50:	4803      	ldr	r0, [pc, #12]	; (8000f60 <ADC3_IRQHandler+0x14>)
 8000f52:	f7ff f9db 	bl	800030c <HAL_ADC_ConvCpltCallback>
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8000f56:	4802      	ldr	r0, [pc, #8]	; (8000f60 <ADC3_IRQHandler+0x14>)
 8000f58:	f000 ffba 	bl	8001ed0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	24000034 	.word	0x24000034

08000f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f68:	4b32      	ldr	r3, [pc, #200]	; (8001034 <SystemInit+0xd0>)
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6e:	4a31      	ldr	r2, [pc, #196]	; (8001034 <SystemInit+0xd0>)
 8000f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f78:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <SystemInit+0xd4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 030f 	and.w	r3, r3, #15
 8000f80:	2b06      	cmp	r3, #6
 8000f82:	d807      	bhi.n	8000f94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f84:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <SystemInit+0xd4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f023 030f 	bic.w	r3, r3, #15
 8000f8c:	4a2a      	ldr	r2, [pc, #168]	; (8001038 <SystemInit+0xd4>)
 8000f8e:	f043 0307 	orr.w	r3, r3, #7
 8000f92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f94:	4b29      	ldr	r3, [pc, #164]	; (800103c <SystemInit+0xd8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a28      	ldr	r2, [pc, #160]	; (800103c <SystemInit+0xd8>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fa0:	4b26      	ldr	r3, [pc, #152]	; (800103c <SystemInit+0xd8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fa6:	4b25      	ldr	r3, [pc, #148]	; (800103c <SystemInit+0xd8>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4924      	ldr	r1, [pc, #144]	; (800103c <SystemInit+0xd8>)
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <SystemInit+0xdc>)
 8000fae:	4013      	ands	r3, r2
 8000fb0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fb2:	4b21      	ldr	r3, [pc, #132]	; (8001038 <SystemInit+0xd4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <SystemInit+0xd4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f023 030f 	bic.w	r3, r3, #15
 8000fc6:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <SystemInit+0xd4>)
 8000fc8:	f043 0307 	orr.w	r3, r3, #7
 8000fcc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fce:	4b1b      	ldr	r3, [pc, #108]	; (800103c <SystemInit+0xd8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <SystemInit+0xd8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <SystemInit+0xd8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <SystemInit+0xd8>)
 8000fe2:	4a18      	ldr	r2, [pc, #96]	; (8001044 <SystemInit+0xe0>)
 8000fe4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <SystemInit+0xd8>)
 8000fe8:	4a17      	ldr	r2, [pc, #92]	; (8001048 <SystemInit+0xe4>)
 8000fea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <SystemInit+0xd8>)
 8000fee:	4a17      	ldr	r2, [pc, #92]	; (800104c <SystemInit+0xe8>)
 8000ff0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <SystemInit+0xd8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ff8:	4b10      	ldr	r3, [pc, #64]	; (800103c <SystemInit+0xd8>)
 8000ffa:	4a14      	ldr	r2, [pc, #80]	; (800104c <SystemInit+0xe8>)
 8000ffc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <SystemInit+0xd8>)
 8001000:	2200      	movs	r2, #0
 8001002:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <SystemInit+0xd8>)
 8001006:	4a11      	ldr	r2, [pc, #68]	; (800104c <SystemInit+0xe8>)
 8001008:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <SystemInit+0xd8>)
 800100c:	2200      	movs	r2, #0
 800100e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <SystemInit+0xd8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a09      	ldr	r2, [pc, #36]	; (800103c <SystemInit+0xd8>)
 8001016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800101a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <SystemInit+0xd8>)
 800101e:	2200      	movs	r2, #0
 8001020:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <SystemInit+0xec>)
 8001024:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001028:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00
 8001038:	52002000 	.word	0x52002000
 800103c:	58024400 	.word	0x58024400
 8001040:	eaf6ed7f 	.word	0xeaf6ed7f
 8001044:	02020200 	.word	0x02020200
 8001048:	01ff0000 	.word	0x01ff0000
 800104c:	01010280 	.word	0x01010280
 8001050:	52004000 	.word	0x52004000

08001054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800108c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001058:	f7ff ff84 	bl	8000f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800105e:	490d      	ldr	r1, [pc, #52]	; (8001094 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001074:	4c0a      	ldr	r4, [pc, #40]	; (80010a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001082:	f009 fe99 	bl	800adb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001086:	f7ff f979 	bl	800037c <main>
  bx  lr
 800108a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800108c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001090:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001094:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8001098:	0800aec0 	.word	0x0800aec0
  ldr r2, =_sbss
 800109c:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 80010a0:	240002e0 	.word	0x240002e0

080010a4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ae:	2003      	movs	r0, #3
 80010b0:	f002 faba 	bl	8003628 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010b4:	f007 f8b2 	bl	800821c <HAL_RCC_GetSysClockFreq>
 80010b8:	4602      	mov	r2, r0
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_Init+0x68>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	0a1b      	lsrs	r3, r3, #8
 80010c0:	f003 030f 	and.w	r3, r3, #15
 80010c4:	4913      	ldr	r1, [pc, #76]	; (8001114 <HAL_Init+0x6c>)
 80010c6:	5ccb      	ldrb	r3, [r1, r3]
 80010c8:	f003 031f 	and.w	r3, r3, #31
 80010cc:	fa22 f303 	lsr.w	r3, r2, r3
 80010d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HAL_Init+0x68>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <HAL_Init+0x6c>)
 80010dc:	5cd3      	ldrb	r3, [r2, r3]
 80010de:	f003 031f 	and.w	r3, r3, #31
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <HAL_Init+0x70>)
 80010ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010ec:	4a0b      	ldr	r2, [pc, #44]	; (800111c <HAL_Init+0x74>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010f2:	2000      	movs	r0, #0
 80010f4:	f000 f814 	bl	8001120 <HAL_InitTick>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e002      	b.n	8001108 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001102:	f7ff fd79 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	58024400 	.word	0x58024400
 8001114:	0800ae90 	.word	0x0800ae90
 8001118:	2400000c 	.word	0x2400000c
 800111c:	24000008 	.word	0x24000008

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_InitTick+0x60>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e021      	b.n	8001178 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_InitTick+0x64>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HAL_InitTick+0x60>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f002 fa9f 	bl	800368e <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f002 fa69 	bl	800363e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <HAL_InitTick+0x68>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	24000014 	.word	0x24000014
 8001184:	24000008 	.word	0x24000008
 8001188:	24000010 	.word	0x24000010

0800118c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x20>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x24>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_IncTick+0x24>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	24000014 	.word	0x24000014
 80011b0:	240002dc 	.word	0x240002dc

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	240002dc 	.word	0x240002dc

080011cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	609a      	str	r2, [r3, #8]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	431a      	orrs	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	609a      	str	r2, [r3, #8]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001234:	b480      	push	{r7}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	3360      	adds	r3, #96	; 0x60
 8001246:	461a      	mov	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <LL_ADC_SetOffset+0x60>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d10b      	bne.n	8001270 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	4313      	orrs	r3, r2
 8001266:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800126e:	e00b      	b.n	8001288 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	430b      	orrs	r3, r1
 8001282:	431a      	orrs	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	601a      	str	r2, [r3, #0]
}
 8001288:	bf00      	nop
 800128a:	371c      	adds	r7, #28
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	58026000 	.word	0x58026000

08001298 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3360      	adds	r3, #96	; 0x60
 80012a6:	461a      	mov	r2, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	f003 031f 	and.w	r3, r3, #31
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	fa01 f303 	lsl.w	r3, r1, r3
 80012e4:	431a      	orrs	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	611a      	str	r2, [r3, #16]
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4a0c      	ldr	r2, [pc, #48]	; (8001338 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d00e      	beq.n	800132a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3360      	adds	r3, #96	; 0x60
 8001310:	461a      	mov	r2, r3
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	431a      	orrs	r2, r3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	601a      	str	r2, [r3, #0]
  }
}
 800132a:	bf00      	nop
 800132c:	371c      	adds	r7, #28
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	58026000 	.word	0x58026000

0800133c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4a0c      	ldr	r2, [pc, #48]	; (800137c <LL_ADC_SetOffsetSaturation+0x40>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d10e      	bne.n	800136e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	3360      	adds	r3, #96	; 0x60
 8001354:	461a      	mov	r2, r3
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	431a      	orrs	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	58026000 	.word	0x58026000

08001380 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4a0c      	ldr	r2, [pc, #48]	; (80013c0 <LL_ADC_SetOffsetSign+0x40>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d10e      	bne.n	80013b2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3360      	adds	r3, #96	; 0x60
 8001398:	461a      	mov	r2, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	431a      	orrs	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80013b2:	bf00      	nop
 80013b4:	371c      	adds	r7, #28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	58026000 	.word	0x58026000

080013c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b087      	sub	sp, #28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3360      	adds	r3, #96	; 0x60
 80013d4:	461a      	mov	r2, r3
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4a0c      	ldr	r2, [pc, #48]	; (8001414 <LL_ADC_SetOffsetState+0x50>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d108      	bne.n	80013f8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	431a      	orrs	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80013f6:	e007      	b.n	8001408 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	431a      	orrs	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	601a      	str	r2, [r3, #0]
}
 8001408:	bf00      	nop
 800140a:	371c      	adds	r7, #28
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	58026000 	.word	0x58026000

08001418 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800143e:	b480      	push	{r7}
 8001440:	b087      	sub	sp, #28
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	3330      	adds	r3, #48	; 0x30
 800144e:	461a      	mov	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	0a1b      	lsrs	r3, r3, #8
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	4413      	add	r3, r2
 800145c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	f003 031f 	and.w	r3, r3, #31
 8001468:	211f      	movs	r1, #31
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	401a      	ands	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	0e9b      	lsrs	r3, r3, #26
 8001476:	f003 011f 	and.w	r1, r3, #31
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	f003 031f 	and.w	r3, r3, #31
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	431a      	orrs	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800148a:	bf00      	nop
 800148c:	371c      	adds	r7, #28
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	f023 0203 	bic.w	r2, r3, #3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	60da      	str	r2, [r3, #12]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	f043 0201 	orr.w	r2, r3, #1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	60da      	str	r2, [r3, #12]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a08      	ldr	r2, [pc, #32]	; (800150c <LL_ADC_REG_SetDMATransferMode+0x30>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d107      	bne.n	80014fe <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	f023 0203 	bic.w	r2, r3, #3
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	431a      	orrs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	60da      	str	r2, [r3, #12]
  }
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	58026000 	.word	0x58026000

08001510 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001536:	b480      	push	{r7}
 8001538:	b087      	sub	sp, #28
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3314      	adds	r3, #20
 8001546:	461a      	mov	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	0e5b      	lsrs	r3, r3, #25
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	4413      	add	r3, r2
 8001554:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	0d1b      	lsrs	r3, r3, #20
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	2107      	movs	r1, #7
 8001564:	fa01 f303 	lsl.w	r3, r1, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	401a      	ands	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	0d1b      	lsrs	r3, r3, #20
 8001570:	f003 031f 	and.w	r3, r3, #31
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	431a      	orrs	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001580:	bf00      	nop
 8001582:	371c      	adds	r7, #28
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4a1a      	ldr	r2, [pc, #104]	; (8001604 <LL_ADC_SetChannelSingleDiff+0x78>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d115      	bne.n	80015cc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015ac:	43db      	mvns	r3, r3
 80015ae:	401a      	ands	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0318 	and.w	r3, r3, #24
 80015b6:	4914      	ldr	r1, [pc, #80]	; (8001608 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80015b8:	40d9      	lsrs	r1, r3
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	400b      	ands	r3, r1
 80015be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015c2:	431a      	orrs	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80015ca:	e014      	b.n	80015f6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015d8:	43db      	mvns	r3, r3
 80015da:	401a      	ands	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f003 0318 	and.w	r3, r3, #24
 80015e2:	4909      	ldr	r1, [pc, #36]	; (8001608 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80015e4:	40d9      	lsrs	r1, r3
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	400b      	ands	r3, r1
 80015ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015ee:	431a      	orrs	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	58026000 	.word	0x58026000
 8001608:	000fffff 	.word	0x000fffff

0800160c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 031f 	and.w	r3, r3, #31
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001652:	4013      	ands	r3, r2
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6093      	str	r3, [r2, #8]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	5fffffc0 	.word	0x5fffffc0

08001668 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800167c:	d101      	bne.n	8001682 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <LL_ADC_EnableInternalRegulator+0x24>)
 800169e:	4013      	ands	r3, r2
 80016a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	6fffffc0 	.word	0x6fffffc0

080016b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016cc:	d101      	bne.n	80016d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <LL_ADC_Enable+0x24>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	f043 0201 	orr.w	r2, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	7fffffc0 	.word	0x7fffffc0

08001708 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <LL_ADC_Disable+0x24>)
 8001716:	4013      	ands	r3, r2
 8001718:	f043 0202 	orr.w	r2, r3, #2
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	7fffffc0 	.word	0x7fffffc0

08001730 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <LL_ADC_IsEnabled+0x18>
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <LL_ADC_IsEnabled+0x1a>
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b02      	cmp	r3, #2
 8001768:	d101      	bne.n	800176e <LL_ADC_IsDisableOngoing+0x18>
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <LL_ADC_IsDisableOngoing+0x1a>
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <LL_ADC_REG_StartConversion+0x24>)
 800178a:	4013      	ands	r3, r2
 800178c:	f043 0204 	orr.w	r2, r3, #4
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	7fffffc0 	.word	0x7fffffc0

080017a4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <LL_ADC_REG_StopConversion+0x24>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	f043 0210 	orr.w	r2, r3, #16
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	7fffffc0 	.word	0x7fffffc0

080017cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d101      	bne.n	80017e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <LL_ADC_INJ_StopConversion+0x24>)
 8001802:	4013      	ands	r3, r2
 8001804:	f043 0220 	orr.w	r2, r3, #32
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	7fffffc0 	.word	0x7fffffc0

0800181c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b08      	cmp	r3, #8
 800182e:	d101      	bne.n	8001834 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e1ee      	b.n	8001c3c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001868:	2b00      	cmp	r3, #0
 800186a:	d109      	bne.n	8001880 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff f9dd 	bl	8000c2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff feef 	bl	8001668 <LL_ADC_IsDeepPowerDownEnabled>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fed5 	bl	8001644 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff0a 	bl	80016b8 <LL_ADC_IsInternalRegulatorEnabled>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d114      	bne.n	80018d4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff feee 	bl	8001690 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018b4:	4b8e      	ldr	r3, [pc, #568]	; (8001af0 <HAL_ADC_Init+0x2ac>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	099b      	lsrs	r3, r3, #6
 80018ba:	4a8e      	ldr	r2, [pc, #568]	; (8001af4 <HAL_ADC_Init+0x2b0>)
 80018bc:	fba2 2303 	umull	r2, r3, r2, r3
 80018c0:	099b      	lsrs	r3, r3, #6
 80018c2:	3301      	adds	r3, #1
 80018c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018c6:	e002      	b.n	80018ce <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f9      	bne.n	80018c8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff feed 	bl	80016b8 <LL_ADC_IsInternalRegulatorEnabled>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10d      	bne.n	8001900 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e8:	f043 0210 	orr.w	r2, r3, #16
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018f4:	f043 0201 	orr.w	r2, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff61 	bl	80017cc <LL_ADC_REG_IsConversionOngoing>
 800190a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001910:	f003 0310 	and.w	r3, r3, #16
 8001914:	2b00      	cmp	r3, #0
 8001916:	f040 8188 	bne.w	8001c2a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	2b00      	cmp	r3, #0
 800191e:	f040 8184 	bne.w	8001c2a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001926:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800192a:	f043 0202 	orr.w	r2, r3, #2
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fefa 	bl	8001730 <LL_ADC_IsEnabled>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d136      	bne.n	80019b0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a6c      	ldr	r2, [pc, #432]	; (8001af8 <HAL_ADC_Init+0x2b4>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d004      	beq.n	8001956 <HAL_ADC_Init+0x112>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a6a      	ldr	r2, [pc, #424]	; (8001afc <HAL_ADC_Init+0x2b8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d10e      	bne.n	8001974 <HAL_ADC_Init+0x130>
 8001956:	4868      	ldr	r0, [pc, #416]	; (8001af8 <HAL_ADC_Init+0x2b4>)
 8001958:	f7ff feea 	bl	8001730 <LL_ADC_IsEnabled>
 800195c:	4604      	mov	r4, r0
 800195e:	4867      	ldr	r0, [pc, #412]	; (8001afc <HAL_ADC_Init+0x2b8>)
 8001960:	f7ff fee6 	bl	8001730 <LL_ADC_IsEnabled>
 8001964:	4603      	mov	r3, r0
 8001966:	4323      	orrs	r3, r4
 8001968:	2b00      	cmp	r3, #0
 800196a:	bf0c      	ite	eq
 800196c:	2301      	moveq	r3, #1
 800196e:	2300      	movne	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	e008      	b.n	8001986 <HAL_ADC_Init+0x142>
 8001974:	4862      	ldr	r0, [pc, #392]	; (8001b00 <HAL_ADC_Init+0x2bc>)
 8001976:	f7ff fedb 	bl	8001730 <LL_ADC_IsEnabled>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf0c      	ite	eq
 8001980:	2301      	moveq	r3, #1
 8001982:	2300      	movne	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d012      	beq.n	80019b0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a5a      	ldr	r2, [pc, #360]	; (8001af8 <HAL_ADC_Init+0x2b4>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d004      	beq.n	800199e <HAL_ADC_Init+0x15a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a58      	ldr	r2, [pc, #352]	; (8001afc <HAL_ADC_Init+0x2b8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_Init+0x15e>
 800199e:	4a59      	ldr	r2, [pc, #356]	; (8001b04 <HAL_ADC_Init+0x2c0>)
 80019a0:	e000      	b.n	80019a4 <HAL_ADC_Init+0x160>
 80019a2:	4a59      	ldr	r2, [pc, #356]	; (8001b08 <HAL_ADC_Init+0x2c4>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	4619      	mov	r1, r3
 80019aa:	4610      	mov	r0, r2
 80019ac:	f7ff fc0e 	bl	80011cc <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a52      	ldr	r2, [pc, #328]	; (8001b00 <HAL_ADC_Init+0x2bc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d129      	bne.n	8001a0e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7e5b      	ldrb	r3, [r3, #25]
 80019be:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80019c4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80019ca:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d013      	beq.n	80019fc <HAL_ADC_Init+0x1b8>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	d00d      	beq.n	80019f8 <HAL_ADC_Init+0x1b4>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b1c      	cmp	r3, #28
 80019e2:	d007      	beq.n	80019f4 <HAL_ADC_Init+0x1b0>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b18      	cmp	r3, #24
 80019ea:	d101      	bne.n	80019f0 <HAL_ADC_Init+0x1ac>
 80019ec:	2318      	movs	r3, #24
 80019ee:	e006      	b.n	80019fe <HAL_ADC_Init+0x1ba>
 80019f0:	2300      	movs	r3, #0
 80019f2:	e004      	b.n	80019fe <HAL_ADC_Init+0x1ba>
 80019f4:	2310      	movs	r3, #16
 80019f6:	e002      	b.n	80019fe <HAL_ADC_Init+0x1ba>
 80019f8:	2308      	movs	r3, #8
 80019fa:	e000      	b.n	80019fe <HAL_ADC_Init+0x1ba>
 80019fc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80019fe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a06:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
 8001a0c:	e00e      	b.n	8001a2c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7e5b      	ldrb	r3, [r3, #25]
 8001a12:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a18:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a1e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a26:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d106      	bne.n	8001a44 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	045b      	lsls	r3, r3, #17
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d009      	beq.n	8001a60 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a26      	ldr	r2, [pc, #152]	; (8001b00 <HAL_ADC_Init+0x2bc>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d115      	bne.n	8001a96 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <HAL_ADC_Init+0x2c8>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	69b9      	ldr	r1, [r7, #24]
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	611a      	str	r2, [r3, #16]
 8001a94:	e009      	b.n	8001aaa <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <HAL_ADC_Init+0x2cc>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	69b9      	ldr	r1, [r7, #24]
 8001aa6:	430b      	orrs	r3, r1
 8001aa8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fe8c 	bl	80017cc <LL_ADC_REG_IsConversionOngoing>
 8001ab4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff feae 	bl	800181c <LL_ADC_INJ_IsConversionOngoing>
 8001ac0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f040 808e 	bne.w	8001be6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f040 808a 	bne.w	8001be6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <HAL_ADC_Init+0x2bc>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d11b      	bne.n	8001b14 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	7e1b      	ldrb	r3, [r3, #24]
 8001ae0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ae8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	e018      	b.n	8001b22 <HAL_ADC_Init+0x2de>
 8001af0:	24000008 	.word	0x24000008
 8001af4:	053e2d63 	.word	0x053e2d63
 8001af8:	40022000 	.word	0x40022000
 8001afc:	40022100 	.word	0x40022100
 8001b00:	58026000 	.word	0x58026000
 8001b04:	40022300 	.word	0x40022300
 8001b08:	58026300 	.word	0x58026300
 8001b0c:	fff04007 	.word	0xfff04007
 8001b10:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7e1b      	ldrb	r3, [r3, #24]
 8001b18:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	4b46      	ldr	r3, [pc, #280]	; (8001c44 <HAL_ADC_Init+0x400>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	69b9      	ldr	r1, [r7, #24]
 8001b32:	430b      	orrs	r3, r1
 8001b34:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d137      	bne.n	8001bb0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b44:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a3f      	ldr	r2, [pc, #252]	; (8001c48 <HAL_ADC_Init+0x404>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d116      	bne.n	8001b7e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <HAL_ADC_Init+0x408>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b62:	4311      	orrs	r1, r2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b68:	4311      	orrs	r1, r2
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	611a      	str	r2, [r3, #16]
 8001b7c:	e020      	b.n	8001bc0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <HAL_ADC_Init+0x40c>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b8c:	3a01      	subs	r2, #1
 8001b8e:	0411      	lsls	r1, r2, #16
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b94:	4311      	orrs	r1, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b9a:	4311      	orrs	r1, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f042 0201 	orr.w	r2, r2, #1
 8001bac:	611a      	str	r2, [r3, #16]
 8001bae:	e007      	b.n	8001bc0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1b      	ldr	r2, [pc, #108]	; (8001c48 <HAL_ADC_Init+0x404>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d002      	beq.n	8001be6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f001 fb33 	bl	800324c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d10c      	bne.n	8001c08 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	f023 010f 	bic.w	r1, r3, #15
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	1e5a      	subs	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	631a      	str	r2, [r3, #48]	; 0x30
 8001c06:	e007      	b.n	8001c18 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 020f 	bic.w	r2, r2, #15
 8001c16:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1c:	f023 0303 	bic.w	r3, r3, #3
 8001c20:	f043 0201 	orr.w	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	661a      	str	r2, [r3, #96]	; 0x60
 8001c28:	e007      	b.n	8001c3a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2e:	f043 0210 	orr.w	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3724      	adds	r7, #36	; 0x24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd90      	pop	{r4, r7, pc}
 8001c44:	ffffbffc 	.word	0xffffbffc
 8001c48:	58026000 	.word	0x58026000
 8001c4c:	fc00f81f 	.word	0xfc00f81f
 8001c50:	fc00f81e 	.word	0xfc00f81e

08001c54 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a60      	ldr	r2, [pc, #384]	; (8001de8 <HAL_ADC_Start_DMA+0x194>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d004      	beq.n	8001c74 <HAL_ADC_Start_DMA+0x20>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a5f      	ldr	r2, [pc, #380]	; (8001dec <HAL_ADC_Start_DMA+0x198>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_Start_DMA+0x24>
 8001c74:	4b5e      	ldr	r3, [pc, #376]	; (8001df0 <HAL_ADC_Start_DMA+0x19c>)
 8001c76:	e000      	b.n	8001c7a <HAL_ADC_Start_DMA+0x26>
 8001c78:	4b5e      	ldr	r3, [pc, #376]	; (8001df4 <HAL_ADC_Start_DMA+0x1a0>)
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fcc6 	bl	800160c <LL_ADC_GetMultimode>
 8001c80:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fda0 	bl	80017cc <LL_ADC_REG_IsConversionOngoing>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f040 80a2 	bne.w	8001dd8 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_Start_DMA+0x4e>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e09d      	b.n	8001dde <HAL_ADC_Start_DMA+0x18a>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d006      	beq.n	8001cbe <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b05      	cmp	r3, #5
 8001cb4:	d003      	beq.n	8001cbe <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	2b09      	cmp	r3, #9
 8001cba:	f040 8086 	bne.w	8001dca <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f001 f946 	bl	8002f50 <ADC_Enable>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001cc8:	7dfb      	ldrb	r3, [r7, #23]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d178      	bne.n	8001dc0 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cd2:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <HAL_ADC_Start_DMA+0x1a4>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a42      	ldr	r2, [pc, #264]	; (8001dec <HAL_ADC_Start_DMA+0x198>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d002      	beq.n	8001cee <HAL_ADC_Start_DMA+0x9a>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	e000      	b.n	8001cf0 <HAL_ADC_Start_DMA+0x9c>
 8001cee:	4b3e      	ldr	r3, [pc, #248]	; (8001de8 <HAL_ADC_Start_DMA+0x194>)
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d002      	beq.n	8001cfe <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d105      	bne.n	8001d0a <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d006      	beq.n	8001d24 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d1a:	f023 0206 	bic.w	r2, r3, #6
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	665a      	str	r2, [r3, #100]	; 0x64
 8001d22:	e002      	b.n	8001d2a <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2e:	4a33      	ldr	r2, [pc, #204]	; (8001dfc <HAL_ADC_Start_DMA+0x1a8>)
 8001d30:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	4a32      	ldr	r2, [pc, #200]	; (8001e00 <HAL_ADC_Start_DMA+0x1ac>)
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	4a31      	ldr	r2, [pc, #196]	; (8001e04 <HAL_ADC_Start_DMA+0x1b0>)
 8001d40:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	221c      	movs	r2, #28
 8001d48:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0210 	orr.w	r2, r2, #16
 8001d60:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a28      	ldr	r2, [pc, #160]	; (8001e08 <HAL_ADC_Start_DMA+0x1b4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d10f      	bne.n	8001d8c <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	f7ff fbae 	bl	80014dc <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fb99 	bl	80014bc <LL_ADC_EnableDMAReq>
 8001d8a:	e007      	b.n	8001d9c <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	4619      	mov	r1, r3
 8001d96:	4610      	mov	r0, r2
 8001d98:	f7ff fb7d 	bl	8001496 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	3340      	adds	r3, #64	; 0x40
 8001da6:	4619      	mov	r1, r3
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f002 f852 	bl	8003e54 <HAL_DMA_Start_IT>
 8001db0:	4603      	mov	r3, r0
 8001db2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fcdf 	bl	800177c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001dbe:	e00d      	b.n	8001ddc <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8001dc8:	e008      	b.n	8001ddc <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001dd6:	e001      	b.n	8001ddc <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40022000 	.word	0x40022000
 8001dec:	40022100 	.word	0x40022100
 8001df0:	40022300 	.word	0x40022300
 8001df4:	58026300 	.word	0x58026300
 8001df8:	fffff0fe 	.word	0xfffff0fe
 8001dfc:	08003123 	.word	0x08003123
 8001e00:	080031fb 	.word	0x080031fb
 8001e04:	08003217 	.word	0x08003217
 8001e08:	58026000 	.word	0x58026000

08001e0c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_ADC_Stop_DMA+0x16>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e04f      	b.n	8001ec2 <HAL_ADC_Stop_DMA+0xb6>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001e2a:	2103      	movs	r1, #3
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 ffd3 	bl	8002dd8 <ADC_ConversionStop>
 8001e32:	4603      	mov	r3, r0
 8001e34:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d13d      	bne.n	8001eb8 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0203 	bic.w	r2, r2, #3
 8001e4a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d10f      	bne.n	8001e7a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f002 fa62 	bl	8004328 <HAL_DMA_Abort>
 8001e64:	4603      	mov	r3, r0
 8001e66:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	661a      	str	r2, [r3, #96]	; 0x60
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0210 	bic.w	r2, r2, #16
 8001e88:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f001 f8e7 	bl	8003064 <ADC_Disable>
 8001e96:	4603      	mov	r3, r0
 8001e98:	73fb      	strb	r3, [r7, #15]
 8001e9a:	e002      	b.n	8001ea2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f001 f8e1 	bl	8003064 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d107      	bne.n	8001eb8 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001eac:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <HAL_ADC_Stop_DMA+0xc0>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	f043 0201 	orr.w	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	661a      	str	r2, [r3, #96]	; 0x60
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	ffffeefe 	.word	0xffffeefe

08001ed0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	; 0x28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001ed8:	2300      	movs	r3, #0
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a87      	ldr	r2, [pc, #540]	; (8002110 <HAL_ADC_IRQHandler+0x240>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d004      	beq.n	8001f00 <HAL_ADC_IRQHandler+0x30>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a86      	ldr	r2, [pc, #536]	; (8002114 <HAL_ADC_IRQHandler+0x244>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d101      	bne.n	8001f04 <HAL_ADC_IRQHandler+0x34>
 8001f00:	4b85      	ldr	r3, [pc, #532]	; (8002118 <HAL_ADC_IRQHandler+0x248>)
 8001f02:	e000      	b.n	8001f06 <HAL_ADC_IRQHandler+0x36>
 8001f04:	4b85      	ldr	r3, [pc, #532]	; (800211c <HAL_ADC_IRQHandler+0x24c>)
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fb80 	bl	800160c <LL_ADC_GetMultimode>
 8001f0c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d017      	beq.n	8001f48 <HAL_ADC_IRQHandler+0x78>
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d012      	beq.n	8001f48 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d105      	bne.n	8001f3a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f32:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f001 fa9a 	bl	8003474 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2202      	movs	r2, #2
 8001f46:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <HAL_ADC_IRQHandler+0x8c>
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10a      	bne.n	8001f72 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8083 	beq.w	800206e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d07d      	beq.n	800206e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d105      	bne.n	8001f8a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fa42 	bl	8001418 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d062      	beq.n	8002060 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a5d      	ldr	r2, [pc, #372]	; (8002114 <HAL_ADC_IRQHandler+0x244>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d002      	beq.n	8001faa <HAL_ADC_IRQHandler+0xda>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	e000      	b.n	8001fac <HAL_ADC_IRQHandler+0xdc>
 8001faa:	4b59      	ldr	r3, [pc, #356]	; (8002110 <HAL_ADC_IRQHandler+0x240>)
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d008      	beq.n	8001fc6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	d002      	beq.n	8001fc6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2b09      	cmp	r3, #9
 8001fc4:	d104      	bne.n	8001fd0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	623b      	str	r3, [r7, #32]
 8001fce:	e00c      	b.n	8001fea <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a4f      	ldr	r2, [pc, #316]	; (8002114 <HAL_ADC_IRQHandler+0x244>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d002      	beq.n	8001fe0 <HAL_ADC_IRQHandler+0x110>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	e000      	b.n	8001fe2 <HAL_ADC_IRQHandler+0x112>
 8001fe0:	4b4b      	ldr	r3, [pc, #300]	; (8002110 <HAL_ADC_IRQHandler+0x240>)
 8001fe2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d135      	bne.n	8002060 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d12e      	bne.n	8002060 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fbe0 	bl	80017cc <LL_ADC_REG_IsConversionOngoing>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d11a      	bne.n	8002048 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 020c 	bic.w	r2, r2, #12
 8002020:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002026:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002032:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d112      	bne.n	8002060 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203e:	f043 0201 	orr.w	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	661a      	str	r2, [r3, #96]	; 0x60
 8002046:	e00b      	b.n	8002060 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204c:	f043 0210 	orr.w	r2, r3, #16
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002058:	f043 0201 	orr.w	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7fe f953 	bl	800030c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	220c      	movs	r2, #12
 800206c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f003 0320 	and.w	r3, r3, #32
 8002074:	2b00      	cmp	r3, #0
 8002076:	d004      	beq.n	8002082 <HAL_ADC_IRQHandler+0x1b2>
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10b      	bne.n	800209a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80a0 	beq.w	80021ce <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 809a 	beq.w	80021ce <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d105      	bne.n	80020b2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020aa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fa2a 	bl	8001510 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80020bc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff f9a8 	bl	8001418 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020c8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a11      	ldr	r2, [pc, #68]	; (8002114 <HAL_ADC_IRQHandler+0x244>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d002      	beq.n	80020da <HAL_ADC_IRQHandler+0x20a>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	e000      	b.n	80020dc <HAL_ADC_IRQHandler+0x20c>
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <HAL_ADC_IRQHandler+0x240>)
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d008      	beq.n	80020f6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2b06      	cmp	r3, #6
 80020ee:	d002      	beq.n	80020f6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	2b07      	cmp	r3, #7
 80020f4:	d104      	bne.n	8002100 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	623b      	str	r3, [r7, #32]
 80020fe:	e014      	b.n	800212a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a03      	ldr	r2, [pc, #12]	; (8002114 <HAL_ADC_IRQHandler+0x244>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00a      	beq.n	8002120 <HAL_ADC_IRQHandler+0x250>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	e008      	b.n	8002122 <HAL_ADC_IRQHandler+0x252>
 8002110:	40022000 	.word	0x40022000
 8002114:	40022100 	.word	0x40022100
 8002118:	40022300 	.word	0x40022300
 800211c:	58026300 	.word	0x58026300
 8002120:	4b84      	ldr	r3, [pc, #528]	; (8002334 <HAL_ADC_IRQHandler+0x464>)
 8002122:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d047      	beq.n	80021c0 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d007      	beq.n	800214a <HAL_ADC_IRQHandler+0x27a>
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d03f      	beq.n	80021c0 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002146:	2b00      	cmp	r3, #0
 8002148:	d13a      	bne.n	80021c0 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d133      	bne.n	80021c0 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d12e      	bne.n	80021c0 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fb58 	bl	800181c <LL_ADC_INJ_IsConversionOngoing>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d11a      	bne.n	80021a8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002180:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002196:	2b00      	cmp	r3, #0
 8002198:	d112      	bne.n	80021c0 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219e:	f043 0201 	orr.w	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	661a      	str	r2, [r3, #96]	; 0x60
 80021a6:	e00b      	b.n	80021c0 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ac:	f043 0210 	orr.w	r2, r3, #16
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021b8:	f043 0201 	orr.w	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f001 f92f 	bl	8003424 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2260      	movs	r2, #96	; 0x60
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d011      	beq.n	80021fc <HAL_ADC_IRQHandler+0x32c>
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00c      	beq.n	80021fc <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f8b2 	bl	8002358 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2280      	movs	r2, #128	; 0x80
 80021fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d012      	beq.n	800222c <HAL_ADC_IRQHandler+0x35c>
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00d      	beq.n	800222c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002214:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f001 f915 	bl	800344c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800222a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002232:	2b00      	cmp	r3, #0
 8002234:	d012      	beq.n	800225c <HAL_ADC_IRQHandler+0x38c>
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00d      	beq.n	800225c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002244:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f001 f907 	bl	8003460 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800225a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b00      	cmp	r3, #0
 8002264:	d043      	beq.n	80022ee <HAL_ADC_IRQHandler+0x41e>
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b00      	cmp	r3, #0
 800226e:	d03e      	beq.n	80022ee <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002278:	2301      	movs	r3, #1
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
 800227c:	e021      	b.n	80022c2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d015      	beq.n	80022b0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a2a      	ldr	r2, [pc, #168]	; (8002334 <HAL_ADC_IRQHandler+0x464>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d004      	beq.n	8002298 <HAL_ADC_IRQHandler+0x3c8>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a29      	ldr	r2, [pc, #164]	; (8002338 <HAL_ADC_IRQHandler+0x468>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d101      	bne.n	800229c <HAL_ADC_IRQHandler+0x3cc>
 8002298:	4b28      	ldr	r3, [pc, #160]	; (800233c <HAL_ADC_IRQHandler+0x46c>)
 800229a:	e000      	b.n	800229e <HAL_ADC_IRQHandler+0x3ce>
 800229c:	4b28      	ldr	r3, [pc, #160]	; (8002340 <HAL_ADC_IRQHandler+0x470>)
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff f9c2 	bl	8001628 <LL_ADC_GetMultiDMATransfer>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00b      	beq.n	80022c2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80022aa:	2301      	movs	r3, #1
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
 80022ae:	e008      	b.n	80022c2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80022be:	2301      	movs	r3, #1
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d10e      	bne.n	80022e6 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022d8:	f043 0202 	orr.w	r2, r3, #2
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f843 	bl	800236c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2210      	movs	r2, #16
 80022ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d018      	beq.n	800232a <HAL_ADC_IRQHandler+0x45a>
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d013      	beq.n	800232a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002306:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002312:	f043 0208 	orr.w	r2, r3, #8
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002322:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f001 f887 	bl	8003438 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800232a:	bf00      	nop
 800232c:	3728      	adds	r7, #40	; 0x28
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40022000 	.word	0x40022000
 8002338:	40022100 	.word	0x40022100
 800233c:	40022300 	.word	0x40022300
 8002340:	58026300 	.word	0x58026300

08002344 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002380:	b590      	push	{r4, r7, lr}
 8002382:	b0b9      	sub	sp, #228	; 0xe4
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800239a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4aa9      	ldr	r2, [pc, #676]	; (8002648 <HAL_ADC_ConfigChannel+0x2c8>)
 80023a2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d102      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x34>
 80023ae:	2302      	movs	r3, #2
 80023b0:	f000 bcfa 	b.w	8002da8 <HAL_ADC_ConfigChannel+0xa28>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fa03 	bl	80017cc <LL_ADC_REG_IsConversionOngoing>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f040 84de 	bne.w	8002d8a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a9e      	ldr	r2, [pc, #632]	; (800264c <HAL_ADC_ConfigChannel+0x2cc>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d033      	beq.n	8002440 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d108      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x76>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	0e9b      	lsrs	r3, r3, #26
 80023ea:	f003 031f 	and.w	r3, r3, #31
 80023ee:	2201      	movs	r2, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	e01d      	b.n	8002432 <HAL_ADC_ConfigChannel+0xb2>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800240a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800240e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002412:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800241a:	2320      	movs	r3, #32
 800241c:	e004      	b.n	8002428 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800241e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	2201      	movs	r2, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	69d1      	ldr	r1, [r2, #28]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	430b      	orrs	r3, r1
 800243e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	6859      	ldr	r1, [r3, #4]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	f7fe fff6 	bl	800143e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff f9b8 	bl	80017cc <LL_ADC_REG_IsConversionOngoing>
 800245c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff f9d9 	bl	800181c <LL_ADC_INJ_IsConversionOngoing>
 800246a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800246e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 8270 	bne.w	8002958 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002478:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800247c:	2b00      	cmp	r3, #0
 800247e:	f040 826b 	bne.w	8002958 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6819      	ldr	r1, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	461a      	mov	r2, r3
 8002490:	f7ff f851 	bl	8001536 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a6c      	ldr	r2, [pc, #432]	; (800264c <HAL_ADC_ConfigChannel+0x2cc>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d10d      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	695a      	ldr	r2, [r3, #20]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	08db      	lsrs	r3, r3, #3
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024b8:	e032      	b.n	8002520 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80024ba:	4b65      	ldr	r3, [pc, #404]	; (8002650 <HAL_ADC_ConfigChannel+0x2d0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80024c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024c6:	d10b      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x160>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	e01d      	b.n	800251c <HAL_ADC_ConfigChannel+0x19c>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10b      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x186>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	e00a      	b.n	800251c <HAL_ADC_ConfigChannel+0x19c>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	695a      	ldr	r2, [r3, #20]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	2b04      	cmp	r3, #4
 8002526:	d048      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6919      	ldr	r1, [r3, #16]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002538:	f7fe fe7c 	bl	8001234 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a42      	ldr	r2, [pc, #264]	; (800264c <HAL_ADC_ConfigChannel+0x2cc>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d119      	bne.n	800257a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6919      	ldr	r1, [r3, #16]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	461a      	mov	r2, r3
 8002554:	f7fe ff14 	bl	8001380 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	6919      	ldr	r1, [r3, #16]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d102      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x1f0>
 800256a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800256e:	e000      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1f2>
 8002570:	2300      	movs	r3, #0
 8002572:	461a      	mov	r2, r3
 8002574:	f7fe fee2 	bl	800133c <LL_ADC_SetOffsetSaturation>
 8002578:	e1ee      	b.n	8002958 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6919      	ldr	r1, [r3, #16]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002588:	2b01      	cmp	r3, #1
 800258a:	d102      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x212>
 800258c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002590:	e000      	b.n	8002594 <HAL_ADC_ConfigChannel+0x214>
 8002592:	2300      	movs	r3, #0
 8002594:	461a      	mov	r2, r3
 8002596:	f7fe feaf 	bl	80012f8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6919      	ldr	r1, [r3, #16]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	7e1b      	ldrb	r3, [r3, #24]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d102      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x230>
 80025aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025ae:	e000      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x232>
 80025b0:	2300      	movs	r3, #0
 80025b2:	461a      	mov	r2, r3
 80025b4:	f7fe fe86 	bl	80012c4 <LL_ADC_SetDataRightShift>
 80025b8:	e1ce      	b.n	8002958 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a23      	ldr	r2, [pc, #140]	; (800264c <HAL_ADC_ConfigChannel+0x2cc>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	f040 8181 	bne.w	80028c8 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fe63 	bl	8001298 <LL_ADC_GetOffsetChannel>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10a      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x272>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe fe58 	bl	8001298 <LL_ADC_GetOffsetChannel>
 80025e8:	4603      	mov	r3, r0
 80025ea:	0e9b      	lsrs	r3, r3, #26
 80025ec:	f003 021f 	and.w	r2, r3, #31
 80025f0:	e01e      	b.n	8002630 <HAL_ADC_ConfigChannel+0x2b0>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fe fe4d 	bl	8001298 <LL_ADC_GetOffsetChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002610:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002614:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002618:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8002620:	2320      	movs	r3, #32
 8002622:	e004      	b.n	800262e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8002624:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10b      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x2d4>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	0e9b      	lsrs	r3, r3, #26
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	e01e      	b.n	8002686 <HAL_ADC_ConfigChannel+0x306>
 8002648:	47ff0000 	.word	0x47ff0000
 800264c:	58026000 	.word	0x58026000
 8002650:	5c001000 	.word	0x5c001000
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002668:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800266c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002670:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8002678:	2320      	movs	r3, #32
 800267a:	e004      	b.n	8002686 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 800267c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	429a      	cmp	r2, r3
 8002688:	d106      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2200      	movs	r2, #0
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fe96 	bl	80013c4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2101      	movs	r1, #1
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fdfa 	bl	8001298 <LL_ADC_GetOffsetChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10a      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x344>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2101      	movs	r1, #1
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe fdef 	bl	8001298 <LL_ADC_GetOffsetChannel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	f003 021f 	and.w	r2, r3, #31
 80026c2:	e01e      	b.n	8002702 <HAL_ADC_ConfigChannel+0x382>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2101      	movs	r1, #1
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fde4 	bl	8001298 <LL_ADC_GetOffsetChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80026e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80026ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80026f2:	2320      	movs	r3, #32
 80026f4:	e004      	b.n	8002700 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80026f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800270a:	2b00      	cmp	r3, #0
 800270c:	d105      	bne.n	800271a <HAL_ADC_ConfigChannel+0x39a>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	0e9b      	lsrs	r3, r3, #26
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	e018      	b.n	800274c <HAL_ADC_ConfigChannel+0x3cc>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800272e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002732:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002736:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800273e:	2320      	movs	r3, #32
 8002740:	e004      	b.n	800274c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8002742:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	429a      	cmp	r2, r3
 800274e:	d106      	bne.n	800275e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2200      	movs	r2, #0
 8002756:	2101      	movs	r1, #1
 8002758:	4618      	mov	r0, r3
 800275a:	f7fe fe33 	bl	80013c4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2102      	movs	r1, #2
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe fd97 	bl	8001298 <LL_ADC_GetOffsetChannel>
 800276a:	4603      	mov	r3, r0
 800276c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <HAL_ADC_ConfigChannel+0x40a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2102      	movs	r1, #2
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe fd8c 	bl	8001298 <LL_ADC_GetOffsetChannel>
 8002780:	4603      	mov	r3, r0
 8002782:	0e9b      	lsrs	r3, r3, #26
 8002784:	f003 021f 	and.w	r2, r3, #31
 8002788:	e01e      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x448>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2102      	movs	r1, #2
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe fd81 	bl	8001298 <LL_ADC_GetOffsetChannel>
 8002796:	4603      	mov	r3, r0
 8002798:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80027a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80027b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80027b8:	2320      	movs	r3, #32
 80027ba:	e004      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80027bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d105      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x460>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	0e9b      	lsrs	r3, r3, #26
 80027da:	f003 031f 	and.w	r3, r3, #31
 80027de:	e014      	b.n	800280a <HAL_ADC_ConfigChannel+0x48a>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80027ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80027f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80027fc:	2320      	movs	r3, #32
 80027fe:	e004      	b.n	800280a <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8002800:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002804:	fab3 f383 	clz	r3, r3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	429a      	cmp	r2, r3
 800280c:	d106      	bne.n	800281c <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2200      	movs	r2, #0
 8002814:	2102      	movs	r1, #2
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe fdd4 	bl	80013c4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2103      	movs	r1, #3
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fd38 	bl	8001298 <LL_ADC_GetOffsetChannel>
 8002828:	4603      	mov	r3, r0
 800282a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10a      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x4c8>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2103      	movs	r1, #3
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe fd2d 	bl	8001298 <LL_ADC_GetOffsetChannel>
 800283e:	4603      	mov	r3, r0
 8002840:	0e9b      	lsrs	r3, r3, #26
 8002842:	f003 021f 	and.w	r2, r3, #31
 8002846:	e017      	b.n	8002878 <HAL_ADC_ConfigChannel+0x4f8>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2103      	movs	r1, #3
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fd22 	bl	8001298 <LL_ADC_GetOffsetChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002862:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800286a:	2320      	movs	r3, #32
 800286c:	e003      	b.n	8002876 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800286e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002870:	fab3 f383 	clz	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x510>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0e9b      	lsrs	r3, r3, #26
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	e011      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x534>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800289e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028a0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80028a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80028a8:	2320      	movs	r3, #32
 80028aa:	e003      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80028ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d14f      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2200      	movs	r2, #0
 80028be:	2103      	movs	r1, #3
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe fd7f 	bl	80013c4 <LL_ADC_SetOffsetState>
 80028c6:	e047      	b.n	8002958 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	069b      	lsls	r3, r3, #26
 80028d8:	429a      	cmp	r2, r3
 80028da:	d107      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028ea:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	069b      	lsls	r3, r3, #26
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d107      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800290e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002916:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	069b      	lsls	r3, r3, #26
 8002920:	429a      	cmp	r2, r3
 8002922:	d107      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002932:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800293a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	069b      	lsls	r3, r3, #26
 8002944:	429a      	cmp	r2, r3
 8002946:	d107      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002956:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fee7 	bl	8001730 <LL_ADC_IsEnabled>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	f040 8219 	bne.w	8002d9c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6819      	ldr	r1, [r3, #0]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	461a      	mov	r2, r3
 8002978:	f7fe fe08 	bl	800158c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4aa1      	ldr	r2, [pc, #644]	; (8002c08 <HAL_ADC_ConfigChannel+0x888>)
 8002982:	4293      	cmp	r3, r2
 8002984:	f040 812e 	bne.w	8002be4 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10b      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x630>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	0e9b      	lsrs	r3, r3, #26
 800299e:	3301      	adds	r3, #1
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	2b09      	cmp	r3, #9
 80029a6:	bf94      	ite	ls
 80029a8:	2301      	movls	r3, #1
 80029aa:	2300      	movhi	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	e019      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x664>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80029be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80029c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80029c8:	2320      	movs	r3, #32
 80029ca:	e003      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80029cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	2b09      	cmp	r3, #9
 80029dc:	bf94      	ite	ls
 80029de:	2301      	movls	r3, #1
 80029e0:	2300      	movhi	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d079      	beq.n	8002adc <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d107      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x684>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	0e9b      	lsrs	r3, r3, #26
 80029fa:	3301      	adds	r3, #1
 80029fc:	069b      	lsls	r3, r3, #26
 80029fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a02:	e015      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x6b0>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a14:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002a1c:	2320      	movs	r3, #32
 8002a1e:	e003      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8002a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	3301      	adds	r3, #1
 8002a2a:	069b      	lsls	r3, r3, #26
 8002a2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d109      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x6d0>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0e9b      	lsrs	r3, r3, #26
 8002a42:	3301      	adds	r3, #1
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	2101      	movs	r1, #1
 8002a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4e:	e017      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x700>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a60:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8002a68:	2320      	movs	r3, #32
 8002a6a:	e003      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8002a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	3301      	adds	r3, #1
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a80:	ea42 0103 	orr.w	r1, r2, r3
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10a      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x726>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	0e9b      	lsrs	r3, r3, #26
 8002a96:	3301      	adds	r3, #1
 8002a98:	f003 021f 	and.w	r2, r3, #31
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	051b      	lsls	r3, r3, #20
 8002aa4:	e018      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x758>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8002abe:	2320      	movs	r3, #32
 8002ac0:	e003      	b.n	8002aca <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	fab3 f383 	clz	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	3301      	adds	r3, #1
 8002acc:	f003 021f 	and.w	r2, r3, #31
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	e07e      	b.n	8002bda <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d107      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x778>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0e9b      	lsrs	r3, r3, #26
 8002aee:	3301      	adds	r3, #1
 8002af0:	069b      	lsls	r3, r3, #26
 8002af2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002af6:	e015      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x7a4>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b00:	fa93 f3a3 	rbit	r3, r3
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8002b10:	2320      	movs	r3, #32
 8002b12:	e003      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8002b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	069b      	lsls	r3, r3, #26
 8002b20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d109      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x7c4>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	0e9b      	lsrs	r3, r3, #26
 8002b36:	3301      	adds	r3, #1
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b42:	e017      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x7f4>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	61bb      	str	r3, [r7, #24]
  return result;
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8002b5c:	2320      	movs	r3, #32
 8002b5e:	e003      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	fab3 f383 	clz	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f003 031f 	and.w	r3, r3, #31
 8002b6e:	2101      	movs	r1, #1
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	ea42 0103 	orr.w	r1, r2, r3
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10d      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x820>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	0e9b      	lsrs	r3, r3, #26
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	f003 021f 	and.w	r2, r3, #31
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	3b1e      	subs	r3, #30
 8002b98:	051b      	lsls	r3, r3, #20
 8002b9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	e01b      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x858>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	60fb      	str	r3, [r7, #12]
  return result;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8002bb8:	2320      	movs	r3, #32
 8002bba:	e003      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	f003 021f 	and.w	r2, r3, #31
 8002bca:	4613      	mov	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4413      	add	r3, r2
 8002bd0:	3b1e      	subs	r3, #30
 8002bd2:	051b      	lsls	r3, r3, #20
 8002bd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	6892      	ldr	r2, [r2, #8]
 8002bde:	4619      	mov	r1, r3
 8002be0:	f7fe fca9 	bl	8001536 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f280 80d7 	bge.w	8002d9c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a06      	ldr	r2, [pc, #24]	; (8002c0c <HAL_ADC_ConfigChannel+0x88c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d004      	beq.n	8002c02 <HAL_ADC_ConfigChannel+0x882>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a04      	ldr	r2, [pc, #16]	; (8002c10 <HAL_ADC_ConfigChannel+0x890>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d10a      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x898>
 8002c02:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <HAL_ADC_ConfigChannel+0x894>)
 8002c04:	e009      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x89a>
 8002c06:	bf00      	nop
 8002c08:	47ff0000 	.word	0x47ff0000
 8002c0c:	40022000 	.word	0x40022000
 8002c10:	40022100 	.word	0x40022100
 8002c14:	40022300 	.word	0x40022300
 8002c18:	4b65      	ldr	r3, [pc, #404]	; (8002db0 <HAL_ADC_ConfigChannel+0xa30>)
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe fafc 	bl	8001218 <LL_ADC_GetCommonPathInternalCh>
 8002c20:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a62      	ldr	r2, [pc, #392]	; (8002db4 <HAL_ADC_ConfigChannel+0xa34>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d004      	beq.n	8002c38 <HAL_ADC_ConfigChannel+0x8b8>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a61      	ldr	r2, [pc, #388]	; (8002db8 <HAL_ADC_ConfigChannel+0xa38>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d10e      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x8d6>
 8002c38:	485e      	ldr	r0, [pc, #376]	; (8002db4 <HAL_ADC_ConfigChannel+0xa34>)
 8002c3a:	f7fe fd79 	bl	8001730 <LL_ADC_IsEnabled>
 8002c3e:	4604      	mov	r4, r0
 8002c40:	485d      	ldr	r0, [pc, #372]	; (8002db8 <HAL_ADC_ConfigChannel+0xa38>)
 8002c42:	f7fe fd75 	bl	8001730 <LL_ADC_IsEnabled>
 8002c46:	4603      	mov	r3, r0
 8002c48:	4323      	orrs	r3, r4
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	bf0c      	ite	eq
 8002c4e:	2301      	moveq	r3, #1
 8002c50:	2300      	movne	r3, #0
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	e008      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x8e8>
 8002c56:	4859      	ldr	r0, [pc, #356]	; (8002dbc <HAL_ADC_ConfigChannel+0xa3c>)
 8002c58:	f7fe fd6a 	bl	8001730 <LL_ADC_IsEnabled>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	bf0c      	ite	eq
 8002c62:	2301      	moveq	r3, #1
 8002c64:	2300      	movne	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 8084 	beq.w	8002d76 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a53      	ldr	r2, [pc, #332]	; (8002dc0 <HAL_ADC_ConfigChannel+0xa40>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d132      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x95e>
 8002c78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d12c      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a4c      	ldr	r2, [pc, #304]	; (8002dbc <HAL_ADC_ConfigChannel+0xa3c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	f040 8086 	bne.w	8002d9c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a47      	ldr	r2, [pc, #284]	; (8002db4 <HAL_ADC_ConfigChannel+0xa34>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d004      	beq.n	8002ca4 <HAL_ADC_ConfigChannel+0x924>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a46      	ldr	r2, [pc, #280]	; (8002db8 <HAL_ADC_ConfigChannel+0xa38>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d101      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x928>
 8002ca4:	4a47      	ldr	r2, [pc, #284]	; (8002dc4 <HAL_ADC_ConfigChannel+0xa44>)
 8002ca6:	e000      	b.n	8002caa <HAL_ADC_ConfigChannel+0x92a>
 8002ca8:	4a41      	ldr	r2, [pc, #260]	; (8002db0 <HAL_ADC_ConfigChannel+0xa30>)
 8002caa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	f7fe fa9c 	bl	80011f2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cba:	4b43      	ldr	r3, [pc, #268]	; (8002dc8 <HAL_ADC_ConfigChannel+0xa48>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	099b      	lsrs	r3, r3, #6
 8002cc0:	4a42      	ldr	r2, [pc, #264]	; (8002dcc <HAL_ADC_ConfigChannel+0xa4c>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	099b      	lsrs	r3, r3, #6
 8002cc8:	3301      	adds	r3, #1
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002cce:	e002      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f9      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cdc:	e05e      	b.n	8002d9c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a3b      	ldr	r2, [pc, #236]	; (8002dd0 <HAL_ADC_ConfigChannel+0xa50>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d120      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x9aa>
 8002ce8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d11a      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a30      	ldr	r2, [pc, #192]	; (8002dbc <HAL_ADC_ConfigChannel+0xa3c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d14e      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a2c      	ldr	r2, [pc, #176]	; (8002db4 <HAL_ADC_ConfigChannel+0xa34>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_ADC_ConfigChannel+0x992>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a2a      	ldr	r2, [pc, #168]	; (8002db8 <HAL_ADC_ConfigChannel+0xa38>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d101      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x996>
 8002d12:	4a2c      	ldr	r2, [pc, #176]	; (8002dc4 <HAL_ADC_ConfigChannel+0xa44>)
 8002d14:	e000      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x998>
 8002d16:	4a26      	ldr	r2, [pc, #152]	; (8002db0 <HAL_ADC_ConfigChannel+0xa30>)
 8002d18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d20:	4619      	mov	r1, r3
 8002d22:	4610      	mov	r0, r2
 8002d24:	f7fe fa65 	bl	80011f2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d28:	e038      	b.n	8002d9c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a29      	ldr	r2, [pc, #164]	; (8002dd4 <HAL_ADC_ConfigChannel+0xa54>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d133      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0xa1c>
 8002d34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d12d      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <HAL_ADC_ConfigChannel+0xa3c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d128      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a19      	ldr	r2, [pc, #100]	; (8002db4 <HAL_ADC_ConfigChannel+0xa34>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d004      	beq.n	8002d5e <HAL_ADC_ConfigChannel+0x9de>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a17      	ldr	r2, [pc, #92]	; (8002db8 <HAL_ADC_ConfigChannel+0xa38>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x9e2>
 8002d5e:	4a19      	ldr	r2, [pc, #100]	; (8002dc4 <HAL_ADC_ConfigChannel+0xa44>)
 8002d60:	e000      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x9e4>
 8002d62:	4a13      	ldr	r2, [pc, #76]	; (8002db0 <HAL_ADC_ConfigChannel+0xa30>)
 8002d64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4610      	mov	r0, r2
 8002d70:	f7fe fa3f 	bl	80011f2 <LL_ADC_SetCommonPathInternalCh>
 8002d74:	e012      	b.n	8002d9c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7a:	f043 0220 	orr.w	r2, r3, #32
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8002d88:	e008      	b.n	8002d9c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8e:	f043 0220 	orr.w	r2, r3, #32
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002da4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	37e4      	adds	r7, #228	; 0xe4
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd90      	pop	{r4, r7, pc}
 8002db0:	58026300 	.word	0x58026300
 8002db4:	40022000 	.word	0x40022000
 8002db8:	40022100 	.word	0x40022100
 8002dbc:	58026000 	.word	0x58026000
 8002dc0:	c7520000 	.word	0xc7520000
 8002dc4:	40022300 	.word	0x40022300
 8002dc8:	24000008 	.word	0x24000008
 8002dcc:	053e2d63 	.word	0x053e2d63
 8002dd0:	c3210000 	.word	0xc3210000
 8002dd4:	cb840000 	.word	0xcb840000

08002dd8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe fcec 	bl	80017cc <LL_ADC_REG_IsConversionOngoing>
 8002df4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe fd0e 	bl	800181c <LL_ADC_INJ_IsConversionOngoing>
 8002e00:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d103      	bne.n	8002e10 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 8098 	beq.w	8002f40 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d02a      	beq.n	8002e74 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	7e5b      	ldrb	r3, [r3, #25]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d126      	bne.n	8002e74 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	7e1b      	ldrb	r3, [r3, #24]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d122      	bne.n	8002e74 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002e32:	e014      	b.n	8002e5e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	4a45      	ldr	r2, [pc, #276]	; (8002f4c <ADC_ConversionStop+0x174>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d90d      	bls.n	8002e58 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e40:	f043 0210 	orr.w	r2, r3, #16
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e4c:	f043 0201 	orr.w	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e074      	b.n	8002f42 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e68:	2b40      	cmp	r3, #64	; 0x40
 8002e6a:	d1e3      	bne.n	8002e34 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2240      	movs	r2, #64	; 0x40
 8002e72:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d014      	beq.n	8002ea4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fe fca4 	bl	80017cc <LL_ADC_REG_IsConversionOngoing>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00c      	beq.n	8002ea4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe fc61 	bl	8001756 <LL_ADC_IsDisableOngoing>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d104      	bne.n	8002ea4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe fc80 	bl	80017a4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d014      	beq.n	8002ed4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fcb4 	bl	800181c <LL_ADC_INJ_IsConversionOngoing>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00c      	beq.n	8002ed4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe fc49 	bl	8001756 <LL_ADC_IsDisableOngoing>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d104      	bne.n	8002ed4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fe fc90 	bl	80017f4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d005      	beq.n	8002ee6 <ADC_ConversionStop+0x10e>
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d105      	bne.n	8002eec <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002ee0:	230c      	movs	r3, #12
 8002ee2:	617b      	str	r3, [r7, #20]
        break;
 8002ee4:	e005      	b.n	8002ef2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	617b      	str	r3, [r7, #20]
        break;
 8002eea:	e002      	b.n	8002ef2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002eec:	2304      	movs	r3, #4
 8002eee:	617b      	str	r3, [r7, #20]
        break;
 8002ef0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002ef2:	f7fe f95f 	bl	80011b4 <HAL_GetTick>
 8002ef6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ef8:	e01b      	b.n	8002f32 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002efa:	f7fe f95b 	bl	80011b4 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b05      	cmp	r3, #5
 8002f06:	d914      	bls.n	8002f32 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00d      	beq.n	8002f32 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1a:	f043 0210 	orr.w	r2, r3, #16
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f26:	f043 0201 	orr.w	r2, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e007      	b.n	8002f42 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1dc      	bne.n	8002efa <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3720      	adds	r7, #32
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	000cdbff 	.word	0x000cdbff

08002f50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe fbe7 	bl	8001730 <LL_ADC_IsEnabled>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d16e      	bne.n	8003046 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	4b38      	ldr	r3, [pc, #224]	; (8003050 <ADC_Enable+0x100>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7a:	f043 0210 	orr.w	r2, r3, #16
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f86:	f043 0201 	orr.w	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e05a      	b.n	8003048 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe fba2 	bl	80016e0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f9c:	f7fe f90a 	bl	80011b4 <HAL_GetTick>
 8002fa0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a2b      	ldr	r2, [pc, #172]	; (8003054 <ADC_Enable+0x104>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d004      	beq.n	8002fb6 <ADC_Enable+0x66>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a29      	ldr	r2, [pc, #164]	; (8003058 <ADC_Enable+0x108>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d101      	bne.n	8002fba <ADC_Enable+0x6a>
 8002fb6:	4b29      	ldr	r3, [pc, #164]	; (800305c <ADC_Enable+0x10c>)
 8002fb8:	e000      	b.n	8002fbc <ADC_Enable+0x6c>
 8002fba:	4b29      	ldr	r3, [pc, #164]	; (8003060 <ADC_Enable+0x110>)
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fe fb25 	bl	800160c <LL_ADC_GetMultimode>
 8002fc2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a23      	ldr	r2, [pc, #140]	; (8003058 <ADC_Enable+0x108>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d002      	beq.n	8002fd4 <ADC_Enable+0x84>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	e000      	b.n	8002fd6 <ADC_Enable+0x86>
 8002fd4:	4b1f      	ldr	r3, [pc, #124]	; (8003054 <ADC_Enable+0x104>)
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d02c      	beq.n	8003038 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d130      	bne.n	8003046 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fe4:	e028      	b.n	8003038 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe fba0 	bl	8001730 <LL_ADC_IsEnabled>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d104      	bne.n	8003000 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe fb70 	bl	80016e0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003000:	f7fe f8d8 	bl	80011b4 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d914      	bls.n	8003038 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	d00d      	beq.n	8003038 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003020:	f043 0210 	orr.w	r2, r3, #16
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800302c:	f043 0201 	orr.w	r2, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e007      	b.n	8003048 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b01      	cmp	r3, #1
 8003044:	d1cf      	bne.n	8002fe6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	8000003f 	.word	0x8000003f
 8003054:	40022000 	.word	0x40022000
 8003058:	40022100 	.word	0x40022100
 800305c:	40022300 	.word	0x40022300
 8003060:	58026300 	.word	0x58026300

08003064 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f7fe fb70 	bl	8001756 <LL_ADC_IsDisableOngoing>
 8003076:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe fb57 	bl	8001730 <LL_ADC_IsEnabled>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d047      	beq.n	8003118 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d144      	bne.n	8003118 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 030d 	and.w	r3, r3, #13
 8003098:	2b01      	cmp	r3, #1
 800309a:	d10c      	bne.n	80030b6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fe fb31 	bl	8001708 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2203      	movs	r2, #3
 80030ac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030ae:	f7fe f881 	bl	80011b4 <HAL_GetTick>
 80030b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030b4:	e029      	b.n	800310a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ba:	f043 0210 	orr.w	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030c6:	f043 0201 	orr.w	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e023      	b.n	800311a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030d2:	f7fe f86f 	bl	80011b4 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d914      	bls.n	800310a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00d      	beq.n	800310a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f2:	f043 0210 	orr.w	r2, r3, #16
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030fe:	f043 0201 	orr.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e007      	b.n	800311a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1dc      	bne.n	80030d2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003138:	2b00      	cmp	r3, #0
 800313a:	d14b      	bne.n	80031d4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003140:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d021      	beq.n	800319a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe f95c 	bl	8001418 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d032      	beq.n	80031cc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d12b      	bne.n	80031cc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003178:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d11f      	bne.n	80031cc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003190:	f043 0201 	orr.w	r2, r3, #1
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	661a      	str	r2, [r3, #96]	; 0x60
 8003198:	e018      	b.n	80031cc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d111      	bne.n	80031cc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c4:	f043 0201 	orr.w	r2, r3, #1
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f7fd f89d 	bl	800030c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031d2:	e00e      	b.n	80031f2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f7ff f8c3 	bl	800236c <HAL_ADC_ErrorCallback>
}
 80031e6:	e004      	b.n	80031f2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	4798      	blx	r3
}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f7ff f89b 	bl	8002344 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800320e:	bf00      	nop
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b084      	sub	sp, #16
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003228:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003234:	f043 0204 	orr.w	r2, r3, #4
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f7ff f895 	bl	800236c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a6b      	ldr	r2, [pc, #428]	; (8003408 <ADC_ConfigureBoostMode+0x1bc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d004      	beq.n	8003268 <ADC_ConfigureBoostMode+0x1c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a6a      	ldr	r2, [pc, #424]	; (800340c <ADC_ConfigureBoostMode+0x1c0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d109      	bne.n	800327c <ADC_ConfigureBoostMode+0x30>
 8003268:	4b69      	ldr	r3, [pc, #420]	; (8003410 <ADC_ConfigureBoostMode+0x1c4>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf14      	ite	ne
 8003274:	2301      	movne	r3, #1
 8003276:	2300      	moveq	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e008      	b.n	800328e <ADC_ConfigureBoostMode+0x42>
 800327c:	4b65      	ldr	r3, [pc, #404]	; (8003414 <ADC_ConfigureBoostMode+0x1c8>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf14      	ite	ne
 8003288:	2301      	movne	r3, #1
 800328a:	2300      	moveq	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01c      	beq.n	80032cc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003292:	f005 f93d 	bl	8008510 <HAL_RCC_GetHCLKFreq>
 8003296:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032a0:	d010      	beq.n	80032c4 <ADC_ConfigureBoostMode+0x78>
 80032a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032a6:	d871      	bhi.n	800338c <ADC_ConfigureBoostMode+0x140>
 80032a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ac:	d002      	beq.n	80032b4 <ADC_ConfigureBoostMode+0x68>
 80032ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032b2:	d16b      	bne.n	800338c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	0c1b      	lsrs	r3, r3, #16
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c0:	60fb      	str	r3, [r7, #12]
        break;
 80032c2:	e066      	b.n	8003392 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	089b      	lsrs	r3, r3, #2
 80032c8:	60fb      	str	r3, [r7, #12]
        break;
 80032ca:	e062      	b.n	8003392 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80032cc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80032d0:	f006 f848 	bl	8009364 <HAL_RCCEx_GetPeriphCLKFreq>
 80032d4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80032de:	d051      	beq.n	8003384 <ADC_ConfigureBoostMode+0x138>
 80032e0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80032e4:	d854      	bhi.n	8003390 <ADC_ConfigureBoostMode+0x144>
 80032e6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80032ea:	d047      	beq.n	800337c <ADC_ConfigureBoostMode+0x130>
 80032ec:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80032f0:	d84e      	bhi.n	8003390 <ADC_ConfigureBoostMode+0x144>
 80032f2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80032f6:	d03d      	beq.n	8003374 <ADC_ConfigureBoostMode+0x128>
 80032f8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80032fc:	d848      	bhi.n	8003390 <ADC_ConfigureBoostMode+0x144>
 80032fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003302:	d033      	beq.n	800336c <ADC_ConfigureBoostMode+0x120>
 8003304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003308:	d842      	bhi.n	8003390 <ADC_ConfigureBoostMode+0x144>
 800330a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800330e:	d029      	beq.n	8003364 <ADC_ConfigureBoostMode+0x118>
 8003310:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003314:	d83c      	bhi.n	8003390 <ADC_ConfigureBoostMode+0x144>
 8003316:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800331a:	d01a      	beq.n	8003352 <ADC_ConfigureBoostMode+0x106>
 800331c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003320:	d836      	bhi.n	8003390 <ADC_ConfigureBoostMode+0x144>
 8003322:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003326:	d014      	beq.n	8003352 <ADC_ConfigureBoostMode+0x106>
 8003328:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800332c:	d830      	bhi.n	8003390 <ADC_ConfigureBoostMode+0x144>
 800332e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003332:	d00e      	beq.n	8003352 <ADC_ConfigureBoostMode+0x106>
 8003334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003338:	d82a      	bhi.n	8003390 <ADC_ConfigureBoostMode+0x144>
 800333a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800333e:	d008      	beq.n	8003352 <ADC_ConfigureBoostMode+0x106>
 8003340:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003344:	d824      	bhi.n	8003390 <ADC_ConfigureBoostMode+0x144>
 8003346:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800334a:	d002      	beq.n	8003352 <ADC_ConfigureBoostMode+0x106>
 800334c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003350:	d11e      	bne.n	8003390 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	0c9b      	lsrs	r3, r3, #18
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003360:	60fb      	str	r3, [r7, #12]
        break;
 8003362:	e016      	b.n	8003392 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	60fb      	str	r3, [r7, #12]
        break;
 800336a:	e012      	b.n	8003392 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	60fb      	str	r3, [r7, #12]
        break;
 8003372:	e00e      	b.n	8003392 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	099b      	lsrs	r3, r3, #6
 8003378:	60fb      	str	r3, [r7, #12]
        break;
 800337a:	e00a      	b.n	8003392 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	09db      	lsrs	r3, r3, #7
 8003380:	60fb      	str	r3, [r7, #12]
        break;
 8003382:	e006      	b.n	8003392 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	0a1b      	lsrs	r3, r3, #8
 8003388:	60fb      	str	r3, [r7, #12]
        break;
 800338a:	e002      	b.n	8003392 <ADC_ConfigureBoostMode+0x146>
        break;
 800338c:	bf00      	nop
 800338e:	e000      	b.n	8003392 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003390:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	085b      	lsrs	r3, r3, #1
 8003396:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4a1f      	ldr	r2, [pc, #124]	; (8003418 <ADC_ConfigureBoostMode+0x1cc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d808      	bhi.n	80033b2 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033ae:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80033b0:	e025      	b.n	80033fe <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4a19      	ldr	r2, [pc, #100]	; (800341c <ADC_ConfigureBoostMode+0x1d0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d80a      	bhi.n	80033d0 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033cc:	609a      	str	r2, [r3, #8]
}
 80033ce:	e016      	b.n	80033fe <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4a13      	ldr	r2, [pc, #76]	; (8003420 <ADC_ConfigureBoostMode+0x1d4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d80a      	bhi.n	80033ee <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ea:	609a      	str	r2, [r3, #8]
}
 80033ec:	e007      	b.n	80033fe <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80033fc:	609a      	str	r2, [r3, #8]
}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40022000 	.word	0x40022000
 800340c:	40022100 	.word	0x40022100
 8003410:	40022300 	.word	0x40022300
 8003414:	58026300 	.word	0x58026300
 8003418:	005f5e10 	.word	0x005f5e10
 800341c:	00bebc20 	.word	0x00bebc20
 8003420:	017d7840 	.word	0x017d7840

08003424 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <__NVIC_SetPriorityGrouping+0x40>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034a4:	4013      	ands	r3, r2
 80034a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034b0:	4b06      	ldr	r3, [pc, #24]	; (80034cc <__NVIC_SetPriorityGrouping+0x44>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b6:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <__NVIC_SetPriorityGrouping+0x40>)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	60d3      	str	r3, [r2, #12]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000ed00 	.word	0xe000ed00
 80034cc:	05fa0000 	.word	0x05fa0000

080034d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <__NVIC_GetPriorityGrouping+0x18>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	0a1b      	lsrs	r3, r3, #8
 80034da:	f003 0307 	and.w	r3, r3, #7
}
 80034de:	4618      	mov	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	db0b      	blt.n	8003516 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	f003 021f 	and.w	r2, r3, #31
 8003504:	4907      	ldr	r1, [pc, #28]	; (8003524 <__NVIC_EnableIRQ+0x38>)
 8003506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	2001      	movs	r0, #1
 800350e:	fa00 f202 	lsl.w	r2, r0, r2
 8003512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	e000e100 	.word	0xe000e100

08003528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	6039      	str	r1, [r7, #0]
 8003532:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003538:	2b00      	cmp	r3, #0
 800353a:	db0a      	blt.n	8003552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	b2da      	uxtb	r2, r3
 8003540:	490c      	ldr	r1, [pc, #48]	; (8003574 <__NVIC_SetPriority+0x4c>)
 8003542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003546:	0112      	lsls	r2, r2, #4
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	440b      	add	r3, r1
 800354c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003550:	e00a      	b.n	8003568 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	b2da      	uxtb	r2, r3
 8003556:	4908      	ldr	r1, [pc, #32]	; (8003578 <__NVIC_SetPriority+0x50>)
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	3b04      	subs	r3, #4
 8003560:	0112      	lsls	r2, r2, #4
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	440b      	add	r3, r1
 8003566:	761a      	strb	r2, [r3, #24]
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	e000e100 	.word	0xe000e100
 8003578:	e000ed00 	.word	0xe000ed00

0800357c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800357c:	b480      	push	{r7}
 800357e:	b089      	sub	sp, #36	; 0x24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f1c3 0307 	rsb	r3, r3, #7
 8003596:	2b04      	cmp	r3, #4
 8003598:	bf28      	it	cs
 800359a:	2304      	movcs	r3, #4
 800359c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	3304      	adds	r3, #4
 80035a2:	2b06      	cmp	r3, #6
 80035a4:	d902      	bls.n	80035ac <NVIC_EncodePriority+0x30>
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3b03      	subs	r3, #3
 80035aa:	e000      	b.n	80035ae <NVIC_EncodePriority+0x32>
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b0:	f04f 32ff 	mov.w	r2, #4294967295
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43da      	mvns	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	401a      	ands	r2, r3
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c4:	f04f 31ff 	mov.w	r1, #4294967295
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	43d9      	mvns	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d4:	4313      	orrs	r3, r2
         );
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3724      	adds	r7, #36	; 0x24
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035f4:	d301      	bcc.n	80035fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035f6:	2301      	movs	r3, #1
 80035f8:	e00f      	b.n	800361a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035fa:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <SysTick_Config+0x40>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3b01      	subs	r3, #1
 8003600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003602:	210f      	movs	r1, #15
 8003604:	f04f 30ff 	mov.w	r0, #4294967295
 8003608:	f7ff ff8e 	bl	8003528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <SysTick_Config+0x40>)
 800360e:	2200      	movs	r2, #0
 8003610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003612:	4b04      	ldr	r3, [pc, #16]	; (8003624 <SysTick_Config+0x40>)
 8003614:	2207      	movs	r2, #7
 8003616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	e000e010 	.word	0xe000e010

08003628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff ff29 	bl	8003488 <__NVIC_SetPriorityGrouping>
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b086      	sub	sp, #24
 8003642:	af00      	add	r7, sp, #0
 8003644:	4603      	mov	r3, r0
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
 800364a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800364c:	f7ff ff40 	bl	80034d0 <__NVIC_GetPriorityGrouping>
 8003650:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	6978      	ldr	r0, [r7, #20]
 8003658:	f7ff ff90 	bl	800357c <NVIC_EncodePriority>
 800365c:	4602      	mov	r2, r0
 800365e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff ff5f 	bl	8003528 <__NVIC_SetPriority>
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800367c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ff33 	bl	80034ec <__NVIC_EnableIRQ>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff ffa4 	bl	80035e4 <SysTick_Config>
 800369c:	4603      	mov	r3, r0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80036ac:	f3bf 8f5f 	dmb	sy
}
 80036b0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80036b2:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <HAL_MPU_Disable+0x28>)
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	4a06      	ldr	r2, [pc, #24]	; (80036d0 <HAL_MPU_Disable+0x28>)
 80036b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036bc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80036be:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_MPU_Disable+0x2c>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	605a      	str	r2, [r3, #4]
}
 80036c4:	bf00      	nop
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	e000ed00 	.word	0xe000ed00
 80036d4:	e000ed90 	.word	0xe000ed90

080036d8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80036e0:	4a0b      	ldr	r2, [pc, #44]	; (8003710 <HAL_MPU_Enable+0x38>)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80036ea:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <HAL_MPU_Enable+0x3c>)
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	4a09      	ldr	r2, [pc, #36]	; (8003714 <HAL_MPU_Enable+0x3c>)
 80036f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80036f6:	f3bf 8f4f 	dsb	sy
}
 80036fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80036fc:	f3bf 8f6f 	isb	sy
}
 8003700:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	e000ed90 	.word	0xe000ed90
 8003714:	e000ed00 	.word	0xe000ed00

08003718 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	785a      	ldrb	r2, [r3, #1]
 8003724:	4b1d      	ldr	r3, [pc, #116]	; (800379c <HAL_MPU_ConfigRegion+0x84>)
 8003726:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d029      	beq.n	8003784 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003730:	4a1a      	ldr	r2, [pc, #104]	; (800379c <HAL_MPU_ConfigRegion+0x84>)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	7b1b      	ldrb	r3, [r3, #12]
 800373c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	7adb      	ldrb	r3, [r3, #11]
 8003742:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003744:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	7a9b      	ldrb	r3, [r3, #10]
 800374a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800374c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	7b5b      	ldrb	r3, [r3, #13]
 8003752:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003754:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7b9b      	ldrb	r3, [r3, #14]
 800375a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800375c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	7bdb      	ldrb	r3, [r3, #15]
 8003762:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003764:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	7a5b      	ldrb	r3, [r3, #9]
 800376a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800376c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	7a1b      	ldrb	r3, [r3, #8]
 8003772:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003774:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	7812      	ldrb	r2, [r2, #0]
 800377a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800377c:	4a07      	ldr	r2, [pc, #28]	; (800379c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800377e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003780:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8003782:	e005      	b.n	8003790 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_MPU_ConfigRegion+0x84>)
 8003786:	2200      	movs	r2, #0
 8003788:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800378a:	4b04      	ldr	r3, [pc, #16]	; (800379c <HAL_MPU_ConfigRegion+0x84>)
 800378c:	2200      	movs	r2, #0
 800378e:	611a      	str	r2, [r3, #16]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000ed90 	.word	0xe000ed90

080037a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80037a8:	f7fd fd04 	bl	80011b4 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e314      	b.n	8003de2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a66      	ldr	r2, [pc, #408]	; (8003958 <HAL_DMA_Init+0x1b8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d04a      	beq.n	8003858 <HAL_DMA_Init+0xb8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a65      	ldr	r2, [pc, #404]	; (800395c <HAL_DMA_Init+0x1bc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d045      	beq.n	8003858 <HAL_DMA_Init+0xb8>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a63      	ldr	r2, [pc, #396]	; (8003960 <HAL_DMA_Init+0x1c0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d040      	beq.n	8003858 <HAL_DMA_Init+0xb8>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a62      	ldr	r2, [pc, #392]	; (8003964 <HAL_DMA_Init+0x1c4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d03b      	beq.n	8003858 <HAL_DMA_Init+0xb8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a60      	ldr	r2, [pc, #384]	; (8003968 <HAL_DMA_Init+0x1c8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d036      	beq.n	8003858 <HAL_DMA_Init+0xb8>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a5f      	ldr	r2, [pc, #380]	; (800396c <HAL_DMA_Init+0x1cc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d031      	beq.n	8003858 <HAL_DMA_Init+0xb8>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a5d      	ldr	r2, [pc, #372]	; (8003970 <HAL_DMA_Init+0x1d0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d02c      	beq.n	8003858 <HAL_DMA_Init+0xb8>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a5c      	ldr	r2, [pc, #368]	; (8003974 <HAL_DMA_Init+0x1d4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d027      	beq.n	8003858 <HAL_DMA_Init+0xb8>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a5a      	ldr	r2, [pc, #360]	; (8003978 <HAL_DMA_Init+0x1d8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d022      	beq.n	8003858 <HAL_DMA_Init+0xb8>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a59      	ldr	r2, [pc, #356]	; (800397c <HAL_DMA_Init+0x1dc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d01d      	beq.n	8003858 <HAL_DMA_Init+0xb8>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a57      	ldr	r2, [pc, #348]	; (8003980 <HAL_DMA_Init+0x1e0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d018      	beq.n	8003858 <HAL_DMA_Init+0xb8>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a56      	ldr	r2, [pc, #344]	; (8003984 <HAL_DMA_Init+0x1e4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d013      	beq.n	8003858 <HAL_DMA_Init+0xb8>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a54      	ldr	r2, [pc, #336]	; (8003988 <HAL_DMA_Init+0x1e8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00e      	beq.n	8003858 <HAL_DMA_Init+0xb8>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a53      	ldr	r2, [pc, #332]	; (800398c <HAL_DMA_Init+0x1ec>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d009      	beq.n	8003858 <HAL_DMA_Init+0xb8>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a51      	ldr	r2, [pc, #324]	; (8003990 <HAL_DMA_Init+0x1f0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d004      	beq.n	8003858 <HAL_DMA_Init+0xb8>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a50      	ldr	r2, [pc, #320]	; (8003994 <HAL_DMA_Init+0x1f4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d101      	bne.n	800385c <HAL_DMA_Init+0xbc>
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <HAL_DMA_Init+0xbe>
 800385c:	2300      	movs	r3, #0
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 813c 	beq.w	8003adc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a37      	ldr	r2, [pc, #220]	; (8003958 <HAL_DMA_Init+0x1b8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d04a      	beq.n	8003914 <HAL_DMA_Init+0x174>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a36      	ldr	r2, [pc, #216]	; (800395c <HAL_DMA_Init+0x1bc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d045      	beq.n	8003914 <HAL_DMA_Init+0x174>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a34      	ldr	r2, [pc, #208]	; (8003960 <HAL_DMA_Init+0x1c0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d040      	beq.n	8003914 <HAL_DMA_Init+0x174>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a33      	ldr	r2, [pc, #204]	; (8003964 <HAL_DMA_Init+0x1c4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d03b      	beq.n	8003914 <HAL_DMA_Init+0x174>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a31      	ldr	r2, [pc, #196]	; (8003968 <HAL_DMA_Init+0x1c8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d036      	beq.n	8003914 <HAL_DMA_Init+0x174>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a30      	ldr	r2, [pc, #192]	; (800396c <HAL_DMA_Init+0x1cc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d031      	beq.n	8003914 <HAL_DMA_Init+0x174>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a2e      	ldr	r2, [pc, #184]	; (8003970 <HAL_DMA_Init+0x1d0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d02c      	beq.n	8003914 <HAL_DMA_Init+0x174>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a2d      	ldr	r2, [pc, #180]	; (8003974 <HAL_DMA_Init+0x1d4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d027      	beq.n	8003914 <HAL_DMA_Init+0x174>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a2b      	ldr	r2, [pc, #172]	; (8003978 <HAL_DMA_Init+0x1d8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d022      	beq.n	8003914 <HAL_DMA_Init+0x174>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a2a      	ldr	r2, [pc, #168]	; (800397c <HAL_DMA_Init+0x1dc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d01d      	beq.n	8003914 <HAL_DMA_Init+0x174>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a28      	ldr	r2, [pc, #160]	; (8003980 <HAL_DMA_Init+0x1e0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d018      	beq.n	8003914 <HAL_DMA_Init+0x174>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a27      	ldr	r2, [pc, #156]	; (8003984 <HAL_DMA_Init+0x1e4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d013      	beq.n	8003914 <HAL_DMA_Init+0x174>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a25      	ldr	r2, [pc, #148]	; (8003988 <HAL_DMA_Init+0x1e8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d00e      	beq.n	8003914 <HAL_DMA_Init+0x174>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a24      	ldr	r2, [pc, #144]	; (800398c <HAL_DMA_Init+0x1ec>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d009      	beq.n	8003914 <HAL_DMA_Init+0x174>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a22      	ldr	r2, [pc, #136]	; (8003990 <HAL_DMA_Init+0x1f0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d004      	beq.n	8003914 <HAL_DMA_Init+0x174>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a21      	ldr	r2, [pc, #132]	; (8003994 <HAL_DMA_Init+0x1f4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d108      	bne.n	8003926 <HAL_DMA_Init+0x186>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0201 	bic.w	r2, r2, #1
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	e007      	b.n	8003936 <HAL_DMA_Init+0x196>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0201 	bic.w	r2, r2, #1
 8003934:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003936:	e02f      	b.n	8003998 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003938:	f7fd fc3c 	bl	80011b4 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b05      	cmp	r3, #5
 8003944:	d928      	bls.n	8003998 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2203      	movs	r2, #3
 8003950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e244      	b.n	8003de2 <HAL_DMA_Init+0x642>
 8003958:	40020010 	.word	0x40020010
 800395c:	40020028 	.word	0x40020028
 8003960:	40020040 	.word	0x40020040
 8003964:	40020058 	.word	0x40020058
 8003968:	40020070 	.word	0x40020070
 800396c:	40020088 	.word	0x40020088
 8003970:	400200a0 	.word	0x400200a0
 8003974:	400200b8 	.word	0x400200b8
 8003978:	40020410 	.word	0x40020410
 800397c:	40020428 	.word	0x40020428
 8003980:	40020440 	.word	0x40020440
 8003984:	40020458 	.word	0x40020458
 8003988:	40020470 	.word	0x40020470
 800398c:	40020488 	.word	0x40020488
 8003990:	400204a0 	.word	0x400204a0
 8003994:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1c8      	bne.n	8003938 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4b84      	ldr	r3, [pc, #528]	; (8003bc4 <HAL_DMA_Init+0x424>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80039be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d107      	bne.n	80039fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f4:	4313      	orrs	r3, r2
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b28      	cmp	r3, #40	; 0x28
 8003a02:	d903      	bls.n	8003a0c <HAL_DMA_Init+0x26c>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b2e      	cmp	r3, #46	; 0x2e
 8003a0a:	d91f      	bls.n	8003a4c <HAL_DMA_Init+0x2ac>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b3e      	cmp	r3, #62	; 0x3e
 8003a12:	d903      	bls.n	8003a1c <HAL_DMA_Init+0x27c>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b42      	cmp	r3, #66	; 0x42
 8003a1a:	d917      	bls.n	8003a4c <HAL_DMA_Init+0x2ac>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b46      	cmp	r3, #70	; 0x46
 8003a22:	d903      	bls.n	8003a2c <HAL_DMA_Init+0x28c>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b48      	cmp	r3, #72	; 0x48
 8003a2a:	d90f      	bls.n	8003a4c <HAL_DMA_Init+0x2ac>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b4e      	cmp	r3, #78	; 0x4e
 8003a32:	d903      	bls.n	8003a3c <HAL_DMA_Init+0x29c>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b52      	cmp	r3, #82	; 0x52
 8003a3a:	d907      	bls.n	8003a4c <HAL_DMA_Init+0x2ac>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b73      	cmp	r3, #115	; 0x73
 8003a42:	d905      	bls.n	8003a50 <HAL_DMA_Init+0x2b0>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b77      	cmp	r3, #119	; 0x77
 8003a4a:	d801      	bhi.n	8003a50 <HAL_DMA_Init+0x2b0>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <HAL_DMA_Init+0x2b2>
 8003a50:	2300      	movs	r3, #0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a5c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f023 0307 	bic.w	r3, r3, #7
 8003a74:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d117      	bne.n	8003ab8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00e      	beq.n	8003ab8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f002 f8ea 	bl	8005c74 <DMA_CheckFifoParam>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2240      	movs	r2, #64	; 0x40
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e194      	b.n	8003de2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f002 f825 	bl	8005b10 <DMA_CalcBaseAndBitshift>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ace:	f003 031f 	and.w	r3, r3, #31
 8003ad2:	223f      	movs	r2, #63	; 0x3f
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	609a      	str	r2, [r3, #8]
 8003ada:	e0ca      	b.n	8003c72 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a39      	ldr	r2, [pc, #228]	; (8003bc8 <HAL_DMA_Init+0x428>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d022      	beq.n	8003b2c <HAL_DMA_Init+0x38c>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a38      	ldr	r2, [pc, #224]	; (8003bcc <HAL_DMA_Init+0x42c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d01d      	beq.n	8003b2c <HAL_DMA_Init+0x38c>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a36      	ldr	r2, [pc, #216]	; (8003bd0 <HAL_DMA_Init+0x430>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d018      	beq.n	8003b2c <HAL_DMA_Init+0x38c>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a35      	ldr	r2, [pc, #212]	; (8003bd4 <HAL_DMA_Init+0x434>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d013      	beq.n	8003b2c <HAL_DMA_Init+0x38c>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a33      	ldr	r2, [pc, #204]	; (8003bd8 <HAL_DMA_Init+0x438>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00e      	beq.n	8003b2c <HAL_DMA_Init+0x38c>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a32      	ldr	r2, [pc, #200]	; (8003bdc <HAL_DMA_Init+0x43c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d009      	beq.n	8003b2c <HAL_DMA_Init+0x38c>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a30      	ldr	r2, [pc, #192]	; (8003be0 <HAL_DMA_Init+0x440>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d004      	beq.n	8003b2c <HAL_DMA_Init+0x38c>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a2f      	ldr	r2, [pc, #188]	; (8003be4 <HAL_DMA_Init+0x444>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d101      	bne.n	8003b30 <HAL_DMA_Init+0x390>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <HAL_DMA_Init+0x392>
 8003b30:	2300      	movs	r3, #0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8094 	beq.w	8003c60 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a22      	ldr	r2, [pc, #136]	; (8003bc8 <HAL_DMA_Init+0x428>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d021      	beq.n	8003b86 <HAL_DMA_Init+0x3e6>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a21      	ldr	r2, [pc, #132]	; (8003bcc <HAL_DMA_Init+0x42c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d01c      	beq.n	8003b86 <HAL_DMA_Init+0x3e6>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a1f      	ldr	r2, [pc, #124]	; (8003bd0 <HAL_DMA_Init+0x430>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d017      	beq.n	8003b86 <HAL_DMA_Init+0x3e6>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a1e      	ldr	r2, [pc, #120]	; (8003bd4 <HAL_DMA_Init+0x434>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d012      	beq.n	8003b86 <HAL_DMA_Init+0x3e6>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1c      	ldr	r2, [pc, #112]	; (8003bd8 <HAL_DMA_Init+0x438>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00d      	beq.n	8003b86 <HAL_DMA_Init+0x3e6>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1b      	ldr	r2, [pc, #108]	; (8003bdc <HAL_DMA_Init+0x43c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d008      	beq.n	8003b86 <HAL_DMA_Init+0x3e6>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a19      	ldr	r2, [pc, #100]	; (8003be0 <HAL_DMA_Init+0x440>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d003      	beq.n	8003b86 <HAL_DMA_Init+0x3e6>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a18      	ldr	r2, [pc, #96]	; (8003be4 <HAL_DMA_Init+0x444>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <HAL_DMA_Init+0x448>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2b40      	cmp	r3, #64	; 0x40
 8003bae:	d01d      	beq.n	8003bec <HAL_DMA_Init+0x44c>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b80      	cmp	r3, #128	; 0x80
 8003bb6:	d102      	bne.n	8003bbe <HAL_DMA_Init+0x41e>
 8003bb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bbc:	e017      	b.n	8003bee <HAL_DMA_Init+0x44e>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e015      	b.n	8003bee <HAL_DMA_Init+0x44e>
 8003bc2:	bf00      	nop
 8003bc4:	fe10803f 	.word	0xfe10803f
 8003bc8:	58025408 	.word	0x58025408
 8003bcc:	5802541c 	.word	0x5802541c
 8003bd0:	58025430 	.word	0x58025430
 8003bd4:	58025444 	.word	0x58025444
 8003bd8:	58025458 	.word	0x58025458
 8003bdc:	5802546c 	.word	0x5802546c
 8003be0:	58025480 	.word	0x58025480
 8003be4:	58025494 	.word	0x58025494
 8003be8:	fffe000f 	.word	0xfffe000f
 8003bec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	68d2      	ldr	r2, [r2, #12]
 8003bf2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bf4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003bfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c1c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	4b6e      	ldr	r3, [pc, #440]	; (8003dec <HAL_DMA_Init+0x64c>)
 8003c34:	4413      	add	r3, r2
 8003c36:	4a6e      	ldr	r2, [pc, #440]	; (8003df0 <HAL_DMA_Init+0x650>)
 8003c38:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3c:	091b      	lsrs	r3, r3, #4
 8003c3e:	009a      	lsls	r2, r3, #2
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f001 ff63 	bl	8005b10 <DMA_CalcBaseAndBitshift>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	2201      	movs	r2, #1
 8003c58:	409a      	lsls	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	605a      	str	r2, [r3, #4]
 8003c5e:	e008      	b.n	8003c72 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2240      	movs	r2, #64	; 0x40
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2203      	movs	r2, #3
 8003c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e0b7      	b.n	8003de2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a5f      	ldr	r2, [pc, #380]	; (8003df4 <HAL_DMA_Init+0x654>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d072      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a5d      	ldr	r2, [pc, #372]	; (8003df8 <HAL_DMA_Init+0x658>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d06d      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a5c      	ldr	r2, [pc, #368]	; (8003dfc <HAL_DMA_Init+0x65c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d068      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a5a      	ldr	r2, [pc, #360]	; (8003e00 <HAL_DMA_Init+0x660>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d063      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a59      	ldr	r2, [pc, #356]	; (8003e04 <HAL_DMA_Init+0x664>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d05e      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a57      	ldr	r2, [pc, #348]	; (8003e08 <HAL_DMA_Init+0x668>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d059      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a56      	ldr	r2, [pc, #344]	; (8003e0c <HAL_DMA_Init+0x66c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d054      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a54      	ldr	r2, [pc, #336]	; (8003e10 <HAL_DMA_Init+0x670>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d04f      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a53      	ldr	r2, [pc, #332]	; (8003e14 <HAL_DMA_Init+0x674>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d04a      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a51      	ldr	r2, [pc, #324]	; (8003e18 <HAL_DMA_Init+0x678>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d045      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a50      	ldr	r2, [pc, #320]	; (8003e1c <HAL_DMA_Init+0x67c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d040      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a4e      	ldr	r2, [pc, #312]	; (8003e20 <HAL_DMA_Init+0x680>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d03b      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a4d      	ldr	r2, [pc, #308]	; (8003e24 <HAL_DMA_Init+0x684>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d036      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a4b      	ldr	r2, [pc, #300]	; (8003e28 <HAL_DMA_Init+0x688>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d031      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a4a      	ldr	r2, [pc, #296]	; (8003e2c <HAL_DMA_Init+0x68c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d02c      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a48      	ldr	r2, [pc, #288]	; (8003e30 <HAL_DMA_Init+0x690>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d027      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a47      	ldr	r2, [pc, #284]	; (8003e34 <HAL_DMA_Init+0x694>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d022      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a45      	ldr	r2, [pc, #276]	; (8003e38 <HAL_DMA_Init+0x698>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01d      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a44      	ldr	r2, [pc, #272]	; (8003e3c <HAL_DMA_Init+0x69c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d018      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a42      	ldr	r2, [pc, #264]	; (8003e40 <HAL_DMA_Init+0x6a0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d013      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a41      	ldr	r2, [pc, #260]	; (8003e44 <HAL_DMA_Init+0x6a4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00e      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a3f      	ldr	r2, [pc, #252]	; (8003e48 <HAL_DMA_Init+0x6a8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d009      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a3e      	ldr	r2, [pc, #248]	; (8003e4c <HAL_DMA_Init+0x6ac>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d004      	beq.n	8003d62 <HAL_DMA_Init+0x5c2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a3c      	ldr	r2, [pc, #240]	; (8003e50 <HAL_DMA_Init+0x6b0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d101      	bne.n	8003d66 <HAL_DMA_Init+0x5c6>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <HAL_DMA_Init+0x5c8>
 8003d66:	2300      	movs	r3, #0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d032      	beq.n	8003dd2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f001 fffd 	bl	8005d6c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b80      	cmp	r3, #128	; 0x80
 8003d78:	d102      	bne.n	8003d80 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d94:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d010      	beq.n	8003dc0 <HAL_DMA_Init+0x620>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d80c      	bhi.n	8003dc0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f002 f87a 	bl	8005ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	e008      	b.n	8003dd2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	a7fdabf8 	.word	0xa7fdabf8
 8003df0:	cccccccd 	.word	0xcccccccd
 8003df4:	40020010 	.word	0x40020010
 8003df8:	40020028 	.word	0x40020028
 8003dfc:	40020040 	.word	0x40020040
 8003e00:	40020058 	.word	0x40020058
 8003e04:	40020070 	.word	0x40020070
 8003e08:	40020088 	.word	0x40020088
 8003e0c:	400200a0 	.word	0x400200a0
 8003e10:	400200b8 	.word	0x400200b8
 8003e14:	40020410 	.word	0x40020410
 8003e18:	40020428 	.word	0x40020428
 8003e1c:	40020440 	.word	0x40020440
 8003e20:	40020458 	.word	0x40020458
 8003e24:	40020470 	.word	0x40020470
 8003e28:	40020488 	.word	0x40020488
 8003e2c:	400204a0 	.word	0x400204a0
 8003e30:	400204b8 	.word	0x400204b8
 8003e34:	58025408 	.word	0x58025408
 8003e38:	5802541c 	.word	0x5802541c
 8003e3c:	58025430 	.word	0x58025430
 8003e40:	58025444 	.word	0x58025444
 8003e44:	58025458 	.word	0x58025458
 8003e48:	5802546c 	.word	0x5802546c
 8003e4c:	58025480 	.word	0x58025480
 8003e50:	58025494 	.word	0x58025494

08003e54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e226      	b.n	80042be <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_DMA_Start_IT+0x2a>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e21f      	b.n	80042be <HAL_DMA_Start_IT+0x46a>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	f040 820a 	bne.w	80042a8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a68      	ldr	r2, [pc, #416]	; (8004048 <HAL_DMA_Start_IT+0x1f4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d04a      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a66      	ldr	r2, [pc, #408]	; (800404c <HAL_DMA_Start_IT+0x1f8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d045      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a65      	ldr	r2, [pc, #404]	; (8004050 <HAL_DMA_Start_IT+0x1fc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d040      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a63      	ldr	r2, [pc, #396]	; (8004054 <HAL_DMA_Start_IT+0x200>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d03b      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a62      	ldr	r2, [pc, #392]	; (8004058 <HAL_DMA_Start_IT+0x204>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d036      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a60      	ldr	r2, [pc, #384]	; (800405c <HAL_DMA_Start_IT+0x208>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d031      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a5f      	ldr	r2, [pc, #380]	; (8004060 <HAL_DMA_Start_IT+0x20c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d02c      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a5d      	ldr	r2, [pc, #372]	; (8004064 <HAL_DMA_Start_IT+0x210>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d027      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a5c      	ldr	r2, [pc, #368]	; (8004068 <HAL_DMA_Start_IT+0x214>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d022      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a5a      	ldr	r2, [pc, #360]	; (800406c <HAL_DMA_Start_IT+0x218>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d01d      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a59      	ldr	r2, [pc, #356]	; (8004070 <HAL_DMA_Start_IT+0x21c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d018      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a57      	ldr	r2, [pc, #348]	; (8004074 <HAL_DMA_Start_IT+0x220>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a56      	ldr	r2, [pc, #344]	; (8004078 <HAL_DMA_Start_IT+0x224>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00e      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a54      	ldr	r2, [pc, #336]	; (800407c <HAL_DMA_Start_IT+0x228>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d009      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a53      	ldr	r2, [pc, #332]	; (8004080 <HAL_DMA_Start_IT+0x22c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <HAL_DMA_Start_IT+0xee>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a51      	ldr	r2, [pc, #324]	; (8004084 <HAL_DMA_Start_IT+0x230>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d108      	bne.n	8003f54 <HAL_DMA_Start_IT+0x100>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0201 	bic.w	r2, r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	e007      	b.n	8003f64 <HAL_DMA_Start_IT+0x110>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f001 fc24 	bl	80057b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a34      	ldr	r2, [pc, #208]	; (8004048 <HAL_DMA_Start_IT+0x1f4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d04a      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a33      	ldr	r2, [pc, #204]	; (800404c <HAL_DMA_Start_IT+0x1f8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d045      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a31      	ldr	r2, [pc, #196]	; (8004050 <HAL_DMA_Start_IT+0x1fc>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d040      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a30      	ldr	r2, [pc, #192]	; (8004054 <HAL_DMA_Start_IT+0x200>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d03b      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a2e      	ldr	r2, [pc, #184]	; (8004058 <HAL_DMA_Start_IT+0x204>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d036      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a2d      	ldr	r2, [pc, #180]	; (800405c <HAL_DMA_Start_IT+0x208>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d031      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a2b      	ldr	r2, [pc, #172]	; (8004060 <HAL_DMA_Start_IT+0x20c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d02c      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a2a      	ldr	r2, [pc, #168]	; (8004064 <HAL_DMA_Start_IT+0x210>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d027      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a28      	ldr	r2, [pc, #160]	; (8004068 <HAL_DMA_Start_IT+0x214>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d022      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a27      	ldr	r2, [pc, #156]	; (800406c <HAL_DMA_Start_IT+0x218>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d01d      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a25      	ldr	r2, [pc, #148]	; (8004070 <HAL_DMA_Start_IT+0x21c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d018      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a24      	ldr	r2, [pc, #144]	; (8004074 <HAL_DMA_Start_IT+0x220>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a22      	ldr	r2, [pc, #136]	; (8004078 <HAL_DMA_Start_IT+0x224>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00e      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a21      	ldr	r2, [pc, #132]	; (800407c <HAL_DMA_Start_IT+0x228>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d009      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1f      	ldr	r2, [pc, #124]	; (8004080 <HAL_DMA_Start_IT+0x22c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <HAL_DMA_Start_IT+0x1bc>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1e      	ldr	r2, [pc, #120]	; (8004084 <HAL_DMA_Start_IT+0x230>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d101      	bne.n	8004014 <HAL_DMA_Start_IT+0x1c0>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <HAL_DMA_Start_IT+0x1c2>
 8004014:	2300      	movs	r3, #0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d036      	beq.n	8004088 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f023 021e 	bic.w	r2, r3, #30
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0216 	orr.w	r2, r2, #22
 800402c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d03e      	beq.n	80040b4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0208 	orr.w	r2, r2, #8
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e035      	b.n	80040b4 <HAL_DMA_Start_IT+0x260>
 8004048:	40020010 	.word	0x40020010
 800404c:	40020028 	.word	0x40020028
 8004050:	40020040 	.word	0x40020040
 8004054:	40020058 	.word	0x40020058
 8004058:	40020070 	.word	0x40020070
 800405c:	40020088 	.word	0x40020088
 8004060:	400200a0 	.word	0x400200a0
 8004064:	400200b8 	.word	0x400200b8
 8004068:	40020410 	.word	0x40020410
 800406c:	40020428 	.word	0x40020428
 8004070:	40020440 	.word	0x40020440
 8004074:	40020458 	.word	0x40020458
 8004078:	40020470 	.word	0x40020470
 800407c:	40020488 	.word	0x40020488
 8004080:	400204a0 	.word	0x400204a0
 8004084:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 020e 	bic.w	r2, r3, #14
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 020a 	orr.w	r2, r2, #10
 800409a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d007      	beq.n	80040b4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0204 	orr.w	r2, r2, #4
 80040b2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a83      	ldr	r2, [pc, #524]	; (80042c8 <HAL_DMA_Start_IT+0x474>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d072      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a82      	ldr	r2, [pc, #520]	; (80042cc <HAL_DMA_Start_IT+0x478>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d06d      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a80      	ldr	r2, [pc, #512]	; (80042d0 <HAL_DMA_Start_IT+0x47c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d068      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a7f      	ldr	r2, [pc, #508]	; (80042d4 <HAL_DMA_Start_IT+0x480>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d063      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a7d      	ldr	r2, [pc, #500]	; (80042d8 <HAL_DMA_Start_IT+0x484>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d05e      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a7c      	ldr	r2, [pc, #496]	; (80042dc <HAL_DMA_Start_IT+0x488>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d059      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a7a      	ldr	r2, [pc, #488]	; (80042e0 <HAL_DMA_Start_IT+0x48c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d054      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a79      	ldr	r2, [pc, #484]	; (80042e4 <HAL_DMA_Start_IT+0x490>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d04f      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a77      	ldr	r2, [pc, #476]	; (80042e8 <HAL_DMA_Start_IT+0x494>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d04a      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a76      	ldr	r2, [pc, #472]	; (80042ec <HAL_DMA_Start_IT+0x498>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d045      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a74      	ldr	r2, [pc, #464]	; (80042f0 <HAL_DMA_Start_IT+0x49c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d040      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a73      	ldr	r2, [pc, #460]	; (80042f4 <HAL_DMA_Start_IT+0x4a0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d03b      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a71      	ldr	r2, [pc, #452]	; (80042f8 <HAL_DMA_Start_IT+0x4a4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d036      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a70      	ldr	r2, [pc, #448]	; (80042fc <HAL_DMA_Start_IT+0x4a8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d031      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a6e      	ldr	r2, [pc, #440]	; (8004300 <HAL_DMA_Start_IT+0x4ac>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d02c      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a6d      	ldr	r2, [pc, #436]	; (8004304 <HAL_DMA_Start_IT+0x4b0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d027      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a6b      	ldr	r2, [pc, #428]	; (8004308 <HAL_DMA_Start_IT+0x4b4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d022      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a6a      	ldr	r2, [pc, #424]	; (800430c <HAL_DMA_Start_IT+0x4b8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d01d      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a68      	ldr	r2, [pc, #416]	; (8004310 <HAL_DMA_Start_IT+0x4bc>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d018      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a67      	ldr	r2, [pc, #412]	; (8004314 <HAL_DMA_Start_IT+0x4c0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d013      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a65      	ldr	r2, [pc, #404]	; (8004318 <HAL_DMA_Start_IT+0x4c4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00e      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a64      	ldr	r2, [pc, #400]	; (800431c <HAL_DMA_Start_IT+0x4c8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d009      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a62      	ldr	r2, [pc, #392]	; (8004320 <HAL_DMA_Start_IT+0x4cc>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d004      	beq.n	80041a4 <HAL_DMA_Start_IT+0x350>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a61      	ldr	r2, [pc, #388]	; (8004324 <HAL_DMA_Start_IT+0x4d0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d101      	bne.n	80041a8 <HAL_DMA_Start_IT+0x354>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <HAL_DMA_Start_IT+0x356>
 80041a8:	2300      	movs	r3, #0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01a      	beq.n	80041e4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d007      	beq.n	80041cc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a37      	ldr	r2, [pc, #220]	; (80042c8 <HAL_DMA_Start_IT+0x474>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d04a      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a36      	ldr	r2, [pc, #216]	; (80042cc <HAL_DMA_Start_IT+0x478>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d045      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a34      	ldr	r2, [pc, #208]	; (80042d0 <HAL_DMA_Start_IT+0x47c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d040      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a33      	ldr	r2, [pc, #204]	; (80042d4 <HAL_DMA_Start_IT+0x480>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d03b      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a31      	ldr	r2, [pc, #196]	; (80042d8 <HAL_DMA_Start_IT+0x484>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d036      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a30      	ldr	r2, [pc, #192]	; (80042dc <HAL_DMA_Start_IT+0x488>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d031      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2e      	ldr	r2, [pc, #184]	; (80042e0 <HAL_DMA_Start_IT+0x48c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d02c      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2d      	ldr	r2, [pc, #180]	; (80042e4 <HAL_DMA_Start_IT+0x490>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d027      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2b      	ldr	r2, [pc, #172]	; (80042e8 <HAL_DMA_Start_IT+0x494>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d022      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a2a      	ldr	r2, [pc, #168]	; (80042ec <HAL_DMA_Start_IT+0x498>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d01d      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a28      	ldr	r2, [pc, #160]	; (80042f0 <HAL_DMA_Start_IT+0x49c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d018      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a27      	ldr	r2, [pc, #156]	; (80042f4 <HAL_DMA_Start_IT+0x4a0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d013      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a25      	ldr	r2, [pc, #148]	; (80042f8 <HAL_DMA_Start_IT+0x4a4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00e      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a24      	ldr	r2, [pc, #144]	; (80042fc <HAL_DMA_Start_IT+0x4a8>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a22      	ldr	r2, [pc, #136]	; (8004300 <HAL_DMA_Start_IT+0x4ac>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d004      	beq.n	8004284 <HAL_DMA_Start_IT+0x430>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a21      	ldr	r2, [pc, #132]	; (8004304 <HAL_DMA_Start_IT+0x4b0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d108      	bne.n	8004296 <HAL_DMA_Start_IT+0x442>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	e012      	b.n	80042bc <HAL_DMA_Start_IT+0x468>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0201 	orr.w	r2, r2, #1
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	e009      	b.n	80042bc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40020010 	.word	0x40020010
 80042cc:	40020028 	.word	0x40020028
 80042d0:	40020040 	.word	0x40020040
 80042d4:	40020058 	.word	0x40020058
 80042d8:	40020070 	.word	0x40020070
 80042dc:	40020088 	.word	0x40020088
 80042e0:	400200a0 	.word	0x400200a0
 80042e4:	400200b8 	.word	0x400200b8
 80042e8:	40020410 	.word	0x40020410
 80042ec:	40020428 	.word	0x40020428
 80042f0:	40020440 	.word	0x40020440
 80042f4:	40020458 	.word	0x40020458
 80042f8:	40020470 	.word	0x40020470
 80042fc:	40020488 	.word	0x40020488
 8004300:	400204a0 	.word	0x400204a0
 8004304:	400204b8 	.word	0x400204b8
 8004308:	58025408 	.word	0x58025408
 800430c:	5802541c 	.word	0x5802541c
 8004310:	58025430 	.word	0x58025430
 8004314:	58025444 	.word	0x58025444
 8004318:	58025458 	.word	0x58025458
 800431c:	5802546c 	.word	0x5802546c
 8004320:	58025480 	.word	0x58025480
 8004324:	58025494 	.word	0x58025494

08004328 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004330:	f7fc ff40 	bl	80011b4 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e2dc      	b.n	80048fa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d008      	beq.n	800435e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2280      	movs	r2, #128	; 0x80
 8004350:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e2cd      	b.n	80048fa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a76      	ldr	r2, [pc, #472]	; (800453c <HAL_DMA_Abort+0x214>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d04a      	beq.n	80043fe <HAL_DMA_Abort+0xd6>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a74      	ldr	r2, [pc, #464]	; (8004540 <HAL_DMA_Abort+0x218>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d045      	beq.n	80043fe <HAL_DMA_Abort+0xd6>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a73      	ldr	r2, [pc, #460]	; (8004544 <HAL_DMA_Abort+0x21c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d040      	beq.n	80043fe <HAL_DMA_Abort+0xd6>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a71      	ldr	r2, [pc, #452]	; (8004548 <HAL_DMA_Abort+0x220>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d03b      	beq.n	80043fe <HAL_DMA_Abort+0xd6>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a70      	ldr	r2, [pc, #448]	; (800454c <HAL_DMA_Abort+0x224>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d036      	beq.n	80043fe <HAL_DMA_Abort+0xd6>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a6e      	ldr	r2, [pc, #440]	; (8004550 <HAL_DMA_Abort+0x228>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d031      	beq.n	80043fe <HAL_DMA_Abort+0xd6>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a6d      	ldr	r2, [pc, #436]	; (8004554 <HAL_DMA_Abort+0x22c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d02c      	beq.n	80043fe <HAL_DMA_Abort+0xd6>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a6b      	ldr	r2, [pc, #428]	; (8004558 <HAL_DMA_Abort+0x230>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d027      	beq.n	80043fe <HAL_DMA_Abort+0xd6>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a6a      	ldr	r2, [pc, #424]	; (800455c <HAL_DMA_Abort+0x234>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d022      	beq.n	80043fe <HAL_DMA_Abort+0xd6>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a68      	ldr	r2, [pc, #416]	; (8004560 <HAL_DMA_Abort+0x238>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d01d      	beq.n	80043fe <HAL_DMA_Abort+0xd6>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a67      	ldr	r2, [pc, #412]	; (8004564 <HAL_DMA_Abort+0x23c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d018      	beq.n	80043fe <HAL_DMA_Abort+0xd6>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a65      	ldr	r2, [pc, #404]	; (8004568 <HAL_DMA_Abort+0x240>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d013      	beq.n	80043fe <HAL_DMA_Abort+0xd6>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a64      	ldr	r2, [pc, #400]	; (800456c <HAL_DMA_Abort+0x244>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d00e      	beq.n	80043fe <HAL_DMA_Abort+0xd6>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a62      	ldr	r2, [pc, #392]	; (8004570 <HAL_DMA_Abort+0x248>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d009      	beq.n	80043fe <HAL_DMA_Abort+0xd6>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a61      	ldr	r2, [pc, #388]	; (8004574 <HAL_DMA_Abort+0x24c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d004      	beq.n	80043fe <HAL_DMA_Abort+0xd6>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a5f      	ldr	r2, [pc, #380]	; (8004578 <HAL_DMA_Abort+0x250>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d101      	bne.n	8004402 <HAL_DMA_Abort+0xda>
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <HAL_DMA_Abort+0xdc>
 8004402:	2300      	movs	r3, #0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d013      	beq.n	8004430 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 021e 	bic.w	r2, r2, #30
 8004416:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004426:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	e00a      	b.n	8004446 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 020e 	bic.w	r2, r2, #14
 800443e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a3c      	ldr	r2, [pc, #240]	; (800453c <HAL_DMA_Abort+0x214>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d072      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a3a      	ldr	r2, [pc, #232]	; (8004540 <HAL_DMA_Abort+0x218>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d06d      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a39      	ldr	r2, [pc, #228]	; (8004544 <HAL_DMA_Abort+0x21c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d068      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a37      	ldr	r2, [pc, #220]	; (8004548 <HAL_DMA_Abort+0x220>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d063      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a36      	ldr	r2, [pc, #216]	; (800454c <HAL_DMA_Abort+0x224>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d05e      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a34      	ldr	r2, [pc, #208]	; (8004550 <HAL_DMA_Abort+0x228>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d059      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a33      	ldr	r2, [pc, #204]	; (8004554 <HAL_DMA_Abort+0x22c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d054      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a31      	ldr	r2, [pc, #196]	; (8004558 <HAL_DMA_Abort+0x230>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d04f      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a30      	ldr	r2, [pc, #192]	; (800455c <HAL_DMA_Abort+0x234>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d04a      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a2e      	ldr	r2, [pc, #184]	; (8004560 <HAL_DMA_Abort+0x238>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d045      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a2d      	ldr	r2, [pc, #180]	; (8004564 <HAL_DMA_Abort+0x23c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d040      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a2b      	ldr	r2, [pc, #172]	; (8004568 <HAL_DMA_Abort+0x240>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d03b      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a2a      	ldr	r2, [pc, #168]	; (800456c <HAL_DMA_Abort+0x244>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d036      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a28      	ldr	r2, [pc, #160]	; (8004570 <HAL_DMA_Abort+0x248>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d031      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a27      	ldr	r2, [pc, #156]	; (8004574 <HAL_DMA_Abort+0x24c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d02c      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a25      	ldr	r2, [pc, #148]	; (8004578 <HAL_DMA_Abort+0x250>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d027      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a24      	ldr	r2, [pc, #144]	; (800457c <HAL_DMA_Abort+0x254>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d022      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a22      	ldr	r2, [pc, #136]	; (8004580 <HAL_DMA_Abort+0x258>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d01d      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a21      	ldr	r2, [pc, #132]	; (8004584 <HAL_DMA_Abort+0x25c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d018      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1f      	ldr	r2, [pc, #124]	; (8004588 <HAL_DMA_Abort+0x260>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d013      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a1e      	ldr	r2, [pc, #120]	; (800458c <HAL_DMA_Abort+0x264>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d00e      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a1c      	ldr	r2, [pc, #112]	; (8004590 <HAL_DMA_Abort+0x268>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d009      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a1b      	ldr	r2, [pc, #108]	; (8004594 <HAL_DMA_Abort+0x26c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d004      	beq.n	8004536 <HAL_DMA_Abort+0x20e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a19      	ldr	r2, [pc, #100]	; (8004598 <HAL_DMA_Abort+0x270>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d132      	bne.n	800459c <HAL_DMA_Abort+0x274>
 8004536:	2301      	movs	r3, #1
 8004538:	e031      	b.n	800459e <HAL_DMA_Abort+0x276>
 800453a:	bf00      	nop
 800453c:	40020010 	.word	0x40020010
 8004540:	40020028 	.word	0x40020028
 8004544:	40020040 	.word	0x40020040
 8004548:	40020058 	.word	0x40020058
 800454c:	40020070 	.word	0x40020070
 8004550:	40020088 	.word	0x40020088
 8004554:	400200a0 	.word	0x400200a0
 8004558:	400200b8 	.word	0x400200b8
 800455c:	40020410 	.word	0x40020410
 8004560:	40020428 	.word	0x40020428
 8004564:	40020440 	.word	0x40020440
 8004568:	40020458 	.word	0x40020458
 800456c:	40020470 	.word	0x40020470
 8004570:	40020488 	.word	0x40020488
 8004574:	400204a0 	.word	0x400204a0
 8004578:	400204b8 	.word	0x400204b8
 800457c:	58025408 	.word	0x58025408
 8004580:	5802541c 	.word	0x5802541c
 8004584:	58025430 	.word	0x58025430
 8004588:	58025444 	.word	0x58025444
 800458c:	58025458 	.word	0x58025458
 8004590:	5802546c 	.word	0x5802546c
 8004594:	58025480 	.word	0x58025480
 8004598:	58025494 	.word	0x58025494
 800459c:	2300      	movs	r3, #0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a6d      	ldr	r2, [pc, #436]	; (800476c <HAL_DMA_Abort+0x444>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d04a      	beq.n	8004652 <HAL_DMA_Abort+0x32a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a6b      	ldr	r2, [pc, #428]	; (8004770 <HAL_DMA_Abort+0x448>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d045      	beq.n	8004652 <HAL_DMA_Abort+0x32a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a6a      	ldr	r2, [pc, #424]	; (8004774 <HAL_DMA_Abort+0x44c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d040      	beq.n	8004652 <HAL_DMA_Abort+0x32a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a68      	ldr	r2, [pc, #416]	; (8004778 <HAL_DMA_Abort+0x450>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d03b      	beq.n	8004652 <HAL_DMA_Abort+0x32a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a67      	ldr	r2, [pc, #412]	; (800477c <HAL_DMA_Abort+0x454>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d036      	beq.n	8004652 <HAL_DMA_Abort+0x32a>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a65      	ldr	r2, [pc, #404]	; (8004780 <HAL_DMA_Abort+0x458>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d031      	beq.n	8004652 <HAL_DMA_Abort+0x32a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a64      	ldr	r2, [pc, #400]	; (8004784 <HAL_DMA_Abort+0x45c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d02c      	beq.n	8004652 <HAL_DMA_Abort+0x32a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a62      	ldr	r2, [pc, #392]	; (8004788 <HAL_DMA_Abort+0x460>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d027      	beq.n	8004652 <HAL_DMA_Abort+0x32a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a61      	ldr	r2, [pc, #388]	; (800478c <HAL_DMA_Abort+0x464>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d022      	beq.n	8004652 <HAL_DMA_Abort+0x32a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a5f      	ldr	r2, [pc, #380]	; (8004790 <HAL_DMA_Abort+0x468>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d01d      	beq.n	8004652 <HAL_DMA_Abort+0x32a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a5e      	ldr	r2, [pc, #376]	; (8004794 <HAL_DMA_Abort+0x46c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d018      	beq.n	8004652 <HAL_DMA_Abort+0x32a>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a5c      	ldr	r2, [pc, #368]	; (8004798 <HAL_DMA_Abort+0x470>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d013      	beq.n	8004652 <HAL_DMA_Abort+0x32a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a5b      	ldr	r2, [pc, #364]	; (800479c <HAL_DMA_Abort+0x474>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00e      	beq.n	8004652 <HAL_DMA_Abort+0x32a>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a59      	ldr	r2, [pc, #356]	; (80047a0 <HAL_DMA_Abort+0x478>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d009      	beq.n	8004652 <HAL_DMA_Abort+0x32a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a58      	ldr	r2, [pc, #352]	; (80047a4 <HAL_DMA_Abort+0x47c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d004      	beq.n	8004652 <HAL_DMA_Abort+0x32a>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a56      	ldr	r2, [pc, #344]	; (80047a8 <HAL_DMA_Abort+0x480>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d108      	bne.n	8004664 <HAL_DMA_Abort+0x33c>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0201 	bic.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	e007      	b.n	8004674 <HAL_DMA_Abort+0x34c>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0201 	bic.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004674:	e013      	b.n	800469e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004676:	f7fc fd9d 	bl	80011b4 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b05      	cmp	r3, #5
 8004682:	d90c      	bls.n	800469e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2203      	movs	r2, #3
 800468e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e12d      	b.n	80048fa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1e5      	bne.n	8004676 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a2f      	ldr	r2, [pc, #188]	; (800476c <HAL_DMA_Abort+0x444>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d04a      	beq.n	800474a <HAL_DMA_Abort+0x422>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a2d      	ldr	r2, [pc, #180]	; (8004770 <HAL_DMA_Abort+0x448>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d045      	beq.n	800474a <HAL_DMA_Abort+0x422>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a2c      	ldr	r2, [pc, #176]	; (8004774 <HAL_DMA_Abort+0x44c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d040      	beq.n	800474a <HAL_DMA_Abort+0x422>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a2a      	ldr	r2, [pc, #168]	; (8004778 <HAL_DMA_Abort+0x450>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d03b      	beq.n	800474a <HAL_DMA_Abort+0x422>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a29      	ldr	r2, [pc, #164]	; (800477c <HAL_DMA_Abort+0x454>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d036      	beq.n	800474a <HAL_DMA_Abort+0x422>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a27      	ldr	r2, [pc, #156]	; (8004780 <HAL_DMA_Abort+0x458>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d031      	beq.n	800474a <HAL_DMA_Abort+0x422>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a26      	ldr	r2, [pc, #152]	; (8004784 <HAL_DMA_Abort+0x45c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d02c      	beq.n	800474a <HAL_DMA_Abort+0x422>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a24      	ldr	r2, [pc, #144]	; (8004788 <HAL_DMA_Abort+0x460>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d027      	beq.n	800474a <HAL_DMA_Abort+0x422>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a23      	ldr	r2, [pc, #140]	; (800478c <HAL_DMA_Abort+0x464>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d022      	beq.n	800474a <HAL_DMA_Abort+0x422>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a21      	ldr	r2, [pc, #132]	; (8004790 <HAL_DMA_Abort+0x468>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d01d      	beq.n	800474a <HAL_DMA_Abort+0x422>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a20      	ldr	r2, [pc, #128]	; (8004794 <HAL_DMA_Abort+0x46c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d018      	beq.n	800474a <HAL_DMA_Abort+0x422>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a1e      	ldr	r2, [pc, #120]	; (8004798 <HAL_DMA_Abort+0x470>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d013      	beq.n	800474a <HAL_DMA_Abort+0x422>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a1d      	ldr	r2, [pc, #116]	; (800479c <HAL_DMA_Abort+0x474>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00e      	beq.n	800474a <HAL_DMA_Abort+0x422>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1b      	ldr	r2, [pc, #108]	; (80047a0 <HAL_DMA_Abort+0x478>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d009      	beq.n	800474a <HAL_DMA_Abort+0x422>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a1a      	ldr	r2, [pc, #104]	; (80047a4 <HAL_DMA_Abort+0x47c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d004      	beq.n	800474a <HAL_DMA_Abort+0x422>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a18      	ldr	r2, [pc, #96]	; (80047a8 <HAL_DMA_Abort+0x480>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d101      	bne.n	800474e <HAL_DMA_Abort+0x426>
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <HAL_DMA_Abort+0x428>
 800474e:	2300      	movs	r3, #0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d02b      	beq.n	80047ac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004758:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475e:	f003 031f 	and.w	r3, r3, #31
 8004762:	223f      	movs	r2, #63	; 0x3f
 8004764:	409a      	lsls	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	609a      	str	r2, [r3, #8]
 800476a:	e02a      	b.n	80047c2 <HAL_DMA_Abort+0x49a>
 800476c:	40020010 	.word	0x40020010
 8004770:	40020028 	.word	0x40020028
 8004774:	40020040 	.word	0x40020040
 8004778:	40020058 	.word	0x40020058
 800477c:	40020070 	.word	0x40020070
 8004780:	40020088 	.word	0x40020088
 8004784:	400200a0 	.word	0x400200a0
 8004788:	400200b8 	.word	0x400200b8
 800478c:	40020410 	.word	0x40020410
 8004790:	40020428 	.word	0x40020428
 8004794:	40020440 	.word	0x40020440
 8004798:	40020458 	.word	0x40020458
 800479c:	40020470 	.word	0x40020470
 80047a0:	40020488 	.word	0x40020488
 80047a4:	400204a0 	.word	0x400204a0
 80047a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b6:	f003 031f 	and.w	r3, r3, #31
 80047ba:	2201      	movs	r2, #1
 80047bc:	409a      	lsls	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a4f      	ldr	r2, [pc, #316]	; (8004904 <HAL_DMA_Abort+0x5dc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d072      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a4d      	ldr	r2, [pc, #308]	; (8004908 <HAL_DMA_Abort+0x5e0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d06d      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a4c      	ldr	r2, [pc, #304]	; (800490c <HAL_DMA_Abort+0x5e4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d068      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a4a      	ldr	r2, [pc, #296]	; (8004910 <HAL_DMA_Abort+0x5e8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d063      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a49      	ldr	r2, [pc, #292]	; (8004914 <HAL_DMA_Abort+0x5ec>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d05e      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a47      	ldr	r2, [pc, #284]	; (8004918 <HAL_DMA_Abort+0x5f0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d059      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a46      	ldr	r2, [pc, #280]	; (800491c <HAL_DMA_Abort+0x5f4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d054      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a44      	ldr	r2, [pc, #272]	; (8004920 <HAL_DMA_Abort+0x5f8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d04f      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a43      	ldr	r2, [pc, #268]	; (8004924 <HAL_DMA_Abort+0x5fc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d04a      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a41      	ldr	r2, [pc, #260]	; (8004928 <HAL_DMA_Abort+0x600>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d045      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a40      	ldr	r2, [pc, #256]	; (800492c <HAL_DMA_Abort+0x604>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d040      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a3e      	ldr	r2, [pc, #248]	; (8004930 <HAL_DMA_Abort+0x608>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d03b      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a3d      	ldr	r2, [pc, #244]	; (8004934 <HAL_DMA_Abort+0x60c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d036      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a3b      	ldr	r2, [pc, #236]	; (8004938 <HAL_DMA_Abort+0x610>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d031      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a3a      	ldr	r2, [pc, #232]	; (800493c <HAL_DMA_Abort+0x614>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d02c      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a38      	ldr	r2, [pc, #224]	; (8004940 <HAL_DMA_Abort+0x618>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d027      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a37      	ldr	r2, [pc, #220]	; (8004944 <HAL_DMA_Abort+0x61c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d022      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a35      	ldr	r2, [pc, #212]	; (8004948 <HAL_DMA_Abort+0x620>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d01d      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a34      	ldr	r2, [pc, #208]	; (800494c <HAL_DMA_Abort+0x624>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d018      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a32      	ldr	r2, [pc, #200]	; (8004950 <HAL_DMA_Abort+0x628>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d013      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a31      	ldr	r2, [pc, #196]	; (8004954 <HAL_DMA_Abort+0x62c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d00e      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a2f      	ldr	r2, [pc, #188]	; (8004958 <HAL_DMA_Abort+0x630>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d009      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a2e      	ldr	r2, [pc, #184]	; (800495c <HAL_DMA_Abort+0x634>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d004      	beq.n	80048b2 <HAL_DMA_Abort+0x58a>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a2c      	ldr	r2, [pc, #176]	; (8004960 <HAL_DMA_Abort+0x638>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d101      	bne.n	80048b6 <HAL_DMA_Abort+0x58e>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e000      	b.n	80048b8 <HAL_DMA_Abort+0x590>
 80048b6:	2300      	movs	r3, #0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d015      	beq.n	80048e8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80048c4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00c      	beq.n	80048e8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048dc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80048e6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40020010 	.word	0x40020010
 8004908:	40020028 	.word	0x40020028
 800490c:	40020040 	.word	0x40020040
 8004910:	40020058 	.word	0x40020058
 8004914:	40020070 	.word	0x40020070
 8004918:	40020088 	.word	0x40020088
 800491c:	400200a0 	.word	0x400200a0
 8004920:	400200b8 	.word	0x400200b8
 8004924:	40020410 	.word	0x40020410
 8004928:	40020428 	.word	0x40020428
 800492c:	40020440 	.word	0x40020440
 8004930:	40020458 	.word	0x40020458
 8004934:	40020470 	.word	0x40020470
 8004938:	40020488 	.word	0x40020488
 800493c:	400204a0 	.word	0x400204a0
 8004940:	400204b8 	.word	0x400204b8
 8004944:	58025408 	.word	0x58025408
 8004948:	5802541c 	.word	0x5802541c
 800494c:	58025430 	.word	0x58025430
 8004950:	58025444 	.word	0x58025444
 8004954:	58025458 	.word	0x58025458
 8004958:	5802546c 	.word	0x5802546c
 800495c:	58025480 	.word	0x58025480
 8004960:	58025494 	.word	0x58025494

08004964 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08a      	sub	sp, #40	; 0x28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004970:	4b67      	ldr	r3, [pc, #412]	; (8004b10 <HAL_DMA_IRQHandler+0x1ac>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a67      	ldr	r2, [pc, #412]	; (8004b14 <HAL_DMA_IRQHandler+0x1b0>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	0a9b      	lsrs	r3, r3, #10
 800497c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004982:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004988:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a5f      	ldr	r2, [pc, #380]	; (8004b18 <HAL_DMA_IRQHandler+0x1b4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d04a      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a5d      	ldr	r2, [pc, #372]	; (8004b1c <HAL_DMA_IRQHandler+0x1b8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d045      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a5c      	ldr	r2, [pc, #368]	; (8004b20 <HAL_DMA_IRQHandler+0x1bc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d040      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a5a      	ldr	r2, [pc, #360]	; (8004b24 <HAL_DMA_IRQHandler+0x1c0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d03b      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a59      	ldr	r2, [pc, #356]	; (8004b28 <HAL_DMA_IRQHandler+0x1c4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d036      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a57      	ldr	r2, [pc, #348]	; (8004b2c <HAL_DMA_IRQHandler+0x1c8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d031      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a56      	ldr	r2, [pc, #344]	; (8004b30 <HAL_DMA_IRQHandler+0x1cc>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d02c      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a54      	ldr	r2, [pc, #336]	; (8004b34 <HAL_DMA_IRQHandler+0x1d0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d027      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a53      	ldr	r2, [pc, #332]	; (8004b38 <HAL_DMA_IRQHandler+0x1d4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d022      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a51      	ldr	r2, [pc, #324]	; (8004b3c <HAL_DMA_IRQHandler+0x1d8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01d      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a50      	ldr	r2, [pc, #320]	; (8004b40 <HAL_DMA_IRQHandler+0x1dc>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d018      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a4e      	ldr	r2, [pc, #312]	; (8004b44 <HAL_DMA_IRQHandler+0x1e0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a4d      	ldr	r2, [pc, #308]	; (8004b48 <HAL_DMA_IRQHandler+0x1e4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00e      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a4b      	ldr	r2, [pc, #300]	; (8004b4c <HAL_DMA_IRQHandler+0x1e8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d009      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a4a      	ldr	r2, [pc, #296]	; (8004b50 <HAL_DMA_IRQHandler+0x1ec>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a48      	ldr	r2, [pc, #288]	; (8004b54 <HAL_DMA_IRQHandler+0x1f0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d101      	bne.n	8004a3a <HAL_DMA_IRQHandler+0xd6>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_DMA_IRQHandler+0xd8>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 842b 	beq.w	8005298 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	2208      	movs	r2, #8
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 80a2 	beq.w	8004b9c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a2e      	ldr	r2, [pc, #184]	; (8004b18 <HAL_DMA_IRQHandler+0x1b4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d04a      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a2d      	ldr	r2, [pc, #180]	; (8004b1c <HAL_DMA_IRQHandler+0x1b8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d045      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a2b      	ldr	r2, [pc, #172]	; (8004b20 <HAL_DMA_IRQHandler+0x1bc>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d040      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a2a      	ldr	r2, [pc, #168]	; (8004b24 <HAL_DMA_IRQHandler+0x1c0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d03b      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a28      	ldr	r2, [pc, #160]	; (8004b28 <HAL_DMA_IRQHandler+0x1c4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d036      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a27      	ldr	r2, [pc, #156]	; (8004b2c <HAL_DMA_IRQHandler+0x1c8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d031      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a25      	ldr	r2, [pc, #148]	; (8004b30 <HAL_DMA_IRQHandler+0x1cc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d02c      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a24      	ldr	r2, [pc, #144]	; (8004b34 <HAL_DMA_IRQHandler+0x1d0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d027      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a22      	ldr	r2, [pc, #136]	; (8004b38 <HAL_DMA_IRQHandler+0x1d4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d022      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a21      	ldr	r2, [pc, #132]	; (8004b3c <HAL_DMA_IRQHandler+0x1d8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d01d      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a1f      	ldr	r2, [pc, #124]	; (8004b40 <HAL_DMA_IRQHandler+0x1dc>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d018      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a1e      	ldr	r2, [pc, #120]	; (8004b44 <HAL_DMA_IRQHandler+0x1e0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d013      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1c      	ldr	r2, [pc, #112]	; (8004b48 <HAL_DMA_IRQHandler+0x1e4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00e      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1b      	ldr	r2, [pc, #108]	; (8004b4c <HAL_DMA_IRQHandler+0x1e8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d009      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a19      	ldr	r2, [pc, #100]	; (8004b50 <HAL_DMA_IRQHandler+0x1ec>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a18      	ldr	r2, [pc, #96]	; (8004b54 <HAL_DMA_IRQHandler+0x1f0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d12f      	bne.n	8004b58 <HAL_DMA_IRQHandler+0x1f4>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	bf14      	ite	ne
 8004b06:	2301      	movne	r3, #1
 8004b08:	2300      	moveq	r3, #0
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	e02e      	b.n	8004b6c <HAL_DMA_IRQHandler+0x208>
 8004b0e:	bf00      	nop
 8004b10:	24000008 	.word	0x24000008
 8004b14:	1b4e81b5 	.word	0x1b4e81b5
 8004b18:	40020010 	.word	0x40020010
 8004b1c:	40020028 	.word	0x40020028
 8004b20:	40020040 	.word	0x40020040
 8004b24:	40020058 	.word	0x40020058
 8004b28:	40020070 	.word	0x40020070
 8004b2c:	40020088 	.word	0x40020088
 8004b30:	400200a0 	.word	0x400200a0
 8004b34:	400200b8 	.word	0x400200b8
 8004b38:	40020410 	.word	0x40020410
 8004b3c:	40020428 	.word	0x40020428
 8004b40:	40020440 	.word	0x40020440
 8004b44:	40020458 	.word	0x40020458
 8004b48:	40020470 	.word	0x40020470
 8004b4c:	40020488 	.word	0x40020488
 8004b50:	400204a0 	.word	0x400204a0
 8004b54:	400204b8 	.word	0x400204b8
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bf14      	ite	ne
 8004b66:	2301      	movne	r3, #1
 8004b68:	2300      	moveq	r3, #0
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d015      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0204 	bic.w	r2, r2, #4
 8004b7e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b84:	f003 031f 	and.w	r3, r3, #31
 8004b88:	2208      	movs	r2, #8
 8004b8a:	409a      	lsls	r2, r3
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b94:	f043 0201 	orr.w	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba0:	f003 031f 	and.w	r3, r3, #31
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d06e      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a69      	ldr	r2, [pc, #420]	; (8004d5c <HAL_DMA_IRQHandler+0x3f8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d04a      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a67      	ldr	r2, [pc, #412]	; (8004d60 <HAL_DMA_IRQHandler+0x3fc>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d045      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a66      	ldr	r2, [pc, #408]	; (8004d64 <HAL_DMA_IRQHandler+0x400>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d040      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a64      	ldr	r2, [pc, #400]	; (8004d68 <HAL_DMA_IRQHandler+0x404>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d03b      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a63      	ldr	r2, [pc, #396]	; (8004d6c <HAL_DMA_IRQHandler+0x408>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d036      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a61      	ldr	r2, [pc, #388]	; (8004d70 <HAL_DMA_IRQHandler+0x40c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d031      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a60      	ldr	r2, [pc, #384]	; (8004d74 <HAL_DMA_IRQHandler+0x410>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d02c      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a5e      	ldr	r2, [pc, #376]	; (8004d78 <HAL_DMA_IRQHandler+0x414>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d027      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a5d      	ldr	r2, [pc, #372]	; (8004d7c <HAL_DMA_IRQHandler+0x418>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d022      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a5b      	ldr	r2, [pc, #364]	; (8004d80 <HAL_DMA_IRQHandler+0x41c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d01d      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a5a      	ldr	r2, [pc, #360]	; (8004d84 <HAL_DMA_IRQHandler+0x420>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d018      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a58      	ldr	r2, [pc, #352]	; (8004d88 <HAL_DMA_IRQHandler+0x424>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d013      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a57      	ldr	r2, [pc, #348]	; (8004d8c <HAL_DMA_IRQHandler+0x428>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00e      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a55      	ldr	r2, [pc, #340]	; (8004d90 <HAL_DMA_IRQHandler+0x42c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d009      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a54      	ldr	r2, [pc, #336]	; (8004d94 <HAL_DMA_IRQHandler+0x430>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d004      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a52      	ldr	r2, [pc, #328]	; (8004d98 <HAL_DMA_IRQHandler+0x434>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d10a      	bne.n	8004c68 <HAL_DMA_IRQHandler+0x304>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf14      	ite	ne
 8004c60:	2301      	movne	r3, #1
 8004c62:	2300      	moveq	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	e003      	b.n	8004c70 <HAL_DMA_IRQHandler+0x30c>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00d      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c78:	f003 031f 	and.w	r3, r3, #31
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	409a      	lsls	r2, r3
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c88:	f043 0202 	orr.w	r2, r3, #2
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c94:	f003 031f 	and.w	r3, r3, #31
 8004c98:	2204      	movs	r2, #4
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 808f 	beq.w	8004dc4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a2c      	ldr	r2, [pc, #176]	; (8004d5c <HAL_DMA_IRQHandler+0x3f8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d04a      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a2a      	ldr	r2, [pc, #168]	; (8004d60 <HAL_DMA_IRQHandler+0x3fc>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d045      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a29      	ldr	r2, [pc, #164]	; (8004d64 <HAL_DMA_IRQHandler+0x400>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d040      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a27      	ldr	r2, [pc, #156]	; (8004d68 <HAL_DMA_IRQHandler+0x404>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d03b      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a26      	ldr	r2, [pc, #152]	; (8004d6c <HAL_DMA_IRQHandler+0x408>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d036      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a24      	ldr	r2, [pc, #144]	; (8004d70 <HAL_DMA_IRQHandler+0x40c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d031      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a23      	ldr	r2, [pc, #140]	; (8004d74 <HAL_DMA_IRQHandler+0x410>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d02c      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a21      	ldr	r2, [pc, #132]	; (8004d78 <HAL_DMA_IRQHandler+0x414>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d027      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a20      	ldr	r2, [pc, #128]	; (8004d7c <HAL_DMA_IRQHandler+0x418>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d022      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1e      	ldr	r2, [pc, #120]	; (8004d80 <HAL_DMA_IRQHandler+0x41c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d01d      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a1d      	ldr	r2, [pc, #116]	; (8004d84 <HAL_DMA_IRQHandler+0x420>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d018      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a1b      	ldr	r2, [pc, #108]	; (8004d88 <HAL_DMA_IRQHandler+0x424>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d013      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a1a      	ldr	r2, [pc, #104]	; (8004d8c <HAL_DMA_IRQHandler+0x428>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00e      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a18      	ldr	r2, [pc, #96]	; (8004d90 <HAL_DMA_IRQHandler+0x42c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d009      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a17      	ldr	r2, [pc, #92]	; (8004d94 <HAL_DMA_IRQHandler+0x430>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d004      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a15      	ldr	r2, [pc, #84]	; (8004d98 <HAL_DMA_IRQHandler+0x434>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d12a      	bne.n	8004d9c <HAL_DMA_IRQHandler+0x438>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bf14      	ite	ne
 8004d54:	2301      	movne	r3, #1
 8004d56:	2300      	moveq	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	e023      	b.n	8004da4 <HAL_DMA_IRQHandler+0x440>
 8004d5c:	40020010 	.word	0x40020010
 8004d60:	40020028 	.word	0x40020028
 8004d64:	40020040 	.word	0x40020040
 8004d68:	40020058 	.word	0x40020058
 8004d6c:	40020070 	.word	0x40020070
 8004d70:	40020088 	.word	0x40020088
 8004d74:	400200a0 	.word	0x400200a0
 8004d78:	400200b8 	.word	0x400200b8
 8004d7c:	40020410 	.word	0x40020410
 8004d80:	40020428 	.word	0x40020428
 8004d84:	40020440 	.word	0x40020440
 8004d88:	40020458 	.word	0x40020458
 8004d8c:	40020470 	.word	0x40020470
 8004d90:	40020488 	.word	0x40020488
 8004d94:	400204a0 	.word	0x400204a0
 8004d98:	400204b8 	.word	0x400204b8
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2300      	movs	r3, #0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00d      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	2204      	movs	r2, #4
 8004db2:	409a      	lsls	r2, r3
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbc:	f043 0204 	orr.w	r2, r3, #4
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc8:	f003 031f 	and.w	r3, r3, #31
 8004dcc:	2210      	movs	r2, #16
 8004dce:	409a      	lsls	r2, r3
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 80a6 	beq.w	8004f26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a85      	ldr	r2, [pc, #532]	; (8004ff4 <HAL_DMA_IRQHandler+0x690>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d04a      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a83      	ldr	r2, [pc, #524]	; (8004ff8 <HAL_DMA_IRQHandler+0x694>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d045      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a82      	ldr	r2, [pc, #520]	; (8004ffc <HAL_DMA_IRQHandler+0x698>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d040      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a80      	ldr	r2, [pc, #512]	; (8005000 <HAL_DMA_IRQHandler+0x69c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d03b      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a7f      	ldr	r2, [pc, #508]	; (8005004 <HAL_DMA_IRQHandler+0x6a0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d036      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a7d      	ldr	r2, [pc, #500]	; (8005008 <HAL_DMA_IRQHandler+0x6a4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d031      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a7c      	ldr	r2, [pc, #496]	; (800500c <HAL_DMA_IRQHandler+0x6a8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d02c      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a7a      	ldr	r2, [pc, #488]	; (8005010 <HAL_DMA_IRQHandler+0x6ac>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d027      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a79      	ldr	r2, [pc, #484]	; (8005014 <HAL_DMA_IRQHandler+0x6b0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d022      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a77      	ldr	r2, [pc, #476]	; (8005018 <HAL_DMA_IRQHandler+0x6b4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d01d      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a76      	ldr	r2, [pc, #472]	; (800501c <HAL_DMA_IRQHandler+0x6b8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d018      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a74      	ldr	r2, [pc, #464]	; (8005020 <HAL_DMA_IRQHandler+0x6bc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d013      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a73      	ldr	r2, [pc, #460]	; (8005024 <HAL_DMA_IRQHandler+0x6c0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00e      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a71      	ldr	r2, [pc, #452]	; (8005028 <HAL_DMA_IRQHandler+0x6c4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d009      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a70      	ldr	r2, [pc, #448]	; (800502c <HAL_DMA_IRQHandler+0x6c8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d004      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a6e      	ldr	r2, [pc, #440]	; (8005030 <HAL_DMA_IRQHandler+0x6cc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d10a      	bne.n	8004e90 <HAL_DMA_IRQHandler+0x52c>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	bf14      	ite	ne
 8004e88:	2301      	movne	r3, #1
 8004e8a:	2300      	moveq	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	e009      	b.n	8004ea4 <HAL_DMA_IRQHandler+0x540>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	bf14      	ite	ne
 8004e9e:	2301      	movne	r3, #1
 8004ea0:	2300      	moveq	r3, #0
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d03e      	beq.n	8004f26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	2210      	movs	r2, #16
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d018      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d108      	bne.n	8004ee6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d024      	beq.n	8004f26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	4798      	blx	r3
 8004ee4:	e01f      	b.n	8004f26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d01b      	beq.n	8004f26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	4798      	blx	r3
 8004ef6:	e016      	b.n	8004f26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d107      	bne.n	8004f16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0208 	bic.w	r2, r2, #8
 8004f14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	2220      	movs	r2, #32
 8004f30:	409a      	lsls	r2, r3
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 8110 	beq.w	800515c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a2c      	ldr	r2, [pc, #176]	; (8004ff4 <HAL_DMA_IRQHandler+0x690>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d04a      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a2b      	ldr	r2, [pc, #172]	; (8004ff8 <HAL_DMA_IRQHandler+0x694>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d045      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a29      	ldr	r2, [pc, #164]	; (8004ffc <HAL_DMA_IRQHandler+0x698>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d040      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a28      	ldr	r2, [pc, #160]	; (8005000 <HAL_DMA_IRQHandler+0x69c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d03b      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a26      	ldr	r2, [pc, #152]	; (8005004 <HAL_DMA_IRQHandler+0x6a0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d036      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a25      	ldr	r2, [pc, #148]	; (8005008 <HAL_DMA_IRQHandler+0x6a4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d031      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a23      	ldr	r2, [pc, #140]	; (800500c <HAL_DMA_IRQHandler+0x6a8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d02c      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a22      	ldr	r2, [pc, #136]	; (8005010 <HAL_DMA_IRQHandler+0x6ac>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d027      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a20      	ldr	r2, [pc, #128]	; (8005014 <HAL_DMA_IRQHandler+0x6b0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d022      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1f      	ldr	r2, [pc, #124]	; (8005018 <HAL_DMA_IRQHandler+0x6b4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d01d      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1d      	ldr	r2, [pc, #116]	; (800501c <HAL_DMA_IRQHandler+0x6b8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d018      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1c      	ldr	r2, [pc, #112]	; (8005020 <HAL_DMA_IRQHandler+0x6bc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d013      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a1a      	ldr	r2, [pc, #104]	; (8005024 <HAL_DMA_IRQHandler+0x6c0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00e      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a19      	ldr	r2, [pc, #100]	; (8005028 <HAL_DMA_IRQHandler+0x6c4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d009      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a17      	ldr	r2, [pc, #92]	; (800502c <HAL_DMA_IRQHandler+0x6c8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d004      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a16      	ldr	r2, [pc, #88]	; (8005030 <HAL_DMA_IRQHandler+0x6cc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d12b      	bne.n	8005034 <HAL_DMA_IRQHandler+0x6d0>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bf14      	ite	ne
 8004fea:	2301      	movne	r3, #1
 8004fec:	2300      	moveq	r3, #0
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	e02a      	b.n	8005048 <HAL_DMA_IRQHandler+0x6e4>
 8004ff2:	bf00      	nop
 8004ff4:	40020010 	.word	0x40020010
 8004ff8:	40020028 	.word	0x40020028
 8004ffc:	40020040 	.word	0x40020040
 8005000:	40020058 	.word	0x40020058
 8005004:	40020070 	.word	0x40020070
 8005008:	40020088 	.word	0x40020088
 800500c:	400200a0 	.word	0x400200a0
 8005010:	400200b8 	.word	0x400200b8
 8005014:	40020410 	.word	0x40020410
 8005018:	40020428 	.word	0x40020428
 800501c:	40020440 	.word	0x40020440
 8005020:	40020458 	.word	0x40020458
 8005024:	40020470 	.word	0x40020470
 8005028:	40020488 	.word	0x40020488
 800502c:	400204a0 	.word	0x400204a0
 8005030:	400204b8 	.word	0x400204b8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	bf14      	ite	ne
 8005042:	2301      	movne	r3, #1
 8005044:	2300      	moveq	r3, #0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8087 	beq.w	800515c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	2220      	movs	r2, #32
 8005058:	409a      	lsls	r2, r3
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b04      	cmp	r3, #4
 8005068:	d139      	bne.n	80050de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0216 	bic.w	r2, r2, #22
 8005078:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695a      	ldr	r2, [r3, #20]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005088:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d103      	bne.n	800509a <HAL_DMA_IRQHandler+0x736>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005096:	2b00      	cmp	r3, #0
 8005098:	d007      	beq.n	80050aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0208 	bic.w	r2, r2, #8
 80050a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ae:	f003 031f 	and.w	r3, r3, #31
 80050b2:	223f      	movs	r2, #63	; 0x3f
 80050b4:	409a      	lsls	r2, r3
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 834a 	beq.w	8005768 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	4798      	blx	r3
          }
          return;
 80050dc:	e344      	b.n	8005768 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d018      	beq.n	800511e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d108      	bne.n	800510c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d02c      	beq.n	800515c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	4798      	blx	r3
 800510a:	e027      	b.n	800515c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005110:	2b00      	cmp	r3, #0
 8005112:	d023      	beq.n	800515c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	4798      	blx	r3
 800511c:	e01e      	b.n	800515c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10f      	bne.n	800514c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0210 	bic.w	r2, r2, #16
 800513a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 8306 	beq.w	8005772 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 8088 	beq.w	8005284 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2204      	movs	r2, #4
 8005178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a7a      	ldr	r2, [pc, #488]	; (800536c <HAL_DMA_IRQHandler+0xa08>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d04a      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a79      	ldr	r2, [pc, #484]	; (8005370 <HAL_DMA_IRQHandler+0xa0c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d045      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a77      	ldr	r2, [pc, #476]	; (8005374 <HAL_DMA_IRQHandler+0xa10>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d040      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a76      	ldr	r2, [pc, #472]	; (8005378 <HAL_DMA_IRQHandler+0xa14>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d03b      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a74      	ldr	r2, [pc, #464]	; (800537c <HAL_DMA_IRQHandler+0xa18>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d036      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a73      	ldr	r2, [pc, #460]	; (8005380 <HAL_DMA_IRQHandler+0xa1c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d031      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a71      	ldr	r2, [pc, #452]	; (8005384 <HAL_DMA_IRQHandler+0xa20>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d02c      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a70      	ldr	r2, [pc, #448]	; (8005388 <HAL_DMA_IRQHandler+0xa24>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d027      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a6e      	ldr	r2, [pc, #440]	; (800538c <HAL_DMA_IRQHandler+0xa28>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d022      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a6d      	ldr	r2, [pc, #436]	; (8005390 <HAL_DMA_IRQHandler+0xa2c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d01d      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a6b      	ldr	r2, [pc, #428]	; (8005394 <HAL_DMA_IRQHandler+0xa30>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d018      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a6a      	ldr	r2, [pc, #424]	; (8005398 <HAL_DMA_IRQHandler+0xa34>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d013      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a68      	ldr	r2, [pc, #416]	; (800539c <HAL_DMA_IRQHandler+0xa38>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00e      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a67      	ldr	r2, [pc, #412]	; (80053a0 <HAL_DMA_IRQHandler+0xa3c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d009      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a65      	ldr	r2, [pc, #404]	; (80053a4 <HAL_DMA_IRQHandler+0xa40>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d004      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a64      	ldr	r2, [pc, #400]	; (80053a8 <HAL_DMA_IRQHandler+0xa44>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d108      	bne.n	800522e <HAL_DMA_IRQHandler+0x8ca>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0201 	bic.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	e007      	b.n	800523e <HAL_DMA_IRQHandler+0x8da>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0201 	bic.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3301      	adds	r3, #1
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005246:	429a      	cmp	r2, r3
 8005248:	d307      	bcc.n	800525a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1f2      	bne.n	800523e <HAL_DMA_IRQHandler+0x8da>
 8005258:	e000      	b.n	800525c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800525a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d004      	beq.n	8005274 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2203      	movs	r2, #3
 800526e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005272:	e003      	b.n	800527c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 8272 	beq.w	8005772 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	4798      	blx	r3
 8005296:	e26c      	b.n	8005772 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a43      	ldr	r2, [pc, #268]	; (80053ac <HAL_DMA_IRQHandler+0xa48>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d022      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x984>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a42      	ldr	r2, [pc, #264]	; (80053b0 <HAL_DMA_IRQHandler+0xa4c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d01d      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x984>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a40      	ldr	r2, [pc, #256]	; (80053b4 <HAL_DMA_IRQHandler+0xa50>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d018      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x984>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a3f      	ldr	r2, [pc, #252]	; (80053b8 <HAL_DMA_IRQHandler+0xa54>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d013      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x984>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a3d      	ldr	r2, [pc, #244]	; (80053bc <HAL_DMA_IRQHandler+0xa58>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00e      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x984>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a3c      	ldr	r2, [pc, #240]	; (80053c0 <HAL_DMA_IRQHandler+0xa5c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d009      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x984>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a3a      	ldr	r2, [pc, #232]	; (80053c4 <HAL_DMA_IRQHandler+0xa60>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d004      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x984>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a39      	ldr	r2, [pc, #228]	; (80053c8 <HAL_DMA_IRQHandler+0xa64>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d101      	bne.n	80052ec <HAL_DMA_IRQHandler+0x988>
 80052e8:	2301      	movs	r3, #1
 80052ea:	e000      	b.n	80052ee <HAL_DMA_IRQHandler+0x98a>
 80052ec:	2300      	movs	r3, #0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 823f 	beq.w	8005772 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	2204      	movs	r2, #4
 8005306:	409a      	lsls	r2, r3
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	4013      	ands	r3, r2
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 80cd 	beq.w	80054ac <HAL_DMA_IRQHandler+0xb48>
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 80c7 	beq.w	80054ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005322:	f003 031f 	and.w	r3, r3, #31
 8005326:	2204      	movs	r2, #4
 8005328:	409a      	lsls	r2, r3
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d049      	beq.n	80053cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d109      	bne.n	8005356 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 8210 	beq.w	800576c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005354:	e20a      	b.n	800576c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 8206 	beq.w	800576c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005368:	e200      	b.n	800576c <HAL_DMA_IRQHandler+0xe08>
 800536a:	bf00      	nop
 800536c:	40020010 	.word	0x40020010
 8005370:	40020028 	.word	0x40020028
 8005374:	40020040 	.word	0x40020040
 8005378:	40020058 	.word	0x40020058
 800537c:	40020070 	.word	0x40020070
 8005380:	40020088 	.word	0x40020088
 8005384:	400200a0 	.word	0x400200a0
 8005388:	400200b8 	.word	0x400200b8
 800538c:	40020410 	.word	0x40020410
 8005390:	40020428 	.word	0x40020428
 8005394:	40020440 	.word	0x40020440
 8005398:	40020458 	.word	0x40020458
 800539c:	40020470 	.word	0x40020470
 80053a0:	40020488 	.word	0x40020488
 80053a4:	400204a0 	.word	0x400204a0
 80053a8:	400204b8 	.word	0x400204b8
 80053ac:	58025408 	.word	0x58025408
 80053b0:	5802541c 	.word	0x5802541c
 80053b4:	58025430 	.word	0x58025430
 80053b8:	58025444 	.word	0x58025444
 80053bc:	58025458 	.word	0x58025458
 80053c0:	5802546c 	.word	0x5802546c
 80053c4:	58025480 	.word	0x58025480
 80053c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f003 0320 	and.w	r3, r3, #32
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d160      	bne.n	8005498 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a7f      	ldr	r2, [pc, #508]	; (80055d8 <HAL_DMA_IRQHandler+0xc74>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d04a      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a7d      	ldr	r2, [pc, #500]	; (80055dc <HAL_DMA_IRQHandler+0xc78>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d045      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a7c      	ldr	r2, [pc, #496]	; (80055e0 <HAL_DMA_IRQHandler+0xc7c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d040      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a7a      	ldr	r2, [pc, #488]	; (80055e4 <HAL_DMA_IRQHandler+0xc80>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d03b      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a79      	ldr	r2, [pc, #484]	; (80055e8 <HAL_DMA_IRQHandler+0xc84>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d036      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a77      	ldr	r2, [pc, #476]	; (80055ec <HAL_DMA_IRQHandler+0xc88>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d031      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a76      	ldr	r2, [pc, #472]	; (80055f0 <HAL_DMA_IRQHandler+0xc8c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d02c      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a74      	ldr	r2, [pc, #464]	; (80055f4 <HAL_DMA_IRQHandler+0xc90>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d027      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a73      	ldr	r2, [pc, #460]	; (80055f8 <HAL_DMA_IRQHandler+0xc94>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d022      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a71      	ldr	r2, [pc, #452]	; (80055fc <HAL_DMA_IRQHandler+0xc98>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01d      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a70      	ldr	r2, [pc, #448]	; (8005600 <HAL_DMA_IRQHandler+0xc9c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d018      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a6e      	ldr	r2, [pc, #440]	; (8005604 <HAL_DMA_IRQHandler+0xca0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d013      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a6d      	ldr	r2, [pc, #436]	; (8005608 <HAL_DMA_IRQHandler+0xca4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00e      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a6b      	ldr	r2, [pc, #428]	; (800560c <HAL_DMA_IRQHandler+0xca8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d009      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a6a      	ldr	r2, [pc, #424]	; (8005610 <HAL_DMA_IRQHandler+0xcac>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d004      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a68      	ldr	r2, [pc, #416]	; (8005614 <HAL_DMA_IRQHandler+0xcb0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d108      	bne.n	8005488 <HAL_DMA_IRQHandler+0xb24>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0208 	bic.w	r2, r2, #8
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	e007      	b.n	8005498 <HAL_DMA_IRQHandler+0xb34>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0204 	bic.w	r2, r2, #4
 8005496:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 8165 	beq.w	800576c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054aa:	e15f      	b.n	800576c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	2202      	movs	r2, #2
 80054b6:	409a      	lsls	r2, r3
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 80c5 	beq.w	800564c <HAL_DMA_IRQHandler+0xce8>
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 80bf 	beq.w	800564c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d2:	f003 031f 	and.w	r3, r3, #31
 80054d6:	2202      	movs	r2, #2
 80054d8:	409a      	lsls	r2, r3
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d018      	beq.n	800551a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d109      	bne.n	8005506 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 813a 	beq.w	8005770 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005504:	e134      	b.n	8005770 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 8130 	beq.w	8005770 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005518:	e12a      	b.n	8005770 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b00      	cmp	r3, #0
 8005522:	f040 8089 	bne.w	8005638 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a2b      	ldr	r2, [pc, #172]	; (80055d8 <HAL_DMA_IRQHandler+0xc74>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d04a      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a29      	ldr	r2, [pc, #164]	; (80055dc <HAL_DMA_IRQHandler+0xc78>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d045      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a28      	ldr	r2, [pc, #160]	; (80055e0 <HAL_DMA_IRQHandler+0xc7c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d040      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a26      	ldr	r2, [pc, #152]	; (80055e4 <HAL_DMA_IRQHandler+0xc80>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d03b      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a25      	ldr	r2, [pc, #148]	; (80055e8 <HAL_DMA_IRQHandler+0xc84>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d036      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a23      	ldr	r2, [pc, #140]	; (80055ec <HAL_DMA_IRQHandler+0xc88>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d031      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a22      	ldr	r2, [pc, #136]	; (80055f0 <HAL_DMA_IRQHandler+0xc8c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d02c      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a20      	ldr	r2, [pc, #128]	; (80055f4 <HAL_DMA_IRQHandler+0xc90>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d027      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a1f      	ldr	r2, [pc, #124]	; (80055f8 <HAL_DMA_IRQHandler+0xc94>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d022      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1d      	ldr	r2, [pc, #116]	; (80055fc <HAL_DMA_IRQHandler+0xc98>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d01d      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1c      	ldr	r2, [pc, #112]	; (8005600 <HAL_DMA_IRQHandler+0xc9c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d018      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a1a      	ldr	r2, [pc, #104]	; (8005604 <HAL_DMA_IRQHandler+0xca0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d013      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a19      	ldr	r2, [pc, #100]	; (8005608 <HAL_DMA_IRQHandler+0xca4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d00e      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a17      	ldr	r2, [pc, #92]	; (800560c <HAL_DMA_IRQHandler+0xca8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d009      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a16      	ldr	r2, [pc, #88]	; (8005610 <HAL_DMA_IRQHandler+0xcac>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d004      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a14      	ldr	r2, [pc, #80]	; (8005614 <HAL_DMA_IRQHandler+0xcb0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d128      	bne.n	8005618 <HAL_DMA_IRQHandler+0xcb4>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0214 	bic.w	r2, r2, #20
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	e027      	b.n	8005628 <HAL_DMA_IRQHandler+0xcc4>
 80055d8:	40020010 	.word	0x40020010
 80055dc:	40020028 	.word	0x40020028
 80055e0:	40020040 	.word	0x40020040
 80055e4:	40020058 	.word	0x40020058
 80055e8:	40020070 	.word	0x40020070
 80055ec:	40020088 	.word	0x40020088
 80055f0:	400200a0 	.word	0x400200a0
 80055f4:	400200b8 	.word	0x400200b8
 80055f8:	40020410 	.word	0x40020410
 80055fc:	40020428 	.word	0x40020428
 8005600:	40020440 	.word	0x40020440
 8005604:	40020458 	.word	0x40020458
 8005608:	40020470 	.word	0x40020470
 800560c:	40020488 	.word	0x40020488
 8005610:	400204a0 	.word	0x400204a0
 8005614:	400204b8 	.word	0x400204b8
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 020a 	bic.w	r2, r2, #10
 8005626:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 8097 	beq.w	8005770 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800564a:	e091      	b.n	8005770 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005650:	f003 031f 	and.w	r3, r3, #31
 8005654:	2208      	movs	r2, #8
 8005656:	409a      	lsls	r2, r3
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	4013      	ands	r3, r2
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 8088 	beq.w	8005772 <HAL_DMA_IRQHandler+0xe0e>
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 8082 	beq.w	8005772 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a41      	ldr	r2, [pc, #260]	; (8005778 <HAL_DMA_IRQHandler+0xe14>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d04a      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a3f      	ldr	r2, [pc, #252]	; (800577c <HAL_DMA_IRQHandler+0xe18>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d045      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a3e      	ldr	r2, [pc, #248]	; (8005780 <HAL_DMA_IRQHandler+0xe1c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d040      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a3c      	ldr	r2, [pc, #240]	; (8005784 <HAL_DMA_IRQHandler+0xe20>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d03b      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a3b      	ldr	r2, [pc, #236]	; (8005788 <HAL_DMA_IRQHandler+0xe24>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d036      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a39      	ldr	r2, [pc, #228]	; (800578c <HAL_DMA_IRQHandler+0xe28>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d031      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a38      	ldr	r2, [pc, #224]	; (8005790 <HAL_DMA_IRQHandler+0xe2c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d02c      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a36      	ldr	r2, [pc, #216]	; (8005794 <HAL_DMA_IRQHandler+0xe30>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d027      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a35      	ldr	r2, [pc, #212]	; (8005798 <HAL_DMA_IRQHandler+0xe34>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d022      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a33      	ldr	r2, [pc, #204]	; (800579c <HAL_DMA_IRQHandler+0xe38>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d01d      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a32      	ldr	r2, [pc, #200]	; (80057a0 <HAL_DMA_IRQHandler+0xe3c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d018      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a30      	ldr	r2, [pc, #192]	; (80057a4 <HAL_DMA_IRQHandler+0xe40>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d013      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a2f      	ldr	r2, [pc, #188]	; (80057a8 <HAL_DMA_IRQHandler+0xe44>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00e      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a2d      	ldr	r2, [pc, #180]	; (80057ac <HAL_DMA_IRQHandler+0xe48>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d009      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a2c      	ldr	r2, [pc, #176]	; (80057b0 <HAL_DMA_IRQHandler+0xe4c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d004      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a2a      	ldr	r2, [pc, #168]	; (80057b4 <HAL_DMA_IRQHandler+0xe50>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d108      	bne.n	8005720 <HAL_DMA_IRQHandler+0xdbc>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 021c 	bic.w	r2, r2, #28
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	e007      	b.n	8005730 <HAL_DMA_IRQHandler+0xdcc>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 020e 	bic.w	r2, r2, #14
 800572e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005734:	f003 031f 	and.w	r3, r3, #31
 8005738:	2201      	movs	r2, #1
 800573a:	409a      	lsls	r2, r3
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800575a:	2b00      	cmp	r3, #0
 800575c:	d009      	beq.n	8005772 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	4798      	blx	r3
 8005766:	e004      	b.n	8005772 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005768:	bf00      	nop
 800576a:	e002      	b.n	8005772 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800576c:	bf00      	nop
 800576e:	e000      	b.n	8005772 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005770:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005772:	3728      	adds	r7, #40	; 0x28
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40020010 	.word	0x40020010
 800577c:	40020028 	.word	0x40020028
 8005780:	40020040 	.word	0x40020040
 8005784:	40020058 	.word	0x40020058
 8005788:	40020070 	.word	0x40020070
 800578c:	40020088 	.word	0x40020088
 8005790:	400200a0 	.word	0x400200a0
 8005794:	400200b8 	.word	0x400200b8
 8005798:	40020410 	.word	0x40020410
 800579c:	40020428 	.word	0x40020428
 80057a0:	40020440 	.word	0x40020440
 80057a4:	40020458 	.word	0x40020458
 80057a8:	40020470 	.word	0x40020470
 80057ac:	40020488 	.word	0x40020488
 80057b0:	400204a0 	.word	0x400204a0
 80057b4:	400204b8 	.word	0x400204b8

080057b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a7f      	ldr	r2, [pc, #508]	; (80059d4 <DMA_SetConfig+0x21c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d072      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a7d      	ldr	r2, [pc, #500]	; (80059d8 <DMA_SetConfig+0x220>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d06d      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a7c      	ldr	r2, [pc, #496]	; (80059dc <DMA_SetConfig+0x224>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d068      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a7a      	ldr	r2, [pc, #488]	; (80059e0 <DMA_SetConfig+0x228>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d063      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a79      	ldr	r2, [pc, #484]	; (80059e4 <DMA_SetConfig+0x22c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d05e      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a77      	ldr	r2, [pc, #476]	; (80059e8 <DMA_SetConfig+0x230>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d059      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a76      	ldr	r2, [pc, #472]	; (80059ec <DMA_SetConfig+0x234>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d054      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a74      	ldr	r2, [pc, #464]	; (80059f0 <DMA_SetConfig+0x238>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d04f      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a73      	ldr	r2, [pc, #460]	; (80059f4 <DMA_SetConfig+0x23c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d04a      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a71      	ldr	r2, [pc, #452]	; (80059f8 <DMA_SetConfig+0x240>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d045      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a70      	ldr	r2, [pc, #448]	; (80059fc <DMA_SetConfig+0x244>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d040      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a6e      	ldr	r2, [pc, #440]	; (8005a00 <DMA_SetConfig+0x248>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d03b      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a6d      	ldr	r2, [pc, #436]	; (8005a04 <DMA_SetConfig+0x24c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d036      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a6b      	ldr	r2, [pc, #428]	; (8005a08 <DMA_SetConfig+0x250>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d031      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a6a      	ldr	r2, [pc, #424]	; (8005a0c <DMA_SetConfig+0x254>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d02c      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a68      	ldr	r2, [pc, #416]	; (8005a10 <DMA_SetConfig+0x258>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d027      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a67      	ldr	r2, [pc, #412]	; (8005a14 <DMA_SetConfig+0x25c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d022      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a65      	ldr	r2, [pc, #404]	; (8005a18 <DMA_SetConfig+0x260>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d01d      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a64      	ldr	r2, [pc, #400]	; (8005a1c <DMA_SetConfig+0x264>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d018      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a62      	ldr	r2, [pc, #392]	; (8005a20 <DMA_SetConfig+0x268>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d013      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a61      	ldr	r2, [pc, #388]	; (8005a24 <DMA_SetConfig+0x26c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00e      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a5f      	ldr	r2, [pc, #380]	; (8005a28 <DMA_SetConfig+0x270>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d009      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a5e      	ldr	r2, [pc, #376]	; (8005a2c <DMA_SetConfig+0x274>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d004      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a5c      	ldr	r2, [pc, #368]	; (8005a30 <DMA_SetConfig+0x278>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d101      	bne.n	80058c6 <DMA_SetConfig+0x10e>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <DMA_SetConfig+0x110>
 80058c6:	2300      	movs	r3, #0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00d      	beq.n	80058e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d004      	beq.n	80058e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a39      	ldr	r2, [pc, #228]	; (80059d4 <DMA_SetConfig+0x21c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d04a      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a38      	ldr	r2, [pc, #224]	; (80059d8 <DMA_SetConfig+0x220>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d045      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a36      	ldr	r2, [pc, #216]	; (80059dc <DMA_SetConfig+0x224>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d040      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a35      	ldr	r2, [pc, #212]	; (80059e0 <DMA_SetConfig+0x228>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d03b      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a33      	ldr	r2, [pc, #204]	; (80059e4 <DMA_SetConfig+0x22c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d036      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a32      	ldr	r2, [pc, #200]	; (80059e8 <DMA_SetConfig+0x230>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d031      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a30      	ldr	r2, [pc, #192]	; (80059ec <DMA_SetConfig+0x234>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d02c      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a2f      	ldr	r2, [pc, #188]	; (80059f0 <DMA_SetConfig+0x238>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d027      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a2d      	ldr	r2, [pc, #180]	; (80059f4 <DMA_SetConfig+0x23c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d022      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a2c      	ldr	r2, [pc, #176]	; (80059f8 <DMA_SetConfig+0x240>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d01d      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a2a      	ldr	r2, [pc, #168]	; (80059fc <DMA_SetConfig+0x244>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d018      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a29      	ldr	r2, [pc, #164]	; (8005a00 <DMA_SetConfig+0x248>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d013      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a27      	ldr	r2, [pc, #156]	; (8005a04 <DMA_SetConfig+0x24c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00e      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a26      	ldr	r2, [pc, #152]	; (8005a08 <DMA_SetConfig+0x250>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d009      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a24      	ldr	r2, [pc, #144]	; (8005a0c <DMA_SetConfig+0x254>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d004      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a23      	ldr	r2, [pc, #140]	; (8005a10 <DMA_SetConfig+0x258>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d101      	bne.n	800598c <DMA_SetConfig+0x1d4>
 8005988:	2301      	movs	r3, #1
 800598a:	e000      	b.n	800598e <DMA_SetConfig+0x1d6>
 800598c:	2300      	movs	r3, #0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d059      	beq.n	8005a46 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005996:	f003 031f 	and.w	r3, r3, #31
 800599a:	223f      	movs	r2, #63	; 0x3f
 800599c:	409a      	lsls	r2, r3
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b40      	cmp	r3, #64	; 0x40
 80059c0:	d138      	bne.n	8005a34 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80059d2:	e086      	b.n	8005ae2 <DMA_SetConfig+0x32a>
 80059d4:	40020010 	.word	0x40020010
 80059d8:	40020028 	.word	0x40020028
 80059dc:	40020040 	.word	0x40020040
 80059e0:	40020058 	.word	0x40020058
 80059e4:	40020070 	.word	0x40020070
 80059e8:	40020088 	.word	0x40020088
 80059ec:	400200a0 	.word	0x400200a0
 80059f0:	400200b8 	.word	0x400200b8
 80059f4:	40020410 	.word	0x40020410
 80059f8:	40020428 	.word	0x40020428
 80059fc:	40020440 	.word	0x40020440
 8005a00:	40020458 	.word	0x40020458
 8005a04:	40020470 	.word	0x40020470
 8005a08:	40020488 	.word	0x40020488
 8005a0c:	400204a0 	.word	0x400204a0
 8005a10:	400204b8 	.word	0x400204b8
 8005a14:	58025408 	.word	0x58025408
 8005a18:	5802541c 	.word	0x5802541c
 8005a1c:	58025430 	.word	0x58025430
 8005a20:	58025444 	.word	0x58025444
 8005a24:	58025458 	.word	0x58025458
 8005a28:	5802546c 	.word	0x5802546c
 8005a2c:	58025480 	.word	0x58025480
 8005a30:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	60da      	str	r2, [r3, #12]
}
 8005a44:	e04d      	b.n	8005ae2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a29      	ldr	r2, [pc, #164]	; (8005af0 <DMA_SetConfig+0x338>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d022      	beq.n	8005a96 <DMA_SetConfig+0x2de>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a27      	ldr	r2, [pc, #156]	; (8005af4 <DMA_SetConfig+0x33c>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d01d      	beq.n	8005a96 <DMA_SetConfig+0x2de>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a26      	ldr	r2, [pc, #152]	; (8005af8 <DMA_SetConfig+0x340>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d018      	beq.n	8005a96 <DMA_SetConfig+0x2de>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a24      	ldr	r2, [pc, #144]	; (8005afc <DMA_SetConfig+0x344>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d013      	beq.n	8005a96 <DMA_SetConfig+0x2de>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a23      	ldr	r2, [pc, #140]	; (8005b00 <DMA_SetConfig+0x348>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d00e      	beq.n	8005a96 <DMA_SetConfig+0x2de>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a21      	ldr	r2, [pc, #132]	; (8005b04 <DMA_SetConfig+0x34c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d009      	beq.n	8005a96 <DMA_SetConfig+0x2de>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a20      	ldr	r2, [pc, #128]	; (8005b08 <DMA_SetConfig+0x350>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d004      	beq.n	8005a96 <DMA_SetConfig+0x2de>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1e      	ldr	r2, [pc, #120]	; (8005b0c <DMA_SetConfig+0x354>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d101      	bne.n	8005a9a <DMA_SetConfig+0x2e2>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <DMA_SetConfig+0x2e4>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d020      	beq.n	8005ae2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa4:	f003 031f 	and.w	r3, r3, #31
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	409a      	lsls	r2, r3
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	2b40      	cmp	r3, #64	; 0x40
 8005abe:	d108      	bne.n	8005ad2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	60da      	str	r2, [r3, #12]
}
 8005ad0:	e007      	b.n	8005ae2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	60da      	str	r2, [r3, #12]
}
 8005ae2:	bf00      	nop
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	58025408 	.word	0x58025408
 8005af4:	5802541c 	.word	0x5802541c
 8005af8:	58025430 	.word	0x58025430
 8005afc:	58025444 	.word	0x58025444
 8005b00:	58025458 	.word	0x58025458
 8005b04:	5802546c 	.word	0x5802546c
 8005b08:	58025480 	.word	0x58025480
 8005b0c:	58025494 	.word	0x58025494

08005b10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a42      	ldr	r2, [pc, #264]	; (8005c28 <DMA_CalcBaseAndBitshift+0x118>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d04a      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a41      	ldr	r2, [pc, #260]	; (8005c2c <DMA_CalcBaseAndBitshift+0x11c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d045      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a3f      	ldr	r2, [pc, #252]	; (8005c30 <DMA_CalcBaseAndBitshift+0x120>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d040      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a3e      	ldr	r2, [pc, #248]	; (8005c34 <DMA_CalcBaseAndBitshift+0x124>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d03b      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a3c      	ldr	r2, [pc, #240]	; (8005c38 <DMA_CalcBaseAndBitshift+0x128>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d036      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a3b      	ldr	r2, [pc, #236]	; (8005c3c <DMA_CalcBaseAndBitshift+0x12c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d031      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a39      	ldr	r2, [pc, #228]	; (8005c40 <DMA_CalcBaseAndBitshift+0x130>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d02c      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a38      	ldr	r2, [pc, #224]	; (8005c44 <DMA_CalcBaseAndBitshift+0x134>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d027      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a36      	ldr	r2, [pc, #216]	; (8005c48 <DMA_CalcBaseAndBitshift+0x138>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d022      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a35      	ldr	r2, [pc, #212]	; (8005c4c <DMA_CalcBaseAndBitshift+0x13c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d01d      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a33      	ldr	r2, [pc, #204]	; (8005c50 <DMA_CalcBaseAndBitshift+0x140>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d018      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a32      	ldr	r2, [pc, #200]	; (8005c54 <DMA_CalcBaseAndBitshift+0x144>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d013      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a30      	ldr	r2, [pc, #192]	; (8005c58 <DMA_CalcBaseAndBitshift+0x148>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00e      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a2f      	ldr	r2, [pc, #188]	; (8005c5c <DMA_CalcBaseAndBitshift+0x14c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d009      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a2d      	ldr	r2, [pc, #180]	; (8005c60 <DMA_CalcBaseAndBitshift+0x150>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a2c      	ldr	r2, [pc, #176]	; (8005c64 <DMA_CalcBaseAndBitshift+0x154>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d101      	bne.n	8005bbc <DMA_CalcBaseAndBitshift+0xac>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e000      	b.n	8005bbe <DMA_CalcBaseAndBitshift+0xae>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d024      	beq.n	8005c0c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	3b10      	subs	r3, #16
 8005bca:	4a27      	ldr	r2, [pc, #156]	; (8005c68 <DMA_CalcBaseAndBitshift+0x158>)
 8005bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd0:	091b      	lsrs	r3, r3, #4
 8005bd2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	4a24      	ldr	r2, [pc, #144]	; (8005c6c <DMA_CalcBaseAndBitshift+0x15c>)
 8005bdc:	5cd3      	ldrb	r3, [r2, r3]
 8005bde:	461a      	mov	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d908      	bls.n	8005bfc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	4b1f      	ldr	r3, [pc, #124]	; (8005c70 <DMA_CalcBaseAndBitshift+0x160>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	1d1a      	adds	r2, r3, #4
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	659a      	str	r2, [r3, #88]	; 0x58
 8005bfa:	e00d      	b.n	8005c18 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	4b1b      	ldr	r3, [pc, #108]	; (8005c70 <DMA_CalcBaseAndBitshift+0x160>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6593      	str	r3, [r2, #88]	; 0x58
 8005c0a:	e005      	b.n	8005c18 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	40020010 	.word	0x40020010
 8005c2c:	40020028 	.word	0x40020028
 8005c30:	40020040 	.word	0x40020040
 8005c34:	40020058 	.word	0x40020058
 8005c38:	40020070 	.word	0x40020070
 8005c3c:	40020088 	.word	0x40020088
 8005c40:	400200a0 	.word	0x400200a0
 8005c44:	400200b8 	.word	0x400200b8
 8005c48:	40020410 	.word	0x40020410
 8005c4c:	40020428 	.word	0x40020428
 8005c50:	40020440 	.word	0x40020440
 8005c54:	40020458 	.word	0x40020458
 8005c58:	40020470 	.word	0x40020470
 8005c5c:	40020488 	.word	0x40020488
 8005c60:	400204a0 	.word	0x400204a0
 8005c64:	400204b8 	.word	0x400204b8
 8005c68:	aaaaaaab 	.word	0xaaaaaaab
 8005c6c:	0800aea0 	.word	0x0800aea0
 8005c70:	fffffc00 	.word	0xfffffc00

08005c74 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d120      	bne.n	8005cca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d858      	bhi.n	8005d42 <DMA_CheckFifoParam+0xce>
 8005c90:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <DMA_CheckFifoParam+0x24>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005ca9 	.word	0x08005ca9
 8005c9c:	08005cbb 	.word	0x08005cbb
 8005ca0:	08005ca9 	.word	0x08005ca9
 8005ca4:	08005d43 	.word	0x08005d43
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d048      	beq.n	8005d46 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cb8:	e045      	b.n	8005d46 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cc2:	d142      	bne.n	8005d4a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cc8:	e03f      	b.n	8005d4a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd2:	d123      	bne.n	8005d1c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d838      	bhi.n	8005d4e <DMA_CheckFifoParam+0xda>
 8005cdc:	a201      	add	r2, pc, #4	; (adr r2, 8005ce4 <DMA_CheckFifoParam+0x70>)
 8005cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce2:	bf00      	nop
 8005ce4:	08005cf5 	.word	0x08005cf5
 8005ce8:	08005cfb 	.word	0x08005cfb
 8005cec:	08005cf5 	.word	0x08005cf5
 8005cf0:	08005d0d 	.word	0x08005d0d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	73fb      	strb	r3, [r7, #15]
        break;
 8005cf8:	e030      	b.n	8005d5c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d025      	beq.n	8005d52 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d0a:	e022      	b.n	8005d52 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d14:	d11f      	bne.n	8005d56 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d1a:	e01c      	b.n	8005d56 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d902      	bls.n	8005d2a <DMA_CheckFifoParam+0xb6>
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d003      	beq.n	8005d30 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005d28:	e018      	b.n	8005d5c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	73fb      	strb	r3, [r7, #15]
        break;
 8005d2e:	e015      	b.n	8005d5c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00e      	beq.n	8005d5a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8005d40:	e00b      	b.n	8005d5a <DMA_CheckFifoParam+0xe6>
        break;
 8005d42:	bf00      	nop
 8005d44:	e00a      	b.n	8005d5c <DMA_CheckFifoParam+0xe8>
        break;
 8005d46:	bf00      	nop
 8005d48:	e008      	b.n	8005d5c <DMA_CheckFifoParam+0xe8>
        break;
 8005d4a:	bf00      	nop
 8005d4c:	e006      	b.n	8005d5c <DMA_CheckFifoParam+0xe8>
        break;
 8005d4e:	bf00      	nop
 8005d50:	e004      	b.n	8005d5c <DMA_CheckFifoParam+0xe8>
        break;
 8005d52:	bf00      	nop
 8005d54:	e002      	b.n	8005d5c <DMA_CheckFifoParam+0xe8>
        break;
 8005d56:	bf00      	nop
 8005d58:	e000      	b.n	8005d5c <DMA_CheckFifoParam+0xe8>
    break;
 8005d5a:	bf00      	nop
    }
  }

  return status;
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop

08005d6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a38      	ldr	r2, [pc, #224]	; (8005e60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d022      	beq.n	8005dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a36      	ldr	r2, [pc, #216]	; (8005e64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d01d      	beq.n	8005dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a35      	ldr	r2, [pc, #212]	; (8005e68 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d018      	beq.n	8005dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a33      	ldr	r2, [pc, #204]	; (8005e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d013      	beq.n	8005dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a32      	ldr	r2, [pc, #200]	; (8005e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00e      	beq.n	8005dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a30      	ldr	r2, [pc, #192]	; (8005e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d009      	beq.n	8005dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a2f      	ldr	r2, [pc, #188]	; (8005e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d004      	beq.n	8005dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a2d      	ldr	r2, [pc, #180]	; (8005e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d101      	bne.n	8005dce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e000      	b.n	8005dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01a      	beq.n	8005e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	3b08      	subs	r3, #8
 8005ddc:	4a28      	ldr	r2, [pc, #160]	; (8005e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005dde:	fba2 2303 	umull	r2, r3, r2, r3
 8005de2:	091b      	lsrs	r3, r3, #4
 8005de4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4b26      	ldr	r3, [pc, #152]	; (8005e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	461a      	mov	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a24      	ldr	r2, [pc, #144]	; (8005e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005df8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f003 031f 	and.w	r3, r3, #31
 8005e00:	2201      	movs	r2, #1
 8005e02:	409a      	lsls	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005e08:	e024      	b.n	8005e54 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	3b10      	subs	r3, #16
 8005e12:	4a1e      	ldr	r2, [pc, #120]	; (8005e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005e14:	fba2 2303 	umull	r2, r3, r2, r3
 8005e18:	091b      	lsrs	r3, r3, #4
 8005e1a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4a1c      	ldr	r2, [pc, #112]	; (8005e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d806      	bhi.n	8005e32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4a1b      	ldr	r2, [pc, #108]	; (8005e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d902      	bls.n	8005e32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	3308      	adds	r3, #8
 8005e30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	4b18      	ldr	r3, [pc, #96]	; (8005e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a16      	ldr	r2, [pc, #88]	; (8005e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005e44:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f003 031f 	and.w	r3, r3, #31
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005e54:	bf00      	nop
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	58025408 	.word	0x58025408
 8005e64:	5802541c 	.word	0x5802541c
 8005e68:	58025430 	.word	0x58025430
 8005e6c:	58025444 	.word	0x58025444
 8005e70:	58025458 	.word	0x58025458
 8005e74:	5802546c 	.word	0x5802546c
 8005e78:	58025480 	.word	0x58025480
 8005e7c:	58025494 	.word	0x58025494
 8005e80:	cccccccd 	.word	0xcccccccd
 8005e84:	16009600 	.word	0x16009600
 8005e88:	58025880 	.word	0x58025880
 8005e8c:	aaaaaaab 	.word	0xaaaaaaab
 8005e90:	400204b8 	.word	0x400204b8
 8005e94:	4002040f 	.word	0x4002040f
 8005e98:	10008200 	.word	0x10008200
 8005e9c:	40020880 	.word	0x40020880

08005ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d04a      	beq.n	8005f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d847      	bhi.n	8005f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a25      	ldr	r2, [pc, #148]	; (8005f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d022      	beq.n	8005f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a24      	ldr	r2, [pc, #144]	; (8005f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d01d      	beq.n	8005f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a22      	ldr	r2, [pc, #136]	; (8005f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d018      	beq.n	8005f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a21      	ldr	r2, [pc, #132]	; (8005f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d013      	beq.n	8005f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a1f      	ldr	r2, [pc, #124]	; (8005f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d00e      	beq.n	8005f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1e      	ldr	r2, [pc, #120]	; (8005f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d009      	beq.n	8005f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a1c      	ldr	r2, [pc, #112]	; (8005f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d004      	beq.n	8005f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a1b      	ldr	r2, [pc, #108]	; (8005f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d101      	bne.n	8005f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e000      	b.n	8005f12 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005f10:	2300      	movs	r3, #0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4b17      	ldr	r3, [pc, #92]	; (8005f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	461a      	mov	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a15      	ldr	r2, [pc, #84]	; (8005f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005f28:	671a      	str	r2, [r3, #112]	; 0x70
 8005f2a:	e009      	b.n	8005f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4b14      	ldr	r3, [pc, #80]	; (8005f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005f30:	4413      	add	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	461a      	mov	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a11      	ldr	r2, [pc, #68]	; (8005f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005f3e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	2201      	movs	r2, #1
 8005f46:	409a      	lsls	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005f4c:	bf00      	nop
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	58025408 	.word	0x58025408
 8005f5c:	5802541c 	.word	0x5802541c
 8005f60:	58025430 	.word	0x58025430
 8005f64:	58025444 	.word	0x58025444
 8005f68:	58025458 	.word	0x58025458
 8005f6c:	5802546c 	.word	0x5802546c
 8005f70:	58025480 	.word	0x58025480
 8005f74:	58025494 	.word	0x58025494
 8005f78:	1600963f 	.word	0x1600963f
 8005f7c:	58025940 	.word	0x58025940
 8005f80:	1000823f 	.word	0x1000823f
 8005f84:	40020940 	.word	0x40020940

08005f88 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b098      	sub	sp, #96	; 0x60
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005f90:	4a84      	ldr	r2, [pc, #528]	; (80061a4 <HAL_FDCAN_Init+0x21c>)
 8005f92:	f107 030c 	add.w	r3, r7, #12
 8005f96:	4611      	mov	r1, r2
 8005f98:	224c      	movs	r2, #76	; 0x4c
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f004 ff30 	bl	800ae00 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e1c6      	b.n	8006338 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a7e      	ldr	r2, [pc, #504]	; (80061a8 <HAL_FDCAN_Init+0x220>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d106      	bne.n	8005fc2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d106      	bne.n	8005fdc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7fa fed6 	bl	8000d88 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0210 	bic.w	r2, r2, #16
 8005fea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fec:	f7fb f8e2 	bl	80011b4 <HAL_GetTick>
 8005ff0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005ff2:	e014      	b.n	800601e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005ff4:	f7fb f8de 	bl	80011b4 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b0a      	cmp	r3, #10
 8006000:	d90d      	bls.n	800601e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006008:	f043 0201 	orr.w	r2, r3, #1
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2203      	movs	r2, #3
 8006016:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e18c      	b.n	8006338 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b08      	cmp	r3, #8
 800602a:	d0e3      	beq.n	8005ff4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699a      	ldr	r2, [r3, #24]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800603c:	f7fb f8ba 	bl	80011b4 <HAL_GetTick>
 8006040:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006042:	e014      	b.n	800606e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006044:	f7fb f8b6 	bl	80011b4 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b0a      	cmp	r3, #10
 8006050:	d90d      	bls.n	800606e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006058:	f043 0201 	orr.w	r2, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2203      	movs	r2, #3
 8006066:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e164      	b.n	8006338 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d0e3      	beq.n	8006044 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699a      	ldr	r2, [r3, #24]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0202 	orr.w	r2, r2, #2
 800608a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	7c1b      	ldrb	r3, [r3, #16]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d108      	bne.n	80060a6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699a      	ldr	r2, [r3, #24]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060a2:	619a      	str	r2, [r3, #24]
 80060a4:	e007      	b.n	80060b6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	699a      	ldr	r2, [r3, #24]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060b4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	7c5b      	ldrb	r3, [r3, #17]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d108      	bne.n	80060d0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	699a      	ldr	r2, [r3, #24]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060cc:	619a      	str	r2, [r3, #24]
 80060ce:	e007      	b.n	80060e0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060de:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	7c9b      	ldrb	r3, [r3, #18]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d108      	bne.n	80060fa <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060f6:	619a      	str	r2, [r3, #24]
 80060f8:	e007      	b.n	800610a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	699a      	ldr	r2, [r3, #24]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006108:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	430a      	orrs	r2, r1
 800611e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699a      	ldr	r2, [r3, #24]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800612e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	691a      	ldr	r2, [r3, #16]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0210 	bic.w	r2, r2, #16
 800613e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d108      	bne.n	800615a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699a      	ldr	r2, [r3, #24]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0204 	orr.w	r2, r2, #4
 8006156:	619a      	str	r2, [r3, #24]
 8006158:	e030      	b.n	80061bc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d02c      	beq.n	80061bc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	2b02      	cmp	r3, #2
 8006168:	d020      	beq.n	80061ac <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	699a      	ldr	r2, [r3, #24]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006178:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	691a      	ldr	r2, [r3, #16]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f042 0210 	orr.w	r2, r2, #16
 8006188:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	2b03      	cmp	r3, #3
 8006190:	d114      	bne.n	80061bc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	699a      	ldr	r2, [r3, #24]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f042 0220 	orr.w	r2, r2, #32
 80061a0:	619a      	str	r2, [r3, #24]
 80061a2:	e00b      	b.n	80061bc <HAL_FDCAN_Init+0x234>
 80061a4:	0800ae44 	.word	0x0800ae44
 80061a8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0220 	orr.w	r2, r2, #32
 80061ba:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	3b01      	subs	r3, #1
 80061c2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80061cc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80061d4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	3b01      	subs	r3, #1
 80061de:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80061e4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80061e6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061f0:	d115      	bne.n	800621e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fc:	3b01      	subs	r3, #1
 80061fe:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006200:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006206:	3b01      	subs	r3, #1
 8006208:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800620a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	3b01      	subs	r3, #1
 8006214:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800621a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800621c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00a      	beq.n	800623c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006244:	4413      	add	r3, r2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d011      	beq.n	800626e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006252:	f023 0107 	bic.w	r1, r3, #7
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	3360      	adds	r3, #96	; 0x60
 800625e:	443b      	add	r3, r7
 8006260:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	2b00      	cmp	r3, #0
 8006274:	d011      	beq.n	800629a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800627e:	f023 0107 	bic.w	r1, r3, #7
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	3360      	adds	r3, #96	; 0x60
 800628a:	443b      	add	r3, r7
 800628c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d012      	beq.n	80062c8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80062aa:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	3360      	adds	r3, #96	; 0x60
 80062b6:	443b      	add	r3, r7
 80062b8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80062bc:	011a      	lsls	r2, r3, #4
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d012      	beq.n	80062f6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80062d8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	3360      	adds	r3, #96	; 0x60
 80062e4:	443b      	add	r3, r7
 80062e6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80062ea:	021a      	lsls	r2, r3, #8
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a11      	ldr	r2, [pc, #68]	; (8006340 <HAL_FDCAN_Init+0x3b8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d107      	bne.n	8006310 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f022 0203 	bic.w	r2, r2, #3
 800630e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fdf9 	bl	8006f20 <FDCAN_CalcultateRamBlockAddresses>
 800632e:	4603      	mov	r3, r0
 8006330:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006334:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006338:	4618      	mov	r0, r3
 800633a:	3760      	adds	r7, #96	; 0x60
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	4000a000 	.word	0x4000a000

08006344 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006354:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d002      	beq.n	8006362 <HAL_FDCAN_ConfigFilter+0x1e>
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	2b02      	cmp	r3, #2
 8006360:	d157      	bne.n	8006412 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d12b      	bne.n	80063c2 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	2b07      	cmp	r3, #7
 8006370:	d10d      	bne.n	800638e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800637e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006384:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8006386:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	e00e      	b.n	80063ac <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800639a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80063a2:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80063a8:	4313      	orrs	r3, r2
 80063aa:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	e025      	b.n	800640e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	075a      	lsls	r2, r3, #29
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	2b07      	cmp	r3, #7
 80063d6:	d103      	bne.n	80063e0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	613b      	str	r3, [r7, #16]
 80063de:	e006      	b.n	80063ee <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	079a      	lsls	r2, r3, #30
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	00db      	lsls	r3, r3, #3
 80063f8:	4413      	add	r3, r2
 80063fa:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	3304      	adds	r3, #4
 8006406:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	e008      	b.n	8006424 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006418:	f043 0202 	orr.w	r2, r3, #2
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
  }
}
 8006424:	4618      	mov	r0, r3
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b01      	cmp	r3, #1
 8006442:	d111      	bne.n	8006468 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	699a      	ldr	r2, [r3, #24]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 0201 	bic.w	r2, r2, #1
 800645a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	e008      	b.n	800647a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800646e:	f043 0204 	orr.w	r2, r3, #4
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
  }
}
 800647a:	4618      	mov	r0, r3
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b086      	sub	sp, #24
 800648a:	af00      	add	r7, sp, #0
 800648c:	60f8      	str	r0, [r7, #12]
 800648e:	60b9      	str	r1, [r7, #8]
 8006490:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b02      	cmp	r3, #2
 800649c:	d141      	bne.n	8006522 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80064a6:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d109      	bne.n	80064c2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064b4:	f043 0220 	orr.w	r2, r3, #32
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e038      	b.n	8006534 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80064ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d009      	beq.n	80064e6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e026      	b.n	8006534 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80064ee:	0c1b      	lsrs	r3, r3, #16
 80064f0:	f003 031f 	and.w	r3, r3, #31
 80064f4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	68b9      	ldr	r1, [r7, #8]
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 fe95 	bl	800722c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2101      	movs	r1, #1
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	fa01 f202 	lsl.w	r2, r1, r2
 800650e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006512:	2201      	movs	r2, #1
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	409a      	lsls	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	e008      	b.n	8006534 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006528:	f043 0208 	orr.w	r2, r3, #8
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
  }
}
 8006534:	4618      	mov	r0, r3
 8006536:	3718      	adds	r7, #24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800653c:	b480      	push	{r7}
 800653e:	b08b      	sub	sp, #44	; 0x2c
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800654a:	2300      	movs	r3, #0
 800654c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006554:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8006556:	7efb      	ldrb	r3, [r7, #27]
 8006558:	2b02      	cmp	r3, #2
 800655a:	f040 814b 	bne.w	80067f4 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2b40      	cmp	r3, #64	; 0x40
 8006562:	d14d      	bne.n	8006600 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800656c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d109      	bne.n	8006588 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800657a:	f043 0220 	orr.w	r2, r3, #32
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e13e      	b.n	8006806 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006594:	2b00      	cmp	r3, #0
 8006596:	d109      	bne.n	80065ac <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800659e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e12c      	b.n	8006806 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80065b4:	0e1b      	lsrs	r3, r3, #24
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d10b      	bne.n	80065d6 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065c6:	0fdb      	lsrs	r3, r3, #31
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065d0:	d101      	bne.n	80065d6 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80065d2:	2301      	movs	r3, #1
 80065d4:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80065de:	0a1b      	lsrs	r3, r3, #8
 80065e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065e4:	69fa      	ldr	r2, [r7, #28]
 80065e6:	4413      	add	r3, r2
 80065e8:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f2:	69f9      	ldr	r1, [r7, #28]
 80065f4:	fb01 f303 	mul.w	r3, r1, r3
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24
 80065fe:	e069      	b.n	80066d4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b41      	cmp	r3, #65	; 0x41
 8006604:	d14d      	bne.n	80066a2 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800660e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d109      	bne.n	800662a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800661c:	f043 0220 	orr.w	r2, r3, #32
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e0ed      	b.n	8006806 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006636:	2b00      	cmp	r3, #0
 8006638:	d109      	bne.n	800664e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006640:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e0db      	b.n	8006806 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006656:	0e1b      	lsrs	r3, r3, #24
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b01      	cmp	r3, #1
 800665e:	d10b      	bne.n	8006678 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006668:	0fdb      	lsrs	r3, r3, #31
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006672:	d101      	bne.n	8006678 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006674:	2301      	movs	r3, #1
 8006676:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006680:	0a1b      	lsrs	r3, r3, #8
 8006682:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006686:	69fa      	ldr	r2, [r7, #28]
 8006688:	4413      	add	r3, r2
 800668a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006694:	69f9      	ldr	r1, [r7, #28]
 8006696:	fb01 f303 	mul.w	r3, r1, r3
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
 80066a0:	e018      	b.n	80066d4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d309      	bcc.n	80066c0 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066b2:	f043 0220 	orr.w	r2, r3, #32
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e0a2      	b.n	8006806 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c8:	68b9      	ldr	r1, [r7, #8]
 80066ca:	fb01 f303 	mul.w	r3, r1, r3
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d107      	bne.n	80066f8 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	0c9b      	lsrs	r3, r3, #18
 80066ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	e005      	b.n	8006704 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	3304      	adds	r3, #4
 8006720:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	b29a      	uxth	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	0e1b      	lsrs	r3, r3, #24
 8006756:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	0fda      	lsrs	r2, r3, #31
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	3304      	adds	r3, #4
 800676c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8006772:	2300      	movs	r3, #0
 8006774:	623b      	str	r3, [r7, #32]
 8006776:	e00a      	b.n	800678e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	441a      	add	r2, r3
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	440b      	add	r3, r1
 8006784:	7812      	ldrb	r2, [r2, #0]
 8006786:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8006788:	6a3b      	ldr	r3, [r7, #32]
 800678a:	3301      	adds	r3, #1
 800678c:	623b      	str	r3, [r7, #32]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	0c1b      	lsrs	r3, r3, #16
 8006794:	4a1f      	ldr	r2, [pc, #124]	; (8006814 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8006796:	5cd3      	ldrb	r3, [r2, r3]
 8006798:	461a      	mov	r2, r3
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	4293      	cmp	r3, r2
 800679e:	d3eb      	bcc.n	8006778 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2b40      	cmp	r3, #64	; 0x40
 80067a4:	d105      	bne.n	80067b2 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69fa      	ldr	r2, [r7, #28]
 80067ac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80067b0:	e01e      	b.n	80067f0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2b41      	cmp	r3, #65	; 0x41
 80067b6:	d105      	bne.n	80067c4 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	69fa      	ldr	r2, [r7, #28]
 80067be:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80067c2:	e015      	b.n	80067f0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2b1f      	cmp	r3, #31
 80067c8:	d808      	bhi.n	80067dc <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2101      	movs	r1, #1
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	fa01 f202 	lsl.w	r2, r1, r2
 80067d6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80067da:	e009      	b.n	80067f0 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f003 021f 	and.w	r2, r3, #31
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2101      	movs	r1, #1
 80067e8:	fa01 f202 	lsl.w	r2, r1, r2
 80067ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	e008      	b.n	8006806 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067fa:	f043 0208 	orr.w	r2, r3, #8
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
  }
}
 8006806:	4618      	mov	r0, r3
 8006808:	372c      	adds	r7, #44	; 0x2c
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	0800aea8 	.word	0x0800aea8

08006818 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800682a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800682c:	7dfb      	ldrb	r3, [r7, #23]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d002      	beq.n	8006838 <HAL_FDCAN_ActivateNotification+0x20>
 8006832:	7dfb      	ldrb	r3, [r7, #23]
 8006834:	2b02      	cmp	r3, #2
 8006836:	d155      	bne.n	80068e4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	4013      	ands	r3, r2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d108      	bne.n	8006858 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f042 0201 	orr.w	r2, r2, #1
 8006854:	65da      	str	r2, [r3, #92]	; 0x5c
 8006856:	e014      	b.n	8006882 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	4013      	ands	r3, r2
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	429a      	cmp	r2, r3
 8006866:	d108      	bne.n	800687a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0202 	orr.w	r2, r2, #2
 8006876:	65da      	str	r2, [r3, #92]	; 0x5c
 8006878:	e003      	b.n	8006882 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2203      	movs	r2, #3
 8006880:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006888:	2b00      	cmp	r3, #0
 800688a:	d009      	beq.n	80068a0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	430a      	orrs	r2, r1
 800689c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d009      	beq.n	80068be <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	4b0f      	ldr	r3, [pc, #60]	; (8006904 <HAL_FDCAN_ActivateNotification+0xec>)
 80068c8:	4013      	ands	r3, r2
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	6812      	ldr	r2, [r2, #0]
 80068ce:	430b      	orrs	r3, r1
 80068d0:	6553      	str	r3, [r2, #84]	; 0x54
 80068d2:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <HAL_FDCAN_ActivateNotification+0xf0>)
 80068d4:	695a      	ldr	r2, [r3, #20]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	0f9b      	lsrs	r3, r3, #30
 80068da:	490b      	ldr	r1, [pc, #44]	; (8006908 <HAL_FDCAN_ActivateNotification+0xf0>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	e008      	b.n	80068f6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068ea:	f043 0202 	orr.w	r2, r3, #2
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
  }
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	371c      	adds	r7, #28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	3fcfffff 	.word	0x3fcfffff
 8006908:	4000a800 	.word	0x4000a800

0800690c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b096      	sub	sp, #88	; 0x58
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8006914:	4b9a      	ldr	r3, [pc, #616]	; (8006b80 <HAL_FDCAN_IRQHandler+0x274>)
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	079b      	lsls	r3, r3, #30
 800691a:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800691c:	4b98      	ldr	r3, [pc, #608]	; (8006b80 <HAL_FDCAN_IRQHandler+0x274>)
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	079b      	lsls	r3, r3, #30
 8006922:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006924:	4013      	ands	r3, r2
 8006926:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800692e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006932:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800693c:	4013      	ands	r3, r2
 800693e:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006946:	f003 030f 	and.w	r3, r3, #15
 800694a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006952:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006954:	4013      	ands	r3, r2
 8006956:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006962:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800696c:	4013      	ands	r3, r2
 800696e:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006976:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800697a:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006984:	4013      	ands	r3, r2
 8006986:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8006992:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800699c:	4013      	ands	r3, r2
 800699e:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80069b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b2:	0a1b      	lsrs	r3, r3, #8
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d010      	beq.n	80069de <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80069bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069be:	0a1b      	lsrs	r3, r3, #8
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069d0:	651a      	str	r2, [r3, #80]	; 0x50
 80069d2:	4b6b      	ldr	r3, [pc, #428]	; (8006b80 <HAL_FDCAN_IRQHandler+0x274>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fa54 	bl	8006e86 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80069de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069e0:	0a9b      	lsrs	r3, r3, #10
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d01d      	beq.n	8006a26 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80069ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ec:	0a9b      	lsrs	r3, r3, #10
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d017      	beq.n	8006a26 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80069fe:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a16:	651a      	str	r2, [r3, #80]	; 0x50
 8006a18:	4b59      	ldr	r3, [pc, #356]	; (8006b80 <HAL_FDCAN_IRQHandler+0x274>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006a1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fa07 	bl	8006e34 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8006a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00d      	beq.n	8006a48 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a32:	4b54      	ldr	r3, [pc, #336]	; (8006b84 <HAL_FDCAN_IRQHandler+0x278>)
 8006a34:	400b      	ands	r3, r1
 8006a36:	6513      	str	r3, [r2, #80]	; 0x50
 8006a38:	4a51      	ldr	r2, [pc, #324]	; (8006b80 <HAL_FDCAN_IRQHandler+0x274>)
 8006a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a3c:	0f9b      	lsrs	r3, r3, #30
 8006a3e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8006a40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f9c0 	bl	8006dc8 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00d      	beq.n	8006a6a <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a54:	4b4b      	ldr	r3, [pc, #300]	; (8006b84 <HAL_FDCAN_IRQHandler+0x278>)
 8006a56:	400b      	ands	r3, r1
 8006a58:	6513      	str	r3, [r2, #80]	; 0x50
 8006a5a:	4a49      	ldr	r2, [pc, #292]	; (8006b80 <HAL_FDCAN_IRQHandler+0x274>)
 8006a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a5e:	0f9b      	lsrs	r3, r3, #30
 8006a60:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006a62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f9ba 	bl	8006dde <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00d      	beq.n	8006a8c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006a76:	4b43      	ldr	r3, [pc, #268]	; (8006b84 <HAL_FDCAN_IRQHandler+0x278>)
 8006a78:	400b      	ands	r3, r1
 8006a7a:	6513      	str	r3, [r2, #80]	; 0x50
 8006a7c:	4a40      	ldr	r2, [pc, #256]	; (8006b80 <HAL_FDCAN_IRQHandler+0x274>)
 8006a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a80:	0f9b      	lsrs	r3, r3, #30
 8006a82:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006a84:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7f9 fc50 	bl	800032c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00d      	beq.n	8006aae <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006a98:	4b3a      	ldr	r3, [pc, #232]	; (8006b84 <HAL_FDCAN_IRQHandler+0x278>)
 8006a9a:	400b      	ands	r3, r1
 8006a9c:	6513      	str	r3, [r2, #80]	; 0x50
 8006a9e:	4a38      	ldr	r2, [pc, #224]	; (8006b80 <HAL_FDCAN_IRQHandler+0x274>)
 8006aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aa2:	0f9b      	lsrs	r3, r3, #30
 8006aa4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006aa6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f9a3 	bl	8006df4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab0:	0adb      	lsrs	r3, r3, #11
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d010      	beq.n	8006adc <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abc:	0adb      	lsrs	r3, r3, #11
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00a      	beq.n	8006adc <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ace:	651a      	str	r2, [r3, #80]	; 0x50
 8006ad0:	4b2b      	ldr	r3, [pc, #172]	; (8006b80 <HAL_FDCAN_IRQHandler+0x274>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f997 	bl	8006e0a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8006adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ade:	0a5b      	lsrs	r3, r3, #9
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01d      	beq.n	8006b24 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aea:	0a5b      	lsrs	r3, r3, #9
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d017      	beq.n	8006b24 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006afc:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b08:	4013      	ands	r3, r2
 8006b0a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b14:	651a      	str	r2, [r3, #80]	; 0x50
 8006b16:	4b1a      	ldr	r3, [pc, #104]	; (8006b80 <HAL_FDCAN_IRQHandler+0x274>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006b1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f97d 	bl	8006e1e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b26:	0cdb      	lsrs	r3, r3, #19
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d010      	beq.n	8006b52 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	0cdb      	lsrs	r3, r3, #19
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00a      	beq.n	8006b52 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006b44:	651a      	str	r2, [r3, #80]	; 0x50
 8006b46:	4b0e      	ldr	r3, [pc, #56]	; (8006b80 <HAL_FDCAN_IRQHandler+0x274>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f97c 	bl	8006e4a <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b54:	0c1b      	lsrs	r3, r3, #16
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d016      	beq.n	8006b8c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b60:	0c1b      	lsrs	r3, r3, #16
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d010      	beq.n	8006b8c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006b72:	651a      	str	r2, [r3, #80]	; 0x50
 8006b74:	4b02      	ldr	r3, [pc, #8]	; (8006b80 <HAL_FDCAN_IRQHandler+0x274>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	e004      	b.n	8006b88 <HAL_FDCAN_IRQHandler+0x27c>
 8006b7e:	bf00      	nop
 8006b80:	4000a800 	.word	0x4000a800
 8006b84:	3fcfffff 	.word	0x3fcfffff
 8006b88:	f000 f969 	bl	8006e5e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b8e:	0c9b      	lsrs	r3, r3, #18
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d010      	beq.n	8006bba <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9a:	0c9b      	lsrs	r3, r3, #18
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00a      	beq.n	8006bba <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006bac:	651a      	str	r2, [r3, #80]	; 0x50
 8006bae:	4b83      	ldr	r3, [pc, #524]	; (8006dbc <HAL_FDCAN_IRQHandler+0x4b0>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f95c 	bl	8006e72 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bbc:	0c5b      	lsrs	r3, r3, #17
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d015      	beq.n	8006bf2 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc8:	0c5b      	lsrs	r3, r3, #17
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00f      	beq.n	8006bf2 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006bda:	651a      	str	r2, [r3, #80]	; 0x50
 8006bdc:	4b77      	ldr	r3, [pc, #476]	; (8006dbc <HAL_FDCAN_IRQHandler+0x4b0>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006be8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00d      	beq.n	8006c14 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bfe:	4b70      	ldr	r3, [pc, #448]	; (8006dc0 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006c00:	400b      	ands	r3, r1
 8006c02:	6513      	str	r3, [r2, #80]	; 0x50
 8006c04:	4a6d      	ldr	r2, [pc, #436]	; (8006dbc <HAL_FDCAN_IRQHandler+0x4b0>)
 8006c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c08:	0f9b      	lsrs	r3, r3, #30
 8006c0a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006c0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f94d 	bl	8006eae <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d011      	beq.n	8006c3e <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c20:	4b67      	ldr	r3, [pc, #412]	; (8006dc0 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006c22:	400b      	ands	r3, r1
 8006c24:	6513      	str	r3, [r2, #80]	; 0x50
 8006c26:	4a65      	ldr	r2, [pc, #404]	; (8006dbc <HAL_FDCAN_IRQHandler+0x4b0>)
 8006c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c2a:	0f9b      	lsrs	r3, r3, #30
 8006c2c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c36:	431a      	orrs	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a60      	ldr	r2, [pc, #384]	; (8006dc4 <HAL_FDCAN_IRQHandler+0x4b8>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	f040 80ac 	bne.w	8006da2 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f003 0303 	and.w	r3, r3, #3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 80a4 	beq.w	8006da2 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	f003 030f 	and.w	r3, r3, #15
 8006c64:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c6e:	4013      	ands	r3, r2
 8006c70:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c7c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c86:	4013      	ands	r3, r2
 8006c88:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006c94:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8006cac:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	6a3a      	ldr	r2, [r7, #32]
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8006cc4:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	69fa      	ldr	r2, [r7, #28]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d007      	beq.n	8006cf8 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cee:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006cf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f8e6 	bl	8006ec4 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d007      	beq.n	8006d0e <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d04:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8006d06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f8e6 	bl	8006eda <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	099b      	lsrs	r3, r3, #6
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d01a      	beq.n	8006d50 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	099b      	lsrs	r3, r3, #6
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d014      	beq.n	8006d50 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2c:	0c1b      	lsrs	r3, r3, #16
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d3c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	2240      	movs	r2, #64	; 0x40
 8006d44:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	6939      	ldr	r1, [r7, #16]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f8d0 	bl	8006ef0 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d007      	beq.n	8006d66 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8006d5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f8d1 	bl	8006f08 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00b      	beq.n	8006d84 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	6a3a      	ldr	r2, [r7, #32]
 8006d72:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00b      	beq.n	8006da2 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	69fa      	ldr	r2, [r7, #28]
 8006d90:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f874 	bl	8006e9a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006db2:	bf00      	nop
 8006db4:	3758      	adds	r7, #88	; 0x58
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	4000a800 	.word	0x4000a800
 8006dc0:	3fcfffff 	.word	0x3fcfffff
 8006dc4:	4000a000 	.word	0x4000a000

08006dc8 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8006dd2:	bf00      	nop
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b083      	sub	sp, #12
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006e12:	bf00      	nop
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006e3e:	bf00      	nop
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006e66:	bf00      	nop
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006e7a:	bf00      	nop
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b083      	sub	sp, #12
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006e8e:	bf00      	nop
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006ea2:	bf00      	nop
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8006ece:	bf00      	nop
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b083      	sub	sp, #12
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006efc:	bf00      	nop
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8006f12:	bf00      	nop
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
	...

08006f20 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006f36:	4ba7      	ldr	r3, [pc, #668]	; (80071d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f38:	4013      	ands	r3, r2
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	0091      	lsls	r1, r2, #2
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	6812      	ldr	r2, [r2, #0]
 8006f42:	430b      	orrs	r3, r1
 8006f44:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f50:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f58:	041a      	lsls	r2, r3, #16
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006f76:	4b97      	ldr	r3, [pc, #604]	; (80071d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f78:	4013      	ands	r3, r2
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	0091      	lsls	r1, r2, #2
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	6812      	ldr	r2, [r2, #0]
 8006f82:	430b      	orrs	r3, r1
 8006f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f90:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f98:	041a      	lsls	r2, r3, #16
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa8:	005b      	lsls	r3, r3, #1
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	4413      	add	r3, r2
 8006fae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006fb8:	4b86      	ldr	r3, [pc, #536]	; (80071d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006fba:	4013      	ands	r3, r2
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	0091      	lsls	r1, r2, #2
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	6812      	ldr	r2, [r2, #0]
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006fd2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	041a      	lsls	r2, r3, #16
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006fee:	fb02 f303 	mul.w	r3, r2, r3
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007000:	4b74      	ldr	r3, [pc, #464]	; (80071d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007002:	4013      	ands	r3, r2
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	0091      	lsls	r1, r2, #2
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	6812      	ldr	r2, [r2, #0]
 800700c:	430b      	orrs	r3, r1
 800700e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800701a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007022:	041a      	lsls	r2, r3, #16
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	430a      	orrs	r2, r1
 800702a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007036:	fb02 f303 	mul.w	r3, r2, r3
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	4413      	add	r3, r2
 800703e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007048:	4b62      	ldr	r3, [pc, #392]	; (80071d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800704a:	4013      	ands	r3, r2
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	0091      	lsls	r1, r2, #2
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	6812      	ldr	r2, [r2, #0]
 8007054:	430b      	orrs	r3, r1
 8007056:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007062:	fb02 f303 	mul.w	r3, r2, r3
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	4413      	add	r3, r2
 800706a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007074:	4b57      	ldr	r3, [pc, #348]	; (80071d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007076:	4013      	ands	r3, r2
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	0091      	lsls	r1, r2, #2
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	6812      	ldr	r2, [r2, #0]
 8007080:	430b      	orrs	r3, r1
 8007082:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800708e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007096:	041a      	lsls	r2, r3, #16
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a6:	005b      	lsls	r3, r3, #1
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	4413      	add	r3, r2
 80070ac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80070b6:	4b47      	ldr	r3, [pc, #284]	; (80071d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80070b8:	4013      	ands	r3, r2
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	0091      	lsls	r1, r2, #2
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6812      	ldr	r2, [r2, #0]
 80070c2:	430b      	orrs	r3, r1
 80070c4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80070d0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070d8:	041a      	lsls	r2, r3, #16
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80070ec:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070f4:	061a      	lsls	r2, r3, #24
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007104:	4b34      	ldr	r3, [pc, #208]	; (80071d8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007106:	4413      	add	r3, r2
 8007108:	009a      	lsls	r2, r3, #2
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	441a      	add	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	441a      	add	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	6879      	ldr	r1, [r7, #4]
 8007138:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800713a:	fb01 f303 	mul.w	r3, r1, r3
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	441a      	add	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800714e:	6879      	ldr	r1, [r7, #4]
 8007150:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007152:	fb01 f303 	mul.w	r3, r1, r3
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	441a      	add	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800716a:	fb01 f303 	mul.w	r3, r1, r3
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	441a      	add	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007182:	00db      	lsls	r3, r3, #3
 8007184:	441a      	add	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800719a:	fb01 f303 	mul.w	r3, r1, r3
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	441a      	add	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071b2:	6879      	ldr	r1, [r7, #4]
 80071b4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80071b6:	fb01 f303 	mul.w	r3, r1, r3
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	441a      	add	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ca:	4a04      	ldr	r2, [pc, #16]	; (80071dc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d915      	bls.n	80071fc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80071d0:	e006      	b.n	80071e0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80071d2:	bf00      	nop
 80071d4:	ffff0003 	.word	0xffff0003
 80071d8:	10002b00 	.word	0x10002b00
 80071dc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071e6:	f043 0220 	orr.w	r2, r3, #32
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2203      	movs	r2, #3
 80071f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e010      	b.n	800721e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007200:	60fb      	str	r3, [r7, #12]
 8007202:	e005      	b.n	8007210 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	3304      	adds	r3, #4
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	429a      	cmp	r2, r3
 800721a:	d3f3      	bcc.n	8007204 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop

0800722c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 800722c:	b480      	push	{r7}
 800722e:	b089      	sub	sp, #36	; 0x24
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
 8007238:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10a      	bne.n	8007258 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800724a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007252:	4313      	orrs	r3, r2
 8007254:	61fb      	str	r3, [r7, #28]
 8007256:	e00a      	b.n	800726e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007260:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8007266:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007268:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800726c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8007278:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800727e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8007284:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800728a:	4313      	orrs	r3, r2
 800728c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	fb01 f303 	mul.w	r3, r1, r3
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	69fa      	ldr	r2, [r7, #28]
 80072a8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	3304      	adds	r3, #4
 80072ae:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	3304      	adds	r3, #4
 80072ba:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80072bc:	2300      	movs	r3, #0
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	e020      	b.n	8007304 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	3303      	adds	r3, #3
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	4413      	add	r3, r2
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	3302      	adds	r3, #2
 80072d2:	6879      	ldr	r1, [r7, #4]
 80072d4:	440b      	add	r3, r1
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80072da:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	3301      	adds	r3, #1
 80072e0:	6879      	ldr	r1, [r7, #4]
 80072e2:	440b      	add	r3, r1
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80072e8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	440a      	add	r2, r1
 80072f0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80072f2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	3304      	adds	r3, #4
 80072fc:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	3304      	adds	r3, #4
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	0c1b      	lsrs	r3, r3, #16
 800730a:	4a06      	ldr	r2, [pc, #24]	; (8007324 <FDCAN_CopyMessageToRAM+0xf8>)
 800730c:	5cd3      	ldrb	r3, [r2, r3]
 800730e:	461a      	mov	r2, r3
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	4293      	cmp	r3, r2
 8007314:	d3d5      	bcc.n	80072c2 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8007316:	bf00      	nop
 8007318:	bf00      	nop
 800731a:	3724      	adds	r7, #36	; 0x24
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	0800aea8 	.word	0x0800aea8

08007328 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007328:	b480      	push	{r7}
 800732a:	b089      	sub	sp, #36	; 0x24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007332:	2300      	movs	r3, #0
 8007334:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007336:	4b86      	ldr	r3, [pc, #536]	; (8007550 <HAL_GPIO_Init+0x228>)
 8007338:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800733a:	e18c      	b.n	8007656 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	2101      	movs	r1, #1
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	fa01 f303 	lsl.w	r3, r1, r3
 8007348:	4013      	ands	r3, r2
 800734a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 817e 	beq.w	8007650 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f003 0303 	and.w	r3, r3, #3
 800735c:	2b01      	cmp	r3, #1
 800735e:	d005      	beq.n	800736c <HAL_GPIO_Init+0x44>
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f003 0303 	and.w	r3, r3, #3
 8007368:	2b02      	cmp	r3, #2
 800736a:	d130      	bne.n	80073ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	2203      	movs	r2, #3
 8007378:	fa02 f303 	lsl.w	r3, r2, r3
 800737c:	43db      	mvns	r3, r3
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	4013      	ands	r3, r2
 8007382:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	68da      	ldr	r2, [r3, #12]
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	fa02 f303 	lsl.w	r3, r2, r3
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	4313      	orrs	r3, r2
 8007394:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80073a2:	2201      	movs	r2, #1
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	fa02 f303 	lsl.w	r3, r2, r3
 80073aa:	43db      	mvns	r3, r3
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	4013      	ands	r3, r2
 80073b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	091b      	lsrs	r3, r3, #4
 80073b8:	f003 0201 	and.w	r2, r3, #1
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	fa02 f303 	lsl.w	r3, r2, r3
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f003 0303 	and.w	r3, r3, #3
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d017      	beq.n	800740a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	2203      	movs	r2, #3
 80073e6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ea:	43db      	mvns	r3, r3
 80073ec:	69ba      	ldr	r2, [r7, #24]
 80073ee:	4013      	ands	r3, r2
 80073f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	689a      	ldr	r2, [r3, #8]
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	fa02 f303 	lsl.w	r3, r2, r3
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	4313      	orrs	r3, r2
 8007402:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	2b02      	cmp	r3, #2
 8007414:	d123      	bne.n	800745e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	08da      	lsrs	r2, r3, #3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3208      	adds	r2, #8
 800741e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	f003 0307 	and.w	r3, r3, #7
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	220f      	movs	r2, #15
 800742e:	fa02 f303 	lsl.w	r3, r2, r3
 8007432:	43db      	mvns	r3, r3
 8007434:	69ba      	ldr	r2, [r7, #24]
 8007436:	4013      	ands	r3, r2
 8007438:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	691a      	ldr	r2, [r3, #16]
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	f003 0307 	and.w	r3, r3, #7
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	fa02 f303 	lsl.w	r3, r2, r3
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	4313      	orrs	r3, r2
 800744e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	08da      	lsrs	r2, r3, #3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3208      	adds	r2, #8
 8007458:	69b9      	ldr	r1, [r7, #24]
 800745a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	005b      	lsls	r3, r3, #1
 8007468:	2203      	movs	r2, #3
 800746a:	fa02 f303 	lsl.w	r3, r2, r3
 800746e:	43db      	mvns	r3, r3
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	4013      	ands	r3, r2
 8007474:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f003 0203 	and.w	r2, r3, #3
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	fa02 f303 	lsl.w	r3, r2, r3
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	4313      	orrs	r3, r2
 800748a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800749a:	2b00      	cmp	r3, #0
 800749c:	f000 80d8 	beq.w	8007650 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074a0:	4b2c      	ldr	r3, [pc, #176]	; (8007554 <HAL_GPIO_Init+0x22c>)
 80074a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074a6:	4a2b      	ldr	r2, [pc, #172]	; (8007554 <HAL_GPIO_Init+0x22c>)
 80074a8:	f043 0302 	orr.w	r3, r3, #2
 80074ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80074b0:	4b28      	ldr	r3, [pc, #160]	; (8007554 <HAL_GPIO_Init+0x22c>)
 80074b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80074be:	4a26      	ldr	r2, [pc, #152]	; (8007558 <HAL_GPIO_Init+0x230>)
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	089b      	lsrs	r3, r3, #2
 80074c4:	3302      	adds	r3, #2
 80074c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	f003 0303 	and.w	r3, r3, #3
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	220f      	movs	r2, #15
 80074d6:	fa02 f303 	lsl.w	r3, r2, r3
 80074da:	43db      	mvns	r3, r3
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	4013      	ands	r3, r2
 80074e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a1d      	ldr	r2, [pc, #116]	; (800755c <HAL_GPIO_Init+0x234>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d04a      	beq.n	8007580 <HAL_GPIO_Init+0x258>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a1c      	ldr	r2, [pc, #112]	; (8007560 <HAL_GPIO_Init+0x238>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d02b      	beq.n	800754a <HAL_GPIO_Init+0x222>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a1b      	ldr	r2, [pc, #108]	; (8007564 <HAL_GPIO_Init+0x23c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d025      	beq.n	8007546 <HAL_GPIO_Init+0x21e>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a1a      	ldr	r2, [pc, #104]	; (8007568 <HAL_GPIO_Init+0x240>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d01f      	beq.n	8007542 <HAL_GPIO_Init+0x21a>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a19      	ldr	r2, [pc, #100]	; (800756c <HAL_GPIO_Init+0x244>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d019      	beq.n	800753e <HAL_GPIO_Init+0x216>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a18      	ldr	r2, [pc, #96]	; (8007570 <HAL_GPIO_Init+0x248>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d013      	beq.n	800753a <HAL_GPIO_Init+0x212>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a17      	ldr	r2, [pc, #92]	; (8007574 <HAL_GPIO_Init+0x24c>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d00d      	beq.n	8007536 <HAL_GPIO_Init+0x20e>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a16      	ldr	r2, [pc, #88]	; (8007578 <HAL_GPIO_Init+0x250>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d007      	beq.n	8007532 <HAL_GPIO_Init+0x20a>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a15      	ldr	r2, [pc, #84]	; (800757c <HAL_GPIO_Init+0x254>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d101      	bne.n	800752e <HAL_GPIO_Init+0x206>
 800752a:	2309      	movs	r3, #9
 800752c:	e029      	b.n	8007582 <HAL_GPIO_Init+0x25a>
 800752e:	230a      	movs	r3, #10
 8007530:	e027      	b.n	8007582 <HAL_GPIO_Init+0x25a>
 8007532:	2307      	movs	r3, #7
 8007534:	e025      	b.n	8007582 <HAL_GPIO_Init+0x25a>
 8007536:	2306      	movs	r3, #6
 8007538:	e023      	b.n	8007582 <HAL_GPIO_Init+0x25a>
 800753a:	2305      	movs	r3, #5
 800753c:	e021      	b.n	8007582 <HAL_GPIO_Init+0x25a>
 800753e:	2304      	movs	r3, #4
 8007540:	e01f      	b.n	8007582 <HAL_GPIO_Init+0x25a>
 8007542:	2303      	movs	r3, #3
 8007544:	e01d      	b.n	8007582 <HAL_GPIO_Init+0x25a>
 8007546:	2302      	movs	r3, #2
 8007548:	e01b      	b.n	8007582 <HAL_GPIO_Init+0x25a>
 800754a:	2301      	movs	r3, #1
 800754c:	e019      	b.n	8007582 <HAL_GPIO_Init+0x25a>
 800754e:	bf00      	nop
 8007550:	58000080 	.word	0x58000080
 8007554:	58024400 	.word	0x58024400
 8007558:	58000400 	.word	0x58000400
 800755c:	58020000 	.word	0x58020000
 8007560:	58020400 	.word	0x58020400
 8007564:	58020800 	.word	0x58020800
 8007568:	58020c00 	.word	0x58020c00
 800756c:	58021000 	.word	0x58021000
 8007570:	58021400 	.word	0x58021400
 8007574:	58021800 	.word	0x58021800
 8007578:	58021c00 	.word	0x58021c00
 800757c:	58022400 	.word	0x58022400
 8007580:	2300      	movs	r3, #0
 8007582:	69fa      	ldr	r2, [r7, #28]
 8007584:	f002 0203 	and.w	r2, r2, #3
 8007588:	0092      	lsls	r2, r2, #2
 800758a:	4093      	lsls	r3, r2
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	4313      	orrs	r3, r2
 8007590:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007592:	4938      	ldr	r1, [pc, #224]	; (8007674 <HAL_GPIO_Init+0x34c>)
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	089b      	lsrs	r3, r3, #2
 8007598:	3302      	adds	r3, #2
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80075a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	43db      	mvns	r3, r3
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	4013      	ands	r3, r2
 80075b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80075be:	69ba      	ldr	r2, [r7, #24]
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80075c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80075ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	43db      	mvns	r3, r3
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	4013      	ands	r3, r2
 80075de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80075f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	43db      	mvns	r3, r3
 8007606:	69ba      	ldr	r2, [r7, #24]
 8007608:	4013      	ands	r3, r2
 800760a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007618:	69ba      	ldr	r2, [r7, #24]
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	4313      	orrs	r3, r2
 800761e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	43db      	mvns	r3, r3
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	4013      	ands	r3, r2
 8007634:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d003      	beq.n	800764a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007642:	69ba      	ldr	r2, [r7, #24]
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	4313      	orrs	r3, r2
 8007648:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	69ba      	ldr	r2, [r7, #24]
 800764e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	3301      	adds	r3, #1
 8007654:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	fa22 f303 	lsr.w	r3, r2, r3
 8007660:	2b00      	cmp	r3, #0
 8007662:	f47f ae6b 	bne.w	800733c <HAL_GPIO_Init+0x14>
  }
}
 8007666:	bf00      	nop
 8007668:	bf00      	nop
 800766a:	3724      	adds	r7, #36	; 0x24
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	58000400 	.word	0x58000400

08007678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	807b      	strh	r3, [r7, #2]
 8007684:	4613      	mov	r3, r2
 8007686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007688:	787b      	ldrb	r3, [r7, #1]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800768e:	887a      	ldrh	r2, [r7, #2]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007694:	e003      	b.n	800769e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007696:	887b      	ldrh	r3, [r7, #2]
 8007698:	041a      	lsls	r2, r3, #16
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	619a      	str	r2, [r3, #24]
}
 800769e:	bf00      	nop
 80076a0:	370c      	adds	r7, #12
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b085      	sub	sp, #20
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	460b      	mov	r3, r1
 80076b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80076bc:	887a      	ldrh	r2, [r7, #2]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	4013      	ands	r3, r2
 80076c2:	041a      	lsls	r2, r3, #16
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	43d9      	mvns	r1, r3
 80076c8:	887b      	ldrh	r3, [r7, #2]
 80076ca:	400b      	ands	r3, r1
 80076cc:	431a      	orrs	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	619a      	str	r2, [r3, #24]
}
 80076d2:	bf00      	nop
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
	...

080076e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80076e8:	4b19      	ldr	r3, [pc, #100]	; (8007750 <HAL_PWREx_ConfigSupply+0x70>)
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f003 0304 	and.w	r3, r3, #4
 80076f0:	2b04      	cmp	r3, #4
 80076f2:	d00a      	beq.n	800770a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80076f4:	4b16      	ldr	r3, [pc, #88]	; (8007750 <HAL_PWREx_ConfigSupply+0x70>)
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f003 0307 	and.w	r3, r3, #7
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d001      	beq.n	8007706 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e01f      	b.n	8007746 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	e01d      	b.n	8007746 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800770a:	4b11      	ldr	r3, [pc, #68]	; (8007750 <HAL_PWREx_ConfigSupply+0x70>)
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	f023 0207 	bic.w	r2, r3, #7
 8007712:	490f      	ldr	r1, [pc, #60]	; (8007750 <HAL_PWREx_ConfigSupply+0x70>)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4313      	orrs	r3, r2
 8007718:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800771a:	f7f9 fd4b 	bl	80011b4 <HAL_GetTick>
 800771e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007720:	e009      	b.n	8007736 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007722:	f7f9 fd47 	bl	80011b4 <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007730:	d901      	bls.n	8007736 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e007      	b.n	8007746 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007736:	4b06      	ldr	r3, [pc, #24]	; (8007750 <HAL_PWREx_ConfigSupply+0x70>)
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800773e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007742:	d1ee      	bne.n	8007722 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	58024800 	.word	0x58024800

08007754 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08c      	sub	sp, #48	; 0x30
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e39d      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 8087 	beq.w	8007882 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007774:	4b88      	ldr	r3, [pc, #544]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800777c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800777e:	4b86      	ldr	r3, [pc, #536]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 8007780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007782:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007786:	2b10      	cmp	r3, #16
 8007788:	d007      	beq.n	800779a <HAL_RCC_OscConfig+0x46>
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	2b18      	cmp	r3, #24
 800778e:	d110      	bne.n	80077b2 <HAL_RCC_OscConfig+0x5e>
 8007790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	2b02      	cmp	r3, #2
 8007798:	d10b      	bne.n	80077b2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800779a:	4b7f      	ldr	r3, [pc, #508]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d06c      	beq.n	8007880 <HAL_RCC_OscConfig+0x12c>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d168      	bne.n	8007880 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e377      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ba:	d106      	bne.n	80077ca <HAL_RCC_OscConfig+0x76>
 80077bc:	4b76      	ldr	r3, [pc, #472]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a75      	ldr	r2, [pc, #468]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 80077c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c6:	6013      	str	r3, [r2, #0]
 80077c8:	e02e      	b.n	8007828 <HAL_RCC_OscConfig+0xd4>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10c      	bne.n	80077ec <HAL_RCC_OscConfig+0x98>
 80077d2:	4b71      	ldr	r3, [pc, #452]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a70      	ldr	r2, [pc, #448]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 80077d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077dc:	6013      	str	r3, [r2, #0]
 80077de:	4b6e      	ldr	r3, [pc, #440]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a6d      	ldr	r2, [pc, #436]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 80077e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077e8:	6013      	str	r3, [r2, #0]
 80077ea:	e01d      	b.n	8007828 <HAL_RCC_OscConfig+0xd4>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077f4:	d10c      	bne.n	8007810 <HAL_RCC_OscConfig+0xbc>
 80077f6:	4b68      	ldr	r3, [pc, #416]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a67      	ldr	r2, [pc, #412]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 80077fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007800:	6013      	str	r3, [r2, #0]
 8007802:	4b65      	ldr	r3, [pc, #404]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a64      	ldr	r2, [pc, #400]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 8007808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800780c:	6013      	str	r3, [r2, #0]
 800780e:	e00b      	b.n	8007828 <HAL_RCC_OscConfig+0xd4>
 8007810:	4b61      	ldr	r3, [pc, #388]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a60      	ldr	r2, [pc, #384]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 8007816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800781a:	6013      	str	r3, [r2, #0]
 800781c:	4b5e      	ldr	r3, [pc, #376]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a5d      	ldr	r2, [pc, #372]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 8007822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d013      	beq.n	8007858 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007830:	f7f9 fcc0 	bl	80011b4 <HAL_GetTick>
 8007834:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007836:	e008      	b.n	800784a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007838:	f7f9 fcbc 	bl	80011b4 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	2b64      	cmp	r3, #100	; 0x64
 8007844:	d901      	bls.n	800784a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e32b      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800784a:	4b53      	ldr	r3, [pc, #332]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d0f0      	beq.n	8007838 <HAL_RCC_OscConfig+0xe4>
 8007856:	e014      	b.n	8007882 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007858:	f7f9 fcac 	bl	80011b4 <HAL_GetTick>
 800785c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800785e:	e008      	b.n	8007872 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007860:	f7f9 fca8 	bl	80011b4 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b64      	cmp	r3, #100	; 0x64
 800786c:	d901      	bls.n	8007872 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e317      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007872:	4b49      	ldr	r3, [pc, #292]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1f0      	bne.n	8007860 <HAL_RCC_OscConfig+0x10c>
 800787e:	e000      	b.n	8007882 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 808c 	beq.w	80079a8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007890:	4b41      	ldr	r3, [pc, #260]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007898:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800789a:	4b3f      	ldr	r3, [pc, #252]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 800789c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d007      	beq.n	80078b6 <HAL_RCC_OscConfig+0x162>
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	2b18      	cmp	r3, #24
 80078aa:	d137      	bne.n	800791c <HAL_RCC_OscConfig+0x1c8>
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	f003 0303 	and.w	r3, r3, #3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d132      	bne.n	800791c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078b6:	4b38      	ldr	r3, [pc, #224]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0304 	and.w	r3, r3, #4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d005      	beq.n	80078ce <HAL_RCC_OscConfig+0x17a>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e2e9      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80078ce:	4b32      	ldr	r3, [pc, #200]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f023 0219 	bic.w	r2, r3, #25
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	492f      	ldr	r1, [pc, #188]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80078e0:	f7f9 fc68 	bl	80011b4 <HAL_GetTick>
 80078e4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078e6:	e008      	b.n	80078fa <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078e8:	f7f9 fc64 	bl	80011b4 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d901      	bls.n	80078fa <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e2d3      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078fa:	4b27      	ldr	r3, [pc, #156]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0304 	and.w	r3, r3, #4
 8007902:	2b00      	cmp	r3, #0
 8007904:	d0f0      	beq.n	80078e8 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007906:	4b24      	ldr	r3, [pc, #144]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	061b      	lsls	r3, r3, #24
 8007914:	4920      	ldr	r1, [pc, #128]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 8007916:	4313      	orrs	r3, r2
 8007918:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800791a:	e045      	b.n	80079a8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d026      	beq.n	8007972 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007924:	4b1c      	ldr	r3, [pc, #112]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f023 0219 	bic.w	r2, r3, #25
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	4919      	ldr	r1, [pc, #100]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 8007932:	4313      	orrs	r3, r2
 8007934:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007936:	f7f9 fc3d 	bl	80011b4 <HAL_GetTick>
 800793a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800793c:	e008      	b.n	8007950 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800793e:	f7f9 fc39 	bl	80011b4 <HAL_GetTick>
 8007942:	4602      	mov	r2, r0
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	2b02      	cmp	r3, #2
 800794a:	d901      	bls.n	8007950 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e2a8      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007950:	4b11      	ldr	r3, [pc, #68]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0304 	and.w	r3, r3, #4
 8007958:	2b00      	cmp	r3, #0
 800795a:	d0f0      	beq.n	800793e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800795c:	4b0e      	ldr	r3, [pc, #56]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	061b      	lsls	r3, r3, #24
 800796a:	490b      	ldr	r1, [pc, #44]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 800796c:	4313      	orrs	r3, r2
 800796e:	604b      	str	r3, [r1, #4]
 8007970:	e01a      	b.n	80079a8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007972:	4b09      	ldr	r3, [pc, #36]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a08      	ldr	r2, [pc, #32]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 8007978:	f023 0301 	bic.w	r3, r3, #1
 800797c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800797e:	f7f9 fc19 	bl	80011b4 <HAL_GetTick>
 8007982:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007984:	e00a      	b.n	800799c <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007986:	f7f9 fc15 	bl	80011b4 <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	2b02      	cmp	r3, #2
 8007992:	d903      	bls.n	800799c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e284      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
 8007998:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800799c:	4b96      	ldr	r3, [pc, #600]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0304 	and.w	r3, r3, #4
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1ee      	bne.n	8007986 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0310 	and.w	r3, r3, #16
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d06a      	beq.n	8007a8a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079b4:	4b90      	ldr	r3, [pc, #576]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079bc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80079be:	4b8e      	ldr	r3, [pc, #568]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 80079c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	2b08      	cmp	r3, #8
 80079c8:	d007      	beq.n	80079da <HAL_RCC_OscConfig+0x286>
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	2b18      	cmp	r3, #24
 80079ce:	d11b      	bne.n	8007a08 <HAL_RCC_OscConfig+0x2b4>
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f003 0303 	and.w	r3, r3, #3
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d116      	bne.n	8007a08 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079da:	4b87      	ldr	r3, [pc, #540]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d005      	beq.n	80079f2 <HAL_RCC_OscConfig+0x29e>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	2b80      	cmp	r3, #128	; 0x80
 80079ec:	d001      	beq.n	80079f2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e257      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80079f2:	4b81      	ldr	r3, [pc, #516]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	061b      	lsls	r3, r3, #24
 8007a00:	497d      	ldr	r1, [pc, #500]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a06:	e040      	b.n	8007a8a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d023      	beq.n	8007a58 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007a10:	4b79      	ldr	r3, [pc, #484]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a78      	ldr	r2, [pc, #480]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a1c:	f7f9 fbca 	bl	80011b4 <HAL_GetTick>
 8007a20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a22:	e008      	b.n	8007a36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007a24:	f7f9 fbc6 	bl	80011b4 <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d901      	bls.n	8007a36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e235      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a36:	4b70      	ldr	r3, [pc, #448]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d0f0      	beq.n	8007a24 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a42:	4b6d      	ldr	r3, [pc, #436]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	061b      	lsls	r3, r3, #24
 8007a50:	4969      	ldr	r1, [pc, #420]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	60cb      	str	r3, [r1, #12]
 8007a56:	e018      	b.n	8007a8a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007a58:	4b67      	ldr	r3, [pc, #412]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a66      	ldr	r2, [pc, #408]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007a5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a64:	f7f9 fba6 	bl	80011b4 <HAL_GetTick>
 8007a68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a6a:	e008      	b.n	8007a7e <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007a6c:	f7f9 fba2 	bl	80011b4 <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d901      	bls.n	8007a7e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e211      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a7e:	4b5e      	ldr	r3, [pc, #376]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1f0      	bne.n	8007a6c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0308 	and.w	r3, r3, #8
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d036      	beq.n	8007b04 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d019      	beq.n	8007ad2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a9e:	4b56      	ldr	r3, [pc, #344]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aa2:	4a55      	ldr	r2, [pc, #340]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007aa4:	f043 0301 	orr.w	r3, r3, #1
 8007aa8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aaa:	f7f9 fb83 	bl	80011b4 <HAL_GetTick>
 8007aae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ab0:	e008      	b.n	8007ac4 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ab2:	f7f9 fb7f 	bl	80011b4 <HAL_GetTick>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d901      	bls.n	8007ac4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	e1ee      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ac4:	4b4c      	ldr	r3, [pc, #304]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ac8:	f003 0302 	and.w	r3, r3, #2
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d0f0      	beq.n	8007ab2 <HAL_RCC_OscConfig+0x35e>
 8007ad0:	e018      	b.n	8007b04 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ad2:	4b49      	ldr	r3, [pc, #292]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ad6:	4a48      	ldr	r2, [pc, #288]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007ad8:	f023 0301 	bic.w	r3, r3, #1
 8007adc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ade:	f7f9 fb69 	bl	80011b4 <HAL_GetTick>
 8007ae2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ae4:	e008      	b.n	8007af8 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ae6:	f7f9 fb65 	bl	80011b4 <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d901      	bls.n	8007af8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e1d4      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007af8:	4b3f      	ldr	r3, [pc, #252]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1f0      	bne.n	8007ae6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0320 	and.w	r3, r3, #32
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d036      	beq.n	8007b7e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d019      	beq.n	8007b4c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007b18:	4b37      	ldr	r3, [pc, #220]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a36      	ldr	r2, [pc, #216]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007b1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007b24:	f7f9 fb46 	bl	80011b4 <HAL_GetTick>
 8007b28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007b2a:	e008      	b.n	8007b3e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007b2c:	f7f9 fb42 	bl	80011b4 <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d901      	bls.n	8007b3e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e1b1      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007b3e:	4b2e      	ldr	r3, [pc, #184]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d0f0      	beq.n	8007b2c <HAL_RCC_OscConfig+0x3d8>
 8007b4a:	e018      	b.n	8007b7e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007b4c:	4b2a      	ldr	r3, [pc, #168]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a29      	ldr	r2, [pc, #164]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007b52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007b58:	f7f9 fb2c 	bl	80011b4 <HAL_GetTick>
 8007b5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b5e:	e008      	b.n	8007b72 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007b60:	f7f9 fb28 	bl	80011b4 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d901      	bls.n	8007b72 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e197      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b72:	4b21      	ldr	r3, [pc, #132]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1f0      	bne.n	8007b60 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 0304 	and.w	r3, r3, #4
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f000 8086 	beq.w	8007c98 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007b8c:	4b1b      	ldr	r3, [pc, #108]	; (8007bfc <HAL_RCC_OscConfig+0x4a8>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a1a      	ldr	r2, [pc, #104]	; (8007bfc <HAL_RCC_OscConfig+0x4a8>)
 8007b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b98:	f7f9 fb0c 	bl	80011b4 <HAL_GetTick>
 8007b9c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b9e:	e008      	b.n	8007bb2 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007ba0:	f7f9 fb08 	bl	80011b4 <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	2b64      	cmp	r3, #100	; 0x64
 8007bac:	d901      	bls.n	8007bb2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e177      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bb2:	4b12      	ldr	r3, [pc, #72]	; (8007bfc <HAL_RCC_OscConfig+0x4a8>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d0f0      	beq.n	8007ba0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d106      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x480>
 8007bc6:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bca:	4a0b      	ldr	r2, [pc, #44]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007bcc:	f043 0301 	orr.w	r3, r3, #1
 8007bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8007bd2:	e032      	b.n	8007c3a <HAL_RCC_OscConfig+0x4e6>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d111      	bne.n	8007c00 <HAL_RCC_OscConfig+0x4ac>
 8007bdc:	4b06      	ldr	r3, [pc, #24]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be0:	4a05      	ldr	r2, [pc, #20]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007be2:	f023 0301 	bic.w	r3, r3, #1
 8007be6:	6713      	str	r3, [r2, #112]	; 0x70
 8007be8:	4b03      	ldr	r3, [pc, #12]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bec:	4a02      	ldr	r2, [pc, #8]	; (8007bf8 <HAL_RCC_OscConfig+0x4a4>)
 8007bee:	f023 0304 	bic.w	r3, r3, #4
 8007bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8007bf4:	e021      	b.n	8007c3a <HAL_RCC_OscConfig+0x4e6>
 8007bf6:	bf00      	nop
 8007bf8:	58024400 	.word	0x58024400
 8007bfc:	58024800 	.word	0x58024800
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	2b05      	cmp	r3, #5
 8007c06:	d10c      	bne.n	8007c22 <HAL_RCC_OscConfig+0x4ce>
 8007c08:	4b83      	ldr	r3, [pc, #524]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0c:	4a82      	ldr	r2, [pc, #520]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007c0e:	f043 0304 	orr.w	r3, r3, #4
 8007c12:	6713      	str	r3, [r2, #112]	; 0x70
 8007c14:	4b80      	ldr	r3, [pc, #512]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c18:	4a7f      	ldr	r2, [pc, #508]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007c1a:	f043 0301 	orr.w	r3, r3, #1
 8007c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8007c20:	e00b      	b.n	8007c3a <HAL_RCC_OscConfig+0x4e6>
 8007c22:	4b7d      	ldr	r3, [pc, #500]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c26:	4a7c      	ldr	r2, [pc, #496]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007c28:	f023 0301 	bic.w	r3, r3, #1
 8007c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8007c2e:	4b7a      	ldr	r3, [pc, #488]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c32:	4a79      	ldr	r2, [pc, #484]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007c34:	f023 0304 	bic.w	r3, r3, #4
 8007c38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d015      	beq.n	8007c6e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c42:	f7f9 fab7 	bl	80011b4 <HAL_GetTick>
 8007c46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c48:	e00a      	b.n	8007c60 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c4a:	f7f9 fab3 	bl	80011b4 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e120      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c60:	4b6d      	ldr	r3, [pc, #436]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d0ee      	beq.n	8007c4a <HAL_RCC_OscConfig+0x4f6>
 8007c6c:	e014      	b.n	8007c98 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c6e:	f7f9 faa1 	bl	80011b4 <HAL_GetTick>
 8007c72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c74:	e00a      	b.n	8007c8c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c76:	f7f9 fa9d 	bl	80011b4 <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d901      	bls.n	8007c8c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e10a      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c8c:	4b62      	ldr	r3, [pc, #392]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c90:	f003 0302 	and.w	r3, r3, #2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1ee      	bne.n	8007c76 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 80ff 	beq.w	8007ea0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007ca2:	4b5d      	ldr	r3, [pc, #372]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007caa:	2b18      	cmp	r3, #24
 8007cac:	f000 80ba 	beq.w	8007e24 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	f040 8095 	bne.w	8007de4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cba:	4b57      	ldr	r3, [pc, #348]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a56      	ldr	r2, [pc, #344]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007cc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cc6:	f7f9 fa75 	bl	80011b4 <HAL_GetTick>
 8007cca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ccc:	e008      	b.n	8007ce0 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cce:	f7f9 fa71 	bl	80011b4 <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d901      	bls.n	8007ce0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e0e0      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ce0:	4b4d      	ldr	r3, [pc, #308]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1f0      	bne.n	8007cce <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007cec:	4b4a      	ldr	r3, [pc, #296]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007cee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cf0:	4b4a      	ldr	r3, [pc, #296]	; (8007e1c <HAL_RCC_OscConfig+0x6c8>)
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007cfc:	0112      	lsls	r2, r2, #4
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	4945      	ldr	r1, [pc, #276]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	628b      	str	r3, [r1, #40]	; 0x28
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d14:	3b01      	subs	r3, #1
 8007d16:	025b      	lsls	r3, r3, #9
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d20:	3b01      	subs	r3, #1
 8007d22:	041b      	lsls	r3, r3, #16
 8007d24:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d28:	431a      	orrs	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	061b      	lsls	r3, r3, #24
 8007d32:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d36:	4938      	ldr	r1, [pc, #224]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007d3c:	4b36      	ldr	r3, [pc, #216]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	4a35      	ldr	r2, [pc, #212]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007d42:	f023 0301 	bic.w	r3, r3, #1
 8007d46:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007d48:	4b33      	ldr	r3, [pc, #204]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d4c:	4b34      	ldr	r3, [pc, #208]	; (8007e20 <HAL_RCC_OscConfig+0x6cc>)
 8007d4e:	4013      	ands	r3, r2
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007d54:	00d2      	lsls	r2, r2, #3
 8007d56:	4930      	ldr	r1, [pc, #192]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007d5c:	4b2e      	ldr	r3, [pc, #184]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d60:	f023 020c 	bic.w	r2, r3, #12
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d68:	492b      	ldr	r1, [pc, #172]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007d6e:	4b2a      	ldr	r3, [pc, #168]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d72:	f023 0202 	bic.w	r2, r3, #2
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7a:	4927      	ldr	r1, [pc, #156]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007d80:	4b25      	ldr	r3, [pc, #148]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d84:	4a24      	ldr	r2, [pc, #144]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d8c:	4b22      	ldr	r3, [pc, #136]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d90:	4a21      	ldr	r2, [pc, #132]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007d98:	4b1f      	ldr	r3, [pc, #124]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9c:	4a1e      	ldr	r2, [pc, #120]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007d9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007da2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007da4:	4b1c      	ldr	r3, [pc, #112]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da8:	4a1b      	ldr	r2, [pc, #108]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007daa:	f043 0301 	orr.w	r3, r3, #1
 8007dae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007db0:	4b19      	ldr	r3, [pc, #100]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a18      	ldr	r2, [pc, #96]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dbc:	f7f9 f9fa 	bl	80011b4 <HAL_GetTick>
 8007dc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007dc2:	e008      	b.n	8007dd6 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dc4:	f7f9 f9f6 	bl	80011b4 <HAL_GetTick>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d901      	bls.n	8007dd6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e065      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007dd6:	4b10      	ldr	r3, [pc, #64]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0f0      	beq.n	8007dc4 <HAL_RCC_OscConfig+0x670>
 8007de2:	e05d      	b.n	8007ea0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007de4:	4b0c      	ldr	r3, [pc, #48]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a0b      	ldr	r2, [pc, #44]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007df0:	f7f9 f9e0 	bl	80011b4 <HAL_GetTick>
 8007df4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007df6:	e008      	b.n	8007e0a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007df8:	f7f9 f9dc 	bl	80011b4 <HAL_GetTick>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d901      	bls.n	8007e0a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e04b      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e0a:	4b03      	ldr	r3, [pc, #12]	; (8007e18 <HAL_RCC_OscConfig+0x6c4>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1f0      	bne.n	8007df8 <HAL_RCC_OscConfig+0x6a4>
 8007e16:	e043      	b.n	8007ea0 <HAL_RCC_OscConfig+0x74c>
 8007e18:	58024400 	.word	0x58024400
 8007e1c:	fffffc0c 	.word	0xfffffc0c
 8007e20:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007e24:	4b21      	ldr	r3, [pc, #132]	; (8007eac <HAL_RCC_OscConfig+0x758>)
 8007e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e28:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007e2a:	4b20      	ldr	r3, [pc, #128]	; (8007eac <HAL_RCC_OscConfig+0x758>)
 8007e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d031      	beq.n	8007e9c <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	f003 0203 	and.w	r2, r3, #3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d12a      	bne.n	8007e9c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	091b      	lsrs	r3, r3, #4
 8007e4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d122      	bne.n	8007e9c <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e60:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d11a      	bne.n	8007e9c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	0a5b      	lsrs	r3, r3, #9
 8007e6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e72:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d111      	bne.n	8007e9c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	0c1b      	lsrs	r3, r3, #16
 8007e7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e84:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d108      	bne.n	8007e9c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	0e1b      	lsrs	r3, r3, #24
 8007e8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e96:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d001      	beq.n	8007ea0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e000      	b.n	8007ea2 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3730      	adds	r7, #48	; 0x30
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	58024400 	.word	0x58024400

08007eb0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d101      	bne.n	8007ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e19c      	b.n	80081fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ec4:	4b8a      	ldr	r3, [pc, #552]	; (80080f0 <HAL_RCC_ClockConfig+0x240>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 030f 	and.w	r3, r3, #15
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d910      	bls.n	8007ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ed2:	4b87      	ldr	r3, [pc, #540]	; (80080f0 <HAL_RCC_ClockConfig+0x240>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f023 020f 	bic.w	r2, r3, #15
 8007eda:	4985      	ldr	r1, [pc, #532]	; (80080f0 <HAL_RCC_ClockConfig+0x240>)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ee2:	4b83      	ldr	r3, [pc, #524]	; (80080f0 <HAL_RCC_ClockConfig+0x240>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 030f 	and.w	r3, r3, #15
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d001      	beq.n	8007ef4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e184      	b.n	80081fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d010      	beq.n	8007f22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	691a      	ldr	r2, [r3, #16]
 8007f04:	4b7b      	ldr	r3, [pc, #492]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d908      	bls.n	8007f22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007f10:	4b78      	ldr	r3, [pc, #480]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	4975      	ldr	r1, [pc, #468]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0308 	and.w	r3, r3, #8
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d010      	beq.n	8007f50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	695a      	ldr	r2, [r3, #20]
 8007f32:	4b70      	ldr	r3, [pc, #448]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8007f34:	69db      	ldr	r3, [r3, #28]
 8007f36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d908      	bls.n	8007f50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f3e:	4b6d      	ldr	r3, [pc, #436]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	496a      	ldr	r1, [pc, #424]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0310 	and.w	r3, r3, #16
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d010      	beq.n	8007f7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	699a      	ldr	r2, [r3, #24]
 8007f60:	4b64      	ldr	r3, [pc, #400]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d908      	bls.n	8007f7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f6c:	4b61      	ldr	r3, [pc, #388]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8007f6e:	69db      	ldr	r3, [r3, #28]
 8007f70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	495e      	ldr	r1, [pc, #376]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0320 	and.w	r3, r3, #32
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d010      	beq.n	8007fac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	69da      	ldr	r2, [r3, #28]
 8007f8e:	4b59      	ldr	r3, [pc, #356]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d908      	bls.n	8007fac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007f9a:	4b56      	ldr	r3, [pc, #344]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	4953      	ldr	r1, [pc, #332]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 0302 	and.w	r3, r3, #2
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d010      	beq.n	8007fda <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	68da      	ldr	r2, [r3, #12]
 8007fbc:	4b4d      	ldr	r3, [pc, #308]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	f003 030f 	and.w	r3, r3, #15
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d908      	bls.n	8007fda <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fc8:	4b4a      	ldr	r3, [pc, #296]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	f023 020f 	bic.w	r2, r3, #15
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	4947      	ldr	r1, [pc, #284]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d055      	beq.n	8008092 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007fe6:	4b43      	ldr	r3, [pc, #268]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	4940      	ldr	r1, [pc, #256]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d107      	bne.n	8008010 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008000:	4b3c      	ldr	r3, [pc, #240]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008008:	2b00      	cmp	r3, #0
 800800a:	d121      	bne.n	8008050 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e0f6      	b.n	80081fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	2b03      	cmp	r3, #3
 8008016:	d107      	bne.n	8008028 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008018:	4b36      	ldr	r3, [pc, #216]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008020:	2b00      	cmp	r3, #0
 8008022:	d115      	bne.n	8008050 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e0ea      	b.n	80081fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d107      	bne.n	8008040 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008030:	4b30      	ldr	r3, [pc, #192]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008038:	2b00      	cmp	r3, #0
 800803a:	d109      	bne.n	8008050 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e0de      	b.n	80081fe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008040:	4b2c      	ldr	r3, [pc, #176]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0304 	and.w	r3, r3, #4
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e0d6      	b.n	80081fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008050:	4b28      	ldr	r3, [pc, #160]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	f023 0207 	bic.w	r2, r3, #7
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	4925      	ldr	r1, [pc, #148]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 800805e:	4313      	orrs	r3, r2
 8008060:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008062:	f7f9 f8a7 	bl	80011b4 <HAL_GetTick>
 8008066:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008068:	e00a      	b.n	8008080 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800806a:	f7f9 f8a3 	bl	80011b4 <HAL_GetTick>
 800806e:	4602      	mov	r2, r0
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	f241 3288 	movw	r2, #5000	; 0x1388
 8008078:	4293      	cmp	r3, r2
 800807a:	d901      	bls.n	8008080 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e0be      	b.n	80081fe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008080:	4b1c      	ldr	r3, [pc, #112]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	00db      	lsls	r3, r3, #3
 800808e:	429a      	cmp	r2, r3
 8008090:	d1eb      	bne.n	800806a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0302 	and.w	r3, r3, #2
 800809a:	2b00      	cmp	r3, #0
 800809c:	d010      	beq.n	80080c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68da      	ldr	r2, [r3, #12]
 80080a2:	4b14      	ldr	r3, [pc, #80]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	f003 030f 	and.w	r3, r3, #15
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d208      	bcs.n	80080c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080ae:	4b11      	ldr	r3, [pc, #68]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	f023 020f 	bic.w	r2, r3, #15
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	490e      	ldr	r1, [pc, #56]	; (80080f4 <HAL_RCC_ClockConfig+0x244>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080c0:	4b0b      	ldr	r3, [pc, #44]	; (80080f0 <HAL_RCC_ClockConfig+0x240>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 030f 	and.w	r3, r3, #15
 80080c8:	683a      	ldr	r2, [r7, #0]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d214      	bcs.n	80080f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080ce:	4b08      	ldr	r3, [pc, #32]	; (80080f0 <HAL_RCC_ClockConfig+0x240>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f023 020f 	bic.w	r2, r3, #15
 80080d6:	4906      	ldr	r1, [pc, #24]	; (80080f0 <HAL_RCC_ClockConfig+0x240>)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	4313      	orrs	r3, r2
 80080dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080de:	4b04      	ldr	r3, [pc, #16]	; (80080f0 <HAL_RCC_ClockConfig+0x240>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 030f 	and.w	r3, r3, #15
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d005      	beq.n	80080f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e086      	b.n	80081fe <HAL_RCC_ClockConfig+0x34e>
 80080f0:	52002000 	.word	0x52002000
 80080f4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	2b00      	cmp	r3, #0
 8008102:	d010      	beq.n	8008126 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	691a      	ldr	r2, [r3, #16]
 8008108:	4b3f      	ldr	r3, [pc, #252]	; (8008208 <HAL_RCC_ClockConfig+0x358>)
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008110:	429a      	cmp	r2, r3
 8008112:	d208      	bcs.n	8008126 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008114:	4b3c      	ldr	r3, [pc, #240]	; (8008208 <HAL_RCC_ClockConfig+0x358>)
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	4939      	ldr	r1, [pc, #228]	; (8008208 <HAL_RCC_ClockConfig+0x358>)
 8008122:	4313      	orrs	r3, r2
 8008124:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0308 	and.w	r3, r3, #8
 800812e:	2b00      	cmp	r3, #0
 8008130:	d010      	beq.n	8008154 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	695a      	ldr	r2, [r3, #20]
 8008136:	4b34      	ldr	r3, [pc, #208]	; (8008208 <HAL_RCC_ClockConfig+0x358>)
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800813e:	429a      	cmp	r2, r3
 8008140:	d208      	bcs.n	8008154 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008142:	4b31      	ldr	r3, [pc, #196]	; (8008208 <HAL_RCC_ClockConfig+0x358>)
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	492e      	ldr	r1, [pc, #184]	; (8008208 <HAL_RCC_ClockConfig+0x358>)
 8008150:	4313      	orrs	r3, r2
 8008152:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0310 	and.w	r3, r3, #16
 800815c:	2b00      	cmp	r3, #0
 800815e:	d010      	beq.n	8008182 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	699a      	ldr	r2, [r3, #24]
 8008164:	4b28      	ldr	r3, [pc, #160]	; (8008208 <HAL_RCC_ClockConfig+0x358>)
 8008166:	69db      	ldr	r3, [r3, #28]
 8008168:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800816c:	429a      	cmp	r2, r3
 800816e:	d208      	bcs.n	8008182 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008170:	4b25      	ldr	r3, [pc, #148]	; (8008208 <HAL_RCC_ClockConfig+0x358>)
 8008172:	69db      	ldr	r3, [r3, #28]
 8008174:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	4922      	ldr	r1, [pc, #136]	; (8008208 <HAL_RCC_ClockConfig+0x358>)
 800817e:	4313      	orrs	r3, r2
 8008180:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b00      	cmp	r3, #0
 800818c:	d010      	beq.n	80081b0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	69da      	ldr	r2, [r3, #28]
 8008192:	4b1d      	ldr	r3, [pc, #116]	; (8008208 <HAL_RCC_ClockConfig+0x358>)
 8008194:	6a1b      	ldr	r3, [r3, #32]
 8008196:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800819a:	429a      	cmp	r2, r3
 800819c:	d208      	bcs.n	80081b0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800819e:	4b1a      	ldr	r3, [pc, #104]	; (8008208 <HAL_RCC_ClockConfig+0x358>)
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	4917      	ldr	r1, [pc, #92]	; (8008208 <HAL_RCC_ClockConfig+0x358>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80081b0:	f000 f834 	bl	800821c <HAL_RCC_GetSysClockFreq>
 80081b4:	4602      	mov	r2, r0
 80081b6:	4b14      	ldr	r3, [pc, #80]	; (8008208 <HAL_RCC_ClockConfig+0x358>)
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	0a1b      	lsrs	r3, r3, #8
 80081bc:	f003 030f 	and.w	r3, r3, #15
 80081c0:	4912      	ldr	r1, [pc, #72]	; (800820c <HAL_RCC_ClockConfig+0x35c>)
 80081c2:	5ccb      	ldrb	r3, [r1, r3]
 80081c4:	f003 031f 	and.w	r3, r3, #31
 80081c8:	fa22 f303 	lsr.w	r3, r2, r3
 80081cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80081ce:	4b0e      	ldr	r3, [pc, #56]	; (8008208 <HAL_RCC_ClockConfig+0x358>)
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	f003 030f 	and.w	r3, r3, #15
 80081d6:	4a0d      	ldr	r2, [pc, #52]	; (800820c <HAL_RCC_ClockConfig+0x35c>)
 80081d8:	5cd3      	ldrb	r3, [r2, r3]
 80081da:	f003 031f 	and.w	r3, r3, #31
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	fa22 f303 	lsr.w	r3, r2, r3
 80081e4:	4a0a      	ldr	r2, [pc, #40]	; (8008210 <HAL_RCC_ClockConfig+0x360>)
 80081e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80081e8:	4a0a      	ldr	r2, [pc, #40]	; (8008214 <HAL_RCC_ClockConfig+0x364>)
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80081ee:	4b0a      	ldr	r3, [pc, #40]	; (8008218 <HAL_RCC_ClockConfig+0x368>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7f8 ff94 	bl	8001120 <HAL_InitTick>
 80081f8:	4603      	mov	r3, r0
 80081fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3718      	adds	r7, #24
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	58024400 	.word	0x58024400
 800820c:	0800ae90 	.word	0x0800ae90
 8008210:	2400000c 	.word	0x2400000c
 8008214:	24000008 	.word	0x24000008
 8008218:	24000010 	.word	0x24000010

0800821c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800821c:	b480      	push	{r7}
 800821e:	b089      	sub	sp, #36	; 0x24
 8008220:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008222:	4bb3      	ldr	r3, [pc, #716]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800822a:	2b18      	cmp	r3, #24
 800822c:	f200 8155 	bhi.w	80084da <HAL_RCC_GetSysClockFreq+0x2be>
 8008230:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008236:	bf00      	nop
 8008238:	0800829d 	.word	0x0800829d
 800823c:	080084db 	.word	0x080084db
 8008240:	080084db 	.word	0x080084db
 8008244:	080084db 	.word	0x080084db
 8008248:	080084db 	.word	0x080084db
 800824c:	080084db 	.word	0x080084db
 8008250:	080084db 	.word	0x080084db
 8008254:	080084db 	.word	0x080084db
 8008258:	080082c3 	.word	0x080082c3
 800825c:	080084db 	.word	0x080084db
 8008260:	080084db 	.word	0x080084db
 8008264:	080084db 	.word	0x080084db
 8008268:	080084db 	.word	0x080084db
 800826c:	080084db 	.word	0x080084db
 8008270:	080084db 	.word	0x080084db
 8008274:	080084db 	.word	0x080084db
 8008278:	080082c9 	.word	0x080082c9
 800827c:	080084db 	.word	0x080084db
 8008280:	080084db 	.word	0x080084db
 8008284:	080084db 	.word	0x080084db
 8008288:	080084db 	.word	0x080084db
 800828c:	080084db 	.word	0x080084db
 8008290:	080084db 	.word	0x080084db
 8008294:	080084db 	.word	0x080084db
 8008298:	080082cf 	.word	0x080082cf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800829c:	4b94      	ldr	r3, [pc, #592]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 0320 	and.w	r3, r3, #32
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d009      	beq.n	80082bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082a8:	4b91      	ldr	r3, [pc, #580]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	08db      	lsrs	r3, r3, #3
 80082ae:	f003 0303 	and.w	r3, r3, #3
 80082b2:	4a90      	ldr	r2, [pc, #576]	; (80084f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80082b4:	fa22 f303 	lsr.w	r3, r2, r3
 80082b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80082ba:	e111      	b.n	80084e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80082bc:	4b8d      	ldr	r3, [pc, #564]	; (80084f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80082be:	61bb      	str	r3, [r7, #24]
    break;
 80082c0:	e10e      	b.n	80084e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80082c2:	4b8d      	ldr	r3, [pc, #564]	; (80084f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80082c4:	61bb      	str	r3, [r7, #24]
    break;
 80082c6:	e10b      	b.n	80084e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80082c8:	4b8c      	ldr	r3, [pc, #560]	; (80084fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80082ca:	61bb      	str	r3, [r7, #24]
    break;
 80082cc:	e108      	b.n	80084e0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082ce:	4b88      	ldr	r3, [pc, #544]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d2:	f003 0303 	and.w	r3, r3, #3
 80082d6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80082d8:	4b85      	ldr	r3, [pc, #532]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082dc:	091b      	lsrs	r3, r3, #4
 80082de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082e2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80082e4:	4b82      	ldr	r3, [pc, #520]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e8:	f003 0301 	and.w	r3, r3, #1
 80082ec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80082ee:	4b80      	ldr	r3, [pc, #512]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f2:	08db      	lsrs	r3, r3, #3
 80082f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	fb02 f303 	mul.w	r3, r2, r3
 80082fe:	ee07 3a90 	vmov	s15, r3
 8008302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008306:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 80e1 	beq.w	80084d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	2b02      	cmp	r3, #2
 8008316:	f000 8083 	beq.w	8008420 <HAL_RCC_GetSysClockFreq+0x204>
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2b02      	cmp	r3, #2
 800831e:	f200 80a1 	bhi.w	8008464 <HAL_RCC_GetSysClockFreq+0x248>
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d003      	beq.n	8008330 <HAL_RCC_GetSysClockFreq+0x114>
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d056      	beq.n	80083dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800832e:	e099      	b.n	8008464 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008330:	4b6f      	ldr	r3, [pc, #444]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0320 	and.w	r3, r3, #32
 8008338:	2b00      	cmp	r3, #0
 800833a:	d02d      	beq.n	8008398 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800833c:	4b6c      	ldr	r3, [pc, #432]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	08db      	lsrs	r3, r3, #3
 8008342:	f003 0303 	and.w	r3, r3, #3
 8008346:	4a6b      	ldr	r2, [pc, #428]	; (80084f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008348:	fa22 f303 	lsr.w	r3, r2, r3
 800834c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	ee07 3a90 	vmov	s15, r3
 8008354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	ee07 3a90 	vmov	s15, r3
 800835e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008366:	4b62      	ldr	r3, [pc, #392]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836e:	ee07 3a90 	vmov	s15, r3
 8008372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008376:	ed97 6a02 	vldr	s12, [r7, #8]
 800837a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800837e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800838a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800838e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008392:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008396:	e087      	b.n	80084a8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	ee07 3a90 	vmov	s15, r3
 800839e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008504 <HAL_RCC_GetSysClockFreq+0x2e8>
 80083a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083aa:	4b51      	ldr	r3, [pc, #324]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b2:	ee07 3a90 	vmov	s15, r3
 80083b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80083be:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008500 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083da:	e065      	b.n	80084a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	ee07 3a90 	vmov	s15, r3
 80083e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008508 <HAL_RCC_GetSysClockFreq+0x2ec>
 80083ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ee:	4b40      	ldr	r3, [pc, #256]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008402:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008500 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800840a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800840e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800841a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800841e:	e043      	b.n	80084a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	ee07 3a90 	vmov	s15, r3
 8008426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800842a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800850c <HAL_RCC_GetSysClockFreq+0x2f0>
 800842e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008432:	4b2f      	ldr	r3, [pc, #188]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800843a:	ee07 3a90 	vmov	s15, r3
 800843e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008442:	ed97 6a02 	vldr	s12, [r7, #8]
 8008446:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800844a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800844e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800845a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800845e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008462:	e021      	b.n	80084a8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	ee07 3a90 	vmov	s15, r3
 800846a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008508 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008476:	4b1e      	ldr	r3, [pc, #120]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800847e:	ee07 3a90 	vmov	s15, r3
 8008482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008486:	ed97 6a02 	vldr	s12, [r7, #8]
 800848a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800848e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800849a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800849e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084a6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80084a8:	4b11      	ldr	r3, [pc, #68]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ac:	0a5b      	lsrs	r3, r3, #9
 80084ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084b2:	3301      	adds	r3, #1
 80084b4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	ee07 3a90 	vmov	s15, r3
 80084bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80084c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80084c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084cc:	ee17 3a90 	vmov	r3, s15
 80084d0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80084d2:	e005      	b.n	80084e0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	61bb      	str	r3, [r7, #24]
    break;
 80084d8:	e002      	b.n	80084e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80084da:	4b07      	ldr	r3, [pc, #28]	; (80084f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80084dc:	61bb      	str	r3, [r7, #24]
    break;
 80084de:	bf00      	nop
  }

  return sysclockfreq;
 80084e0:	69bb      	ldr	r3, [r7, #24]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3724      	adds	r7, #36	; 0x24
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	58024400 	.word	0x58024400
 80084f4:	03d09000 	.word	0x03d09000
 80084f8:	003d0900 	.word	0x003d0900
 80084fc:	007a1200 	.word	0x007a1200
 8008500:	46000000 	.word	0x46000000
 8008504:	4c742400 	.word	0x4c742400
 8008508:	4a742400 	.word	0x4a742400
 800850c:	4af42400 	.word	0x4af42400

08008510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008516:	f7ff fe81 	bl	800821c <HAL_RCC_GetSysClockFreq>
 800851a:	4602      	mov	r2, r0
 800851c:	4b10      	ldr	r3, [pc, #64]	; (8008560 <HAL_RCC_GetHCLKFreq+0x50>)
 800851e:	699b      	ldr	r3, [r3, #24]
 8008520:	0a1b      	lsrs	r3, r3, #8
 8008522:	f003 030f 	and.w	r3, r3, #15
 8008526:	490f      	ldr	r1, [pc, #60]	; (8008564 <HAL_RCC_GetHCLKFreq+0x54>)
 8008528:	5ccb      	ldrb	r3, [r1, r3]
 800852a:	f003 031f 	and.w	r3, r3, #31
 800852e:	fa22 f303 	lsr.w	r3, r2, r3
 8008532:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008534:	4b0a      	ldr	r3, [pc, #40]	; (8008560 <HAL_RCC_GetHCLKFreq+0x50>)
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	f003 030f 	and.w	r3, r3, #15
 800853c:	4a09      	ldr	r2, [pc, #36]	; (8008564 <HAL_RCC_GetHCLKFreq+0x54>)
 800853e:	5cd3      	ldrb	r3, [r2, r3]
 8008540:	f003 031f 	and.w	r3, r3, #31
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	fa22 f303 	lsr.w	r3, r2, r3
 800854a:	4a07      	ldr	r2, [pc, #28]	; (8008568 <HAL_RCC_GetHCLKFreq+0x58>)
 800854c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800854e:	4a07      	ldr	r2, [pc, #28]	; (800856c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008554:	4b04      	ldr	r3, [pc, #16]	; (8008568 <HAL_RCC_GetHCLKFreq+0x58>)
 8008556:	681b      	ldr	r3, [r3, #0]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	58024400 	.word	0x58024400
 8008564:	0800ae90 	.word	0x0800ae90
 8008568:	2400000c 	.word	0x2400000c
 800856c:	24000008 	.word	0x24000008

08008570 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008578:	2300      	movs	r3, #0
 800857a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800857c:	2300      	movs	r3, #0
 800857e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d03f      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008590:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008594:	d02a      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008596:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800859a:	d824      	bhi.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800859c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085a0:	d018      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80085a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085a6:	d81e      	bhi.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d003      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80085ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085b0:	d007      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80085b2:	e018      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085b4:	4ba4      	ldr	r3, [pc, #656]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80085b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b8:	4aa3      	ldr	r2, [pc, #652]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80085ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80085c0:	e015      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3304      	adds	r3, #4
 80085c6:	2102      	movs	r1, #2
 80085c8:	4618      	mov	r0, r3
 80085ca:	f001 ff01 	bl	800a3d0 <RCCEx_PLL2_Config>
 80085ce:	4603      	mov	r3, r0
 80085d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80085d2:	e00c      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	3324      	adds	r3, #36	; 0x24
 80085d8:	2102      	movs	r1, #2
 80085da:	4618      	mov	r0, r3
 80085dc:	f001 ffaa 	bl	800a534 <RCCEx_PLL3_Config>
 80085e0:	4603      	mov	r3, r0
 80085e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80085e4:	e003      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	75fb      	strb	r3, [r7, #23]
      break;
 80085ea:	e000      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80085ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085ee:	7dfb      	ldrb	r3, [r7, #23]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d109      	bne.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80085f4:	4b94      	ldr	r3, [pc, #592]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80085f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008600:	4991      	ldr	r1, [pc, #580]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008602:	4313      	orrs	r3, r2
 8008604:	650b      	str	r3, [r1, #80]	; 0x50
 8008606:	e001      	b.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008608:	7dfb      	ldrb	r3, [r7, #23]
 800860a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008614:	2b00      	cmp	r3, #0
 8008616:	d03d      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800861c:	2b04      	cmp	r3, #4
 800861e:	d826      	bhi.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008620:	a201      	add	r2, pc, #4	; (adr r2, 8008628 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008626:	bf00      	nop
 8008628:	0800863d 	.word	0x0800863d
 800862c:	0800864b 	.word	0x0800864b
 8008630:	0800865d 	.word	0x0800865d
 8008634:	08008675 	.word	0x08008675
 8008638:	08008675 	.word	0x08008675
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800863c:	4b82      	ldr	r3, [pc, #520]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	4a81      	ldr	r2, [pc, #516]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008646:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008648:	e015      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	3304      	adds	r3, #4
 800864e:	2100      	movs	r1, #0
 8008650:	4618      	mov	r0, r3
 8008652:	f001 febd 	bl	800a3d0 <RCCEx_PLL2_Config>
 8008656:	4603      	mov	r3, r0
 8008658:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800865a:	e00c      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	3324      	adds	r3, #36	; 0x24
 8008660:	2100      	movs	r1, #0
 8008662:	4618      	mov	r0, r3
 8008664:	f001 ff66 	bl	800a534 <RCCEx_PLL3_Config>
 8008668:	4603      	mov	r3, r0
 800866a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800866c:	e003      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	75fb      	strb	r3, [r7, #23]
      break;
 8008672:	e000      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008676:	7dfb      	ldrb	r3, [r7, #23]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d109      	bne.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800867c:	4b72      	ldr	r3, [pc, #456]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800867e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008680:	f023 0207 	bic.w	r2, r3, #7
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008688:	496f      	ldr	r1, [pc, #444]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800868a:	4313      	orrs	r3, r2
 800868c:	650b      	str	r3, [r1, #80]	; 0x50
 800868e:	e001      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008690:	7dfb      	ldrb	r3, [r7, #23]
 8008692:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800869c:	2b00      	cmp	r3, #0
 800869e:	d051      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80086a6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80086aa:	d036      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80086ac:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80086b0:	d830      	bhi.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80086b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086b6:	d032      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80086b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086bc:	d82a      	bhi.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80086be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80086c2:	d02e      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80086c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80086c8:	d824      	bhi.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80086ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086ce:	d018      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80086d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086d4:	d81e      	bhi.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80086da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086de:	d007      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80086e0:	e018      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086e2:	4b59      	ldr	r3, [pc, #356]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80086e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e6:	4a58      	ldr	r2, [pc, #352]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80086e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80086ee:	e019      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3304      	adds	r3, #4
 80086f4:	2100      	movs	r1, #0
 80086f6:	4618      	mov	r0, r3
 80086f8:	f001 fe6a 	bl	800a3d0 <RCCEx_PLL2_Config>
 80086fc:	4603      	mov	r3, r0
 80086fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008700:	e010      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	3324      	adds	r3, #36	; 0x24
 8008706:	2100      	movs	r1, #0
 8008708:	4618      	mov	r0, r3
 800870a:	f001 ff13 	bl	800a534 <RCCEx_PLL3_Config>
 800870e:	4603      	mov	r3, r0
 8008710:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008712:	e007      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	75fb      	strb	r3, [r7, #23]
      break;
 8008718:	e004      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800871a:	bf00      	nop
 800871c:	e002      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800871e:	bf00      	nop
 8008720:	e000      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008722:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008724:	7dfb      	ldrb	r3, [r7, #23]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d10a      	bne.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800872a:	4b47      	ldr	r3, [pc, #284]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800872c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800872e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008738:	4943      	ldr	r1, [pc, #268]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800873a:	4313      	orrs	r3, r2
 800873c:	658b      	str	r3, [r1, #88]	; 0x58
 800873e:	e001      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008740:	7dfb      	ldrb	r3, [r7, #23]
 8008742:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800874c:	2b00      	cmp	r3, #0
 800874e:	d051      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008756:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800875a:	d036      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800875c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008760:	d830      	bhi.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008762:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008766:	d032      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008768:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800876c:	d82a      	bhi.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800876e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008772:	d02e      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008774:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008778:	d824      	bhi.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800877a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800877e:	d018      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008780:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008784:	d81e      	bhi.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008786:	2b00      	cmp	r3, #0
 8008788:	d003      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800878a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800878e:	d007      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008790:	e018      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008792:	4b2d      	ldr	r3, [pc, #180]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008796:	4a2c      	ldr	r2, [pc, #176]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800879c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800879e:	e019      	b.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	3304      	adds	r3, #4
 80087a4:	2100      	movs	r1, #0
 80087a6:	4618      	mov	r0, r3
 80087a8:	f001 fe12 	bl	800a3d0 <RCCEx_PLL2_Config>
 80087ac:	4603      	mov	r3, r0
 80087ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80087b0:	e010      	b.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	3324      	adds	r3, #36	; 0x24
 80087b6:	2100      	movs	r1, #0
 80087b8:	4618      	mov	r0, r3
 80087ba:	f001 febb 	bl	800a534 <RCCEx_PLL3_Config>
 80087be:	4603      	mov	r3, r0
 80087c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087c2:	e007      	b.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	75fb      	strb	r3, [r7, #23]
      break;
 80087c8:	e004      	b.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80087ca:	bf00      	nop
 80087cc:	e002      	b.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80087ce:	bf00      	nop
 80087d0:	e000      	b.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80087d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087d4:	7dfb      	ldrb	r3, [r7, #23]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10a      	bne.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80087da:	4b1b      	ldr	r3, [pc, #108]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80087dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087de:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80087e8:	4917      	ldr	r1, [pc, #92]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80087ea:	4313      	orrs	r3, r2
 80087ec:	658b      	str	r3, [r1, #88]	; 0x58
 80087ee:	e001      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087f0:	7dfb      	ldrb	r3, [r7, #23]
 80087f2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d035      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008804:	2b30      	cmp	r3, #48	; 0x30
 8008806:	d01c      	beq.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008808:	2b30      	cmp	r3, #48	; 0x30
 800880a:	d817      	bhi.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800880c:	2b20      	cmp	r3, #32
 800880e:	d00c      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008810:	2b20      	cmp	r3, #32
 8008812:	d813      	bhi.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008814:	2b00      	cmp	r3, #0
 8008816:	d019      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8008818:	2b10      	cmp	r3, #16
 800881a:	d10f      	bne.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800881c:	4b0a      	ldr	r3, [pc, #40]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800881e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008820:	4a09      	ldr	r2, [pc, #36]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008826:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008828:	e011      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	3304      	adds	r3, #4
 800882e:	2102      	movs	r1, #2
 8008830:	4618      	mov	r0, r3
 8008832:	f001 fdcd 	bl	800a3d0 <RCCEx_PLL2_Config>
 8008836:	4603      	mov	r3, r0
 8008838:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800883a:	e008      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	75fb      	strb	r3, [r7, #23]
      break;
 8008840:	e005      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8008842:	bf00      	nop
 8008844:	e003      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008846:	bf00      	nop
 8008848:	58024400 	.word	0x58024400
      break;
 800884c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800884e:	7dfb      	ldrb	r3, [r7, #23]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d109      	bne.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008854:	4ba3      	ldr	r3, [pc, #652]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008858:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008860:	49a0      	ldr	r1, [pc, #640]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008862:	4313      	orrs	r3, r2
 8008864:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008866:	e001      	b.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008868:	7dfb      	ldrb	r3, [r7, #23]
 800886a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d047      	beq.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800887c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008880:	d030      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008886:	d82a      	bhi.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008888:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800888c:	d02c      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800888e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008892:	d824      	bhi.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008898:	d018      	beq.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800889a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800889e:	d81e      	bhi.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d003      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80088a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a8:	d007      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80088aa:	e018      	b.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088ac:	4b8d      	ldr	r3, [pc, #564]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80088ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b0:	4a8c      	ldr	r2, [pc, #560]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80088b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80088b8:	e017      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	3304      	adds	r3, #4
 80088be:	2100      	movs	r1, #0
 80088c0:	4618      	mov	r0, r3
 80088c2:	f001 fd85 	bl	800a3d0 <RCCEx_PLL2_Config>
 80088c6:	4603      	mov	r3, r0
 80088c8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80088ca:	e00e      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	3324      	adds	r3, #36	; 0x24
 80088d0:	2100      	movs	r1, #0
 80088d2:	4618      	mov	r0, r3
 80088d4:	f001 fe2e 	bl	800a534 <RCCEx_PLL3_Config>
 80088d8:	4603      	mov	r3, r0
 80088da:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80088dc:	e005      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	75fb      	strb	r3, [r7, #23]
      break;
 80088e2:	e002      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80088e4:	bf00      	nop
 80088e6:	e000      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80088e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d109      	bne.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80088f0:	4b7c      	ldr	r3, [pc, #496]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80088f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088fc:	4979      	ldr	r1, [pc, #484]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80088fe:	4313      	orrs	r3, r2
 8008900:	650b      	str	r3, [r1, #80]	; 0x50
 8008902:	e001      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008904:	7dfb      	ldrb	r3, [r7, #23]
 8008906:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008910:	2b00      	cmp	r3, #0
 8008912:	d049      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800891c:	d02e      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800891e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008922:	d828      	bhi.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008924:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008928:	d02a      	beq.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800892a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800892e:	d822      	bhi.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008930:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008934:	d026      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008936:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800893a:	d81c      	bhi.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800893c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008940:	d010      	beq.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008942:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008946:	d816      	bhi.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008948:	2b00      	cmp	r3, #0
 800894a:	d01d      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800894c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008950:	d111      	bne.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	3304      	adds	r3, #4
 8008956:	2101      	movs	r1, #1
 8008958:	4618      	mov	r0, r3
 800895a:	f001 fd39 	bl	800a3d0 <RCCEx_PLL2_Config>
 800895e:	4603      	mov	r3, r0
 8008960:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008962:	e012      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	3324      	adds	r3, #36	; 0x24
 8008968:	2101      	movs	r1, #1
 800896a:	4618      	mov	r0, r3
 800896c:	f001 fde2 	bl	800a534 <RCCEx_PLL3_Config>
 8008970:	4603      	mov	r3, r0
 8008972:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008974:	e009      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	75fb      	strb	r3, [r7, #23]
      break;
 800897a:	e006      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800897c:	bf00      	nop
 800897e:	e004      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008980:	bf00      	nop
 8008982:	e002      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008984:	bf00      	nop
 8008986:	e000      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800898a:	7dfb      	ldrb	r3, [r7, #23]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d109      	bne.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008990:	4b54      	ldr	r3, [pc, #336]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008994:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800899c:	4951      	ldr	r1, [pc, #324]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800899e:	4313      	orrs	r3, r2
 80089a0:	650b      	str	r3, [r1, #80]	; 0x50
 80089a2:	e001      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089a4:	7dfb      	ldrb	r3, [r7, #23]
 80089a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d04b      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80089ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089be:	d02e      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80089c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089c4:	d828      	bhi.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80089c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ca:	d02a      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80089cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d0:	d822      	bhi.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80089d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089d6:	d026      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80089d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089dc:	d81c      	bhi.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80089de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089e2:	d010      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80089e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089e8:	d816      	bhi.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d01d      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80089ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089f2:	d111      	bne.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	3304      	adds	r3, #4
 80089f8:	2101      	movs	r1, #1
 80089fa:	4618      	mov	r0, r3
 80089fc:	f001 fce8 	bl	800a3d0 <RCCEx_PLL2_Config>
 8008a00:	4603      	mov	r3, r0
 8008a02:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008a04:	e012      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	3324      	adds	r3, #36	; 0x24
 8008a0a:	2101      	movs	r1, #1
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f001 fd91 	bl	800a534 <RCCEx_PLL3_Config>
 8008a12:	4603      	mov	r3, r0
 8008a14:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008a16:	e009      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8008a1c:	e006      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008a1e:	bf00      	nop
 8008a20:	e004      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008a22:	bf00      	nop
 8008a24:	e002      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008a26:	bf00      	nop
 8008a28:	e000      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008a2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a2c:	7dfb      	ldrb	r3, [r7, #23]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10a      	bne.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008a32:	4b2c      	ldr	r3, [pc, #176]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a36:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008a40:	4928      	ldr	r1, [pc, #160]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	658b      	str	r3, [r1, #88]	; 0x58
 8008a46:	e001      	b.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a48:	7dfb      	ldrb	r3, [r7, #23]
 8008a4a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d02f      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a60:	d00e      	beq.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8008a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a66:	d814      	bhi.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d015      	beq.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008a6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a70:	d10f      	bne.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a72:	4b1c      	ldr	r3, [pc, #112]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a76:	4a1b      	ldr	r2, [pc, #108]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008a7e:	e00c      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	3304      	adds	r3, #4
 8008a84:	2101      	movs	r1, #1
 8008a86:	4618      	mov	r0, r3
 8008a88:	f001 fca2 	bl	800a3d0 <RCCEx_PLL2_Config>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008a90:	e003      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	75fb      	strb	r3, [r7, #23]
      break;
 8008a96:	e000      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8008a98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a9a:	7dfb      	ldrb	r3, [r7, #23]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d109      	bne.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008aa0:	4b10      	ldr	r3, [pc, #64]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aac:	490d      	ldr	r1, [pc, #52]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	650b      	str	r3, [r1, #80]	; 0x50
 8008ab2:	e001      	b.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab4:	7dfb      	ldrb	r3, [r7, #23]
 8008ab6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d034      	beq.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ac8:	2b03      	cmp	r3, #3
 8008aca:	d81d      	bhi.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8008acc:	a201      	add	r2, pc, #4	; (adr r2, 8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8008ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad2:	bf00      	nop
 8008ad4:	08008b0f 	.word	0x08008b0f
 8008ad8:	08008ae9 	.word	0x08008ae9
 8008adc:	08008af7 	.word	0x08008af7
 8008ae0:	08008b0f 	.word	0x08008b0f
 8008ae4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ae8:	4bb1      	ldr	r3, [pc, #708]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aec:	4ab0      	ldr	r2, [pc, #704]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008af2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008af4:	e00c      	b.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	3304      	adds	r3, #4
 8008afa:	2102      	movs	r1, #2
 8008afc:	4618      	mov	r0, r3
 8008afe:	f001 fc67 	bl	800a3d0 <RCCEx_PLL2_Config>
 8008b02:	4603      	mov	r3, r0
 8008b04:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008b06:	e003      	b.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b0c:	e000      	b.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8008b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b10:	7dfb      	ldrb	r3, [r7, #23]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d109      	bne.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008b16:	4ba6      	ldr	r3, [pc, #664]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b1a:	f023 0203 	bic.w	r2, r3, #3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b22:	49a3      	ldr	r1, [pc, #652]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008b28:	e001      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
 8008b2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f000 8086 	beq.w	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b3c:	4b9d      	ldr	r3, [pc, #628]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a9c      	ldr	r2, [pc, #624]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b48:	f7f8 fb34 	bl	80011b4 <HAL_GetTick>
 8008b4c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b4e:	e009      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b50:	f7f8 fb30 	bl	80011b4 <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b64      	cmp	r3, #100	; 0x64
 8008b5c:	d902      	bls.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	75fb      	strb	r3, [r7, #23]
        break;
 8008b62:	e005      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b64:	4b93      	ldr	r3, [pc, #588]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d0ef      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8008b70:	7dfb      	ldrb	r3, [r7, #23]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d166      	bne.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008b76:	4b8e      	ldr	r3, [pc, #568]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b80:	4053      	eors	r3, r2
 8008b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d013      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b8a:	4b89      	ldr	r3, [pc, #548]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b92:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b94:	4b86      	ldr	r3, [pc, #536]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b98:	4a85      	ldr	r2, [pc, #532]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b9e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008ba0:	4b83      	ldr	r3, [pc, #524]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba4:	4a82      	ldr	r2, [pc, #520]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008baa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008bac:	4a80      	ldr	r2, [pc, #512]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bbc:	d115      	bne.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bbe:	f7f8 faf9 	bl	80011b4 <HAL_GetTick>
 8008bc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bc4:	e00b      	b.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bc6:	f7f8 faf5 	bl	80011b4 <HAL_GetTick>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d902      	bls.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	75fb      	strb	r3, [r7, #23]
            break;
 8008bdc:	e005      	b.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bde:	4b74      	ldr	r3, [pc, #464]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be2:	f003 0302 	and.w	r3, r3, #2
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d0ed      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d126      	bne.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bfe:	d10d      	bne.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8008c00:	4b6b      	ldr	r3, [pc, #428]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008c0e:	0919      	lsrs	r1, r3, #4
 8008c10:	4b69      	ldr	r3, [pc, #420]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008c12:	400b      	ands	r3, r1
 8008c14:	4966      	ldr	r1, [pc, #408]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008c16:	4313      	orrs	r3, r2
 8008c18:	610b      	str	r3, [r1, #16]
 8008c1a:	e005      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8008c1c:	4b64      	ldr	r3, [pc, #400]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	4a63      	ldr	r2, [pc, #396]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008c22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008c26:	6113      	str	r3, [r2, #16]
 8008c28:	4b61      	ldr	r3, [pc, #388]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008c2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c36:	495e      	ldr	r1, [pc, #376]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	670b      	str	r3, [r1, #112]	; 0x70
 8008c3c:	e004      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
 8008c40:	75bb      	strb	r3, [r7, #22]
 8008c42:	e001      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c44:	7dfb      	ldrb	r3, [r7, #23]
 8008c46:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 0301 	and.w	r3, r3, #1
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d07e      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c58:	2b28      	cmp	r3, #40	; 0x28
 8008c5a:	d867      	bhi.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8008c5c:	a201      	add	r2, pc, #4	; (adr r2, 8008c64 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8008c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c62:	bf00      	nop
 8008c64:	08008d33 	.word	0x08008d33
 8008c68:	08008d2d 	.word	0x08008d2d
 8008c6c:	08008d2d 	.word	0x08008d2d
 8008c70:	08008d2d 	.word	0x08008d2d
 8008c74:	08008d2d 	.word	0x08008d2d
 8008c78:	08008d2d 	.word	0x08008d2d
 8008c7c:	08008d2d 	.word	0x08008d2d
 8008c80:	08008d2d 	.word	0x08008d2d
 8008c84:	08008d09 	.word	0x08008d09
 8008c88:	08008d2d 	.word	0x08008d2d
 8008c8c:	08008d2d 	.word	0x08008d2d
 8008c90:	08008d2d 	.word	0x08008d2d
 8008c94:	08008d2d 	.word	0x08008d2d
 8008c98:	08008d2d 	.word	0x08008d2d
 8008c9c:	08008d2d 	.word	0x08008d2d
 8008ca0:	08008d2d 	.word	0x08008d2d
 8008ca4:	08008d1b 	.word	0x08008d1b
 8008ca8:	08008d2d 	.word	0x08008d2d
 8008cac:	08008d2d 	.word	0x08008d2d
 8008cb0:	08008d2d 	.word	0x08008d2d
 8008cb4:	08008d2d 	.word	0x08008d2d
 8008cb8:	08008d2d 	.word	0x08008d2d
 8008cbc:	08008d2d 	.word	0x08008d2d
 8008cc0:	08008d2d 	.word	0x08008d2d
 8008cc4:	08008d33 	.word	0x08008d33
 8008cc8:	08008d2d 	.word	0x08008d2d
 8008ccc:	08008d2d 	.word	0x08008d2d
 8008cd0:	08008d2d 	.word	0x08008d2d
 8008cd4:	08008d2d 	.word	0x08008d2d
 8008cd8:	08008d2d 	.word	0x08008d2d
 8008cdc:	08008d2d 	.word	0x08008d2d
 8008ce0:	08008d2d 	.word	0x08008d2d
 8008ce4:	08008d33 	.word	0x08008d33
 8008ce8:	08008d2d 	.word	0x08008d2d
 8008cec:	08008d2d 	.word	0x08008d2d
 8008cf0:	08008d2d 	.word	0x08008d2d
 8008cf4:	08008d2d 	.word	0x08008d2d
 8008cf8:	08008d2d 	.word	0x08008d2d
 8008cfc:	08008d2d 	.word	0x08008d2d
 8008d00:	08008d2d 	.word	0x08008d2d
 8008d04:	08008d33 	.word	0x08008d33
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f001 fb5e 	bl	800a3d0 <RCCEx_PLL2_Config>
 8008d14:	4603      	mov	r3, r0
 8008d16:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008d18:	e00c      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	3324      	adds	r3, #36	; 0x24
 8008d1e:	2101      	movs	r1, #1
 8008d20:	4618      	mov	r0, r3
 8008d22:	f001 fc07 	bl	800a534 <RCCEx_PLL3_Config>
 8008d26:	4603      	mov	r3, r0
 8008d28:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008d2a:	e003      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d30:	e000      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8008d32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d34:	7dfb      	ldrb	r3, [r7, #23]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d109      	bne.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008d3a:	4b1d      	ldr	r3, [pc, #116]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d3e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d46:	491a      	ldr	r1, [pc, #104]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	654b      	str	r3, [r1, #84]	; 0x54
 8008d4c:	e001      	b.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d4e:	7dfb      	ldrb	r3, [r7, #23]
 8008d50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 0302 	and.w	r3, r3, #2
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d03e      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d62:	2b05      	cmp	r3, #5
 8008d64:	d820      	bhi.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8008d66:	a201      	add	r2, pc, #4	; (adr r2, 8008d6c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6c:	08008dbd 	.word	0x08008dbd
 8008d70:	08008d85 	.word	0x08008d85
 8008d74:	08008d97 	.word	0x08008d97
 8008d78:	08008dbd 	.word	0x08008dbd
 8008d7c:	08008dbd 	.word	0x08008dbd
 8008d80:	08008dbd 	.word	0x08008dbd
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	3304      	adds	r3, #4
 8008d88:	2101      	movs	r1, #1
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f001 fb20 	bl	800a3d0 <RCCEx_PLL2_Config>
 8008d90:	4603      	mov	r3, r0
 8008d92:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008d94:	e013      	b.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	3324      	adds	r3, #36	; 0x24
 8008d9a:	2101      	movs	r1, #1
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f001 fbc9 	bl	800a534 <RCCEx_PLL3_Config>
 8008da2:	4603      	mov	r3, r0
 8008da4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008da6:	e00a      	b.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	75fb      	strb	r3, [r7, #23]
      break;
 8008dac:	e007      	b.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8008dae:	bf00      	nop
 8008db0:	58024400 	.word	0x58024400
 8008db4:	58024800 	.word	0x58024800
 8008db8:	00ffffcf 	.word	0x00ffffcf
      break;
 8008dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d109      	bne.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008dc4:	4b9f      	ldr	r3, [pc, #636]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dc8:	f023 0207 	bic.w	r2, r3, #7
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd0:	499c      	ldr	r1, [pc, #624]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	654b      	str	r3, [r1, #84]	; 0x54
 8008dd6:	e001      	b.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd8:	7dfb      	ldrb	r3, [r7, #23]
 8008dda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0304 	and.w	r3, r3, #4
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d039      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dee:	2b05      	cmp	r3, #5
 8008df0:	d820      	bhi.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8008df2:	a201      	add	r2, pc, #4	; (adr r2, 8008df8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8008df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df8:	08008e3b 	.word	0x08008e3b
 8008dfc:	08008e11 	.word	0x08008e11
 8008e00:	08008e23 	.word	0x08008e23
 8008e04:	08008e3b 	.word	0x08008e3b
 8008e08:	08008e3b 	.word	0x08008e3b
 8008e0c:	08008e3b 	.word	0x08008e3b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	3304      	adds	r3, #4
 8008e14:	2101      	movs	r1, #1
 8008e16:	4618      	mov	r0, r3
 8008e18:	f001 fada 	bl	800a3d0 <RCCEx_PLL2_Config>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008e20:	e00c      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	3324      	adds	r3, #36	; 0x24
 8008e26:	2101      	movs	r1, #1
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f001 fb83 	bl	800a534 <RCCEx_PLL3_Config>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008e32:	e003      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	75fb      	strb	r3, [r7, #23]
      break;
 8008e38:	e000      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8008e3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10a      	bne.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e42:	4b80      	ldr	r3, [pc, #512]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e46:	f023 0207 	bic.w	r2, r3, #7
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e50:	497c      	ldr	r1, [pc, #496]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	658b      	str	r3, [r1, #88]	; 0x58
 8008e56:	e001      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e58:	7dfb      	ldrb	r3, [r7, #23]
 8008e5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 0320 	and.w	r3, r3, #32
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d04b      	beq.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e72:	d02e      	beq.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8008e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e78:	d828      	bhi.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e7e:	d02a      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8008e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e84:	d822      	bhi.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008e86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e8a:	d026      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008e8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e90:	d81c      	bhi.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e96:	d010      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8008e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e9c:	d816      	bhi.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d01d      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008ea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ea6:	d111      	bne.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	3304      	adds	r3, #4
 8008eac:	2100      	movs	r1, #0
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f001 fa8e 	bl	800a3d0 <RCCEx_PLL2_Config>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008eb8:	e012      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	3324      	adds	r3, #36	; 0x24
 8008ebe:	2102      	movs	r1, #2
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f001 fb37 	bl	800a534 <RCCEx_PLL3_Config>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008eca:	e009      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	75fb      	strb	r3, [r7, #23]
      break;
 8008ed0:	e006      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008ed2:	bf00      	nop
 8008ed4:	e004      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008ed6:	bf00      	nop
 8008ed8:	e002      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008eda:	bf00      	nop
 8008edc:	e000      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ee0:	7dfb      	ldrb	r3, [r7, #23]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10a      	bne.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ee6:	4b57      	ldr	r3, [pc, #348]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ef4:	4953      	ldr	r1, [pc, #332]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	654b      	str	r3, [r1, #84]	; 0x54
 8008efa:	e001      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008efc:	7dfb      	ldrb	r3, [r7, #23]
 8008efe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d04b      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f12:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008f16:	d02e      	beq.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8008f18:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008f1c:	d828      	bhi.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f22:	d02a      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f28:	d822      	bhi.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008f2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f2e:	d026      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8008f30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f34:	d81c      	bhi.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f3a:	d010      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8008f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f40:	d816      	bhi.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d01d      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f4a:	d111      	bne.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	3304      	adds	r3, #4
 8008f50:	2100      	movs	r1, #0
 8008f52:	4618      	mov	r0, r3
 8008f54:	f001 fa3c 	bl	800a3d0 <RCCEx_PLL2_Config>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008f5c:	e012      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	3324      	adds	r3, #36	; 0x24
 8008f62:	2102      	movs	r1, #2
 8008f64:	4618      	mov	r0, r3
 8008f66:	f001 fae5 	bl	800a534 <RCCEx_PLL3_Config>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008f6e:	e009      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	75fb      	strb	r3, [r7, #23]
      break;
 8008f74:	e006      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008f76:	bf00      	nop
 8008f78:	e004      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008f7a:	bf00      	nop
 8008f7c:	e002      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008f7e:	bf00      	nop
 8008f80:	e000      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10a      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008f8a:	4b2e      	ldr	r3, [pc, #184]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f8e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f98:	492a      	ldr	r1, [pc, #168]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	658b      	str	r3, [r1, #88]	; 0x58
 8008f9e:	e001      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fa0:	7dfb      	ldrb	r3, [r7, #23]
 8008fa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d04d      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008fb6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008fba:	d02e      	beq.n	800901a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8008fbc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008fc0:	d828      	bhi.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fc6:	d02a      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fcc:	d822      	bhi.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008fce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008fd2:	d026      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008fd4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008fd8:	d81c      	bhi.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008fda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fde:	d010      	beq.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8008fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fe4:	d816      	bhi.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d01d      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fee:	d111      	bne.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f001 f9ea 	bl	800a3d0 <RCCEx_PLL2_Config>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009000:	e012      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	3324      	adds	r3, #36	; 0x24
 8009006:	2102      	movs	r1, #2
 8009008:	4618      	mov	r0, r3
 800900a:	f001 fa93 	bl	800a534 <RCCEx_PLL3_Config>
 800900e:	4603      	mov	r3, r0
 8009010:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009012:	e009      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	75fb      	strb	r3, [r7, #23]
      break;
 8009018:	e006      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800901a:	bf00      	nop
 800901c:	e004      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800901e:	bf00      	nop
 8009020:	e002      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009022:	bf00      	nop
 8009024:	e000      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009028:	7dfb      	ldrb	r3, [r7, #23]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10c      	bne.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800902e:	4b05      	ldr	r3, [pc, #20]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800903c:	4901      	ldr	r1, [pc, #4]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800903e:	4313      	orrs	r3, r2
 8009040:	658b      	str	r3, [r1, #88]	; 0x58
 8009042:	e003      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009044:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009048:	7dfb      	ldrb	r3, [r7, #23]
 800904a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0308 	and.w	r3, r3, #8
 8009054:	2b00      	cmp	r3, #0
 8009056:	d018      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800905c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009060:	d10a      	bne.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	3324      	adds	r3, #36	; 0x24
 8009066:	2102      	movs	r1, #2
 8009068:	4618      	mov	r0, r3
 800906a:	f001 fa63 	bl	800a534 <RCCEx_PLL3_Config>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d001      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009078:	4b8a      	ldr	r3, [pc, #552]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800907a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800907c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009084:	4987      	ldr	r1, [pc, #540]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009086:	4313      	orrs	r3, r2
 8009088:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 0310 	and.w	r3, r3, #16
 8009092:	2b00      	cmp	r3, #0
 8009094:	d01a      	beq.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800909c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090a0:	d10a      	bne.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	3324      	adds	r3, #36	; 0x24
 80090a6:	2102      	movs	r1, #2
 80090a8:	4618      	mov	r0, r3
 80090aa:	f001 fa43 	bl	800a534 <RCCEx_PLL3_Config>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80090b8:	4b7a      	ldr	r3, [pc, #488]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80090ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090c6:	4977      	ldr	r1, [pc, #476]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80090c8:	4313      	orrs	r3, r2
 80090ca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d034      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80090de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090e2:	d01d      	beq.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80090e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090e8:	d817      	bhi.n	800911a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80090ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090f2:	d009      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80090f4:	e011      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	3304      	adds	r3, #4
 80090fa:	2100      	movs	r1, #0
 80090fc:	4618      	mov	r0, r3
 80090fe:	f001 f967 	bl	800a3d0 <RCCEx_PLL2_Config>
 8009102:	4603      	mov	r3, r0
 8009104:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009106:	e00c      	b.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	3324      	adds	r3, #36	; 0x24
 800910c:	2102      	movs	r1, #2
 800910e:	4618      	mov	r0, r3
 8009110:	f001 fa10 	bl	800a534 <RCCEx_PLL3_Config>
 8009114:	4603      	mov	r3, r0
 8009116:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009118:	e003      	b.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	75fb      	strb	r3, [r7, #23]
      break;
 800911e:	e000      	b.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009120:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009122:	7dfb      	ldrb	r3, [r7, #23]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10a      	bne.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009128:	4b5e      	ldr	r3, [pc, #376]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800912a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800912c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009136:	495b      	ldr	r1, [pc, #364]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009138:	4313      	orrs	r3, r2
 800913a:	658b      	str	r3, [r1, #88]	; 0x58
 800913c:	e001      	b.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800913e:	7dfb      	ldrb	r3, [r7, #23]
 8009140:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800914a:	2b00      	cmp	r3, #0
 800914c:	d033      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009154:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009158:	d01c      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800915a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800915e:	d816      	bhi.n	800918e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009164:	d003      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800916a:	d007      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800916c:	e00f      	b.n	800918e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800916e:	4b4d      	ldr	r3, [pc, #308]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009172:	4a4c      	ldr	r2, [pc, #304]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009178:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800917a:	e00c      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3324      	adds	r3, #36	; 0x24
 8009180:	2101      	movs	r1, #1
 8009182:	4618      	mov	r0, r3
 8009184:	f001 f9d6 	bl	800a534 <RCCEx_PLL3_Config>
 8009188:	4603      	mov	r3, r0
 800918a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800918c:	e003      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	75fb      	strb	r3, [r7, #23]
      break;
 8009192:	e000      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8009194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009196:	7dfb      	ldrb	r3, [r7, #23]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10a      	bne.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800919c:	4b41      	ldr	r3, [pc, #260]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800919e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091aa:	493e      	ldr	r1, [pc, #248]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80091ac:	4313      	orrs	r3, r2
 80091ae:	654b      	str	r3, [r1, #84]	; 0x54
 80091b0:	e001      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b2:	7dfb      	ldrb	r3, [r7, #23]
 80091b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d029      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80091ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091ce:	d007      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80091d0:	e00f      	b.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091d2:	4b34      	ldr	r3, [pc, #208]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80091d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d6:	4a33      	ldr	r2, [pc, #204]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80091d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80091de:	e00b      	b.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	3304      	adds	r3, #4
 80091e4:	2102      	movs	r1, #2
 80091e6:	4618      	mov	r0, r3
 80091e8:	f001 f8f2 	bl	800a3d0 <RCCEx_PLL2_Config>
 80091ec:	4603      	mov	r3, r0
 80091ee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80091f0:	e002      	b.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	75fb      	strb	r3, [r7, #23]
      break;
 80091f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d109      	bne.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80091fe:	4b29      	ldr	r3, [pc, #164]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009202:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800920a:	4926      	ldr	r1, [pc, #152]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800920c:	4313      	orrs	r3, r2
 800920e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009210:	e001      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009212:	7dfb      	ldrb	r3, [r7, #23]
 8009214:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00a      	beq.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	3324      	adds	r3, #36	; 0x24
 8009226:	2102      	movs	r1, #2
 8009228:	4618      	mov	r0, r3
 800922a:	f001 f983 	bl	800a534 <RCCEx_PLL3_Config>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d001      	beq.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d033      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009248:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800924c:	d017      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800924e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009252:	d811      	bhi.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009258:	d013      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800925a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800925e:	d80b      	bhi.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009260:	2b00      	cmp	r3, #0
 8009262:	d010      	beq.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8009264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009268:	d106      	bne.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800926a:	4b0e      	ldr	r3, [pc, #56]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800926c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926e:	4a0d      	ldr	r2, [pc, #52]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009274:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009276:	e007      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	75fb      	strb	r3, [r7, #23]
      break;
 800927c:	e004      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800927e:	bf00      	nop
 8009280:	e002      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009282:	bf00      	nop
 8009284:	e000      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009286:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009288:	7dfb      	ldrb	r3, [r7, #23]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10c      	bne.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800928e:	4b05      	ldr	r3, [pc, #20]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009292:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800929a:	4902      	ldr	r1, [pc, #8]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800929c:	4313      	orrs	r3, r2
 800929e:	654b      	str	r3, [r1, #84]	; 0x54
 80092a0:	e004      	b.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80092a2:	bf00      	nop
 80092a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a8:	7dfb      	ldrb	r3, [r7, #23]
 80092aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d008      	beq.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80092b8:	4b29      	ldr	r3, [pc, #164]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80092ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092c4:	4926      	ldr	r1, [pc, #152]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80092c6:	4313      	orrs	r3, r2
 80092c8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d008      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80092d6:	4b22      	ldr	r3, [pc, #136]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80092d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092e2:	491f      	ldr	r1, [pc, #124]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80092e4:	4313      	orrs	r3, r2
 80092e6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00d      	beq.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80092f4:	4b1a      	ldr	r3, [pc, #104]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	4a19      	ldr	r2, [pc, #100]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80092fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092fe:	6113      	str	r3, [r2, #16]
 8009300:	4b17      	ldr	r3, [pc, #92]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009302:	691a      	ldr	r2, [r3, #16]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800930a:	4915      	ldr	r1, [pc, #84]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800930c:	4313      	orrs	r3, r2
 800930e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	da08      	bge.n	800932a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009318:	4b11      	ldr	r3, [pc, #68]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800931a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800931c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009324:	490e      	ldr	r1, [pc, #56]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009326:	4313      	orrs	r3, r2
 8009328:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009332:	2b00      	cmp	r3, #0
 8009334:	d009      	beq.n	800934a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009336:	4b0a      	ldr	r3, [pc, #40]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800933a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009344:	4906      	ldr	r1, [pc, #24]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009346:	4313      	orrs	r3, r2
 8009348:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800934a:	7dbb      	ldrb	r3, [r7, #22]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d101      	bne.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009350:	2300      	movs	r3, #0
 8009352:	e000      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009354:	2301      	movs	r3, #1
}
 8009356:	4618      	mov	r0, r3
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	58024400 	.word	0x58024400

08009364 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b090      	sub	sp, #64	; 0x40
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009372:	f040 8089 	bne.w	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009376:	4b95      	ldr	r3, [pc, #596]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800937a:	f003 0307 	and.w	r3, r3, #7
 800937e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009382:	2b04      	cmp	r3, #4
 8009384:	d87d      	bhi.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8009386:	a201      	add	r2, pc, #4	; (adr r2, 800938c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8009388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938c:	080093a1 	.word	0x080093a1
 8009390:	080093c5 	.word	0x080093c5
 8009394:	080093e9 	.word	0x080093e9
 8009398:	0800947d 	.word	0x0800947d
 800939c:	0800940d 	.word	0x0800940d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80093a0:	4b8a      	ldr	r3, [pc, #552]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093ac:	d107      	bne.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 feba 	bl	800a12c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80093b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093bc:	e3ef      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80093be:	2300      	movs	r3, #0
 80093c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093c2:	e3ec      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093c4:	4b81      	ldr	r3, [pc, #516]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093d0:	d107      	bne.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093d2:	f107 0318 	add.w	r3, r7, #24
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 fc00 	bl	8009bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093e0:	e3dd      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093e6:	e3da      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093e8:	4b78      	ldr	r3, [pc, #480]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093f4:	d107      	bne.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093f6:	f107 030c 	add.w	r3, r7, #12
 80093fa:	4618      	mov	r0, r3
 80093fc:	f000 fd42 	bl	8009e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009404:	e3cb      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009406:	2300      	movs	r3, #0
 8009408:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800940a:	e3c8      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800940c:	4b6f      	ldr	r3, [pc, #444]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800940e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009410:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009414:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009416:	4b6d      	ldr	r3, [pc, #436]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 0304 	and.w	r3, r3, #4
 800941e:	2b04      	cmp	r3, #4
 8009420:	d10c      	bne.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8009422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009424:	2b00      	cmp	r3, #0
 8009426:	d109      	bne.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009428:	4b68      	ldr	r3, [pc, #416]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	08db      	lsrs	r3, r3, #3
 800942e:	f003 0303 	and.w	r3, r3, #3
 8009432:	4a67      	ldr	r2, [pc, #412]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8009434:	fa22 f303 	lsr.w	r3, r2, r3
 8009438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800943a:	e01e      	b.n	800947a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800943c:	4b63      	ldr	r3, [pc, #396]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009448:	d106      	bne.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800944a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800944c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009450:	d102      	bne.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009452:	4b60      	ldr	r3, [pc, #384]	; (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009454:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009456:	e010      	b.n	800947a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009458:	4b5c      	ldr	r3, [pc, #368]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009460:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009464:	d106      	bne.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800946c:	d102      	bne.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800946e:	4b5a      	ldr	r3, [pc, #360]	; (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009472:	e002      	b.n	800947a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009474:	2300      	movs	r3, #0
 8009476:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009478:	e391      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800947a:	e390      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800947c:	4b57      	ldr	r3, [pc, #348]	; (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800947e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009480:	e38d      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 8009482:	2300      	movs	r3, #0
 8009484:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009486:	e38a      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800948e:	f040 80a7 	bne.w	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009492:	4b4e      	ldr	r3, [pc, #312]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009496:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800949a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800949c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094a2:	d054      	beq.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80094a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094aa:	f200 808b 	bhi.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80094ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094b4:	f000 8083 	beq.w	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80094b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094be:	f200 8081 	bhi.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80094c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094c8:	d02f      	beq.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80094ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094d0:	d878      	bhi.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80094d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d004      	beq.n	80094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80094d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094de:	d012      	beq.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80094e0:	e070      	b.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094e2:	4b3a      	ldr	r3, [pc, #232]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094ee:	d107      	bne.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 fe19 	bl	800a12c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094fe:	e34e      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009500:	2300      	movs	r3, #0
 8009502:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009504:	e34b      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009506:	4b31      	ldr	r3, [pc, #196]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800950e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009512:	d107      	bne.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009514:	f107 0318 	add.w	r3, r7, #24
 8009518:	4618      	mov	r0, r3
 800951a:	f000 fb5f 	bl	8009bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009522:	e33c      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009524:	2300      	movs	r3, #0
 8009526:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009528:	e339      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800952a:	4b28      	ldr	r3, [pc, #160]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009536:	d107      	bne.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009538:	f107 030c 	add.w	r3, r7, #12
 800953c:	4618      	mov	r0, r3
 800953e:	f000 fca1 	bl	8009e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009546:	e32a      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009548:	2300      	movs	r3, #0
 800954a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800954c:	e327      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800954e:	4b1f      	ldr	r3, [pc, #124]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009552:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009556:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009558:	4b1c      	ldr	r3, [pc, #112]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 0304 	and.w	r3, r3, #4
 8009560:	2b04      	cmp	r3, #4
 8009562:	d10c      	bne.n	800957e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8009564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009566:	2b00      	cmp	r3, #0
 8009568:	d109      	bne.n	800957e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800956a:	4b18      	ldr	r3, [pc, #96]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	08db      	lsrs	r3, r3, #3
 8009570:	f003 0303 	and.w	r3, r3, #3
 8009574:	4a16      	ldr	r2, [pc, #88]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8009576:	fa22 f303 	lsr.w	r3, r2, r3
 800957a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800957c:	e01e      	b.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800957e:	4b13      	ldr	r3, [pc, #76]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800958a:	d106      	bne.n	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800958c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800958e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009592:	d102      	bne.n	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009594:	4b0f      	ldr	r3, [pc, #60]	; (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009598:	e010      	b.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800959a:	4b0c      	ldr	r3, [pc, #48]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095a6:	d106      	bne.n	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80095a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095ae:	d102      	bne.n	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80095b0:	4b09      	ldr	r3, [pc, #36]	; (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80095b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095b4:	e002      	b.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80095b6:	2300      	movs	r3, #0
 80095b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80095ba:	e2f0      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80095bc:	e2ef      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80095be:	4b07      	ldr	r3, [pc, #28]	; (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80095c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095c2:	e2ec      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 80095c4:	2300      	movs	r3, #0
 80095c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095c8:	e2e9      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80095ca:	bf00      	nop
 80095cc:	58024400 	.word	0x58024400
 80095d0:	03d09000 	.word	0x03d09000
 80095d4:	003d0900 	.word	0x003d0900
 80095d8:	007a1200 	.word	0x007a1200
 80095dc:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095e6:	f040 809c 	bne.w	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80095ea:	4b9d      	ldr	r3, [pc, #628]	; (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80095ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ee:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80095f2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80095f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095fa:	d054      	beq.n	80096a6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80095fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009602:	f200 808b 	bhi.w	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8009606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009608:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800960c:	f000 8083 	beq.w	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009612:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009616:	f200 8081 	bhi.w	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800961a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009620:	d02f      	beq.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009628:	d878      	bhi.n	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800962a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962c:	2b00      	cmp	r3, #0
 800962e:	d004      	beq.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8009630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009632:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009636:	d012      	beq.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009638:	e070      	b.n	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800963a:	4b89      	ldr	r3, [pc, #548]	; (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009642:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009646:	d107      	bne.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800964c:	4618      	mov	r0, r3
 800964e:	f000 fd6d 	bl	800a12c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009654:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009656:	e2a2      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009658:	2300      	movs	r3, #0
 800965a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800965c:	e29f      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800965e:	4b80      	ldr	r3, [pc, #512]	; (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009666:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800966a:	d107      	bne.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800966c:	f107 0318 	add.w	r3, r7, #24
 8009670:	4618      	mov	r0, r3
 8009672:	f000 fab3 	bl	8009bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800967a:	e290      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800967c:	2300      	movs	r3, #0
 800967e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009680:	e28d      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009682:	4b77      	ldr	r3, [pc, #476]	; (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800968a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800968e:	d107      	bne.n	80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009690:	f107 030c 	add.w	r3, r7, #12
 8009694:	4618      	mov	r0, r3
 8009696:	f000 fbf5 	bl	8009e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800969e:	e27e      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80096a0:	2300      	movs	r3, #0
 80096a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096a4:	e27b      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80096a6:	4b6e      	ldr	r3, [pc, #440]	; (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80096a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096ae:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096b0:	4b6b      	ldr	r3, [pc, #428]	; (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0304 	and.w	r3, r3, #4
 80096b8:	2b04      	cmp	r3, #4
 80096ba:	d10c      	bne.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80096bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d109      	bne.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096c2:	4b67      	ldr	r3, [pc, #412]	; (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	08db      	lsrs	r3, r3, #3
 80096c8:	f003 0303 	and.w	r3, r3, #3
 80096cc:	4a65      	ldr	r2, [pc, #404]	; (8009864 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80096ce:	fa22 f303 	lsr.w	r3, r2, r3
 80096d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096d4:	e01e      	b.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096d6:	4b62      	ldr	r3, [pc, #392]	; (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096e2:	d106      	bne.n	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80096e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096ea:	d102      	bne.n	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80096ec:	4b5e      	ldr	r3, [pc, #376]	; (8009868 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80096ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096f0:	e010      	b.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096f2:	4b5b      	ldr	r3, [pc, #364]	; (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096fe:	d106      	bne.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8009700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009702:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009706:	d102      	bne.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009708:	4b58      	ldr	r3, [pc, #352]	; (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800970a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800970c:	e002      	b.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800970e:	2300      	movs	r3, #0
 8009710:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009712:	e244      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009714:	e243      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009716:	4b56      	ldr	r3, [pc, #344]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009718:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800971a:	e240      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800971c:	2300      	movs	r3, #0
 800971e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009720:	e23d      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009728:	f040 80a7 	bne.w	800987a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800972c:	4b4c      	ldr	r3, [pc, #304]	; (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800972e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009730:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009734:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800973c:	d055      	beq.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800973e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009744:	f200 8096 	bhi.w	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8009748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800974e:	f000 8084 	beq.w	800985a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009754:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009758:	f200 808c 	bhi.w	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800975c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009762:	d030      	beq.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8009764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800976a:	f200 8083 	bhi.w	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800976e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009770:	2b00      	cmp	r3, #0
 8009772:	d004      	beq.n	800977e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8009774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800977a:	d012      	beq.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 800977c:	e07a      	b.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800977e:	4b38      	ldr	r3, [pc, #224]	; (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009786:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800978a:	d107      	bne.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800978c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009790:	4618      	mov	r0, r3
 8009792:	f000 fccb 	bl	800a12c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009798:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800979a:	e200      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097a0:	e1fd      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097a2:	4b2f      	ldr	r3, [pc, #188]	; (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097ae:	d107      	bne.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097b0:	f107 0318 	add.w	r3, r7, #24
 80097b4:	4618      	mov	r0, r3
 80097b6:	f000 fa11 	bl	8009bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80097be:	e1ee      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80097c0:	2300      	movs	r3, #0
 80097c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097c4:	e1eb      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80097c6:	4b26      	ldr	r3, [pc, #152]	; (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097d2:	d107      	bne.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097d4:	f107 030c 	add.w	r3, r7, #12
 80097d8:	4618      	mov	r0, r3
 80097da:	f000 fb53 	bl	8009e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80097e2:	e1dc      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80097e4:	2300      	movs	r3, #0
 80097e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097e8:	e1d9      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80097ea:	4b1d      	ldr	r3, [pc, #116]	; (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80097ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80097f2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097f4:	4b1a      	ldr	r3, [pc, #104]	; (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 0304 	and.w	r3, r3, #4
 80097fc:	2b04      	cmp	r3, #4
 80097fe:	d10c      	bne.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8009800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009802:	2b00      	cmp	r3, #0
 8009804:	d109      	bne.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009806:	4b16      	ldr	r3, [pc, #88]	; (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	08db      	lsrs	r3, r3, #3
 800980c:	f003 0303 	and.w	r3, r3, #3
 8009810:	4a14      	ldr	r2, [pc, #80]	; (8009864 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009812:	fa22 f303 	lsr.w	r3, r2, r3
 8009816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009818:	e01e      	b.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800981a:	4b11      	ldr	r3, [pc, #68]	; (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009826:	d106      	bne.n	8009836 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 8009828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800982a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800982e:	d102      	bne.n	8009836 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009830:	4b0d      	ldr	r3, [pc, #52]	; (8009868 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009834:	e010      	b.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009836:	4b0a      	ldr	r3, [pc, #40]	; (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800983e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009842:	d106      	bne.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8009844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009846:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800984a:	d102      	bne.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800984c:	4b07      	ldr	r3, [pc, #28]	; (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800984e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009850:	e002      	b.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009852:	2300      	movs	r3, #0
 8009854:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009856:	e1a2      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009858:	e1a1      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800985a:	4b05      	ldr	r3, [pc, #20]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800985c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800985e:	e19e      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009860:	58024400 	.word	0x58024400
 8009864:	03d09000 	.word	0x03d09000
 8009868:	003d0900 	.word	0x003d0900
 800986c:	007a1200 	.word	0x007a1200
 8009870:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8009874:	2300      	movs	r3, #0
 8009876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009878:	e191      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009880:	d173      	bne.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009882:	4b9b      	ldr	r3, [pc, #620]	; (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009886:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800988a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800988c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009892:	d02f      	beq.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8009894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009896:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800989a:	d863      	bhi.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800989c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d004      	beq.n	80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80098a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098a8:	d012      	beq.n	80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 80098aa:	e05b      	b.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098ac:	4b90      	ldr	r3, [pc, #576]	; (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098b8:	d107      	bne.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098ba:	f107 0318 	add.w	r3, r7, #24
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 f98c 	bl	8009bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80098c8:	e169      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80098ca:	2300      	movs	r3, #0
 80098cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098ce:	e166      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098d0:	4b87      	ldr	r3, [pc, #540]	; (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098dc:	d107      	bne.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098de:	f107 030c 	add.w	r3, r7, #12
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 face 	bl	8009e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80098ec:	e157      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80098ee:	2300      	movs	r3, #0
 80098f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098f2:	e154      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80098f4:	4b7e      	ldr	r3, [pc, #504]	; (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80098f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80098fc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80098fe:	4b7c      	ldr	r3, [pc, #496]	; (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 0304 	and.w	r3, r3, #4
 8009906:	2b04      	cmp	r3, #4
 8009908:	d10c      	bne.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800990a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800990c:	2b00      	cmp	r3, #0
 800990e:	d109      	bne.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009910:	4b77      	ldr	r3, [pc, #476]	; (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	08db      	lsrs	r3, r3, #3
 8009916:	f003 0303 	and.w	r3, r3, #3
 800991a:	4a76      	ldr	r2, [pc, #472]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800991c:	fa22 f303 	lsr.w	r3, r2, r3
 8009920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009922:	e01e      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009924:	4b72      	ldr	r3, [pc, #456]	; (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800992c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009930:	d106      	bne.n	8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8009932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009934:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009938:	d102      	bne.n	8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800993a:	4b6f      	ldr	r3, [pc, #444]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800993c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800993e:	e010      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009940:	4b6b      	ldr	r3, [pc, #428]	; (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800994c:	d106      	bne.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800994e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009954:	d102      	bne.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009956:	4b69      	ldr	r3, [pc, #420]	; (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800995a:	e002      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800995c:	2300      	movs	r3, #0
 800995e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009960:	e11d      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009962:	e11c      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8009964:	2300      	movs	r3, #0
 8009966:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009968:	e119      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009970:	d133      	bne.n	80099da <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009972:	4b5f      	ldr	r3, [pc, #380]	; (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800997a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800997c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997e:	2b00      	cmp	r3, #0
 8009980:	d004      	beq.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 8009982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009988:	d012      	beq.n	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800998a:	e023      	b.n	80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800998c:	4b58      	ldr	r3, [pc, #352]	; (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009994:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009998:	d107      	bne.n	80099aa <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800999a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 fbc4 	bl	800a12c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80099a8:	e0f9      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 80099aa:	2300      	movs	r3, #0
 80099ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099ae:	e0f6      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099b0:	4b4f      	ldr	r3, [pc, #316]	; (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099bc:	d107      	bne.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099be:	f107 0318 	add.w	r3, r7, #24
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 f90a 	bl	8009bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80099c8:	6a3b      	ldr	r3, [r7, #32]
 80099ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80099cc:	e0e7      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 80099ce:	2300      	movs	r3, #0
 80099d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099d2:	e0e4      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 80099d4:	2300      	movs	r3, #0
 80099d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099d8:	e0e1      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099e0:	f040 808e 	bne.w	8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80099e4:	4b42      	ldr	r3, [pc, #264]	; (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80099e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099e8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80099ec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80099ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099f4:	d06b      	beq.n	8009ace <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 80099f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099fc:	d874      	bhi.n	8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80099fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a04:	d056      	beq.n	8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 8009a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a0c:	d86c      	bhi.n	8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8009a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a14:	d03b      	beq.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8009a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a1c:	d864      	bhi.n	8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8009a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a24:	d021      	beq.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 8009a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a2c:	d85c      	bhi.n	8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8009a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d004      	beq.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8009a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a3a:	d004      	beq.n	8009a46 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 8009a3c:	e054      	b.n	8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009a3e:	f000 f8b7 	bl	8009bb0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a42:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009a44:	e0ab      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a46:	4b2a      	ldr	r3, [pc, #168]	; (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a52:	d107      	bne.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a54:	f107 0318 	add.w	r3, r7, #24
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f000 f8bf 	bl	8009bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a62:	e09c      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009a64:	2300      	movs	r3, #0
 8009a66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a68:	e099      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a6a:	4b21      	ldr	r3, [pc, #132]	; (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a76:	d107      	bne.n	8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a78:	f107 030c 	add.w	r3, r7, #12
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f000 fa01 	bl	8009e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a86:	e08a      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a8c:	e087      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a8e:	4b18      	ldr	r3, [pc, #96]	; (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f003 0304 	and.w	r3, r3, #4
 8009a96:	2b04      	cmp	r3, #4
 8009a98:	d109      	bne.n	8009aae <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a9a:	4b15      	ldr	r3, [pc, #84]	; (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	08db      	lsrs	r3, r3, #3
 8009aa0:	f003 0303 	and.w	r3, r3, #3
 8009aa4:	4a13      	ldr	r2, [pc, #76]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009aac:	e077      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ab2:	e074      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009ab4:	4b0e      	ldr	r3, [pc, #56]	; (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ac0:	d102      	bne.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 8009ac2:	4b0d      	ldr	r3, [pc, #52]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8009ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ac6:	e06a      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009acc:	e067      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009ace:	4b08      	ldr	r3, [pc, #32]	; (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ada:	d102      	bne.n	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 8009adc:	4b07      	ldr	r3, [pc, #28]	; (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009ade:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009ae0:	e05d      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ae6:	e05a      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009aec:	e057      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009aee:	bf00      	nop
 8009af0:	58024400 	.word	0x58024400
 8009af4:	03d09000 	.word	0x03d09000
 8009af8:	003d0900 	.word	0x003d0900
 8009afc:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b06:	d148      	bne.n	8009b9a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009b08:	4b27      	ldr	r3, [pc, #156]	; (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b10:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b18:	d02a      	beq.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 8009b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b20:	d838      	bhi.n	8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8009b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d004      	beq.n	8009b32 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 8009b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b2e:	d00d      	beq.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 8009b30:	e030      	b.n	8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b32:	4b1d      	ldr	r3, [pc, #116]	; (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b3e:	d102      	bne.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 8009b40:	4b1a      	ldr	r3, [pc, #104]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8009b42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b44:	e02b      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009b46:	2300      	movs	r3, #0
 8009b48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b4a:	e028      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b4c:	4b16      	ldr	r3, [pc, #88]	; (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b58:	d107      	bne.n	8009b6a <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f000 fae4 	bl	800a12c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b68:	e019      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b6e:	e016      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b70:	4b0d      	ldr	r3, [pc, #52]	; (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b7c:	d107      	bne.n	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b7e:	f107 0318 	add.w	r3, r7, #24
 8009b82:	4618      	mov	r0, r3
 8009b84:	f000 f82a 	bl	8009bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b8c:	e007      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b92:	e004      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 8009b94:	2300      	movs	r3, #0
 8009b96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b98:	e001      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3740      	adds	r7, #64	; 0x40
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	58024400 	.word	0x58024400
 8009bac:	007a1200 	.word	0x007a1200

08009bb0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009bb4:	f7fe fcac 	bl	8008510 <HAL_RCC_GetHCLKFreq>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	4b06      	ldr	r3, [pc, #24]	; (8009bd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	091b      	lsrs	r3, r3, #4
 8009bc0:	f003 0307 	and.w	r3, r3, #7
 8009bc4:	4904      	ldr	r1, [pc, #16]	; (8009bd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009bc6:	5ccb      	ldrb	r3, [r1, r3]
 8009bc8:	f003 031f 	and.w	r3, r3, #31
 8009bcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	58024400 	.word	0x58024400
 8009bd8:	0800ae90 	.word	0x0800ae90

08009bdc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b089      	sub	sp, #36	; 0x24
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009be4:	4ba1      	ldr	r3, [pc, #644]	; (8009e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be8:	f003 0303 	and.w	r3, r3, #3
 8009bec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009bee:	4b9f      	ldr	r3, [pc, #636]	; (8009e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf2:	0b1b      	lsrs	r3, r3, #12
 8009bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bf8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009bfa:	4b9c      	ldr	r3, [pc, #624]	; (8009e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bfe:	091b      	lsrs	r3, r3, #4
 8009c00:	f003 0301 	and.w	r3, r3, #1
 8009c04:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009c06:	4b99      	ldr	r3, [pc, #612]	; (8009e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c0a:	08db      	lsrs	r3, r3, #3
 8009c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c10:	693a      	ldr	r2, [r7, #16]
 8009c12:	fb02 f303 	mul.w	r3, r2, r3
 8009c16:	ee07 3a90 	vmov	s15, r3
 8009c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 8111 	beq.w	8009e4c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	f000 8083 	beq.w	8009d38 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	f200 80a1 	bhi.w	8009d7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d003      	beq.n	8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d056      	beq.n	8009cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009c46:	e099      	b.n	8009d7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c48:	4b88      	ldr	r3, [pc, #544]	; (8009e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 0320 	and.w	r3, r3, #32
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d02d      	beq.n	8009cb0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c54:	4b85      	ldr	r3, [pc, #532]	; (8009e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	08db      	lsrs	r3, r3, #3
 8009c5a:	f003 0303 	and.w	r3, r3, #3
 8009c5e:	4a84      	ldr	r2, [pc, #528]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009c60:	fa22 f303 	lsr.w	r3, r2, r3
 8009c64:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	ee07 3a90 	vmov	s15, r3
 8009c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	ee07 3a90 	vmov	s15, r3
 8009c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c7e:	4b7b      	ldr	r3, [pc, #492]	; (8009e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c86:	ee07 3a90 	vmov	s15, r3
 8009c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009caa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009cae:	e087      	b.n	8009dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	ee07 3a90 	vmov	s15, r3
 8009cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009e78 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cc2:	4b6a      	ldr	r3, [pc, #424]	; (8009e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cca:	ee07 3a90 	vmov	s15, r3
 8009cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cf2:	e065      	b.n	8009dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	ee07 3a90 	vmov	s15, r3
 8009cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d06:	4b59      	ldr	r3, [pc, #356]	; (8009e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d0e:	ee07 3a90 	vmov	s15, r3
 8009d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d36:	e043      	b.n	8009dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	ee07 3a90 	vmov	s15, r3
 8009d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d4a:	4b48      	ldr	r3, [pc, #288]	; (8009e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d52:	ee07 3a90 	vmov	s15, r3
 8009d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d7a:	e021      	b.n	8009dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	ee07 3a90 	vmov	s15, r3
 8009d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d8e:	4b37      	ldr	r3, [pc, #220]	; (8009e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d96:	ee07 3a90 	vmov	s15, r3
 8009d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009da2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009dbe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009dc0:	4b2a      	ldr	r3, [pc, #168]	; (8009e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc4:	0a5b      	lsrs	r3, r3, #9
 8009dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dca:	ee07 3a90 	vmov	s15, r3
 8009dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009de6:	ee17 2a90 	vmov	r2, s15
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009dee:	4b1f      	ldr	r3, [pc, #124]	; (8009e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df2:	0c1b      	lsrs	r3, r3, #16
 8009df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009df8:	ee07 3a90 	vmov	s15, r3
 8009dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e08:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e14:	ee17 2a90 	vmov	r2, s15
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009e1c:	4b13      	ldr	r3, [pc, #76]	; (8009e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e20:	0e1b      	lsrs	r3, r3, #24
 8009e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e26:	ee07 3a90 	vmov	s15, r3
 8009e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e42:	ee17 2a90 	vmov	r2, s15
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009e4a:	e008      	b.n	8009e5e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	609a      	str	r2, [r3, #8]
}
 8009e5e:	bf00      	nop
 8009e60:	3724      	adds	r7, #36	; 0x24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	58024400 	.word	0x58024400
 8009e70:	03d09000 	.word	0x03d09000
 8009e74:	46000000 	.word	0x46000000
 8009e78:	4c742400 	.word	0x4c742400
 8009e7c:	4a742400 	.word	0x4a742400
 8009e80:	4af42400 	.word	0x4af42400

08009e84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b089      	sub	sp, #36	; 0x24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e8c:	4ba1      	ldr	r3, [pc, #644]	; (800a114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e90:	f003 0303 	and.w	r3, r3, #3
 8009e94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009e96:	4b9f      	ldr	r3, [pc, #636]	; (800a114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9a:	0d1b      	lsrs	r3, r3, #20
 8009e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ea0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009ea2:	4b9c      	ldr	r3, [pc, #624]	; (800a114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea6:	0a1b      	lsrs	r3, r3, #8
 8009ea8:	f003 0301 	and.w	r3, r3, #1
 8009eac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009eae:	4b99      	ldr	r3, [pc, #612]	; (800a114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eb2:	08db      	lsrs	r3, r3, #3
 8009eb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	fb02 f303 	mul.w	r3, r2, r3
 8009ebe:	ee07 3a90 	vmov	s15, r3
 8009ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ec6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f000 8111 	beq.w	800a0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	f000 8083 	beq.w	8009fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	f200 80a1 	bhi.w	800a024 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d003      	beq.n	8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d056      	beq.n	8009f9c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009eee:	e099      	b.n	800a024 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ef0:	4b88      	ldr	r3, [pc, #544]	; (800a114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f003 0320 	and.w	r3, r3, #32
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d02d      	beq.n	8009f58 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009efc:	4b85      	ldr	r3, [pc, #532]	; (800a114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	08db      	lsrs	r3, r3, #3
 8009f02:	f003 0303 	and.w	r3, r3, #3
 8009f06:	4a84      	ldr	r2, [pc, #528]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009f08:	fa22 f303 	lsr.w	r3, r2, r3
 8009f0c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	ee07 3a90 	vmov	s15, r3
 8009f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	ee07 3a90 	vmov	s15, r3
 8009f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f26:	4b7b      	ldr	r3, [pc, #492]	; (800a114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f2e:	ee07 3a90 	vmov	s15, r3
 8009f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a11c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f52:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009f56:	e087      	b.n	800a068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	ee07 3a90 	vmov	s15, r3
 8009f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a120 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f6a:	4b6a      	ldr	r3, [pc, #424]	; (800a114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f72:	ee07 3a90 	vmov	s15, r3
 8009f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a11c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f9a:	e065      	b.n	800a068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	ee07 3a90 	vmov	s15, r3
 8009fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fa6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fae:	4b59      	ldr	r3, [pc, #356]	; (800a114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fb6:	ee07 3a90 	vmov	s15, r3
 8009fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fc2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a11c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fde:	e043      	b.n	800a068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	ee07 3a90 	vmov	s15, r3
 8009fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ff2:	4b48      	ldr	r3, [pc, #288]	; (800a114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ffa:	ee07 3a90 	vmov	s15, r3
 8009ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a002:	ed97 6a03 	vldr	s12, [r7, #12]
 800a006:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a11c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a00a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a00e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a01a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a01e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a022:	e021      	b.n	800a068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	ee07 3a90 	vmov	s15, r3
 800a02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a02e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a036:	4b37      	ldr	r3, [pc, #220]	; (800a114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a03e:	ee07 3a90 	vmov	s15, r3
 800a042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a046:	ed97 6a03 	vldr	s12, [r7, #12]
 800a04a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a11c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a04e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a062:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a066:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a068:	4b2a      	ldr	r3, [pc, #168]	; (800a114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06c:	0a5b      	lsrs	r3, r3, #9
 800a06e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a072:	ee07 3a90 	vmov	s15, r3
 800a076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a07a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a07e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a082:	edd7 6a07 	vldr	s13, [r7, #28]
 800a086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a08a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a08e:	ee17 2a90 	vmov	r2, s15
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a096:	4b1f      	ldr	r3, [pc, #124]	; (800a114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09a:	0c1b      	lsrs	r3, r3, #16
 800a09c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0a0:	ee07 3a90 	vmov	s15, r3
 800a0a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0bc:	ee17 2a90 	vmov	r2, s15
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a0c4:	4b13      	ldr	r3, [pc, #76]	; (800a114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c8:	0e1b      	lsrs	r3, r3, #24
 800a0ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0ce:	ee07 3a90 	vmov	s15, r3
 800a0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0de:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0ea:	ee17 2a90 	vmov	r2, s15
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a0f2:	e008      	b.n	800a106 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	609a      	str	r2, [r3, #8]
}
 800a106:	bf00      	nop
 800a108:	3724      	adds	r7, #36	; 0x24
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	58024400 	.word	0x58024400
 800a118:	03d09000 	.word	0x03d09000
 800a11c:	46000000 	.word	0x46000000
 800a120:	4c742400 	.word	0x4c742400
 800a124:	4a742400 	.word	0x4a742400
 800a128:	4af42400 	.word	0x4af42400

0800a12c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b089      	sub	sp, #36	; 0x24
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a134:	4ba0      	ldr	r3, [pc, #640]	; (800a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a138:	f003 0303 	and.w	r3, r3, #3
 800a13c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a13e:	4b9e      	ldr	r3, [pc, #632]	; (800a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a142:	091b      	lsrs	r3, r3, #4
 800a144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a148:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a14a:	4b9b      	ldr	r3, [pc, #620]	; (800a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14e:	f003 0301 	and.w	r3, r3, #1
 800a152:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a154:	4b98      	ldr	r3, [pc, #608]	; (800a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a158:	08db      	lsrs	r3, r3, #3
 800a15a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a15e:	693a      	ldr	r2, [r7, #16]
 800a160:	fb02 f303 	mul.w	r3, r2, r3
 800a164:	ee07 3a90 	vmov	s15, r3
 800a168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a16c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	2b00      	cmp	r3, #0
 800a174:	f000 8111 	beq.w	800a39a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	f000 8083 	beq.w	800a286 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	2b02      	cmp	r3, #2
 800a184:	f200 80a1 	bhi.w	800a2ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d003      	beq.n	800a196 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	2b01      	cmp	r3, #1
 800a192:	d056      	beq.n	800a242 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a194:	e099      	b.n	800a2ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a196:	4b88      	ldr	r3, [pc, #544]	; (800a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f003 0320 	and.w	r3, r3, #32
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d02d      	beq.n	800a1fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a1a2:	4b85      	ldr	r3, [pc, #532]	; (800a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	08db      	lsrs	r3, r3, #3
 800a1a8:	f003 0303 	and.w	r3, r3, #3
 800a1ac:	4a83      	ldr	r2, [pc, #524]	; (800a3bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a1ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a1b2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	ee07 3a90 	vmov	s15, r3
 800a1ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	ee07 3a90 	vmov	s15, r3
 800a1c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1cc:	4b7a      	ldr	r3, [pc, #488]	; (800a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1d4:	ee07 3a90 	vmov	s15, r3
 800a1d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1e0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1f8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a1fc:	e087      	b.n	800a30e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	ee07 3a90 	vmov	s15, r3
 800a204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a208:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a3c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a20c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a210:	4b69      	ldr	r3, [pc, #420]	; (800a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a218:	ee07 3a90 	vmov	s15, r3
 800a21c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a220:	ed97 6a03 	vldr	s12, [r7, #12]
 800a224:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a228:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a22c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a230:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a234:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a23c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a240:	e065      	b.n	800a30e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	ee07 3a90 	vmov	s15, r3
 800a248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a24c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a3c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a254:	4b58      	ldr	r3, [pc, #352]	; (800a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a25c:	ee07 3a90 	vmov	s15, r3
 800a260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a264:	ed97 6a03 	vldr	s12, [r7, #12]
 800a268:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a26c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a270:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a274:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a278:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a27c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a280:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a284:	e043      	b.n	800a30e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	ee07 3a90 	vmov	s15, r3
 800a28c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a290:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a3cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a298:	4b47      	ldr	r3, [pc, #284]	; (800a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a29c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2a0:	ee07 3a90 	vmov	s15, r3
 800a2a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2c8:	e021      	b.n	800a30e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	ee07 3a90 	vmov	s15, r3
 800a2d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a3c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a2d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2dc:	4b36      	ldr	r3, [pc, #216]	; (800a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2e4:	ee07 3a90 	vmov	s15, r3
 800a2e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a300:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a304:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a308:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a30c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a30e:	4b2a      	ldr	r3, [pc, #168]	; (800a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a312:	0a5b      	lsrs	r3, r3, #9
 800a314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a318:	ee07 3a90 	vmov	s15, r3
 800a31c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a320:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a324:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a328:	edd7 6a07 	vldr	s13, [r7, #28]
 800a32c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a334:	ee17 2a90 	vmov	r2, s15
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a33c:	4b1e      	ldr	r3, [pc, #120]	; (800a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a33e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a340:	0c1b      	lsrs	r3, r3, #16
 800a342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a346:	ee07 3a90 	vmov	s15, r3
 800a34a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a34e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a352:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a356:	edd7 6a07 	vldr	s13, [r7, #28]
 800a35a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a35e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a362:	ee17 2a90 	vmov	r2, s15
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a36a:	4b13      	ldr	r3, [pc, #76]	; (800a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a36e:	0e1b      	lsrs	r3, r3, #24
 800a370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a374:	ee07 3a90 	vmov	s15, r3
 800a378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a37c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a380:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a384:	edd7 6a07 	vldr	s13, [r7, #28]
 800a388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a38c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a390:	ee17 2a90 	vmov	r2, s15
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a398:	e008      	b.n	800a3ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	609a      	str	r2, [r3, #8]
}
 800a3ac:	bf00      	nop
 800a3ae:	3724      	adds	r7, #36	; 0x24
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr
 800a3b8:	58024400 	.word	0x58024400
 800a3bc:	03d09000 	.word	0x03d09000
 800a3c0:	46000000 	.word	0x46000000
 800a3c4:	4c742400 	.word	0x4c742400
 800a3c8:	4a742400 	.word	0x4a742400
 800a3cc:	4af42400 	.word	0x4af42400

0800a3d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3de:	4b53      	ldr	r3, [pc, #332]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e2:	f003 0303 	and.w	r3, r3, #3
 800a3e6:	2b03      	cmp	r3, #3
 800a3e8:	d101      	bne.n	800a3ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e099      	b.n	800a522 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a3ee:	4b4f      	ldr	r3, [pc, #316]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a4e      	ldr	r2, [pc, #312]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a3f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a3f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3fa:	f7f6 fedb 	bl	80011b4 <HAL_GetTick>
 800a3fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a400:	e008      	b.n	800a414 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a402:	f7f6 fed7 	bl	80011b4 <HAL_GetTick>
 800a406:	4602      	mov	r2, r0
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	1ad3      	subs	r3, r2, r3
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	d901      	bls.n	800a414 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a410:	2303      	movs	r3, #3
 800a412:	e086      	b.n	800a522 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a414:	4b45      	ldr	r3, [pc, #276]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1f0      	bne.n	800a402 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a420:	4b42      	ldr	r3, [pc, #264]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a424:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	031b      	lsls	r3, r3, #12
 800a42e:	493f      	ldr	r1, [pc, #252]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a430:	4313      	orrs	r3, r2
 800a432:	628b      	str	r3, [r1, #40]	; 0x28
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	3b01      	subs	r3, #1
 800a43a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	3b01      	subs	r3, #1
 800a444:	025b      	lsls	r3, r3, #9
 800a446:	b29b      	uxth	r3, r3
 800a448:	431a      	orrs	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	3b01      	subs	r3, #1
 800a450:	041b      	lsls	r3, r3, #16
 800a452:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a456:	431a      	orrs	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	3b01      	subs	r3, #1
 800a45e:	061b      	lsls	r3, r3, #24
 800a460:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a464:	4931      	ldr	r1, [pc, #196]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a466:	4313      	orrs	r3, r2
 800a468:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a46a:	4b30      	ldr	r3, [pc, #192]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a46e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	492d      	ldr	r1, [pc, #180]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a478:	4313      	orrs	r3, r2
 800a47a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a47c:	4b2b      	ldr	r3, [pc, #172]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a480:	f023 0220 	bic.w	r2, r3, #32
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	699b      	ldr	r3, [r3, #24]
 800a488:	4928      	ldr	r1, [pc, #160]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a48a:	4313      	orrs	r3, r2
 800a48c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a48e:	4b27      	ldr	r3, [pc, #156]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a492:	4a26      	ldr	r2, [pc, #152]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a494:	f023 0310 	bic.w	r3, r3, #16
 800a498:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a49a:	4b24      	ldr	r3, [pc, #144]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a49c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a49e:	4b24      	ldr	r3, [pc, #144]	; (800a530 <RCCEx_PLL2_Config+0x160>)
 800a4a0:	4013      	ands	r3, r2
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	69d2      	ldr	r2, [r2, #28]
 800a4a6:	00d2      	lsls	r2, r2, #3
 800a4a8:	4920      	ldr	r1, [pc, #128]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a4ae:	4b1f      	ldr	r3, [pc, #124]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b2:	4a1e      	ldr	r2, [pc, #120]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a4b4:	f043 0310 	orr.w	r3, r3, #16
 800a4b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d106      	bne.n	800a4ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a4c0:	4b1a      	ldr	r3, [pc, #104]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c4:	4a19      	ldr	r2, [pc, #100]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a4c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4cc:	e00f      	b.n	800a4ee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d106      	bne.n	800a4e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a4d4:	4b15      	ldr	r3, [pc, #84]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d8:	4a14      	ldr	r2, [pc, #80]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a4da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4e0:	e005      	b.n	800a4ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a4e2:	4b12      	ldr	r3, [pc, #72]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e6:	4a11      	ldr	r2, [pc, #68]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a4e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a4ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a4ee:	4b0f      	ldr	r3, [pc, #60]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a0e      	ldr	r2, [pc, #56]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a4f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a4f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4fa:	f7f6 fe5b 	bl	80011b4 <HAL_GetTick>
 800a4fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a500:	e008      	b.n	800a514 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a502:	f7f6 fe57 	bl	80011b4 <HAL_GetTick>
 800a506:	4602      	mov	r2, r0
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	1ad3      	subs	r3, r2, r3
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	d901      	bls.n	800a514 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a510:	2303      	movs	r3, #3
 800a512:	e006      	b.n	800a522 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a514:	4b05      	ldr	r3, [pc, #20]	; (800a52c <RCCEx_PLL2_Config+0x15c>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d0f0      	beq.n	800a502 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a520:	7bfb      	ldrb	r3, [r7, #15]
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	58024400 	.word	0x58024400
 800a530:	ffff0007 	.word	0xffff0007

0800a534 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b084      	sub	sp, #16
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a53e:	2300      	movs	r3, #0
 800a540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a542:	4b53      	ldr	r3, [pc, #332]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a546:	f003 0303 	and.w	r3, r3, #3
 800a54a:	2b03      	cmp	r3, #3
 800a54c:	d101      	bne.n	800a552 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	e099      	b.n	800a686 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a552:	4b4f      	ldr	r3, [pc, #316]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a4e      	ldr	r2, [pc, #312]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a55c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a55e:	f7f6 fe29 	bl	80011b4 <HAL_GetTick>
 800a562:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a564:	e008      	b.n	800a578 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a566:	f7f6 fe25 	bl	80011b4 <HAL_GetTick>
 800a56a:	4602      	mov	r2, r0
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	2b02      	cmp	r3, #2
 800a572:	d901      	bls.n	800a578 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a574:	2303      	movs	r3, #3
 800a576:	e086      	b.n	800a686 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a578:	4b45      	ldr	r3, [pc, #276]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1f0      	bne.n	800a566 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a584:	4b42      	ldr	r3, [pc, #264]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a588:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	051b      	lsls	r3, r3, #20
 800a592:	493f      	ldr	r1, [pc, #252]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a594:	4313      	orrs	r3, r2
 800a596:	628b      	str	r3, [r1, #40]	; 0x28
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	3b01      	subs	r3, #1
 800a59e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	025b      	lsls	r3, r3, #9
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	431a      	orrs	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	3b01      	subs	r3, #1
 800a5b4:	041b      	lsls	r3, r3, #16
 800a5b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5ba:	431a      	orrs	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	061b      	lsls	r3, r3, #24
 800a5c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a5c8:	4931      	ldr	r1, [pc, #196]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a5ce:	4b30      	ldr	r3, [pc, #192]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	695b      	ldr	r3, [r3, #20]
 800a5da:	492d      	ldr	r1, [pc, #180]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a5e0:	4b2b      	ldr	r3, [pc, #172]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	699b      	ldr	r3, [r3, #24]
 800a5ec:	4928      	ldr	r1, [pc, #160]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a5f2:	4b27      	ldr	r3, [pc, #156]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f6:	4a26      	ldr	r2, [pc, #152]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a5f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a5fe:	4b24      	ldr	r3, [pc, #144]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a602:	4b24      	ldr	r3, [pc, #144]	; (800a694 <RCCEx_PLL3_Config+0x160>)
 800a604:	4013      	ands	r3, r2
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	69d2      	ldr	r2, [r2, #28]
 800a60a:	00d2      	lsls	r2, r2, #3
 800a60c:	4920      	ldr	r1, [pc, #128]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a60e:	4313      	orrs	r3, r2
 800a610:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a612:	4b1f      	ldr	r3, [pc, #124]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a616:	4a1e      	ldr	r2, [pc, #120]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a61c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d106      	bne.n	800a632 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a624:	4b1a      	ldr	r3, [pc, #104]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a628:	4a19      	ldr	r2, [pc, #100]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a62a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a62e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a630:	e00f      	b.n	800a652 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	2b01      	cmp	r3, #1
 800a636:	d106      	bne.n	800a646 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a638:	4b15      	ldr	r3, [pc, #84]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63c:	4a14      	ldr	r2, [pc, #80]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a63e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a642:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a644:	e005      	b.n	800a652 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a646:	4b12      	ldr	r3, [pc, #72]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64a:	4a11      	ldr	r2, [pc, #68]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a64c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a650:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a652:	4b0f      	ldr	r3, [pc, #60]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a0e      	ldr	r2, [pc, #56]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a65c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a65e:	f7f6 fda9 	bl	80011b4 <HAL_GetTick>
 800a662:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a664:	e008      	b.n	800a678 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a666:	f7f6 fda5 	bl	80011b4 <HAL_GetTick>
 800a66a:	4602      	mov	r2, r0
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	1ad3      	subs	r3, r2, r3
 800a670:	2b02      	cmp	r3, #2
 800a672:	d901      	bls.n	800a678 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a674:	2303      	movs	r3, #3
 800a676:	e006      	b.n	800a686 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a678:	4b05      	ldr	r3, [pc, #20]	; (800a690 <RCCEx_PLL3_Config+0x15c>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a680:	2b00      	cmp	r3, #0
 800a682:	d0f0      	beq.n	800a666 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a684:	7bfb      	ldrb	r3, [r7, #15]
}
 800a686:	4618      	mov	r0, r3
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	58024400 	.word	0x58024400
 800a694:	ffff0007 	.word	0xffff0007

0800a698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e049      	b.n	800a73e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d106      	bne.n	800a6c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f7f6 fbd0 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2202      	movs	r2, #2
 800a6c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	3304      	adds	r3, #4
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	f000 fa0e 	bl	800aaf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2201      	movs	r2, #1
 800a700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2201      	movs	r2, #1
 800a710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
	...

0800a748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a756:	b2db      	uxtb	r3, r3
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d001      	beq.n	800a760 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a75c:	2301      	movs	r3, #1
 800a75e:	e05e      	b.n	800a81e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2202      	movs	r2, #2
 800a764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	68da      	ldr	r2, [r3, #12]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f042 0201 	orr.w	r2, r2, #1
 800a776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a2b      	ldr	r2, [pc, #172]	; (800a82c <HAL_TIM_Base_Start_IT+0xe4>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d02c      	beq.n	800a7dc <HAL_TIM_Base_Start_IT+0x94>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a78a:	d027      	beq.n	800a7dc <HAL_TIM_Base_Start_IT+0x94>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a27      	ldr	r2, [pc, #156]	; (800a830 <HAL_TIM_Base_Start_IT+0xe8>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d022      	beq.n	800a7dc <HAL_TIM_Base_Start_IT+0x94>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a26      	ldr	r2, [pc, #152]	; (800a834 <HAL_TIM_Base_Start_IT+0xec>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d01d      	beq.n	800a7dc <HAL_TIM_Base_Start_IT+0x94>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a24      	ldr	r2, [pc, #144]	; (800a838 <HAL_TIM_Base_Start_IT+0xf0>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d018      	beq.n	800a7dc <HAL_TIM_Base_Start_IT+0x94>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a23      	ldr	r2, [pc, #140]	; (800a83c <HAL_TIM_Base_Start_IT+0xf4>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d013      	beq.n	800a7dc <HAL_TIM_Base_Start_IT+0x94>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a21      	ldr	r2, [pc, #132]	; (800a840 <HAL_TIM_Base_Start_IT+0xf8>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d00e      	beq.n	800a7dc <HAL_TIM_Base_Start_IT+0x94>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a20      	ldr	r2, [pc, #128]	; (800a844 <HAL_TIM_Base_Start_IT+0xfc>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d009      	beq.n	800a7dc <HAL_TIM_Base_Start_IT+0x94>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a1e      	ldr	r2, [pc, #120]	; (800a848 <HAL_TIM_Base_Start_IT+0x100>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d004      	beq.n	800a7dc <HAL_TIM_Base_Start_IT+0x94>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a1d      	ldr	r2, [pc, #116]	; (800a84c <HAL_TIM_Base_Start_IT+0x104>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d115      	bne.n	800a808 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	689a      	ldr	r2, [r3, #8]
 800a7e2:	4b1b      	ldr	r3, [pc, #108]	; (800a850 <HAL_TIM_Base_Start_IT+0x108>)
 800a7e4:	4013      	ands	r3, r2
 800a7e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2b06      	cmp	r3, #6
 800a7ec:	d015      	beq.n	800a81a <HAL_TIM_Base_Start_IT+0xd2>
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7f4:	d011      	beq.n	800a81a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f042 0201 	orr.w	r2, r2, #1
 800a804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a806:	e008      	b.n	800a81a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f042 0201 	orr.w	r2, r2, #1
 800a816:	601a      	str	r2, [r3, #0]
 800a818:	e000      	b.n	800a81c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a81a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3714      	adds	r7, #20
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop
 800a82c:	40010000 	.word	0x40010000
 800a830:	40000400 	.word	0x40000400
 800a834:	40000800 	.word	0x40000800
 800a838:	40000c00 	.word	0x40000c00
 800a83c:	40010400 	.word	0x40010400
 800a840:	40001800 	.word	0x40001800
 800a844:	40014000 	.word	0x40014000
 800a848:	4000e000 	.word	0x4000e000
 800a84c:	4000e400 	.word	0x4000e400
 800a850:	00010007 	.word	0x00010007

0800a854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	691b      	ldr	r3, [r3, #16]
 800a862:	f003 0302 	and.w	r3, r3, #2
 800a866:	2b02      	cmp	r3, #2
 800a868:	d122      	bne.n	800a8b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	f003 0302 	and.w	r3, r3, #2
 800a874:	2b02      	cmp	r3, #2
 800a876:	d11b      	bne.n	800a8b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f06f 0202 	mvn.w	r2, #2
 800a880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2201      	movs	r2, #1
 800a886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	f003 0303 	and.w	r3, r3, #3
 800a892:	2b00      	cmp	r3, #0
 800a894:	d003      	beq.n	800a89e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f90f 	bl	800aaba <HAL_TIM_IC_CaptureCallback>
 800a89c:	e005      	b.n	800a8aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f901 	bl	800aaa6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 f912 	bl	800aace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	691b      	ldr	r3, [r3, #16]
 800a8b6:	f003 0304 	and.w	r3, r3, #4
 800a8ba:	2b04      	cmp	r3, #4
 800a8bc:	d122      	bne.n	800a904 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	f003 0304 	and.w	r3, r3, #4
 800a8c8:	2b04      	cmp	r3, #4
 800a8ca:	d11b      	bne.n	800a904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f06f 0204 	mvn.w	r2, #4
 800a8d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2202      	movs	r2, #2
 800a8da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	699b      	ldr	r3, [r3, #24]
 800a8e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d003      	beq.n	800a8f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f8e5 	bl	800aaba <HAL_TIM_IC_CaptureCallback>
 800a8f0:	e005      	b.n	800a8fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 f8d7 	bl	800aaa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 f8e8 	bl	800aace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	f003 0308 	and.w	r3, r3, #8
 800a90e:	2b08      	cmp	r3, #8
 800a910:	d122      	bne.n	800a958 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	f003 0308 	and.w	r3, r3, #8
 800a91c:	2b08      	cmp	r3, #8
 800a91e:	d11b      	bne.n	800a958 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f06f 0208 	mvn.w	r2, #8
 800a928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2204      	movs	r2, #4
 800a92e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	f003 0303 	and.w	r3, r3, #3
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d003      	beq.n	800a946 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 f8bb 	bl	800aaba <HAL_TIM_IC_CaptureCallback>
 800a944:	e005      	b.n	800a952 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f8ad 	bl	800aaa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 f8be 	bl	800aace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	f003 0310 	and.w	r3, r3, #16
 800a962:	2b10      	cmp	r3, #16
 800a964:	d122      	bne.n	800a9ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	f003 0310 	and.w	r3, r3, #16
 800a970:	2b10      	cmp	r3, #16
 800a972:	d11b      	bne.n	800a9ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f06f 0210 	mvn.w	r2, #16
 800a97c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2208      	movs	r2, #8
 800a982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	69db      	ldr	r3, [r3, #28]
 800a98a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d003      	beq.n	800a99a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 f891 	bl	800aaba <HAL_TIM_IC_CaptureCallback>
 800a998:	e005      	b.n	800a9a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 f883 	bl	800aaa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 f894 	bl	800aace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	691b      	ldr	r3, [r3, #16]
 800a9b2:	f003 0301 	and.w	r3, r3, #1
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d10e      	bne.n	800a9d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	f003 0301 	and.w	r3, r3, #1
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d107      	bne.n	800a9d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f06f 0201 	mvn.w	r2, #1
 800a9d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 f85d 	bl	800aa92 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9e2:	2b80      	cmp	r3, #128	; 0x80
 800a9e4:	d10e      	bne.n	800aa04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9f0:	2b80      	cmp	r3, #128	; 0x80
 800a9f2:	d107      	bne.n	800aa04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a9fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 f9c6 	bl	800ad90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa12:	d10e      	bne.n	800aa32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa1e:	2b80      	cmp	r3, #128	; 0x80
 800aa20:	d107      	bne.n	800aa32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 f9b9 	bl	800ada4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	691b      	ldr	r3, [r3, #16]
 800aa38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa3c:	2b40      	cmp	r3, #64	; 0x40
 800aa3e:	d10e      	bne.n	800aa5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa4a:	2b40      	cmp	r3, #64	; 0x40
 800aa4c:	d107      	bne.n	800aa5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f842 	bl	800aae2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	f003 0320 	and.w	r3, r3, #32
 800aa68:	2b20      	cmp	r3, #32
 800aa6a:	d10e      	bne.n	800aa8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	f003 0320 	and.w	r3, r3, #32
 800aa76:	2b20      	cmp	r3, #32
 800aa78:	d107      	bne.n	800aa8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f06f 0220 	mvn.w	r2, #32
 800aa82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 f979 	bl	800ad7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa8a:	bf00      	nop
 800aa8c:	3708      	adds	r7, #8
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa92:	b480      	push	{r7}
 800aa94:	b083      	sub	sp, #12
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800aa9a:	bf00      	nop
 800aa9c:	370c      	adds	r7, #12
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr

0800aaa6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aaa6:	b480      	push	{r7}
 800aaa8:	b083      	sub	sp, #12
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aaae:	bf00      	nop
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr

0800aaba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aaba:	b480      	push	{r7}
 800aabc:	b083      	sub	sp, #12
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aac2:	bf00      	nop
 800aac4:	370c      	adds	r7, #12
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr

0800aace <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aace:	b480      	push	{r7}
 800aad0:	b083      	sub	sp, #12
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aad6:	bf00      	nop
 800aad8:	370c      	adds	r7, #12
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr

0800aae2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aae2:	b480      	push	{r7}
 800aae4:	b083      	sub	sp, #12
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aaea:	bf00      	nop
 800aaec:	370c      	adds	r7, #12
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
	...

0800aaf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a44      	ldr	r2, [pc, #272]	; (800ac1c <TIM_Base_SetConfig+0x124>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d013      	beq.n	800ab38 <TIM_Base_SetConfig+0x40>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab16:	d00f      	beq.n	800ab38 <TIM_Base_SetConfig+0x40>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a41      	ldr	r2, [pc, #260]	; (800ac20 <TIM_Base_SetConfig+0x128>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d00b      	beq.n	800ab38 <TIM_Base_SetConfig+0x40>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a40      	ldr	r2, [pc, #256]	; (800ac24 <TIM_Base_SetConfig+0x12c>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d007      	beq.n	800ab38 <TIM_Base_SetConfig+0x40>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a3f      	ldr	r2, [pc, #252]	; (800ac28 <TIM_Base_SetConfig+0x130>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d003      	beq.n	800ab38 <TIM_Base_SetConfig+0x40>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a3e      	ldr	r2, [pc, #248]	; (800ac2c <TIM_Base_SetConfig+0x134>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d108      	bne.n	800ab4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a33      	ldr	r2, [pc, #204]	; (800ac1c <TIM_Base_SetConfig+0x124>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d027      	beq.n	800aba2 <TIM_Base_SetConfig+0xaa>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab58:	d023      	beq.n	800aba2 <TIM_Base_SetConfig+0xaa>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a30      	ldr	r2, [pc, #192]	; (800ac20 <TIM_Base_SetConfig+0x128>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d01f      	beq.n	800aba2 <TIM_Base_SetConfig+0xaa>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a2f      	ldr	r2, [pc, #188]	; (800ac24 <TIM_Base_SetConfig+0x12c>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d01b      	beq.n	800aba2 <TIM_Base_SetConfig+0xaa>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a2e      	ldr	r2, [pc, #184]	; (800ac28 <TIM_Base_SetConfig+0x130>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d017      	beq.n	800aba2 <TIM_Base_SetConfig+0xaa>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a2d      	ldr	r2, [pc, #180]	; (800ac2c <TIM_Base_SetConfig+0x134>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d013      	beq.n	800aba2 <TIM_Base_SetConfig+0xaa>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a2c      	ldr	r2, [pc, #176]	; (800ac30 <TIM_Base_SetConfig+0x138>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d00f      	beq.n	800aba2 <TIM_Base_SetConfig+0xaa>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a2b      	ldr	r2, [pc, #172]	; (800ac34 <TIM_Base_SetConfig+0x13c>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d00b      	beq.n	800aba2 <TIM_Base_SetConfig+0xaa>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a2a      	ldr	r2, [pc, #168]	; (800ac38 <TIM_Base_SetConfig+0x140>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d007      	beq.n	800aba2 <TIM_Base_SetConfig+0xaa>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a29      	ldr	r2, [pc, #164]	; (800ac3c <TIM_Base_SetConfig+0x144>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d003      	beq.n	800aba2 <TIM_Base_SetConfig+0xaa>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a28      	ldr	r2, [pc, #160]	; (800ac40 <TIM_Base_SetConfig+0x148>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d108      	bne.n	800abb4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	68db      	ldr	r3, [r3, #12]
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	695b      	ldr	r3, [r3, #20]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	689a      	ldr	r2, [r3, #8]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4a10      	ldr	r2, [pc, #64]	; (800ac1c <TIM_Base_SetConfig+0x124>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d00f      	beq.n	800ac00 <TIM_Base_SetConfig+0x108>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4a12      	ldr	r2, [pc, #72]	; (800ac2c <TIM_Base_SetConfig+0x134>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d00b      	beq.n	800ac00 <TIM_Base_SetConfig+0x108>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4a11      	ldr	r2, [pc, #68]	; (800ac30 <TIM_Base_SetConfig+0x138>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d007      	beq.n	800ac00 <TIM_Base_SetConfig+0x108>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a10      	ldr	r2, [pc, #64]	; (800ac34 <TIM_Base_SetConfig+0x13c>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d003      	beq.n	800ac00 <TIM_Base_SetConfig+0x108>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a0f      	ldr	r2, [pc, #60]	; (800ac38 <TIM_Base_SetConfig+0x140>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d103      	bne.n	800ac08 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	691a      	ldr	r2, [r3, #16]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	615a      	str	r2, [r3, #20]
}
 800ac0e:	bf00      	nop
 800ac10:	3714      	adds	r7, #20
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	40010000 	.word	0x40010000
 800ac20:	40000400 	.word	0x40000400
 800ac24:	40000800 	.word	0x40000800
 800ac28:	40000c00 	.word	0x40000c00
 800ac2c:	40010400 	.word	0x40010400
 800ac30:	40014000 	.word	0x40014000
 800ac34:	40014400 	.word	0x40014400
 800ac38:	40014800 	.word	0x40014800
 800ac3c:	4000e000 	.word	0x4000e000
 800ac40:	4000e400 	.word	0x4000e400

0800ac44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d101      	bne.n	800ac5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac58:	2302      	movs	r3, #2
 800ac5a:	e077      	b.n	800ad4c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2202      	movs	r2, #2
 800ac68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a35      	ldr	r2, [pc, #212]	; (800ad58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d004      	beq.n	800ac90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a34      	ldr	r2, [pc, #208]	; (800ad5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d108      	bne.n	800aca2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ac96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aca8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	4313      	orrs	r3, r2
 800acb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a25      	ldr	r2, [pc, #148]	; (800ad58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d02c      	beq.n	800ad20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acce:	d027      	beq.n	800ad20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a22      	ldr	r2, [pc, #136]	; (800ad60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d022      	beq.n	800ad20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a21      	ldr	r2, [pc, #132]	; (800ad64 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d01d      	beq.n	800ad20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a1f      	ldr	r2, [pc, #124]	; (800ad68 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d018      	beq.n	800ad20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a1a      	ldr	r2, [pc, #104]	; (800ad5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d013      	beq.n	800ad20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a1b      	ldr	r2, [pc, #108]	; (800ad6c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d00e      	beq.n	800ad20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a1a      	ldr	r2, [pc, #104]	; (800ad70 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d009      	beq.n	800ad20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a18      	ldr	r2, [pc, #96]	; (800ad74 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d004      	beq.n	800ad20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a17      	ldr	r2, [pc, #92]	; (800ad78 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d10c      	bne.n	800ad3a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	68ba      	ldr	r2, [r7, #8]
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	68ba      	ldr	r2, [r7, #8]
 800ad38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3714      	adds	r7, #20
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr
 800ad58:	40010000 	.word	0x40010000
 800ad5c:	40010400 	.word	0x40010400
 800ad60:	40000400 	.word	0x40000400
 800ad64:	40000800 	.word	0x40000800
 800ad68:	40000c00 	.word	0x40000c00
 800ad6c:	40001800 	.word	0x40001800
 800ad70:	40014000 	.word	0x40014000
 800ad74:	4000e000 	.word	0x4000e000
 800ad78:	4000e400 	.word	0x4000e400

0800ad7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad84:	bf00      	nop
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b083      	sub	sp, #12
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad98:	bf00      	nop
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800adac:	bf00      	nop
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <__libc_init_array>:
 800adb8:	b570      	push	{r4, r5, r6, lr}
 800adba:	4d0d      	ldr	r5, [pc, #52]	; (800adf0 <__libc_init_array+0x38>)
 800adbc:	4c0d      	ldr	r4, [pc, #52]	; (800adf4 <__libc_init_array+0x3c>)
 800adbe:	1b64      	subs	r4, r4, r5
 800adc0:	10a4      	asrs	r4, r4, #2
 800adc2:	2600      	movs	r6, #0
 800adc4:	42a6      	cmp	r6, r4
 800adc6:	d109      	bne.n	800addc <__libc_init_array+0x24>
 800adc8:	4d0b      	ldr	r5, [pc, #44]	; (800adf8 <__libc_init_array+0x40>)
 800adca:	4c0c      	ldr	r4, [pc, #48]	; (800adfc <__libc_init_array+0x44>)
 800adcc:	f000 f82e 	bl	800ae2c <_init>
 800add0:	1b64      	subs	r4, r4, r5
 800add2:	10a4      	asrs	r4, r4, #2
 800add4:	2600      	movs	r6, #0
 800add6:	42a6      	cmp	r6, r4
 800add8:	d105      	bne.n	800ade6 <__libc_init_array+0x2e>
 800adda:	bd70      	pop	{r4, r5, r6, pc}
 800addc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ade0:	4798      	blx	r3
 800ade2:	3601      	adds	r6, #1
 800ade4:	e7ee      	b.n	800adc4 <__libc_init_array+0xc>
 800ade6:	f855 3b04 	ldr.w	r3, [r5], #4
 800adea:	4798      	blx	r3
 800adec:	3601      	adds	r6, #1
 800adee:	e7f2      	b.n	800add6 <__libc_init_array+0x1e>
 800adf0:	0800aeb8 	.word	0x0800aeb8
 800adf4:	0800aeb8 	.word	0x0800aeb8
 800adf8:	0800aeb8 	.word	0x0800aeb8
 800adfc:	0800aebc 	.word	0x0800aebc

0800ae00 <memcpy>:
 800ae00:	440a      	add	r2, r1
 800ae02:	4291      	cmp	r1, r2
 800ae04:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae08:	d100      	bne.n	800ae0c <memcpy+0xc>
 800ae0a:	4770      	bx	lr
 800ae0c:	b510      	push	{r4, lr}
 800ae0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae16:	4291      	cmp	r1, r2
 800ae18:	d1f9      	bne.n	800ae0e <memcpy+0xe>
 800ae1a:	bd10      	pop	{r4, pc}

0800ae1c <memset>:
 800ae1c:	4402      	add	r2, r0
 800ae1e:	4603      	mov	r3, r0
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d100      	bne.n	800ae26 <memset+0xa>
 800ae24:	4770      	bx	lr
 800ae26:	f803 1b01 	strb.w	r1, [r3], #1
 800ae2a:	e7f9      	b.n	800ae20 <memset+0x4>

0800ae2c <_init>:
 800ae2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae2e:	bf00      	nop
 800ae30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae32:	bc08      	pop	{r3}
 800ae34:	469e      	mov	lr, r3
 800ae36:	4770      	bx	lr

0800ae38 <_fini>:
 800ae38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3a:	bf00      	nop
 800ae3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae3e:	bc08      	pop	{r3}
 800ae40:	469e      	mov	lr, r3
 800ae42:	4770      	bx	lr
