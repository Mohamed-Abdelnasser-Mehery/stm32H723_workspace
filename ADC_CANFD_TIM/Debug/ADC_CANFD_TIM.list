
ADC_CANFD_TIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae78  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800b144  0800b144  0001b144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b1b8  0800b1b8  0001b1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b1bc  0800b1bc  0001b1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800b1c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002d0  24000010  0800b1d0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240002e0  0800b1d0  000202e0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00019f5a  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002785  00000000  00000000  00039f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001548  00000000  00000000  0003c720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001440  00000000  00000000  0003dc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000352f0  00000000  00000000  0003f0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000188ad  00000000  00000000  00074398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001659ad  00000000  00000000  0008cc45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f25f2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005da0  00000000  00000000  001f2644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800b12c 	.word	0x0800b12c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800b12c 	.word	0x0800b12c

0800030c <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	isADCcomplite = 1;
 8000314:	4b04      	ldr	r3, [pc, #16]	; (8000328 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000316:	2201      	movs	r2, #1
 8000318:	601a      	str	r2, [r3, #0]
}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	2400020c 	.word	0x2400020c

0800032c <HAL_FDCAN_RxFifo0Callback>:
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	f003 0301 	and.w	r3, r3, #1
 800033c:	2b00      	cmp	r3, #0
 800033e:	d014      	beq.n	800036a <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8000342:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000344:	2140      	movs	r1, #64	; 0x40
 8000346:	6878      	ldr	r0, [r7, #4]
 8000348:	f006 f8e2 	bl	8006510 <HAL_FDCAN_GetRxMessage>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 8000352:	f000 fc36 	bl	8000bc2 <Error_Handler>
    }
    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000356:	2200      	movs	r2, #0
 8000358:	2101      	movs	r1, #1
 800035a:	6878      	ldr	r0, [r7, #4]
 800035c:	f006 fa46 	bl	80067ec <HAL_FDCAN_ActivateNotification>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 8000366:	f000 fc2c 	bl	8000bc2 <Error_Handler>
    }
  }
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	2400029c 	.word	0x2400029c
 8000378:	24000234 	.word	0x24000234

0800037c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000382:	f000 fbf1 	bl	8000b68 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000386:	f000 fe79 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800038a:	f000 f8af 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038e:	f000 fab9 	bl	8000904 <MX_GPIO_Init>
  MX_DMA_Init();
 8000392:	f000 fa97 	bl	80008c4 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000396:	f000 f9c1 	bl	800071c <MX_FDCAN1_Init>
  MX_TIM8_Init();
 800039a:	f000 fa3f 	bl	800081c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  MX_ADC3_Init();
 800039e:	f000 f91d 	bl	80005dc <MX_ADC3_Init>


  TxHeader.Identifier = 0x11;
 80003a2:	4b49      	ldr	r3, [pc, #292]	; (80004c8 <main+0x14c>)
 80003a4:	2211      	movs	r2, #17
 80003a6:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80003a8:	4b47      	ldr	r3, [pc, #284]	; (80004c8 <main+0x14c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80003ae:	4b46      	ldr	r3, [pc, #280]	; (80004c8 <main+0x14c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 80003b4:	4b44      	ldr	r3, [pc, #272]	; (80004c8 <main+0x14c>)
 80003b6:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80003ba:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80003bc:	4b42      	ldr	r3, [pc, #264]	; (80004c8 <main+0x14c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80003c2:	4b41      	ldr	r3, [pc, #260]	; (80004c8 <main+0x14c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 80003c8:	4b3f      	ldr	r3, [pc, #252]	; (80004c8 <main+0x14c>)
 80003ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003ce:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80003d0:	4b3d      	ldr	r3, [pc, #244]	; (80004c8 <main+0x14c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80003d6:	4b3c      	ldr	r3, [pc, #240]	; (80004c8 <main+0x14c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	621a      	str	r2, [r3, #32]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 80003dc:	483b      	ldr	r0, [pc, #236]	; (80004cc <main+0x150>)
 80003de:	f006 f811 	bl	8006404 <HAL_FDCAN_Start>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <main+0x70>
  {
	  Error_Handler();
 80003e8:	f000 fbeb 	bl	8000bc2 <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80003ec:	2200      	movs	r2, #0
 80003ee:	2101      	movs	r1, #1
 80003f0:	4836      	ldr	r0, [pc, #216]	; (80004cc <main+0x150>)
 80003f2:	f006 f9fb 	bl	80067ec <HAL_FDCAN_ActivateNotification>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <main+0x84>
  {
    /* Notification Error */
    Error_Handler();
 80003fc:	f000 fbe1 	bl	8000bc2 <Error_Handler>
  }
  __HAL_TIM_SET_COUNTER(&htim8 , 0) ;
 8000400:	4b33      	ldr	r3, [pc, #204]	; (80004d0 <main+0x154>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2200      	movs	r2, #0
 8000406:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_CLEAR_FLAG (&htim8, TIM_FLAG_UPDATE);
 8000408:	4b31      	ldr	r3, [pc, #196]	; (80004d0 <main+0x154>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	f06f 0201 	mvn.w	r2, #1
 8000410:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim8) ;
 8000412:	482f      	ldr	r0, [pc, #188]	; (80004d0 <main+0x154>)
 8000414:	f00a f982 	bl	800a71c <HAL_TIM_Base_Start_IT>
  while (1)
  {

	  if(timer_flag)
 8000418:	4b2e      	ldr	r3, [pc, #184]	; (80004d4 <main+0x158>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d0fb      	beq.n	8000418 <main+0x9c>
	  {
		  int status = HAL_ADC_Start_DMA(&hadc3, (uint32_t*)ADC_READS, 4);
 8000420:	2204      	movs	r2, #4
 8000422:	492d      	ldr	r1, [pc, #180]	; (80004d8 <main+0x15c>)
 8000424:	482d      	ldr	r0, [pc, #180]	; (80004dc <main+0x160>)
 8000426:	f001 fbff 	bl	8001c28 <HAL_ADC_Start_DMA>
 800042a:	4603      	mov	r3, r0
 800042c:	603b      	str	r3, [r7, #0]
		  while(isADCcomplite == 0);
 800042e:	bf00      	nop
 8000430:	4b2b      	ldr	r3, [pc, #172]	; (80004e0 <main+0x164>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d0fb      	beq.n	8000430 <main+0xb4>
		  isADCcomplite = 0;
 8000438:	4b29      	ldr	r3, [pc, #164]	; (80004e0 <main+0x164>)
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
		  if(status == HAL_OK)
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d1e9      	bne.n	8000418 <main+0x9c>
		  {
			  HAL_ADC_Stop_DMA(&hadc3);
 8000444:	4825      	ldr	r0, [pc, #148]	; (80004dc <main+0x160>)
 8000446:	f001 fccb 	bl	8001de0 <HAL_ADC_Stop_DMA>
			  for (int i=0; i<8; i+=2)
 800044a:	2300      	movs	r3, #0
 800044c:	607b      	str	r3, [r7, #4]
 800044e:	e021      	b.n	8000494 <main+0x118>
			  {
			   TxData[i] = (uint8_t) ADC_READS[i/2]  ;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2b00      	cmp	r3, #0
 8000454:	da00      	bge.n	8000458 <main+0xdc>
 8000456:	3301      	adds	r3, #1
 8000458:	105b      	asrs	r3, r3, #1
 800045a:	461a      	mov	r2, r3
 800045c:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <main+0x15c>)
 800045e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000462:	b2d9      	uxtb	r1, r3
 8000464:	4a1f      	ldr	r2, [pc, #124]	; (80004e4 <main+0x168>)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4413      	add	r3, r2
 800046a:	460a      	mov	r2, r1
 800046c:	701a      	strb	r2, [r3, #0]
			   TxData[i+1] = (uint8_t) (ADC_READS[i/2] >> 8);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	2b00      	cmp	r3, #0
 8000472:	da00      	bge.n	8000476 <main+0xfa>
 8000474:	3301      	adds	r3, #1
 8000476:	105b      	asrs	r3, r3, #1
 8000478:	461a      	mov	r2, r3
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <main+0x15c>)
 800047c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000480:	0a1b      	lsrs	r3, r3, #8
 8000482:	b29a      	uxth	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	3301      	adds	r3, #1
 8000488:	b2d1      	uxtb	r1, r2
 800048a:	4a16      	ldr	r2, [pc, #88]	; (80004e4 <main+0x168>)
 800048c:	54d1      	strb	r1, [r2, r3]
			  for (int i=0; i<8; i+=2)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	3302      	adds	r3, #2
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2b07      	cmp	r3, #7
 8000498:	ddda      	ble.n	8000450 <main+0xd4>
			  }

			  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData)!= HAL_OK)
 800049a:	4a12      	ldr	r2, [pc, #72]	; (80004e4 <main+0x168>)
 800049c:	490a      	ldr	r1, [pc, #40]	; (80004c8 <main+0x14c>)
 800049e:	480b      	ldr	r0, [pc, #44]	; (80004cc <main+0x150>)
 80004a0:	f005 ffdb 	bl	800645a <HAL_FDCAN_AddMessageToTxFifoQ>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <main+0x132>
			  {
			   Error_Handler();
 80004aa:	f000 fb8a 	bl	8000bc2 <Error_Handler>
			  }
			  timer_flag = 0;
 80004ae:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <main+0x158>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 80004b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b8:	480b      	ldr	r0, [pc, #44]	; (80004e8 <main+0x16c>)
 80004ba:	f007 f8e0 	bl	800767e <HAL_GPIO_TogglePin>
				__HAL_TIM_SET_COUNTER(&htim8 , 0) ;
 80004be:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <main+0x154>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2200      	movs	r2, #0
 80004c4:	625a      	str	r2, [r3, #36]	; 0x24
	  if(timer_flag)
 80004c6:	e7a7      	b.n	8000418 <main+0x9c>
 80004c8:	24000210 	.word	0x24000210
 80004cc:	24000114 	.word	0x24000114
 80004d0:	240001b4 	.word	0x240001b4
 80004d4:	24000200 	.word	0x24000200
 80004d8:	24000204 	.word	0x24000204
 80004dc:	2400002c 	.word	0x2400002c
 80004e0:	2400020c 	.word	0x2400020c
 80004e4:	2400025c 	.word	0x2400025c
 80004e8:	58020800 	.word	0x58020800

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b09c      	sub	sp, #112	; 0x70
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f6:	224c      	movs	r2, #76	; 0x4c
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f00a fe0e 	bl	800b11c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2220      	movs	r2, #32
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f00a fe08 	bl	800b11c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800050c:	2002      	movs	r0, #2
 800050e:	f007 f8d1 	bl	80076b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000512:	2300      	movs	r3, #0
 8000514:	603b      	str	r3, [r7, #0]
 8000516:	4b2f      	ldr	r3, [pc, #188]	; (80005d4 <SystemClock_Config+0xe8>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a2e      	ldr	r2, [pc, #184]	; (80005d4 <SystemClock_Config+0xe8>)
 800051c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b2c      	ldr	r3, [pc, #176]	; (80005d4 <SystemClock_Config+0xe8>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800052e:	bf00      	nop
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xe8>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800053c:	d1f8      	bne.n	8000530 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800053e:	4b26      	ldr	r3, [pc, #152]	; (80005d8 <SystemClock_Config+0xec>)
 8000540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000542:	f023 0303 	bic.w	r3, r3, #3
 8000546:	4a24      	ldr	r2, [pc, #144]	; (80005d8 <SystemClock_Config+0xec>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800054e:	2301      	movs	r3, #1
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000552:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000556:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000558:	2302      	movs	r3, #2
 800055a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055c:	2302      	movs	r3, #2
 800055e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000560:	2301      	movs	r3, #1
 8000562:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8000564:	2344      	movs	r3, #68	; 0x44
 8000566:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000568:	2301      	movs	r3, #1
 800056a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800056c:	2304      	movs	r3, #4
 800056e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000570:	2302      	movs	r3, #2
 8000572:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000574:	230c      	movs	r3, #12
 8000576:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000578:	2300      	movs	r3, #0
 800057a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800057c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000580:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000586:	4618      	mov	r0, r3
 8000588:	f007 f8ce 	bl	8007728 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000592:	f000 fb16 	bl	8000bc2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	233f      	movs	r3, #63	; 0x3f
 8000598:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2303      	movs	r3, #3
 800059c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005a2:	2308      	movs	r3, #8
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005a6:	2340      	movs	r3, #64	; 0x40
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005aa:	2340      	movs	r3, #64	; 0x40
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005b4:	2340      	movs	r3, #64	; 0x40
 80005b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2103      	movs	r1, #3
 80005bc:	4618      	mov	r0, r3
 80005be:	f007 fc61 	bl	8007e84 <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80005c8:	f000 fafb 	bl	8000bc2 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3770      	adds	r7, #112	; 0x70
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	58024800 	.word	0x58024800
 80005d8:	58024400 	.word	0x58024400

080005dc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2224      	movs	r2, #36	; 0x24
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f00a fd97 	bl	800b11c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80005ee:	4b45      	ldr	r3, [pc, #276]	; (8000704 <MX_ADC3_Init+0x128>)
 80005f0:	4a45      	ldr	r2, [pc, #276]	; (8000708 <MX_ADC3_Init+0x12c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005f4:	4b43      	ldr	r3, [pc, #268]	; (8000704 <MX_ADC3_Init+0x128>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80005fa:	4b42      	ldr	r3, [pc, #264]	; (8000704 <MX_ADC3_Init+0x128>)
 80005fc:	2208      	movs	r2, #8
 80005fe:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000600:	4b40      	ldr	r3, [pc, #256]	; (8000704 <MX_ADC3_Init+0x128>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000606:	4b3f      	ldr	r3, [pc, #252]	; (8000704 <MX_ADC3_Init+0x128>)
 8000608:	2201      	movs	r2, #1
 800060a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800060c:	4b3d      	ldr	r3, [pc, #244]	; (8000704 <MX_ADC3_Init+0x128>)
 800060e:	2208      	movs	r2, #8
 8000610:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000612:	4b3c      	ldr	r3, [pc, #240]	; (8000704 <MX_ADC3_Init+0x128>)
 8000614:	2200      	movs	r2, #0
 8000616:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000618:	4b3a      	ldr	r3, [pc, #232]	; (8000704 <MX_ADC3_Init+0x128>)
 800061a:	2201      	movs	r2, #1
 800061c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 4;
 800061e:	4b39      	ldr	r3, [pc, #228]	; (8000704 <MX_ADC3_Init+0x128>)
 8000620:	2204      	movs	r2, #4
 8000622:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000624:	4b37      	ldr	r3, [pc, #220]	; (8000704 <MX_ADC3_Init+0x128>)
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b35      	ldr	r3, [pc, #212]	; (8000704 <MX_ADC3_Init+0x128>)
 800062e:	2200      	movs	r2, #0
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000632:	4b34      	ldr	r3, [pc, #208]	; (8000704 <MX_ADC3_Init+0x128>)
 8000634:	2200      	movs	r2, #0
 8000636:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000638:	4b32      	ldr	r3, [pc, #200]	; (8000704 <MX_ADC3_Init+0x128>)
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000640:	4b30      	ldr	r3, [pc, #192]	; (8000704 <MX_ADC3_Init+0x128>)
 8000642:	2200      	movs	r2, #0
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000646:	4b2f      	ldr	r3, [pc, #188]	; (8000704 <MX_ADC3_Init+0x128>)
 8000648:	2203      	movs	r2, #3
 800064a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800064c:	4b2d      	ldr	r3, [pc, #180]	; (8000704 <MX_ADC3_Init+0x128>)
 800064e:	2200      	movs	r2, #0
 8000650:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000652:	4b2c      	ldr	r3, [pc, #176]	; (8000704 <MX_ADC3_Init+0x128>)
 8000654:	2200      	movs	r2, #0
 8000656:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000658:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <MX_ADC3_Init+0x128>)
 800065a:	2200      	movs	r2, #0
 800065c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000660:	4828      	ldr	r0, [pc, #160]	; (8000704 <MX_ADC3_Init+0x128>)
 8000662:	f001 f8d9 	bl	8001818 <HAL_ADC_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800066c:	f000 faa9 	bl	8000bc2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000670:	4b26      	ldr	r3, [pc, #152]	; (800070c <MX_ADC3_Init+0x130>)
 8000672:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000674:	2306      	movs	r3, #6
 8000676:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_12CYCLES_5;
 8000678:	2302      	movs	r3, #2
 800067a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800067c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000680:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000682:	2304      	movs	r3, #4
 8000684:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_POSITIVE;
 800068a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800068e:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	4619      	mov	r1, r3
 8000694:	481b      	ldr	r0, [pc, #108]	; (8000704 <MX_ADC3_Init+0x128>)
 8000696:	f001 fe5d 	bl	8002354 <HAL_ADC_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80006a0:	f000 fa8f 	bl	8000bc2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006a4:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_ADC3_Init+0x134>)
 80006a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006a8:	230c      	movs	r3, #12
 80006aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	4619      	mov	r1, r3
 80006b0:	4814      	ldr	r0, [pc, #80]	; (8000704 <MX_ADC3_Init+0x128>)
 80006b2:	f001 fe4f 	bl	8002354 <HAL_ADC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 80006bc:	f000 fa81 	bl	8000bc2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_ADC3_Init+0x138>)
 80006c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006c4:	2312      	movs	r3, #18
 80006c6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <MX_ADC3_Init+0x128>)
 80006d2:	f001 fe3f 	bl	8002354 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC3_Init+0x104>
  {
    Error_Handler();
 80006dc:	f000 fa71 	bl	8000bc2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006e0:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <MX_ADC3_Init+0x13c>)
 80006e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006e4:	2318      	movs	r3, #24
 80006e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_ADC3_Init+0x128>)
 80006ee:	f001 fe31 	bl	8002354 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC3_Init+0x120>
  {
    Error_Handler();
 80006f8:	f000 fa63 	bl	8000bc2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	; 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	2400002c 	.word	0x2400002c
 8000708:	58026000 	.word	0x58026000
 800070c:	21800100 	.word	0x21800100
 8000710:	0c900008 	.word	0x0c900008
 8000714:	1d500080 	.word	0x1d500080
 8000718:	08600004 	.word	0x08600004

0800071c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000722:	4b3c      	ldr	r3, [pc, #240]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 8000724:	4a3c      	ldr	r2, [pc, #240]	; (8000818 <MX_FDCAN1_Init+0xfc>)
 8000726:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000728:	4b3a      	ldr	r3, [pc, #232]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 800072a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800072e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 8000730:	4b38      	ldr	r3, [pc, #224]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 8000732:	2204      	movs	r2, #4
 8000734:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000736:	4b37      	ldr	r3, [pc, #220]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 8000738:	2201      	movs	r2, #1
 800073a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800073c:	4b35      	ldr	r3, [pc, #212]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 800073e:	2200      	movs	r2, #0
 8000740:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000742:	4b34      	ldr	r3, [pc, #208]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 8000744:	2200      	movs	r2, #0
 8000746:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000748:	4b32      	ldr	r3, [pc, #200]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 800074a:	2206      	movs	r2, #6
 800074c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800074e:	4b31      	ldr	r3, [pc, #196]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 8000750:	2201      	movs	r2, #1
 8000752:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 8000756:	220d      	movs	r2, #13
 8000758:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800075a:	4b2e      	ldr	r3, [pc, #184]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 800075c:	2202      	movs	r2, #2
 800075e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000760:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 8000762:	2201      	movs	r2, #1
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000766:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 8000768:	2201      	movs	r2, #1
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800076c:	4b29      	ldr	r3, [pc, #164]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 800076e:	2201      	movs	r2, #1
 8000770:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000772:	4b28      	ldr	r3, [pc, #160]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 8000774:	2201      	movs	r2, #1
 8000776:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000778:	4b26      	ldr	r3, [pc, #152]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 800077a:	2200      	movs	r2, #0
 800077c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 800077e:	4b25      	ldr	r3, [pc, #148]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 8000780:	2201      	movs	r2, #1
 8000782:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000784:	4b23      	ldr	r3, [pc, #140]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 8000786:	2200      	movs	r2, #0
 8000788:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 800078a:	4b22      	ldr	r3, [pc, #136]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 800078c:	2201      	movs	r2, #1
 800078e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_12;
 8000790:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 8000792:	2205      	movs	r2, #5
 8000794:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000796:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 8000798:	2200      	movs	r2, #0
 800079a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800079c:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 800079e:	2204      	movs	r2, #4
 80007a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80007a8:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 80007aa:	2204      	movs	r2, #4
 80007ac:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 80007bc:	2201      	movs	r2, #1
 80007be:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_12;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 80007c8:	2205      	movs	r2, #5
 80007ca:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007cc:	4811      	ldr	r0, [pc, #68]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 80007ce:	f005 fbc5 	bl	8005f5c <HAL_FDCAN_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_FDCAN1_Init+0xc0>
  {
    Error_Handler();
 80007d8:	f000 f9f3 	bl	8000bc2 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80007dc:	2300      	movs	r3, #0
 80007de:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80007e4:	2302      	movs	r3, #2
 80007e6:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80007e8:	2301      	movs	r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x11;
 80007ec:	2311      	movs	r3, #17
 80007ee:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x11;
 80007f0:	2311      	movs	r3, #17
 80007f2:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	4619      	mov	r1, r3
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_FDCAN1_Init+0xf8>)
 80007fe:	f005 fd8b 	bl	8006318 <HAL_FDCAN_ConfigFilter>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_FDCAN1_Init+0xf0>
  {
    /* Filter configuration Error */
    Error_Handler();
 8000808:	f000 f9db 	bl	8000bc2 <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	24000114 	.word	0x24000114
 8000818:	4000a000 	.word	0x4000a000

0800081c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800083a:	4b20      	ldr	r3, [pc, #128]	; (80008bc <MX_TIM8_Init+0xa0>)
 800083c:	4a20      	ldr	r2, [pc, #128]	; (80008c0 <MX_TIM8_Init+0xa4>)
 800083e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 275-1;
 8000840:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <MX_TIM8_Init+0xa0>)
 8000842:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000846:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <MX_TIM8_Init+0xa0>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000-1;
 800084e:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_TIM8_Init+0xa0>)
 8000850:	f242 720f 	movw	r2, #9999	; 0x270f
 8000854:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <MX_TIM8_Init+0xa0>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_TIM8_Init+0xa0>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_TIM8_Init+0xa0>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000868:	4814      	ldr	r0, [pc, #80]	; (80008bc <MX_TIM8_Init+0xa0>)
 800086a:	f009 feff 	bl	800a66c <HAL_TIM_Base_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8000874:	f000 f9a5 	bl	8000bc2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	4619      	mov	r1, r3
 8000884:	480d      	ldr	r0, [pc, #52]	; (80008bc <MX_TIM8_Init+0xa0>)
 8000886:	f00a f8ef 	bl	800aa68 <HAL_TIM_ConfigClockSource>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000890:	f000 f997 	bl	8000bc2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	4619      	mov	r1, r3
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_TIM8_Init+0xa0>)
 80008a6:	f00a fb4d 	bl	800af44 <HAL_TIMEx_MasterConfigSynchronization>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80008b0:	f000 f987 	bl	8000bc2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	3720      	adds	r7, #32
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	240001b4 	.word	0x240001b4
 80008c0:	40010400 	.word	0x40010400

080008c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <MX_DMA_Init+0x3c>)
 80008cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008d0:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <MX_DMA_Init+0x3c>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_DMA_Init+0x3c>)
 80008dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	200b      	movs	r0, #11
 80008ee:	f002 fe90 	bl	8003612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008f2:	200b      	movs	r0, #11
 80008f4:	f002 fea7 	bl	8003646 <HAL_NVIC_EnableIRQ>

}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	58024400 	.word	0x58024400

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08e      	sub	sp, #56	; 0x38
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b8c      	ldr	r3, [pc, #560]	; (8000b4c <MX_GPIO_Init+0x248>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	4a8a      	ldr	r2, [pc, #552]	; (8000b4c <MX_GPIO_Init+0x248>)
 8000922:	f043 0304 	orr.w	r3, r3, #4
 8000926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092a:	4b88      	ldr	r3, [pc, #544]	; (8000b4c <MX_GPIO_Init+0x248>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	623b      	str	r3, [r7, #32]
 8000936:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000938:	4b84      	ldr	r3, [pc, #528]	; (8000b4c <MX_GPIO_Init+0x248>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093e:	4a83      	ldr	r2, [pc, #524]	; (8000b4c <MX_GPIO_Init+0x248>)
 8000940:	f043 0320 	orr.w	r3, r3, #32
 8000944:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000948:	4b80      	ldr	r3, [pc, #512]	; (8000b4c <MX_GPIO_Init+0x248>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094e:	f003 0320 	and.w	r3, r3, #32
 8000952:	61fb      	str	r3, [r7, #28]
 8000954:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000956:	4b7d      	ldr	r3, [pc, #500]	; (8000b4c <MX_GPIO_Init+0x248>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095c:	4a7b      	ldr	r2, [pc, #492]	; (8000b4c <MX_GPIO_Init+0x248>)
 800095e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000966:	4b79      	ldr	r3, [pc, #484]	; (8000b4c <MX_GPIO_Init+0x248>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000970:	61bb      	str	r3, [r7, #24]
 8000972:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	4b75      	ldr	r3, [pc, #468]	; (8000b4c <MX_GPIO_Init+0x248>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097a:	4a74      	ldr	r2, [pc, #464]	; (8000b4c <MX_GPIO_Init+0x248>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000984:	4b71      	ldr	r3, [pc, #452]	; (8000b4c <MX_GPIO_Init+0x248>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4b6e      	ldr	r3, [pc, #440]	; (8000b4c <MX_GPIO_Init+0x248>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	4a6c      	ldr	r2, [pc, #432]	; (8000b4c <MX_GPIO_Init+0x248>)
 800099a:	f043 0302 	orr.w	r3, r3, #2
 800099e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a2:	4b6a      	ldr	r3, [pc, #424]	; (8000b4c <MX_GPIO_Init+0x248>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a8:	f003 0302 	and.w	r3, r3, #2
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b0:	4b66      	ldr	r3, [pc, #408]	; (8000b4c <MX_GPIO_Init+0x248>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	4a65      	ldr	r2, [pc, #404]	; (8000b4c <MX_GPIO_Init+0x248>)
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c0:	4b62      	ldr	r3, [pc, #392]	; (8000b4c <MX_GPIO_Init+0x248>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c6:	f003 0308 	and.w	r3, r3, #8
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ce:	4b5f      	ldr	r3, [pc, #380]	; (8000b4c <MX_GPIO_Init+0x248>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	4a5d      	ldr	r2, [pc, #372]	; (8000b4c <MX_GPIO_Init+0x248>)
 80009d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009de:	4b5b      	ldr	r3, [pc, #364]	; (8000b4c <MX_GPIO_Init+0x248>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ec:	4b57      	ldr	r3, [pc, #348]	; (8000b4c <MX_GPIO_Init+0x248>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	4a56      	ldr	r2, [pc, #344]	; (8000b4c <MX_GPIO_Init+0x248>)
 80009f4:	f043 0310 	orr.w	r3, r3, #16
 80009f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fc:	4b53      	ldr	r3, [pc, #332]	; (8000b4c <MX_GPIO_Init+0x248>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a02:	f003 0310 	and.w	r3, r3, #16
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a10:	484f      	ldr	r0, [pc, #316]	; (8000b50 <MX_GPIO_Init+0x24c>)
 8000a12:	f006 fe1b 	bl	800764c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a1c:	484d      	ldr	r0, [pc, #308]	; (8000b54 <MX_GPIO_Init+0x250>)
 8000a1e:	f006 fe15 	bl	800764c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2102      	movs	r1, #2
 8000a26:	484c      	ldr	r0, [pc, #304]	; (8000b58 <MX_GPIO_Init+0x254>)
 8000a28:	f006 fe10 	bl	800764c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4844      	ldr	r0, [pc, #272]	; (8000b54 <MX_GPIO_Init+0x250>)
 8000a42:	f006 fc5b 	bl	80072fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a46:	2332      	movs	r3, #50	; 0x32
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a56:	230b      	movs	r3, #11
 8000a58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5e:	4619      	mov	r1, r3
 8000a60:	483c      	ldr	r0, [pc, #240]	; (8000b54 <MX_GPIO_Init+0x250>)
 8000a62:	f006 fc4b 	bl	80072fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a66:	2386      	movs	r3, #134	; 0x86
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a76:	230b      	movs	r3, #11
 8000a78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4836      	ldr	r0, [pc, #216]	; (8000b5c <MX_GPIO_Init+0x258>)
 8000a82:	f006 fc3b 	bl	80072fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000a86:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	482c      	ldr	r0, [pc, #176]	; (8000b50 <MX_GPIO_Init+0x24c>)
 8000aa0:	f006 fc2c 	bl	80072fc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ab6:	230b      	movs	r3, #11
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4823      	ldr	r0, [pc, #140]	; (8000b50 <MX_GPIO_Init+0x24c>)
 8000ac2:	f006 fc1b 	bl	80072fc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000ac6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481f      	ldr	r0, [pc, #124]	; (8000b60 <MX_GPIO_Init+0x25c>)
 8000ae4:	f006 fc0a 	bl	80072fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afe:	4619      	mov	r1, r3
 8000b00:	4814      	ldr	r0, [pc, #80]	; (8000b54 <MX_GPIO_Init+0x250>)
 8000b02:	f006 fbfb 	bl	80072fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b06:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b18:	230b      	movs	r3, #11
 8000b1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b20:	4619      	mov	r1, r3
 8000b22:	4810      	ldr	r0, [pc, #64]	; (8000b64 <MX_GPIO_Init+0x260>)
 8000b24:	f006 fbea 	bl	80072fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4806      	ldr	r0, [pc, #24]	; (8000b58 <MX_GPIO_Init+0x254>)
 8000b40:	f006 fbdc 	bl	80072fc <HAL_GPIO_Init>

}
 8000b44:	bf00      	nop
 8000b46:	3738      	adds	r7, #56	; 0x38
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58024400 	.word	0x58024400
 8000b50:	58020400 	.word	0x58020400
 8000b54:	58020800 	.word	0x58020800
 8000b58:	58021000 	.word	0x58021000
 8000b5c:	58020000 	.word	0x58020000
 8000b60:	58020c00 	.word	0x58020c00
 8000b64:	58021800 	.word	0x58021800

08000b68 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b7a:	f002 fd7f 	bl	800367c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000b86:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000b8a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32B;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000b94:	2301      	movs	r3, #1
 8000b96:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bac:	463b      	mov	r3, r7
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f002 fd9c 	bl	80036ec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8000bb4:	2006      	movs	r0, #6
 8000bb6:	f002 fd79 	bl	80036ac <HAL_MPU_Enable>

}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc6:	b672      	cpsid	i
}
 8000bc8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bca:	e7fe      	b.n	8000bca <Error_Handler+0x8>

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_MspInit+0x30>)
 8000bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bd8:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <HAL_MspInit+0x30>)
 8000bda:	f043 0302 	orr.w	r3, r3, #2
 8000bde:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_MspInit+0x30>)
 8000be4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	58024400 	.word	0x58024400

08000c00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b0b6      	sub	sp, #216	; 0xd8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	22b4      	movs	r2, #180	; 0xb4
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f00a fa7b 	bl	800b11c <memset>
  if(hadc->Instance==ADC3)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a47      	ldr	r2, [pc, #284]	; (8000d48 <HAL_ADC_MspInit+0x148>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	f040 8087 	bne.w	8000d40 <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c32:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c36:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 24;
 8000c3c:	2318      	movs	r3, #24
 8000c3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c4c:	23c0      	movs	r3, #192	; 0xc0
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	4618      	mov	r0, r3
 8000c64:	f007 fc6e 	bl	8008544 <HAL_RCCEx_PeriphCLKConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000c6e:	f7ff ffa8 	bl	8000bc2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000c72:	4b36      	ldr	r3, [pc, #216]	; (8000d4c <HAL_ADC_MspInit+0x14c>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	4a34      	ldr	r2, [pc, #208]	; (8000d4c <HAL_ADC_MspInit+0x14c>)
 8000c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c82:	4b32      	ldr	r3, [pc, #200]	; (8000d4c <HAL_ADC_MspInit+0x14c>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c90:	4b2e      	ldr	r3, [pc, #184]	; (8000d4c <HAL_ADC_MspInit+0x14c>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c96:	4a2d      	ldr	r2, [pc, #180]	; (8000d4c <HAL_ADC_MspInit+0x14c>)
 8000c98:	f043 0320 	orr.w	r3, r3, #32
 8000c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca0:	4b2a      	ldr	r3, [pc, #168]	; (8000d4c <HAL_ADC_MspInit+0x14c>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca6:	f003 0320 	and.w	r3, r3, #32
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> ADC3_INP8
    PF7     ------> ADC3_INP3
    PF8     ------> ADC3_INP7
    PF9     ------> ADC3_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000cae:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000cb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cc2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4821      	ldr	r0, [pc, #132]	; (8000d50 <HAL_ADC_MspInit+0x150>)
 8000cca:	f006 fb17 	bl	80072fc <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8000cce:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <HAL_ADC_MspInit+0x154>)
 8000cd0:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <HAL_ADC_MspInit+0x158>)
 8000cd2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <HAL_ADC_MspInit+0x154>)
 8000cd6:	2273      	movs	r2, #115	; 0x73
 8000cd8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cda:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <HAL_ADC_MspInit+0x154>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <HAL_ADC_MspInit+0x154>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000ce6:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <HAL_ADC_MspInit+0x154>)
 8000ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cec:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <HAL_ADC_MspInit+0x154>)
 8000cf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cf4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <HAL_ADC_MspInit+0x154>)
 8000cf8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cfc:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_ADC_MspInit+0x154>)
 8000d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d04:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <HAL_ADC_MspInit+0x154>)
 8000d08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d0c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_ADC_MspInit+0x154>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000d14:	480f      	ldr	r0, [pc, #60]	; (8000d54 <HAL_ADC_MspInit+0x154>)
 8000d16:	f002 fd2d 	bl	8003774 <HAL_DMA_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <HAL_ADC_MspInit+0x124>
    {
      Error_Handler();
 8000d20:	f7ff ff4f 	bl	8000bc2 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <HAL_ADC_MspInit+0x154>)
 8000d28:	659a      	str	r2, [r3, #88]	; 0x58
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_ADC_MspInit+0x154>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	207f      	movs	r0, #127	; 0x7f
 8000d36:	f002 fc6c 	bl	8003612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000d3a:	207f      	movs	r0, #127	; 0x7f
 8000d3c:	f002 fc83 	bl	8003646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000d40:	bf00      	nop
 8000d42:	37d8      	adds	r7, #216	; 0xd8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	58026000 	.word	0x58026000
 8000d4c:	58024400 	.word	0x58024400
 8000d50:	58021400 	.word	0x58021400
 8000d54:	2400009c 	.word	0x2400009c
 8000d58:	40020010 	.word	0x40020010

08000d5c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0b6      	sub	sp, #216	; 0xd8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	22b4      	movs	r2, #180	; 0xb4
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f00a f9cd 	bl	800b11c <memset>
  if(hfdcan->Instance==FDCAN1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a29      	ldr	r2, [pc, #164]	; (8000e2c <HAL_FDCAN_MspInit+0xd0>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d14b      	bne.n	8000e24 <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d90:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000d92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d96:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f007 fbd1 	bl	8008544 <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000da8:	f7ff ff0b 	bl	8000bc2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000dac:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <HAL_FDCAN_MspInit+0xd4>)
 8000dae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000db2:	4a1f      	ldr	r2, [pc, #124]	; (8000e30 <HAL_FDCAN_MspInit+0xd4>)
 8000db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <HAL_FDCAN_MspInit+0xd4>)
 8000dbe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_FDCAN_MspInit+0xd4>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd0:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <HAL_FDCAN_MspInit+0xd4>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_FDCAN_MspInit+0xd4>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000de8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e02:	2309      	movs	r3, #9
 8000e04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4809      	ldr	r0, [pc, #36]	; (8000e34 <HAL_FDCAN_MspInit+0xd8>)
 8000e10:	f006 fa74 	bl	80072fc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	2013      	movs	r0, #19
 8000e1a:	f002 fbfa 	bl	8003612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000e1e:	2013      	movs	r0, #19
 8000e20:	f002 fc11 	bl	8003646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000e24:	bf00      	nop
 8000e26:	37d8      	adds	r7, #216	; 0xd8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	4000a000 	.word	0x4000a000
 8000e30:	58024400 	.word	0x58024400
 8000e34:	58020000 	.word	0x58020000

08000e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <HAL_TIM_Base_MspInit+0x48>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d116      	bne.n	8000e78 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_TIM_Base_MspInit+0x4c>)
 8000e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e50:	4a0c      	ldr	r2, [pc, #48]	; (8000e84 <HAL_TIM_Base_MspInit+0x4c>)
 8000e52:	f043 0302 	orr.w	r3, r3, #2
 8000e56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_TIM_Base_MspInit+0x4c>)
 8000e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	202c      	movs	r0, #44	; 0x2c
 8000e6e:	f002 fbd0 	bl	8003612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000e72:	202c      	movs	r0, #44	; 0x2c
 8000e74:	f002 fbe7 	bl	8003646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40010400 	.word	0x40010400
 8000e84:	58024400 	.word	0x58024400

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <NMI_Handler+0x4>

08000e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed4:	f000 f944 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <DMA1_Stream0_IRQHandler+0x10>)
 8000ee2:	f003 fd29 	bl	8004938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2400009c 	.word	0x2400009c

08000ef0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <FDCAN1_IT0_IRQHandler+0x10>)
 8000ef6:	f005 fcf3 	bl	80068e0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	24000114 	.word	0x24000114

08000f04 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	timer_flag = 1;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000f0e:	4803      	ldr	r0, [pc, #12]	; (8000f1c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8000f10:	f009 fc8a 	bl	800a828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	24000200 	.word	0x24000200
 8000f1c:	240001b4 	.word	0x240001b4

08000f20 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	 HAL_ADC_ConvCpltCallback(&hadc3);
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <ADC3_IRQHandler+0x14>)
 8000f26:	f7ff f9f1 	bl	800030c <HAL_ADC_ConvCpltCallback>
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8000f2a:	4802      	ldr	r0, [pc, #8]	; (8000f34 <ADC3_IRQHandler+0x14>)
 8000f2c:	f000 ffba 	bl	8001ea4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2400002c 	.word	0x2400002c

08000f38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b32      	ldr	r3, [pc, #200]	; (8001008 <SystemInit+0xd0>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f42:	4a31      	ldr	r2, [pc, #196]	; (8001008 <SystemInit+0xd0>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f4c:	4b2f      	ldr	r3, [pc, #188]	; (800100c <SystemInit+0xd4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 030f 	and.w	r3, r3, #15
 8000f54:	2b06      	cmp	r3, #6
 8000f56:	d807      	bhi.n	8000f68 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f58:	4b2c      	ldr	r3, [pc, #176]	; (800100c <SystemInit+0xd4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f023 030f 	bic.w	r3, r3, #15
 8000f60:	4a2a      	ldr	r2, [pc, #168]	; (800100c <SystemInit+0xd4>)
 8000f62:	f043 0307 	orr.w	r3, r3, #7
 8000f66:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f68:	4b29      	ldr	r3, [pc, #164]	; (8001010 <SystemInit+0xd8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a28      	ldr	r2, [pc, #160]	; (8001010 <SystemInit+0xd8>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f74:	4b26      	ldr	r3, [pc, #152]	; (8001010 <SystemInit+0xd8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <SystemInit+0xd8>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4924      	ldr	r1, [pc, #144]	; (8001010 <SystemInit+0xd8>)
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <SystemInit+0xdc>)
 8000f82:	4013      	ands	r3, r2
 8000f84:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f86:	4b21      	ldr	r3, [pc, #132]	; (800100c <SystemInit+0xd4>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0308 	and.w	r3, r3, #8
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d007      	beq.n	8000fa2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <SystemInit+0xd4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f023 030f 	bic.w	r3, r3, #15
 8000f9a:	4a1c      	ldr	r2, [pc, #112]	; (800100c <SystemInit+0xd4>)
 8000f9c:	f043 0307 	orr.w	r3, r3, #7
 8000fa0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <SystemInit+0xd8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <SystemInit+0xd8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <SystemInit+0xd8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <SystemInit+0xd8>)
 8000fb6:	4a18      	ldr	r2, [pc, #96]	; (8001018 <SystemInit+0xe0>)
 8000fb8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <SystemInit+0xd8>)
 8000fbc:	4a17      	ldr	r2, [pc, #92]	; (800101c <SystemInit+0xe4>)
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <SystemInit+0xd8>)
 8000fc2:	4a17      	ldr	r2, [pc, #92]	; (8001020 <SystemInit+0xe8>)
 8000fc4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <SystemInit+0xd8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <SystemInit+0xd8>)
 8000fce:	4a14      	ldr	r2, [pc, #80]	; (8001020 <SystemInit+0xe8>)
 8000fd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <SystemInit+0xd8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <SystemInit+0xd8>)
 8000fda:	4a11      	ldr	r2, [pc, #68]	; (8001020 <SystemInit+0xe8>)
 8000fdc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <SystemInit+0xd8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <SystemInit+0xd8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a09      	ldr	r2, [pc, #36]	; (8001010 <SystemInit+0xd8>)
 8000fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <SystemInit+0xd8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <SystemInit+0xec>)
 8000ff8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ffc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00
 800100c:	52002000 	.word	0x52002000
 8001010:	58024400 	.word	0x58024400
 8001014:	eaf6ed7f 	.word	0xeaf6ed7f
 8001018:	02020200 	.word	0x02020200
 800101c:	01ff0000 	.word	0x01ff0000
 8001020:	01010280 	.word	0x01010280
 8001024:	52004000 	.word	0x52004000

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001060 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800102c:	f7ff ff84 	bl	8000f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001032:	490d      	ldr	r1, [pc, #52]	; (8001068 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001048:	4c0a      	ldr	r4, [pc, #40]	; (8001074 <LoopFillZerobss+0x22>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001056:	f00a f82f 	bl	800b0b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff f98f 	bl	800037c <main>
  bx  lr
 800105e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001060:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001064:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001068:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800106c:	0800b1c0 	.word	0x0800b1c0
  ldr r2, =_sbss
 8001070:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001074:	240002e0 	.word	0x240002e0

08001078 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001082:	2003      	movs	r0, #3
 8001084:	f002 faba 	bl	80035fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001088:	f007 f8b2 	bl	80081f0 <HAL_RCC_GetSysClockFreq>
 800108c:	4602      	mov	r2, r0
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <HAL_Init+0x68>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	0a1b      	lsrs	r3, r3, #8
 8001094:	f003 030f 	and.w	r3, r3, #15
 8001098:	4913      	ldr	r1, [pc, #76]	; (80010e8 <HAL_Init+0x6c>)
 800109a:	5ccb      	ldrb	r3, [r1, r3]
 800109c:	f003 031f 	and.w	r3, r3, #31
 80010a0:	fa22 f303 	lsr.w	r3, r2, r3
 80010a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <HAL_Init+0x68>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <HAL_Init+0x6c>)
 80010b0:	5cd3      	ldrb	r3, [r2, r3]
 80010b2:	f003 031f 	and.w	r3, r3, #31
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	fa22 f303 	lsr.w	r3, r2, r3
 80010bc:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <HAL_Init+0x70>)
 80010be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010c0:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <HAL_Init+0x74>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 f814 	bl	80010f4 <HAL_InitTick>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e002      	b.n	80010dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010d6:	f7ff fd79 	bl	8000bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	58024400 	.word	0x58024400
 80010e8:	0800b190 	.word	0x0800b190
 80010ec:	24000004 	.word	0x24000004
 80010f0:	24000000 	.word	0x24000000

080010f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_InitTick+0x60>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e021      	b.n	800114c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <HAL_InitTick+0x64>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_InitTick+0x60>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	fbb3 f3f1 	udiv	r3, r3, r1
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f002 fa9f 	bl	8003662 <HAL_SYSTICK_Config>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e00e      	b.n	800114c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	d80a      	bhi.n	800114a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001134:	2200      	movs	r2, #0
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f002 fa69 	bl	8003612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4a06      	ldr	r2, [pc, #24]	; (800115c <HAL_InitTick+0x68>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2400000c 	.word	0x2400000c
 8001158:	24000000 	.word	0x24000000
 800115c:	24000008 	.word	0x24000008

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	2400000c 	.word	0x2400000c
 8001184:	240002dc 	.word	0x240002dc

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	240002dc 	.word	0x240002dc

080011a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	431a      	orrs	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	609a      	str	r2, [r3, #8]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	431a      	orrs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	609a      	str	r2, [r3, #8]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
 8001214:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3360      	adds	r3, #96	; 0x60
 800121a:	461a      	mov	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4a10      	ldr	r2, [pc, #64]	; (8001268 <LL_ADC_SetOffset+0x60>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d10b      	bne.n	8001244 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	4313      	orrs	r3, r2
 800123a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001242:	e00b      	b.n	800125c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	430b      	orrs	r3, r1
 8001256:	431a      	orrs	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	601a      	str	r2, [r3, #0]
}
 800125c:	bf00      	nop
 800125e:	371c      	adds	r7, #28
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	58026000 	.word	0x58026000

0800126c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3360      	adds	r3, #96	; 0x60
 800127a:	461a      	mov	r2, r3
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800128c:	4618      	mov	r0, r3
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	f003 031f 	and.w	r3, r3, #31
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	fa01 f303 	lsl.w	r3, r1, r3
 80012b8:	431a      	orrs	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	611a      	str	r2, [r3, #16]
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4a0c      	ldr	r2, [pc, #48]	; (800130c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d00e      	beq.n	80012fe <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	3360      	adds	r3, #96	; 0x60
 80012e4:	461a      	mov	r2, r3
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	431a      	orrs	r2, r3
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	601a      	str	r2, [r3, #0]
  }
}
 80012fe:	bf00      	nop
 8001300:	371c      	adds	r7, #28
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	58026000 	.word	0x58026000

08001310 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <LL_ADC_SetOffsetSaturation+0x40>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d10e      	bne.n	8001342 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3360      	adds	r3, #96	; 0x60
 8001328:	461a      	mov	r2, r3
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	431a      	orrs	r2, r3
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001342:	bf00      	nop
 8001344:	371c      	adds	r7, #28
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	58026000 	.word	0x58026000

08001354 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001354:	b480      	push	{r7}
 8001356:	b087      	sub	sp, #28
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <LL_ADC_SetOffsetSign+0x40>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d10e      	bne.n	8001386 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3360      	adds	r3, #96	; 0x60
 800136c:	461a      	mov	r2, r3
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	431a      	orrs	r2, r3
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001386:	bf00      	nop
 8001388:	371c      	adds	r7, #28
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	58026000 	.word	0x58026000

08001398 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	3360      	adds	r3, #96	; 0x60
 80013a8:	461a      	mov	r2, r3
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4a0c      	ldr	r2, [pc, #48]	; (80013e8 <LL_ADC_SetOffsetState+0x50>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d108      	bne.n	80013cc <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	431a      	orrs	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80013ca:	e007      	b.n	80013dc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	431a      	orrs	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	371c      	adds	r7, #28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	58026000 	.word	0x58026000

080013ec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001412:	b480      	push	{r7}
 8001414:	b087      	sub	sp, #28
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	3330      	adds	r3, #48	; 0x30
 8001422:	461a      	mov	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	0a1b      	lsrs	r3, r3, #8
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	4413      	add	r3, r2
 8001430:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	f003 031f 	and.w	r3, r3, #31
 800143c:	211f      	movs	r1, #31
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	401a      	ands	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	0e9b      	lsrs	r3, r3, #26
 800144a:	f003 011f 	and.w	r1, r3, #31
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	f003 031f 	and.w	r3, r3, #31
 8001454:	fa01 f303 	lsl.w	r3, r1, r3
 8001458:	431a      	orrs	r2, r3
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800145e:	bf00      	nop
 8001460:	371c      	adds	r7, #28
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	f023 0203 	bic.w	r2, r3, #3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	60da      	str	r2, [r3, #12]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	f043 0201 	orr.w	r2, r3, #1
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	60da      	str	r2, [r3, #12]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a08      	ldr	r2, [pc, #32]	; (80014e0 <LL_ADC_REG_SetDMATransferMode+0x30>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d107      	bne.n	80014d2 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	f023 0203 	bic.w	r2, r3, #3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	60da      	str	r2, [r3, #12]
  }
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	58026000 	.word	0x58026000

080014e4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f0:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800150a:	b480      	push	{r7}
 800150c:	b087      	sub	sp, #28
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3314      	adds	r3, #20
 800151a:	461a      	mov	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	0e5b      	lsrs	r3, r3, #25
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	4413      	add	r3, r2
 8001528:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	0d1b      	lsrs	r3, r3, #20
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	2107      	movs	r1, #7
 8001538:	fa01 f303 	lsl.w	r3, r1, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	401a      	ands	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	0d1b      	lsrs	r3, r3, #20
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	431a      	orrs	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001554:	bf00      	nop
 8001556:	371c      	adds	r7, #28
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4a1a      	ldr	r2, [pc, #104]	; (80015d8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d115      	bne.n	80015a0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001580:	43db      	mvns	r3, r3
 8001582:	401a      	ands	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0318 	and.w	r3, r3, #24
 800158a:	4914      	ldr	r1, [pc, #80]	; (80015dc <LL_ADC_SetChannelSingleDiff+0x7c>)
 800158c:	40d9      	lsrs	r1, r3
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	400b      	ands	r3, r1
 8001592:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001596:	431a      	orrs	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800159e:	e014      	b.n	80015ca <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015ac:	43db      	mvns	r3, r3
 80015ae:	401a      	ands	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0318 	and.w	r3, r3, #24
 80015b6:	4909      	ldr	r1, [pc, #36]	; (80015dc <LL_ADC_SetChannelSingleDiff+0x7c>)
 80015b8:	40d9      	lsrs	r1, r3
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	400b      	ands	r3, r1
 80015be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015c2:	431a      	orrs	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	58026000 	.word	0x58026000
 80015dc:	000fffff 	.word	0x000fffff

080015e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 031f 	and.w	r3, r3, #31
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001626:	4013      	ands	r3, r2
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6093      	str	r3, [r2, #8]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	5fffffc0 	.word	0x5fffffc0

0800163c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800164c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001650:	d101      	bne.n	8001656 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <LL_ADC_EnableInternalRegulator+0x24>)
 8001672:	4013      	ands	r3, r2
 8001674:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	6fffffc0 	.word	0x6fffffc0

0800168c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016a0:	d101      	bne.n	80016a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <LL_ADC_Enable+0x24>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	f043 0201 	orr.w	r2, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	7fffffc0 	.word	0x7fffffc0

080016dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <LL_ADC_Disable+0x24>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	f043 0202 	orr.w	r2, r3, #2
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	7fffffc0 	.word	0x7fffffc0

08001704 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <LL_ADC_IsEnabled+0x18>
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <LL_ADC_IsEnabled+0x1a>
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b02      	cmp	r3, #2
 800173c:	d101      	bne.n	8001742 <LL_ADC_IsDisableOngoing+0x18>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <LL_ADC_IsDisableOngoing+0x1a>
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <LL_ADC_REG_StartConversion+0x24>)
 800175e:	4013      	ands	r3, r2
 8001760:	f043 0204 	orr.w	r2, r3, #4
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	7fffffc0 	.word	0x7fffffc0

08001778 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <LL_ADC_REG_StopConversion+0x24>)
 8001786:	4013      	ands	r3, r2
 8001788:	f043 0210 	orr.w	r2, r3, #16
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	7fffffc0 	.word	0x7fffffc0

080017a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d101      	bne.n	80017b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <LL_ADC_INJ_StopConversion+0x24>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	f043 0220 	orr.w	r2, r3, #32
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	7fffffc0 	.word	0x7fffffc0

080017f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b08      	cmp	r3, #8
 8001802:	d101      	bne.n	8001808 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b089      	sub	sp, #36	; 0x24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001824:	2300      	movs	r3, #0
 8001826:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e1ee      	b.n	8001c10 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183c:	2b00      	cmp	r3, #0
 800183e:	d109      	bne.n	8001854 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff f9dd 	bl	8000c00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff feef 	bl	800163c <LL_ADC_IsDeepPowerDownEnabled>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fed5 	bl	8001618 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ff0a 	bl	800168c <LL_ADC_IsInternalRegulatorEnabled>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d114      	bne.n	80018a8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff feee 	bl	8001664 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001888:	4b8e      	ldr	r3, [pc, #568]	; (8001ac4 <HAL_ADC_Init+0x2ac>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	099b      	lsrs	r3, r3, #6
 800188e:	4a8e      	ldr	r2, [pc, #568]	; (8001ac8 <HAL_ADC_Init+0x2b0>)
 8001890:	fba2 2303 	umull	r2, r3, r2, r3
 8001894:	099b      	lsrs	r3, r3, #6
 8001896:	3301      	adds	r3, #1
 8001898:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800189a:	e002      	b.n	80018a2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	3b01      	subs	r3, #1
 80018a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f9      	bne.n	800189c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff feed 	bl	800168c <LL_ADC_IsInternalRegulatorEnabled>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10d      	bne.n	80018d4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018bc:	f043 0210 	orr.w	r2, r3, #16
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018c8:	f043 0201 	orr.w	r2, r3, #1
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff61 	bl	80017a0 <LL_ADC_REG_IsConversionOngoing>
 80018de:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f040 8188 	bne.w	8001bfe <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f040 8184 	bne.w	8001bfe <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80018fe:	f043 0202 	orr.w	r2, r3, #2
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fefa 	bl	8001704 <LL_ADC_IsEnabled>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d136      	bne.n	8001984 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a6c      	ldr	r2, [pc, #432]	; (8001acc <HAL_ADC_Init+0x2b4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d004      	beq.n	800192a <HAL_ADC_Init+0x112>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a6a      	ldr	r2, [pc, #424]	; (8001ad0 <HAL_ADC_Init+0x2b8>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d10e      	bne.n	8001948 <HAL_ADC_Init+0x130>
 800192a:	4868      	ldr	r0, [pc, #416]	; (8001acc <HAL_ADC_Init+0x2b4>)
 800192c:	f7ff feea 	bl	8001704 <LL_ADC_IsEnabled>
 8001930:	4604      	mov	r4, r0
 8001932:	4867      	ldr	r0, [pc, #412]	; (8001ad0 <HAL_ADC_Init+0x2b8>)
 8001934:	f7ff fee6 	bl	8001704 <LL_ADC_IsEnabled>
 8001938:	4603      	mov	r3, r0
 800193a:	4323      	orrs	r3, r4
 800193c:	2b00      	cmp	r3, #0
 800193e:	bf0c      	ite	eq
 8001940:	2301      	moveq	r3, #1
 8001942:	2300      	movne	r3, #0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	e008      	b.n	800195a <HAL_ADC_Init+0x142>
 8001948:	4862      	ldr	r0, [pc, #392]	; (8001ad4 <HAL_ADC_Init+0x2bc>)
 800194a:	f7ff fedb 	bl	8001704 <LL_ADC_IsEnabled>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	bf0c      	ite	eq
 8001954:	2301      	moveq	r3, #1
 8001956:	2300      	movne	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d012      	beq.n	8001984 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a5a      	ldr	r2, [pc, #360]	; (8001acc <HAL_ADC_Init+0x2b4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d004      	beq.n	8001972 <HAL_ADC_Init+0x15a>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a58      	ldr	r2, [pc, #352]	; (8001ad0 <HAL_ADC_Init+0x2b8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d101      	bne.n	8001976 <HAL_ADC_Init+0x15e>
 8001972:	4a59      	ldr	r2, [pc, #356]	; (8001ad8 <HAL_ADC_Init+0x2c0>)
 8001974:	e000      	b.n	8001978 <HAL_ADC_Init+0x160>
 8001976:	4a59      	ldr	r2, [pc, #356]	; (8001adc <HAL_ADC_Init+0x2c4>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	4619      	mov	r1, r3
 800197e:	4610      	mov	r0, r2
 8001980:	f7ff fc0e 	bl	80011a0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a52      	ldr	r2, [pc, #328]	; (8001ad4 <HAL_ADC_Init+0x2bc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d129      	bne.n	80019e2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7e5b      	ldrb	r3, [r3, #25]
 8001992:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001998:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800199e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d013      	beq.n	80019d0 <HAL_ADC_Init+0x1b8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2b0c      	cmp	r3, #12
 80019ae:	d00d      	beq.n	80019cc <HAL_ADC_Init+0x1b4>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b1c      	cmp	r3, #28
 80019b6:	d007      	beq.n	80019c8 <HAL_ADC_Init+0x1b0>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b18      	cmp	r3, #24
 80019be:	d101      	bne.n	80019c4 <HAL_ADC_Init+0x1ac>
 80019c0:	2318      	movs	r3, #24
 80019c2:	e006      	b.n	80019d2 <HAL_ADC_Init+0x1ba>
 80019c4:	2300      	movs	r3, #0
 80019c6:	e004      	b.n	80019d2 <HAL_ADC_Init+0x1ba>
 80019c8:	2310      	movs	r3, #16
 80019ca:	e002      	b.n	80019d2 <HAL_ADC_Init+0x1ba>
 80019cc:	2308      	movs	r3, #8
 80019ce:	e000      	b.n	80019d2 <HAL_ADC_Init+0x1ba>
 80019d0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80019d2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019da:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	e00e      	b.n	8001a00 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7e5b      	ldrb	r3, [r3, #25]
 80019e6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019ec:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80019f2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019fa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d106      	bne.n	8001a18 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	045b      	lsls	r3, r3, #17
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d009      	beq.n	8001a34 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a26      	ldr	r2, [pc, #152]	; (8001ad4 <HAL_ADC_Init+0x2bc>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d115      	bne.n	8001a6a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <HAL_ADC_Init+0x2c8>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	69b9      	ldr	r1, [r7, #24]
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	611a      	str	r2, [r3, #16]
 8001a68:	e009      	b.n	8001a7e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <HAL_ADC_Init+0x2cc>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	69b9      	ldr	r1, [r7, #24]
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fe8c 	bl	80017a0 <LL_ADC_REG_IsConversionOngoing>
 8001a88:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff feae 	bl	80017f0 <LL_ADC_INJ_IsConversionOngoing>
 8001a94:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f040 808e 	bne.w	8001bba <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f040 808a 	bne.w	8001bba <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <HAL_ADC_Init+0x2bc>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d11b      	bne.n	8001ae8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7e1b      	ldrb	r3, [r3, #24]
 8001ab4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001abc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	e018      	b.n	8001af6 <HAL_ADC_Init+0x2de>
 8001ac4:	24000000 	.word	0x24000000
 8001ac8:	053e2d63 	.word	0x053e2d63
 8001acc:	40022000 	.word	0x40022000
 8001ad0:	40022100 	.word	0x40022100
 8001ad4:	58026000 	.word	0x58026000
 8001ad8:	40022300 	.word	0x40022300
 8001adc:	58026300 	.word	0x58026300
 8001ae0:	fff04007 	.word	0xfff04007
 8001ae4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	7e1b      	ldrb	r3, [r3, #24]
 8001aec:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <HAL_ADC_Init+0x400>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	69b9      	ldr	r1, [r7, #24]
 8001b06:	430b      	orrs	r3, r1
 8001b08:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d137      	bne.n	8001b84 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a3f      	ldr	r2, [pc, #252]	; (8001c1c <HAL_ADC_Init+0x404>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d116      	bne.n	8001b52 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	; (8001c20 <HAL_ADC_Init+0x408>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b36:	4311      	orrs	r1, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b3c:	4311      	orrs	r1, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001b42:	430a      	orrs	r2, r1
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	611a      	str	r2, [r3, #16]
 8001b50:	e020      	b.n	8001b94 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <HAL_ADC_Init+0x40c>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b60:	3a01      	subs	r2, #1
 8001b62:	0411      	lsls	r1, r2, #16
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b68:	4311      	orrs	r1, r2
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b6e:	4311      	orrs	r1, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001b74:	430a      	orrs	r2, r1
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0201 	orr.w	r2, r2, #1
 8001b80:	611a      	str	r2, [r3, #16]
 8001b82:	e007      	b.n	8001b94 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691a      	ldr	r2, [r3, #16]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0201 	bic.w	r2, r2, #1
 8001b92:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a1b      	ldr	r2, [pc, #108]	; (8001c1c <HAL_ADC_Init+0x404>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d002      	beq.n	8001bba <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f001 fb33 	bl	8003220 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d10c      	bne.n	8001bdc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	f023 010f 	bic.w	r1, r3, #15
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	1e5a      	subs	r2, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	631a      	str	r2, [r3, #48]	; 0x30
 8001bda:	e007      	b.n	8001bec <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 020f 	bic.w	r2, r2, #15
 8001bea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf0:	f023 0303 	bic.w	r3, r3, #3
 8001bf4:	f043 0201 	orr.w	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	661a      	str	r2, [r3, #96]	; 0x60
 8001bfc:	e007      	b.n	8001c0e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c02:	f043 0210 	orr.w	r2, r3, #16
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3724      	adds	r7, #36	; 0x24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd90      	pop	{r4, r7, pc}
 8001c18:	ffffbffc 	.word	0xffffbffc
 8001c1c:	58026000 	.word	0x58026000
 8001c20:	fc00f81f 	.word	0xfc00f81f
 8001c24:	fc00f81e 	.word	0xfc00f81e

08001c28 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a60      	ldr	r2, [pc, #384]	; (8001dbc <HAL_ADC_Start_DMA+0x194>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d004      	beq.n	8001c48 <HAL_ADC_Start_DMA+0x20>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a5f      	ldr	r2, [pc, #380]	; (8001dc0 <HAL_ADC_Start_DMA+0x198>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d101      	bne.n	8001c4c <HAL_ADC_Start_DMA+0x24>
 8001c48:	4b5e      	ldr	r3, [pc, #376]	; (8001dc4 <HAL_ADC_Start_DMA+0x19c>)
 8001c4a:	e000      	b.n	8001c4e <HAL_ADC_Start_DMA+0x26>
 8001c4c:	4b5e      	ldr	r3, [pc, #376]	; (8001dc8 <HAL_ADC_Start_DMA+0x1a0>)
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fcc6 	bl	80015e0 <LL_ADC_GetMultimode>
 8001c54:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fda0 	bl	80017a0 <LL_ADC_REG_IsConversionOngoing>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f040 80a2 	bne.w	8001dac <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_Start_DMA+0x4e>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e09d      	b.n	8001db2 <HAL_ADC_Start_DMA+0x18a>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	2b05      	cmp	r3, #5
 8001c88:	d003      	beq.n	8001c92 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	2b09      	cmp	r3, #9
 8001c8e:	f040 8086 	bne.w	8001d9e <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f001 f946 	bl	8002f24 <ADC_Enable>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d178      	bne.n	8001d94 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ca6:	4b49      	ldr	r3, [pc, #292]	; (8001dcc <HAL_ADC_Start_DMA+0x1a4>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a42      	ldr	r2, [pc, #264]	; (8001dc0 <HAL_ADC_Start_DMA+0x198>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d002      	beq.n	8001cc2 <HAL_ADC_Start_DMA+0x9a>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	e000      	b.n	8001cc4 <HAL_ADC_Start_DMA+0x9c>
 8001cc2:	4b3e      	ldr	r3, [pc, #248]	; (8001dbc <HAL_ADC_Start_DMA+0x194>)
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d002      	beq.n	8001cd2 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d105      	bne.n	8001cde <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d006      	beq.n	8001cf8 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cee:	f023 0206 	bic.w	r2, r3, #6
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	665a      	str	r2, [r3, #100]	; 0x64
 8001cf6:	e002      	b.n	8001cfe <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	4a33      	ldr	r2, [pc, #204]	; (8001dd0 <HAL_ADC_Start_DMA+0x1a8>)
 8001d04:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	4a32      	ldr	r2, [pc, #200]	; (8001dd4 <HAL_ADC_Start_DMA+0x1ac>)
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	4a31      	ldr	r2, [pc, #196]	; (8001dd8 <HAL_ADC_Start_DMA+0x1b0>)
 8001d14:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	221c      	movs	r2, #28
 8001d1c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 0210 	orr.w	r2, r2, #16
 8001d34:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a28      	ldr	r2, [pc, #160]	; (8001ddc <HAL_ADC_Start_DMA+0x1b4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d10f      	bne.n	8001d60 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4610      	mov	r0, r2
 8001d50:	f7ff fbae 	bl	80014b0 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fb99 	bl	8001490 <LL_ADC_EnableDMAReq>
 8001d5e:	e007      	b.n	8001d70 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	f7ff fb7d 	bl	800146a <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3340      	adds	r3, #64	; 0x40
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f002 f852 	bl	8003e28 <HAL_DMA_Start_IT>
 8001d84:	4603      	mov	r3, r0
 8001d86:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fcdf 	bl	8001750 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001d92:	e00d      	b.n	8001db0 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8001d9c:	e008      	b.n	8001db0 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001daa:	e001      	b.n	8001db0 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dac:	2302      	movs	r3, #2
 8001dae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	40022100 	.word	0x40022100
 8001dc4:	40022300 	.word	0x40022300
 8001dc8:	58026300 	.word	0x58026300
 8001dcc:	fffff0fe 	.word	0xfffff0fe
 8001dd0:	080030f7 	.word	0x080030f7
 8001dd4:	080031cf 	.word	0x080031cf
 8001dd8:	080031eb 	.word	0x080031eb
 8001ddc:	58026000 	.word	0x58026000

08001de0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_Stop_DMA+0x16>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e04f      	b.n	8001e96 <HAL_ADC_Stop_DMA+0xb6>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001dfe:	2103      	movs	r1, #3
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 ffd3 	bl	8002dac <ADC_ConversionStop>
 8001e06:	4603      	mov	r3, r0
 8001e08:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d13d      	bne.n	8001e8c <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0203 	bic.w	r2, r2, #3
 8001e1e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d10f      	bne.n	8001e4e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e32:	4618      	mov	r0, r3
 8001e34:	f002 fa62 	bl	80042fc <HAL_DMA_Abort>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	661a      	str	r2, [r3, #96]	; 0x60
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0210 	bic.w	r2, r2, #16
 8001e5c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d105      	bne.n	8001e70 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f001 f8e7 	bl	8003038 <ADC_Disable>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	73fb      	strb	r3, [r7, #15]
 8001e6e:	e002      	b.n	8001e76 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f001 f8e1 	bl	8003038 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d107      	bne.n	8001e8c <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <HAL_ADC_Stop_DMA+0xc0>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	f043 0201 	orr.w	r2, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	661a      	str	r2, [r3, #96]	; 0x60
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	ffffeefe 	.word	0xffffeefe

08001ea4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a87      	ldr	r2, [pc, #540]	; (80020e4 <HAL_ADC_IRQHandler+0x240>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d004      	beq.n	8001ed4 <HAL_ADC_IRQHandler+0x30>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a86      	ldr	r2, [pc, #536]	; (80020e8 <HAL_ADC_IRQHandler+0x244>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d101      	bne.n	8001ed8 <HAL_ADC_IRQHandler+0x34>
 8001ed4:	4b85      	ldr	r3, [pc, #532]	; (80020ec <HAL_ADC_IRQHandler+0x248>)
 8001ed6:	e000      	b.n	8001eda <HAL_ADC_IRQHandler+0x36>
 8001ed8:	4b85      	ldr	r3, [pc, #532]	; (80020f0 <HAL_ADC_IRQHandler+0x24c>)
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fb80 	bl	80015e0 <LL_ADC_GetMultimode>
 8001ee0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d017      	beq.n	8001f1c <HAL_ADC_IRQHandler+0x78>
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d012      	beq.n	8001f1c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d105      	bne.n	8001f0e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f06:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f001 fa9a 	bl	8003448 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d004      	beq.n	8001f30 <HAL_ADC_IRQHandler+0x8c>
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10a      	bne.n	8001f46 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8083 	beq.w	8002042 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d07d      	beq.n	8002042 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d105      	bne.n	8001f5e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fa42 	bl	80013ec <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d062      	beq.n	8002034 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a5d      	ldr	r2, [pc, #372]	; (80020e8 <HAL_ADC_IRQHandler+0x244>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d002      	beq.n	8001f7e <HAL_ADC_IRQHandler+0xda>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	e000      	b.n	8001f80 <HAL_ADC_IRQHandler+0xdc>
 8001f7e:	4b59      	ldr	r3, [pc, #356]	; (80020e4 <HAL_ADC_IRQHandler+0x240>)
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d008      	beq.n	8001f9a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d002      	beq.n	8001f9a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2b09      	cmp	r3, #9
 8001f98:	d104      	bne.n	8001fa4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	623b      	str	r3, [r7, #32]
 8001fa2:	e00c      	b.n	8001fbe <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a4f      	ldr	r2, [pc, #316]	; (80020e8 <HAL_ADC_IRQHandler+0x244>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d002      	beq.n	8001fb4 <HAL_ADC_IRQHandler+0x110>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	e000      	b.n	8001fb6 <HAL_ADC_IRQHandler+0x112>
 8001fb4:	4b4b      	ldr	r3, [pc, #300]	; (80020e4 <HAL_ADC_IRQHandler+0x240>)
 8001fb6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d135      	bne.n	8002034 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d12e      	bne.n	8002034 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fbe0 	bl	80017a0 <LL_ADC_REG_IsConversionOngoing>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d11a      	bne.n	800201c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 020c 	bic.w	r2, r2, #12
 8001ff4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d112      	bne.n	8002034 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	661a      	str	r2, [r3, #96]	; 0x60
 800201a:	e00b      	b.n	8002034 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002020:	f043 0210 	orr.w	r2, r3, #16
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800202c:	f043 0201 	orr.w	r2, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7fe f969 	bl	800030c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	220c      	movs	r2, #12
 8002040:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f003 0320 	and.w	r3, r3, #32
 8002048:	2b00      	cmp	r3, #0
 800204a:	d004      	beq.n	8002056 <HAL_ADC_IRQHandler+0x1b2>
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10b      	bne.n	800206e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80a0 	beq.w	80021a2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 809a 	beq.w	80021a2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	2b00      	cmp	r3, #0
 8002078:	d105      	bne.n	8002086 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fa2a 	bl	80014e4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002090:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff f9a8 	bl	80013ec <LL_ADC_REG_IsTriggerSourceSWStart>
 800209c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a11      	ldr	r2, [pc, #68]	; (80020e8 <HAL_ADC_IRQHandler+0x244>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d002      	beq.n	80020ae <HAL_ADC_IRQHandler+0x20a>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	e000      	b.n	80020b0 <HAL_ADC_IRQHandler+0x20c>
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <HAL_ADC_IRQHandler+0x240>)
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d008      	beq.n	80020ca <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d005      	beq.n	80020ca <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b06      	cmp	r3, #6
 80020c2:	d002      	beq.n	80020ca <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2b07      	cmp	r3, #7
 80020c8:	d104      	bne.n	80020d4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	623b      	str	r3, [r7, #32]
 80020d2:	e014      	b.n	80020fe <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a03      	ldr	r2, [pc, #12]	; (80020e8 <HAL_ADC_IRQHandler+0x244>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00a      	beq.n	80020f4 <HAL_ADC_IRQHandler+0x250>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	e008      	b.n	80020f6 <HAL_ADC_IRQHandler+0x252>
 80020e4:	40022000 	.word	0x40022000
 80020e8:	40022100 	.word	0x40022100
 80020ec:	40022300 	.word	0x40022300
 80020f0:	58026300 	.word	0x58026300
 80020f4:	4b84      	ldr	r3, [pc, #528]	; (8002308 <HAL_ADC_IRQHandler+0x464>)
 80020f6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d047      	beq.n	8002194 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d007      	beq.n	800211e <HAL_ADC_IRQHandler+0x27a>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d03f      	beq.n	8002194 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800211a:	2b00      	cmp	r3, #0
 800211c:	d13a      	bne.n	8002194 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002128:	2b40      	cmp	r3, #64	; 0x40
 800212a:	d133      	bne.n	8002194 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d12e      	bne.n	8002194 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fb58 	bl	80017f0 <LL_ADC_INJ_IsConversionOngoing>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d11a      	bne.n	800217c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002154:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d112      	bne.n	8002194 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002172:	f043 0201 	orr.w	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	661a      	str	r2, [r3, #96]	; 0x60
 800217a:	e00b      	b.n	8002194 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002180:	f043 0210 	orr.w	r2, r3, #16
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800218c:	f043 0201 	orr.w	r2, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f001 f92f 	bl	80033f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2260      	movs	r2, #96	; 0x60
 80021a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d011      	beq.n	80021d0 <HAL_ADC_IRQHandler+0x32c>
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00c      	beq.n	80021d0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f8b2 	bl	800232c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d012      	beq.n	8002200 <HAL_ADC_IRQHandler+0x35c>
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00d      	beq.n	8002200 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f001 f915 	bl	8003420 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002206:	2b00      	cmp	r3, #0
 8002208:	d012      	beq.n	8002230 <HAL_ADC_IRQHandler+0x38c>
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00d      	beq.n	8002230 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002218:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f001 f907 	bl	8003434 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800222e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	d043      	beq.n	80022c2 <HAL_ADC_IRQHandler+0x41e>
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	d03e      	beq.n	80022c2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800224c:	2301      	movs	r3, #1
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
 8002250:	e021      	b.n	8002296 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d015      	beq.n	8002284 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a2a      	ldr	r2, [pc, #168]	; (8002308 <HAL_ADC_IRQHandler+0x464>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d004      	beq.n	800226c <HAL_ADC_IRQHandler+0x3c8>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a29      	ldr	r2, [pc, #164]	; (800230c <HAL_ADC_IRQHandler+0x468>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d101      	bne.n	8002270 <HAL_ADC_IRQHandler+0x3cc>
 800226c:	4b28      	ldr	r3, [pc, #160]	; (8002310 <HAL_ADC_IRQHandler+0x46c>)
 800226e:	e000      	b.n	8002272 <HAL_ADC_IRQHandler+0x3ce>
 8002270:	4b28      	ldr	r3, [pc, #160]	; (8002314 <HAL_ADC_IRQHandler+0x470>)
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f9c2 	bl	80015fc <LL_ADC_GetMultiDMATransfer>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00b      	beq.n	8002296 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800227e:	2301      	movs	r3, #1
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
 8002282:	e008      	b.n	8002296 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002292:	2301      	movs	r3, #1
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	2b01      	cmp	r3, #1
 800229a:	d10e      	bne.n	80022ba <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022ac:	f043 0202 	orr.w	r2, r3, #2
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f843 	bl	8002340 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2210      	movs	r2, #16
 80022c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d018      	beq.n	80022fe <HAL_ADC_IRQHandler+0x45a>
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d013      	beq.n	80022fe <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022da:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022e6:	f043 0208 	orr.w	r2, r3, #8
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022f6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f001 f887 	bl	800340c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80022fe:	bf00      	nop
 8002300:	3728      	adds	r7, #40	; 0x28
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40022000 	.word	0x40022000
 800230c:	40022100 	.word	0x40022100
 8002310:	40022300 	.word	0x40022300
 8002314:	58026300 	.word	0x58026300

08002318 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002354:	b590      	push	{r4, r7, lr}
 8002356:	b0b9      	sub	sp, #228	; 0xe4
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800236e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4aa9      	ldr	r2, [pc, #676]	; (800261c <HAL_ADC_ConfigChannel+0x2c8>)
 8002376:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800237e:	2b01      	cmp	r3, #1
 8002380:	d102      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x34>
 8002382:	2302      	movs	r3, #2
 8002384:	f000 bcfa 	b.w	8002d7c <HAL_ADC_ConfigChannel+0xa28>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fa03 	bl	80017a0 <LL_ADC_REG_IsConversionOngoing>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	f040 84de 	bne.w	8002d5e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a9e      	ldr	r2, [pc, #632]	; (8002620 <HAL_ADC_ConfigChannel+0x2cc>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d033      	beq.n	8002414 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d108      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x76>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	2201      	movs	r2, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	e01d      	b.n	8002406 <HAL_ADC_ConfigChannel+0xb2>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80023ee:	2320      	movs	r3, #32
 80023f0:	e004      	b.n	80023fc <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80023f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	2201      	movs	r2, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	69d1      	ldr	r1, [r2, #28]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	430b      	orrs	r3, r1
 8002412:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	6859      	ldr	r1, [r3, #4]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	f7fe fff6 	bl	8001412 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff f9b8 	bl	80017a0 <LL_ADC_REG_IsConversionOngoing>
 8002430:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff f9d9 	bl	80017f0 <LL_ADC_INJ_IsConversionOngoing>
 800243e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002442:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 8270 	bne.w	800292c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800244c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002450:	2b00      	cmp	r3, #0
 8002452:	f040 826b 	bne.w	800292c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6819      	ldr	r1, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	461a      	mov	r2, r3
 8002464:	f7ff f851 	bl	800150a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a6c      	ldr	r2, [pc, #432]	; (8002620 <HAL_ADC_ConfigChannel+0x2cc>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d10d      	bne.n	800248e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	08db      	lsrs	r3, r3, #3
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800248c:	e032      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800248e:	4b65      	ldr	r3, [pc, #404]	; (8002624 <HAL_ADC_ConfigChannel+0x2d0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002496:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800249a:	d10b      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x160>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	e01d      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x19c>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10b      	bne.n	80024da <HAL_ADC_ConfigChannel+0x186>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	e00a      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x19c>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d048      	beq.n	800258e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6919      	ldr	r1, [r3, #16]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800250c:	f7fe fe7c 	bl	8001208 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a42      	ldr	r2, [pc, #264]	; (8002620 <HAL_ADC_ConfigChannel+0x2cc>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d119      	bne.n	800254e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	6919      	ldr	r1, [r3, #16]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	461a      	mov	r2, r3
 8002528:	f7fe ff14 	bl	8001354 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	6919      	ldr	r1, [r3, #16]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	f893 3020 	ldrb.w	r3, [r3, #32]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d102      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x1f0>
 800253e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002542:	e000      	b.n	8002546 <HAL_ADC_ConfigChannel+0x1f2>
 8002544:	2300      	movs	r3, #0
 8002546:	461a      	mov	r2, r3
 8002548:	f7fe fee2 	bl	8001310 <LL_ADC_SetOffsetSaturation>
 800254c:	e1ee      	b.n	800292c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	6919      	ldr	r1, [r3, #16]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800255c:	2b01      	cmp	r3, #1
 800255e:	d102      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x212>
 8002560:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002564:	e000      	b.n	8002568 <HAL_ADC_ConfigChannel+0x214>
 8002566:	2300      	movs	r3, #0
 8002568:	461a      	mov	r2, r3
 800256a:	f7fe feaf 	bl	80012cc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6919      	ldr	r1, [r3, #16]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	7e1b      	ldrb	r3, [r3, #24]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d102      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x230>
 800257e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002582:	e000      	b.n	8002586 <HAL_ADC_ConfigChannel+0x232>
 8002584:	2300      	movs	r3, #0
 8002586:	461a      	mov	r2, r3
 8002588:	f7fe fe86 	bl	8001298 <LL_ADC_SetDataRightShift>
 800258c:	e1ce      	b.n	800292c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a23      	ldr	r2, [pc, #140]	; (8002620 <HAL_ADC_ConfigChannel+0x2cc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	f040 8181 	bne.w	800289c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe fe63 	bl	800126c <LL_ADC_GetOffsetChannel>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10a      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x272>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fe58 	bl	800126c <LL_ADC_GetOffsetChannel>
 80025bc:	4603      	mov	r3, r0
 80025be:	0e9b      	lsrs	r3, r3, #26
 80025c0:	f003 021f 	and.w	r2, r3, #31
 80025c4:	e01e      	b.n	8002604 <HAL_ADC_ConfigChannel+0x2b0>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fe4d 	bl	800126c <LL_ADC_GetOffsetChannel>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80025e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80025ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80025f4:	2320      	movs	r3, #32
 80025f6:	e004      	b.n	8002602 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80025f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025fc:	fab3 f383 	clz	r3, r3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10b      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x2d4>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	0e9b      	lsrs	r3, r3, #26
 8002616:	f003 031f 	and.w	r3, r3, #31
 800261a:	e01e      	b.n	800265a <HAL_ADC_ConfigChannel+0x306>
 800261c:	47ff0000 	.word	0x47ff0000
 8002620:	58026000 	.word	0x58026000
 8002624:	5c001000 	.word	0x5c001000
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800263c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002644:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 800264c:	2320      	movs	r3, #32
 800264e:	e004      	b.n	800265a <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8002650:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	429a      	cmp	r2, r3
 800265c:	d106      	bne.n	800266c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2200      	movs	r2, #0
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe fe96 	bl	8001398 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2101      	movs	r1, #1
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fdfa 	bl	800126c <LL_ADC_GetOffsetChannel>
 8002678:	4603      	mov	r3, r0
 800267a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10a      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x344>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2101      	movs	r1, #1
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fdef 	bl	800126c <LL_ADC_GetOffsetChannel>
 800268e:	4603      	mov	r3, r0
 8002690:	0e9b      	lsrs	r3, r3, #26
 8002692:	f003 021f 	and.w	r2, r3, #31
 8002696:	e01e      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x382>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2101      	movs	r1, #1
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fde4 	bl	800126c <LL_ADC_GetOffsetChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80026b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80026be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80026c6:	2320      	movs	r3, #32
 80026c8:	e004      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80026ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d105      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x39a>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	0e9b      	lsrs	r3, r3, #26
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	e018      	b.n	8002720 <HAL_ADC_ConfigChannel+0x3cc>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002702:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002706:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800270a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8002712:	2320      	movs	r3, #32
 8002714:	e004      	b.n	8002720 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8002716:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	429a      	cmp	r2, r3
 8002722:	d106      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2200      	movs	r2, #0
 800272a:	2101      	movs	r1, #1
 800272c:	4618      	mov	r0, r3
 800272e:	f7fe fe33 	bl	8001398 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2102      	movs	r1, #2
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe fd97 	bl	800126c <LL_ADC_GetOffsetChannel>
 800273e:	4603      	mov	r3, r0
 8002740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10a      	bne.n	800275e <HAL_ADC_ConfigChannel+0x40a>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2102      	movs	r1, #2
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fd8c 	bl	800126c <LL_ADC_GetOffsetChannel>
 8002754:	4603      	mov	r3, r0
 8002756:	0e9b      	lsrs	r3, r3, #26
 8002758:	f003 021f 	and.w	r2, r3, #31
 800275c:	e01e      	b.n	800279c <HAL_ADC_ConfigChannel+0x448>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2102      	movs	r1, #2
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe fd81 	bl	800126c <LL_ADC_GetOffsetChannel>
 800276a:	4603      	mov	r3, r0
 800276c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800277c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002780:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002784:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800278c:	2320      	movs	r3, #32
 800278e:	e004      	b.n	800279a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8002790:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d105      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x460>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	0e9b      	lsrs	r3, r3, #26
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	e014      	b.n	80027de <HAL_ADC_ConfigChannel+0x48a>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80027c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80027c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80027d0:	2320      	movs	r3, #32
 80027d2:	e004      	b.n	80027de <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80027d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	429a      	cmp	r2, r3
 80027e0:	d106      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2200      	movs	r2, #0
 80027e8:	2102      	movs	r1, #2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe fdd4 	bl	8001398 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2103      	movs	r1, #3
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe fd38 	bl	800126c <LL_ADC_GetOffsetChannel>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10a      	bne.n	800281c <HAL_ADC_ConfigChannel+0x4c8>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2103      	movs	r1, #3
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe fd2d 	bl	800126c <LL_ADC_GetOffsetChannel>
 8002812:	4603      	mov	r3, r0
 8002814:	0e9b      	lsrs	r3, r3, #26
 8002816:	f003 021f 	and.w	r2, r3, #31
 800281a:	e017      	b.n	800284c <HAL_ADC_ConfigChannel+0x4f8>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2103      	movs	r1, #3
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fd22 	bl	800126c <LL_ADC_GetOffsetChannel>
 8002828:	4603      	mov	r3, r0
 800282a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002836:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800283e:	2320      	movs	r3, #32
 8002840:	e003      	b.n	800284a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	461a      	mov	r2, r3
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x510>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	0e9b      	lsrs	r3, r3, #26
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	e011      	b.n	8002888 <HAL_ADC_ConfigChannel+0x534>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002872:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002874:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002876:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 800287c:	2320      	movs	r3, #32
 800287e:	e003      	b.n	8002888 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8002880:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	429a      	cmp	r2, r3
 800288a:	d14f      	bne.n	800292c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2200      	movs	r2, #0
 8002892:	2103      	movs	r1, #3
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe fd7f 	bl	8001398 <LL_ADC_SetOffsetState>
 800289a:	e047      	b.n	800292c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	069b      	lsls	r3, r3, #26
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d107      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028be:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	069b      	lsls	r3, r3, #26
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d107      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028e2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	069b      	lsls	r3, r3, #26
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d107      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002906:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800290e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	069b      	lsls	r3, r3, #26
 8002918:	429a      	cmp	r2, r3
 800291a:	d107      	bne.n	800292c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800292a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe fee7 	bl	8001704 <LL_ADC_IsEnabled>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	f040 8219 	bne.w	8002d70 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6819      	ldr	r1, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	461a      	mov	r2, r3
 800294c:	f7fe fe08 	bl	8001560 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4aa1      	ldr	r2, [pc, #644]	; (8002bdc <HAL_ADC_ConfigChannel+0x888>)
 8002956:	4293      	cmp	r3, r2
 8002958:	f040 812e 	bne.w	8002bb8 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10b      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x630>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	0e9b      	lsrs	r3, r3, #26
 8002972:	3301      	adds	r3, #1
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	2b09      	cmp	r3, #9
 800297a:	bf94      	ite	ls
 800297c:	2301      	movls	r3, #1
 800297e:	2300      	movhi	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e019      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x664>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002994:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800299c:	2320      	movs	r3, #32
 800299e:	e003      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80029a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a2:	fab3 f383 	clz	r3, r3
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	3301      	adds	r3, #1
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	2b09      	cmp	r3, #9
 80029b0:	bf94      	ite	ls
 80029b2:	2301      	movls	r3, #1
 80029b4:	2300      	movhi	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d079      	beq.n	8002ab0 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d107      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x684>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	0e9b      	lsrs	r3, r3, #26
 80029ce:	3301      	adds	r3, #1
 80029d0:	069b      	lsls	r3, r3, #26
 80029d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029d6:	e015      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x6b0>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80029e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80029ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80029f0:	2320      	movs	r3, #32
 80029f2:	e003      	b.n	80029fc <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80029f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	3301      	adds	r3, #1
 80029fe:	069b      	lsls	r3, r3, #26
 8002a00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d109      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x6d0>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	0e9b      	lsrs	r3, r3, #26
 8002a16:	3301      	adds	r3, #1
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	e017      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x700>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a34:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8002a3c:	2320      	movs	r3, #32
 8002a3e:	e003      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8002a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	3301      	adds	r3, #1
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	2101      	movs	r1, #1
 8002a50:	fa01 f303 	lsl.w	r3, r1, r3
 8002a54:	ea42 0103 	orr.w	r1, r2, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x726>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0e9b      	lsrs	r3, r3, #26
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f003 021f 	and.w	r2, r3, #31
 8002a70:	4613      	mov	r3, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4413      	add	r3, r2
 8002a76:	051b      	lsls	r3, r3, #20
 8002a78:	e018      	b.n	8002aac <HAL_ADC_ConfigChannel+0x758>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8002a92:	2320      	movs	r3, #32
 8002a94:	e003      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8002a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a98:	fab3 f383 	clz	r3, r3
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f003 021f 	and.w	r2, r3, #31
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4413      	add	r3, r2
 8002aaa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aac:	430b      	orrs	r3, r1
 8002aae:	e07e      	b.n	8002bae <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d107      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x778>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0e9b      	lsrs	r3, r3, #26
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	069b      	lsls	r3, r3, #26
 8002ac6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aca:	e015      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x7a4>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8002ae4:	2320      	movs	r3, #32
 8002ae6:	e003      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	3301      	adds	r3, #1
 8002af2:	069b      	lsls	r3, r3, #26
 8002af4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d109      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x7c4>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	0e9b      	lsrs	r3, r3, #26
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	2101      	movs	r1, #1
 8002b12:	fa01 f303 	lsl.w	r3, r1, r3
 8002b16:	e017      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x7f4>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	61bb      	str	r3, [r7, #24]
  return result;
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8002b30:	2320      	movs	r3, #32
 8002b32:	e003      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	2101      	movs	r1, #1
 8002b44:	fa01 f303 	lsl.w	r3, r1, r3
 8002b48:	ea42 0103 	orr.w	r1, r2, r3
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10d      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x820>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	0e9b      	lsrs	r3, r3, #26
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f003 021f 	and.w	r2, r3, #31
 8002b64:	4613      	mov	r3, r2
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	3b1e      	subs	r3, #30
 8002b6c:	051b      	lsls	r3, r3, #20
 8002b6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b72:	e01b      	b.n	8002bac <HAL_ADC_ConfigChannel+0x858>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	60fb      	str	r3, [r7, #12]
  return result;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8002b8c:	2320      	movs	r3, #32
 8002b8e:	e003      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f003 021f 	and.w	r2, r3, #31
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3b1e      	subs	r3, #30
 8002ba6:	051b      	lsls	r3, r3, #20
 8002ba8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bac:	430b      	orrs	r3, r1
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	6892      	ldr	r2, [r2, #8]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f7fe fca9 	bl	800150a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f280 80d7 	bge.w	8002d70 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a06      	ldr	r2, [pc, #24]	; (8002be0 <HAL_ADC_ConfigChannel+0x88c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d004      	beq.n	8002bd6 <HAL_ADC_ConfigChannel+0x882>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a04      	ldr	r2, [pc, #16]	; (8002be4 <HAL_ADC_ConfigChannel+0x890>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d10a      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x898>
 8002bd6:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <HAL_ADC_ConfigChannel+0x894>)
 8002bd8:	e009      	b.n	8002bee <HAL_ADC_ConfigChannel+0x89a>
 8002bda:	bf00      	nop
 8002bdc:	47ff0000 	.word	0x47ff0000
 8002be0:	40022000 	.word	0x40022000
 8002be4:	40022100 	.word	0x40022100
 8002be8:	40022300 	.word	0x40022300
 8002bec:	4b65      	ldr	r3, [pc, #404]	; (8002d84 <HAL_ADC_ConfigChannel+0xa30>)
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe fafc 	bl	80011ec <LL_ADC_GetCommonPathInternalCh>
 8002bf4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a62      	ldr	r2, [pc, #392]	; (8002d88 <HAL_ADC_ConfigChannel+0xa34>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <HAL_ADC_ConfigChannel+0x8b8>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a61      	ldr	r2, [pc, #388]	; (8002d8c <HAL_ADC_ConfigChannel+0xa38>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d10e      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x8d6>
 8002c0c:	485e      	ldr	r0, [pc, #376]	; (8002d88 <HAL_ADC_ConfigChannel+0xa34>)
 8002c0e:	f7fe fd79 	bl	8001704 <LL_ADC_IsEnabled>
 8002c12:	4604      	mov	r4, r0
 8002c14:	485d      	ldr	r0, [pc, #372]	; (8002d8c <HAL_ADC_ConfigChannel+0xa38>)
 8002c16:	f7fe fd75 	bl	8001704 <LL_ADC_IsEnabled>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4323      	orrs	r3, r4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	bf0c      	ite	eq
 8002c22:	2301      	moveq	r3, #1
 8002c24:	2300      	movne	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	e008      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x8e8>
 8002c2a:	4859      	ldr	r0, [pc, #356]	; (8002d90 <HAL_ADC_ConfigChannel+0xa3c>)
 8002c2c:	f7fe fd6a 	bl	8001704 <LL_ADC_IsEnabled>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bf0c      	ite	eq
 8002c36:	2301      	moveq	r3, #1
 8002c38:	2300      	movne	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 8084 	beq.w	8002d4a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a53      	ldr	r2, [pc, #332]	; (8002d94 <HAL_ADC_ConfigChannel+0xa40>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d132      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x95e>
 8002c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d12c      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a4c      	ldr	r2, [pc, #304]	; (8002d90 <HAL_ADC_ConfigChannel+0xa3c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	f040 8086 	bne.w	8002d70 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a47      	ldr	r2, [pc, #284]	; (8002d88 <HAL_ADC_ConfigChannel+0xa34>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d004      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x924>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a46      	ldr	r2, [pc, #280]	; (8002d8c <HAL_ADC_ConfigChannel+0xa38>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x928>
 8002c78:	4a47      	ldr	r2, [pc, #284]	; (8002d98 <HAL_ADC_ConfigChannel+0xa44>)
 8002c7a:	e000      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x92a>
 8002c7c:	4a41      	ldr	r2, [pc, #260]	; (8002d84 <HAL_ADC_ConfigChannel+0xa30>)
 8002c7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c86:	4619      	mov	r1, r3
 8002c88:	4610      	mov	r0, r2
 8002c8a:	f7fe fa9c 	bl	80011c6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c8e:	4b43      	ldr	r3, [pc, #268]	; (8002d9c <HAL_ADC_ConfigChannel+0xa48>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	099b      	lsrs	r3, r3, #6
 8002c94:	4a42      	ldr	r2, [pc, #264]	; (8002da0 <HAL_ADC_ConfigChannel+0xa4c>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	099b      	lsrs	r3, r3, #6
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ca2:	e002      	b.n	8002caa <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1f9      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cb0:	e05e      	b.n	8002d70 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a3b      	ldr	r2, [pc, #236]	; (8002da4 <HAL_ADC_ConfigChannel+0xa50>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d120      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x9aa>
 8002cbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d11a      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a30      	ldr	r2, [pc, #192]	; (8002d90 <HAL_ADC_ConfigChannel+0xa3c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d14e      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a2c      	ldr	r2, [pc, #176]	; (8002d88 <HAL_ADC_ConfigChannel+0xa34>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d004      	beq.n	8002ce6 <HAL_ADC_ConfigChannel+0x992>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a2a      	ldr	r2, [pc, #168]	; (8002d8c <HAL_ADC_ConfigChannel+0xa38>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x996>
 8002ce6:	4a2c      	ldr	r2, [pc, #176]	; (8002d98 <HAL_ADC_ConfigChannel+0xa44>)
 8002ce8:	e000      	b.n	8002cec <HAL_ADC_ConfigChannel+0x998>
 8002cea:	4a26      	ldr	r2, [pc, #152]	; (8002d84 <HAL_ADC_ConfigChannel+0xa30>)
 8002cec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	f7fe fa65 	bl	80011c6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cfc:	e038      	b.n	8002d70 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a29      	ldr	r2, [pc, #164]	; (8002da8 <HAL_ADC_ConfigChannel+0xa54>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d133      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0xa1c>
 8002d08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d12d      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1d      	ldr	r2, [pc, #116]	; (8002d90 <HAL_ADC_ConfigChannel+0xa3c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d128      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a19      	ldr	r2, [pc, #100]	; (8002d88 <HAL_ADC_ConfigChannel+0xa34>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d004      	beq.n	8002d32 <HAL_ADC_ConfigChannel+0x9de>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a17      	ldr	r2, [pc, #92]	; (8002d8c <HAL_ADC_ConfigChannel+0xa38>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x9e2>
 8002d32:	4a19      	ldr	r2, [pc, #100]	; (8002d98 <HAL_ADC_ConfigChannel+0xa44>)
 8002d34:	e000      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x9e4>
 8002d36:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <HAL_ADC_ConfigChannel+0xa30>)
 8002d38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f7fe fa3f 	bl	80011c6 <LL_ADC_SetCommonPathInternalCh>
 8002d48:	e012      	b.n	8002d70 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4e:	f043 0220 	orr.w	r2, r3, #32
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8002d5c:	e008      	b.n	8002d70 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d62:	f043 0220 	orr.w	r2, r3, #32
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002d78:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	37e4      	adds	r7, #228	; 0xe4
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd90      	pop	{r4, r7, pc}
 8002d84:	58026300 	.word	0x58026300
 8002d88:	40022000 	.word	0x40022000
 8002d8c:	40022100 	.word	0x40022100
 8002d90:	58026000 	.word	0x58026000
 8002d94:	c7520000 	.word	0xc7520000
 8002d98:	40022300 	.word	0x40022300
 8002d9c:	24000000 	.word	0x24000000
 8002da0:	053e2d63 	.word	0x053e2d63
 8002da4:	c3210000 	.word	0xc3210000
 8002da8:	cb840000 	.word	0xcb840000

08002dac <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe fcec 	bl	80017a0 <LL_ADC_REG_IsConversionOngoing>
 8002dc8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fd0e 	bl	80017f0 <LL_ADC_INJ_IsConversionOngoing>
 8002dd4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d103      	bne.n	8002de4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8098 	beq.w	8002f14 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d02a      	beq.n	8002e48 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	7e5b      	ldrb	r3, [r3, #25]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d126      	bne.n	8002e48 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	7e1b      	ldrb	r3, [r3, #24]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d122      	bne.n	8002e48 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002e02:	2301      	movs	r3, #1
 8002e04:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002e06:	e014      	b.n	8002e32 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	4a45      	ldr	r2, [pc, #276]	; (8002f20 <ADC_ConversionStop+0x174>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d90d      	bls.n	8002e2c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e14:	f043 0210 	orr.w	r2, r3, #16
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e20:	f043 0201 	orr.w	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e074      	b.n	8002f16 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3c:	2b40      	cmp	r3, #64	; 0x40
 8002e3e:	d1e3      	bne.n	8002e08 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2240      	movs	r2, #64	; 0x40
 8002e46:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d014      	beq.n	8002e78 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fca4 	bl	80017a0 <LL_ADC_REG_IsConversionOngoing>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00c      	beq.n	8002e78 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fc61 	bl	800172a <LL_ADC_IsDisableOngoing>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d104      	bne.n	8002e78 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fc80 	bl	8001778 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d014      	beq.n	8002ea8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe fcb4 	bl	80017f0 <LL_ADC_INJ_IsConversionOngoing>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00c      	beq.n	8002ea8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe fc49 	bl	800172a <LL_ADC_IsDisableOngoing>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d104      	bne.n	8002ea8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fc90 	bl	80017c8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d005      	beq.n	8002eba <ADC_ConversionStop+0x10e>
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d105      	bne.n	8002ec0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002eb4:	230c      	movs	r3, #12
 8002eb6:	617b      	str	r3, [r7, #20]
        break;
 8002eb8:	e005      	b.n	8002ec6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002eba:	2308      	movs	r3, #8
 8002ebc:	617b      	str	r3, [r7, #20]
        break;
 8002ebe:	e002      	b.n	8002ec6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	617b      	str	r3, [r7, #20]
        break;
 8002ec4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002ec6:	f7fe f95f 	bl	8001188 <HAL_GetTick>
 8002eca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ecc:	e01b      	b.n	8002f06 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002ece:	f7fe f95b 	bl	8001188 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b05      	cmp	r3, #5
 8002eda:	d914      	bls.n	8002f06 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00d      	beq.n	8002f06 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eee:	f043 0210 	orr.w	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002efa:	f043 0201 	orr.w	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e007      	b.n	8002f16 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1dc      	bne.n	8002ece <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	000cdbff 	.word	0x000cdbff

08002f24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fe fbe7 	bl	8001704 <LL_ADC_IsEnabled>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d16e      	bne.n	800301a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	4b38      	ldr	r3, [pc, #224]	; (8003024 <ADC_Enable+0x100>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00d      	beq.n	8002f66 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4e:	f043 0210 	orr.w	r2, r3, #16
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f5a:	f043 0201 	orr.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e05a      	b.n	800301c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fba2 	bl	80016b4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f70:	f7fe f90a 	bl	8001188 <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a2b      	ldr	r2, [pc, #172]	; (8003028 <ADC_Enable+0x104>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d004      	beq.n	8002f8a <ADC_Enable+0x66>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a29      	ldr	r2, [pc, #164]	; (800302c <ADC_Enable+0x108>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d101      	bne.n	8002f8e <ADC_Enable+0x6a>
 8002f8a:	4b29      	ldr	r3, [pc, #164]	; (8003030 <ADC_Enable+0x10c>)
 8002f8c:	e000      	b.n	8002f90 <ADC_Enable+0x6c>
 8002f8e:	4b29      	ldr	r3, [pc, #164]	; (8003034 <ADC_Enable+0x110>)
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fe fb25 	bl	80015e0 <LL_ADC_GetMultimode>
 8002f96:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a23      	ldr	r2, [pc, #140]	; (800302c <ADC_Enable+0x108>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d002      	beq.n	8002fa8 <ADC_Enable+0x84>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	e000      	b.n	8002faa <ADC_Enable+0x86>
 8002fa8:	4b1f      	ldr	r3, [pc, #124]	; (8003028 <ADC_Enable+0x104>)
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d02c      	beq.n	800300c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d130      	bne.n	800301a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fb8:	e028      	b.n	800300c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe fba0 	bl	8001704 <LL_ADC_IsEnabled>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d104      	bne.n	8002fd4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fb70 	bl	80016b4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fd4:	f7fe f8d8 	bl	8001188 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d914      	bls.n	800300c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d00d      	beq.n	800300c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff4:	f043 0210 	orr.w	r2, r3, #16
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003000:	f043 0201 	orr.w	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e007      	b.n	800301c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b01      	cmp	r3, #1
 8003018:	d1cf      	bne.n	8002fba <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	8000003f 	.word	0x8000003f
 8003028:	40022000 	.word	0x40022000
 800302c:	40022100 	.word	0x40022100
 8003030:	40022300 	.word	0x40022300
 8003034:	58026300 	.word	0x58026300

08003038 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe fb70 	bl	800172a <LL_ADC_IsDisableOngoing>
 800304a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f7fe fb57 	bl	8001704 <LL_ADC_IsEnabled>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d047      	beq.n	80030ec <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d144      	bne.n	80030ec <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 030d 	and.w	r3, r3, #13
 800306c:	2b01      	cmp	r3, #1
 800306e:	d10c      	bne.n	800308a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe fb31 	bl	80016dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2203      	movs	r2, #3
 8003080:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003082:	f7fe f881 	bl	8001188 <HAL_GetTick>
 8003086:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003088:	e029      	b.n	80030de <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308e:	f043 0210 	orr.w	r2, r3, #16
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800309a:	f043 0201 	orr.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e023      	b.n	80030ee <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030a6:	f7fe f86f 	bl	8001188 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d914      	bls.n	80030de <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00d      	beq.n	80030de <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c6:	f043 0210 	orr.w	r2, r3, #16
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030d2:	f043 0201 	orr.w	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e007      	b.n	80030ee <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1dc      	bne.n	80030a6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003108:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800310c:	2b00      	cmp	r3, #0
 800310e:	d14b      	bne.n	80031a8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003114:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d021      	beq.n	800316e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe f95c 	bl	80013ec <LL_ADC_REG_IsTriggerSourceSWStart>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d032      	beq.n	80031a0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d12b      	bne.n	80031a0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d11f      	bne.n	80031a0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003164:	f043 0201 	orr.w	r2, r3, #1
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	661a      	str	r2, [r3, #96]	; 0x60
 800316c:	e018      	b.n	80031a0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d111      	bne.n	80031a0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003180:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800318c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d105      	bne.n	80031a0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003198:	f043 0201 	orr.w	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f7fd f8b3 	bl	800030c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031a6:	e00e      	b.n	80031c6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff f8c3 	bl	8002340 <HAL_ADC_ErrorCallback>
}
 80031ba:	e004      	b.n	80031c6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	4798      	blx	r3
}
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031da:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f7ff f89b 	bl	8002318 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003208:	f043 0204 	orr.w	r2, r3, #4
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f7ff f895 	bl	8002340 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a6b      	ldr	r2, [pc, #428]	; (80033dc <ADC_ConfigureBoostMode+0x1bc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d004      	beq.n	800323c <ADC_ConfigureBoostMode+0x1c>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a6a      	ldr	r2, [pc, #424]	; (80033e0 <ADC_ConfigureBoostMode+0x1c0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d109      	bne.n	8003250 <ADC_ConfigureBoostMode+0x30>
 800323c:	4b69      	ldr	r3, [pc, #420]	; (80033e4 <ADC_ConfigureBoostMode+0x1c4>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf14      	ite	ne
 8003248:	2301      	movne	r3, #1
 800324a:	2300      	moveq	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	e008      	b.n	8003262 <ADC_ConfigureBoostMode+0x42>
 8003250:	4b65      	ldr	r3, [pc, #404]	; (80033e8 <ADC_ConfigureBoostMode+0x1c8>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf14      	ite	ne
 800325c:	2301      	movne	r3, #1
 800325e:	2300      	moveq	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01c      	beq.n	80032a0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003266:	f005 f93d 	bl	80084e4 <HAL_RCC_GetHCLKFreq>
 800326a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003274:	d010      	beq.n	8003298 <ADC_ConfigureBoostMode+0x78>
 8003276:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800327a:	d871      	bhi.n	8003360 <ADC_ConfigureBoostMode+0x140>
 800327c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003280:	d002      	beq.n	8003288 <ADC_ConfigureBoostMode+0x68>
 8003282:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003286:	d16b      	bne.n	8003360 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	0c1b      	lsrs	r3, r3, #16
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	60fb      	str	r3, [r7, #12]
        break;
 8003296:	e066      	b.n	8003366 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	60fb      	str	r3, [r7, #12]
        break;
 800329e:	e062      	b.n	8003366 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80032a0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80032a4:	f006 f848 	bl	8009338 <HAL_RCCEx_GetPeriphCLKFreq>
 80032a8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80032b2:	d051      	beq.n	8003358 <ADC_ConfigureBoostMode+0x138>
 80032b4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80032b8:	d854      	bhi.n	8003364 <ADC_ConfigureBoostMode+0x144>
 80032ba:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80032be:	d047      	beq.n	8003350 <ADC_ConfigureBoostMode+0x130>
 80032c0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80032c4:	d84e      	bhi.n	8003364 <ADC_ConfigureBoostMode+0x144>
 80032c6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80032ca:	d03d      	beq.n	8003348 <ADC_ConfigureBoostMode+0x128>
 80032cc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80032d0:	d848      	bhi.n	8003364 <ADC_ConfigureBoostMode+0x144>
 80032d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032d6:	d033      	beq.n	8003340 <ADC_ConfigureBoostMode+0x120>
 80032d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032dc:	d842      	bhi.n	8003364 <ADC_ConfigureBoostMode+0x144>
 80032de:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80032e2:	d029      	beq.n	8003338 <ADC_ConfigureBoostMode+0x118>
 80032e4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80032e8:	d83c      	bhi.n	8003364 <ADC_ConfigureBoostMode+0x144>
 80032ea:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80032ee:	d01a      	beq.n	8003326 <ADC_ConfigureBoostMode+0x106>
 80032f0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80032f4:	d836      	bhi.n	8003364 <ADC_ConfigureBoostMode+0x144>
 80032f6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80032fa:	d014      	beq.n	8003326 <ADC_ConfigureBoostMode+0x106>
 80032fc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003300:	d830      	bhi.n	8003364 <ADC_ConfigureBoostMode+0x144>
 8003302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003306:	d00e      	beq.n	8003326 <ADC_ConfigureBoostMode+0x106>
 8003308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800330c:	d82a      	bhi.n	8003364 <ADC_ConfigureBoostMode+0x144>
 800330e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003312:	d008      	beq.n	8003326 <ADC_ConfigureBoostMode+0x106>
 8003314:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003318:	d824      	bhi.n	8003364 <ADC_ConfigureBoostMode+0x144>
 800331a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800331e:	d002      	beq.n	8003326 <ADC_ConfigureBoostMode+0x106>
 8003320:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003324:	d11e      	bne.n	8003364 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	0c9b      	lsrs	r3, r3, #18
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	fbb2 f3f3 	udiv	r3, r2, r3
 8003334:	60fb      	str	r3, [r7, #12]
        break;
 8003336:	e016      	b.n	8003366 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	60fb      	str	r3, [r7, #12]
        break;
 800333e:	e012      	b.n	8003366 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	60fb      	str	r3, [r7, #12]
        break;
 8003346:	e00e      	b.n	8003366 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	099b      	lsrs	r3, r3, #6
 800334c:	60fb      	str	r3, [r7, #12]
        break;
 800334e:	e00a      	b.n	8003366 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	09db      	lsrs	r3, r3, #7
 8003354:	60fb      	str	r3, [r7, #12]
        break;
 8003356:	e006      	b.n	8003366 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	0a1b      	lsrs	r3, r3, #8
 800335c:	60fb      	str	r3, [r7, #12]
        break;
 800335e:	e002      	b.n	8003366 <ADC_ConfigureBoostMode+0x146>
        break;
 8003360:	bf00      	nop
 8003362:	e000      	b.n	8003366 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003364:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	085b      	lsrs	r3, r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4a1f      	ldr	r2, [pc, #124]	; (80033ec <ADC_ConfigureBoostMode+0x1cc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d808      	bhi.n	8003386 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003382:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003384:	e025      	b.n	80033d2 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4a19      	ldr	r2, [pc, #100]	; (80033f0 <ADC_ConfigureBoostMode+0x1d0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d80a      	bhi.n	80033a4 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a0:	609a      	str	r2, [r3, #8]
}
 80033a2:	e016      	b.n	80033d2 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <ADC_ConfigureBoostMode+0x1d4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d80a      	bhi.n	80033c2 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033be:	609a      	str	r2, [r3, #8]
}
 80033c0:	e007      	b.n	80033d2 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80033d0:	609a      	str	r2, [r3, #8]
}
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40022000 	.word	0x40022000
 80033e0:	40022100 	.word	0x40022100
 80033e4:	40022300 	.word	0x40022300
 80033e8:	58026300 	.word	0x58026300
 80033ec:	005f5e10 	.word	0x005f5e10
 80033f0:	00bebc20 	.word	0x00bebc20
 80033f4:	017d7840 	.word	0x017d7840

080033f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <__NVIC_SetPriorityGrouping+0x40>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003478:	4013      	ands	r3, r2
 800347a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003486:	4313      	orrs	r3, r2
 8003488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800348a:	4a04      	ldr	r2, [pc, #16]	; (800349c <__NVIC_SetPriorityGrouping+0x40>)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	60d3      	str	r3, [r2, #12]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	e000ed00 	.word	0xe000ed00
 80034a0:	05fa0000 	.word	0x05fa0000

080034a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <__NVIC_GetPriorityGrouping+0x18>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	0a1b      	lsrs	r3, r3, #8
 80034ae:	f003 0307 	and.w	r3, r3, #7
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	db0b      	blt.n	80034ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	f003 021f 	and.w	r2, r3, #31
 80034d8:	4907      	ldr	r1, [pc, #28]	; (80034f8 <__NVIC_EnableIRQ+0x38>)
 80034da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	2001      	movs	r0, #1
 80034e2:	fa00 f202 	lsl.w	r2, r0, r2
 80034e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	e000e100 	.word	0xe000e100

080034fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	6039      	str	r1, [r7, #0]
 8003506:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003508:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800350c:	2b00      	cmp	r3, #0
 800350e:	db0a      	blt.n	8003526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	b2da      	uxtb	r2, r3
 8003514:	490c      	ldr	r1, [pc, #48]	; (8003548 <__NVIC_SetPriority+0x4c>)
 8003516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800351a:	0112      	lsls	r2, r2, #4
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	440b      	add	r3, r1
 8003520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003524:	e00a      	b.n	800353c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	4908      	ldr	r1, [pc, #32]	; (800354c <__NVIC_SetPriority+0x50>)
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	3b04      	subs	r3, #4
 8003534:	0112      	lsls	r2, r2, #4
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	440b      	add	r3, r1
 800353a:	761a      	strb	r2, [r3, #24]
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	e000e100 	.word	0xe000e100
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003550:	b480      	push	{r7}
 8003552:	b089      	sub	sp, #36	; 0x24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f1c3 0307 	rsb	r3, r3, #7
 800356a:	2b04      	cmp	r3, #4
 800356c:	bf28      	it	cs
 800356e:	2304      	movcs	r3, #4
 8003570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	3304      	adds	r3, #4
 8003576:	2b06      	cmp	r3, #6
 8003578:	d902      	bls.n	8003580 <NVIC_EncodePriority+0x30>
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	3b03      	subs	r3, #3
 800357e:	e000      	b.n	8003582 <NVIC_EncodePriority+0x32>
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003584:	f04f 32ff 	mov.w	r2, #4294967295
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43da      	mvns	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	401a      	ands	r2, r3
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003598:	f04f 31ff 	mov.w	r1, #4294967295
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	fa01 f303 	lsl.w	r3, r1, r3
 80035a2:	43d9      	mvns	r1, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a8:	4313      	orrs	r3, r2
         );
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3724      	adds	r7, #36	; 0x24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
	...

080035b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3b01      	subs	r3, #1
 80035c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035c8:	d301      	bcc.n	80035ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035ca:	2301      	movs	r3, #1
 80035cc:	e00f      	b.n	80035ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ce:	4a0a      	ldr	r2, [pc, #40]	; (80035f8 <SysTick_Config+0x40>)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035d6:	210f      	movs	r1, #15
 80035d8:	f04f 30ff 	mov.w	r0, #4294967295
 80035dc:	f7ff ff8e 	bl	80034fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035e0:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <SysTick_Config+0x40>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035e6:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <SysTick_Config+0x40>)
 80035e8:	2207      	movs	r2, #7
 80035ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	e000e010 	.word	0xe000e010

080035fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7ff ff29 	bl	800345c <__NVIC_SetPriorityGrouping>
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b086      	sub	sp, #24
 8003616:	af00      	add	r7, sp, #0
 8003618:	4603      	mov	r3, r0
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003620:	f7ff ff40 	bl	80034a4 <__NVIC_GetPriorityGrouping>
 8003624:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	6978      	ldr	r0, [r7, #20]
 800362c:	f7ff ff90 	bl	8003550 <NVIC_EncodePriority>
 8003630:	4602      	mov	r2, r0
 8003632:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003636:	4611      	mov	r1, r2
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff5f 	bl	80034fc <__NVIC_SetPriority>
}
 800363e:	bf00      	nop
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	4603      	mov	r3, r0
 800364e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003650:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ff33 	bl	80034c0 <__NVIC_EnableIRQ>
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff ffa4 	bl	80035b8 <SysTick_Config>
 8003670:	4603      	mov	r3, r0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003680:	f3bf 8f5f 	dmb	sy
}
 8003684:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003686:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <HAL_MPU_Disable+0x28>)
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	4a06      	ldr	r2, [pc, #24]	; (80036a4 <HAL_MPU_Disable+0x28>)
 800368c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003690:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003692:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_MPU_Disable+0x2c>)
 8003694:	2200      	movs	r2, #0
 8003696:	605a      	str	r2, [r3, #4]
}
 8003698:	bf00      	nop
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	e000ed00 	.word	0xe000ed00
 80036a8:	e000ed90 	.word	0xe000ed90

080036ac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80036b4:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <HAL_MPU_Enable+0x38>)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_MPU_Enable+0x3c>)
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	4a09      	ldr	r2, [pc, #36]	; (80036e8 <HAL_MPU_Enable+0x3c>)
 80036c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80036ca:	f3bf 8f4f 	dsb	sy
}
 80036ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80036d0:	f3bf 8f6f 	isb	sy
}
 80036d4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	e000ed90 	.word	0xe000ed90
 80036e8:	e000ed00 	.word	0xe000ed00

080036ec <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	785a      	ldrb	r2, [r3, #1]
 80036f8:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <HAL_MPU_ConfigRegion+0x84>)
 80036fa:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d029      	beq.n	8003758 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003704:	4a1a      	ldr	r2, [pc, #104]	; (8003770 <HAL_MPU_ConfigRegion+0x84>)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	7b1b      	ldrb	r3, [r3, #12]
 8003710:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	7adb      	ldrb	r3, [r3, #11]
 8003716:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003718:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	7a9b      	ldrb	r3, [r3, #10]
 800371e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003720:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7b5b      	ldrb	r3, [r3, #13]
 8003726:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003728:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	7b9b      	ldrb	r3, [r3, #14]
 800372e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003730:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	7bdb      	ldrb	r3, [r3, #15]
 8003736:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003738:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	7a5b      	ldrb	r3, [r3, #9]
 800373e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003740:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	7a1b      	ldrb	r3, [r3, #8]
 8003746:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003748:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	7812      	ldrb	r2, [r2, #0]
 800374e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003750:	4a07      	ldr	r2, [pc, #28]	; (8003770 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003752:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003754:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8003756:	e005      	b.n	8003764 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <HAL_MPU_ConfigRegion+0x84>)
 800375a:	2200      	movs	r2, #0
 800375c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800375e:	4b04      	ldr	r3, [pc, #16]	; (8003770 <HAL_MPU_ConfigRegion+0x84>)
 8003760:	2200      	movs	r2, #0
 8003762:	611a      	str	r2, [r3, #16]
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000ed90 	.word	0xe000ed90

08003774 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800377c:	f7fd fd04 	bl	8001188 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e314      	b.n	8003db6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a66      	ldr	r2, [pc, #408]	; (800392c <HAL_DMA_Init+0x1b8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d04a      	beq.n	800382c <HAL_DMA_Init+0xb8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a65      	ldr	r2, [pc, #404]	; (8003930 <HAL_DMA_Init+0x1bc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d045      	beq.n	800382c <HAL_DMA_Init+0xb8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a63      	ldr	r2, [pc, #396]	; (8003934 <HAL_DMA_Init+0x1c0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d040      	beq.n	800382c <HAL_DMA_Init+0xb8>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a62      	ldr	r2, [pc, #392]	; (8003938 <HAL_DMA_Init+0x1c4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d03b      	beq.n	800382c <HAL_DMA_Init+0xb8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a60      	ldr	r2, [pc, #384]	; (800393c <HAL_DMA_Init+0x1c8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d036      	beq.n	800382c <HAL_DMA_Init+0xb8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a5f      	ldr	r2, [pc, #380]	; (8003940 <HAL_DMA_Init+0x1cc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d031      	beq.n	800382c <HAL_DMA_Init+0xb8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a5d      	ldr	r2, [pc, #372]	; (8003944 <HAL_DMA_Init+0x1d0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d02c      	beq.n	800382c <HAL_DMA_Init+0xb8>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a5c      	ldr	r2, [pc, #368]	; (8003948 <HAL_DMA_Init+0x1d4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d027      	beq.n	800382c <HAL_DMA_Init+0xb8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a5a      	ldr	r2, [pc, #360]	; (800394c <HAL_DMA_Init+0x1d8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d022      	beq.n	800382c <HAL_DMA_Init+0xb8>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a59      	ldr	r2, [pc, #356]	; (8003950 <HAL_DMA_Init+0x1dc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d01d      	beq.n	800382c <HAL_DMA_Init+0xb8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a57      	ldr	r2, [pc, #348]	; (8003954 <HAL_DMA_Init+0x1e0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d018      	beq.n	800382c <HAL_DMA_Init+0xb8>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a56      	ldr	r2, [pc, #344]	; (8003958 <HAL_DMA_Init+0x1e4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d013      	beq.n	800382c <HAL_DMA_Init+0xb8>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a54      	ldr	r2, [pc, #336]	; (800395c <HAL_DMA_Init+0x1e8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00e      	beq.n	800382c <HAL_DMA_Init+0xb8>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a53      	ldr	r2, [pc, #332]	; (8003960 <HAL_DMA_Init+0x1ec>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d009      	beq.n	800382c <HAL_DMA_Init+0xb8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a51      	ldr	r2, [pc, #324]	; (8003964 <HAL_DMA_Init+0x1f0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d004      	beq.n	800382c <HAL_DMA_Init+0xb8>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a50      	ldr	r2, [pc, #320]	; (8003968 <HAL_DMA_Init+0x1f4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d101      	bne.n	8003830 <HAL_DMA_Init+0xbc>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_DMA_Init+0xbe>
 8003830:	2300      	movs	r3, #0
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 813c 	beq.w	8003ab0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a37      	ldr	r2, [pc, #220]	; (800392c <HAL_DMA_Init+0x1b8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d04a      	beq.n	80038e8 <HAL_DMA_Init+0x174>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a36      	ldr	r2, [pc, #216]	; (8003930 <HAL_DMA_Init+0x1bc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d045      	beq.n	80038e8 <HAL_DMA_Init+0x174>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a34      	ldr	r2, [pc, #208]	; (8003934 <HAL_DMA_Init+0x1c0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d040      	beq.n	80038e8 <HAL_DMA_Init+0x174>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a33      	ldr	r2, [pc, #204]	; (8003938 <HAL_DMA_Init+0x1c4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d03b      	beq.n	80038e8 <HAL_DMA_Init+0x174>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a31      	ldr	r2, [pc, #196]	; (800393c <HAL_DMA_Init+0x1c8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d036      	beq.n	80038e8 <HAL_DMA_Init+0x174>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a30      	ldr	r2, [pc, #192]	; (8003940 <HAL_DMA_Init+0x1cc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d031      	beq.n	80038e8 <HAL_DMA_Init+0x174>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a2e      	ldr	r2, [pc, #184]	; (8003944 <HAL_DMA_Init+0x1d0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d02c      	beq.n	80038e8 <HAL_DMA_Init+0x174>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a2d      	ldr	r2, [pc, #180]	; (8003948 <HAL_DMA_Init+0x1d4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d027      	beq.n	80038e8 <HAL_DMA_Init+0x174>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a2b      	ldr	r2, [pc, #172]	; (800394c <HAL_DMA_Init+0x1d8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d022      	beq.n	80038e8 <HAL_DMA_Init+0x174>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a2a      	ldr	r2, [pc, #168]	; (8003950 <HAL_DMA_Init+0x1dc>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d01d      	beq.n	80038e8 <HAL_DMA_Init+0x174>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a28      	ldr	r2, [pc, #160]	; (8003954 <HAL_DMA_Init+0x1e0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d018      	beq.n	80038e8 <HAL_DMA_Init+0x174>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a27      	ldr	r2, [pc, #156]	; (8003958 <HAL_DMA_Init+0x1e4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d013      	beq.n	80038e8 <HAL_DMA_Init+0x174>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a25      	ldr	r2, [pc, #148]	; (800395c <HAL_DMA_Init+0x1e8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00e      	beq.n	80038e8 <HAL_DMA_Init+0x174>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a24      	ldr	r2, [pc, #144]	; (8003960 <HAL_DMA_Init+0x1ec>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d009      	beq.n	80038e8 <HAL_DMA_Init+0x174>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a22      	ldr	r2, [pc, #136]	; (8003964 <HAL_DMA_Init+0x1f0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d004      	beq.n	80038e8 <HAL_DMA_Init+0x174>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a21      	ldr	r2, [pc, #132]	; (8003968 <HAL_DMA_Init+0x1f4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d108      	bne.n	80038fa <HAL_DMA_Init+0x186>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	e007      	b.n	800390a <HAL_DMA_Init+0x196>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800390a:	e02f      	b.n	800396c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800390c:	f7fd fc3c 	bl	8001188 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b05      	cmp	r3, #5
 8003918:	d928      	bls.n	800396c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2203      	movs	r2, #3
 8003924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e244      	b.n	8003db6 <HAL_DMA_Init+0x642>
 800392c:	40020010 	.word	0x40020010
 8003930:	40020028 	.word	0x40020028
 8003934:	40020040 	.word	0x40020040
 8003938:	40020058 	.word	0x40020058
 800393c:	40020070 	.word	0x40020070
 8003940:	40020088 	.word	0x40020088
 8003944:	400200a0 	.word	0x400200a0
 8003948:	400200b8 	.word	0x400200b8
 800394c:	40020410 	.word	0x40020410
 8003950:	40020428 	.word	0x40020428
 8003954:	40020440 	.word	0x40020440
 8003958:	40020458 	.word	0x40020458
 800395c:	40020470 	.word	0x40020470
 8003960:	40020488 	.word	0x40020488
 8003964:	400204a0 	.word	0x400204a0
 8003968:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1c8      	bne.n	800390c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4b84      	ldr	r3, [pc, #528]	; (8003b98 <HAL_DMA_Init+0x424>)
 8003986:	4013      	ands	r3, r2
 8003988:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003992:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800399e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039aa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d107      	bne.n	80039d0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	4313      	orrs	r3, r2
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b28      	cmp	r3, #40	; 0x28
 80039d6:	d903      	bls.n	80039e0 <HAL_DMA_Init+0x26c>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b2e      	cmp	r3, #46	; 0x2e
 80039de:	d91f      	bls.n	8003a20 <HAL_DMA_Init+0x2ac>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b3e      	cmp	r3, #62	; 0x3e
 80039e6:	d903      	bls.n	80039f0 <HAL_DMA_Init+0x27c>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b42      	cmp	r3, #66	; 0x42
 80039ee:	d917      	bls.n	8003a20 <HAL_DMA_Init+0x2ac>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b46      	cmp	r3, #70	; 0x46
 80039f6:	d903      	bls.n	8003a00 <HAL_DMA_Init+0x28c>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b48      	cmp	r3, #72	; 0x48
 80039fe:	d90f      	bls.n	8003a20 <HAL_DMA_Init+0x2ac>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b4e      	cmp	r3, #78	; 0x4e
 8003a06:	d903      	bls.n	8003a10 <HAL_DMA_Init+0x29c>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b52      	cmp	r3, #82	; 0x52
 8003a0e:	d907      	bls.n	8003a20 <HAL_DMA_Init+0x2ac>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b73      	cmp	r3, #115	; 0x73
 8003a16:	d905      	bls.n	8003a24 <HAL_DMA_Init+0x2b0>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b77      	cmp	r3, #119	; 0x77
 8003a1e:	d801      	bhi.n	8003a24 <HAL_DMA_Init+0x2b0>
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <HAL_DMA_Init+0x2b2>
 8003a24:	2300      	movs	r3, #0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a30:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f023 0307 	bic.w	r3, r3, #7
 8003a48:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d117      	bne.n	8003a8c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00e      	beq.n	8003a8c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f002 f8ea 	bl	8005c48 <DMA_CheckFifoParam>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d008      	beq.n	8003a8c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2240      	movs	r2, #64	; 0x40
 8003a7e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e194      	b.n	8003db6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f002 f825 	bl	8005ae4 <DMA_CalcBaseAndBitshift>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	223f      	movs	r2, #63	; 0x3f
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	609a      	str	r2, [r3, #8]
 8003aae:	e0ca      	b.n	8003c46 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a39      	ldr	r2, [pc, #228]	; (8003b9c <HAL_DMA_Init+0x428>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d022      	beq.n	8003b00 <HAL_DMA_Init+0x38c>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a38      	ldr	r2, [pc, #224]	; (8003ba0 <HAL_DMA_Init+0x42c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d01d      	beq.n	8003b00 <HAL_DMA_Init+0x38c>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a36      	ldr	r2, [pc, #216]	; (8003ba4 <HAL_DMA_Init+0x430>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d018      	beq.n	8003b00 <HAL_DMA_Init+0x38c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a35      	ldr	r2, [pc, #212]	; (8003ba8 <HAL_DMA_Init+0x434>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d013      	beq.n	8003b00 <HAL_DMA_Init+0x38c>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a33      	ldr	r2, [pc, #204]	; (8003bac <HAL_DMA_Init+0x438>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00e      	beq.n	8003b00 <HAL_DMA_Init+0x38c>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a32      	ldr	r2, [pc, #200]	; (8003bb0 <HAL_DMA_Init+0x43c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d009      	beq.n	8003b00 <HAL_DMA_Init+0x38c>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a30      	ldr	r2, [pc, #192]	; (8003bb4 <HAL_DMA_Init+0x440>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d004      	beq.n	8003b00 <HAL_DMA_Init+0x38c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a2f      	ldr	r2, [pc, #188]	; (8003bb8 <HAL_DMA_Init+0x444>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d101      	bne.n	8003b04 <HAL_DMA_Init+0x390>
 8003b00:	2301      	movs	r3, #1
 8003b02:	e000      	b.n	8003b06 <HAL_DMA_Init+0x392>
 8003b04:	2300      	movs	r3, #0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 8094 	beq.w	8003c34 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a22      	ldr	r2, [pc, #136]	; (8003b9c <HAL_DMA_Init+0x428>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d021      	beq.n	8003b5a <HAL_DMA_Init+0x3e6>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a21      	ldr	r2, [pc, #132]	; (8003ba0 <HAL_DMA_Init+0x42c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d01c      	beq.n	8003b5a <HAL_DMA_Init+0x3e6>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1f      	ldr	r2, [pc, #124]	; (8003ba4 <HAL_DMA_Init+0x430>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d017      	beq.n	8003b5a <HAL_DMA_Init+0x3e6>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ba8 <HAL_DMA_Init+0x434>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d012      	beq.n	8003b5a <HAL_DMA_Init+0x3e6>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1c      	ldr	r2, [pc, #112]	; (8003bac <HAL_DMA_Init+0x438>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00d      	beq.n	8003b5a <HAL_DMA_Init+0x3e6>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a1b      	ldr	r2, [pc, #108]	; (8003bb0 <HAL_DMA_Init+0x43c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d008      	beq.n	8003b5a <HAL_DMA_Init+0x3e6>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a19      	ldr	r2, [pc, #100]	; (8003bb4 <HAL_DMA_Init+0x440>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d003      	beq.n	8003b5a <HAL_DMA_Init+0x3e6>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a18      	ldr	r2, [pc, #96]	; (8003bb8 <HAL_DMA_Init+0x444>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <HAL_DMA_Init+0x448>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b40      	cmp	r3, #64	; 0x40
 8003b82:	d01d      	beq.n	8003bc0 <HAL_DMA_Init+0x44c>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b80      	cmp	r3, #128	; 0x80
 8003b8a:	d102      	bne.n	8003b92 <HAL_DMA_Init+0x41e>
 8003b8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b90:	e017      	b.n	8003bc2 <HAL_DMA_Init+0x44e>
 8003b92:	2300      	movs	r3, #0
 8003b94:	e015      	b.n	8003bc2 <HAL_DMA_Init+0x44e>
 8003b96:	bf00      	nop
 8003b98:	fe10803f 	.word	0xfe10803f
 8003b9c:	58025408 	.word	0x58025408
 8003ba0:	5802541c 	.word	0x5802541c
 8003ba4:	58025430 	.word	0x58025430
 8003ba8:	58025444 	.word	0x58025444
 8003bac:	58025458 	.word	0x58025458
 8003bb0:	5802546c 	.word	0x5802546c
 8003bb4:	58025480 	.word	0x58025480
 8003bb8:	58025494 	.word	0x58025494
 8003bbc:	fffe000f 	.word	0xfffe000f
 8003bc0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68d2      	ldr	r2, [r2, #12]
 8003bc6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003bd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003bd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003be0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003be8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003bf0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b6e      	ldr	r3, [pc, #440]	; (8003dc0 <HAL_DMA_Init+0x64c>)
 8003c08:	4413      	add	r3, r2
 8003c0a:	4a6e      	ldr	r2, [pc, #440]	; (8003dc4 <HAL_DMA_Init+0x650>)
 8003c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c10:	091b      	lsrs	r3, r3, #4
 8003c12:	009a      	lsls	r2, r3, #2
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f001 ff63 	bl	8005ae4 <DMA_CalcBaseAndBitshift>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	e008      	b.n	8003c46 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2240      	movs	r2, #64	; 0x40
 8003c38:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e0b7      	b.n	8003db6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a5f      	ldr	r2, [pc, #380]	; (8003dc8 <HAL_DMA_Init+0x654>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d072      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a5d      	ldr	r2, [pc, #372]	; (8003dcc <HAL_DMA_Init+0x658>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d06d      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a5c      	ldr	r2, [pc, #368]	; (8003dd0 <HAL_DMA_Init+0x65c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d068      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a5a      	ldr	r2, [pc, #360]	; (8003dd4 <HAL_DMA_Init+0x660>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d063      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a59      	ldr	r2, [pc, #356]	; (8003dd8 <HAL_DMA_Init+0x664>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d05e      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a57      	ldr	r2, [pc, #348]	; (8003ddc <HAL_DMA_Init+0x668>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d059      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a56      	ldr	r2, [pc, #344]	; (8003de0 <HAL_DMA_Init+0x66c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d054      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a54      	ldr	r2, [pc, #336]	; (8003de4 <HAL_DMA_Init+0x670>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d04f      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a53      	ldr	r2, [pc, #332]	; (8003de8 <HAL_DMA_Init+0x674>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d04a      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a51      	ldr	r2, [pc, #324]	; (8003dec <HAL_DMA_Init+0x678>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d045      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a50      	ldr	r2, [pc, #320]	; (8003df0 <HAL_DMA_Init+0x67c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d040      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a4e      	ldr	r2, [pc, #312]	; (8003df4 <HAL_DMA_Init+0x680>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d03b      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a4d      	ldr	r2, [pc, #308]	; (8003df8 <HAL_DMA_Init+0x684>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d036      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a4b      	ldr	r2, [pc, #300]	; (8003dfc <HAL_DMA_Init+0x688>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d031      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a4a      	ldr	r2, [pc, #296]	; (8003e00 <HAL_DMA_Init+0x68c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d02c      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a48      	ldr	r2, [pc, #288]	; (8003e04 <HAL_DMA_Init+0x690>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d027      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a47      	ldr	r2, [pc, #284]	; (8003e08 <HAL_DMA_Init+0x694>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d022      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a45      	ldr	r2, [pc, #276]	; (8003e0c <HAL_DMA_Init+0x698>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d01d      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a44      	ldr	r2, [pc, #272]	; (8003e10 <HAL_DMA_Init+0x69c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d018      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a42      	ldr	r2, [pc, #264]	; (8003e14 <HAL_DMA_Init+0x6a0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a41      	ldr	r2, [pc, #260]	; (8003e18 <HAL_DMA_Init+0x6a4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00e      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a3f      	ldr	r2, [pc, #252]	; (8003e1c <HAL_DMA_Init+0x6a8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d009      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a3e      	ldr	r2, [pc, #248]	; (8003e20 <HAL_DMA_Init+0x6ac>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <HAL_DMA_Init+0x5c2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a3c      	ldr	r2, [pc, #240]	; (8003e24 <HAL_DMA_Init+0x6b0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d101      	bne.n	8003d3a <HAL_DMA_Init+0x5c6>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <HAL_DMA_Init+0x5c8>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d032      	beq.n	8003da6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f001 fffd 	bl	8005d40 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b80      	cmp	r3, #128	; 0x80
 8003d4c:	d102      	bne.n	8003d54 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d68:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d010      	beq.n	8003d94 <HAL_DMA_Init+0x620>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d80c      	bhi.n	8003d94 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f002 f87a 	bl	8005e74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d90:	605a      	str	r2, [r3, #4]
 8003d92:	e008      	b.n	8003da6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	a7fdabf8 	.word	0xa7fdabf8
 8003dc4:	cccccccd 	.word	0xcccccccd
 8003dc8:	40020010 	.word	0x40020010
 8003dcc:	40020028 	.word	0x40020028
 8003dd0:	40020040 	.word	0x40020040
 8003dd4:	40020058 	.word	0x40020058
 8003dd8:	40020070 	.word	0x40020070
 8003ddc:	40020088 	.word	0x40020088
 8003de0:	400200a0 	.word	0x400200a0
 8003de4:	400200b8 	.word	0x400200b8
 8003de8:	40020410 	.word	0x40020410
 8003dec:	40020428 	.word	0x40020428
 8003df0:	40020440 	.word	0x40020440
 8003df4:	40020458 	.word	0x40020458
 8003df8:	40020470 	.word	0x40020470
 8003dfc:	40020488 	.word	0x40020488
 8003e00:	400204a0 	.word	0x400204a0
 8003e04:	400204b8 	.word	0x400204b8
 8003e08:	58025408 	.word	0x58025408
 8003e0c:	5802541c 	.word	0x5802541c
 8003e10:	58025430 	.word	0x58025430
 8003e14:	58025444 	.word	0x58025444
 8003e18:	58025458 	.word	0x58025458
 8003e1c:	5802546c 	.word	0x5802546c
 8003e20:	58025480 	.word	0x58025480
 8003e24:	58025494 	.word	0x58025494

08003e28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e226      	b.n	8004292 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d101      	bne.n	8003e52 <HAL_DMA_Start_IT+0x2a>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e21f      	b.n	8004292 <HAL_DMA_Start_IT+0x46a>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	f040 820a 	bne.w	800427c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a68      	ldr	r2, [pc, #416]	; (800401c <HAL_DMA_Start_IT+0x1f4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d04a      	beq.n	8003f16 <HAL_DMA_Start_IT+0xee>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a66      	ldr	r2, [pc, #408]	; (8004020 <HAL_DMA_Start_IT+0x1f8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d045      	beq.n	8003f16 <HAL_DMA_Start_IT+0xee>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a65      	ldr	r2, [pc, #404]	; (8004024 <HAL_DMA_Start_IT+0x1fc>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d040      	beq.n	8003f16 <HAL_DMA_Start_IT+0xee>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a63      	ldr	r2, [pc, #396]	; (8004028 <HAL_DMA_Start_IT+0x200>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d03b      	beq.n	8003f16 <HAL_DMA_Start_IT+0xee>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a62      	ldr	r2, [pc, #392]	; (800402c <HAL_DMA_Start_IT+0x204>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d036      	beq.n	8003f16 <HAL_DMA_Start_IT+0xee>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a60      	ldr	r2, [pc, #384]	; (8004030 <HAL_DMA_Start_IT+0x208>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d031      	beq.n	8003f16 <HAL_DMA_Start_IT+0xee>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a5f      	ldr	r2, [pc, #380]	; (8004034 <HAL_DMA_Start_IT+0x20c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d02c      	beq.n	8003f16 <HAL_DMA_Start_IT+0xee>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a5d      	ldr	r2, [pc, #372]	; (8004038 <HAL_DMA_Start_IT+0x210>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d027      	beq.n	8003f16 <HAL_DMA_Start_IT+0xee>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a5c      	ldr	r2, [pc, #368]	; (800403c <HAL_DMA_Start_IT+0x214>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d022      	beq.n	8003f16 <HAL_DMA_Start_IT+0xee>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a5a      	ldr	r2, [pc, #360]	; (8004040 <HAL_DMA_Start_IT+0x218>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d01d      	beq.n	8003f16 <HAL_DMA_Start_IT+0xee>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a59      	ldr	r2, [pc, #356]	; (8004044 <HAL_DMA_Start_IT+0x21c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d018      	beq.n	8003f16 <HAL_DMA_Start_IT+0xee>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a57      	ldr	r2, [pc, #348]	; (8004048 <HAL_DMA_Start_IT+0x220>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <HAL_DMA_Start_IT+0xee>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a56      	ldr	r2, [pc, #344]	; (800404c <HAL_DMA_Start_IT+0x224>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00e      	beq.n	8003f16 <HAL_DMA_Start_IT+0xee>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a54      	ldr	r2, [pc, #336]	; (8004050 <HAL_DMA_Start_IT+0x228>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d009      	beq.n	8003f16 <HAL_DMA_Start_IT+0xee>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a53      	ldr	r2, [pc, #332]	; (8004054 <HAL_DMA_Start_IT+0x22c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d004      	beq.n	8003f16 <HAL_DMA_Start_IT+0xee>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a51      	ldr	r2, [pc, #324]	; (8004058 <HAL_DMA_Start_IT+0x230>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d108      	bne.n	8003f28 <HAL_DMA_Start_IT+0x100>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0201 	bic.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	e007      	b.n	8003f38 <HAL_DMA_Start_IT+0x110>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0201 	bic.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68b9      	ldr	r1, [r7, #8]
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f001 fc24 	bl	800578c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a34      	ldr	r2, [pc, #208]	; (800401c <HAL_DMA_Start_IT+0x1f4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d04a      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x1bc>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a33      	ldr	r2, [pc, #204]	; (8004020 <HAL_DMA_Start_IT+0x1f8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d045      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x1bc>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a31      	ldr	r2, [pc, #196]	; (8004024 <HAL_DMA_Start_IT+0x1fc>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d040      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x1bc>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a30      	ldr	r2, [pc, #192]	; (8004028 <HAL_DMA_Start_IT+0x200>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d03b      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x1bc>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a2e      	ldr	r2, [pc, #184]	; (800402c <HAL_DMA_Start_IT+0x204>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d036      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x1bc>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a2d      	ldr	r2, [pc, #180]	; (8004030 <HAL_DMA_Start_IT+0x208>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d031      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x1bc>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <HAL_DMA_Start_IT+0x20c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d02c      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x1bc>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <HAL_DMA_Start_IT+0x210>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d027      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x1bc>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a28      	ldr	r2, [pc, #160]	; (800403c <HAL_DMA_Start_IT+0x214>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d022      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x1bc>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a27      	ldr	r2, [pc, #156]	; (8004040 <HAL_DMA_Start_IT+0x218>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d01d      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x1bc>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a25      	ldr	r2, [pc, #148]	; (8004044 <HAL_DMA_Start_IT+0x21c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d018      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x1bc>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a24      	ldr	r2, [pc, #144]	; (8004048 <HAL_DMA_Start_IT+0x220>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d013      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x1bc>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a22      	ldr	r2, [pc, #136]	; (800404c <HAL_DMA_Start_IT+0x224>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d00e      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x1bc>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a21      	ldr	r2, [pc, #132]	; (8004050 <HAL_DMA_Start_IT+0x228>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d009      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x1bc>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1f      	ldr	r2, [pc, #124]	; (8004054 <HAL_DMA_Start_IT+0x22c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d004      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x1bc>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a1e      	ldr	r2, [pc, #120]	; (8004058 <HAL_DMA_Start_IT+0x230>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d101      	bne.n	8003fe8 <HAL_DMA_Start_IT+0x1c0>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e000      	b.n	8003fea <HAL_DMA_Start_IT+0x1c2>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d036      	beq.n	800405c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f023 021e 	bic.w	r2, r3, #30
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0216 	orr.w	r2, r2, #22
 8004000:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	2b00      	cmp	r3, #0
 8004008:	d03e      	beq.n	8004088 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f042 0208 	orr.w	r2, r2, #8
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e035      	b.n	8004088 <HAL_DMA_Start_IT+0x260>
 800401c:	40020010 	.word	0x40020010
 8004020:	40020028 	.word	0x40020028
 8004024:	40020040 	.word	0x40020040
 8004028:	40020058 	.word	0x40020058
 800402c:	40020070 	.word	0x40020070
 8004030:	40020088 	.word	0x40020088
 8004034:	400200a0 	.word	0x400200a0
 8004038:	400200b8 	.word	0x400200b8
 800403c:	40020410 	.word	0x40020410
 8004040:	40020428 	.word	0x40020428
 8004044:	40020440 	.word	0x40020440
 8004048:	40020458 	.word	0x40020458
 800404c:	40020470 	.word	0x40020470
 8004050:	40020488 	.word	0x40020488
 8004054:	400204a0 	.word	0x400204a0
 8004058:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 020e 	bic.w	r2, r3, #14
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 020a 	orr.w	r2, r2, #10
 800406e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	2b00      	cmp	r3, #0
 8004076:	d007      	beq.n	8004088 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0204 	orr.w	r2, r2, #4
 8004086:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a83      	ldr	r2, [pc, #524]	; (800429c <HAL_DMA_Start_IT+0x474>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d072      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a82      	ldr	r2, [pc, #520]	; (80042a0 <HAL_DMA_Start_IT+0x478>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d06d      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a80      	ldr	r2, [pc, #512]	; (80042a4 <HAL_DMA_Start_IT+0x47c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d068      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a7f      	ldr	r2, [pc, #508]	; (80042a8 <HAL_DMA_Start_IT+0x480>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d063      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a7d      	ldr	r2, [pc, #500]	; (80042ac <HAL_DMA_Start_IT+0x484>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d05e      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a7c      	ldr	r2, [pc, #496]	; (80042b0 <HAL_DMA_Start_IT+0x488>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d059      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a7a      	ldr	r2, [pc, #488]	; (80042b4 <HAL_DMA_Start_IT+0x48c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d054      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a79      	ldr	r2, [pc, #484]	; (80042b8 <HAL_DMA_Start_IT+0x490>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d04f      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a77      	ldr	r2, [pc, #476]	; (80042bc <HAL_DMA_Start_IT+0x494>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d04a      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a76      	ldr	r2, [pc, #472]	; (80042c0 <HAL_DMA_Start_IT+0x498>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d045      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a74      	ldr	r2, [pc, #464]	; (80042c4 <HAL_DMA_Start_IT+0x49c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d040      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a73      	ldr	r2, [pc, #460]	; (80042c8 <HAL_DMA_Start_IT+0x4a0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d03b      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a71      	ldr	r2, [pc, #452]	; (80042cc <HAL_DMA_Start_IT+0x4a4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d036      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a70      	ldr	r2, [pc, #448]	; (80042d0 <HAL_DMA_Start_IT+0x4a8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d031      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a6e      	ldr	r2, [pc, #440]	; (80042d4 <HAL_DMA_Start_IT+0x4ac>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d02c      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a6d      	ldr	r2, [pc, #436]	; (80042d8 <HAL_DMA_Start_IT+0x4b0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d027      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a6b      	ldr	r2, [pc, #428]	; (80042dc <HAL_DMA_Start_IT+0x4b4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d022      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a6a      	ldr	r2, [pc, #424]	; (80042e0 <HAL_DMA_Start_IT+0x4b8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d01d      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a68      	ldr	r2, [pc, #416]	; (80042e4 <HAL_DMA_Start_IT+0x4bc>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d018      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a67      	ldr	r2, [pc, #412]	; (80042e8 <HAL_DMA_Start_IT+0x4c0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d013      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a65      	ldr	r2, [pc, #404]	; (80042ec <HAL_DMA_Start_IT+0x4c4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00e      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a64      	ldr	r2, [pc, #400]	; (80042f0 <HAL_DMA_Start_IT+0x4c8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d009      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a62      	ldr	r2, [pc, #392]	; (80042f4 <HAL_DMA_Start_IT+0x4cc>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d004      	beq.n	8004178 <HAL_DMA_Start_IT+0x350>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a61      	ldr	r2, [pc, #388]	; (80042f8 <HAL_DMA_Start_IT+0x4d0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d101      	bne.n	800417c <HAL_DMA_Start_IT+0x354>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <HAL_DMA_Start_IT+0x356>
 800417c:	2300      	movs	r3, #0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d01a      	beq.n	80041b8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d007      	beq.n	80041a0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800419a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800419e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d007      	beq.n	80041b8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041b6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a37      	ldr	r2, [pc, #220]	; (800429c <HAL_DMA_Start_IT+0x474>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d04a      	beq.n	8004258 <HAL_DMA_Start_IT+0x430>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a36      	ldr	r2, [pc, #216]	; (80042a0 <HAL_DMA_Start_IT+0x478>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d045      	beq.n	8004258 <HAL_DMA_Start_IT+0x430>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a34      	ldr	r2, [pc, #208]	; (80042a4 <HAL_DMA_Start_IT+0x47c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d040      	beq.n	8004258 <HAL_DMA_Start_IT+0x430>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a33      	ldr	r2, [pc, #204]	; (80042a8 <HAL_DMA_Start_IT+0x480>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d03b      	beq.n	8004258 <HAL_DMA_Start_IT+0x430>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a31      	ldr	r2, [pc, #196]	; (80042ac <HAL_DMA_Start_IT+0x484>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d036      	beq.n	8004258 <HAL_DMA_Start_IT+0x430>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a30      	ldr	r2, [pc, #192]	; (80042b0 <HAL_DMA_Start_IT+0x488>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d031      	beq.n	8004258 <HAL_DMA_Start_IT+0x430>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a2e      	ldr	r2, [pc, #184]	; (80042b4 <HAL_DMA_Start_IT+0x48c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d02c      	beq.n	8004258 <HAL_DMA_Start_IT+0x430>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a2d      	ldr	r2, [pc, #180]	; (80042b8 <HAL_DMA_Start_IT+0x490>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d027      	beq.n	8004258 <HAL_DMA_Start_IT+0x430>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a2b      	ldr	r2, [pc, #172]	; (80042bc <HAL_DMA_Start_IT+0x494>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d022      	beq.n	8004258 <HAL_DMA_Start_IT+0x430>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a2a      	ldr	r2, [pc, #168]	; (80042c0 <HAL_DMA_Start_IT+0x498>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d01d      	beq.n	8004258 <HAL_DMA_Start_IT+0x430>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a28      	ldr	r2, [pc, #160]	; (80042c4 <HAL_DMA_Start_IT+0x49c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d018      	beq.n	8004258 <HAL_DMA_Start_IT+0x430>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a27      	ldr	r2, [pc, #156]	; (80042c8 <HAL_DMA_Start_IT+0x4a0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d013      	beq.n	8004258 <HAL_DMA_Start_IT+0x430>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a25      	ldr	r2, [pc, #148]	; (80042cc <HAL_DMA_Start_IT+0x4a4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00e      	beq.n	8004258 <HAL_DMA_Start_IT+0x430>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a24      	ldr	r2, [pc, #144]	; (80042d0 <HAL_DMA_Start_IT+0x4a8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d009      	beq.n	8004258 <HAL_DMA_Start_IT+0x430>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a22      	ldr	r2, [pc, #136]	; (80042d4 <HAL_DMA_Start_IT+0x4ac>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d004      	beq.n	8004258 <HAL_DMA_Start_IT+0x430>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a21      	ldr	r2, [pc, #132]	; (80042d8 <HAL_DMA_Start_IT+0x4b0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d108      	bne.n	800426a <HAL_DMA_Start_IT+0x442>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	e012      	b.n	8004290 <HAL_DMA_Start_IT+0x468>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0201 	orr.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	e009      	b.n	8004290 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004282:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004290:	7dfb      	ldrb	r3, [r7, #23]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40020010 	.word	0x40020010
 80042a0:	40020028 	.word	0x40020028
 80042a4:	40020040 	.word	0x40020040
 80042a8:	40020058 	.word	0x40020058
 80042ac:	40020070 	.word	0x40020070
 80042b0:	40020088 	.word	0x40020088
 80042b4:	400200a0 	.word	0x400200a0
 80042b8:	400200b8 	.word	0x400200b8
 80042bc:	40020410 	.word	0x40020410
 80042c0:	40020428 	.word	0x40020428
 80042c4:	40020440 	.word	0x40020440
 80042c8:	40020458 	.word	0x40020458
 80042cc:	40020470 	.word	0x40020470
 80042d0:	40020488 	.word	0x40020488
 80042d4:	400204a0 	.word	0x400204a0
 80042d8:	400204b8 	.word	0x400204b8
 80042dc:	58025408 	.word	0x58025408
 80042e0:	5802541c 	.word	0x5802541c
 80042e4:	58025430 	.word	0x58025430
 80042e8:	58025444 	.word	0x58025444
 80042ec:	58025458 	.word	0x58025458
 80042f0:	5802546c 	.word	0x5802546c
 80042f4:	58025480 	.word	0x58025480
 80042f8:	58025494 	.word	0x58025494

080042fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004304:	f7fc ff40 	bl	8001188 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e2dc      	b.n	80048ce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d008      	beq.n	8004332 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2280      	movs	r2, #128	; 0x80
 8004324:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e2cd      	b.n	80048ce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a76      	ldr	r2, [pc, #472]	; (8004510 <HAL_DMA_Abort+0x214>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d04a      	beq.n	80043d2 <HAL_DMA_Abort+0xd6>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a74      	ldr	r2, [pc, #464]	; (8004514 <HAL_DMA_Abort+0x218>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d045      	beq.n	80043d2 <HAL_DMA_Abort+0xd6>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a73      	ldr	r2, [pc, #460]	; (8004518 <HAL_DMA_Abort+0x21c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d040      	beq.n	80043d2 <HAL_DMA_Abort+0xd6>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a71      	ldr	r2, [pc, #452]	; (800451c <HAL_DMA_Abort+0x220>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d03b      	beq.n	80043d2 <HAL_DMA_Abort+0xd6>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a70      	ldr	r2, [pc, #448]	; (8004520 <HAL_DMA_Abort+0x224>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d036      	beq.n	80043d2 <HAL_DMA_Abort+0xd6>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a6e      	ldr	r2, [pc, #440]	; (8004524 <HAL_DMA_Abort+0x228>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d031      	beq.n	80043d2 <HAL_DMA_Abort+0xd6>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a6d      	ldr	r2, [pc, #436]	; (8004528 <HAL_DMA_Abort+0x22c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d02c      	beq.n	80043d2 <HAL_DMA_Abort+0xd6>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a6b      	ldr	r2, [pc, #428]	; (800452c <HAL_DMA_Abort+0x230>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d027      	beq.n	80043d2 <HAL_DMA_Abort+0xd6>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a6a      	ldr	r2, [pc, #424]	; (8004530 <HAL_DMA_Abort+0x234>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d022      	beq.n	80043d2 <HAL_DMA_Abort+0xd6>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a68      	ldr	r2, [pc, #416]	; (8004534 <HAL_DMA_Abort+0x238>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d01d      	beq.n	80043d2 <HAL_DMA_Abort+0xd6>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a67      	ldr	r2, [pc, #412]	; (8004538 <HAL_DMA_Abort+0x23c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d018      	beq.n	80043d2 <HAL_DMA_Abort+0xd6>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a65      	ldr	r2, [pc, #404]	; (800453c <HAL_DMA_Abort+0x240>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <HAL_DMA_Abort+0xd6>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a64      	ldr	r2, [pc, #400]	; (8004540 <HAL_DMA_Abort+0x244>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00e      	beq.n	80043d2 <HAL_DMA_Abort+0xd6>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a62      	ldr	r2, [pc, #392]	; (8004544 <HAL_DMA_Abort+0x248>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d009      	beq.n	80043d2 <HAL_DMA_Abort+0xd6>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a61      	ldr	r2, [pc, #388]	; (8004548 <HAL_DMA_Abort+0x24c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d004      	beq.n	80043d2 <HAL_DMA_Abort+0xd6>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a5f      	ldr	r2, [pc, #380]	; (800454c <HAL_DMA_Abort+0x250>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d101      	bne.n	80043d6 <HAL_DMA_Abort+0xda>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e000      	b.n	80043d8 <HAL_DMA_Abort+0xdc>
 80043d6:	2300      	movs	r3, #0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d013      	beq.n	8004404 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 021e 	bic.w	r2, r2, #30
 80043ea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695a      	ldr	r2, [r3, #20]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043fa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	e00a      	b.n	800441a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 020e 	bic.w	r2, r2, #14
 8004412:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a3c      	ldr	r2, [pc, #240]	; (8004510 <HAL_DMA_Abort+0x214>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d072      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a3a      	ldr	r2, [pc, #232]	; (8004514 <HAL_DMA_Abort+0x218>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d06d      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a39      	ldr	r2, [pc, #228]	; (8004518 <HAL_DMA_Abort+0x21c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d068      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a37      	ldr	r2, [pc, #220]	; (800451c <HAL_DMA_Abort+0x220>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d063      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a36      	ldr	r2, [pc, #216]	; (8004520 <HAL_DMA_Abort+0x224>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d05e      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a34      	ldr	r2, [pc, #208]	; (8004524 <HAL_DMA_Abort+0x228>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d059      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a33      	ldr	r2, [pc, #204]	; (8004528 <HAL_DMA_Abort+0x22c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d054      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a31      	ldr	r2, [pc, #196]	; (800452c <HAL_DMA_Abort+0x230>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d04f      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a30      	ldr	r2, [pc, #192]	; (8004530 <HAL_DMA_Abort+0x234>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d04a      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a2e      	ldr	r2, [pc, #184]	; (8004534 <HAL_DMA_Abort+0x238>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d045      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a2d      	ldr	r2, [pc, #180]	; (8004538 <HAL_DMA_Abort+0x23c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d040      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a2b      	ldr	r2, [pc, #172]	; (800453c <HAL_DMA_Abort+0x240>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d03b      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a2a      	ldr	r2, [pc, #168]	; (8004540 <HAL_DMA_Abort+0x244>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d036      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a28      	ldr	r2, [pc, #160]	; (8004544 <HAL_DMA_Abort+0x248>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d031      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a27      	ldr	r2, [pc, #156]	; (8004548 <HAL_DMA_Abort+0x24c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d02c      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a25      	ldr	r2, [pc, #148]	; (800454c <HAL_DMA_Abort+0x250>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d027      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a24      	ldr	r2, [pc, #144]	; (8004550 <HAL_DMA_Abort+0x254>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d022      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a22      	ldr	r2, [pc, #136]	; (8004554 <HAL_DMA_Abort+0x258>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d01d      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a21      	ldr	r2, [pc, #132]	; (8004558 <HAL_DMA_Abort+0x25c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d018      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1f      	ldr	r2, [pc, #124]	; (800455c <HAL_DMA_Abort+0x260>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d013      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1e      	ldr	r2, [pc, #120]	; (8004560 <HAL_DMA_Abort+0x264>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00e      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1c      	ldr	r2, [pc, #112]	; (8004564 <HAL_DMA_Abort+0x268>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d009      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1b      	ldr	r2, [pc, #108]	; (8004568 <HAL_DMA_Abort+0x26c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d004      	beq.n	800450a <HAL_DMA_Abort+0x20e>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a19      	ldr	r2, [pc, #100]	; (800456c <HAL_DMA_Abort+0x270>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d132      	bne.n	8004570 <HAL_DMA_Abort+0x274>
 800450a:	2301      	movs	r3, #1
 800450c:	e031      	b.n	8004572 <HAL_DMA_Abort+0x276>
 800450e:	bf00      	nop
 8004510:	40020010 	.word	0x40020010
 8004514:	40020028 	.word	0x40020028
 8004518:	40020040 	.word	0x40020040
 800451c:	40020058 	.word	0x40020058
 8004520:	40020070 	.word	0x40020070
 8004524:	40020088 	.word	0x40020088
 8004528:	400200a0 	.word	0x400200a0
 800452c:	400200b8 	.word	0x400200b8
 8004530:	40020410 	.word	0x40020410
 8004534:	40020428 	.word	0x40020428
 8004538:	40020440 	.word	0x40020440
 800453c:	40020458 	.word	0x40020458
 8004540:	40020470 	.word	0x40020470
 8004544:	40020488 	.word	0x40020488
 8004548:	400204a0 	.word	0x400204a0
 800454c:	400204b8 	.word	0x400204b8
 8004550:	58025408 	.word	0x58025408
 8004554:	5802541c 	.word	0x5802541c
 8004558:	58025430 	.word	0x58025430
 800455c:	58025444 	.word	0x58025444
 8004560:	58025458 	.word	0x58025458
 8004564:	5802546c 	.word	0x5802546c
 8004568:	58025480 	.word	0x58025480
 800456c:	58025494 	.word	0x58025494
 8004570:	2300      	movs	r3, #0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004584:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a6d      	ldr	r2, [pc, #436]	; (8004740 <HAL_DMA_Abort+0x444>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d04a      	beq.n	8004626 <HAL_DMA_Abort+0x32a>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a6b      	ldr	r2, [pc, #428]	; (8004744 <HAL_DMA_Abort+0x448>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d045      	beq.n	8004626 <HAL_DMA_Abort+0x32a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a6a      	ldr	r2, [pc, #424]	; (8004748 <HAL_DMA_Abort+0x44c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d040      	beq.n	8004626 <HAL_DMA_Abort+0x32a>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a68      	ldr	r2, [pc, #416]	; (800474c <HAL_DMA_Abort+0x450>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d03b      	beq.n	8004626 <HAL_DMA_Abort+0x32a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a67      	ldr	r2, [pc, #412]	; (8004750 <HAL_DMA_Abort+0x454>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d036      	beq.n	8004626 <HAL_DMA_Abort+0x32a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a65      	ldr	r2, [pc, #404]	; (8004754 <HAL_DMA_Abort+0x458>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d031      	beq.n	8004626 <HAL_DMA_Abort+0x32a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a64      	ldr	r2, [pc, #400]	; (8004758 <HAL_DMA_Abort+0x45c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d02c      	beq.n	8004626 <HAL_DMA_Abort+0x32a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a62      	ldr	r2, [pc, #392]	; (800475c <HAL_DMA_Abort+0x460>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d027      	beq.n	8004626 <HAL_DMA_Abort+0x32a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a61      	ldr	r2, [pc, #388]	; (8004760 <HAL_DMA_Abort+0x464>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d022      	beq.n	8004626 <HAL_DMA_Abort+0x32a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a5f      	ldr	r2, [pc, #380]	; (8004764 <HAL_DMA_Abort+0x468>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d01d      	beq.n	8004626 <HAL_DMA_Abort+0x32a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a5e      	ldr	r2, [pc, #376]	; (8004768 <HAL_DMA_Abort+0x46c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d018      	beq.n	8004626 <HAL_DMA_Abort+0x32a>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a5c      	ldr	r2, [pc, #368]	; (800476c <HAL_DMA_Abort+0x470>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d013      	beq.n	8004626 <HAL_DMA_Abort+0x32a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a5b      	ldr	r2, [pc, #364]	; (8004770 <HAL_DMA_Abort+0x474>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00e      	beq.n	8004626 <HAL_DMA_Abort+0x32a>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a59      	ldr	r2, [pc, #356]	; (8004774 <HAL_DMA_Abort+0x478>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d009      	beq.n	8004626 <HAL_DMA_Abort+0x32a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a58      	ldr	r2, [pc, #352]	; (8004778 <HAL_DMA_Abort+0x47c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d004      	beq.n	8004626 <HAL_DMA_Abort+0x32a>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a56      	ldr	r2, [pc, #344]	; (800477c <HAL_DMA_Abort+0x480>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d108      	bne.n	8004638 <HAL_DMA_Abort+0x33c>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0201 	bic.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	e007      	b.n	8004648 <HAL_DMA_Abort+0x34c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004648:	e013      	b.n	8004672 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800464a:	f7fc fd9d 	bl	8001188 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b05      	cmp	r3, #5
 8004656:	d90c      	bls.n	8004672 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2203      	movs	r2, #3
 8004662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e12d      	b.n	80048ce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e5      	bne.n	800464a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a2f      	ldr	r2, [pc, #188]	; (8004740 <HAL_DMA_Abort+0x444>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d04a      	beq.n	800471e <HAL_DMA_Abort+0x422>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a2d      	ldr	r2, [pc, #180]	; (8004744 <HAL_DMA_Abort+0x448>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d045      	beq.n	800471e <HAL_DMA_Abort+0x422>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a2c      	ldr	r2, [pc, #176]	; (8004748 <HAL_DMA_Abort+0x44c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d040      	beq.n	800471e <HAL_DMA_Abort+0x422>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a2a      	ldr	r2, [pc, #168]	; (800474c <HAL_DMA_Abort+0x450>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d03b      	beq.n	800471e <HAL_DMA_Abort+0x422>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a29      	ldr	r2, [pc, #164]	; (8004750 <HAL_DMA_Abort+0x454>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d036      	beq.n	800471e <HAL_DMA_Abort+0x422>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a27      	ldr	r2, [pc, #156]	; (8004754 <HAL_DMA_Abort+0x458>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d031      	beq.n	800471e <HAL_DMA_Abort+0x422>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a26      	ldr	r2, [pc, #152]	; (8004758 <HAL_DMA_Abort+0x45c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d02c      	beq.n	800471e <HAL_DMA_Abort+0x422>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a24      	ldr	r2, [pc, #144]	; (800475c <HAL_DMA_Abort+0x460>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d027      	beq.n	800471e <HAL_DMA_Abort+0x422>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a23      	ldr	r2, [pc, #140]	; (8004760 <HAL_DMA_Abort+0x464>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d022      	beq.n	800471e <HAL_DMA_Abort+0x422>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a21      	ldr	r2, [pc, #132]	; (8004764 <HAL_DMA_Abort+0x468>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d01d      	beq.n	800471e <HAL_DMA_Abort+0x422>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a20      	ldr	r2, [pc, #128]	; (8004768 <HAL_DMA_Abort+0x46c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d018      	beq.n	800471e <HAL_DMA_Abort+0x422>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1e      	ldr	r2, [pc, #120]	; (800476c <HAL_DMA_Abort+0x470>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d013      	beq.n	800471e <HAL_DMA_Abort+0x422>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1d      	ldr	r2, [pc, #116]	; (8004770 <HAL_DMA_Abort+0x474>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00e      	beq.n	800471e <HAL_DMA_Abort+0x422>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1b      	ldr	r2, [pc, #108]	; (8004774 <HAL_DMA_Abort+0x478>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d009      	beq.n	800471e <HAL_DMA_Abort+0x422>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1a      	ldr	r2, [pc, #104]	; (8004778 <HAL_DMA_Abort+0x47c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d004      	beq.n	800471e <HAL_DMA_Abort+0x422>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a18      	ldr	r2, [pc, #96]	; (800477c <HAL_DMA_Abort+0x480>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d101      	bne.n	8004722 <HAL_DMA_Abort+0x426>
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <HAL_DMA_Abort+0x428>
 8004722:	2300      	movs	r3, #0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d02b      	beq.n	8004780 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004732:	f003 031f 	and.w	r3, r3, #31
 8004736:	223f      	movs	r2, #63	; 0x3f
 8004738:	409a      	lsls	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	609a      	str	r2, [r3, #8]
 800473e:	e02a      	b.n	8004796 <HAL_DMA_Abort+0x49a>
 8004740:	40020010 	.word	0x40020010
 8004744:	40020028 	.word	0x40020028
 8004748:	40020040 	.word	0x40020040
 800474c:	40020058 	.word	0x40020058
 8004750:	40020070 	.word	0x40020070
 8004754:	40020088 	.word	0x40020088
 8004758:	400200a0 	.word	0x400200a0
 800475c:	400200b8 	.word	0x400200b8
 8004760:	40020410 	.word	0x40020410
 8004764:	40020428 	.word	0x40020428
 8004768:	40020440 	.word	0x40020440
 800476c:	40020458 	.word	0x40020458
 8004770:	40020470 	.word	0x40020470
 8004774:	40020488 	.word	0x40020488
 8004778:	400204a0 	.word	0x400204a0
 800477c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004784:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478a:	f003 031f 	and.w	r3, r3, #31
 800478e:	2201      	movs	r2, #1
 8004790:	409a      	lsls	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a4f      	ldr	r2, [pc, #316]	; (80048d8 <HAL_DMA_Abort+0x5dc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d072      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a4d      	ldr	r2, [pc, #308]	; (80048dc <HAL_DMA_Abort+0x5e0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d06d      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a4c      	ldr	r2, [pc, #304]	; (80048e0 <HAL_DMA_Abort+0x5e4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d068      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a4a      	ldr	r2, [pc, #296]	; (80048e4 <HAL_DMA_Abort+0x5e8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d063      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a49      	ldr	r2, [pc, #292]	; (80048e8 <HAL_DMA_Abort+0x5ec>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d05e      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a47      	ldr	r2, [pc, #284]	; (80048ec <HAL_DMA_Abort+0x5f0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d059      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a46      	ldr	r2, [pc, #280]	; (80048f0 <HAL_DMA_Abort+0x5f4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d054      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a44      	ldr	r2, [pc, #272]	; (80048f4 <HAL_DMA_Abort+0x5f8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d04f      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a43      	ldr	r2, [pc, #268]	; (80048f8 <HAL_DMA_Abort+0x5fc>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d04a      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a41      	ldr	r2, [pc, #260]	; (80048fc <HAL_DMA_Abort+0x600>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d045      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a40      	ldr	r2, [pc, #256]	; (8004900 <HAL_DMA_Abort+0x604>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d040      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a3e      	ldr	r2, [pc, #248]	; (8004904 <HAL_DMA_Abort+0x608>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d03b      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a3d      	ldr	r2, [pc, #244]	; (8004908 <HAL_DMA_Abort+0x60c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d036      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a3b      	ldr	r2, [pc, #236]	; (800490c <HAL_DMA_Abort+0x610>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d031      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a3a      	ldr	r2, [pc, #232]	; (8004910 <HAL_DMA_Abort+0x614>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d02c      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a38      	ldr	r2, [pc, #224]	; (8004914 <HAL_DMA_Abort+0x618>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d027      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a37      	ldr	r2, [pc, #220]	; (8004918 <HAL_DMA_Abort+0x61c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d022      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a35      	ldr	r2, [pc, #212]	; (800491c <HAL_DMA_Abort+0x620>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d01d      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a34      	ldr	r2, [pc, #208]	; (8004920 <HAL_DMA_Abort+0x624>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d018      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a32      	ldr	r2, [pc, #200]	; (8004924 <HAL_DMA_Abort+0x628>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d013      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a31      	ldr	r2, [pc, #196]	; (8004928 <HAL_DMA_Abort+0x62c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00e      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a2f      	ldr	r2, [pc, #188]	; (800492c <HAL_DMA_Abort+0x630>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d009      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a2e      	ldr	r2, [pc, #184]	; (8004930 <HAL_DMA_Abort+0x634>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d004      	beq.n	8004886 <HAL_DMA_Abort+0x58a>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a2c      	ldr	r2, [pc, #176]	; (8004934 <HAL_DMA_Abort+0x638>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d101      	bne.n	800488a <HAL_DMA_Abort+0x58e>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <HAL_DMA_Abort+0x590>
 800488a:	2300      	movs	r3, #0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d015      	beq.n	80048bc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004898:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00c      	beq.n	80048bc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048b0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80048ba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40020010 	.word	0x40020010
 80048dc:	40020028 	.word	0x40020028
 80048e0:	40020040 	.word	0x40020040
 80048e4:	40020058 	.word	0x40020058
 80048e8:	40020070 	.word	0x40020070
 80048ec:	40020088 	.word	0x40020088
 80048f0:	400200a0 	.word	0x400200a0
 80048f4:	400200b8 	.word	0x400200b8
 80048f8:	40020410 	.word	0x40020410
 80048fc:	40020428 	.word	0x40020428
 8004900:	40020440 	.word	0x40020440
 8004904:	40020458 	.word	0x40020458
 8004908:	40020470 	.word	0x40020470
 800490c:	40020488 	.word	0x40020488
 8004910:	400204a0 	.word	0x400204a0
 8004914:	400204b8 	.word	0x400204b8
 8004918:	58025408 	.word	0x58025408
 800491c:	5802541c 	.word	0x5802541c
 8004920:	58025430 	.word	0x58025430
 8004924:	58025444 	.word	0x58025444
 8004928:	58025458 	.word	0x58025458
 800492c:	5802546c 	.word	0x5802546c
 8004930:	58025480 	.word	0x58025480
 8004934:	58025494 	.word	0x58025494

08004938 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08a      	sub	sp, #40	; 0x28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004944:	4b67      	ldr	r3, [pc, #412]	; (8004ae4 <HAL_DMA_IRQHandler+0x1ac>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a67      	ldr	r2, [pc, #412]	; (8004ae8 <HAL_DMA_IRQHandler+0x1b0>)
 800494a:	fba2 2303 	umull	r2, r3, r2, r3
 800494e:	0a9b      	lsrs	r3, r3, #10
 8004950:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004956:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a5f      	ldr	r2, [pc, #380]	; (8004aec <HAL_DMA_IRQHandler+0x1b4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d04a      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a5d      	ldr	r2, [pc, #372]	; (8004af0 <HAL_DMA_IRQHandler+0x1b8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d045      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a5c      	ldr	r2, [pc, #368]	; (8004af4 <HAL_DMA_IRQHandler+0x1bc>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d040      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a5a      	ldr	r2, [pc, #360]	; (8004af8 <HAL_DMA_IRQHandler+0x1c0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d03b      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a59      	ldr	r2, [pc, #356]	; (8004afc <HAL_DMA_IRQHandler+0x1c4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d036      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a57      	ldr	r2, [pc, #348]	; (8004b00 <HAL_DMA_IRQHandler+0x1c8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d031      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a56      	ldr	r2, [pc, #344]	; (8004b04 <HAL_DMA_IRQHandler+0x1cc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d02c      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a54      	ldr	r2, [pc, #336]	; (8004b08 <HAL_DMA_IRQHandler+0x1d0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d027      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a53      	ldr	r2, [pc, #332]	; (8004b0c <HAL_DMA_IRQHandler+0x1d4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d022      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a51      	ldr	r2, [pc, #324]	; (8004b10 <HAL_DMA_IRQHandler+0x1d8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d01d      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a50      	ldr	r2, [pc, #320]	; (8004b14 <HAL_DMA_IRQHandler+0x1dc>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d018      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a4e      	ldr	r2, [pc, #312]	; (8004b18 <HAL_DMA_IRQHandler+0x1e0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a4d      	ldr	r2, [pc, #308]	; (8004b1c <HAL_DMA_IRQHandler+0x1e4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00e      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a4b      	ldr	r2, [pc, #300]	; (8004b20 <HAL_DMA_IRQHandler+0x1e8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d009      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a4a      	ldr	r2, [pc, #296]	; (8004b24 <HAL_DMA_IRQHandler+0x1ec>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d004      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a48      	ldr	r2, [pc, #288]	; (8004b28 <HAL_DMA_IRQHandler+0x1f0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d101      	bne.n	8004a0e <HAL_DMA_IRQHandler+0xd6>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <HAL_DMA_IRQHandler+0xd8>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 842b 	beq.w	800526c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	2208      	movs	r2, #8
 8004a20:	409a      	lsls	r2, r3
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 80a2 	beq.w	8004b70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a2e      	ldr	r2, [pc, #184]	; (8004aec <HAL_DMA_IRQHandler+0x1b4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d04a      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a2d      	ldr	r2, [pc, #180]	; (8004af0 <HAL_DMA_IRQHandler+0x1b8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d045      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a2b      	ldr	r2, [pc, #172]	; (8004af4 <HAL_DMA_IRQHandler+0x1bc>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d040      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a2a      	ldr	r2, [pc, #168]	; (8004af8 <HAL_DMA_IRQHandler+0x1c0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d03b      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a28      	ldr	r2, [pc, #160]	; (8004afc <HAL_DMA_IRQHandler+0x1c4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d036      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a27      	ldr	r2, [pc, #156]	; (8004b00 <HAL_DMA_IRQHandler+0x1c8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d031      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a25      	ldr	r2, [pc, #148]	; (8004b04 <HAL_DMA_IRQHandler+0x1cc>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d02c      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a24      	ldr	r2, [pc, #144]	; (8004b08 <HAL_DMA_IRQHandler+0x1d0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d027      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a22      	ldr	r2, [pc, #136]	; (8004b0c <HAL_DMA_IRQHandler+0x1d4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d022      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a21      	ldr	r2, [pc, #132]	; (8004b10 <HAL_DMA_IRQHandler+0x1d8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d01d      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1f      	ldr	r2, [pc, #124]	; (8004b14 <HAL_DMA_IRQHandler+0x1dc>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d018      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1e      	ldr	r2, [pc, #120]	; (8004b18 <HAL_DMA_IRQHandler+0x1e0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d013      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1c      	ldr	r2, [pc, #112]	; (8004b1c <HAL_DMA_IRQHandler+0x1e4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00e      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1b      	ldr	r2, [pc, #108]	; (8004b20 <HAL_DMA_IRQHandler+0x1e8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d009      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a19      	ldr	r2, [pc, #100]	; (8004b24 <HAL_DMA_IRQHandler+0x1ec>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d004      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a18      	ldr	r2, [pc, #96]	; (8004b28 <HAL_DMA_IRQHandler+0x1f0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d12f      	bne.n	8004b2c <HAL_DMA_IRQHandler+0x1f4>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0304 	and.w	r3, r3, #4
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	bf14      	ite	ne
 8004ada:	2301      	movne	r3, #1
 8004adc:	2300      	moveq	r3, #0
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	e02e      	b.n	8004b40 <HAL_DMA_IRQHandler+0x208>
 8004ae2:	bf00      	nop
 8004ae4:	24000000 	.word	0x24000000
 8004ae8:	1b4e81b5 	.word	0x1b4e81b5
 8004aec:	40020010 	.word	0x40020010
 8004af0:	40020028 	.word	0x40020028
 8004af4:	40020040 	.word	0x40020040
 8004af8:	40020058 	.word	0x40020058
 8004afc:	40020070 	.word	0x40020070
 8004b00:	40020088 	.word	0x40020088
 8004b04:	400200a0 	.word	0x400200a0
 8004b08:	400200b8 	.word	0x400200b8
 8004b0c:	40020410 	.word	0x40020410
 8004b10:	40020428 	.word	0x40020428
 8004b14:	40020440 	.word	0x40020440
 8004b18:	40020458 	.word	0x40020458
 8004b1c:	40020470 	.word	0x40020470
 8004b20:	40020488 	.word	0x40020488
 8004b24:	400204a0 	.word	0x400204a0
 8004b28:	400204b8 	.word	0x400204b8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bf14      	ite	ne
 8004b3a:	2301      	movne	r3, #1
 8004b3c:	2300      	moveq	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d015      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0204 	bic.w	r2, r2, #4
 8004b52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b58:	f003 031f 	and.w	r3, r3, #31
 8004b5c:	2208      	movs	r2, #8
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b68:	f043 0201 	orr.w	r2, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d06e      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a69      	ldr	r2, [pc, #420]	; (8004d30 <HAL_DMA_IRQHandler+0x3f8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d04a      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a67      	ldr	r2, [pc, #412]	; (8004d34 <HAL_DMA_IRQHandler+0x3fc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d045      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a66      	ldr	r2, [pc, #408]	; (8004d38 <HAL_DMA_IRQHandler+0x400>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d040      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a64      	ldr	r2, [pc, #400]	; (8004d3c <HAL_DMA_IRQHandler+0x404>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d03b      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a63      	ldr	r2, [pc, #396]	; (8004d40 <HAL_DMA_IRQHandler+0x408>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d036      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a61      	ldr	r2, [pc, #388]	; (8004d44 <HAL_DMA_IRQHandler+0x40c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d031      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a60      	ldr	r2, [pc, #384]	; (8004d48 <HAL_DMA_IRQHandler+0x410>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d02c      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a5e      	ldr	r2, [pc, #376]	; (8004d4c <HAL_DMA_IRQHandler+0x414>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d027      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a5d      	ldr	r2, [pc, #372]	; (8004d50 <HAL_DMA_IRQHandler+0x418>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d022      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a5b      	ldr	r2, [pc, #364]	; (8004d54 <HAL_DMA_IRQHandler+0x41c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d01d      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a5a      	ldr	r2, [pc, #360]	; (8004d58 <HAL_DMA_IRQHandler+0x420>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d018      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a58      	ldr	r2, [pc, #352]	; (8004d5c <HAL_DMA_IRQHandler+0x424>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d013      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a57      	ldr	r2, [pc, #348]	; (8004d60 <HAL_DMA_IRQHandler+0x428>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00e      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a55      	ldr	r2, [pc, #340]	; (8004d64 <HAL_DMA_IRQHandler+0x42c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d009      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a54      	ldr	r2, [pc, #336]	; (8004d68 <HAL_DMA_IRQHandler+0x430>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d004      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a52      	ldr	r2, [pc, #328]	; (8004d6c <HAL_DMA_IRQHandler+0x434>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d10a      	bne.n	8004c3c <HAL_DMA_IRQHandler+0x304>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf14      	ite	ne
 8004c34:	2301      	movne	r3, #1
 8004c36:	2300      	moveq	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e003      	b.n	8004c44 <HAL_DMA_IRQHandler+0x30c>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2300      	movs	r3, #0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00d      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4c:	f003 031f 	and.w	r3, r3, #31
 8004c50:	2201      	movs	r2, #1
 8004c52:	409a      	lsls	r2, r3
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5c:	f043 0202 	orr.w	r2, r3, #2
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	2204      	movs	r2, #4
 8004c6e:	409a      	lsls	r2, r3
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	4013      	ands	r3, r2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 808f 	beq.w	8004d98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a2c      	ldr	r2, [pc, #176]	; (8004d30 <HAL_DMA_IRQHandler+0x3f8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d04a      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a2a      	ldr	r2, [pc, #168]	; (8004d34 <HAL_DMA_IRQHandler+0x3fc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d045      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a29      	ldr	r2, [pc, #164]	; (8004d38 <HAL_DMA_IRQHandler+0x400>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d040      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a27      	ldr	r2, [pc, #156]	; (8004d3c <HAL_DMA_IRQHandler+0x404>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d03b      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a26      	ldr	r2, [pc, #152]	; (8004d40 <HAL_DMA_IRQHandler+0x408>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d036      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a24      	ldr	r2, [pc, #144]	; (8004d44 <HAL_DMA_IRQHandler+0x40c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d031      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a23      	ldr	r2, [pc, #140]	; (8004d48 <HAL_DMA_IRQHandler+0x410>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d02c      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a21      	ldr	r2, [pc, #132]	; (8004d4c <HAL_DMA_IRQHandler+0x414>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d027      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a20      	ldr	r2, [pc, #128]	; (8004d50 <HAL_DMA_IRQHandler+0x418>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d022      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1e      	ldr	r2, [pc, #120]	; (8004d54 <HAL_DMA_IRQHandler+0x41c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d01d      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1d      	ldr	r2, [pc, #116]	; (8004d58 <HAL_DMA_IRQHandler+0x420>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d018      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1b      	ldr	r2, [pc, #108]	; (8004d5c <HAL_DMA_IRQHandler+0x424>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d013      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1a      	ldr	r2, [pc, #104]	; (8004d60 <HAL_DMA_IRQHandler+0x428>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00e      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a18      	ldr	r2, [pc, #96]	; (8004d64 <HAL_DMA_IRQHandler+0x42c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d009      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a17      	ldr	r2, [pc, #92]	; (8004d68 <HAL_DMA_IRQHandler+0x430>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d004      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a15      	ldr	r2, [pc, #84]	; (8004d6c <HAL_DMA_IRQHandler+0x434>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d12a      	bne.n	8004d70 <HAL_DMA_IRQHandler+0x438>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bf14      	ite	ne
 8004d28:	2301      	movne	r3, #1
 8004d2a:	2300      	moveq	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	e023      	b.n	8004d78 <HAL_DMA_IRQHandler+0x440>
 8004d30:	40020010 	.word	0x40020010
 8004d34:	40020028 	.word	0x40020028
 8004d38:	40020040 	.word	0x40020040
 8004d3c:	40020058 	.word	0x40020058
 8004d40:	40020070 	.word	0x40020070
 8004d44:	40020088 	.word	0x40020088
 8004d48:	400200a0 	.word	0x400200a0
 8004d4c:	400200b8 	.word	0x400200b8
 8004d50:	40020410 	.word	0x40020410
 8004d54:	40020428 	.word	0x40020428
 8004d58:	40020440 	.word	0x40020440
 8004d5c:	40020458 	.word	0x40020458
 8004d60:	40020470 	.word	0x40020470
 8004d64:	40020488 	.word	0x40020488
 8004d68:	400204a0 	.word	0x400204a0
 8004d6c:	400204b8 	.word	0x400204b8
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2300      	movs	r3, #0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00d      	beq.n	8004d98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	2204      	movs	r2, #4
 8004d86:	409a      	lsls	r2, r3
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d90:	f043 0204 	orr.w	r2, r3, #4
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	2210      	movs	r2, #16
 8004da2:	409a      	lsls	r2, r3
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80a6 	beq.w	8004efa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a85      	ldr	r2, [pc, #532]	; (8004fc8 <HAL_DMA_IRQHandler+0x690>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d04a      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a83      	ldr	r2, [pc, #524]	; (8004fcc <HAL_DMA_IRQHandler+0x694>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d045      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a82      	ldr	r2, [pc, #520]	; (8004fd0 <HAL_DMA_IRQHandler+0x698>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d040      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a80      	ldr	r2, [pc, #512]	; (8004fd4 <HAL_DMA_IRQHandler+0x69c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d03b      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a7f      	ldr	r2, [pc, #508]	; (8004fd8 <HAL_DMA_IRQHandler+0x6a0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d036      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a7d      	ldr	r2, [pc, #500]	; (8004fdc <HAL_DMA_IRQHandler+0x6a4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d031      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a7c      	ldr	r2, [pc, #496]	; (8004fe0 <HAL_DMA_IRQHandler+0x6a8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d02c      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a7a      	ldr	r2, [pc, #488]	; (8004fe4 <HAL_DMA_IRQHandler+0x6ac>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d027      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a79      	ldr	r2, [pc, #484]	; (8004fe8 <HAL_DMA_IRQHandler+0x6b0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d022      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a77      	ldr	r2, [pc, #476]	; (8004fec <HAL_DMA_IRQHandler+0x6b4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d01d      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a76      	ldr	r2, [pc, #472]	; (8004ff0 <HAL_DMA_IRQHandler+0x6b8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d018      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a74      	ldr	r2, [pc, #464]	; (8004ff4 <HAL_DMA_IRQHandler+0x6bc>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d013      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a73      	ldr	r2, [pc, #460]	; (8004ff8 <HAL_DMA_IRQHandler+0x6c0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00e      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a71      	ldr	r2, [pc, #452]	; (8004ffc <HAL_DMA_IRQHandler+0x6c4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d009      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a70      	ldr	r2, [pc, #448]	; (8005000 <HAL_DMA_IRQHandler+0x6c8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d004      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a6e      	ldr	r2, [pc, #440]	; (8005004 <HAL_DMA_IRQHandler+0x6cc>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d10a      	bne.n	8004e64 <HAL_DMA_IRQHandler+0x52c>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf14      	ite	ne
 8004e5c:	2301      	movne	r3, #1
 8004e5e:	2300      	moveq	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	e009      	b.n	8004e78 <HAL_DMA_IRQHandler+0x540>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	bf14      	ite	ne
 8004e72:	2301      	movne	r3, #1
 8004e74:	2300      	moveq	r3, #0
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d03e      	beq.n	8004efa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	2210      	movs	r2, #16
 8004e86:	409a      	lsls	r2, r3
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d018      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d108      	bne.n	8004eba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d024      	beq.n	8004efa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4798      	blx	r3
 8004eb8:	e01f      	b.n	8004efa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d01b      	beq.n	8004efa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	4798      	blx	r3
 8004eca:	e016      	b.n	8004efa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d107      	bne.n	8004eea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 0208 	bic.w	r2, r2, #8
 8004ee8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efe:	f003 031f 	and.w	r3, r3, #31
 8004f02:	2220      	movs	r2, #32
 8004f04:	409a      	lsls	r2, r3
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 8110 	beq.w	8005130 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a2c      	ldr	r2, [pc, #176]	; (8004fc8 <HAL_DMA_IRQHandler+0x690>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d04a      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a2b      	ldr	r2, [pc, #172]	; (8004fcc <HAL_DMA_IRQHandler+0x694>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d045      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a29      	ldr	r2, [pc, #164]	; (8004fd0 <HAL_DMA_IRQHandler+0x698>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d040      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a28      	ldr	r2, [pc, #160]	; (8004fd4 <HAL_DMA_IRQHandler+0x69c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d03b      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a26      	ldr	r2, [pc, #152]	; (8004fd8 <HAL_DMA_IRQHandler+0x6a0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d036      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a25      	ldr	r2, [pc, #148]	; (8004fdc <HAL_DMA_IRQHandler+0x6a4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d031      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a23      	ldr	r2, [pc, #140]	; (8004fe0 <HAL_DMA_IRQHandler+0x6a8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d02c      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a22      	ldr	r2, [pc, #136]	; (8004fe4 <HAL_DMA_IRQHandler+0x6ac>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d027      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a20      	ldr	r2, [pc, #128]	; (8004fe8 <HAL_DMA_IRQHandler+0x6b0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d022      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1f      	ldr	r2, [pc, #124]	; (8004fec <HAL_DMA_IRQHandler+0x6b4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d01d      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1d      	ldr	r2, [pc, #116]	; (8004ff0 <HAL_DMA_IRQHandler+0x6b8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d018      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1c      	ldr	r2, [pc, #112]	; (8004ff4 <HAL_DMA_IRQHandler+0x6bc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d013      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1a      	ldr	r2, [pc, #104]	; (8004ff8 <HAL_DMA_IRQHandler+0x6c0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00e      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a19      	ldr	r2, [pc, #100]	; (8004ffc <HAL_DMA_IRQHandler+0x6c4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d009      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a17      	ldr	r2, [pc, #92]	; (8005000 <HAL_DMA_IRQHandler+0x6c8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d004      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a16      	ldr	r2, [pc, #88]	; (8005004 <HAL_DMA_IRQHandler+0x6cc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d12b      	bne.n	8005008 <HAL_DMA_IRQHandler+0x6d0>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	bf14      	ite	ne
 8004fbe:	2301      	movne	r3, #1
 8004fc0:	2300      	moveq	r3, #0
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	e02a      	b.n	800501c <HAL_DMA_IRQHandler+0x6e4>
 8004fc6:	bf00      	nop
 8004fc8:	40020010 	.word	0x40020010
 8004fcc:	40020028 	.word	0x40020028
 8004fd0:	40020040 	.word	0x40020040
 8004fd4:	40020058 	.word	0x40020058
 8004fd8:	40020070 	.word	0x40020070
 8004fdc:	40020088 	.word	0x40020088
 8004fe0:	400200a0 	.word	0x400200a0
 8004fe4:	400200b8 	.word	0x400200b8
 8004fe8:	40020410 	.word	0x40020410
 8004fec:	40020428 	.word	0x40020428
 8004ff0:	40020440 	.word	0x40020440
 8004ff4:	40020458 	.word	0x40020458
 8004ff8:	40020470 	.word	0x40020470
 8004ffc:	40020488 	.word	0x40020488
 8005000:	400204a0 	.word	0x400204a0
 8005004:	400204b8 	.word	0x400204b8
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	bf14      	ite	ne
 8005016:	2301      	movne	r3, #1
 8005018:	2300      	moveq	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 8087 	beq.w	8005130 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005026:	f003 031f 	and.w	r3, r3, #31
 800502a:	2220      	movs	r2, #32
 800502c:	409a      	lsls	r2, r3
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b04      	cmp	r3, #4
 800503c:	d139      	bne.n	80050b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0216 	bic.w	r2, r2, #22
 800504c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695a      	ldr	r2, [r3, #20]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800505c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d103      	bne.n	800506e <HAL_DMA_IRQHandler+0x736>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800506a:	2b00      	cmp	r3, #0
 800506c:	d007      	beq.n	800507e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0208 	bic.w	r2, r2, #8
 800507c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005082:	f003 031f 	and.w	r3, r3, #31
 8005086:	223f      	movs	r2, #63	; 0x3f
 8005088:	409a      	lsls	r2, r3
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 834a 	beq.w	800573c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	4798      	blx	r3
          }
          return;
 80050b0:	e344      	b.n	800573c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d018      	beq.n	80050f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d108      	bne.n	80050e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d02c      	beq.n	8005130 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	4798      	blx	r3
 80050de:	e027      	b.n	8005130 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d023      	beq.n	8005130 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	4798      	blx	r3
 80050f0:	e01e      	b.n	8005130 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10f      	bne.n	8005120 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0210 	bic.w	r2, r2, #16
 800510e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 8306 	beq.w	8005746 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 8088 	beq.w	8005258 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2204      	movs	r2, #4
 800514c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a7a      	ldr	r2, [pc, #488]	; (8005340 <HAL_DMA_IRQHandler+0xa08>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d04a      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a79      	ldr	r2, [pc, #484]	; (8005344 <HAL_DMA_IRQHandler+0xa0c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d045      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a77      	ldr	r2, [pc, #476]	; (8005348 <HAL_DMA_IRQHandler+0xa10>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d040      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a76      	ldr	r2, [pc, #472]	; (800534c <HAL_DMA_IRQHandler+0xa14>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d03b      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a74      	ldr	r2, [pc, #464]	; (8005350 <HAL_DMA_IRQHandler+0xa18>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d036      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a73      	ldr	r2, [pc, #460]	; (8005354 <HAL_DMA_IRQHandler+0xa1c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d031      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a71      	ldr	r2, [pc, #452]	; (8005358 <HAL_DMA_IRQHandler+0xa20>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d02c      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a70      	ldr	r2, [pc, #448]	; (800535c <HAL_DMA_IRQHandler+0xa24>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d027      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a6e      	ldr	r2, [pc, #440]	; (8005360 <HAL_DMA_IRQHandler+0xa28>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d022      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a6d      	ldr	r2, [pc, #436]	; (8005364 <HAL_DMA_IRQHandler+0xa2c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d01d      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a6b      	ldr	r2, [pc, #428]	; (8005368 <HAL_DMA_IRQHandler+0xa30>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d018      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a6a      	ldr	r2, [pc, #424]	; (800536c <HAL_DMA_IRQHandler+0xa34>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d013      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a68      	ldr	r2, [pc, #416]	; (8005370 <HAL_DMA_IRQHandler+0xa38>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00e      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a67      	ldr	r2, [pc, #412]	; (8005374 <HAL_DMA_IRQHandler+0xa3c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d009      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a65      	ldr	r2, [pc, #404]	; (8005378 <HAL_DMA_IRQHandler+0xa40>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d004      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a64      	ldr	r2, [pc, #400]	; (800537c <HAL_DMA_IRQHandler+0xa44>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d108      	bne.n	8005202 <HAL_DMA_IRQHandler+0x8ca>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0201 	bic.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	e007      	b.n	8005212 <HAL_DMA_IRQHandler+0x8da>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0201 	bic.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3301      	adds	r3, #1
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521a:	429a      	cmp	r2, r3
 800521c:	d307      	bcc.n	800522e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f2      	bne.n	8005212 <HAL_DMA_IRQHandler+0x8da>
 800522c:	e000      	b.n	8005230 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800522e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d004      	beq.n	8005248 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2203      	movs	r2, #3
 8005242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005246:	e003      	b.n	8005250 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 8272 	beq.w	8005746 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	4798      	blx	r3
 800526a:	e26c      	b.n	8005746 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a43      	ldr	r2, [pc, #268]	; (8005380 <HAL_DMA_IRQHandler+0xa48>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d022      	beq.n	80052bc <HAL_DMA_IRQHandler+0x984>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a42      	ldr	r2, [pc, #264]	; (8005384 <HAL_DMA_IRQHandler+0xa4c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d01d      	beq.n	80052bc <HAL_DMA_IRQHandler+0x984>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a40      	ldr	r2, [pc, #256]	; (8005388 <HAL_DMA_IRQHandler+0xa50>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d018      	beq.n	80052bc <HAL_DMA_IRQHandler+0x984>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a3f      	ldr	r2, [pc, #252]	; (800538c <HAL_DMA_IRQHandler+0xa54>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d013      	beq.n	80052bc <HAL_DMA_IRQHandler+0x984>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a3d      	ldr	r2, [pc, #244]	; (8005390 <HAL_DMA_IRQHandler+0xa58>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00e      	beq.n	80052bc <HAL_DMA_IRQHandler+0x984>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a3c      	ldr	r2, [pc, #240]	; (8005394 <HAL_DMA_IRQHandler+0xa5c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d009      	beq.n	80052bc <HAL_DMA_IRQHandler+0x984>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a3a      	ldr	r2, [pc, #232]	; (8005398 <HAL_DMA_IRQHandler+0xa60>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d004      	beq.n	80052bc <HAL_DMA_IRQHandler+0x984>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a39      	ldr	r2, [pc, #228]	; (800539c <HAL_DMA_IRQHandler+0xa64>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d101      	bne.n	80052c0 <HAL_DMA_IRQHandler+0x988>
 80052bc:	2301      	movs	r3, #1
 80052be:	e000      	b.n	80052c2 <HAL_DMA_IRQHandler+0x98a>
 80052c0:	2300      	movs	r3, #0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 823f 	beq.w	8005746 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	2204      	movs	r2, #4
 80052da:	409a      	lsls	r2, r3
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	4013      	ands	r3, r2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 80cd 	beq.w	8005480 <HAL_DMA_IRQHandler+0xb48>
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 80c7 	beq.w	8005480 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f6:	f003 031f 	and.w	r3, r3, #31
 80052fa:	2204      	movs	r2, #4
 80052fc:	409a      	lsls	r2, r3
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d049      	beq.n	80053a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 8210 	beq.w	8005740 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005328:	e20a      	b.n	8005740 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 8206 	beq.w	8005740 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800533c:	e200      	b.n	8005740 <HAL_DMA_IRQHandler+0xe08>
 800533e:	bf00      	nop
 8005340:	40020010 	.word	0x40020010
 8005344:	40020028 	.word	0x40020028
 8005348:	40020040 	.word	0x40020040
 800534c:	40020058 	.word	0x40020058
 8005350:	40020070 	.word	0x40020070
 8005354:	40020088 	.word	0x40020088
 8005358:	400200a0 	.word	0x400200a0
 800535c:	400200b8 	.word	0x400200b8
 8005360:	40020410 	.word	0x40020410
 8005364:	40020428 	.word	0x40020428
 8005368:	40020440 	.word	0x40020440
 800536c:	40020458 	.word	0x40020458
 8005370:	40020470 	.word	0x40020470
 8005374:	40020488 	.word	0x40020488
 8005378:	400204a0 	.word	0x400204a0
 800537c:	400204b8 	.word	0x400204b8
 8005380:	58025408 	.word	0x58025408
 8005384:	5802541c 	.word	0x5802541c
 8005388:	58025430 	.word	0x58025430
 800538c:	58025444 	.word	0x58025444
 8005390:	58025458 	.word	0x58025458
 8005394:	5802546c 	.word	0x5802546c
 8005398:	58025480 	.word	0x58025480
 800539c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d160      	bne.n	800546c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a7f      	ldr	r2, [pc, #508]	; (80055ac <HAL_DMA_IRQHandler+0xc74>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d04a      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a7d      	ldr	r2, [pc, #500]	; (80055b0 <HAL_DMA_IRQHandler+0xc78>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d045      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a7c      	ldr	r2, [pc, #496]	; (80055b4 <HAL_DMA_IRQHandler+0xc7c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d040      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a7a      	ldr	r2, [pc, #488]	; (80055b8 <HAL_DMA_IRQHandler+0xc80>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d03b      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a79      	ldr	r2, [pc, #484]	; (80055bc <HAL_DMA_IRQHandler+0xc84>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d036      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a77      	ldr	r2, [pc, #476]	; (80055c0 <HAL_DMA_IRQHandler+0xc88>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d031      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a76      	ldr	r2, [pc, #472]	; (80055c4 <HAL_DMA_IRQHandler+0xc8c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d02c      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a74      	ldr	r2, [pc, #464]	; (80055c8 <HAL_DMA_IRQHandler+0xc90>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d027      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a73      	ldr	r2, [pc, #460]	; (80055cc <HAL_DMA_IRQHandler+0xc94>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d022      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a71      	ldr	r2, [pc, #452]	; (80055d0 <HAL_DMA_IRQHandler+0xc98>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d01d      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a70      	ldr	r2, [pc, #448]	; (80055d4 <HAL_DMA_IRQHandler+0xc9c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d018      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a6e      	ldr	r2, [pc, #440]	; (80055d8 <HAL_DMA_IRQHandler+0xca0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a6d      	ldr	r2, [pc, #436]	; (80055dc <HAL_DMA_IRQHandler+0xca4>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00e      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a6b      	ldr	r2, [pc, #428]	; (80055e0 <HAL_DMA_IRQHandler+0xca8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d009      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a6a      	ldr	r2, [pc, #424]	; (80055e4 <HAL_DMA_IRQHandler+0xcac>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d004      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a68      	ldr	r2, [pc, #416]	; (80055e8 <HAL_DMA_IRQHandler+0xcb0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d108      	bne.n	800545c <HAL_DMA_IRQHandler+0xb24>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0208 	bic.w	r2, r2, #8
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	e007      	b.n	800546c <HAL_DMA_IRQHandler+0xb34>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 0204 	bic.w	r2, r2, #4
 800546a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 8165 	beq.w	8005740 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800547e:	e15f      	b.n	8005740 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005484:	f003 031f 	and.w	r3, r3, #31
 8005488:	2202      	movs	r2, #2
 800548a:	409a      	lsls	r2, r3
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	4013      	ands	r3, r2
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 80c5 	beq.w	8005620 <HAL_DMA_IRQHandler+0xce8>
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 80bf 	beq.w	8005620 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a6:	f003 031f 	and.w	r3, r3, #31
 80054aa:	2202      	movs	r2, #2
 80054ac:	409a      	lsls	r2, r3
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d018      	beq.n	80054ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d109      	bne.n	80054da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 813a 	beq.w	8005744 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054d8:	e134      	b.n	8005744 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 8130 	beq.w	8005744 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054ec:	e12a      	b.n	8005744 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f003 0320 	and.w	r3, r3, #32
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f040 8089 	bne.w	800560c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a2b      	ldr	r2, [pc, #172]	; (80055ac <HAL_DMA_IRQHandler+0xc74>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d04a      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a29      	ldr	r2, [pc, #164]	; (80055b0 <HAL_DMA_IRQHandler+0xc78>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d045      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a28      	ldr	r2, [pc, #160]	; (80055b4 <HAL_DMA_IRQHandler+0xc7c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d040      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a26      	ldr	r2, [pc, #152]	; (80055b8 <HAL_DMA_IRQHandler+0xc80>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d03b      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a25      	ldr	r2, [pc, #148]	; (80055bc <HAL_DMA_IRQHandler+0xc84>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d036      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a23      	ldr	r2, [pc, #140]	; (80055c0 <HAL_DMA_IRQHandler+0xc88>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d031      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a22      	ldr	r2, [pc, #136]	; (80055c4 <HAL_DMA_IRQHandler+0xc8c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d02c      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a20      	ldr	r2, [pc, #128]	; (80055c8 <HAL_DMA_IRQHandler+0xc90>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d027      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1f      	ldr	r2, [pc, #124]	; (80055cc <HAL_DMA_IRQHandler+0xc94>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d022      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a1d      	ldr	r2, [pc, #116]	; (80055d0 <HAL_DMA_IRQHandler+0xc98>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d01d      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1c      	ldr	r2, [pc, #112]	; (80055d4 <HAL_DMA_IRQHandler+0xc9c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d018      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a1a      	ldr	r2, [pc, #104]	; (80055d8 <HAL_DMA_IRQHandler+0xca0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d013      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a19      	ldr	r2, [pc, #100]	; (80055dc <HAL_DMA_IRQHandler+0xca4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00e      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a17      	ldr	r2, [pc, #92]	; (80055e0 <HAL_DMA_IRQHandler+0xca8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d009      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a16      	ldr	r2, [pc, #88]	; (80055e4 <HAL_DMA_IRQHandler+0xcac>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d004      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a14      	ldr	r2, [pc, #80]	; (80055e8 <HAL_DMA_IRQHandler+0xcb0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d128      	bne.n	80055ec <HAL_DMA_IRQHandler+0xcb4>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0214 	bic.w	r2, r2, #20
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	e027      	b.n	80055fc <HAL_DMA_IRQHandler+0xcc4>
 80055ac:	40020010 	.word	0x40020010
 80055b0:	40020028 	.word	0x40020028
 80055b4:	40020040 	.word	0x40020040
 80055b8:	40020058 	.word	0x40020058
 80055bc:	40020070 	.word	0x40020070
 80055c0:	40020088 	.word	0x40020088
 80055c4:	400200a0 	.word	0x400200a0
 80055c8:	400200b8 	.word	0x400200b8
 80055cc:	40020410 	.word	0x40020410
 80055d0:	40020428 	.word	0x40020428
 80055d4:	40020440 	.word	0x40020440
 80055d8:	40020458 	.word	0x40020458
 80055dc:	40020470 	.word	0x40020470
 80055e0:	40020488 	.word	0x40020488
 80055e4:	400204a0 	.word	0x400204a0
 80055e8:	400204b8 	.word	0x400204b8
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 020a 	bic.w	r2, r2, #10
 80055fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 8097 	beq.w	8005744 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800561e:	e091      	b.n	8005744 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005624:	f003 031f 	and.w	r3, r3, #31
 8005628:	2208      	movs	r2, #8
 800562a:	409a      	lsls	r2, r3
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	4013      	ands	r3, r2
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 8088 	beq.w	8005746 <HAL_DMA_IRQHandler+0xe0e>
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 8082 	beq.w	8005746 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a41      	ldr	r2, [pc, #260]	; (800574c <HAL_DMA_IRQHandler+0xe14>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d04a      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a3f      	ldr	r2, [pc, #252]	; (8005750 <HAL_DMA_IRQHandler+0xe18>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d045      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a3e      	ldr	r2, [pc, #248]	; (8005754 <HAL_DMA_IRQHandler+0xe1c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d040      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a3c      	ldr	r2, [pc, #240]	; (8005758 <HAL_DMA_IRQHandler+0xe20>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d03b      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a3b      	ldr	r2, [pc, #236]	; (800575c <HAL_DMA_IRQHandler+0xe24>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d036      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a39      	ldr	r2, [pc, #228]	; (8005760 <HAL_DMA_IRQHandler+0xe28>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d031      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a38      	ldr	r2, [pc, #224]	; (8005764 <HAL_DMA_IRQHandler+0xe2c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d02c      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a36      	ldr	r2, [pc, #216]	; (8005768 <HAL_DMA_IRQHandler+0xe30>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d027      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a35      	ldr	r2, [pc, #212]	; (800576c <HAL_DMA_IRQHandler+0xe34>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d022      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a33      	ldr	r2, [pc, #204]	; (8005770 <HAL_DMA_IRQHandler+0xe38>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d01d      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a32      	ldr	r2, [pc, #200]	; (8005774 <HAL_DMA_IRQHandler+0xe3c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d018      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a30      	ldr	r2, [pc, #192]	; (8005778 <HAL_DMA_IRQHandler+0xe40>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d013      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a2f      	ldr	r2, [pc, #188]	; (800577c <HAL_DMA_IRQHandler+0xe44>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00e      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a2d      	ldr	r2, [pc, #180]	; (8005780 <HAL_DMA_IRQHandler+0xe48>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d009      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a2c      	ldr	r2, [pc, #176]	; (8005784 <HAL_DMA_IRQHandler+0xe4c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d004      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a2a      	ldr	r2, [pc, #168]	; (8005788 <HAL_DMA_IRQHandler+0xe50>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d108      	bne.n	80056f4 <HAL_DMA_IRQHandler+0xdbc>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 021c 	bic.w	r2, r2, #28
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	e007      	b.n	8005704 <HAL_DMA_IRQHandler+0xdcc>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 020e 	bic.w	r2, r2, #14
 8005702:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005708:	f003 031f 	and.w	r3, r3, #31
 800570c:	2201      	movs	r2, #1
 800570e:	409a      	lsls	r2, r3
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	4798      	blx	r3
 800573a:	e004      	b.n	8005746 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800573c:	bf00      	nop
 800573e:	e002      	b.n	8005746 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005740:	bf00      	nop
 8005742:	e000      	b.n	8005746 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005744:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005746:	3728      	adds	r7, #40	; 0x28
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40020010 	.word	0x40020010
 8005750:	40020028 	.word	0x40020028
 8005754:	40020040 	.word	0x40020040
 8005758:	40020058 	.word	0x40020058
 800575c:	40020070 	.word	0x40020070
 8005760:	40020088 	.word	0x40020088
 8005764:	400200a0 	.word	0x400200a0
 8005768:	400200b8 	.word	0x400200b8
 800576c:	40020410 	.word	0x40020410
 8005770:	40020428 	.word	0x40020428
 8005774:	40020440 	.word	0x40020440
 8005778:	40020458 	.word	0x40020458
 800577c:	40020470 	.word	0x40020470
 8005780:	40020488 	.word	0x40020488
 8005784:	400204a0 	.word	0x400204a0
 8005788:	400204b8 	.word	0x400204b8

0800578c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a7f      	ldr	r2, [pc, #508]	; (80059a8 <DMA_SetConfig+0x21c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d072      	beq.n	8005896 <DMA_SetConfig+0x10a>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a7d      	ldr	r2, [pc, #500]	; (80059ac <DMA_SetConfig+0x220>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d06d      	beq.n	8005896 <DMA_SetConfig+0x10a>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a7c      	ldr	r2, [pc, #496]	; (80059b0 <DMA_SetConfig+0x224>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d068      	beq.n	8005896 <DMA_SetConfig+0x10a>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a7a      	ldr	r2, [pc, #488]	; (80059b4 <DMA_SetConfig+0x228>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d063      	beq.n	8005896 <DMA_SetConfig+0x10a>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a79      	ldr	r2, [pc, #484]	; (80059b8 <DMA_SetConfig+0x22c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d05e      	beq.n	8005896 <DMA_SetConfig+0x10a>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a77      	ldr	r2, [pc, #476]	; (80059bc <DMA_SetConfig+0x230>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d059      	beq.n	8005896 <DMA_SetConfig+0x10a>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a76      	ldr	r2, [pc, #472]	; (80059c0 <DMA_SetConfig+0x234>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d054      	beq.n	8005896 <DMA_SetConfig+0x10a>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a74      	ldr	r2, [pc, #464]	; (80059c4 <DMA_SetConfig+0x238>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d04f      	beq.n	8005896 <DMA_SetConfig+0x10a>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a73      	ldr	r2, [pc, #460]	; (80059c8 <DMA_SetConfig+0x23c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d04a      	beq.n	8005896 <DMA_SetConfig+0x10a>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a71      	ldr	r2, [pc, #452]	; (80059cc <DMA_SetConfig+0x240>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d045      	beq.n	8005896 <DMA_SetConfig+0x10a>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a70      	ldr	r2, [pc, #448]	; (80059d0 <DMA_SetConfig+0x244>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d040      	beq.n	8005896 <DMA_SetConfig+0x10a>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a6e      	ldr	r2, [pc, #440]	; (80059d4 <DMA_SetConfig+0x248>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d03b      	beq.n	8005896 <DMA_SetConfig+0x10a>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a6d      	ldr	r2, [pc, #436]	; (80059d8 <DMA_SetConfig+0x24c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d036      	beq.n	8005896 <DMA_SetConfig+0x10a>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a6b      	ldr	r2, [pc, #428]	; (80059dc <DMA_SetConfig+0x250>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d031      	beq.n	8005896 <DMA_SetConfig+0x10a>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a6a      	ldr	r2, [pc, #424]	; (80059e0 <DMA_SetConfig+0x254>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d02c      	beq.n	8005896 <DMA_SetConfig+0x10a>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a68      	ldr	r2, [pc, #416]	; (80059e4 <DMA_SetConfig+0x258>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d027      	beq.n	8005896 <DMA_SetConfig+0x10a>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a67      	ldr	r2, [pc, #412]	; (80059e8 <DMA_SetConfig+0x25c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d022      	beq.n	8005896 <DMA_SetConfig+0x10a>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a65      	ldr	r2, [pc, #404]	; (80059ec <DMA_SetConfig+0x260>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d01d      	beq.n	8005896 <DMA_SetConfig+0x10a>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a64      	ldr	r2, [pc, #400]	; (80059f0 <DMA_SetConfig+0x264>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d018      	beq.n	8005896 <DMA_SetConfig+0x10a>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a62      	ldr	r2, [pc, #392]	; (80059f4 <DMA_SetConfig+0x268>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d013      	beq.n	8005896 <DMA_SetConfig+0x10a>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a61      	ldr	r2, [pc, #388]	; (80059f8 <DMA_SetConfig+0x26c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00e      	beq.n	8005896 <DMA_SetConfig+0x10a>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a5f      	ldr	r2, [pc, #380]	; (80059fc <DMA_SetConfig+0x270>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d009      	beq.n	8005896 <DMA_SetConfig+0x10a>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a5e      	ldr	r2, [pc, #376]	; (8005a00 <DMA_SetConfig+0x274>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d004      	beq.n	8005896 <DMA_SetConfig+0x10a>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a5c      	ldr	r2, [pc, #368]	; (8005a04 <DMA_SetConfig+0x278>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d101      	bne.n	800589a <DMA_SetConfig+0x10e>
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <DMA_SetConfig+0x110>
 800589a:	2300      	movs	r3, #0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00d      	beq.n	80058bc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058a8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d004      	beq.n	80058bc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058ba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a39      	ldr	r2, [pc, #228]	; (80059a8 <DMA_SetConfig+0x21c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d04a      	beq.n	800595c <DMA_SetConfig+0x1d0>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a38      	ldr	r2, [pc, #224]	; (80059ac <DMA_SetConfig+0x220>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d045      	beq.n	800595c <DMA_SetConfig+0x1d0>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a36      	ldr	r2, [pc, #216]	; (80059b0 <DMA_SetConfig+0x224>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d040      	beq.n	800595c <DMA_SetConfig+0x1d0>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a35      	ldr	r2, [pc, #212]	; (80059b4 <DMA_SetConfig+0x228>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d03b      	beq.n	800595c <DMA_SetConfig+0x1d0>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a33      	ldr	r2, [pc, #204]	; (80059b8 <DMA_SetConfig+0x22c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d036      	beq.n	800595c <DMA_SetConfig+0x1d0>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a32      	ldr	r2, [pc, #200]	; (80059bc <DMA_SetConfig+0x230>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d031      	beq.n	800595c <DMA_SetConfig+0x1d0>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a30      	ldr	r2, [pc, #192]	; (80059c0 <DMA_SetConfig+0x234>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d02c      	beq.n	800595c <DMA_SetConfig+0x1d0>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a2f      	ldr	r2, [pc, #188]	; (80059c4 <DMA_SetConfig+0x238>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d027      	beq.n	800595c <DMA_SetConfig+0x1d0>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a2d      	ldr	r2, [pc, #180]	; (80059c8 <DMA_SetConfig+0x23c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d022      	beq.n	800595c <DMA_SetConfig+0x1d0>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a2c      	ldr	r2, [pc, #176]	; (80059cc <DMA_SetConfig+0x240>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d01d      	beq.n	800595c <DMA_SetConfig+0x1d0>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a2a      	ldr	r2, [pc, #168]	; (80059d0 <DMA_SetConfig+0x244>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d018      	beq.n	800595c <DMA_SetConfig+0x1d0>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a29      	ldr	r2, [pc, #164]	; (80059d4 <DMA_SetConfig+0x248>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d013      	beq.n	800595c <DMA_SetConfig+0x1d0>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a27      	ldr	r2, [pc, #156]	; (80059d8 <DMA_SetConfig+0x24c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00e      	beq.n	800595c <DMA_SetConfig+0x1d0>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a26      	ldr	r2, [pc, #152]	; (80059dc <DMA_SetConfig+0x250>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d009      	beq.n	800595c <DMA_SetConfig+0x1d0>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a24      	ldr	r2, [pc, #144]	; (80059e0 <DMA_SetConfig+0x254>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d004      	beq.n	800595c <DMA_SetConfig+0x1d0>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a23      	ldr	r2, [pc, #140]	; (80059e4 <DMA_SetConfig+0x258>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d101      	bne.n	8005960 <DMA_SetConfig+0x1d4>
 800595c:	2301      	movs	r3, #1
 800595e:	e000      	b.n	8005962 <DMA_SetConfig+0x1d6>
 8005960:	2300      	movs	r3, #0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d059      	beq.n	8005a1a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800596a:	f003 031f 	and.w	r3, r3, #31
 800596e:	223f      	movs	r2, #63	; 0x3f
 8005970:	409a      	lsls	r2, r3
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005984:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	2b40      	cmp	r3, #64	; 0x40
 8005994:	d138      	bne.n	8005a08 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80059a6:	e086      	b.n	8005ab6 <DMA_SetConfig+0x32a>
 80059a8:	40020010 	.word	0x40020010
 80059ac:	40020028 	.word	0x40020028
 80059b0:	40020040 	.word	0x40020040
 80059b4:	40020058 	.word	0x40020058
 80059b8:	40020070 	.word	0x40020070
 80059bc:	40020088 	.word	0x40020088
 80059c0:	400200a0 	.word	0x400200a0
 80059c4:	400200b8 	.word	0x400200b8
 80059c8:	40020410 	.word	0x40020410
 80059cc:	40020428 	.word	0x40020428
 80059d0:	40020440 	.word	0x40020440
 80059d4:	40020458 	.word	0x40020458
 80059d8:	40020470 	.word	0x40020470
 80059dc:	40020488 	.word	0x40020488
 80059e0:	400204a0 	.word	0x400204a0
 80059e4:	400204b8 	.word	0x400204b8
 80059e8:	58025408 	.word	0x58025408
 80059ec:	5802541c 	.word	0x5802541c
 80059f0:	58025430 	.word	0x58025430
 80059f4:	58025444 	.word	0x58025444
 80059f8:	58025458 	.word	0x58025458
 80059fc:	5802546c 	.word	0x5802546c
 8005a00:	58025480 	.word	0x58025480
 8005a04:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	60da      	str	r2, [r3, #12]
}
 8005a18:	e04d      	b.n	8005ab6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a29      	ldr	r2, [pc, #164]	; (8005ac4 <DMA_SetConfig+0x338>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d022      	beq.n	8005a6a <DMA_SetConfig+0x2de>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a27      	ldr	r2, [pc, #156]	; (8005ac8 <DMA_SetConfig+0x33c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d01d      	beq.n	8005a6a <DMA_SetConfig+0x2de>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a26      	ldr	r2, [pc, #152]	; (8005acc <DMA_SetConfig+0x340>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d018      	beq.n	8005a6a <DMA_SetConfig+0x2de>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a24      	ldr	r2, [pc, #144]	; (8005ad0 <DMA_SetConfig+0x344>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d013      	beq.n	8005a6a <DMA_SetConfig+0x2de>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a23      	ldr	r2, [pc, #140]	; (8005ad4 <DMA_SetConfig+0x348>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00e      	beq.n	8005a6a <DMA_SetConfig+0x2de>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a21      	ldr	r2, [pc, #132]	; (8005ad8 <DMA_SetConfig+0x34c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d009      	beq.n	8005a6a <DMA_SetConfig+0x2de>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a20      	ldr	r2, [pc, #128]	; (8005adc <DMA_SetConfig+0x350>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d004      	beq.n	8005a6a <DMA_SetConfig+0x2de>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a1e      	ldr	r2, [pc, #120]	; (8005ae0 <DMA_SetConfig+0x354>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d101      	bne.n	8005a6e <DMA_SetConfig+0x2e2>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <DMA_SetConfig+0x2e4>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d020      	beq.n	8005ab6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a78:	f003 031f 	and.w	r3, r3, #31
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	409a      	lsls	r2, r3
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	2b40      	cmp	r3, #64	; 0x40
 8005a92:	d108      	bne.n	8005aa6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	60da      	str	r2, [r3, #12]
}
 8005aa4:	e007      	b.n	8005ab6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	60da      	str	r2, [r3, #12]
}
 8005ab6:	bf00      	nop
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	58025408 	.word	0x58025408
 8005ac8:	5802541c 	.word	0x5802541c
 8005acc:	58025430 	.word	0x58025430
 8005ad0:	58025444 	.word	0x58025444
 8005ad4:	58025458 	.word	0x58025458
 8005ad8:	5802546c 	.word	0x5802546c
 8005adc:	58025480 	.word	0x58025480
 8005ae0:	58025494 	.word	0x58025494

08005ae4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a42      	ldr	r2, [pc, #264]	; (8005bfc <DMA_CalcBaseAndBitshift+0x118>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d04a      	beq.n	8005b8c <DMA_CalcBaseAndBitshift+0xa8>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a41      	ldr	r2, [pc, #260]	; (8005c00 <DMA_CalcBaseAndBitshift+0x11c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d045      	beq.n	8005b8c <DMA_CalcBaseAndBitshift+0xa8>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a3f      	ldr	r2, [pc, #252]	; (8005c04 <DMA_CalcBaseAndBitshift+0x120>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d040      	beq.n	8005b8c <DMA_CalcBaseAndBitshift+0xa8>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a3e      	ldr	r2, [pc, #248]	; (8005c08 <DMA_CalcBaseAndBitshift+0x124>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d03b      	beq.n	8005b8c <DMA_CalcBaseAndBitshift+0xa8>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a3c      	ldr	r2, [pc, #240]	; (8005c0c <DMA_CalcBaseAndBitshift+0x128>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d036      	beq.n	8005b8c <DMA_CalcBaseAndBitshift+0xa8>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a3b      	ldr	r2, [pc, #236]	; (8005c10 <DMA_CalcBaseAndBitshift+0x12c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d031      	beq.n	8005b8c <DMA_CalcBaseAndBitshift+0xa8>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a39      	ldr	r2, [pc, #228]	; (8005c14 <DMA_CalcBaseAndBitshift+0x130>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d02c      	beq.n	8005b8c <DMA_CalcBaseAndBitshift+0xa8>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a38      	ldr	r2, [pc, #224]	; (8005c18 <DMA_CalcBaseAndBitshift+0x134>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d027      	beq.n	8005b8c <DMA_CalcBaseAndBitshift+0xa8>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a36      	ldr	r2, [pc, #216]	; (8005c1c <DMA_CalcBaseAndBitshift+0x138>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d022      	beq.n	8005b8c <DMA_CalcBaseAndBitshift+0xa8>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a35      	ldr	r2, [pc, #212]	; (8005c20 <DMA_CalcBaseAndBitshift+0x13c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d01d      	beq.n	8005b8c <DMA_CalcBaseAndBitshift+0xa8>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a33      	ldr	r2, [pc, #204]	; (8005c24 <DMA_CalcBaseAndBitshift+0x140>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d018      	beq.n	8005b8c <DMA_CalcBaseAndBitshift+0xa8>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a32      	ldr	r2, [pc, #200]	; (8005c28 <DMA_CalcBaseAndBitshift+0x144>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d013      	beq.n	8005b8c <DMA_CalcBaseAndBitshift+0xa8>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a30      	ldr	r2, [pc, #192]	; (8005c2c <DMA_CalcBaseAndBitshift+0x148>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d00e      	beq.n	8005b8c <DMA_CalcBaseAndBitshift+0xa8>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a2f      	ldr	r2, [pc, #188]	; (8005c30 <DMA_CalcBaseAndBitshift+0x14c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d009      	beq.n	8005b8c <DMA_CalcBaseAndBitshift+0xa8>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a2d      	ldr	r2, [pc, #180]	; (8005c34 <DMA_CalcBaseAndBitshift+0x150>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d004      	beq.n	8005b8c <DMA_CalcBaseAndBitshift+0xa8>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a2c      	ldr	r2, [pc, #176]	; (8005c38 <DMA_CalcBaseAndBitshift+0x154>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d101      	bne.n	8005b90 <DMA_CalcBaseAndBitshift+0xac>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e000      	b.n	8005b92 <DMA_CalcBaseAndBitshift+0xae>
 8005b90:	2300      	movs	r3, #0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d024      	beq.n	8005be0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	3b10      	subs	r3, #16
 8005b9e:	4a27      	ldr	r2, [pc, #156]	; (8005c3c <DMA_CalcBaseAndBitshift+0x158>)
 8005ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba4:	091b      	lsrs	r3, r3, #4
 8005ba6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	4a24      	ldr	r2, [pc, #144]	; (8005c40 <DMA_CalcBaseAndBitshift+0x15c>)
 8005bb0:	5cd3      	ldrb	r3, [r2, r3]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	d908      	bls.n	8005bd0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	4b1f      	ldr	r3, [pc, #124]	; (8005c44 <DMA_CalcBaseAndBitshift+0x160>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	1d1a      	adds	r2, r3, #4
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	659a      	str	r2, [r3, #88]	; 0x58
 8005bce:	e00d      	b.n	8005bec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	4b1b      	ldr	r3, [pc, #108]	; (8005c44 <DMA_CalcBaseAndBitshift+0x160>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8005bde:	e005      	b.n	8005bec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	40020010 	.word	0x40020010
 8005c00:	40020028 	.word	0x40020028
 8005c04:	40020040 	.word	0x40020040
 8005c08:	40020058 	.word	0x40020058
 8005c0c:	40020070 	.word	0x40020070
 8005c10:	40020088 	.word	0x40020088
 8005c14:	400200a0 	.word	0x400200a0
 8005c18:	400200b8 	.word	0x400200b8
 8005c1c:	40020410 	.word	0x40020410
 8005c20:	40020428 	.word	0x40020428
 8005c24:	40020440 	.word	0x40020440
 8005c28:	40020458 	.word	0x40020458
 8005c2c:	40020470 	.word	0x40020470
 8005c30:	40020488 	.word	0x40020488
 8005c34:	400204a0 	.word	0x400204a0
 8005c38:	400204b8 	.word	0x400204b8
 8005c3c:	aaaaaaab 	.word	0xaaaaaaab
 8005c40:	0800b1a0 	.word	0x0800b1a0
 8005c44:	fffffc00 	.word	0xfffffc00

08005c48 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d120      	bne.n	8005c9e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d858      	bhi.n	8005d16 <DMA_CheckFifoParam+0xce>
 8005c64:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <DMA_CheckFifoParam+0x24>)
 8005c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6a:	bf00      	nop
 8005c6c:	08005c7d 	.word	0x08005c7d
 8005c70:	08005c8f 	.word	0x08005c8f
 8005c74:	08005c7d 	.word	0x08005c7d
 8005c78:	08005d17 	.word	0x08005d17
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d048      	beq.n	8005d1a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c8c:	e045      	b.n	8005d1a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c96:	d142      	bne.n	8005d1e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c9c:	e03f      	b.n	8005d1e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ca6:	d123      	bne.n	8005cf0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cac:	2b03      	cmp	r3, #3
 8005cae:	d838      	bhi.n	8005d22 <DMA_CheckFifoParam+0xda>
 8005cb0:	a201      	add	r2, pc, #4	; (adr r2, 8005cb8 <DMA_CheckFifoParam+0x70>)
 8005cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb6:	bf00      	nop
 8005cb8:	08005cc9 	.word	0x08005cc9
 8005cbc:	08005ccf 	.word	0x08005ccf
 8005cc0:	08005cc9 	.word	0x08005cc9
 8005cc4:	08005ce1 	.word	0x08005ce1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	73fb      	strb	r3, [r7, #15]
        break;
 8005ccc:	e030      	b.n	8005d30 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d025      	beq.n	8005d26 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cde:	e022      	b.n	8005d26 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ce8:	d11f      	bne.n	8005d2a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cee:	e01c      	b.n	8005d2a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d902      	bls.n	8005cfe <DMA_CheckFifoParam+0xb6>
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d003      	beq.n	8005d04 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005cfc:	e018      	b.n	8005d30 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	73fb      	strb	r3, [r7, #15]
        break;
 8005d02:	e015      	b.n	8005d30 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00e      	beq.n	8005d2e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	73fb      	strb	r3, [r7, #15]
    break;
 8005d14:	e00b      	b.n	8005d2e <DMA_CheckFifoParam+0xe6>
        break;
 8005d16:	bf00      	nop
 8005d18:	e00a      	b.n	8005d30 <DMA_CheckFifoParam+0xe8>
        break;
 8005d1a:	bf00      	nop
 8005d1c:	e008      	b.n	8005d30 <DMA_CheckFifoParam+0xe8>
        break;
 8005d1e:	bf00      	nop
 8005d20:	e006      	b.n	8005d30 <DMA_CheckFifoParam+0xe8>
        break;
 8005d22:	bf00      	nop
 8005d24:	e004      	b.n	8005d30 <DMA_CheckFifoParam+0xe8>
        break;
 8005d26:	bf00      	nop
 8005d28:	e002      	b.n	8005d30 <DMA_CheckFifoParam+0xe8>
        break;
 8005d2a:	bf00      	nop
 8005d2c:	e000      	b.n	8005d30 <DMA_CheckFifoParam+0xe8>
    break;
 8005d2e:	bf00      	nop
    }
  }

  return status;
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop

08005d40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a38      	ldr	r2, [pc, #224]	; (8005e34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d022      	beq.n	8005d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a36      	ldr	r2, [pc, #216]	; (8005e38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d01d      	beq.n	8005d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a35      	ldr	r2, [pc, #212]	; (8005e3c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d018      	beq.n	8005d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a33      	ldr	r2, [pc, #204]	; (8005e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d013      	beq.n	8005d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a32      	ldr	r2, [pc, #200]	; (8005e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00e      	beq.n	8005d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a30      	ldr	r2, [pc, #192]	; (8005e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d009      	beq.n	8005d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a2f      	ldr	r2, [pc, #188]	; (8005e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d004      	beq.n	8005d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a2d      	ldr	r2, [pc, #180]	; (8005e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d101      	bne.n	8005da2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e000      	b.n	8005da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005da2:	2300      	movs	r3, #0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d01a      	beq.n	8005dde <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	3b08      	subs	r3, #8
 8005db0:	4a28      	ldr	r2, [pc, #160]	; (8005e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005db2:	fba2 2303 	umull	r2, r3, r2, r3
 8005db6:	091b      	lsrs	r3, r3, #4
 8005db8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	4b26      	ldr	r3, [pc, #152]	; (8005e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005dbe:	4413      	add	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a24      	ldr	r2, [pc, #144]	; (8005e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005dcc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f003 031f 	and.w	r3, r3, #31
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	409a      	lsls	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005ddc:	e024      	b.n	8005e28 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	3b10      	subs	r3, #16
 8005de6:	4a1e      	ldr	r2, [pc, #120]	; (8005e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005de8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dec:	091b      	lsrs	r3, r3, #4
 8005dee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	4a1c      	ldr	r2, [pc, #112]	; (8005e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d806      	bhi.n	8005e06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	4a1b      	ldr	r2, [pc, #108]	; (8005e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d902      	bls.n	8005e06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	3308      	adds	r3, #8
 8005e04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4b18      	ldr	r3, [pc, #96]	; (8005e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	461a      	mov	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a16      	ldr	r2, [pc, #88]	; (8005e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005e18:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f003 031f 	and.w	r3, r3, #31
 8005e20:	2201      	movs	r2, #1
 8005e22:	409a      	lsls	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005e28:	bf00      	nop
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	58025408 	.word	0x58025408
 8005e38:	5802541c 	.word	0x5802541c
 8005e3c:	58025430 	.word	0x58025430
 8005e40:	58025444 	.word	0x58025444
 8005e44:	58025458 	.word	0x58025458
 8005e48:	5802546c 	.word	0x5802546c
 8005e4c:	58025480 	.word	0x58025480
 8005e50:	58025494 	.word	0x58025494
 8005e54:	cccccccd 	.word	0xcccccccd
 8005e58:	16009600 	.word	0x16009600
 8005e5c:	58025880 	.word	0x58025880
 8005e60:	aaaaaaab 	.word	0xaaaaaaab
 8005e64:	400204b8 	.word	0x400204b8
 8005e68:	4002040f 	.word	0x4002040f
 8005e6c:	10008200 	.word	0x10008200
 8005e70:	40020880 	.word	0x40020880

08005e74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d04a      	beq.n	8005f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d847      	bhi.n	8005f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a25      	ldr	r2, [pc, #148]	; (8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d022      	beq.n	8005ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a24      	ldr	r2, [pc, #144]	; (8005f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d01d      	beq.n	8005ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a22      	ldr	r2, [pc, #136]	; (8005f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d018      	beq.n	8005ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a21      	ldr	r2, [pc, #132]	; (8005f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d013      	beq.n	8005ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1f      	ldr	r2, [pc, #124]	; (8005f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d00e      	beq.n	8005ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1e      	ldr	r2, [pc, #120]	; (8005f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d009      	beq.n	8005ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a1c      	ldr	r2, [pc, #112]	; (8005f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d004      	beq.n	8005ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1b      	ldr	r2, [pc, #108]	; (8005f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d101      	bne.n	8005ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e000      	b.n	8005ee6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4b17      	ldr	r3, [pc, #92]	; (8005f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005efc:	671a      	str	r2, [r3, #112]	; 0x70
 8005efe:	e009      	b.n	8005f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	4b14      	ldr	r3, [pc, #80]	; (8005f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005f04:	4413      	add	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	461a      	mov	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a11      	ldr	r2, [pc, #68]	; (8005f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005f12:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	2201      	movs	r2, #1
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005f20:	bf00      	nop
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	58025408 	.word	0x58025408
 8005f30:	5802541c 	.word	0x5802541c
 8005f34:	58025430 	.word	0x58025430
 8005f38:	58025444 	.word	0x58025444
 8005f3c:	58025458 	.word	0x58025458
 8005f40:	5802546c 	.word	0x5802546c
 8005f44:	58025480 	.word	0x58025480
 8005f48:	58025494 	.word	0x58025494
 8005f4c:	1600963f 	.word	0x1600963f
 8005f50:	58025940 	.word	0x58025940
 8005f54:	1000823f 	.word	0x1000823f
 8005f58:	40020940 	.word	0x40020940

08005f5c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b098      	sub	sp, #96	; 0x60
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005f64:	4a84      	ldr	r2, [pc, #528]	; (8006178 <HAL_FDCAN_Init+0x21c>)
 8005f66:	f107 030c 	add.w	r3, r7, #12
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	224c      	movs	r2, #76	; 0x4c
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f005 f8c6 	bl	800b100 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e1c6      	b.n	800630c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a7e      	ldr	r2, [pc, #504]	; (800617c <HAL_FDCAN_Init+0x220>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d106      	bne.n	8005f96 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005f90:	461a      	mov	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d106      	bne.n	8005fb0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fa fed6 	bl	8000d5c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0210 	bic.w	r2, r2, #16
 8005fbe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fc0:	f7fb f8e2 	bl	8001188 <HAL_GetTick>
 8005fc4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005fc6:	e014      	b.n	8005ff2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005fc8:	f7fb f8de 	bl	8001188 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b0a      	cmp	r3, #10
 8005fd4:	d90d      	bls.n	8005ff2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fdc:	f043 0201 	orr.w	r2, r3, #1
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2203      	movs	r2, #3
 8005fea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e18c      	b.n	800630c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	f003 0308 	and.w	r3, r3, #8
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d0e3      	beq.n	8005fc8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	699a      	ldr	r2, [r3, #24]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006010:	f7fb f8ba 	bl	8001188 <HAL_GetTick>
 8006014:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006016:	e014      	b.n	8006042 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006018:	f7fb f8b6 	bl	8001188 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b0a      	cmp	r3, #10
 8006024:	d90d      	bls.n	8006042 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800602c:	f043 0201 	orr.w	r2, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2203      	movs	r2, #3
 800603a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e164      	b.n	800630c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0e3      	beq.n	8006018 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699a      	ldr	r2, [r3, #24]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0202 	orr.w	r2, r2, #2
 800605e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	7c1b      	ldrb	r3, [r3, #16]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d108      	bne.n	800607a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	699a      	ldr	r2, [r3, #24]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006076:	619a      	str	r2, [r3, #24]
 8006078:	e007      	b.n	800608a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	699a      	ldr	r2, [r3, #24]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006088:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	7c5b      	ldrb	r3, [r3, #17]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d108      	bne.n	80060a4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	699a      	ldr	r2, [r3, #24]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060a0:	619a      	str	r2, [r3, #24]
 80060a2:	e007      	b.n	80060b4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	699a      	ldr	r2, [r3, #24]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060b2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	7c9b      	ldrb	r3, [r3, #18]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d108      	bne.n	80060ce <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	699a      	ldr	r2, [r3, #24]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060ca:	619a      	str	r2, [r3, #24]
 80060cc:	e007      	b.n	80060de <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	699a      	ldr	r2, [r3, #24]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060dc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699a      	ldr	r2, [r3, #24]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006102:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691a      	ldr	r2, [r3, #16]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0210 	bic.w	r2, r2, #16
 8006112:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d108      	bne.n	800612e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699a      	ldr	r2, [r3, #24]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0204 	orr.w	r2, r2, #4
 800612a:	619a      	str	r2, [r3, #24]
 800612c:	e030      	b.n	8006190 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d02c      	beq.n	8006190 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	2b02      	cmp	r3, #2
 800613c:	d020      	beq.n	8006180 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	699a      	ldr	r2, [r3, #24]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800614c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f042 0210 	orr.w	r2, r2, #16
 800615c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	2b03      	cmp	r3, #3
 8006164:	d114      	bne.n	8006190 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699a      	ldr	r2, [r3, #24]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 0220 	orr.w	r2, r2, #32
 8006174:	619a      	str	r2, [r3, #24]
 8006176:	e00b      	b.n	8006190 <HAL_FDCAN_Init+0x234>
 8006178:	0800b144 	.word	0x0800b144
 800617c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0220 	orr.w	r2, r2, #32
 800618e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	3b01      	subs	r3, #1
 8006196:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	3b01      	subs	r3, #1
 800619e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80061a0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80061a8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80061b8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80061ba:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061c4:	d115      	bne.n	80061f2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d0:	3b01      	subs	r3, #1
 80061d2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80061d4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	3b01      	subs	r3, #1
 80061dc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80061de:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	3b01      	subs	r3, #1
 80061e8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80061ee:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80061f0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006218:	4413      	add	r3, r2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d011      	beq.n	8006242 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006226:	f023 0107 	bic.w	r1, r3, #7
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	3360      	adds	r3, #96	; 0x60
 8006232:	443b      	add	r3, r7
 8006234:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	430a      	orrs	r2, r1
 800623e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d011      	beq.n	800626e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006252:	f023 0107 	bic.w	r1, r3, #7
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	3360      	adds	r3, #96	; 0x60
 800625e:	443b      	add	r3, r7
 8006260:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006272:	2b00      	cmp	r3, #0
 8006274:	d012      	beq.n	800629c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800627e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	3360      	adds	r3, #96	; 0x60
 800628a:	443b      	add	r3, r7
 800628c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006290:	011a      	lsls	r2, r3, #4
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d012      	beq.n	80062ca <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80062ac:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	3360      	adds	r3, #96	; 0x60
 80062b8:	443b      	add	r3, r7
 80062ba:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80062be:	021a      	lsls	r2, r3, #8
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a11      	ldr	r2, [pc, #68]	; (8006314 <HAL_FDCAN_Init+0x3b8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d107      	bne.n	80062e4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	689a      	ldr	r2, [r3, #8]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f022 0203 	bic.w	r2, r2, #3
 80062e2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fdf9 	bl	8006ef4 <FDCAN_CalcultateRamBlockAddresses>
 8006302:	4603      	mov	r3, r0
 8006304:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006308:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800630c:	4618      	mov	r0, r3
 800630e:	3760      	adds	r7, #96	; 0x60
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	4000a000 	.word	0x4000a000

08006318 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006328:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800632a:	7bfb      	ldrb	r3, [r7, #15]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d002      	beq.n	8006336 <HAL_FDCAN_ConfigFilter+0x1e>
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	2b02      	cmp	r3, #2
 8006334:	d157      	bne.n	80063e6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d12b      	bne.n	8006396 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	2b07      	cmp	r3, #7
 8006344:	d10d      	bne.n	8006362 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8006352:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006358:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800635a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	e00e      	b.n	8006380 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800636e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8006376:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800637c:	4313      	orrs	r3, r2
 800637e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	e025      	b.n	80063e2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	075a      	lsls	r2, r3, #29
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	2b07      	cmp	r3, #7
 80063aa:	d103      	bne.n	80063b4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	613b      	str	r3, [r7, #16]
 80063b2:	e006      	b.n	80063c2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	079a      	lsls	r2, r3, #30
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	4313      	orrs	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	4413      	add	r3, r2
 80063ce:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	3304      	adds	r3, #4
 80063da:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	e008      	b.n	80063f8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063ec:	f043 0202 	orr.w	r2, r3, #2
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
  }
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	371c      	adds	r7, #28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b01      	cmp	r3, #1
 8006416:	d111      	bne.n	800643c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699a      	ldr	r2, [r3, #24]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0201 	bic.w	r2, r2, #1
 800642e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	e008      	b.n	800644e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006442:	f043 0204 	orr.w	r2, r3, #4
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
  }
}
 800644e:	4618      	mov	r0, r3
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b086      	sub	sp, #24
 800645e:	af00      	add	r7, sp, #0
 8006460:	60f8      	str	r0, [r7, #12]
 8006462:	60b9      	str	r1, [r7, #8]
 8006464:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b02      	cmp	r3, #2
 8006470:	d141      	bne.n	80064f6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800647a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d109      	bne.n	8006496 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006488:	f043 0220 	orr.w	r2, r3, #32
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e038      	b.n	8006508 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800649e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d009      	beq.n	80064ba <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e026      	b.n	8006508 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80064c2:	0c1b      	lsrs	r3, r3, #16
 80064c4:	f003 031f 	and.w	r3, r3, #31
 80064c8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	68b9      	ldr	r1, [r7, #8]
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 fe95 	bl	8007200 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2101      	movs	r1, #1
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	fa01 f202 	lsl.w	r2, r1, r2
 80064e2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80064e6:	2201      	movs	r2, #1
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	409a      	lsls	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	e008      	b.n	8006508 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064fc:	f043 0208 	orr.w	r2, r3, #8
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
  }
}
 8006508:	4618      	mov	r0, r3
 800650a:	3718      	adds	r7, #24
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006510:	b480      	push	{r7}
 8006512:	b08b      	sub	sp, #44	; 0x2c
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
 800651c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006528:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800652a:	7efb      	ldrb	r3, [r7, #27]
 800652c:	2b02      	cmp	r3, #2
 800652e:	f040 814b 	bne.w	80067c8 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2b40      	cmp	r3, #64	; 0x40
 8006536:	d14d      	bne.n	80065d4 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006540:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d109      	bne.n	800655c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800654e:	f043 0220 	orr.w	r2, r3, #32
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e13e      	b.n	80067da <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006568:	2b00      	cmp	r3, #0
 800656a:	d109      	bne.n	8006580 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006572:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e12c      	b.n	80067da <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006588:	0e1b      	lsrs	r3, r3, #24
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b01      	cmp	r3, #1
 8006590:	d10b      	bne.n	80065aa <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800659a:	0fdb      	lsrs	r3, r3, #31
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065a4:	d101      	bne.n	80065aa <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80065a6:	2301      	movs	r3, #1
 80065a8:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80065b2:	0a1b      	lsrs	r3, r3, #8
 80065b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065b8:	69fa      	ldr	r2, [r7, #28]
 80065ba:	4413      	add	r3, r2
 80065bc:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c6:	69f9      	ldr	r1, [r7, #28]
 80065c8:	fb01 f303 	mul.w	r3, r1, r3
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	627b      	str	r3, [r7, #36]	; 0x24
 80065d2:	e069      	b.n	80066a8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2b41      	cmp	r3, #65	; 0x41
 80065d8:	d14d      	bne.n	8006676 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d109      	bne.n	80065fe <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065f0:	f043 0220 	orr.w	r2, r3, #32
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e0ed      	b.n	80067da <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800660a:	2b00      	cmp	r3, #0
 800660c:	d109      	bne.n	8006622 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006614:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e0db      	b.n	80067da <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800662a:	0e1b      	lsrs	r3, r3, #24
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b01      	cmp	r3, #1
 8006632:	d10b      	bne.n	800664c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800663c:	0fdb      	lsrs	r3, r3, #31
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006646:	d101      	bne.n	800664c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006648:	2301      	movs	r3, #1
 800664a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006654:	0a1b      	lsrs	r3, r3, #8
 8006656:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800665a:	69fa      	ldr	r2, [r7, #28]
 800665c:	4413      	add	r3, r2
 800665e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006668:	69f9      	ldr	r1, [r7, #28]
 800666a:	fb01 f303 	mul.w	r3, r1, r3
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
 8006674:	e018      	b.n	80066a8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	429a      	cmp	r2, r3
 800667e:	d309      	bcc.n	8006694 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006686:	f043 0220 	orr.w	r2, r3, #32
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e0a2      	b.n	80067da <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669c:	68b9      	ldr	r1, [r7, #8]
 800669e:	fb01 f303 	mul.w	r3, r1, r3
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d107      	bne.n	80066cc <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	0c9b      	lsrs	r3, r3, #18
 80066c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	e005      	b.n	80066d8 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	3304      	adds	r3, #4
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	0e1b      	lsrs	r3, r3, #24
 800672a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	0fda      	lsrs	r2, r3, #31
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	3304      	adds	r3, #4
 8006740:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8006746:	2300      	movs	r3, #0
 8006748:	623b      	str	r3, [r7, #32]
 800674a:	e00a      	b.n	8006762 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	441a      	add	r2, r3
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	440b      	add	r3, r1
 8006758:	7812      	ldrb	r2, [r2, #0]
 800675a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	3301      	adds	r3, #1
 8006760:	623b      	str	r3, [r7, #32]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	0c1b      	lsrs	r3, r3, #16
 8006768:	4a1f      	ldr	r2, [pc, #124]	; (80067e8 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800676a:	5cd3      	ldrb	r3, [r2, r3]
 800676c:	461a      	mov	r2, r3
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	4293      	cmp	r3, r2
 8006772:	d3eb      	bcc.n	800674c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b40      	cmp	r3, #64	; 0x40
 8006778:	d105      	bne.n	8006786 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69fa      	ldr	r2, [r7, #28]
 8006780:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8006784:	e01e      	b.n	80067c4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2b41      	cmp	r3, #65	; 0x41
 800678a:	d105      	bne.n	8006798 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	69fa      	ldr	r2, [r7, #28]
 8006792:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8006796:	e015      	b.n	80067c4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2b1f      	cmp	r3, #31
 800679c:	d808      	bhi.n	80067b0 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2101      	movs	r1, #1
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	fa01 f202 	lsl.w	r2, r1, r2
 80067aa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80067ae:	e009      	b.n	80067c4 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f003 021f 	and.w	r2, r3, #31
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2101      	movs	r1, #1
 80067bc:	fa01 f202 	lsl.w	r2, r1, r2
 80067c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	e008      	b.n	80067da <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067ce:	f043 0208 	orr.w	r2, r3, #8
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
  }
}
 80067da:	4618      	mov	r0, r3
 80067dc:	372c      	adds	r7, #44	; 0x2c
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	0800b1a8 	.word	0x0800b1a8

080067ec <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80067fe:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006800:	7dfb      	ldrb	r3, [r7, #23]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d002      	beq.n	800680c <HAL_FDCAN_ActivateNotification+0x20>
 8006806:	7dfb      	ldrb	r3, [r7, #23]
 8006808:	2b02      	cmp	r3, #2
 800680a:	d155      	bne.n	80068b8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	4013      	ands	r3, r2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d108      	bne.n	800682c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f042 0201 	orr.w	r2, r2, #1
 8006828:	65da      	str	r2, [r3, #92]	; 0x5c
 800682a:	e014      	b.n	8006856 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	4013      	ands	r3, r2
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	429a      	cmp	r2, r3
 800683a:	d108      	bne.n	800684e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0202 	orr.w	r2, r2, #2
 800684a:	65da      	str	r2, [r3, #92]	; 0x5c
 800684c:	e003      	b.n	8006856 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2203      	movs	r2, #3
 8006854:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800685c:	2b00      	cmp	r3, #0
 800685e:	d009      	beq.n	8006874 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	430a      	orrs	r2, r1
 8006870:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687a:	2b00      	cmp	r3, #0
 800687c:	d009      	beq.n	8006892 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	430a      	orrs	r2, r1
 800688e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	4b0f      	ldr	r3, [pc, #60]	; (80068d8 <HAL_FDCAN_ActivateNotification+0xec>)
 800689c:	4013      	ands	r3, r2
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	6812      	ldr	r2, [r2, #0]
 80068a2:	430b      	orrs	r3, r1
 80068a4:	6553      	str	r3, [r2, #84]	; 0x54
 80068a6:	4b0d      	ldr	r3, [pc, #52]	; (80068dc <HAL_FDCAN_ActivateNotification+0xf0>)
 80068a8:	695a      	ldr	r2, [r3, #20]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	0f9b      	lsrs	r3, r3, #30
 80068ae:	490b      	ldr	r1, [pc, #44]	; (80068dc <HAL_FDCAN_ActivateNotification+0xf0>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	e008      	b.n	80068ca <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068be:	f043 0202 	orr.w	r2, r3, #2
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
  }
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	3fcfffff 	.word	0x3fcfffff
 80068dc:	4000a800 	.word	0x4000a800

080068e0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b096      	sub	sp, #88	; 0x58
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80068e8:	4b9a      	ldr	r3, [pc, #616]	; (8006b54 <HAL_FDCAN_IRQHandler+0x274>)
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	079b      	lsls	r3, r3, #30
 80068ee:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80068f0:	4b98      	ldr	r3, [pc, #608]	; (8006b54 <HAL_FDCAN_IRQHandler+0x274>)
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	079b      	lsls	r3, r3, #30
 80068f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068f8:	4013      	ands	r3, r2
 80068fa:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006902:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006906:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006910:	4013      	ands	r3, r2
 8006912:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006926:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006928:	4013      	ands	r3, r2
 800692a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006936:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006940:	4013      	ands	r3, r2
 8006942:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800694a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800694e:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006956:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006958:	4013      	ands	r3, r2
 800695a:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006962:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8006966:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006970:	4013      	ands	r3, r2
 8006972:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697a:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006982:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006986:	0a1b      	lsrs	r3, r3, #8
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b00      	cmp	r3, #0
 800698e:	d010      	beq.n	80069b2 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	0a1b      	lsrs	r3, r3, #8
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00a      	beq.n	80069b2 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069a4:	651a      	str	r2, [r3, #80]	; 0x50
 80069a6:	4b6b      	ldr	r3, [pc, #428]	; (8006b54 <HAL_FDCAN_IRQHandler+0x274>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fa54 	bl	8006e5a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80069b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b4:	0a9b      	lsrs	r3, r3, #10
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d01d      	beq.n	80069fa <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80069be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c0:	0a9b      	lsrs	r3, r3, #10
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d017      	beq.n	80069fa <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80069d2:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80069dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069de:	4013      	ands	r3, r2
 80069e0:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069ea:	651a      	str	r2, [r3, #80]	; 0x50
 80069ec:	4b59      	ldr	r3, [pc, #356]	; (8006b54 <HAL_FDCAN_IRQHandler+0x274>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80069f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fa07 	bl	8006e08 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80069fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00d      	beq.n	8006a1c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a06:	4b54      	ldr	r3, [pc, #336]	; (8006b58 <HAL_FDCAN_IRQHandler+0x278>)
 8006a08:	400b      	ands	r3, r1
 8006a0a:	6513      	str	r3, [r2, #80]	; 0x50
 8006a0c:	4a51      	ldr	r2, [pc, #324]	; (8006b54 <HAL_FDCAN_IRQHandler+0x274>)
 8006a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a10:	0f9b      	lsrs	r3, r3, #30
 8006a12:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8006a14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f9c0 	bl	8006d9c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00d      	beq.n	8006a3e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a28:	4b4b      	ldr	r3, [pc, #300]	; (8006b58 <HAL_FDCAN_IRQHandler+0x278>)
 8006a2a:	400b      	ands	r3, r1
 8006a2c:	6513      	str	r3, [r2, #80]	; 0x50
 8006a2e:	4a49      	ldr	r2, [pc, #292]	; (8006b54 <HAL_FDCAN_IRQHandler+0x274>)
 8006a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a32:	0f9b      	lsrs	r3, r3, #30
 8006a34:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006a36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f9ba 	bl	8006db2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00d      	beq.n	8006a60 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006a4a:	4b43      	ldr	r3, [pc, #268]	; (8006b58 <HAL_FDCAN_IRQHandler+0x278>)
 8006a4c:	400b      	ands	r3, r1
 8006a4e:	6513      	str	r3, [r2, #80]	; 0x50
 8006a50:	4a40      	ldr	r2, [pc, #256]	; (8006b54 <HAL_FDCAN_IRQHandler+0x274>)
 8006a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a54:	0f9b      	lsrs	r3, r3, #30
 8006a56:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006a58:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7f9 fc66 	bl	800032c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00d      	beq.n	8006a82 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006a6c:	4b3a      	ldr	r3, [pc, #232]	; (8006b58 <HAL_FDCAN_IRQHandler+0x278>)
 8006a6e:	400b      	ands	r3, r1
 8006a70:	6513      	str	r3, [r2, #80]	; 0x50
 8006a72:	4a38      	ldr	r2, [pc, #224]	; (8006b54 <HAL_FDCAN_IRQHandler+0x274>)
 8006a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a76:	0f9b      	lsrs	r3, r3, #30
 8006a78:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006a7a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f9a3 	bl	8006dc8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a84:	0adb      	lsrs	r3, r3, #11
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d010      	beq.n	8006ab0 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a90:	0adb      	lsrs	r3, r3, #11
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006aa2:	651a      	str	r2, [r3, #80]	; 0x50
 8006aa4:	4b2b      	ldr	r3, [pc, #172]	; (8006b54 <HAL_FDCAN_IRQHandler+0x274>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f997 	bl	8006dde <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8006ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab2:	0a5b      	lsrs	r3, r3, #9
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d01d      	beq.n	8006af8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abe:	0a5b      	lsrs	r3, r3, #9
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d017      	beq.n	8006af8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006ad0:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006adc:	4013      	ands	r3, r2
 8006ade:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ae8:	651a      	str	r2, [r3, #80]	; 0x50
 8006aea:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <HAL_FDCAN_IRQHandler+0x274>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006af0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f97d 	bl	8006df2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006afa:	0cdb      	lsrs	r3, r3, #19
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d010      	beq.n	8006b26 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b06:	0cdb      	lsrs	r3, r3, #19
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00a      	beq.n	8006b26 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006b18:	651a      	str	r2, [r3, #80]	; 0x50
 8006b1a:	4b0e      	ldr	r3, [pc, #56]	; (8006b54 <HAL_FDCAN_IRQHandler+0x274>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f97c 	bl	8006e1e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b28:	0c1b      	lsrs	r3, r3, #16
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d016      	beq.n	8006b60 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b34:	0c1b      	lsrs	r3, r3, #16
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d010      	beq.n	8006b60 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006b46:	651a      	str	r2, [r3, #80]	; 0x50
 8006b48:	4b02      	ldr	r3, [pc, #8]	; (8006b54 <HAL_FDCAN_IRQHandler+0x274>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	e004      	b.n	8006b5c <HAL_FDCAN_IRQHandler+0x27c>
 8006b52:	bf00      	nop
 8006b54:	4000a800 	.word	0x4000a800
 8006b58:	3fcfffff 	.word	0x3fcfffff
 8006b5c:	f000 f969 	bl	8006e32 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b62:	0c9b      	lsrs	r3, r3, #18
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d010      	beq.n	8006b8e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6e:	0c9b      	lsrs	r3, r3, #18
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00a      	beq.n	8006b8e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006b80:	651a      	str	r2, [r3, #80]	; 0x50
 8006b82:	4b83      	ldr	r3, [pc, #524]	; (8006d90 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f95c 	bl	8006e46 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b90:	0c5b      	lsrs	r3, r3, #17
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d015      	beq.n	8006bc6 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9c:	0c5b      	lsrs	r3, r3, #17
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00f      	beq.n	8006bc6 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006bae:	651a      	str	r2, [r3, #80]	; 0x50
 8006bb0:	4b77      	ldr	r3, [pc, #476]	; (8006d90 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00d      	beq.n	8006be8 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bd2:	4b70      	ldr	r3, [pc, #448]	; (8006d94 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006bd4:	400b      	ands	r3, r1
 8006bd6:	6513      	str	r3, [r2, #80]	; 0x50
 8006bd8:	4a6d      	ldr	r2, [pc, #436]	; (8006d90 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bdc:	0f9b      	lsrs	r3, r3, #30
 8006bde:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006be0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f94d 	bl	8006e82 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d011      	beq.n	8006c12 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bf4:	4b67      	ldr	r3, [pc, #412]	; (8006d94 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006bf6:	400b      	ands	r3, r1
 8006bf8:	6513      	str	r3, [r2, #80]	; 0x50
 8006bfa:	4a65      	ldr	r2, [pc, #404]	; (8006d90 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bfe:	0f9b      	lsrs	r3, r3, #30
 8006c00:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a60      	ldr	r2, [pc, #384]	; (8006d98 <HAL_FDCAN_IRQHandler+0x4b8>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	f040 80ac 	bne.w	8006d76 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f003 0303 	and.w	r3, r3, #3
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 80a4 	beq.w	8006d76 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	f003 030f 	and.w	r3, r3, #15
 8006c38:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c42:	4013      	ands	r3, r2
 8006c44:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c50:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006c68:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c72:	4013      	ands	r3, r2
 8006c74:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8006c80:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	6a3a      	ldr	r2, [r7, #32]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	6a1b      	ldr	r3, [r3, #32]
 8006c94:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8006c98:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	69fa      	ldr	r2, [r7, #28]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d007      	beq.n	8006ccc <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cc2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006cc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f8e6 	bl	8006e98 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8006ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d007      	beq.n	8006ce2 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cd8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8006cda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f8e6 	bl	8006eae <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	099b      	lsrs	r3, r3, #6
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d01a      	beq.n	8006d24 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	099b      	lsrs	r3, r3, #6
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d014      	beq.n	8006d24 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d00:	0c1b      	lsrs	r3, r3, #16
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d10:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	2240      	movs	r2, #64	; 0x40
 8006d18:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	6939      	ldr	r1, [r7, #16]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f8d0 	bl	8006ec4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d007      	beq.n	8006d3a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d30:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8006d32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f8d1 	bl	8006edc <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00b      	beq.n	8006d58 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	6a3a      	ldr	r2, [r7, #32]
 8006d46:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	431a      	orrs	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00b      	beq.n	8006d76 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	69fa      	ldr	r2, [r7, #28]
 8006d64:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d002      	beq.n	8006d86 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f874 	bl	8006e6e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006d86:	bf00      	nop
 8006d88:	3758      	adds	r7, #88	; 0x58
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	4000a800 	.word	0x4000a800
 8006d94:	3fcfffff 	.word	0x3fcfffff
 8006d98:	4000a000 	.word	0x4000a000

08006d9c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006dd2:	bf00      	nop
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006e12:	bf00      	nop
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8006e26:	bf00      	nop
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b083      	sub	sp, #12
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006e3a:	bf00      	nop
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006e4e:	bf00      	nop
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006e62:	bf00      	nop
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8006ea2:	bf00      	nop
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006ed0:	bf00      	nop
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8006ee6:	bf00      	nop
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
	...

08006ef4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f00:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006f0a:	4ba7      	ldr	r3, [pc, #668]	; (80071a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	0091      	lsls	r1, r2, #2
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	6812      	ldr	r2, [r2, #0]
 8006f16:	430b      	orrs	r3, r1
 8006f18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f24:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2c:	041a      	lsls	r2, r3, #16
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	4413      	add	r3, r2
 8006f40:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006f4a:	4b97      	ldr	r3, [pc, #604]	; (80071a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	0091      	lsls	r1, r2, #2
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6812      	ldr	r2, [r2, #0]
 8006f56:	430b      	orrs	r3, r1
 8006f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f64:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6c:	041a      	lsls	r2, r3, #16
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7c:	005b      	lsls	r3, r3, #1
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	4413      	add	r3, r2
 8006f82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006f8c:	4b86      	ldr	r3, [pc, #536]	; (80071a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f8e:	4013      	ands	r3, r2
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	0091      	lsls	r1, r2, #2
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	6812      	ldr	r2, [r2, #0]
 8006f98:	430b      	orrs	r3, r1
 8006f9a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006fa6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	041a      	lsls	r2, r3, #16
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006fc2:	fb02 f303 	mul.w	r3, r2, r3
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	4413      	add	r3, r2
 8006fca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006fd4:	4b74      	ldr	r3, [pc, #464]	; (80071a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	0091      	lsls	r1, r2, #2
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	6812      	ldr	r2, [r2, #0]
 8006fe0:	430b      	orrs	r3, r1
 8006fe2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fee:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ff6:	041a      	lsls	r2, r3, #16
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800700a:	fb02 f303 	mul.w	r3, r2, r3
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	4413      	add	r3, r2
 8007012:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800701c:	4b62      	ldr	r3, [pc, #392]	; (80071a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800701e:	4013      	ands	r3, r2
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	0091      	lsls	r1, r2, #2
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	6812      	ldr	r2, [r2, #0]
 8007028:	430b      	orrs	r3, r1
 800702a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007036:	fb02 f303 	mul.w	r3, r2, r3
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	4413      	add	r3, r2
 800703e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007048:	4b57      	ldr	r3, [pc, #348]	; (80071a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800704a:	4013      	ands	r3, r2
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	0091      	lsls	r1, r2, #2
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	6812      	ldr	r2, [r2, #0]
 8007054:	430b      	orrs	r3, r1
 8007056:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007062:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706a:	041a      	lsls	r2, r3, #16
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	430a      	orrs	r2, r1
 8007072:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	4413      	add	r3, r2
 8007080:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800708a:	4b47      	ldr	r3, [pc, #284]	; (80071a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800708c:	4013      	ands	r3, r2
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	0091      	lsls	r1, r2, #2
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	430b      	orrs	r3, r1
 8007098:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80070a4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ac:	041a      	lsls	r2, r3, #16
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80070c0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070c8:	061a      	lsls	r2, r3, #24
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070d8:	4b34      	ldr	r3, [pc, #208]	; (80071ac <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80070da:	4413      	add	r3, r2
 80070dc:	009a      	lsls	r2, r3, #2
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	441a      	add	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	441a      	add	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	6879      	ldr	r1, [r7, #4]
 800710c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800710e:	fb01 f303 	mul.w	r3, r1, r3
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	441a      	add	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007126:	fb01 f303 	mul.w	r3, r1, r3
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	441a      	add	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800713a:	6879      	ldr	r1, [r7, #4]
 800713c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800713e:	fb01 f303 	mul.w	r3, r1, r3
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	441a      	add	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	441a      	add	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800716a:	6879      	ldr	r1, [r7, #4]
 800716c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800716e:	fb01 f303 	mul.w	r3, r1, r3
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	441a      	add	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007186:	6879      	ldr	r1, [r7, #4]
 8007188:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800718a:	fb01 f303 	mul.w	r3, r1, r3
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	441a      	add	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800719e:	4a04      	ldr	r2, [pc, #16]	; (80071b0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d915      	bls.n	80071d0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80071a4:	e006      	b.n	80071b4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80071a6:	bf00      	nop
 80071a8:	ffff0003 	.word	0xffff0003
 80071ac:	10002b00 	.word	0x10002b00
 80071b0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071ba:	f043 0220 	orr.w	r2, r3, #32
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2203      	movs	r2, #3
 80071c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e010      	b.n	80071f2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071d4:	60fb      	str	r3, [r7, #12]
 80071d6:	e005      	b.n	80071e4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	3304      	adds	r3, #4
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d3f3      	bcc.n	80071d8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop

08007200 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8007200:	b480      	push	{r7}
 8007202:	b089      	sub	sp, #36	; 0x24
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10a      	bne.n	800722c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800721e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007226:	4313      	orrs	r3, r2
 8007228:	61fb      	str	r3, [r7, #28]
 800722a:	e00a      	b.n	8007242 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007234:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800723a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800723c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007240:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800724c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8007252:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8007258:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800725e:	4313      	orrs	r3, r2
 8007260:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	fb01 f303 	mul.w	r3, r1, r3
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	69fa      	ldr	r2, [r7, #28]
 800727c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	3304      	adds	r3, #4
 8007282:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	3304      	adds	r3, #4
 800728e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8007290:	2300      	movs	r3, #0
 8007292:	617b      	str	r3, [r7, #20]
 8007294:	e020      	b.n	80072d8 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	3303      	adds	r3, #3
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	4413      	add	r3, r2
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	3302      	adds	r3, #2
 80072a6:	6879      	ldr	r1, [r7, #4]
 80072a8:	440b      	add	r3, r1
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80072ae:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	3301      	adds	r3, #1
 80072b4:	6879      	ldr	r1, [r7, #4]
 80072b6:	440b      	add	r3, r1
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80072bc:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80072be:	6879      	ldr	r1, [r7, #4]
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	440a      	add	r2, r1
 80072c4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80072c6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	3304      	adds	r3, #4
 80072d0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	3304      	adds	r3, #4
 80072d6:	617b      	str	r3, [r7, #20]
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	0c1b      	lsrs	r3, r3, #16
 80072de:	4a06      	ldr	r2, [pc, #24]	; (80072f8 <FDCAN_CopyMessageToRAM+0xf8>)
 80072e0:	5cd3      	ldrb	r3, [r2, r3]
 80072e2:	461a      	mov	r2, r3
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d3d5      	bcc.n	8007296 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80072ea:	bf00      	nop
 80072ec:	bf00      	nop
 80072ee:	3724      	adds	r7, #36	; 0x24
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	0800b1a8 	.word	0x0800b1a8

080072fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b089      	sub	sp, #36	; 0x24
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007306:	2300      	movs	r3, #0
 8007308:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800730a:	4b86      	ldr	r3, [pc, #536]	; (8007524 <HAL_GPIO_Init+0x228>)
 800730c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800730e:	e18c      	b.n	800762a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	2101      	movs	r1, #1
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	fa01 f303 	lsl.w	r3, r1, r3
 800731c:	4013      	ands	r3, r2
 800731e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	f000 817e 	beq.w	8007624 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f003 0303 	and.w	r3, r3, #3
 8007330:	2b01      	cmp	r3, #1
 8007332:	d005      	beq.n	8007340 <HAL_GPIO_Init+0x44>
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f003 0303 	and.w	r3, r3, #3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d130      	bne.n	80073a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	2203      	movs	r2, #3
 800734c:	fa02 f303 	lsl.w	r3, r2, r3
 8007350:	43db      	mvns	r3, r3
 8007352:	69ba      	ldr	r2, [r7, #24]
 8007354:	4013      	ands	r3, r2
 8007356:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	68da      	ldr	r2, [r3, #12]
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	fa02 f303 	lsl.w	r3, r2, r3
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	4313      	orrs	r3, r2
 8007368:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007376:	2201      	movs	r2, #1
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	fa02 f303 	lsl.w	r3, r2, r3
 800737e:	43db      	mvns	r3, r3
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	4013      	ands	r3, r2
 8007384:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	091b      	lsrs	r3, r3, #4
 800738c:	f003 0201 	and.w	r2, r3, #1
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	fa02 f303 	lsl.w	r3, r2, r3
 8007396:	69ba      	ldr	r2, [r7, #24]
 8007398:	4313      	orrs	r3, r2
 800739a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	69ba      	ldr	r2, [r7, #24]
 80073a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f003 0303 	and.w	r3, r3, #3
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d017      	beq.n	80073de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	2203      	movs	r2, #3
 80073ba:	fa02 f303 	lsl.w	r3, r2, r3
 80073be:	43db      	mvns	r3, r3
 80073c0:	69ba      	ldr	r2, [r7, #24]
 80073c2:	4013      	ands	r3, r2
 80073c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	689a      	ldr	r2, [r3, #8]
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	fa02 f303 	lsl.w	r3, r2, r3
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d123      	bne.n	8007432 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	08da      	lsrs	r2, r3, #3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	3208      	adds	r2, #8
 80073f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	f003 0307 	and.w	r3, r3, #7
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	220f      	movs	r2, #15
 8007402:	fa02 f303 	lsl.w	r3, r2, r3
 8007406:	43db      	mvns	r3, r3
 8007408:	69ba      	ldr	r2, [r7, #24]
 800740a:	4013      	ands	r3, r2
 800740c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	691a      	ldr	r2, [r3, #16]
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	f003 0307 	and.w	r3, r3, #7
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	fa02 f303 	lsl.w	r3, r2, r3
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	4313      	orrs	r3, r2
 8007422:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	08da      	lsrs	r2, r3, #3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3208      	adds	r2, #8
 800742c:	69b9      	ldr	r1, [r7, #24]
 800742e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	005b      	lsls	r3, r3, #1
 800743c:	2203      	movs	r2, #3
 800743e:	fa02 f303 	lsl.w	r3, r2, r3
 8007442:	43db      	mvns	r3, r3
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	4013      	ands	r3, r2
 8007448:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f003 0203 	and.w	r2, r3, #3
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	fa02 f303 	lsl.w	r3, r2, r3
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	4313      	orrs	r3, r2
 800745e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	69ba      	ldr	r2, [r7, #24]
 8007464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800746e:	2b00      	cmp	r3, #0
 8007470:	f000 80d8 	beq.w	8007624 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007474:	4b2c      	ldr	r3, [pc, #176]	; (8007528 <HAL_GPIO_Init+0x22c>)
 8007476:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800747a:	4a2b      	ldr	r2, [pc, #172]	; (8007528 <HAL_GPIO_Init+0x22c>)
 800747c:	f043 0302 	orr.w	r3, r3, #2
 8007480:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007484:	4b28      	ldr	r3, [pc, #160]	; (8007528 <HAL_GPIO_Init+0x22c>)
 8007486:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800748a:	f003 0302 	and.w	r3, r3, #2
 800748e:	60fb      	str	r3, [r7, #12]
 8007490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007492:	4a26      	ldr	r2, [pc, #152]	; (800752c <HAL_GPIO_Init+0x230>)
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	089b      	lsrs	r3, r3, #2
 8007498:	3302      	adds	r3, #2
 800749a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800749e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	f003 0303 	and.w	r3, r3, #3
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	220f      	movs	r2, #15
 80074aa:	fa02 f303 	lsl.w	r3, r2, r3
 80074ae:	43db      	mvns	r3, r3
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	4013      	ands	r3, r2
 80074b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a1d      	ldr	r2, [pc, #116]	; (8007530 <HAL_GPIO_Init+0x234>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d04a      	beq.n	8007554 <HAL_GPIO_Init+0x258>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a1c      	ldr	r2, [pc, #112]	; (8007534 <HAL_GPIO_Init+0x238>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d02b      	beq.n	800751e <HAL_GPIO_Init+0x222>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a1b      	ldr	r2, [pc, #108]	; (8007538 <HAL_GPIO_Init+0x23c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d025      	beq.n	800751a <HAL_GPIO_Init+0x21e>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a1a      	ldr	r2, [pc, #104]	; (800753c <HAL_GPIO_Init+0x240>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d01f      	beq.n	8007516 <HAL_GPIO_Init+0x21a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a19      	ldr	r2, [pc, #100]	; (8007540 <HAL_GPIO_Init+0x244>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d019      	beq.n	8007512 <HAL_GPIO_Init+0x216>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a18      	ldr	r2, [pc, #96]	; (8007544 <HAL_GPIO_Init+0x248>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d013      	beq.n	800750e <HAL_GPIO_Init+0x212>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a17      	ldr	r2, [pc, #92]	; (8007548 <HAL_GPIO_Init+0x24c>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d00d      	beq.n	800750a <HAL_GPIO_Init+0x20e>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a16      	ldr	r2, [pc, #88]	; (800754c <HAL_GPIO_Init+0x250>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d007      	beq.n	8007506 <HAL_GPIO_Init+0x20a>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a15      	ldr	r2, [pc, #84]	; (8007550 <HAL_GPIO_Init+0x254>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d101      	bne.n	8007502 <HAL_GPIO_Init+0x206>
 80074fe:	2309      	movs	r3, #9
 8007500:	e029      	b.n	8007556 <HAL_GPIO_Init+0x25a>
 8007502:	230a      	movs	r3, #10
 8007504:	e027      	b.n	8007556 <HAL_GPIO_Init+0x25a>
 8007506:	2307      	movs	r3, #7
 8007508:	e025      	b.n	8007556 <HAL_GPIO_Init+0x25a>
 800750a:	2306      	movs	r3, #6
 800750c:	e023      	b.n	8007556 <HAL_GPIO_Init+0x25a>
 800750e:	2305      	movs	r3, #5
 8007510:	e021      	b.n	8007556 <HAL_GPIO_Init+0x25a>
 8007512:	2304      	movs	r3, #4
 8007514:	e01f      	b.n	8007556 <HAL_GPIO_Init+0x25a>
 8007516:	2303      	movs	r3, #3
 8007518:	e01d      	b.n	8007556 <HAL_GPIO_Init+0x25a>
 800751a:	2302      	movs	r3, #2
 800751c:	e01b      	b.n	8007556 <HAL_GPIO_Init+0x25a>
 800751e:	2301      	movs	r3, #1
 8007520:	e019      	b.n	8007556 <HAL_GPIO_Init+0x25a>
 8007522:	bf00      	nop
 8007524:	58000080 	.word	0x58000080
 8007528:	58024400 	.word	0x58024400
 800752c:	58000400 	.word	0x58000400
 8007530:	58020000 	.word	0x58020000
 8007534:	58020400 	.word	0x58020400
 8007538:	58020800 	.word	0x58020800
 800753c:	58020c00 	.word	0x58020c00
 8007540:	58021000 	.word	0x58021000
 8007544:	58021400 	.word	0x58021400
 8007548:	58021800 	.word	0x58021800
 800754c:	58021c00 	.word	0x58021c00
 8007550:	58022400 	.word	0x58022400
 8007554:	2300      	movs	r3, #0
 8007556:	69fa      	ldr	r2, [r7, #28]
 8007558:	f002 0203 	and.w	r2, r2, #3
 800755c:	0092      	lsls	r2, r2, #2
 800755e:	4093      	lsls	r3, r2
 8007560:	69ba      	ldr	r2, [r7, #24]
 8007562:	4313      	orrs	r3, r2
 8007564:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007566:	4938      	ldr	r1, [pc, #224]	; (8007648 <HAL_GPIO_Init+0x34c>)
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	089b      	lsrs	r3, r3, #2
 800756c:	3302      	adds	r3, #2
 800756e:	69ba      	ldr	r2, [r7, #24]
 8007570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	43db      	mvns	r3, r3
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	4013      	ands	r3, r2
 8007584:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007592:	69ba      	ldr	r2, [r7, #24]
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	4313      	orrs	r3, r2
 8007598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800759a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80075a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	43db      	mvns	r3, r3
 80075ae:	69ba      	ldr	r2, [r7, #24]
 80075b0:	4013      	ands	r3, r2
 80075b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d003      	beq.n	80075c8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80075c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	43db      	mvns	r3, r3
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	4013      	ands	r3, r2
 80075de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	43db      	mvns	r3, r3
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	4013      	ands	r3, r2
 8007608:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d003      	beq.n	800761e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	4313      	orrs	r3, r2
 800761c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	3301      	adds	r3, #1
 8007628:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	fa22 f303 	lsr.w	r3, r2, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	f47f ae6b 	bne.w	8007310 <HAL_GPIO_Init+0x14>
  }
}
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	3724      	adds	r7, #36	; 0x24
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	58000400 	.word	0x58000400

0800764c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	460b      	mov	r3, r1
 8007656:	807b      	strh	r3, [r7, #2]
 8007658:	4613      	mov	r3, r2
 800765a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800765c:	787b      	ldrb	r3, [r7, #1]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007662:	887a      	ldrh	r2, [r7, #2]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007668:	e003      	b.n	8007672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800766a:	887b      	ldrh	r3, [r7, #2]
 800766c:	041a      	lsls	r2, r3, #16
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	619a      	str	r2, [r3, #24]
}
 8007672:	bf00      	nop
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800767e:	b480      	push	{r7}
 8007680:	b085      	sub	sp, #20
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	460b      	mov	r3, r1
 8007688:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007690:	887a      	ldrh	r2, [r7, #2]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4013      	ands	r3, r2
 8007696:	041a      	lsls	r2, r3, #16
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	43d9      	mvns	r1, r3
 800769c:	887b      	ldrh	r3, [r7, #2]
 800769e:	400b      	ands	r3, r1
 80076a0:	431a      	orrs	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	619a      	str	r2, [r3, #24]
}
 80076a6:	bf00      	nop
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
	...

080076b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80076bc:	4b19      	ldr	r3, [pc, #100]	; (8007724 <HAL_PWREx_ConfigSupply+0x70>)
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	f003 0304 	and.w	r3, r3, #4
 80076c4:	2b04      	cmp	r3, #4
 80076c6:	d00a      	beq.n	80076de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80076c8:	4b16      	ldr	r3, [pc, #88]	; (8007724 <HAL_PWREx_ConfigSupply+0x70>)
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f003 0307 	and.w	r3, r3, #7
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d001      	beq.n	80076da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e01f      	b.n	800771a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	e01d      	b.n	800771a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80076de:	4b11      	ldr	r3, [pc, #68]	; (8007724 <HAL_PWREx_ConfigSupply+0x70>)
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f023 0207 	bic.w	r2, r3, #7
 80076e6:	490f      	ldr	r1, [pc, #60]	; (8007724 <HAL_PWREx_ConfigSupply+0x70>)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80076ee:	f7f9 fd4b 	bl	8001188 <HAL_GetTick>
 80076f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80076f4:	e009      	b.n	800770a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80076f6:	f7f9 fd47 	bl	8001188 <HAL_GetTick>
 80076fa:	4602      	mov	r2, r0
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007704:	d901      	bls.n	800770a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e007      	b.n	800771a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800770a:	4b06      	ldr	r3, [pc, #24]	; (8007724 <HAL_PWREx_ConfigSupply+0x70>)
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007716:	d1ee      	bne.n	80076f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	58024800 	.word	0x58024800

08007728 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b08c      	sub	sp, #48	; 0x30
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e39d      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b00      	cmp	r3, #0
 8007744:	f000 8087 	beq.w	8007856 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007748:	4b88      	ldr	r3, [pc, #544]	; (800796c <HAL_RCC_OscConfig+0x244>)
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007750:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007752:	4b86      	ldr	r3, [pc, #536]	; (800796c <HAL_RCC_OscConfig+0x244>)
 8007754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007756:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775a:	2b10      	cmp	r3, #16
 800775c:	d007      	beq.n	800776e <HAL_RCC_OscConfig+0x46>
 800775e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007760:	2b18      	cmp	r3, #24
 8007762:	d110      	bne.n	8007786 <HAL_RCC_OscConfig+0x5e>
 8007764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	2b02      	cmp	r3, #2
 800776c:	d10b      	bne.n	8007786 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800776e:	4b7f      	ldr	r3, [pc, #508]	; (800796c <HAL_RCC_OscConfig+0x244>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d06c      	beq.n	8007854 <HAL_RCC_OscConfig+0x12c>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d168      	bne.n	8007854 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e377      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800778e:	d106      	bne.n	800779e <HAL_RCC_OscConfig+0x76>
 8007790:	4b76      	ldr	r3, [pc, #472]	; (800796c <HAL_RCC_OscConfig+0x244>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a75      	ldr	r2, [pc, #468]	; (800796c <HAL_RCC_OscConfig+0x244>)
 8007796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800779a:	6013      	str	r3, [r2, #0]
 800779c:	e02e      	b.n	80077fc <HAL_RCC_OscConfig+0xd4>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10c      	bne.n	80077c0 <HAL_RCC_OscConfig+0x98>
 80077a6:	4b71      	ldr	r3, [pc, #452]	; (800796c <HAL_RCC_OscConfig+0x244>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a70      	ldr	r2, [pc, #448]	; (800796c <HAL_RCC_OscConfig+0x244>)
 80077ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077b0:	6013      	str	r3, [r2, #0]
 80077b2:	4b6e      	ldr	r3, [pc, #440]	; (800796c <HAL_RCC_OscConfig+0x244>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a6d      	ldr	r2, [pc, #436]	; (800796c <HAL_RCC_OscConfig+0x244>)
 80077b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077bc:	6013      	str	r3, [r2, #0]
 80077be:	e01d      	b.n	80077fc <HAL_RCC_OscConfig+0xd4>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077c8:	d10c      	bne.n	80077e4 <HAL_RCC_OscConfig+0xbc>
 80077ca:	4b68      	ldr	r3, [pc, #416]	; (800796c <HAL_RCC_OscConfig+0x244>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a67      	ldr	r2, [pc, #412]	; (800796c <HAL_RCC_OscConfig+0x244>)
 80077d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	4b65      	ldr	r3, [pc, #404]	; (800796c <HAL_RCC_OscConfig+0x244>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a64      	ldr	r2, [pc, #400]	; (800796c <HAL_RCC_OscConfig+0x244>)
 80077dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077e0:	6013      	str	r3, [r2, #0]
 80077e2:	e00b      	b.n	80077fc <HAL_RCC_OscConfig+0xd4>
 80077e4:	4b61      	ldr	r3, [pc, #388]	; (800796c <HAL_RCC_OscConfig+0x244>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a60      	ldr	r2, [pc, #384]	; (800796c <HAL_RCC_OscConfig+0x244>)
 80077ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077ee:	6013      	str	r3, [r2, #0]
 80077f0:	4b5e      	ldr	r3, [pc, #376]	; (800796c <HAL_RCC_OscConfig+0x244>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a5d      	ldr	r2, [pc, #372]	; (800796c <HAL_RCC_OscConfig+0x244>)
 80077f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d013      	beq.n	800782c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007804:	f7f9 fcc0 	bl	8001188 <HAL_GetTick>
 8007808:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800780a:	e008      	b.n	800781e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800780c:	f7f9 fcbc 	bl	8001188 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	2b64      	cmp	r3, #100	; 0x64
 8007818:	d901      	bls.n	800781e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e32b      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800781e:	4b53      	ldr	r3, [pc, #332]	; (800796c <HAL_RCC_OscConfig+0x244>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d0f0      	beq.n	800780c <HAL_RCC_OscConfig+0xe4>
 800782a:	e014      	b.n	8007856 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800782c:	f7f9 fcac 	bl	8001188 <HAL_GetTick>
 8007830:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007832:	e008      	b.n	8007846 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007834:	f7f9 fca8 	bl	8001188 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	2b64      	cmp	r3, #100	; 0x64
 8007840:	d901      	bls.n	8007846 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e317      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007846:	4b49      	ldr	r3, [pc, #292]	; (800796c <HAL_RCC_OscConfig+0x244>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1f0      	bne.n	8007834 <HAL_RCC_OscConfig+0x10c>
 8007852:	e000      	b.n	8007856 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0302 	and.w	r3, r3, #2
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 808c 	beq.w	800797c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007864:	4b41      	ldr	r3, [pc, #260]	; (800796c <HAL_RCC_OscConfig+0x244>)
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800786c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800786e:	4b3f      	ldr	r3, [pc, #252]	; (800796c <HAL_RCC_OscConfig+0x244>)
 8007870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007872:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d007      	beq.n	800788a <HAL_RCC_OscConfig+0x162>
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	2b18      	cmp	r3, #24
 800787e:	d137      	bne.n	80078f0 <HAL_RCC_OscConfig+0x1c8>
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	f003 0303 	and.w	r3, r3, #3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d132      	bne.n	80078f0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800788a:	4b38      	ldr	r3, [pc, #224]	; (800796c <HAL_RCC_OscConfig+0x244>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0304 	and.w	r3, r3, #4
 8007892:	2b00      	cmp	r3, #0
 8007894:	d005      	beq.n	80078a2 <HAL_RCC_OscConfig+0x17a>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e2e9      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80078a2:	4b32      	ldr	r3, [pc, #200]	; (800796c <HAL_RCC_OscConfig+0x244>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f023 0219 	bic.w	r2, r3, #25
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	492f      	ldr	r1, [pc, #188]	; (800796c <HAL_RCC_OscConfig+0x244>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80078b4:	f7f9 fc68 	bl	8001188 <HAL_GetTick>
 80078b8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078ba:	e008      	b.n	80078ce <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078bc:	f7f9 fc64 	bl	8001188 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d901      	bls.n	80078ce <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e2d3      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078ce:	4b27      	ldr	r3, [pc, #156]	; (800796c <HAL_RCC_OscConfig+0x244>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0304 	and.w	r3, r3, #4
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0f0      	beq.n	80078bc <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078da:	4b24      	ldr	r3, [pc, #144]	; (800796c <HAL_RCC_OscConfig+0x244>)
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	061b      	lsls	r3, r3, #24
 80078e8:	4920      	ldr	r1, [pc, #128]	; (800796c <HAL_RCC_OscConfig+0x244>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078ee:	e045      	b.n	800797c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d026      	beq.n	8007946 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80078f8:	4b1c      	ldr	r3, [pc, #112]	; (800796c <HAL_RCC_OscConfig+0x244>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f023 0219 	bic.w	r2, r3, #25
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	4919      	ldr	r1, [pc, #100]	; (800796c <HAL_RCC_OscConfig+0x244>)
 8007906:	4313      	orrs	r3, r2
 8007908:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800790a:	f7f9 fc3d 	bl	8001188 <HAL_GetTick>
 800790e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007910:	e008      	b.n	8007924 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007912:	f7f9 fc39 	bl	8001188 <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	2b02      	cmp	r3, #2
 800791e:	d901      	bls.n	8007924 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e2a8      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007924:	4b11      	ldr	r3, [pc, #68]	; (800796c <HAL_RCC_OscConfig+0x244>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0304 	and.w	r3, r3, #4
 800792c:	2b00      	cmp	r3, #0
 800792e:	d0f0      	beq.n	8007912 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007930:	4b0e      	ldr	r3, [pc, #56]	; (800796c <HAL_RCC_OscConfig+0x244>)
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	061b      	lsls	r3, r3, #24
 800793e:	490b      	ldr	r1, [pc, #44]	; (800796c <HAL_RCC_OscConfig+0x244>)
 8007940:	4313      	orrs	r3, r2
 8007942:	604b      	str	r3, [r1, #4]
 8007944:	e01a      	b.n	800797c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007946:	4b09      	ldr	r3, [pc, #36]	; (800796c <HAL_RCC_OscConfig+0x244>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a08      	ldr	r2, [pc, #32]	; (800796c <HAL_RCC_OscConfig+0x244>)
 800794c:	f023 0301 	bic.w	r3, r3, #1
 8007950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007952:	f7f9 fc19 	bl	8001188 <HAL_GetTick>
 8007956:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007958:	e00a      	b.n	8007970 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800795a:	f7f9 fc15 	bl	8001188 <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	2b02      	cmp	r3, #2
 8007966:	d903      	bls.n	8007970 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e284      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
 800796c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007970:	4b96      	ldr	r3, [pc, #600]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0304 	and.w	r3, r3, #4
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1ee      	bne.n	800795a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0310 	and.w	r3, r3, #16
 8007984:	2b00      	cmp	r3, #0
 8007986:	d06a      	beq.n	8007a5e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007988:	4b90      	ldr	r3, [pc, #576]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007990:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007992:	4b8e      	ldr	r3, [pc, #568]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007996:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	2b08      	cmp	r3, #8
 800799c:	d007      	beq.n	80079ae <HAL_RCC_OscConfig+0x286>
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	2b18      	cmp	r3, #24
 80079a2:	d11b      	bne.n	80079dc <HAL_RCC_OscConfig+0x2b4>
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f003 0303 	and.w	r3, r3, #3
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d116      	bne.n	80079dc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079ae:	4b87      	ldr	r3, [pc, #540]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d005      	beq.n	80079c6 <HAL_RCC_OscConfig+0x29e>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	2b80      	cmp	r3, #128	; 0x80
 80079c0:	d001      	beq.n	80079c6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e257      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80079c6:	4b81      	ldr	r3, [pc, #516]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	061b      	lsls	r3, r3, #24
 80079d4:	497d      	ldr	r1, [pc, #500]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079da:	e040      	b.n	8007a5e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d023      	beq.n	8007a2c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80079e4:	4b79      	ldr	r3, [pc, #484]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a78      	ldr	r2, [pc, #480]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 80079ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f0:	f7f9 fbca 	bl	8001188 <HAL_GetTick>
 80079f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079f6:	e008      	b.n	8007a0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80079f8:	f7f9 fbc6 	bl	8001188 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d901      	bls.n	8007a0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e235      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a0a:	4b70      	ldr	r3, [pc, #448]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0f0      	beq.n	80079f8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a16:	4b6d      	ldr	r3, [pc, #436]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	061b      	lsls	r3, r3, #24
 8007a24:	4969      	ldr	r1, [pc, #420]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60cb      	str	r3, [r1, #12]
 8007a2a:	e018      	b.n	8007a5e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007a2c:	4b67      	ldr	r3, [pc, #412]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a66      	ldr	r2, [pc, #408]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a38:	f7f9 fba6 	bl	8001188 <HAL_GetTick>
 8007a3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a3e:	e008      	b.n	8007a52 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007a40:	f7f9 fba2 	bl	8001188 <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d901      	bls.n	8007a52 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e211      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a52:	4b5e      	ldr	r3, [pc, #376]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1f0      	bne.n	8007a40 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0308 	and.w	r3, r3, #8
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d036      	beq.n	8007ad8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d019      	beq.n	8007aa6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a72:	4b56      	ldr	r3, [pc, #344]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a76:	4a55      	ldr	r2, [pc, #340]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007a78:	f043 0301 	orr.w	r3, r3, #1
 8007a7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a7e:	f7f9 fb83 	bl	8001188 <HAL_GetTick>
 8007a82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a84:	e008      	b.n	8007a98 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a86:	f7f9 fb7f 	bl	8001188 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d901      	bls.n	8007a98 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e1ee      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a98:	4b4c      	ldr	r3, [pc, #304]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d0f0      	beq.n	8007a86 <HAL_RCC_OscConfig+0x35e>
 8007aa4:	e018      	b.n	8007ad8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007aa6:	4b49      	ldr	r3, [pc, #292]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aaa:	4a48      	ldr	r2, [pc, #288]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007aac:	f023 0301 	bic.w	r3, r3, #1
 8007ab0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ab2:	f7f9 fb69 	bl	8001188 <HAL_GetTick>
 8007ab6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ab8:	e008      	b.n	8007acc <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007aba:	f7f9 fb65 	bl	8001188 <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d901      	bls.n	8007acc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e1d4      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007acc:	4b3f      	ldr	r3, [pc, #252]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1f0      	bne.n	8007aba <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0320 	and.w	r3, r3, #32
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d036      	beq.n	8007b52 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d019      	beq.n	8007b20 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007aec:	4b37      	ldr	r3, [pc, #220]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a36      	ldr	r2, [pc, #216]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007af2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007af6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007af8:	f7f9 fb46 	bl	8001188 <HAL_GetTick>
 8007afc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007afe:	e008      	b.n	8007b12 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007b00:	f7f9 fb42 	bl	8001188 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e1b1      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007b12:	4b2e      	ldr	r3, [pc, #184]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d0f0      	beq.n	8007b00 <HAL_RCC_OscConfig+0x3d8>
 8007b1e:	e018      	b.n	8007b52 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007b20:	4b2a      	ldr	r3, [pc, #168]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a29      	ldr	r2, [pc, #164]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007b26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007b2c:	f7f9 fb2c 	bl	8001188 <HAL_GetTick>
 8007b30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b32:	e008      	b.n	8007b46 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007b34:	f7f9 fb28 	bl	8001188 <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d901      	bls.n	8007b46 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e197      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b46:	4b21      	ldr	r3, [pc, #132]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1f0      	bne.n	8007b34 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0304 	and.w	r3, r3, #4
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 8086 	beq.w	8007c6c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007b60:	4b1b      	ldr	r3, [pc, #108]	; (8007bd0 <HAL_RCC_OscConfig+0x4a8>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a1a      	ldr	r2, [pc, #104]	; (8007bd0 <HAL_RCC_OscConfig+0x4a8>)
 8007b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b6c:	f7f9 fb0c 	bl	8001188 <HAL_GetTick>
 8007b70:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b72:	e008      	b.n	8007b86 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007b74:	f7f9 fb08 	bl	8001188 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b64      	cmp	r3, #100	; 0x64
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e177      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b86:	4b12      	ldr	r3, [pc, #72]	; (8007bd0 <HAL_RCC_OscConfig+0x4a8>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0f0      	beq.n	8007b74 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d106      	bne.n	8007ba8 <HAL_RCC_OscConfig+0x480>
 8007b9a:	4b0c      	ldr	r3, [pc, #48]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b9e:	4a0b      	ldr	r2, [pc, #44]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007ba0:	f043 0301 	orr.w	r3, r3, #1
 8007ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ba6:	e032      	b.n	8007c0e <HAL_RCC_OscConfig+0x4e6>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d111      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x4ac>
 8007bb0:	4b06      	ldr	r3, [pc, #24]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bb4:	4a05      	ldr	r2, [pc, #20]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007bb6:	f023 0301 	bic.w	r3, r3, #1
 8007bba:	6713      	str	r3, [r2, #112]	; 0x70
 8007bbc:	4b03      	ldr	r3, [pc, #12]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc0:	4a02      	ldr	r2, [pc, #8]	; (8007bcc <HAL_RCC_OscConfig+0x4a4>)
 8007bc2:	f023 0304 	bic.w	r3, r3, #4
 8007bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8007bc8:	e021      	b.n	8007c0e <HAL_RCC_OscConfig+0x4e6>
 8007bca:	bf00      	nop
 8007bcc:	58024400 	.word	0x58024400
 8007bd0:	58024800 	.word	0x58024800
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	2b05      	cmp	r3, #5
 8007bda:	d10c      	bne.n	8007bf6 <HAL_RCC_OscConfig+0x4ce>
 8007bdc:	4b83      	ldr	r3, [pc, #524]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be0:	4a82      	ldr	r2, [pc, #520]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007be2:	f043 0304 	orr.w	r3, r3, #4
 8007be6:	6713      	str	r3, [r2, #112]	; 0x70
 8007be8:	4b80      	ldr	r3, [pc, #512]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bec:	4a7f      	ldr	r2, [pc, #508]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007bee:	f043 0301 	orr.w	r3, r3, #1
 8007bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8007bf4:	e00b      	b.n	8007c0e <HAL_RCC_OscConfig+0x4e6>
 8007bf6:	4b7d      	ldr	r3, [pc, #500]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfa:	4a7c      	ldr	r2, [pc, #496]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007bfc:	f023 0301 	bic.w	r3, r3, #1
 8007c00:	6713      	str	r3, [r2, #112]	; 0x70
 8007c02:	4b7a      	ldr	r3, [pc, #488]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c06:	4a79      	ldr	r2, [pc, #484]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007c08:	f023 0304 	bic.w	r3, r3, #4
 8007c0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d015      	beq.n	8007c42 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c16:	f7f9 fab7 	bl	8001188 <HAL_GetTick>
 8007c1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c1c:	e00a      	b.n	8007c34 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c1e:	f7f9 fab3 	bl	8001188 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d901      	bls.n	8007c34 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e120      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c34:	4b6d      	ldr	r3, [pc, #436]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c38:	f003 0302 	and.w	r3, r3, #2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d0ee      	beq.n	8007c1e <HAL_RCC_OscConfig+0x4f6>
 8007c40:	e014      	b.n	8007c6c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c42:	f7f9 faa1 	bl	8001188 <HAL_GetTick>
 8007c46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c48:	e00a      	b.n	8007c60 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c4a:	f7f9 fa9d 	bl	8001188 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e10a      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c60:	4b62      	ldr	r3, [pc, #392]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1ee      	bne.n	8007c4a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 80ff 	beq.w	8007e74 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007c76:	4b5d      	ldr	r3, [pc, #372]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c7e:	2b18      	cmp	r3, #24
 8007c80:	f000 80ba 	beq.w	8007df8 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	f040 8095 	bne.w	8007db8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c8e:	4b57      	ldr	r3, [pc, #348]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a56      	ldr	r2, [pc, #344]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007c94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c9a:	f7f9 fa75 	bl	8001188 <HAL_GetTick>
 8007c9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ca0:	e008      	b.n	8007cb4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ca2:	f7f9 fa71 	bl	8001188 <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d901      	bls.n	8007cb4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e0e0      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cb4:	4b4d      	ldr	r3, [pc, #308]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1f0      	bne.n	8007ca2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007cc0:	4b4a      	ldr	r3, [pc, #296]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007cc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cc4:	4b4a      	ldr	r3, [pc, #296]	; (8007df0 <HAL_RCC_OscConfig+0x6c8>)
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007cd0:	0112      	lsls	r2, r2, #4
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	4945      	ldr	r1, [pc, #276]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	628b      	str	r3, [r1, #40]	; 0x28
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	025b      	lsls	r3, r3, #9
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	041b      	lsls	r3, r3, #16
 8007cf8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007cfc:	431a      	orrs	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d02:	3b01      	subs	r3, #1
 8007d04:	061b      	lsls	r3, r3, #24
 8007d06:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d0a:	4938      	ldr	r1, [pc, #224]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007d10:	4b36      	ldr	r3, [pc, #216]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d14:	4a35      	ldr	r2, [pc, #212]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007d16:	f023 0301 	bic.w	r3, r3, #1
 8007d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007d1c:	4b33      	ldr	r3, [pc, #204]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d20:	4b34      	ldr	r3, [pc, #208]	; (8007df4 <HAL_RCC_OscConfig+0x6cc>)
 8007d22:	4013      	ands	r3, r2
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007d28:	00d2      	lsls	r2, r2, #3
 8007d2a:	4930      	ldr	r1, [pc, #192]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007d30:	4b2e      	ldr	r3, [pc, #184]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d34:	f023 020c 	bic.w	r2, r3, #12
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3c:	492b      	ldr	r1, [pc, #172]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007d42:	4b2a      	ldr	r3, [pc, #168]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d46:	f023 0202 	bic.w	r2, r3, #2
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d4e:	4927      	ldr	r1, [pc, #156]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007d54:	4b25      	ldr	r3, [pc, #148]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	4a24      	ldr	r2, [pc, #144]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d60:	4b22      	ldr	r3, [pc, #136]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d64:	4a21      	ldr	r2, [pc, #132]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007d6c:	4b1f      	ldr	r3, [pc, #124]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d70:	4a1e      	ldr	r2, [pc, #120]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007d72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007d78:	4b1c      	ldr	r3, [pc, #112]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	4a1b      	ldr	r2, [pc, #108]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007d7e:	f043 0301 	orr.w	r3, r3, #1
 8007d82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d84:	4b19      	ldr	r3, [pc, #100]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a18      	ldr	r2, [pc, #96]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d90:	f7f9 f9fa 	bl	8001188 <HAL_GetTick>
 8007d94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d96:	e008      	b.n	8007daa <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d98:	f7f9 f9f6 	bl	8001188 <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d901      	bls.n	8007daa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e065      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007daa:	4b10      	ldr	r3, [pc, #64]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d0f0      	beq.n	8007d98 <HAL_RCC_OscConfig+0x670>
 8007db6:	e05d      	b.n	8007e74 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007db8:	4b0c      	ldr	r3, [pc, #48]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a0b      	ldr	r2, [pc, #44]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc4:	f7f9 f9e0 	bl	8001188 <HAL_GetTick>
 8007dc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007dca:	e008      	b.n	8007dde <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dcc:	f7f9 f9dc 	bl	8001188 <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d901      	bls.n	8007dde <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e04b      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007dde:	4b03      	ldr	r3, [pc, #12]	; (8007dec <HAL_RCC_OscConfig+0x6c4>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1f0      	bne.n	8007dcc <HAL_RCC_OscConfig+0x6a4>
 8007dea:	e043      	b.n	8007e74 <HAL_RCC_OscConfig+0x74c>
 8007dec:	58024400 	.word	0x58024400
 8007df0:	fffffc0c 	.word	0xfffffc0c
 8007df4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007df8:	4b21      	ldr	r3, [pc, #132]	; (8007e80 <HAL_RCC_OscConfig+0x758>)
 8007dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007dfe:	4b20      	ldr	r3, [pc, #128]	; (8007e80 <HAL_RCC_OscConfig+0x758>)
 8007e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e02:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d031      	beq.n	8007e70 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	f003 0203 	and.w	r2, r3, #3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d12a      	bne.n	8007e70 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	091b      	lsrs	r3, r3, #4
 8007e1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d122      	bne.n	8007e70 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e34:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d11a      	bne.n	8007e70 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	0a5b      	lsrs	r3, r3, #9
 8007e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e46:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d111      	bne.n	8007e70 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	0c1b      	lsrs	r3, r3, #16
 8007e50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e58:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d108      	bne.n	8007e70 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	0e1b      	lsrs	r3, r3, #24
 8007e62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d001      	beq.n	8007e74 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e000      	b.n	8007e76 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3730      	adds	r7, #48	; 0x30
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	58024400 	.word	0x58024400

08007e84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e19c      	b.n	80081d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e98:	4b8a      	ldr	r3, [pc, #552]	; (80080c4 <HAL_RCC_ClockConfig+0x240>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 030f 	and.w	r3, r3, #15
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d910      	bls.n	8007ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ea6:	4b87      	ldr	r3, [pc, #540]	; (80080c4 <HAL_RCC_ClockConfig+0x240>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f023 020f 	bic.w	r2, r3, #15
 8007eae:	4985      	ldr	r1, [pc, #532]	; (80080c4 <HAL_RCC_ClockConfig+0x240>)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eb6:	4b83      	ldr	r3, [pc, #524]	; (80080c4 <HAL_RCC_ClockConfig+0x240>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 030f 	and.w	r3, r3, #15
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d001      	beq.n	8007ec8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e184      	b.n	80081d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d010      	beq.n	8007ef6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	691a      	ldr	r2, [r3, #16]
 8007ed8:	4b7b      	ldr	r3, [pc, #492]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d908      	bls.n	8007ef6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ee4:	4b78      	ldr	r3, [pc, #480]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	4975      	ldr	r1, [pc, #468]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0308 	and.w	r3, r3, #8
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d010      	beq.n	8007f24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	695a      	ldr	r2, [r3, #20]
 8007f06:	4b70      	ldr	r3, [pc, #448]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d908      	bls.n	8007f24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f12:	4b6d      	ldr	r3, [pc, #436]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	496a      	ldr	r1, [pc, #424]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8007f20:	4313      	orrs	r3, r2
 8007f22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 0310 	and.w	r3, r3, #16
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d010      	beq.n	8007f52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	699a      	ldr	r2, [r3, #24]
 8007f34:	4b64      	ldr	r3, [pc, #400]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d908      	bls.n	8007f52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f40:	4b61      	ldr	r3, [pc, #388]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8007f42:	69db      	ldr	r3, [r3, #28]
 8007f44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	495e      	ldr	r1, [pc, #376]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0320 	and.w	r3, r3, #32
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d010      	beq.n	8007f80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	69da      	ldr	r2, [r3, #28]
 8007f62:	4b59      	ldr	r3, [pc, #356]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d908      	bls.n	8007f80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007f6e:	4b56      	ldr	r3, [pc, #344]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8007f70:	6a1b      	ldr	r3, [r3, #32]
 8007f72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	69db      	ldr	r3, [r3, #28]
 8007f7a:	4953      	ldr	r1, [pc, #332]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 0302 	and.w	r3, r3, #2
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d010      	beq.n	8007fae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	68da      	ldr	r2, [r3, #12]
 8007f90:	4b4d      	ldr	r3, [pc, #308]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8007f92:	699b      	ldr	r3, [r3, #24]
 8007f94:	f003 030f 	and.w	r3, r3, #15
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d908      	bls.n	8007fae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f9c:	4b4a      	ldr	r3, [pc, #296]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	f023 020f 	bic.w	r2, r3, #15
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	4947      	ldr	r1, [pc, #284]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d055      	beq.n	8008066 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007fba:	4b43      	ldr	r3, [pc, #268]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	4940      	ldr	r1, [pc, #256]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d107      	bne.n	8007fe4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fd4:	4b3c      	ldr	r3, [pc, #240]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d121      	bne.n	8008024 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e0f6      	b.n	80081d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	2b03      	cmp	r3, #3
 8007fea:	d107      	bne.n	8007ffc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007fec:	4b36      	ldr	r3, [pc, #216]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d115      	bne.n	8008024 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e0ea      	b.n	80081d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d107      	bne.n	8008014 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008004:	4b30      	ldr	r3, [pc, #192]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800c:	2b00      	cmp	r3, #0
 800800e:	d109      	bne.n	8008024 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e0de      	b.n	80081d2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008014:	4b2c      	ldr	r3, [pc, #176]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0304 	and.w	r3, r3, #4
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e0d6      	b.n	80081d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008024:	4b28      	ldr	r3, [pc, #160]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	f023 0207 	bic.w	r2, r3, #7
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	4925      	ldr	r1, [pc, #148]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8008032:	4313      	orrs	r3, r2
 8008034:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008036:	f7f9 f8a7 	bl	8001188 <HAL_GetTick>
 800803a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800803c:	e00a      	b.n	8008054 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800803e:	f7f9 f8a3 	bl	8001188 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	f241 3288 	movw	r2, #5000	; 0x1388
 800804c:	4293      	cmp	r3, r2
 800804e:	d901      	bls.n	8008054 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e0be      	b.n	80081d2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008054:	4b1c      	ldr	r3, [pc, #112]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	00db      	lsls	r3, r3, #3
 8008062:	429a      	cmp	r2, r3
 8008064:	d1eb      	bne.n	800803e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0302 	and.w	r3, r3, #2
 800806e:	2b00      	cmp	r3, #0
 8008070:	d010      	beq.n	8008094 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	68da      	ldr	r2, [r3, #12]
 8008076:	4b14      	ldr	r3, [pc, #80]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	f003 030f 	and.w	r3, r3, #15
 800807e:	429a      	cmp	r2, r3
 8008080:	d208      	bcs.n	8008094 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008082:	4b11      	ldr	r3, [pc, #68]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	f023 020f 	bic.w	r2, r3, #15
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	490e      	ldr	r1, [pc, #56]	; (80080c8 <HAL_RCC_ClockConfig+0x244>)
 8008090:	4313      	orrs	r3, r2
 8008092:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008094:	4b0b      	ldr	r3, [pc, #44]	; (80080c4 <HAL_RCC_ClockConfig+0x240>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 030f 	and.w	r3, r3, #15
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d214      	bcs.n	80080cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080a2:	4b08      	ldr	r3, [pc, #32]	; (80080c4 <HAL_RCC_ClockConfig+0x240>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f023 020f 	bic.w	r2, r3, #15
 80080aa:	4906      	ldr	r1, [pc, #24]	; (80080c4 <HAL_RCC_ClockConfig+0x240>)
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080b2:	4b04      	ldr	r3, [pc, #16]	; (80080c4 <HAL_RCC_ClockConfig+0x240>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 030f 	and.w	r3, r3, #15
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d005      	beq.n	80080cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e086      	b.n	80081d2 <HAL_RCC_ClockConfig+0x34e>
 80080c4:	52002000 	.word	0x52002000
 80080c8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d010      	beq.n	80080fa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	691a      	ldr	r2, [r3, #16]
 80080dc:	4b3f      	ldr	r3, [pc, #252]	; (80081dc <HAL_RCC_ClockConfig+0x358>)
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d208      	bcs.n	80080fa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80080e8:	4b3c      	ldr	r3, [pc, #240]	; (80081dc <HAL_RCC_ClockConfig+0x358>)
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	4939      	ldr	r1, [pc, #228]	; (80081dc <HAL_RCC_ClockConfig+0x358>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0308 	and.w	r3, r3, #8
 8008102:	2b00      	cmp	r3, #0
 8008104:	d010      	beq.n	8008128 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	695a      	ldr	r2, [r3, #20]
 800810a:	4b34      	ldr	r3, [pc, #208]	; (80081dc <HAL_RCC_ClockConfig+0x358>)
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008112:	429a      	cmp	r2, r3
 8008114:	d208      	bcs.n	8008128 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008116:	4b31      	ldr	r3, [pc, #196]	; (80081dc <HAL_RCC_ClockConfig+0x358>)
 8008118:	69db      	ldr	r3, [r3, #28]
 800811a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	492e      	ldr	r1, [pc, #184]	; (80081dc <HAL_RCC_ClockConfig+0x358>)
 8008124:	4313      	orrs	r3, r2
 8008126:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0310 	and.w	r3, r3, #16
 8008130:	2b00      	cmp	r3, #0
 8008132:	d010      	beq.n	8008156 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	699a      	ldr	r2, [r3, #24]
 8008138:	4b28      	ldr	r3, [pc, #160]	; (80081dc <HAL_RCC_ClockConfig+0x358>)
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008140:	429a      	cmp	r2, r3
 8008142:	d208      	bcs.n	8008156 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008144:	4b25      	ldr	r3, [pc, #148]	; (80081dc <HAL_RCC_ClockConfig+0x358>)
 8008146:	69db      	ldr	r3, [r3, #28]
 8008148:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	4922      	ldr	r1, [pc, #136]	; (80081dc <HAL_RCC_ClockConfig+0x358>)
 8008152:	4313      	orrs	r3, r2
 8008154:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 0320 	and.w	r3, r3, #32
 800815e:	2b00      	cmp	r3, #0
 8008160:	d010      	beq.n	8008184 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	69da      	ldr	r2, [r3, #28]
 8008166:	4b1d      	ldr	r3, [pc, #116]	; (80081dc <HAL_RCC_ClockConfig+0x358>)
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800816e:	429a      	cmp	r2, r3
 8008170:	d208      	bcs.n	8008184 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008172:	4b1a      	ldr	r3, [pc, #104]	; (80081dc <HAL_RCC_ClockConfig+0x358>)
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	4917      	ldr	r1, [pc, #92]	; (80081dc <HAL_RCC_ClockConfig+0x358>)
 8008180:	4313      	orrs	r3, r2
 8008182:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008184:	f000 f834 	bl	80081f0 <HAL_RCC_GetSysClockFreq>
 8008188:	4602      	mov	r2, r0
 800818a:	4b14      	ldr	r3, [pc, #80]	; (80081dc <HAL_RCC_ClockConfig+0x358>)
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	0a1b      	lsrs	r3, r3, #8
 8008190:	f003 030f 	and.w	r3, r3, #15
 8008194:	4912      	ldr	r1, [pc, #72]	; (80081e0 <HAL_RCC_ClockConfig+0x35c>)
 8008196:	5ccb      	ldrb	r3, [r1, r3]
 8008198:	f003 031f 	and.w	r3, r3, #31
 800819c:	fa22 f303 	lsr.w	r3, r2, r3
 80081a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80081a2:	4b0e      	ldr	r3, [pc, #56]	; (80081dc <HAL_RCC_ClockConfig+0x358>)
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	f003 030f 	and.w	r3, r3, #15
 80081aa:	4a0d      	ldr	r2, [pc, #52]	; (80081e0 <HAL_RCC_ClockConfig+0x35c>)
 80081ac:	5cd3      	ldrb	r3, [r2, r3]
 80081ae:	f003 031f 	and.w	r3, r3, #31
 80081b2:	693a      	ldr	r2, [r7, #16]
 80081b4:	fa22 f303 	lsr.w	r3, r2, r3
 80081b8:	4a0a      	ldr	r2, [pc, #40]	; (80081e4 <HAL_RCC_ClockConfig+0x360>)
 80081ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80081bc:	4a0a      	ldr	r2, [pc, #40]	; (80081e8 <HAL_RCC_ClockConfig+0x364>)
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80081c2:	4b0a      	ldr	r3, [pc, #40]	; (80081ec <HAL_RCC_ClockConfig+0x368>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7f8 ff94 	bl	80010f4 <HAL_InitTick>
 80081cc:	4603      	mov	r3, r0
 80081ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	58024400 	.word	0x58024400
 80081e0:	0800b190 	.word	0x0800b190
 80081e4:	24000004 	.word	0x24000004
 80081e8:	24000000 	.word	0x24000000
 80081ec:	24000008 	.word	0x24000008

080081f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b089      	sub	sp, #36	; 0x24
 80081f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081f6:	4bb3      	ldr	r3, [pc, #716]	; (80084c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081fe:	2b18      	cmp	r3, #24
 8008200:	f200 8155 	bhi.w	80084ae <HAL_RCC_GetSysClockFreq+0x2be>
 8008204:	a201      	add	r2, pc, #4	; (adr r2, 800820c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820a:	bf00      	nop
 800820c:	08008271 	.word	0x08008271
 8008210:	080084af 	.word	0x080084af
 8008214:	080084af 	.word	0x080084af
 8008218:	080084af 	.word	0x080084af
 800821c:	080084af 	.word	0x080084af
 8008220:	080084af 	.word	0x080084af
 8008224:	080084af 	.word	0x080084af
 8008228:	080084af 	.word	0x080084af
 800822c:	08008297 	.word	0x08008297
 8008230:	080084af 	.word	0x080084af
 8008234:	080084af 	.word	0x080084af
 8008238:	080084af 	.word	0x080084af
 800823c:	080084af 	.word	0x080084af
 8008240:	080084af 	.word	0x080084af
 8008244:	080084af 	.word	0x080084af
 8008248:	080084af 	.word	0x080084af
 800824c:	0800829d 	.word	0x0800829d
 8008250:	080084af 	.word	0x080084af
 8008254:	080084af 	.word	0x080084af
 8008258:	080084af 	.word	0x080084af
 800825c:	080084af 	.word	0x080084af
 8008260:	080084af 	.word	0x080084af
 8008264:	080084af 	.word	0x080084af
 8008268:	080084af 	.word	0x080084af
 800826c:	080082a3 	.word	0x080082a3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008270:	4b94      	ldr	r3, [pc, #592]	; (80084c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0320 	and.w	r3, r3, #32
 8008278:	2b00      	cmp	r3, #0
 800827a:	d009      	beq.n	8008290 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800827c:	4b91      	ldr	r3, [pc, #580]	; (80084c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	08db      	lsrs	r3, r3, #3
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	4a90      	ldr	r2, [pc, #576]	; (80084c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008288:	fa22 f303 	lsr.w	r3, r2, r3
 800828c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800828e:	e111      	b.n	80084b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008290:	4b8d      	ldr	r3, [pc, #564]	; (80084c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008292:	61bb      	str	r3, [r7, #24]
    break;
 8008294:	e10e      	b.n	80084b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008296:	4b8d      	ldr	r3, [pc, #564]	; (80084cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008298:	61bb      	str	r3, [r7, #24]
    break;
 800829a:	e10b      	b.n	80084b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800829c:	4b8c      	ldr	r3, [pc, #560]	; (80084d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800829e:	61bb      	str	r3, [r7, #24]
    break;
 80082a0:	e108      	b.n	80084b4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082a2:	4b88      	ldr	r3, [pc, #544]	; (80084c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a6:	f003 0303 	and.w	r3, r3, #3
 80082aa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80082ac:	4b85      	ldr	r3, [pc, #532]	; (80084c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b0:	091b      	lsrs	r3, r3, #4
 80082b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082b6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80082b8:	4b82      	ldr	r3, [pc, #520]	; (80084c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80082c2:	4b80      	ldr	r3, [pc, #512]	; (80084c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c6:	08db      	lsrs	r3, r3, #3
 80082c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	fb02 f303 	mul.w	r3, r2, r3
 80082d2:	ee07 3a90 	vmov	s15, r3
 80082d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082da:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 80e1 	beq.w	80084a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	f000 8083 	beq.w	80083f4 <HAL_RCC_GetSysClockFreq+0x204>
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	f200 80a1 	bhi.w	8008438 <HAL_RCC_GetSysClockFreq+0x248>
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <HAL_RCC_GetSysClockFreq+0x114>
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d056      	beq.n	80083b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008302:	e099      	b.n	8008438 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008304:	4b6f      	ldr	r3, [pc, #444]	; (80084c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0320 	and.w	r3, r3, #32
 800830c:	2b00      	cmp	r3, #0
 800830e:	d02d      	beq.n	800836c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008310:	4b6c      	ldr	r3, [pc, #432]	; (80084c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	08db      	lsrs	r3, r3, #3
 8008316:	f003 0303 	and.w	r3, r3, #3
 800831a:	4a6b      	ldr	r2, [pc, #428]	; (80084c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800831c:	fa22 f303 	lsr.w	r3, r2, r3
 8008320:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	ee07 3a90 	vmov	s15, r3
 8008328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	ee07 3a90 	vmov	s15, r3
 8008332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800833a:	4b62      	ldr	r3, [pc, #392]	; (80084c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800833c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008342:	ee07 3a90 	vmov	s15, r3
 8008346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800834a:	ed97 6a02 	vldr	s12, [r7, #8]
 800834e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80084d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800835a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800835e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008366:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800836a:	e087      	b.n	800847c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	ee07 3a90 	vmov	s15, r3
 8008372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008376:	eddf 6a58 	vldr	s13, [pc, #352]	; 80084d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800837a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800837e:	4b51      	ldr	r3, [pc, #324]	; (80084c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008386:	ee07 3a90 	vmov	s15, r3
 800838a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800838e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008392:	eddf 5a50 	vldr	s11, [pc, #320]	; 80084d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800839a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800839e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083ae:	e065      	b.n	800847c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	ee07 3a90 	vmov	s15, r3
 80083b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ba:	eddf 6a48 	vldr	s13, [pc, #288]	; 80084dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80083be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083c2:	4b40      	ldr	r3, [pc, #256]	; (80084c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ca:	ee07 3a90 	vmov	s15, r3
 80083ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80083d6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80084d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083f2:	e043      	b.n	800847c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083fe:	eddf 6a38 	vldr	s13, [pc, #224]	; 80084e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008406:	4b2f      	ldr	r3, [pc, #188]	; (80084c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800840e:	ee07 3a90 	vmov	s15, r3
 8008412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008416:	ed97 6a02 	vldr	s12, [r7, #8]
 800841a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80084d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800841e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800842a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800842e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008436:	e021      	b.n	800847c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	ee07 3a90 	vmov	s15, r3
 800843e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008442:	eddf 6a26 	vldr	s13, [pc, #152]	; 80084dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800844a:	4b1e      	ldr	r3, [pc, #120]	; (80084c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800844c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008452:	ee07 3a90 	vmov	s15, r3
 8008456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800845a:	ed97 6a02 	vldr	s12, [r7, #8]
 800845e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80084d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800846a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800846e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800847a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800847c:	4b11      	ldr	r3, [pc, #68]	; (80084c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800847e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008480:	0a5b      	lsrs	r3, r3, #9
 8008482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008486:	3301      	adds	r3, #1
 8008488:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	ee07 3a90 	vmov	s15, r3
 8008490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008494:	edd7 6a07 	vldr	s13, [r7, #28]
 8008498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800849c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084a0:	ee17 3a90 	vmov	r3, s15
 80084a4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80084a6:	e005      	b.n	80084b4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	61bb      	str	r3, [r7, #24]
    break;
 80084ac:	e002      	b.n	80084b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80084ae:	4b07      	ldr	r3, [pc, #28]	; (80084cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80084b0:	61bb      	str	r3, [r7, #24]
    break;
 80084b2:	bf00      	nop
  }

  return sysclockfreq;
 80084b4:	69bb      	ldr	r3, [r7, #24]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3724      	adds	r7, #36	; 0x24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	58024400 	.word	0x58024400
 80084c8:	03d09000 	.word	0x03d09000
 80084cc:	003d0900 	.word	0x003d0900
 80084d0:	007a1200 	.word	0x007a1200
 80084d4:	46000000 	.word	0x46000000
 80084d8:	4c742400 	.word	0x4c742400
 80084dc:	4a742400 	.word	0x4a742400
 80084e0:	4af42400 	.word	0x4af42400

080084e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80084ea:	f7ff fe81 	bl	80081f0 <HAL_RCC_GetSysClockFreq>
 80084ee:	4602      	mov	r2, r0
 80084f0:	4b10      	ldr	r3, [pc, #64]	; (8008534 <HAL_RCC_GetHCLKFreq+0x50>)
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	0a1b      	lsrs	r3, r3, #8
 80084f6:	f003 030f 	and.w	r3, r3, #15
 80084fa:	490f      	ldr	r1, [pc, #60]	; (8008538 <HAL_RCC_GetHCLKFreq+0x54>)
 80084fc:	5ccb      	ldrb	r3, [r1, r3]
 80084fe:	f003 031f 	and.w	r3, r3, #31
 8008502:	fa22 f303 	lsr.w	r3, r2, r3
 8008506:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008508:	4b0a      	ldr	r3, [pc, #40]	; (8008534 <HAL_RCC_GetHCLKFreq+0x50>)
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	f003 030f 	and.w	r3, r3, #15
 8008510:	4a09      	ldr	r2, [pc, #36]	; (8008538 <HAL_RCC_GetHCLKFreq+0x54>)
 8008512:	5cd3      	ldrb	r3, [r2, r3]
 8008514:	f003 031f 	and.w	r3, r3, #31
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	fa22 f303 	lsr.w	r3, r2, r3
 800851e:	4a07      	ldr	r2, [pc, #28]	; (800853c <HAL_RCC_GetHCLKFreq+0x58>)
 8008520:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008522:	4a07      	ldr	r2, [pc, #28]	; (8008540 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008528:	4b04      	ldr	r3, [pc, #16]	; (800853c <HAL_RCC_GetHCLKFreq+0x58>)
 800852a:	681b      	ldr	r3, [r3, #0]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	58024400 	.word	0x58024400
 8008538:	0800b190 	.word	0x0800b190
 800853c:	24000004 	.word	0x24000004
 8008540:	24000000 	.word	0x24000000

08008544 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800854c:	2300      	movs	r3, #0
 800854e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008550:	2300      	movs	r3, #0
 8008552:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800855c:	2b00      	cmp	r3, #0
 800855e:	d03f      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008564:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008568:	d02a      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800856a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800856e:	d824      	bhi.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008570:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008574:	d018      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800857a:	d81e      	bhi.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800857c:	2b00      	cmp	r3, #0
 800857e:	d003      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008584:	d007      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008586:	e018      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008588:	4ba4      	ldr	r3, [pc, #656]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800858a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858c:	4aa3      	ldr	r2, [pc, #652]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800858e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008592:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008594:	e015      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	3304      	adds	r3, #4
 800859a:	2102      	movs	r1, #2
 800859c:	4618      	mov	r0, r3
 800859e:	f001 ff01 	bl	800a3a4 <RCCEx_PLL2_Config>
 80085a2:	4603      	mov	r3, r0
 80085a4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80085a6:	e00c      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3324      	adds	r3, #36	; 0x24
 80085ac:	2102      	movs	r1, #2
 80085ae:	4618      	mov	r0, r3
 80085b0:	f001 ffaa 	bl	800a508 <RCCEx_PLL3_Config>
 80085b4:	4603      	mov	r3, r0
 80085b6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80085b8:	e003      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	75fb      	strb	r3, [r7, #23]
      break;
 80085be:	e000      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80085c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d109      	bne.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80085c8:	4b94      	ldr	r3, [pc, #592]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80085ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085d4:	4991      	ldr	r1, [pc, #580]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	650b      	str	r3, [r1, #80]	; 0x50
 80085da:	e001      	b.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085dc:	7dfb      	ldrb	r3, [r7, #23]
 80085de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d03d      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f0:	2b04      	cmp	r3, #4
 80085f2:	d826      	bhi.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80085f4:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80085f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fa:	bf00      	nop
 80085fc:	08008611 	.word	0x08008611
 8008600:	0800861f 	.word	0x0800861f
 8008604:	08008631 	.word	0x08008631
 8008608:	08008649 	.word	0x08008649
 800860c:	08008649 	.word	0x08008649
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008610:	4b82      	ldr	r3, [pc, #520]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008614:	4a81      	ldr	r2, [pc, #516]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800861a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800861c:	e015      	b.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	3304      	adds	r3, #4
 8008622:	2100      	movs	r1, #0
 8008624:	4618      	mov	r0, r3
 8008626:	f001 febd 	bl	800a3a4 <RCCEx_PLL2_Config>
 800862a:	4603      	mov	r3, r0
 800862c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800862e:	e00c      	b.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	3324      	adds	r3, #36	; 0x24
 8008634:	2100      	movs	r1, #0
 8008636:	4618      	mov	r0, r3
 8008638:	f001 ff66 	bl	800a508 <RCCEx_PLL3_Config>
 800863c:	4603      	mov	r3, r0
 800863e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008640:	e003      	b.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	75fb      	strb	r3, [r7, #23]
      break;
 8008646:	e000      	b.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800864a:	7dfb      	ldrb	r3, [r7, #23]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d109      	bne.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008650:	4b72      	ldr	r3, [pc, #456]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008654:	f023 0207 	bic.w	r2, r3, #7
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865c:	496f      	ldr	r1, [pc, #444]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800865e:	4313      	orrs	r3, r2
 8008660:	650b      	str	r3, [r1, #80]	; 0x50
 8008662:	e001      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008664:	7dfb      	ldrb	r3, [r7, #23]
 8008666:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008670:	2b00      	cmp	r3, #0
 8008672:	d051      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800867a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800867e:	d036      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008680:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008684:	d830      	bhi.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008686:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800868a:	d032      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800868c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008690:	d82a      	bhi.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008692:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008696:	d02e      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008698:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800869c:	d824      	bhi.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800869e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086a2:	d018      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80086a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086a8:	d81e      	bhi.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80086ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086b2:	d007      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80086b4:	e018      	b.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086b6:	4b59      	ldr	r3, [pc, #356]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80086b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ba:	4a58      	ldr	r2, [pc, #352]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80086bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80086c2:	e019      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	3304      	adds	r3, #4
 80086c8:	2100      	movs	r1, #0
 80086ca:	4618      	mov	r0, r3
 80086cc:	f001 fe6a 	bl	800a3a4 <RCCEx_PLL2_Config>
 80086d0:	4603      	mov	r3, r0
 80086d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80086d4:	e010      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	3324      	adds	r3, #36	; 0x24
 80086da:	2100      	movs	r1, #0
 80086dc:	4618      	mov	r0, r3
 80086de:	f001 ff13 	bl	800a508 <RCCEx_PLL3_Config>
 80086e2:	4603      	mov	r3, r0
 80086e4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80086e6:	e007      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	75fb      	strb	r3, [r7, #23]
      break;
 80086ec:	e004      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80086ee:	bf00      	nop
 80086f0:	e002      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80086f2:	bf00      	nop
 80086f4:	e000      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80086f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086f8:	7dfb      	ldrb	r3, [r7, #23]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10a      	bne.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80086fe:	4b47      	ldr	r3, [pc, #284]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008702:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800870c:	4943      	ldr	r1, [pc, #268]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800870e:	4313      	orrs	r3, r2
 8008710:	658b      	str	r3, [r1, #88]	; 0x58
 8008712:	e001      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008714:	7dfb      	ldrb	r3, [r7, #23]
 8008716:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008720:	2b00      	cmp	r3, #0
 8008722:	d051      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800872a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800872e:	d036      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008730:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008734:	d830      	bhi.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008736:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800873a:	d032      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800873c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008740:	d82a      	bhi.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008742:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008746:	d02e      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008748:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800874c:	d824      	bhi.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800874e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008752:	d018      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008754:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008758:	d81e      	bhi.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800875e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008762:	d007      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008764:	e018      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008766:	4b2d      	ldr	r3, [pc, #180]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876a:	4a2c      	ldr	r2, [pc, #176]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800876c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008770:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008772:	e019      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	3304      	adds	r3, #4
 8008778:	2100      	movs	r1, #0
 800877a:	4618      	mov	r0, r3
 800877c:	f001 fe12 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008780:	4603      	mov	r3, r0
 8008782:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008784:	e010      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	3324      	adds	r3, #36	; 0x24
 800878a:	2100      	movs	r1, #0
 800878c:	4618      	mov	r0, r3
 800878e:	f001 febb 	bl	800a508 <RCCEx_PLL3_Config>
 8008792:	4603      	mov	r3, r0
 8008794:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008796:	e007      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	75fb      	strb	r3, [r7, #23]
      break;
 800879c:	e004      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800879e:	bf00      	nop
 80087a0:	e002      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80087a2:	bf00      	nop
 80087a4:	e000      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80087a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087a8:	7dfb      	ldrb	r3, [r7, #23]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10a      	bne.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80087ae:	4b1b      	ldr	r3, [pc, #108]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80087b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80087bc:	4917      	ldr	r1, [pc, #92]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	658b      	str	r3, [r1, #88]	; 0x58
 80087c2:	e001      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
 80087c6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d035      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087d8:	2b30      	cmp	r3, #48	; 0x30
 80087da:	d01c      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80087dc:	2b30      	cmp	r3, #48	; 0x30
 80087de:	d817      	bhi.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80087e0:	2b20      	cmp	r3, #32
 80087e2:	d00c      	beq.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80087e4:	2b20      	cmp	r3, #32
 80087e6:	d813      	bhi.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d019      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80087ec:	2b10      	cmp	r3, #16
 80087ee:	d10f      	bne.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087f0:	4b0a      	ldr	r3, [pc, #40]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80087f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f4:	4a09      	ldr	r2, [pc, #36]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80087f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80087fc:	e011      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	3304      	adds	r3, #4
 8008802:	2102      	movs	r1, #2
 8008804:	4618      	mov	r0, r3
 8008806:	f001 fdcd 	bl	800a3a4 <RCCEx_PLL2_Config>
 800880a:	4603      	mov	r3, r0
 800880c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800880e:	e008      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	75fb      	strb	r3, [r7, #23]
      break;
 8008814:	e005      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8008816:	bf00      	nop
 8008818:	e003      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800881a:	bf00      	nop
 800881c:	58024400 	.word	0x58024400
      break;
 8008820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008822:	7dfb      	ldrb	r3, [r7, #23]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d109      	bne.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008828:	4ba3      	ldr	r3, [pc, #652]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800882a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800882c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008834:	49a0      	ldr	r1, [pc, #640]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008836:	4313      	orrs	r3, r2
 8008838:	64cb      	str	r3, [r1, #76]	; 0x4c
 800883a:	e001      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800883c:	7dfb      	ldrb	r3, [r7, #23]
 800883e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d047      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008850:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008854:	d030      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008856:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800885a:	d82a      	bhi.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800885c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008860:	d02c      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008862:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008866:	d824      	bhi.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800886c:	d018      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800886e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008872:	d81e      	bhi.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008874:	2b00      	cmp	r3, #0
 8008876:	d003      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800887c:	d007      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800887e:	e018      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008880:	4b8d      	ldr	r3, [pc, #564]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008884:	4a8c      	ldr	r2, [pc, #560]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800888a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800888c:	e017      	b.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3304      	adds	r3, #4
 8008892:	2100      	movs	r1, #0
 8008894:	4618      	mov	r0, r3
 8008896:	f001 fd85 	bl	800a3a4 <RCCEx_PLL2_Config>
 800889a:	4603      	mov	r3, r0
 800889c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800889e:	e00e      	b.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	3324      	adds	r3, #36	; 0x24
 80088a4:	2100      	movs	r1, #0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f001 fe2e 	bl	800a508 <RCCEx_PLL3_Config>
 80088ac:	4603      	mov	r3, r0
 80088ae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80088b0:	e005      	b.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	75fb      	strb	r3, [r7, #23]
      break;
 80088b6:	e002      	b.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80088b8:	bf00      	nop
 80088ba:	e000      	b.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80088bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d109      	bne.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80088c4:	4b7c      	ldr	r3, [pc, #496]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80088c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d0:	4979      	ldr	r1, [pc, #484]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80088d2:	4313      	orrs	r3, r2
 80088d4:	650b      	str	r3, [r1, #80]	; 0x50
 80088d6:	e001      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d8:	7dfb      	ldrb	r3, [r7, #23]
 80088da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d049      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088f0:	d02e      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80088f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088f6:	d828      	bhi.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80088f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088fc:	d02a      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80088fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008902:	d822      	bhi.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008904:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008908:	d026      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800890a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800890e:	d81c      	bhi.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008910:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008914:	d010      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008916:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800891a:	d816      	bhi.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800891c:	2b00      	cmp	r3, #0
 800891e:	d01d      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008924:	d111      	bne.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	3304      	adds	r3, #4
 800892a:	2101      	movs	r1, #1
 800892c:	4618      	mov	r0, r3
 800892e:	f001 fd39 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008932:	4603      	mov	r3, r0
 8008934:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008936:	e012      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3324      	adds	r3, #36	; 0x24
 800893c:	2101      	movs	r1, #1
 800893e:	4618      	mov	r0, r3
 8008940:	f001 fde2 	bl	800a508 <RCCEx_PLL3_Config>
 8008944:	4603      	mov	r3, r0
 8008946:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008948:	e009      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	75fb      	strb	r3, [r7, #23]
      break;
 800894e:	e006      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008950:	bf00      	nop
 8008952:	e004      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008954:	bf00      	nop
 8008956:	e002      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008958:	bf00      	nop
 800895a:	e000      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800895c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800895e:	7dfb      	ldrb	r3, [r7, #23]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d109      	bne.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008964:	4b54      	ldr	r3, [pc, #336]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008968:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008970:	4951      	ldr	r1, [pc, #324]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008972:	4313      	orrs	r3, r2
 8008974:	650b      	str	r3, [r1, #80]	; 0x50
 8008976:	e001      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008978:	7dfb      	ldrb	r3, [r7, #23]
 800897a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d04b      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800898e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008992:	d02e      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008994:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008998:	d828      	bhi.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800899a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800899e:	d02a      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80089a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089a4:	d822      	bhi.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80089a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089aa:	d026      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80089ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089b0:	d81c      	bhi.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80089b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089b6:	d010      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x496>
 80089b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089bc:	d816      	bhi.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d01d      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80089c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089c6:	d111      	bne.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	3304      	adds	r3, #4
 80089cc:	2101      	movs	r1, #1
 80089ce:	4618      	mov	r0, r3
 80089d0:	f001 fce8 	bl	800a3a4 <RCCEx_PLL2_Config>
 80089d4:	4603      	mov	r3, r0
 80089d6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80089d8:	e012      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	3324      	adds	r3, #36	; 0x24
 80089de:	2101      	movs	r1, #1
 80089e0:	4618      	mov	r0, r3
 80089e2:	f001 fd91 	bl	800a508 <RCCEx_PLL3_Config>
 80089e6:	4603      	mov	r3, r0
 80089e8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80089ea:	e009      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	75fb      	strb	r3, [r7, #23]
      break;
 80089f0:	e006      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80089f2:	bf00      	nop
 80089f4:	e004      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80089f6:	bf00      	nop
 80089f8:	e002      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80089fa:	bf00      	nop
 80089fc:	e000      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80089fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a00:	7dfb      	ldrb	r3, [r7, #23]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10a      	bne.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008a06:	4b2c      	ldr	r3, [pc, #176]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a0a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008a14:	4928      	ldr	r1, [pc, #160]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	658b      	str	r3, [r1, #88]	; 0x58
 8008a1a:	e001      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a1c:	7dfb      	ldrb	r3, [r7, #23]
 8008a1e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d02f      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a34:	d00e      	beq.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8008a36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a3a:	d814      	bhi.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d015      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008a40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a44:	d10f      	bne.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a46:	4b1c      	ldr	r3, [pc, #112]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4a:	4a1b      	ldr	r2, [pc, #108]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008a52:	e00c      	b.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	3304      	adds	r3, #4
 8008a58:	2101      	movs	r1, #1
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f001 fca2 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008a60:	4603      	mov	r3, r0
 8008a62:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008a64:	e003      	b.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	75fb      	strb	r3, [r7, #23]
      break;
 8008a6a:	e000      	b.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8008a6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a6e:	7dfb      	ldrb	r3, [r7, #23]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d109      	bne.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008a74:	4b10      	ldr	r3, [pc, #64]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a78:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a80:	490d      	ldr	r1, [pc, #52]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	650b      	str	r3, [r1, #80]	; 0x50
 8008a86:	e001      	b.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
 8008a8a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d034      	beq.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a9c:	2b03      	cmp	r3, #3
 8008a9e:	d81d      	bhi.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x598>
 8008aa0:	a201      	add	r2, pc, #4	; (adr r2, 8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8008aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa6:	bf00      	nop
 8008aa8:	08008ae3 	.word	0x08008ae3
 8008aac:	08008abd 	.word	0x08008abd
 8008ab0:	08008acb 	.word	0x08008acb
 8008ab4:	08008ae3 	.word	0x08008ae3
 8008ab8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008abc:	4bb1      	ldr	r3, [pc, #708]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac0:	4ab0      	ldr	r2, [pc, #704]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ac6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008ac8:	e00c      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	3304      	adds	r3, #4
 8008ace:	2102      	movs	r1, #2
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f001 fc67 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008ada:	e003      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	75fb      	strb	r3, [r7, #23]
      break;
 8008ae0:	e000      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8008ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ae4:	7dfb      	ldrb	r3, [r7, #23]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d109      	bne.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008aea:	4ba6      	ldr	r3, [pc, #664]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aee:	f023 0203 	bic.w	r2, r3, #3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af6:	49a3      	ldr	r1, [pc, #652]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008afc:	e001      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008afe:	7dfb      	ldrb	r3, [r7, #23]
 8008b00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 8086 	beq.w	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b10:	4b9d      	ldr	r3, [pc, #628]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a9c      	ldr	r2, [pc, #624]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b1c:	f7f8 fb34 	bl	8001188 <HAL_GetTick>
 8008b20:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b22:	e009      	b.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b24:	f7f8 fb30 	bl	8001188 <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2b64      	cmp	r3, #100	; 0x64
 8008b30:	d902      	bls.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	75fb      	strb	r3, [r7, #23]
        break;
 8008b36:	e005      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b38:	4b93      	ldr	r3, [pc, #588]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d0ef      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8008b44:	7dfb      	ldrb	r3, [r7, #23]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d166      	bne.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008b4a:	4b8e      	ldr	r3, [pc, #568]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b54:	4053      	eors	r3, r2
 8008b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d013      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b5e:	4b89      	ldr	r3, [pc, #548]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b66:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b68:	4b86      	ldr	r3, [pc, #536]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b6c:	4a85      	ldr	r2, [pc, #532]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b72:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b74:	4b83      	ldr	r3, [pc, #524]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b78:	4a82      	ldr	r2, [pc, #520]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b7e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008b80:	4a80      	ldr	r2, [pc, #512]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b90:	d115      	bne.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b92:	f7f8 faf9 	bl	8001188 <HAL_GetTick>
 8008b96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b98:	e00b      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b9a:	f7f8 faf5 	bl	8001188 <HAL_GetTick>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d902      	bls.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8008bac:	2303      	movs	r3, #3
 8008bae:	75fb      	strb	r3, [r7, #23]
            break;
 8008bb0:	e005      	b.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bb2:	4b74      	ldr	r3, [pc, #464]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb6:	f003 0302 	and.w	r3, r3, #2
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d0ed      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d126      	bne.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bd2:	d10d      	bne.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8008bd4:	4b6b      	ldr	r3, [pc, #428]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008be2:	0919      	lsrs	r1, r3, #4
 8008be4:	4b69      	ldr	r3, [pc, #420]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008be6:	400b      	ands	r3, r1
 8008be8:	4966      	ldr	r1, [pc, #408]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	610b      	str	r3, [r1, #16]
 8008bee:	e005      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8008bf0:	4b64      	ldr	r3, [pc, #400]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	4a63      	ldr	r2, [pc, #396]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008bf6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008bfa:	6113      	str	r3, [r2, #16]
 8008bfc:	4b61      	ldr	r3, [pc, #388]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008bfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c0a:	495e      	ldr	r1, [pc, #376]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	670b      	str	r3, [r1, #112]	; 0x70
 8008c10:	e004      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
 8008c14:	75bb      	strb	r3, [r7, #22]
 8008c16:	e001      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c18:	7dfb      	ldrb	r3, [r7, #23]
 8008c1a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0301 	and.w	r3, r3, #1
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d07e      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c2c:	2b28      	cmp	r3, #40	; 0x28
 8008c2e:	d867      	bhi.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8008c30:	a201      	add	r2, pc, #4	; (adr r2, 8008c38 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8008c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c36:	bf00      	nop
 8008c38:	08008d07 	.word	0x08008d07
 8008c3c:	08008d01 	.word	0x08008d01
 8008c40:	08008d01 	.word	0x08008d01
 8008c44:	08008d01 	.word	0x08008d01
 8008c48:	08008d01 	.word	0x08008d01
 8008c4c:	08008d01 	.word	0x08008d01
 8008c50:	08008d01 	.word	0x08008d01
 8008c54:	08008d01 	.word	0x08008d01
 8008c58:	08008cdd 	.word	0x08008cdd
 8008c5c:	08008d01 	.word	0x08008d01
 8008c60:	08008d01 	.word	0x08008d01
 8008c64:	08008d01 	.word	0x08008d01
 8008c68:	08008d01 	.word	0x08008d01
 8008c6c:	08008d01 	.word	0x08008d01
 8008c70:	08008d01 	.word	0x08008d01
 8008c74:	08008d01 	.word	0x08008d01
 8008c78:	08008cef 	.word	0x08008cef
 8008c7c:	08008d01 	.word	0x08008d01
 8008c80:	08008d01 	.word	0x08008d01
 8008c84:	08008d01 	.word	0x08008d01
 8008c88:	08008d01 	.word	0x08008d01
 8008c8c:	08008d01 	.word	0x08008d01
 8008c90:	08008d01 	.word	0x08008d01
 8008c94:	08008d01 	.word	0x08008d01
 8008c98:	08008d07 	.word	0x08008d07
 8008c9c:	08008d01 	.word	0x08008d01
 8008ca0:	08008d01 	.word	0x08008d01
 8008ca4:	08008d01 	.word	0x08008d01
 8008ca8:	08008d01 	.word	0x08008d01
 8008cac:	08008d01 	.word	0x08008d01
 8008cb0:	08008d01 	.word	0x08008d01
 8008cb4:	08008d01 	.word	0x08008d01
 8008cb8:	08008d07 	.word	0x08008d07
 8008cbc:	08008d01 	.word	0x08008d01
 8008cc0:	08008d01 	.word	0x08008d01
 8008cc4:	08008d01 	.word	0x08008d01
 8008cc8:	08008d01 	.word	0x08008d01
 8008ccc:	08008d01 	.word	0x08008d01
 8008cd0:	08008d01 	.word	0x08008d01
 8008cd4:	08008d01 	.word	0x08008d01
 8008cd8:	08008d07 	.word	0x08008d07
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3304      	adds	r3, #4
 8008ce0:	2101      	movs	r1, #1
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f001 fb5e 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008cec:	e00c      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	3324      	adds	r3, #36	; 0x24
 8008cf2:	2101      	movs	r1, #1
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f001 fc07 	bl	800a508 <RCCEx_PLL3_Config>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008cfe:	e003      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	75fb      	strb	r3, [r7, #23]
      break;
 8008d04:	e000      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8008d06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d08:	7dfb      	ldrb	r3, [r7, #23]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d109      	bne.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008d0e:	4b1d      	ldr	r3, [pc, #116]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d12:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d1a:	491a      	ldr	r1, [pc, #104]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	654b      	str	r3, [r1, #84]	; 0x54
 8008d20:	e001      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d22:	7dfb      	ldrb	r3, [r7, #23]
 8008d24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0302 	and.w	r3, r3, #2
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d03e      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d36:	2b05      	cmp	r3, #5
 8008d38:	d820      	bhi.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x838>
 8008d3a:	a201      	add	r2, pc, #4	; (adr r2, 8008d40 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d40:	08008d91 	.word	0x08008d91
 8008d44:	08008d59 	.word	0x08008d59
 8008d48:	08008d6b 	.word	0x08008d6b
 8008d4c:	08008d91 	.word	0x08008d91
 8008d50:	08008d91 	.word	0x08008d91
 8008d54:	08008d91 	.word	0x08008d91
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	2101      	movs	r1, #1
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f001 fb20 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008d64:	4603      	mov	r3, r0
 8008d66:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008d68:	e013      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3324      	adds	r3, #36	; 0x24
 8008d6e:	2101      	movs	r1, #1
 8008d70:	4618      	mov	r0, r3
 8008d72:	f001 fbc9 	bl	800a508 <RCCEx_PLL3_Config>
 8008d76:	4603      	mov	r3, r0
 8008d78:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008d7a:	e00a      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d80:	e007      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8008d82:	bf00      	nop
 8008d84:	58024400 	.word	0x58024400
 8008d88:	58024800 	.word	0x58024800
 8008d8c:	00ffffcf 	.word	0x00ffffcf
      break;
 8008d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d92:	7dfb      	ldrb	r3, [r7, #23]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d109      	bne.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008d98:	4b9f      	ldr	r3, [pc, #636]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d9c:	f023 0207 	bic.w	r2, r3, #7
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da4:	499c      	ldr	r1, [pc, #624]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008da6:	4313      	orrs	r3, r2
 8008da8:	654b      	str	r3, [r1, #84]	; 0x54
 8008daa:	e001      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dac:	7dfb      	ldrb	r3, [r7, #23]
 8008dae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0304 	and.w	r3, r3, #4
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d039      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dc2:	2b05      	cmp	r3, #5
 8008dc4:	d820      	bhi.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8008dc6:	a201      	add	r2, pc, #4	; (adr r2, 8008dcc <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8008dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dcc:	08008e0f 	.word	0x08008e0f
 8008dd0:	08008de5 	.word	0x08008de5
 8008dd4:	08008df7 	.word	0x08008df7
 8008dd8:	08008e0f 	.word	0x08008e0f
 8008ddc:	08008e0f 	.word	0x08008e0f
 8008de0:	08008e0f 	.word	0x08008e0f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	3304      	adds	r3, #4
 8008de8:	2101      	movs	r1, #1
 8008dea:	4618      	mov	r0, r3
 8008dec:	f001 fada 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008df0:	4603      	mov	r3, r0
 8008df2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008df4:	e00c      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	3324      	adds	r3, #36	; 0x24
 8008dfa:	2101      	movs	r1, #1
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f001 fb83 	bl	800a508 <RCCEx_PLL3_Config>
 8008e02:	4603      	mov	r3, r0
 8008e04:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008e06:	e003      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e0c:	e000      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8008e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e10:	7dfb      	ldrb	r3, [r7, #23]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10a      	bne.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e16:	4b80      	ldr	r3, [pc, #512]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e1a:	f023 0207 	bic.w	r2, r3, #7
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e24:	497c      	ldr	r1, [pc, #496]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008e26:	4313      	orrs	r3, r2
 8008e28:	658b      	str	r3, [r1, #88]	; 0x58
 8008e2a:	e001      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e2c:	7dfb      	ldrb	r3, [r7, #23]
 8008e2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 0320 	and.w	r3, r3, #32
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d04b      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e46:	d02e      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8008e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e4c:	d828      	bhi.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e52:	d02a      	beq.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x966>
 8008e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e58:	d822      	bhi.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008e5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e5e:	d026      	beq.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008e60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e64:	d81c      	bhi.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008e66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e6a:	d010      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8008e6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e70:	d816      	bhi.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d01d      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008e76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e7a:	d111      	bne.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3304      	adds	r3, #4
 8008e80:	2100      	movs	r1, #0
 8008e82:	4618      	mov	r0, r3
 8008e84:	f001 fa8e 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008e8c:	e012      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	3324      	adds	r3, #36	; 0x24
 8008e92:	2102      	movs	r1, #2
 8008e94:	4618      	mov	r0, r3
 8008e96:	f001 fb37 	bl	800a508 <RCCEx_PLL3_Config>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008e9e:	e009      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ea4:	e006      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008ea6:	bf00      	nop
 8008ea8:	e004      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008eaa:	bf00      	nop
 8008eac:	e002      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008eae:	bf00      	nop
 8008eb0:	e000      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008eb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008eb4:	7dfb      	ldrb	r3, [r7, #23]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10a      	bne.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008eba:	4b57      	ldr	r3, [pc, #348]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ebe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ec8:	4953      	ldr	r1, [pc, #332]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	654b      	str	r3, [r1, #84]	; 0x54
 8008ece:	e001      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ed0:	7dfb      	ldrb	r3, [r7, #23]
 8008ed2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d04b      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ee6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008eea:	d02e      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8008eec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008ef0:	d828      	bhi.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ef6:	d02a      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008efc:	d822      	bhi.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008efe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f02:	d026      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8008f04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f08:	d81c      	bhi.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f0e:	d010      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8008f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f14:	d816      	bhi.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d01d      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f1e:	d111      	bne.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	3304      	adds	r3, #4
 8008f24:	2100      	movs	r1, #0
 8008f26:	4618      	mov	r0, r3
 8008f28:	f001 fa3c 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008f30:	e012      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	3324      	adds	r3, #36	; 0x24
 8008f36:	2102      	movs	r1, #2
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f001 fae5 	bl	800a508 <RCCEx_PLL3_Config>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008f42:	e009      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	75fb      	strb	r3, [r7, #23]
      break;
 8008f48:	e006      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008f4a:	bf00      	nop
 8008f4c:	e004      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008f4e:	bf00      	nop
 8008f50:	e002      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008f52:	bf00      	nop
 8008f54:	e000      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d10a      	bne.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008f5e:	4b2e      	ldr	r3, [pc, #184]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f62:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f6c:	492a      	ldr	r1, [pc, #168]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	658b      	str	r3, [r1, #88]	; 0x58
 8008f72:	e001      	b.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f74:	7dfb      	ldrb	r3, [r7, #23]
 8008f76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d04d      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f8a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008f8e:	d02e      	beq.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8008f90:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008f94:	d828      	bhi.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f9a:	d02a      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fa0:	d822      	bhi.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008fa2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008fa6:	d026      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008fa8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008fac:	d81c      	bhi.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fb2:	d010      	beq.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8008fb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fb8:	d816      	bhi.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d01d      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fc2:	d111      	bne.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	2100      	movs	r1, #0
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f001 f9ea 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008fd4:	e012      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	3324      	adds	r3, #36	; 0x24
 8008fda:	2102      	movs	r1, #2
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f001 fa93 	bl	800a508 <RCCEx_PLL3_Config>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008fe6:	e009      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	75fb      	strb	r3, [r7, #23]
      break;
 8008fec:	e006      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008fee:	bf00      	nop
 8008ff0:	e004      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008ff2:	bf00      	nop
 8008ff4:	e002      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008ff6:	bf00      	nop
 8008ff8:	e000      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ffc:	7dfb      	ldrb	r3, [r7, #23]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10c      	bne.n	800901c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009002:	4b05      	ldr	r3, [pc, #20]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009006:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009010:	4901      	ldr	r1, [pc, #4]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009012:	4313      	orrs	r3, r2
 8009014:	658b      	str	r3, [r1, #88]	; 0x58
 8009016:	e003      	b.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009018:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800901c:	7dfb      	ldrb	r3, [r7, #23]
 800901e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 0308 	and.w	r3, r3, #8
 8009028:	2b00      	cmp	r3, #0
 800902a:	d018      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009034:	d10a      	bne.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	3324      	adds	r3, #36	; 0x24
 800903a:	2102      	movs	r1, #2
 800903c:	4618      	mov	r0, r3
 800903e:	f001 fa63 	bl	800a508 <RCCEx_PLL3_Config>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800904c:	4b8a      	ldr	r3, [pc, #552]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800904e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009050:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009058:	4987      	ldr	r1, [pc, #540]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800905a:	4313      	orrs	r3, r2
 800905c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0310 	and.w	r3, r3, #16
 8009066:	2b00      	cmp	r3, #0
 8009068:	d01a      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009074:	d10a      	bne.n	800908c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	3324      	adds	r3, #36	; 0x24
 800907a:	2102      	movs	r1, #2
 800907c:	4618      	mov	r0, r3
 800907e:	f001 fa43 	bl	800a508 <RCCEx_PLL3_Config>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d001      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800908c:	4b7a      	ldr	r3, [pc, #488]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800908e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009090:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800909a:	4977      	ldr	r1, [pc, #476]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800909c:	4313      	orrs	r3, r2
 800909e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d034      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80090b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090b6:	d01d      	beq.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80090b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090bc:	d817      	bhi.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80090c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090c6:	d009      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80090c8:	e011      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	3304      	adds	r3, #4
 80090ce:	2100      	movs	r1, #0
 80090d0:	4618      	mov	r0, r3
 80090d2:	f001 f967 	bl	800a3a4 <RCCEx_PLL2_Config>
 80090d6:	4603      	mov	r3, r0
 80090d8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80090da:	e00c      	b.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	3324      	adds	r3, #36	; 0x24
 80090e0:	2102      	movs	r1, #2
 80090e2:	4618      	mov	r0, r3
 80090e4:	f001 fa10 	bl	800a508 <RCCEx_PLL3_Config>
 80090e8:	4603      	mov	r3, r0
 80090ea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80090ec:	e003      	b.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	75fb      	strb	r3, [r7, #23]
      break;
 80090f2:	e000      	b.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80090f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090f6:	7dfb      	ldrb	r3, [r7, #23]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10a      	bne.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80090fc:	4b5e      	ldr	r3, [pc, #376]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80090fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009100:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800910a:	495b      	ldr	r1, [pc, #364]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800910c:	4313      	orrs	r3, r2
 800910e:	658b      	str	r3, [r1, #88]	; 0x58
 8009110:	e001      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009112:	7dfb      	ldrb	r3, [r7, #23]
 8009114:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d033      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009128:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800912c:	d01c      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800912e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009132:	d816      	bhi.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009134:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009138:	d003      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800913a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800913e:	d007      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009140:	e00f      	b.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009142:	4b4d      	ldr	r3, [pc, #308]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009146:	4a4c      	ldr	r2, [pc, #304]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800914c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800914e:	e00c      	b.n	800916a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3324      	adds	r3, #36	; 0x24
 8009154:	2101      	movs	r1, #1
 8009156:	4618      	mov	r0, r3
 8009158:	f001 f9d6 	bl	800a508 <RCCEx_PLL3_Config>
 800915c:	4603      	mov	r3, r0
 800915e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009160:	e003      	b.n	800916a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	75fb      	strb	r3, [r7, #23]
      break;
 8009166:	e000      	b.n	800916a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8009168:	bf00      	nop
    }

    if(ret == HAL_OK)
 800916a:	7dfb      	ldrb	r3, [r7, #23]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10a      	bne.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009170:	4b41      	ldr	r3, [pc, #260]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009174:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800917e:	493e      	ldr	r1, [pc, #248]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009180:	4313      	orrs	r3, r2
 8009182:	654b      	str	r3, [r1, #84]	; 0x54
 8009184:	e001      	b.n	800918a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009186:	7dfb      	ldrb	r3, [r7, #23]
 8009188:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d029      	beq.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800919a:	2b00      	cmp	r3, #0
 800919c:	d003      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800919e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091a2:	d007      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80091a4:	e00f      	b.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091a6:	4b34      	ldr	r3, [pc, #208]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80091a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091aa:	4a33      	ldr	r2, [pc, #204]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80091ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80091b2:	e00b      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	3304      	adds	r3, #4
 80091b8:	2102      	movs	r1, #2
 80091ba:	4618      	mov	r0, r3
 80091bc:	f001 f8f2 	bl	800a3a4 <RCCEx_PLL2_Config>
 80091c0:	4603      	mov	r3, r0
 80091c2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80091c4:	e002      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	75fb      	strb	r3, [r7, #23]
      break;
 80091ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091cc:	7dfb      	ldrb	r3, [r7, #23]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d109      	bne.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80091d2:	4b29      	ldr	r3, [pc, #164]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80091d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091de:	4926      	ldr	r1, [pc, #152]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80091e0:	4313      	orrs	r3, r2
 80091e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80091e4:	e001      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00a      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	3324      	adds	r3, #36	; 0x24
 80091fa:	2102      	movs	r1, #2
 80091fc:	4618      	mov	r0, r3
 80091fe:	f001 f983 	bl	800a508 <RCCEx_PLL3_Config>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d033      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800921c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009220:	d017      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009226:	d811      	bhi.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800922c:	d013      	beq.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800922e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009232:	d80b      	bhi.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009234:	2b00      	cmp	r3, #0
 8009236:	d010      	beq.n	800925a <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8009238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800923c:	d106      	bne.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800923e:	4b0e      	ldr	r3, [pc, #56]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009242:	4a0d      	ldr	r2, [pc, #52]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009248:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800924a:	e007      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	75fb      	strb	r3, [r7, #23]
      break;
 8009250:	e004      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009252:	bf00      	nop
 8009254:	e002      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009256:	bf00      	nop
 8009258:	e000      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800925a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800925c:	7dfb      	ldrb	r3, [r7, #23]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10c      	bne.n	800927c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009262:	4b05      	ldr	r3, [pc, #20]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009266:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800926e:	4902      	ldr	r1, [pc, #8]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009270:	4313      	orrs	r3, r2
 8009272:	654b      	str	r3, [r1, #84]	; 0x54
 8009274:	e004      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8009276:	bf00      	nop
 8009278:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800927c:	7dfb      	ldrb	r3, [r7, #23]
 800927e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d008      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800928c:	4b29      	ldr	r3, [pc, #164]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800928e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009290:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009298:	4926      	ldr	r1, [pc, #152]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800929a:	4313      	orrs	r3, r2
 800929c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d008      	beq.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80092aa:	4b22      	ldr	r3, [pc, #136]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80092ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092b6:	491f      	ldr	r1, [pc, #124]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80092b8:	4313      	orrs	r3, r2
 80092ba:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00d      	beq.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80092c8:	4b1a      	ldr	r3, [pc, #104]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	4a19      	ldr	r2, [pc, #100]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80092ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092d2:	6113      	str	r3, [r2, #16]
 80092d4:	4b17      	ldr	r3, [pc, #92]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80092d6:	691a      	ldr	r2, [r3, #16]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80092de:	4915      	ldr	r1, [pc, #84]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80092e0:	4313      	orrs	r3, r2
 80092e2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	da08      	bge.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80092ec:	4b11      	ldr	r3, [pc, #68]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80092ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f8:	490e      	ldr	r1, [pc, #56]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80092fa:	4313      	orrs	r3, r2
 80092fc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009306:	2b00      	cmp	r3, #0
 8009308:	d009      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800930a:	4b0a      	ldr	r3, [pc, #40]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800930c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800930e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009318:	4906      	ldr	r1, [pc, #24]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800931a:	4313      	orrs	r3, r2
 800931c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800931e:	7dbb      	ldrb	r3, [r7, #22]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d101      	bne.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009324:	2300      	movs	r3, #0
 8009326:	e000      	b.n	800932a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
}
 800932a:	4618      	mov	r0, r3
 800932c:	3718      	adds	r7, #24
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	58024400 	.word	0x58024400

08009338 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b090      	sub	sp, #64	; 0x40
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009346:	f040 8089 	bne.w	800945c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800934a:	4b95      	ldr	r3, [pc, #596]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800934c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800934e:	f003 0307 	and.w	r3, r3, #7
 8009352:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009356:	2b04      	cmp	r3, #4
 8009358:	d87d      	bhi.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800935a:	a201      	add	r2, pc, #4	; (adr r2, 8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800935c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009360:	08009375 	.word	0x08009375
 8009364:	08009399 	.word	0x08009399
 8009368:	080093bd 	.word	0x080093bd
 800936c:	08009451 	.word	0x08009451
 8009370:	080093e1 	.word	0x080093e1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009374:	4b8a      	ldr	r3, [pc, #552]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800937c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009380:	d107      	bne.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009386:	4618      	mov	r0, r3
 8009388:	f000 feba 	bl	800a100 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800938c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009390:	e3ef      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009392:	2300      	movs	r3, #0
 8009394:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009396:	e3ec      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009398:	4b81      	ldr	r3, [pc, #516]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093a4:	d107      	bne.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093a6:	f107 0318 	add.w	r3, r7, #24
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 fc00 	bl	8009bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093b4:	e3dd      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80093b6:	2300      	movs	r3, #0
 80093b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093ba:	e3da      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093bc:	4b78      	ldr	r3, [pc, #480]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093c8:	d107      	bne.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093ca:	f107 030c 	add.w	r3, r7, #12
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 fd42 	bl	8009e58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093d8:	e3cb      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80093da:	2300      	movs	r3, #0
 80093dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093de:	e3c8      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80093e0:	4b6f      	ldr	r3, [pc, #444]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80093e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80093e8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093ea:	4b6d      	ldr	r3, [pc, #436]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 0304 	and.w	r3, r3, #4
 80093f2:	2b04      	cmp	r3, #4
 80093f4:	d10c      	bne.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80093f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d109      	bne.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093fc:	4b68      	ldr	r3, [pc, #416]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	08db      	lsrs	r3, r3, #3
 8009402:	f003 0303 	and.w	r3, r3, #3
 8009406:	4a67      	ldr	r2, [pc, #412]	; (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8009408:	fa22 f303 	lsr.w	r3, r2, r3
 800940c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800940e:	e01e      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009410:	4b63      	ldr	r3, [pc, #396]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800941c:	d106      	bne.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800941e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009420:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009424:	d102      	bne.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009426:	4b60      	ldr	r3, [pc, #384]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800942a:	e010      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800942c:	4b5c      	ldr	r3, [pc, #368]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009434:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009438:	d106      	bne.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800943a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800943c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009440:	d102      	bne.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009442:	4b5a      	ldr	r3, [pc, #360]	; (80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009444:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009446:	e002      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009448:	2300      	movs	r3, #0
 800944a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800944c:	e391      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800944e:	e390      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009450:	4b57      	ldr	r3, [pc, #348]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009452:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009454:	e38d      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 8009456:	2300      	movs	r3, #0
 8009458:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800945a:	e38a      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009462:	f040 80a7 	bne.w	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009466:	4b4e      	ldr	r3, [pc, #312]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800946a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800946e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009472:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009476:	d054      	beq.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8009478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800947e:	f200 808b 	bhi.w	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8009482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009484:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009488:	f000 8083 	beq.w	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800948c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009492:	f200 8081 	bhi.w	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8009496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800949c:	d02f      	beq.n	80094fe <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800949e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094a4:	d878      	bhi.n	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80094a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d004      	beq.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80094ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094b2:	d012      	beq.n	80094da <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80094b4:	e070      	b.n	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094b6:	4b3a      	ldr	r3, [pc, #232]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094c2:	d107      	bne.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 fe19 	bl	800a100 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094d2:	e34e      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80094d4:	2300      	movs	r3, #0
 80094d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094d8:	e34b      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094da:	4b31      	ldr	r3, [pc, #196]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094e6:	d107      	bne.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094e8:	f107 0318 	add.w	r3, r7, #24
 80094ec:	4618      	mov	r0, r3
 80094ee:	f000 fb5f 	bl	8009bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094f6:	e33c      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80094f8:	2300      	movs	r3, #0
 80094fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094fc:	e339      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094fe:	4b28      	ldr	r3, [pc, #160]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800950a:	d107      	bne.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800950c:	f107 030c 	add.w	r3, r7, #12
 8009510:	4618      	mov	r0, r3
 8009512:	f000 fca1 	bl	8009e58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800951a:	e32a      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800951c:	2300      	movs	r3, #0
 800951e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009520:	e327      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009522:	4b1f      	ldr	r3, [pc, #124]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009526:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800952a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800952c:	4b1c      	ldr	r3, [pc, #112]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 0304 	and.w	r3, r3, #4
 8009534:	2b04      	cmp	r3, #4
 8009536:	d10c      	bne.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8009538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800953a:	2b00      	cmp	r3, #0
 800953c:	d109      	bne.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800953e:	4b18      	ldr	r3, [pc, #96]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	08db      	lsrs	r3, r3, #3
 8009544:	f003 0303 	and.w	r3, r3, #3
 8009548:	4a16      	ldr	r2, [pc, #88]	; (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800954a:	fa22 f303 	lsr.w	r3, r2, r3
 800954e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009550:	e01e      	b.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009552:	4b13      	ldr	r3, [pc, #76]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800955a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800955e:	d106      	bne.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8009560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009566:	d102      	bne.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009568:	4b0f      	ldr	r3, [pc, #60]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800956a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800956c:	e010      	b.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800956e:	4b0c      	ldr	r3, [pc, #48]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800957a:	d106      	bne.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800957c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800957e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009582:	d102      	bne.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009584:	4b09      	ldr	r3, [pc, #36]	; (80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009588:	e002      	b.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800958a:	2300      	movs	r3, #0
 800958c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800958e:	e2f0      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009590:	e2ef      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009592:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009594:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009596:	e2ec      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800959c:	e2e9      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800959e:	bf00      	nop
 80095a0:	58024400 	.word	0x58024400
 80095a4:	03d09000 	.word	0x03d09000
 80095a8:	003d0900 	.word	0x003d0900
 80095ac:	007a1200 	.word	0x007a1200
 80095b0:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095ba:	f040 809c 	bne.w	80096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80095be:	4b9d      	ldr	r3, [pc, #628]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80095c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095c2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80095c6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80095c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095ce:	d054      	beq.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80095d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095d6:	f200 808b 	bhi.w	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80095da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80095e0:	f000 8083 	beq.w	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80095e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80095ea:	f200 8081 	bhi.w	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80095ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095f4:	d02f      	beq.n	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80095f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095fc:	d878      	bhi.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80095fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009600:	2b00      	cmp	r3, #0
 8009602:	d004      	beq.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8009604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009606:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800960a:	d012      	beq.n	8009632 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800960c:	e070      	b.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800960e:	4b89      	ldr	r3, [pc, #548]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009616:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800961a:	d107      	bne.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800961c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009620:	4618      	mov	r0, r3
 8009622:	f000 fd6d 	bl	800a100 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009628:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800962a:	e2a2      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800962c:	2300      	movs	r3, #0
 800962e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009630:	e29f      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009632:	4b80      	ldr	r3, [pc, #512]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800963a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800963e:	d107      	bne.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009640:	f107 0318 	add.w	r3, r7, #24
 8009644:	4618      	mov	r0, r3
 8009646:	f000 fab3 	bl	8009bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800964e:	e290      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009654:	e28d      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009656:	4b77      	ldr	r3, [pc, #476]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800965e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009662:	d107      	bne.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009664:	f107 030c 	add.w	r3, r7, #12
 8009668:	4618      	mov	r0, r3
 800966a:	f000 fbf5 	bl	8009e58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009672:	e27e      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009674:	2300      	movs	r3, #0
 8009676:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009678:	e27b      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800967a:	4b6e      	ldr	r3, [pc, #440]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800967c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800967e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009682:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009684:	4b6b      	ldr	r3, [pc, #428]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 0304 	and.w	r3, r3, #4
 800968c:	2b04      	cmp	r3, #4
 800968e:	d10c      	bne.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009692:	2b00      	cmp	r3, #0
 8009694:	d109      	bne.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009696:	4b67      	ldr	r3, [pc, #412]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	08db      	lsrs	r3, r3, #3
 800969c:	f003 0303 	and.w	r3, r3, #3
 80096a0:	4a65      	ldr	r2, [pc, #404]	; (8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80096a2:	fa22 f303 	lsr.w	r3, r2, r3
 80096a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096a8:	e01e      	b.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096aa:	4b62      	ldr	r3, [pc, #392]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096b6:	d106      	bne.n	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80096b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096be:	d102      	bne.n	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80096c0:	4b5e      	ldr	r3, [pc, #376]	; (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80096c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096c4:	e010      	b.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096c6:	4b5b      	ldr	r3, [pc, #364]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096d2:	d106      	bne.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80096d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096da:	d102      	bne.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80096dc:	4b58      	ldr	r3, [pc, #352]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80096de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096e0:	e002      	b.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80096e6:	e244      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80096e8:	e243      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80096ea:	4b56      	ldr	r3, [pc, #344]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80096ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096ee:	e240      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 80096f0:	2300      	movs	r3, #0
 80096f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096f4:	e23d      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096fc:	f040 80a7 	bne.w	800984e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009700:	4b4c      	ldr	r3, [pc, #304]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009704:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009708:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800970a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009710:	d055      	beq.n	80097be <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8009712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009718:	f200 8096 	bhi.w	8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800971c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009722:	f000 8084 	beq.w	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009728:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800972c:	f200 808c 	bhi.w	8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8009730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009736:	d030      	beq.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8009738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800973e:	f200 8083 	bhi.w	8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8009742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009744:	2b00      	cmp	r3, #0
 8009746:	d004      	beq.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8009748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800974e:	d012      	beq.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 8009750:	e07a      	b.n	8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009752:	4b38      	ldr	r3, [pc, #224]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800975a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800975e:	d107      	bne.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009764:	4618      	mov	r0, r3
 8009766:	f000 fccb 	bl	800a100 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800976a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800976e:	e200      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009770:	2300      	movs	r3, #0
 8009772:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009774:	e1fd      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009776:	4b2f      	ldr	r3, [pc, #188]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800977e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009782:	d107      	bne.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009784:	f107 0318 	add.w	r3, r7, #24
 8009788:	4618      	mov	r0, r3
 800978a:	f000 fa11 	bl	8009bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009792:	e1ee      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009794:	2300      	movs	r3, #0
 8009796:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009798:	e1eb      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800979a:	4b26      	ldr	r3, [pc, #152]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097a6:	d107      	bne.n	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097a8:	f107 030c 	add.w	r3, r7, #12
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 fb53 	bl	8009e58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80097b6:	e1dc      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80097b8:	2300      	movs	r3, #0
 80097ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097bc:	e1d9      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80097be:	4b1d      	ldr	r3, [pc, #116]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80097c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80097c6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097c8:	4b1a      	ldr	r3, [pc, #104]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 0304 	and.w	r3, r3, #4
 80097d0:	2b04      	cmp	r3, #4
 80097d2:	d10c      	bne.n	80097ee <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 80097d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d109      	bne.n	80097ee <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097da:	4b16      	ldr	r3, [pc, #88]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	08db      	lsrs	r3, r3, #3
 80097e0:	f003 0303 	and.w	r3, r3, #3
 80097e4:	4a14      	ldr	r2, [pc, #80]	; (8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80097e6:	fa22 f303 	lsr.w	r3, r2, r3
 80097ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097ec:	e01e      	b.n	800982c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097ee:	4b11      	ldr	r3, [pc, #68]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097fa:	d106      	bne.n	800980a <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 80097fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009802:	d102      	bne.n	800980a <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009804:	4b0d      	ldr	r3, [pc, #52]	; (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009808:	e010      	b.n	800982c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800980a:	4b0a      	ldr	r3, [pc, #40]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009812:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009816:	d106      	bne.n	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8009818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800981a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800981e:	d102      	bne.n	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009820:	4b07      	ldr	r3, [pc, #28]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009824:	e002      	b.n	800982c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009826:	2300      	movs	r3, #0
 8009828:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800982a:	e1a2      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800982c:	e1a1      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800982e:	4b05      	ldr	r3, [pc, #20]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009830:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009832:	e19e      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009834:	58024400 	.word	0x58024400
 8009838:	03d09000 	.word	0x03d09000
 800983c:	003d0900 	.word	0x003d0900
 8009840:	007a1200 	.word	0x007a1200
 8009844:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8009848:	2300      	movs	r3, #0
 800984a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800984c:	e191      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009854:	d173      	bne.n	800993e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009856:	4b9b      	ldr	r3, [pc, #620]	; (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800985a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800985e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009862:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009866:	d02f      	beq.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8009868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800986e:	d863      	bhi.n	8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8009870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009872:	2b00      	cmp	r3, #0
 8009874:	d004      	beq.n	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8009876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800987c:	d012      	beq.n	80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800987e:	e05b      	b.n	8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009880:	4b90      	ldr	r3, [pc, #576]	; (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009888:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800988c:	d107      	bne.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800988e:	f107 0318 	add.w	r3, r7, #24
 8009892:	4618      	mov	r0, r3
 8009894:	f000 f98c 	bl	8009bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800989c:	e169      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800989e:	2300      	movs	r3, #0
 80098a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098a2:	e166      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098a4:	4b87      	ldr	r3, [pc, #540]	; (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098b0:	d107      	bne.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098b2:	f107 030c 	add.w	r3, r7, #12
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 face 	bl	8009e58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80098c0:	e157      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80098c2:	2300      	movs	r3, #0
 80098c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098c6:	e154      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80098c8:	4b7e      	ldr	r3, [pc, #504]	; (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80098ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80098d0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80098d2:	4b7c      	ldr	r3, [pc, #496]	; (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 0304 	and.w	r3, r3, #4
 80098da:	2b04      	cmp	r3, #4
 80098dc:	d10c      	bne.n	80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80098de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d109      	bne.n	80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098e4:	4b77      	ldr	r3, [pc, #476]	; (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	08db      	lsrs	r3, r3, #3
 80098ea:	f003 0303 	and.w	r3, r3, #3
 80098ee:	4a76      	ldr	r2, [pc, #472]	; (8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80098f0:	fa22 f303 	lsr.w	r3, r2, r3
 80098f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098f6:	e01e      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098f8:	4b72      	ldr	r3, [pc, #456]	; (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009904:	d106      	bne.n	8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8009906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009908:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800990c:	d102      	bne.n	8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800990e:	4b6f      	ldr	r3, [pc, #444]	; (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8009910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009912:	e010      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009914:	4b6b      	ldr	r3, [pc, #428]	; (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800991c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009920:	d106      	bne.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 8009922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009928:	d102      	bne.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800992a:	4b69      	ldr	r3, [pc, #420]	; (8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800992c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800992e:	e002      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009934:	e11d      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009936:	e11c      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8009938:	2300      	movs	r3, #0
 800993a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800993c:	e119      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009944:	d133      	bne.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009946:	4b5f      	ldr	r3, [pc, #380]	; (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800994a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800994e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009952:	2b00      	cmp	r3, #0
 8009954:	d004      	beq.n	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 8009956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800995c:	d012      	beq.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800995e:	e023      	b.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009960:	4b58      	ldr	r3, [pc, #352]	; (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009968:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800996c:	d107      	bne.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800996e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009972:	4618      	mov	r0, r3
 8009974:	f000 fbc4 	bl	800a100 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800997c:	e0f9      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800997e:	2300      	movs	r3, #0
 8009980:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009982:	e0f6      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009984:	4b4f      	ldr	r3, [pc, #316]	; (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800998c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009990:	d107      	bne.n	80099a2 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009992:	f107 0318 	add.w	r3, r7, #24
 8009996:	4618      	mov	r0, r3
 8009998:	f000 f90a 	bl	8009bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80099a0:	e0e7      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099a6:	e0e4      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099ac:	e0e1      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099b4:	f040 808e 	bne.w	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80099b8:	4b42      	ldr	r3, [pc, #264]	; (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80099ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099bc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80099c0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80099c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099c8:	d06b      	beq.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 80099ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099d0:	d874      	bhi.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80099d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099d8:	d056      	beq.n	8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 80099da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099e0:	d86c      	bhi.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80099e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099e8:	d03b      	beq.n	8009a62 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80099ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099f0:	d864      	bhi.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80099f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099f8:	d021      	beq.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 80099fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a00:	d85c      	bhi.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8009a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d004      	beq.n	8009a12 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8009a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a0e:	d004      	beq.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 8009a10:	e054      	b.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009a12:	f000 f8b7 	bl	8009b84 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a16:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009a18:	e0ab      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a1a:	4b2a      	ldr	r3, [pc, #168]	; (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a26:	d107      	bne.n	8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a28:	f107 0318 	add.w	r3, r7, #24
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f000 f8bf 	bl	8009bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a36:	e09c      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a3c:	e099      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a3e:	4b21      	ldr	r3, [pc, #132]	; (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a4a:	d107      	bne.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a4c:	f107 030c 	add.w	r3, r7, #12
 8009a50:	4618      	mov	r0, r3
 8009a52:	f000 fa01 	bl	8009e58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a5a:	e08a      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a60:	e087      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a62:	4b18      	ldr	r3, [pc, #96]	; (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 0304 	and.w	r3, r3, #4
 8009a6a:	2b04      	cmp	r3, #4
 8009a6c:	d109      	bne.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a6e:	4b15      	ldr	r3, [pc, #84]	; (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	08db      	lsrs	r3, r3, #3
 8009a74:	f003 0303 	and.w	r3, r3, #3
 8009a78:	4a13      	ldr	r2, [pc, #76]	; (8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a80:	e077      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a86:	e074      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009a88:	4b0e      	ldr	r3, [pc, #56]	; (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a94:	d102      	bne.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 8009a96:	4b0d      	ldr	r3, [pc, #52]	; (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8009a98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a9a:	e06a      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009aa0:	e067      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009aa2:	4b08      	ldr	r3, [pc, #32]	; (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009aae:	d102      	bne.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 8009ab0:	4b07      	ldr	r3, [pc, #28]	; (8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009ab4:	e05d      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009aba:	e05a      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009abc:	2300      	movs	r3, #0
 8009abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ac0:	e057      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009ac2:	bf00      	nop
 8009ac4:	58024400 	.word	0x58024400
 8009ac8:	03d09000 	.word	0x03d09000
 8009acc:	003d0900 	.word	0x003d0900
 8009ad0:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ada:	d148      	bne.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009adc:	4b27      	ldr	r3, [pc, #156]	; (8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ae0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ae4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009aec:	d02a      	beq.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 8009aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009af4:	d838      	bhi.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8009af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d004      	beq.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 8009afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b02:	d00d      	beq.n	8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 8009b04:	e030      	b.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b06:	4b1d      	ldr	r3, [pc, #116]	; (8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b12:	d102      	bne.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 8009b14:	4b1a      	ldr	r3, [pc, #104]	; (8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8009b16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b18:	e02b      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b1e:	e028      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b20:	4b16      	ldr	r3, [pc, #88]	; (8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b2c:	d107      	bne.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b32:	4618      	mov	r0, r3
 8009b34:	f000 fae4 	bl	800a100 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b3c:	e019      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b42:	e016      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b44:	4b0d      	ldr	r3, [pc, #52]	; (8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b50:	d107      	bne.n	8009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b52:	f107 0318 	add.w	r3, r7, #24
 8009b56:	4618      	mov	r0, r3
 8009b58:	f000 f82a 	bl	8009bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b60:	e007      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009b62:	2300      	movs	r3, #0
 8009b64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b66:	e004      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b6c:	e001      	b.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3740      	adds	r7, #64	; 0x40
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	58024400 	.word	0x58024400
 8009b80:	007a1200 	.word	0x007a1200

08009b84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009b88:	f7fe fcac 	bl	80084e4 <HAL_RCC_GetHCLKFreq>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	4b06      	ldr	r3, [pc, #24]	; (8009ba8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	091b      	lsrs	r3, r3, #4
 8009b94:	f003 0307 	and.w	r3, r3, #7
 8009b98:	4904      	ldr	r1, [pc, #16]	; (8009bac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009b9a:	5ccb      	ldrb	r3, [r1, r3]
 8009b9c:	f003 031f 	and.w	r3, r3, #31
 8009ba0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	58024400 	.word	0x58024400
 8009bac:	0800b190 	.word	0x0800b190

08009bb0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b089      	sub	sp, #36	; 0x24
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009bb8:	4ba1      	ldr	r3, [pc, #644]	; (8009e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bbc:	f003 0303 	and.w	r3, r3, #3
 8009bc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009bc2:	4b9f      	ldr	r3, [pc, #636]	; (8009e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc6:	0b1b      	lsrs	r3, r3, #12
 8009bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bcc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009bce:	4b9c      	ldr	r3, [pc, #624]	; (8009e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd2:	091b      	lsrs	r3, r3, #4
 8009bd4:	f003 0301 	and.w	r3, r3, #1
 8009bd8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009bda:	4b99      	ldr	r3, [pc, #612]	; (8009e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bde:	08db      	lsrs	r3, r3, #3
 8009be0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	fb02 f303 	mul.w	r3, r2, r3
 8009bea:	ee07 3a90 	vmov	s15, r3
 8009bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 8111 	beq.w	8009e20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	f000 8083 	beq.w	8009d0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	f200 80a1 	bhi.w	8009d50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d003      	beq.n	8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d056      	beq.n	8009cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009c1a:	e099      	b.n	8009d50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c1c:	4b88      	ldr	r3, [pc, #544]	; (8009e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 0320 	and.w	r3, r3, #32
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d02d      	beq.n	8009c84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c28:	4b85      	ldr	r3, [pc, #532]	; (8009e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	08db      	lsrs	r3, r3, #3
 8009c2e:	f003 0303 	and.w	r3, r3, #3
 8009c32:	4a84      	ldr	r2, [pc, #528]	; (8009e44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009c34:	fa22 f303 	lsr.w	r3, r2, r3
 8009c38:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	ee07 3a90 	vmov	s15, r3
 8009c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	ee07 3a90 	vmov	s15, r3
 8009c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c52:	4b7b      	ldr	r3, [pc, #492]	; (8009e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c5a:	ee07 3a90 	vmov	s15, r3
 8009c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009e48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009c82:	e087      	b.n	8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	ee07 3a90 	vmov	s15, r3
 8009c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009e4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c96:	4b6a      	ldr	r3, [pc, #424]	; (8009e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c9e:	ee07 3a90 	vmov	s15, r3
 8009ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009caa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009e48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cc6:	e065      	b.n	8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	ee07 3a90 	vmov	s15, r3
 8009cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009e50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cda:	4b59      	ldr	r3, [pc, #356]	; (8009e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ce2:	ee07 3a90 	vmov	s15, r3
 8009ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009e48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d0a:	e043      	b.n	8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	ee07 3a90 	vmov	s15, r3
 8009d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d1e:	4b48      	ldr	r3, [pc, #288]	; (8009e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d26:	ee07 3a90 	vmov	s15, r3
 8009d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009e48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d4e:	e021      	b.n	8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	ee07 3a90 	vmov	s15, r3
 8009d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009e50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d62:	4b37      	ldr	r3, [pc, #220]	; (8009e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d6a:	ee07 3a90 	vmov	s15, r3
 8009d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009e48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009d94:	4b2a      	ldr	r3, [pc, #168]	; (8009e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d98:	0a5b      	lsrs	r3, r3, #9
 8009d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d9e:	ee07 3a90 	vmov	s15, r3
 8009da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009da6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009daa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dae:	edd7 6a07 	vldr	s13, [r7, #28]
 8009db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dba:	ee17 2a90 	vmov	r2, s15
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009dc2:	4b1f      	ldr	r3, [pc, #124]	; (8009e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc6:	0c1b      	lsrs	r3, r3, #16
 8009dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dcc:	ee07 3a90 	vmov	s15, r3
 8009dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ddc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009de8:	ee17 2a90 	vmov	r2, s15
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009df0:	4b13      	ldr	r3, [pc, #76]	; (8009e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df4:	0e1b      	lsrs	r3, r3, #24
 8009df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dfa:	ee07 3a90 	vmov	s15, r3
 8009dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e16:	ee17 2a90 	vmov	r2, s15
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009e1e:	e008      	b.n	8009e32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	609a      	str	r2, [r3, #8]
}
 8009e32:	bf00      	nop
 8009e34:	3724      	adds	r7, #36	; 0x24
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	58024400 	.word	0x58024400
 8009e44:	03d09000 	.word	0x03d09000
 8009e48:	46000000 	.word	0x46000000
 8009e4c:	4c742400 	.word	0x4c742400
 8009e50:	4a742400 	.word	0x4a742400
 8009e54:	4af42400 	.word	0x4af42400

08009e58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b089      	sub	sp, #36	; 0x24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e60:	4ba1      	ldr	r3, [pc, #644]	; (800a0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e64:	f003 0303 	and.w	r3, r3, #3
 8009e68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009e6a:	4b9f      	ldr	r3, [pc, #636]	; (800a0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e6e:	0d1b      	lsrs	r3, r3, #20
 8009e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009e76:	4b9c      	ldr	r3, [pc, #624]	; (800a0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7a:	0a1b      	lsrs	r3, r3, #8
 8009e7c:	f003 0301 	and.w	r3, r3, #1
 8009e80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009e82:	4b99      	ldr	r3, [pc, #612]	; (800a0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e86:	08db      	lsrs	r3, r3, #3
 8009e88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e8c:	693a      	ldr	r2, [r7, #16]
 8009e8e:	fb02 f303 	mul.w	r3, r2, r3
 8009e92:	ee07 3a90 	vmov	s15, r3
 8009e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f000 8111 	beq.w	800a0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	f000 8083 	beq.w	8009fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	f200 80a1 	bhi.w	8009ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d003      	beq.n	8009ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d056      	beq.n	8009f70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009ec2:	e099      	b.n	8009ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ec4:	4b88      	ldr	r3, [pc, #544]	; (800a0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f003 0320 	and.w	r3, r3, #32
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d02d      	beq.n	8009f2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ed0:	4b85      	ldr	r3, [pc, #532]	; (800a0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	08db      	lsrs	r3, r3, #3
 8009ed6:	f003 0303 	and.w	r3, r3, #3
 8009eda:	4a84      	ldr	r2, [pc, #528]	; (800a0ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009edc:	fa22 f303 	lsr.w	r3, r2, r3
 8009ee0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	ee07 3a90 	vmov	s15, r3
 8009ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	ee07 3a90 	vmov	s15, r3
 8009ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009efa:	4b7b      	ldr	r3, [pc, #492]	; (800a0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f02:	ee07 3a90 	vmov	s15, r3
 8009f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009f2a:	e087      	b.n	800a03c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	ee07 3a90 	vmov	s15, r3
 8009f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f3e:	4b6a      	ldr	r3, [pc, #424]	; (800a0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f46:	ee07 3a90 	vmov	s15, r3
 8009f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f52:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f6e:	e065      	b.n	800a03c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	ee07 3a90 	vmov	s15, r3
 8009f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f82:	4b59      	ldr	r3, [pc, #356]	; (800a0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f8a:	ee07 3a90 	vmov	s15, r3
 8009f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f96:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fb2:	e043      	b.n	800a03c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	ee07 3a90 	vmov	s15, r3
 8009fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a0fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fc6:	4b48      	ldr	r3, [pc, #288]	; (800a0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fce:	ee07 3a90 	vmov	s15, r3
 8009fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fda:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ff2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ff6:	e021      	b.n	800a03c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	ee07 3a90 	vmov	s15, r3
 8009ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a002:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a00a:	4b37      	ldr	r3, [pc, #220]	; (800a0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a012:	ee07 3a90 	vmov	s15, r3
 800a016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a01a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a01e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a02a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a02e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a032:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a036:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a03a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a03c:	4b2a      	ldr	r3, [pc, #168]	; (800a0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a040:	0a5b      	lsrs	r3, r3, #9
 800a042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a046:	ee07 3a90 	vmov	s15, r3
 800a04a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a04e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a052:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a056:	edd7 6a07 	vldr	s13, [r7, #28]
 800a05a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a05e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a062:	ee17 2a90 	vmov	r2, s15
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a06a:	4b1f      	ldr	r3, [pc, #124]	; (800a0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06e:	0c1b      	lsrs	r3, r3, #16
 800a070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a074:	ee07 3a90 	vmov	s15, r3
 800a078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a07c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a080:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a084:	edd7 6a07 	vldr	s13, [r7, #28]
 800a088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a08c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a090:	ee17 2a90 	vmov	r2, s15
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a098:	4b13      	ldr	r3, [pc, #76]	; (800a0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09c:	0e1b      	lsrs	r3, r3, #24
 800a09e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0a2:	ee07 3a90 	vmov	s15, r3
 800a0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0be:	ee17 2a90 	vmov	r2, s15
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a0c6:	e008      	b.n	800a0da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	609a      	str	r2, [r3, #8]
}
 800a0da:	bf00      	nop
 800a0dc:	3724      	adds	r7, #36	; 0x24
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	58024400 	.word	0x58024400
 800a0ec:	03d09000 	.word	0x03d09000
 800a0f0:	46000000 	.word	0x46000000
 800a0f4:	4c742400 	.word	0x4c742400
 800a0f8:	4a742400 	.word	0x4a742400
 800a0fc:	4af42400 	.word	0x4af42400

0800a100 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a100:	b480      	push	{r7}
 800a102:	b089      	sub	sp, #36	; 0x24
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a108:	4ba0      	ldr	r3, [pc, #640]	; (800a38c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a10c:	f003 0303 	and.w	r3, r3, #3
 800a110:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a112:	4b9e      	ldr	r3, [pc, #632]	; (800a38c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a116:	091b      	lsrs	r3, r3, #4
 800a118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a11c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a11e:	4b9b      	ldr	r3, [pc, #620]	; (800a38c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a122:	f003 0301 	and.w	r3, r3, #1
 800a126:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a128:	4b98      	ldr	r3, [pc, #608]	; (800a38c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a12a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a12c:	08db      	lsrs	r3, r3, #3
 800a12e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	fb02 f303 	mul.w	r3, r2, r3
 800a138:	ee07 3a90 	vmov	s15, r3
 800a13c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a140:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	2b00      	cmp	r3, #0
 800a148:	f000 8111 	beq.w	800a36e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	2b02      	cmp	r3, #2
 800a150:	f000 8083 	beq.w	800a25a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	2b02      	cmp	r3, #2
 800a158:	f200 80a1 	bhi.w	800a29e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d003      	beq.n	800a16a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d056      	beq.n	800a216 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a168:	e099      	b.n	800a29e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a16a:	4b88      	ldr	r3, [pc, #544]	; (800a38c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f003 0320 	and.w	r3, r3, #32
 800a172:	2b00      	cmp	r3, #0
 800a174:	d02d      	beq.n	800a1d2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a176:	4b85      	ldr	r3, [pc, #532]	; (800a38c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	08db      	lsrs	r3, r3, #3
 800a17c:	f003 0303 	and.w	r3, r3, #3
 800a180:	4a83      	ldr	r2, [pc, #524]	; (800a390 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a182:	fa22 f303 	lsr.w	r3, r2, r3
 800a186:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	ee07 3a90 	vmov	s15, r3
 800a18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	ee07 3a90 	vmov	s15, r3
 800a198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a19c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1a0:	4b7a      	ldr	r3, [pc, #488]	; (800a38c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1a8:	ee07 3a90 	vmov	s15, r3
 800a1ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1b4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a394 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1cc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a1d0:	e087      	b.n	800a2e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	ee07 3a90 	vmov	s15, r3
 800a1d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1dc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a398 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a1e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1e4:	4b69      	ldr	r3, [pc, #420]	; (800a38c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ec:	ee07 3a90 	vmov	s15, r3
 800a1f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1f8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a394 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a200:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a204:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a208:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a20c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a210:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a214:	e065      	b.n	800a2e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	ee07 3a90 	vmov	s15, r3
 800a21c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a220:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a39c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a224:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a228:	4b58      	ldr	r3, [pc, #352]	; (800a38c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a22c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a230:	ee07 3a90 	vmov	s15, r3
 800a234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a238:	ed97 6a03 	vldr	s12, [r7, #12]
 800a23c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a394 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a240:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a244:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a248:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a24c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a250:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a254:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a258:	e043      	b.n	800a2e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	ee07 3a90 	vmov	s15, r3
 800a260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a264:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a268:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a26c:	4b47      	ldr	r3, [pc, #284]	; (800a38c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a26e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a274:	ee07 3a90 	vmov	s15, r3
 800a278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a27c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a280:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a394 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a284:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a288:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a28c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a290:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a294:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a298:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a29c:	e021      	b.n	800a2e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	ee07 3a90 	vmov	s15, r3
 800a2a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a398 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a2ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2b0:	4b36      	ldr	r3, [pc, #216]	; (800a38c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2b8:	ee07 3a90 	vmov	s15, r3
 800a2bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2c4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a394 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2e0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a2e2:	4b2a      	ldr	r3, [pc, #168]	; (800a38c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e6:	0a5b      	lsrs	r3, r3, #9
 800a2e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ec:	ee07 3a90 	vmov	s15, r3
 800a2f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a308:	ee17 2a90 	vmov	r2, s15
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a310:	4b1e      	ldr	r3, [pc, #120]	; (800a38c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a314:	0c1b      	lsrs	r3, r3, #16
 800a316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a31a:	ee07 3a90 	vmov	s15, r3
 800a31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a322:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a326:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a32a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a32e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a336:	ee17 2a90 	vmov	r2, s15
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a33e:	4b13      	ldr	r3, [pc, #76]	; (800a38c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a342:	0e1b      	lsrs	r3, r3, #24
 800a344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a348:	ee07 3a90 	vmov	s15, r3
 800a34c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a350:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a354:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a358:	edd7 6a07 	vldr	s13, [r7, #28]
 800a35c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a364:	ee17 2a90 	vmov	r2, s15
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a36c:	e008      	b.n	800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	609a      	str	r2, [r3, #8]
}
 800a380:	bf00      	nop
 800a382:	3724      	adds	r7, #36	; 0x24
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr
 800a38c:	58024400 	.word	0x58024400
 800a390:	03d09000 	.word	0x03d09000
 800a394:	46000000 	.word	0x46000000
 800a398:	4c742400 	.word	0x4c742400
 800a39c:	4a742400 	.word	0x4a742400
 800a3a0:	4af42400 	.word	0x4af42400

0800a3a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3b2:	4b53      	ldr	r3, [pc, #332]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b6:	f003 0303 	and.w	r3, r3, #3
 800a3ba:	2b03      	cmp	r3, #3
 800a3bc:	d101      	bne.n	800a3c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e099      	b.n	800a4f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a3c2:	4b4f      	ldr	r3, [pc, #316]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a4e      	ldr	r2, [pc, #312]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a3c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a3cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3ce:	f7f6 fedb 	bl	8001188 <HAL_GetTick>
 800a3d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a3d4:	e008      	b.n	800a3e8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a3d6:	f7f6 fed7 	bl	8001188 <HAL_GetTick>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d901      	bls.n	800a3e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	e086      	b.n	800a4f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a3e8:	4b45      	ldr	r3, [pc, #276]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1f0      	bne.n	800a3d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a3f4:	4b42      	ldr	r3, [pc, #264]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a3f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	031b      	lsls	r3, r3, #12
 800a402:	493f      	ldr	r1, [pc, #252]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a404:	4313      	orrs	r3, r2
 800a406:	628b      	str	r3, [r1, #40]	; 0x28
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	3b01      	subs	r3, #1
 800a40e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	3b01      	subs	r3, #1
 800a418:	025b      	lsls	r3, r3, #9
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	431a      	orrs	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	3b01      	subs	r3, #1
 800a424:	041b      	lsls	r3, r3, #16
 800a426:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a42a:	431a      	orrs	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	3b01      	subs	r3, #1
 800a432:	061b      	lsls	r3, r3, #24
 800a434:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a438:	4931      	ldr	r1, [pc, #196]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a43a:	4313      	orrs	r3, r2
 800a43c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a43e:	4b30      	ldr	r3, [pc, #192]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a442:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	695b      	ldr	r3, [r3, #20]
 800a44a:	492d      	ldr	r1, [pc, #180]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a44c:	4313      	orrs	r3, r2
 800a44e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a450:	4b2b      	ldr	r3, [pc, #172]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a454:	f023 0220 	bic.w	r2, r3, #32
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	4928      	ldr	r1, [pc, #160]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a45e:	4313      	orrs	r3, r2
 800a460:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a462:	4b27      	ldr	r3, [pc, #156]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a466:	4a26      	ldr	r2, [pc, #152]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a468:	f023 0310 	bic.w	r3, r3, #16
 800a46c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a46e:	4b24      	ldr	r3, [pc, #144]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a472:	4b24      	ldr	r3, [pc, #144]	; (800a504 <RCCEx_PLL2_Config+0x160>)
 800a474:	4013      	ands	r3, r2
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	69d2      	ldr	r2, [r2, #28]
 800a47a:	00d2      	lsls	r2, r2, #3
 800a47c:	4920      	ldr	r1, [pc, #128]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a47e:	4313      	orrs	r3, r2
 800a480:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a482:	4b1f      	ldr	r3, [pc, #124]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a486:	4a1e      	ldr	r2, [pc, #120]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a488:	f043 0310 	orr.w	r3, r3, #16
 800a48c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d106      	bne.n	800a4a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a494:	4b1a      	ldr	r3, [pc, #104]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a498:	4a19      	ldr	r2, [pc, #100]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a49a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a49e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4a0:	e00f      	b.n	800a4c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d106      	bne.n	800a4b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a4a8:	4b15      	ldr	r3, [pc, #84]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ac:	4a14      	ldr	r2, [pc, #80]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4b4:	e005      	b.n	800a4c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a4b6:	4b12      	ldr	r3, [pc, #72]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ba:	4a11      	ldr	r2, [pc, #68]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a4c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a4c2:	4b0f      	ldr	r3, [pc, #60]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a0e      	ldr	r2, [pc, #56]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a4cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4ce:	f7f6 fe5b 	bl	8001188 <HAL_GetTick>
 800a4d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4d4:	e008      	b.n	800a4e8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a4d6:	f7f6 fe57 	bl	8001188 <HAL_GetTick>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	d901      	bls.n	800a4e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e006      	b.n	800a4f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4e8:	4b05      	ldr	r3, [pc, #20]	; (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d0f0      	beq.n	800a4d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	58024400 	.word	0x58024400
 800a504:	ffff0007 	.word	0xffff0007

0800a508 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a512:	2300      	movs	r3, #0
 800a514:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a516:	4b53      	ldr	r3, [pc, #332]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51a:	f003 0303 	and.w	r3, r3, #3
 800a51e:	2b03      	cmp	r3, #3
 800a520:	d101      	bne.n	800a526 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e099      	b.n	800a65a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a526:	4b4f      	ldr	r3, [pc, #316]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a4e      	ldr	r2, [pc, #312]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a52c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a532:	f7f6 fe29 	bl	8001188 <HAL_GetTick>
 800a536:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a538:	e008      	b.n	800a54c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a53a:	f7f6 fe25 	bl	8001188 <HAL_GetTick>
 800a53e:	4602      	mov	r2, r0
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	2b02      	cmp	r3, #2
 800a546:	d901      	bls.n	800a54c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a548:	2303      	movs	r3, #3
 800a54a:	e086      	b.n	800a65a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a54c:	4b45      	ldr	r3, [pc, #276]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a554:	2b00      	cmp	r3, #0
 800a556:	d1f0      	bne.n	800a53a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a558:	4b42      	ldr	r3, [pc, #264]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	051b      	lsls	r3, r3, #20
 800a566:	493f      	ldr	r1, [pc, #252]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a568:	4313      	orrs	r3, r2
 800a56a:	628b      	str	r3, [r1, #40]	; 0x28
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	3b01      	subs	r3, #1
 800a572:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	3b01      	subs	r3, #1
 800a57c:	025b      	lsls	r3, r3, #9
 800a57e:	b29b      	uxth	r3, r3
 800a580:	431a      	orrs	r2, r3
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	3b01      	subs	r3, #1
 800a588:	041b      	lsls	r3, r3, #16
 800a58a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a58e:	431a      	orrs	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	3b01      	subs	r3, #1
 800a596:	061b      	lsls	r3, r3, #24
 800a598:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a59c:	4931      	ldr	r1, [pc, #196]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a5a2:	4b30      	ldr	r3, [pc, #192]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	695b      	ldr	r3, [r3, #20]
 800a5ae:	492d      	ldr	r1, [pc, #180]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a5b4:	4b2b      	ldr	r3, [pc, #172]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	4928      	ldr	r1, [pc, #160]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a5c6:	4b27      	ldr	r3, [pc, #156]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ca:	4a26      	ldr	r2, [pc, #152]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a5d2:	4b24      	ldr	r3, [pc, #144]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5d6:	4b24      	ldr	r3, [pc, #144]	; (800a668 <RCCEx_PLL3_Config+0x160>)
 800a5d8:	4013      	ands	r3, r2
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	69d2      	ldr	r2, [r2, #28]
 800a5de:	00d2      	lsls	r2, r2, #3
 800a5e0:	4920      	ldr	r1, [pc, #128]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a5e6:	4b1f      	ldr	r3, [pc, #124]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ea:	4a1e      	ldr	r2, [pc, #120]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d106      	bne.n	800a606 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a5f8:	4b1a      	ldr	r3, [pc, #104]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fc:	4a19      	ldr	r2, [pc, #100]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a602:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a604:	e00f      	b.n	800a626 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d106      	bne.n	800a61a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a60c:	4b15      	ldr	r3, [pc, #84]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a610:	4a14      	ldr	r2, [pc, #80]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a612:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a616:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a618:	e005      	b.n	800a626 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a61a:	4b12      	ldr	r3, [pc, #72]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a61e:	4a11      	ldr	r2, [pc, #68]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a620:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a624:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a626:	4b0f      	ldr	r3, [pc, #60]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a0e      	ldr	r2, [pc, #56]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a62c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a632:	f7f6 fda9 	bl	8001188 <HAL_GetTick>
 800a636:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a638:	e008      	b.n	800a64c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a63a:	f7f6 fda5 	bl	8001188 <HAL_GetTick>
 800a63e:	4602      	mov	r2, r0
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	1ad3      	subs	r3, r2, r3
 800a644:	2b02      	cmp	r3, #2
 800a646:	d901      	bls.n	800a64c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a648:	2303      	movs	r3, #3
 800a64a:	e006      	b.n	800a65a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a64c:	4b05      	ldr	r3, [pc, #20]	; (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a654:	2b00      	cmp	r3, #0
 800a656:	d0f0      	beq.n	800a63a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a658:	7bfb      	ldrb	r3, [r7, #15]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	58024400 	.word	0x58024400
 800a668:	ffff0007 	.word	0xffff0007

0800a66c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e049      	b.n	800a712 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a684:	b2db      	uxtb	r3, r3
 800a686:	2b00      	cmp	r3, #0
 800a688:	d106      	bne.n	800a698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7f6 fbd0 	bl	8000e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2202      	movs	r2, #2
 800a69c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	3304      	adds	r3, #4
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	4610      	mov	r0, r2
 800a6ac:	f000 fb06 	bl	800acbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
	...

0800a71c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d001      	beq.n	800a734 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	e05e      	b.n	800a7f2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2202      	movs	r2, #2
 800a738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68da      	ldr	r2, [r3, #12]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f042 0201 	orr.w	r2, r2, #1
 800a74a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a2b      	ldr	r2, [pc, #172]	; (800a800 <HAL_TIM_Base_Start_IT+0xe4>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d02c      	beq.n	800a7b0 <HAL_TIM_Base_Start_IT+0x94>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a75e:	d027      	beq.n	800a7b0 <HAL_TIM_Base_Start_IT+0x94>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a27      	ldr	r2, [pc, #156]	; (800a804 <HAL_TIM_Base_Start_IT+0xe8>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d022      	beq.n	800a7b0 <HAL_TIM_Base_Start_IT+0x94>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a26      	ldr	r2, [pc, #152]	; (800a808 <HAL_TIM_Base_Start_IT+0xec>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d01d      	beq.n	800a7b0 <HAL_TIM_Base_Start_IT+0x94>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a24      	ldr	r2, [pc, #144]	; (800a80c <HAL_TIM_Base_Start_IT+0xf0>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d018      	beq.n	800a7b0 <HAL_TIM_Base_Start_IT+0x94>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a23      	ldr	r2, [pc, #140]	; (800a810 <HAL_TIM_Base_Start_IT+0xf4>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d013      	beq.n	800a7b0 <HAL_TIM_Base_Start_IT+0x94>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a21      	ldr	r2, [pc, #132]	; (800a814 <HAL_TIM_Base_Start_IT+0xf8>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d00e      	beq.n	800a7b0 <HAL_TIM_Base_Start_IT+0x94>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a20      	ldr	r2, [pc, #128]	; (800a818 <HAL_TIM_Base_Start_IT+0xfc>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d009      	beq.n	800a7b0 <HAL_TIM_Base_Start_IT+0x94>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a1e      	ldr	r2, [pc, #120]	; (800a81c <HAL_TIM_Base_Start_IT+0x100>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d004      	beq.n	800a7b0 <HAL_TIM_Base_Start_IT+0x94>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a1d      	ldr	r2, [pc, #116]	; (800a820 <HAL_TIM_Base_Start_IT+0x104>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d115      	bne.n	800a7dc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	689a      	ldr	r2, [r3, #8]
 800a7b6:	4b1b      	ldr	r3, [pc, #108]	; (800a824 <HAL_TIM_Base_Start_IT+0x108>)
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2b06      	cmp	r3, #6
 800a7c0:	d015      	beq.n	800a7ee <HAL_TIM_Base_Start_IT+0xd2>
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7c8:	d011      	beq.n	800a7ee <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f042 0201 	orr.w	r2, r2, #1
 800a7d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7da:	e008      	b.n	800a7ee <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f042 0201 	orr.w	r2, r2, #1
 800a7ea:	601a      	str	r2, [r3, #0]
 800a7ec:	e000      	b.n	800a7f0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a7f0:	2300      	movs	r3, #0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3714      	adds	r7, #20
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	40010000 	.word	0x40010000
 800a804:	40000400 	.word	0x40000400
 800a808:	40000800 	.word	0x40000800
 800a80c:	40000c00 	.word	0x40000c00
 800a810:	40010400 	.word	0x40010400
 800a814:	40001800 	.word	0x40001800
 800a818:	40014000 	.word	0x40014000
 800a81c:	4000e000 	.word	0x4000e000
 800a820:	4000e400 	.word	0x4000e400
 800a824:	00010007 	.word	0x00010007

0800a828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	f003 0302 	and.w	r3, r3, #2
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d122      	bne.n	800a884 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	f003 0302 	and.w	r3, r3, #2
 800a848:	2b02      	cmp	r3, #2
 800a84a:	d11b      	bne.n	800a884 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f06f 0202 	mvn.w	r2, #2
 800a854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2201      	movs	r2, #1
 800a85a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	699b      	ldr	r3, [r3, #24]
 800a862:	f003 0303 	and.w	r3, r3, #3
 800a866:	2b00      	cmp	r3, #0
 800a868:	d003      	beq.n	800a872 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fa08 	bl	800ac80 <HAL_TIM_IC_CaptureCallback>
 800a870:	e005      	b.n	800a87e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 f9fa 	bl	800ac6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 fa0b 	bl	800ac94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	f003 0304 	and.w	r3, r3, #4
 800a88e:	2b04      	cmp	r3, #4
 800a890:	d122      	bne.n	800a8d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	f003 0304 	and.w	r3, r3, #4
 800a89c:	2b04      	cmp	r3, #4
 800a89e:	d11b      	bne.n	800a8d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f06f 0204 	mvn.w	r2, #4
 800a8a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2202      	movs	r2, #2
 800a8ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	699b      	ldr	r3, [r3, #24]
 800a8b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d003      	beq.n	800a8c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 f9de 	bl	800ac80 <HAL_TIM_IC_CaptureCallback>
 800a8c4:	e005      	b.n	800a8d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 f9d0 	bl	800ac6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 f9e1 	bl	800ac94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	f003 0308 	and.w	r3, r3, #8
 800a8e2:	2b08      	cmp	r3, #8
 800a8e4:	d122      	bne.n	800a92c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	f003 0308 	and.w	r3, r3, #8
 800a8f0:	2b08      	cmp	r3, #8
 800a8f2:	d11b      	bne.n	800a92c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f06f 0208 	mvn.w	r2, #8
 800a8fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2204      	movs	r2, #4
 800a902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	69db      	ldr	r3, [r3, #28]
 800a90a:	f003 0303 	and.w	r3, r3, #3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d003      	beq.n	800a91a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 f9b4 	bl	800ac80 <HAL_TIM_IC_CaptureCallback>
 800a918:	e005      	b.n	800a926 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f9a6 	bl	800ac6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 f9b7 	bl	800ac94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	f003 0310 	and.w	r3, r3, #16
 800a936:	2b10      	cmp	r3, #16
 800a938:	d122      	bne.n	800a980 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	f003 0310 	and.w	r3, r3, #16
 800a944:	2b10      	cmp	r3, #16
 800a946:	d11b      	bne.n	800a980 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f06f 0210 	mvn.w	r2, #16
 800a950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2208      	movs	r2, #8
 800a956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	69db      	ldr	r3, [r3, #28]
 800a95e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a962:	2b00      	cmp	r3, #0
 800a964:	d003      	beq.n	800a96e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f98a 	bl	800ac80 <HAL_TIM_IC_CaptureCallback>
 800a96c:	e005      	b.n	800a97a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f97c 	bl	800ac6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 f98d 	bl	800ac94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	691b      	ldr	r3, [r3, #16]
 800a986:	f003 0301 	and.w	r3, r3, #1
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d10e      	bne.n	800a9ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	f003 0301 	and.w	r3, r3, #1
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d107      	bne.n	800a9ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f06f 0201 	mvn.w	r2, #1
 800a9a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f956 	bl	800ac58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	691b      	ldr	r3, [r3, #16]
 800a9b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9b6:	2b80      	cmp	r3, #128	; 0x80
 800a9b8:	d10e      	bne.n	800a9d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9c4:	2b80      	cmp	r3, #128	; 0x80
 800a9c6:	d107      	bne.n	800a9d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a9d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 fb5c 	bl	800b090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9e6:	d10e      	bne.n	800aa06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9f2:	2b80      	cmp	r3, #128	; 0x80
 800a9f4:	d107      	bne.n	800aa06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a9fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fb4f 	bl	800b0a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa10:	2b40      	cmp	r3, #64	; 0x40
 800aa12:	d10e      	bne.n	800aa32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa1e:	2b40      	cmp	r3, #64	; 0x40
 800aa20:	d107      	bne.n	800aa32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 f93b 	bl	800aca8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	691b      	ldr	r3, [r3, #16]
 800aa38:	f003 0320 	and.w	r3, r3, #32
 800aa3c:	2b20      	cmp	r3, #32
 800aa3e:	d10e      	bne.n	800aa5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	f003 0320 	and.w	r3, r3, #32
 800aa4a:	2b20      	cmp	r3, #32
 800aa4c:	d107      	bne.n	800aa5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f06f 0220 	mvn.w	r2, #32
 800aa56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 fb0f 	bl	800b07c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa5e:	bf00      	nop
 800aa60:	3708      	adds	r7, #8
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
	...

0800aa68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa72:	2300      	movs	r3, #0
 800aa74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d101      	bne.n	800aa84 <HAL_TIM_ConfigClockSource+0x1c>
 800aa80:	2302      	movs	r3, #2
 800aa82:	e0dc      	b.n	800ac3e <HAL_TIM_ConfigClockSource+0x1d6>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2202      	movs	r2, #2
 800aa90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aa9c:	68ba      	ldr	r2, [r7, #8]
 800aa9e:	4b6a      	ldr	r3, [pc, #424]	; (800ac48 <HAL_TIM_ConfigClockSource+0x1e0>)
 800aaa0:	4013      	ands	r3, r2
 800aaa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aaaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	68ba      	ldr	r2, [r7, #8]
 800aab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a64      	ldr	r2, [pc, #400]	; (800ac4c <HAL_TIM_ConfigClockSource+0x1e4>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	f000 80a9 	beq.w	800ac12 <HAL_TIM_ConfigClockSource+0x1aa>
 800aac0:	4a62      	ldr	r2, [pc, #392]	; (800ac4c <HAL_TIM_ConfigClockSource+0x1e4>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	f200 80ae 	bhi.w	800ac24 <HAL_TIM_ConfigClockSource+0x1bc>
 800aac8:	4a61      	ldr	r2, [pc, #388]	; (800ac50 <HAL_TIM_ConfigClockSource+0x1e8>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	f000 80a1 	beq.w	800ac12 <HAL_TIM_ConfigClockSource+0x1aa>
 800aad0:	4a5f      	ldr	r2, [pc, #380]	; (800ac50 <HAL_TIM_ConfigClockSource+0x1e8>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	f200 80a6 	bhi.w	800ac24 <HAL_TIM_ConfigClockSource+0x1bc>
 800aad8:	4a5e      	ldr	r2, [pc, #376]	; (800ac54 <HAL_TIM_ConfigClockSource+0x1ec>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	f000 8099 	beq.w	800ac12 <HAL_TIM_ConfigClockSource+0x1aa>
 800aae0:	4a5c      	ldr	r2, [pc, #368]	; (800ac54 <HAL_TIM_ConfigClockSource+0x1ec>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	f200 809e 	bhi.w	800ac24 <HAL_TIM_ConfigClockSource+0x1bc>
 800aae8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aaec:	f000 8091 	beq.w	800ac12 <HAL_TIM_ConfigClockSource+0x1aa>
 800aaf0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aaf4:	f200 8096 	bhi.w	800ac24 <HAL_TIM_ConfigClockSource+0x1bc>
 800aaf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aafc:	f000 8089 	beq.w	800ac12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ab00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab04:	f200 808e 	bhi.w	800ac24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab0c:	d03e      	beq.n	800ab8c <HAL_TIM_ConfigClockSource+0x124>
 800ab0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab12:	f200 8087 	bhi.w	800ac24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab1a:	f000 8086 	beq.w	800ac2a <HAL_TIM_ConfigClockSource+0x1c2>
 800ab1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab22:	d87f      	bhi.n	800ac24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab24:	2b70      	cmp	r3, #112	; 0x70
 800ab26:	d01a      	beq.n	800ab5e <HAL_TIM_ConfigClockSource+0xf6>
 800ab28:	2b70      	cmp	r3, #112	; 0x70
 800ab2a:	d87b      	bhi.n	800ac24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab2c:	2b60      	cmp	r3, #96	; 0x60
 800ab2e:	d050      	beq.n	800abd2 <HAL_TIM_ConfigClockSource+0x16a>
 800ab30:	2b60      	cmp	r3, #96	; 0x60
 800ab32:	d877      	bhi.n	800ac24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab34:	2b50      	cmp	r3, #80	; 0x50
 800ab36:	d03c      	beq.n	800abb2 <HAL_TIM_ConfigClockSource+0x14a>
 800ab38:	2b50      	cmp	r3, #80	; 0x50
 800ab3a:	d873      	bhi.n	800ac24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab3c:	2b40      	cmp	r3, #64	; 0x40
 800ab3e:	d058      	beq.n	800abf2 <HAL_TIM_ConfigClockSource+0x18a>
 800ab40:	2b40      	cmp	r3, #64	; 0x40
 800ab42:	d86f      	bhi.n	800ac24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab44:	2b30      	cmp	r3, #48	; 0x30
 800ab46:	d064      	beq.n	800ac12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ab48:	2b30      	cmp	r3, #48	; 0x30
 800ab4a:	d86b      	bhi.n	800ac24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab4c:	2b20      	cmp	r3, #32
 800ab4e:	d060      	beq.n	800ac12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ab50:	2b20      	cmp	r3, #32
 800ab52:	d867      	bhi.n	800ac24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d05c      	beq.n	800ac12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ab58:	2b10      	cmp	r3, #16
 800ab5a:	d05a      	beq.n	800ac12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ab5c:	e062      	b.n	800ac24 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6818      	ldr	r0, [r3, #0]
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	6899      	ldr	r1, [r3, #8]
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	685a      	ldr	r2, [r3, #4]
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	f000 f9c9 	bl	800af04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ab80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68ba      	ldr	r2, [r7, #8]
 800ab88:	609a      	str	r2, [r3, #8]
      break;
 800ab8a:	e04f      	b.n	800ac2c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6818      	ldr	r0, [r3, #0]
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	6899      	ldr	r1, [r3, #8]
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	685a      	ldr	r2, [r3, #4]
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	f000 f9b2 	bl	800af04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	689a      	ldr	r2, [r3, #8]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800abae:	609a      	str	r2, [r3, #8]
      break;
 800abb0:	e03c      	b.n	800ac2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6818      	ldr	r0, [r3, #0]
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	6859      	ldr	r1, [r3, #4]
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	461a      	mov	r2, r3
 800abc0:	f000 f922 	bl	800ae08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2150      	movs	r1, #80	; 0x50
 800abca:	4618      	mov	r0, r3
 800abcc:	f000 f97c 	bl	800aec8 <TIM_ITRx_SetConfig>
      break;
 800abd0:	e02c      	b.n	800ac2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6818      	ldr	r0, [r3, #0]
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	6859      	ldr	r1, [r3, #4]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	461a      	mov	r2, r3
 800abe0:	f000 f941 	bl	800ae66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2160      	movs	r1, #96	; 0x60
 800abea:	4618      	mov	r0, r3
 800abec:	f000 f96c 	bl	800aec8 <TIM_ITRx_SetConfig>
      break;
 800abf0:	e01c      	b.n	800ac2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6818      	ldr	r0, [r3, #0]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	6859      	ldr	r1, [r3, #4]
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	461a      	mov	r2, r3
 800ac00:	f000 f902 	bl	800ae08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2140      	movs	r1, #64	; 0x40
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f000 f95c 	bl	800aec8 <TIM_ITRx_SetConfig>
      break;
 800ac10:	e00c      	b.n	800ac2c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	f000 f953 	bl	800aec8 <TIM_ITRx_SetConfig>
      break;
 800ac22:	e003      	b.n	800ac2c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	73fb      	strb	r3, [r7, #15]
      break;
 800ac28:	e000      	b.n	800ac2c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ac2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	ffceff88 	.word	0xffceff88
 800ac4c:	00100040 	.word	0x00100040
 800ac50:	00100030 	.word	0x00100030
 800ac54:	00100020 	.word	0x00100020

0800ac58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac74:	bf00      	nop
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac9c:	bf00      	nop
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4a44      	ldr	r2, [pc, #272]	; (800ade0 <TIM_Base_SetConfig+0x124>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d013      	beq.n	800acfc <TIM_Base_SetConfig+0x40>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acda:	d00f      	beq.n	800acfc <TIM_Base_SetConfig+0x40>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a41      	ldr	r2, [pc, #260]	; (800ade4 <TIM_Base_SetConfig+0x128>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d00b      	beq.n	800acfc <TIM_Base_SetConfig+0x40>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4a40      	ldr	r2, [pc, #256]	; (800ade8 <TIM_Base_SetConfig+0x12c>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d007      	beq.n	800acfc <TIM_Base_SetConfig+0x40>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4a3f      	ldr	r2, [pc, #252]	; (800adec <TIM_Base_SetConfig+0x130>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d003      	beq.n	800acfc <TIM_Base_SetConfig+0x40>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a3e      	ldr	r2, [pc, #248]	; (800adf0 <TIM_Base_SetConfig+0x134>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d108      	bne.n	800ad0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4a33      	ldr	r2, [pc, #204]	; (800ade0 <TIM_Base_SetConfig+0x124>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d027      	beq.n	800ad66 <TIM_Base_SetConfig+0xaa>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad1c:	d023      	beq.n	800ad66 <TIM_Base_SetConfig+0xaa>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a30      	ldr	r2, [pc, #192]	; (800ade4 <TIM_Base_SetConfig+0x128>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d01f      	beq.n	800ad66 <TIM_Base_SetConfig+0xaa>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4a2f      	ldr	r2, [pc, #188]	; (800ade8 <TIM_Base_SetConfig+0x12c>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d01b      	beq.n	800ad66 <TIM_Base_SetConfig+0xaa>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a2e      	ldr	r2, [pc, #184]	; (800adec <TIM_Base_SetConfig+0x130>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d017      	beq.n	800ad66 <TIM_Base_SetConfig+0xaa>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4a2d      	ldr	r2, [pc, #180]	; (800adf0 <TIM_Base_SetConfig+0x134>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d013      	beq.n	800ad66 <TIM_Base_SetConfig+0xaa>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a2c      	ldr	r2, [pc, #176]	; (800adf4 <TIM_Base_SetConfig+0x138>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d00f      	beq.n	800ad66 <TIM_Base_SetConfig+0xaa>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4a2b      	ldr	r2, [pc, #172]	; (800adf8 <TIM_Base_SetConfig+0x13c>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d00b      	beq.n	800ad66 <TIM_Base_SetConfig+0xaa>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a2a      	ldr	r2, [pc, #168]	; (800adfc <TIM_Base_SetConfig+0x140>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d007      	beq.n	800ad66 <TIM_Base_SetConfig+0xaa>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4a29      	ldr	r2, [pc, #164]	; (800ae00 <TIM_Base_SetConfig+0x144>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d003      	beq.n	800ad66 <TIM_Base_SetConfig+0xaa>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	4a28      	ldr	r2, [pc, #160]	; (800ae04 <TIM_Base_SetConfig+0x148>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d108      	bne.n	800ad78 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	4313      	orrs	r3, r2
 800ad76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	695b      	ldr	r3, [r3, #20]
 800ad82:	4313      	orrs	r3, r2
 800ad84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	689a      	ldr	r2, [r3, #8]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4a10      	ldr	r2, [pc, #64]	; (800ade0 <TIM_Base_SetConfig+0x124>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d00f      	beq.n	800adc4 <TIM_Base_SetConfig+0x108>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4a12      	ldr	r2, [pc, #72]	; (800adf0 <TIM_Base_SetConfig+0x134>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d00b      	beq.n	800adc4 <TIM_Base_SetConfig+0x108>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4a11      	ldr	r2, [pc, #68]	; (800adf4 <TIM_Base_SetConfig+0x138>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d007      	beq.n	800adc4 <TIM_Base_SetConfig+0x108>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a10      	ldr	r2, [pc, #64]	; (800adf8 <TIM_Base_SetConfig+0x13c>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d003      	beq.n	800adc4 <TIM_Base_SetConfig+0x108>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a0f      	ldr	r2, [pc, #60]	; (800adfc <TIM_Base_SetConfig+0x140>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d103      	bne.n	800adcc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	691a      	ldr	r2, [r3, #16]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2201      	movs	r2, #1
 800add0:	615a      	str	r2, [r3, #20]
}
 800add2:	bf00      	nop
 800add4:	3714      	adds	r7, #20
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
 800adde:	bf00      	nop
 800ade0:	40010000 	.word	0x40010000
 800ade4:	40000400 	.word	0x40000400
 800ade8:	40000800 	.word	0x40000800
 800adec:	40000c00 	.word	0x40000c00
 800adf0:	40010400 	.word	0x40010400
 800adf4:	40014000 	.word	0x40014000
 800adf8:	40014400 	.word	0x40014400
 800adfc:	40014800 	.word	0x40014800
 800ae00:	4000e000 	.word	0x4000e000
 800ae04:	4000e400 	.word	0x4000e400

0800ae08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b087      	sub	sp, #28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6a1b      	ldr	r3, [r3, #32]
 800ae18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6a1b      	ldr	r3, [r3, #32]
 800ae1e:	f023 0201 	bic.w	r2, r3, #1
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	699b      	ldr	r3, [r3, #24]
 800ae2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	011b      	lsls	r3, r3, #4
 800ae38:	693a      	ldr	r2, [r7, #16]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	f023 030a 	bic.w	r3, r3, #10
 800ae44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	693a      	ldr	r2, [r7, #16]
 800ae52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	697a      	ldr	r2, [r7, #20]
 800ae58:	621a      	str	r2, [r3, #32]
}
 800ae5a:	bf00      	nop
 800ae5c:	371c      	adds	r7, #28
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae66:	b480      	push	{r7}
 800ae68:	b087      	sub	sp, #28
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	60f8      	str	r0, [r7, #12]
 800ae6e:	60b9      	str	r1, [r7, #8]
 800ae70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	f023 0210 	bic.w	r2, r3, #16
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	699b      	ldr	r3, [r3, #24]
 800ae82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6a1b      	ldr	r3, [r3, #32]
 800ae88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	031b      	lsls	r3, r3, #12
 800ae96:	697a      	ldr	r2, [r7, #20]
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aea2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	011b      	lsls	r3, r3, #4
 800aea8:	693a      	ldr	r2, [r7, #16]
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	697a      	ldr	r2, [r7, #20]
 800aeb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	693a      	ldr	r2, [r7, #16]
 800aeb8:	621a      	str	r2, [r3, #32]
}
 800aeba:	bf00      	nop
 800aebc:	371c      	adds	r7, #28
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr
	...

0800aec8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	4b09      	ldr	r3, [pc, #36]	; (800af00 <TIM_ITRx_SetConfig+0x38>)
 800aedc:	4013      	ands	r3, r2
 800aede:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aee0:	683a      	ldr	r2, [r7, #0]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	4313      	orrs	r3, r2
 800aee6:	f043 0307 	orr.w	r3, r3, #7
 800aeea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	609a      	str	r2, [r3, #8]
}
 800aef2:	bf00      	nop
 800aef4:	3714      	adds	r7, #20
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	ffcfff8f 	.word	0xffcfff8f

0800af04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af04:	b480      	push	{r7}
 800af06:	b087      	sub	sp, #28
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	607a      	str	r2, [r7, #4]
 800af10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	021a      	lsls	r2, r3, #8
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	431a      	orrs	r2, r3
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	697a      	ldr	r2, [r7, #20]
 800af2e:	4313      	orrs	r3, r2
 800af30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	697a      	ldr	r2, [r7, #20]
 800af36:	609a      	str	r2, [r3, #8]
}
 800af38:	bf00      	nop
 800af3a:	371c      	adds	r7, #28
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af44:	b480      	push	{r7}
 800af46:	b085      	sub	sp, #20
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af54:	2b01      	cmp	r3, #1
 800af56:	d101      	bne.n	800af5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af58:	2302      	movs	r3, #2
 800af5a:	e077      	b.n	800b04c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2201      	movs	r2, #1
 800af60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2202      	movs	r2, #2
 800af68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a35      	ldr	r2, [pc, #212]	; (800b058 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d004      	beq.n	800af90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a34      	ldr	r2, [pc, #208]	; (800b05c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d108      	bne.n	800afa2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afa8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	4313      	orrs	r3, r2
 800afb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a25      	ldr	r2, [pc, #148]	; (800b058 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d02c      	beq.n	800b020 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afce:	d027      	beq.n	800b020 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a22      	ldr	r2, [pc, #136]	; (800b060 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d022      	beq.n	800b020 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a21      	ldr	r2, [pc, #132]	; (800b064 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d01d      	beq.n	800b020 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a1f      	ldr	r2, [pc, #124]	; (800b068 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d018      	beq.n	800b020 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a1a      	ldr	r2, [pc, #104]	; (800b05c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d013      	beq.n	800b020 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4a1b      	ldr	r2, [pc, #108]	; (800b06c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d00e      	beq.n	800b020 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a1a      	ldr	r2, [pc, #104]	; (800b070 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d009      	beq.n	800b020 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a18      	ldr	r2, [pc, #96]	; (800b074 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d004      	beq.n	800b020 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a17      	ldr	r2, [pc, #92]	; (800b078 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d10c      	bne.n	800b03a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b026:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	68ba      	ldr	r2, [r7, #8]
 800b02e:	4313      	orrs	r3, r2
 800b030:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2201      	movs	r2, #1
 800b03e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3714      	adds	r7, #20
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	40010000 	.word	0x40010000
 800b05c:	40010400 	.word	0x40010400
 800b060:	40000400 	.word	0x40000400
 800b064:	40000800 	.word	0x40000800
 800b068:	40000c00 	.word	0x40000c00
 800b06c:	40001800 	.word	0x40001800
 800b070:	40014000 	.word	0x40014000
 800b074:	4000e000 	.word	0x4000e000
 800b078:	4000e400 	.word	0x4000e400

0800b07c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b084:	bf00      	nop
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b098:	bf00      	nop
 800b09a:	370c      	adds	r7, #12
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr

0800b0a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b0ac:	bf00      	nop
 800b0ae:	370c      	adds	r7, #12
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <__libc_init_array>:
 800b0b8:	b570      	push	{r4, r5, r6, lr}
 800b0ba:	4d0d      	ldr	r5, [pc, #52]	; (800b0f0 <__libc_init_array+0x38>)
 800b0bc:	4c0d      	ldr	r4, [pc, #52]	; (800b0f4 <__libc_init_array+0x3c>)
 800b0be:	1b64      	subs	r4, r4, r5
 800b0c0:	10a4      	asrs	r4, r4, #2
 800b0c2:	2600      	movs	r6, #0
 800b0c4:	42a6      	cmp	r6, r4
 800b0c6:	d109      	bne.n	800b0dc <__libc_init_array+0x24>
 800b0c8:	4d0b      	ldr	r5, [pc, #44]	; (800b0f8 <__libc_init_array+0x40>)
 800b0ca:	4c0c      	ldr	r4, [pc, #48]	; (800b0fc <__libc_init_array+0x44>)
 800b0cc:	f000 f82e 	bl	800b12c <_init>
 800b0d0:	1b64      	subs	r4, r4, r5
 800b0d2:	10a4      	asrs	r4, r4, #2
 800b0d4:	2600      	movs	r6, #0
 800b0d6:	42a6      	cmp	r6, r4
 800b0d8:	d105      	bne.n	800b0e6 <__libc_init_array+0x2e>
 800b0da:	bd70      	pop	{r4, r5, r6, pc}
 800b0dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0e0:	4798      	blx	r3
 800b0e2:	3601      	adds	r6, #1
 800b0e4:	e7ee      	b.n	800b0c4 <__libc_init_array+0xc>
 800b0e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0ea:	4798      	blx	r3
 800b0ec:	3601      	adds	r6, #1
 800b0ee:	e7f2      	b.n	800b0d6 <__libc_init_array+0x1e>
 800b0f0:	0800b1b8 	.word	0x0800b1b8
 800b0f4:	0800b1b8 	.word	0x0800b1b8
 800b0f8:	0800b1b8 	.word	0x0800b1b8
 800b0fc:	0800b1bc 	.word	0x0800b1bc

0800b100 <memcpy>:
 800b100:	440a      	add	r2, r1
 800b102:	4291      	cmp	r1, r2
 800b104:	f100 33ff 	add.w	r3, r0, #4294967295
 800b108:	d100      	bne.n	800b10c <memcpy+0xc>
 800b10a:	4770      	bx	lr
 800b10c:	b510      	push	{r4, lr}
 800b10e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b112:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b116:	4291      	cmp	r1, r2
 800b118:	d1f9      	bne.n	800b10e <memcpy+0xe>
 800b11a:	bd10      	pop	{r4, pc}

0800b11c <memset>:
 800b11c:	4402      	add	r2, r0
 800b11e:	4603      	mov	r3, r0
 800b120:	4293      	cmp	r3, r2
 800b122:	d100      	bne.n	800b126 <memset+0xa>
 800b124:	4770      	bx	lr
 800b126:	f803 1b01 	strb.w	r1, [r3], #1
 800b12a:	e7f9      	b.n	800b120 <memset+0x4>

0800b12c <_init>:
 800b12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12e:	bf00      	nop
 800b130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b132:	bc08      	pop	{r3}
 800b134:	469e      	mov	lr, r3
 800b136:	4770      	bx	lr

0800b138 <_fini>:
 800b138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13a:	bf00      	nop
 800b13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b13e:	bc08      	pop	{r3}
 800b140:	469e      	mov	lr, r3
 800b142:	4770      	bx	lr
