
F750-DK_USBHS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a80  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002858  08007c48  08007c48  00017c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4a0  0800a4a0  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4a0  0800a4a0  0001a4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4a8  0800a4a8  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4a8  0800a4a8  0001a4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4ac  0800a4ac  0001a4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  0800a4b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a1c  20000170  0800a620  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b8c  0800a620  00021b8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecd5  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002918  00000000  00000000  0002ee75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00031790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a40  00000000  00000000  00032318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f2e  00000000  00000000  00032d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f73d  00000000  00000000  0005bc86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8d63  00000000  00000000  0006b3c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00154126  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fb4  00000000  00000000  00154178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000170 	.word	0x20000170
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007c30 	.word	0x08007c30

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000174 	.word	0x20000174
 8000204:	08007c30 	.word	0x08007c30

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050e:	f5ad 5d20 	sub.w	sp, sp, #10240	; 0x2800
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fdd2 	bl	80010be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f845 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f8ab 	bl	8000678 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000522:	f006 fc77 	bl	8006e14 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
uint8_t Buf[10240] = "QUANTTRONIX LLC\n";
 8000526:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800052a:	f6a3 0604 	subw	r6, r3, #2052	; 0x804
 800052e:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <main+0x94>)
 8000530:	4634      	mov	r4, r6
 8000532:	461d      	mov	r5, r3
 8000534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000538:	682b      	ldr	r3, [r5, #0]
 800053a:	7023      	strb	r3, [r4, #0]
 800053c:	f106 0311 	add.w	r3, r6, #17
 8000540:	f242 72ef 	movw	r2, #10223	; 0x27ef
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f007 fa6c 	bl	8007a24 <memset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(int i =0 ; i < 60;)
 800054c:	2300      	movs	r3, #0
 800054e:	f642 0204 	movw	r2, #10244	; 0x2804
 8000552:	443a      	add	r2, r7
 8000554:	6013      	str	r3, [r2, #0]
 8000556:	e018      	b.n	800058a <main+0x7e>
	   {
		  if(CDC_Transmit_HS(Buf, 10240) == HAL_OK )
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <main+0x98>)
 800055a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800055e:	f103 0308 	add.w	r3, r3, #8
 8000562:	443b      	add	r3, r7
 8000564:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000568:	4618      	mov	r0, r3
 800056a:	f006 fd11 	bl	8006f90 <CDC_Transmit_HS>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d109      	bne.n	8000588 <main+0x7c>
		  {
			  i++;
 8000574:	f642 0304 	movw	r3, #10244	; 0x2804
 8000578:	443b      	add	r3, r7
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	f642 0204 	movw	r2, #10244	; 0x2804
 8000582:	443a      	add	r2, r7
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	e000      	b.n	800058a <main+0x7e>
		  }
		  else
		  {
			  __NOP();
 8000588:	bf00      	nop
	  for(int i =0 ; i < 60;)
 800058a:	f642 0304 	movw	r3, #10244	; 0x2804
 800058e:	443b      	add	r3, r7
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b3b      	cmp	r3, #59	; 0x3b
 8000594:	dde0      	ble.n	8000558 <main+0x4c>
		  }
	   }
	   HAL_Delay(10);
 8000596:	200a      	movs	r0, #10
 8000598:	f000 fdee 	bl	8001178 <HAL_Delay>
	  for(int i =0 ; i < 60;)
 800059c:	e7d6      	b.n	800054c <main+0x40>
 800059e:	bf00      	nop
 80005a0:	08007c48 	.word	0x08007c48
 80005a4:	ffffd7fc 	.word	0xffffd7fc

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	; 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f007 fa34 	bl	8007a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <SystemClock_Config+0xc8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a27      	ldr	r2, [pc, #156]	; (8000670 <SystemClock_Config+0xc8>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b25      	ldr	r3, [pc, #148]	; (8000670 <SystemClock_Config+0xc8>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005e4:	4b23      	ldr	r3, [pc, #140]	; (8000674 <SystemClock_Config+0xcc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <SystemClock_Config+0xcc>)
 80005ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <SystemClock_Config+0xcc>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000610:	2300      	movs	r3, #0
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000614:	2308      	movs	r3, #8
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000618:	23a8      	movs	r3, #168	; 0xa8
 800061a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000620:	2302      	movs	r3, #2
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f002 fb59 	bl	8002ce0 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000634:	f000 fc74 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000644:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2105      	movs	r1, #5
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fde6 	bl	8003228 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000662:	f000 fc5d 	bl	8000f20 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b090      	sub	sp, #64	; 0x40
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800068e:	4bad      	ldr	r3, [pc, #692]	; (8000944 <MX_GPIO_Init+0x2cc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4aac      	ldr	r2, [pc, #688]	; (8000944 <MX_GPIO_Init+0x2cc>)
 8000694:	f043 0310 	orr.w	r3, r3, #16
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4baa      	ldr	r3, [pc, #680]	; (8000944 <MX_GPIO_Init+0x2cc>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0310 	and.w	r3, r3, #16
 80006a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80006a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006a6:	4ba7      	ldr	r3, [pc, #668]	; (8000944 <MX_GPIO_Init+0x2cc>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4aa6      	ldr	r2, [pc, #664]	; (8000944 <MX_GPIO_Init+0x2cc>)
 80006ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4ba4      	ldr	r3, [pc, #656]	; (8000944 <MX_GPIO_Init+0x2cc>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
 80006bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	4ba1      	ldr	r3, [pc, #644]	; (8000944 <MX_GPIO_Init+0x2cc>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4aa0      	ldr	r2, [pc, #640]	; (8000944 <MX_GPIO_Init+0x2cc>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b9e      	ldr	r3, [pc, #632]	; (8000944 <MX_GPIO_Init+0x2cc>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	623b      	str	r3, [r7, #32]
 80006d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d6:	4b9b      	ldr	r3, [pc, #620]	; (8000944 <MX_GPIO_Init+0x2cc>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a9a      	ldr	r2, [pc, #616]	; (8000944 <MX_GPIO_Init+0x2cc>)
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b98      	ldr	r3, [pc, #608]	; (8000944 <MX_GPIO_Init+0x2cc>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	61fb      	str	r3, [r7, #28]
 80006ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	4b95      	ldr	r3, [pc, #596]	; (8000944 <MX_GPIO_Init+0x2cc>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a94      	ldr	r2, [pc, #592]	; (8000944 <MX_GPIO_Init+0x2cc>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b92      	ldr	r3, [pc, #584]	; (8000944 <MX_GPIO_Init+0x2cc>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	61bb      	str	r3, [r7, #24]
 8000704:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b8f      	ldr	r3, [pc, #572]	; (8000944 <MX_GPIO_Init+0x2cc>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a8e      	ldr	r2, [pc, #568]	; (8000944 <MX_GPIO_Init+0x2cc>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b8c      	ldr	r3, [pc, #560]	; (8000944 <MX_GPIO_Init+0x2cc>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800071e:	4b89      	ldr	r3, [pc, #548]	; (8000944 <MX_GPIO_Init+0x2cc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a88      	ldr	r2, [pc, #544]	; (8000944 <MX_GPIO_Init+0x2cc>)
 8000724:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b86      	ldr	r3, [pc, #536]	; (8000944 <MX_GPIO_Init+0x2cc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000736:	4b83      	ldr	r3, [pc, #524]	; (8000944 <MX_GPIO_Init+0x2cc>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a82      	ldr	r2, [pc, #520]	; (8000944 <MX_GPIO_Init+0x2cc>)
 800073c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b80      	ldr	r3, [pc, #512]	; (8000944 <MX_GPIO_Init+0x2cc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800074e:	4b7d      	ldr	r3, [pc, #500]	; (8000944 <MX_GPIO_Init+0x2cc>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a7c      	ldr	r2, [pc, #496]	; (8000944 <MX_GPIO_Init+0x2cc>)
 8000754:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b7a      	ldr	r3, [pc, #488]	; (8000944 <MX_GPIO_Init+0x2cc>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000766:	4b77      	ldr	r3, [pc, #476]	; (8000944 <MX_GPIO_Init+0x2cc>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a76      	ldr	r2, [pc, #472]	; (8000944 <MX_GPIO_Init+0x2cc>)
 800076c:	f043 0320 	orr.w	r3, r3, #32
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b74      	ldr	r3, [pc, #464]	; (8000944 <MX_GPIO_Init+0x2cc>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0320 	and.w	r3, r3, #32
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	4b71      	ldr	r3, [pc, #452]	; (8000944 <MX_GPIO_Init+0x2cc>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a70      	ldr	r2, [pc, #448]	; (8000944 <MX_GPIO_Init+0x2cc>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b6e      	ldr	r3, [pc, #440]	; (8000944 <MX_GPIO_Init+0x2cc>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	2120      	movs	r1, #32
 800079a:	486b      	ldr	r0, [pc, #428]	; (8000948 <MX_GPIO_Init+0x2d0>)
 800079c:	f000 ffce 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f241 010c 	movw	r1, #4108	; 0x100c
 80007a6:	4869      	ldr	r0, [pc, #420]	; (800094c <MX_GPIO_Init+0x2d4>)
 80007a8:	f000 ffc8 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2108      	movs	r1, #8
 80007b0:	4867      	ldr	r0, [pc, #412]	; (8000950 <MX_GPIO_Init+0x2d8>)
 80007b2:	f000 ffc3 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007bc:	4865      	ldr	r0, [pc, #404]	; (8000954 <MX_GPIO_Init+0x2dc>)
 80007be:	f000 ffbd 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	21c8      	movs	r1, #200	; 0xc8
 80007c6:	4864      	ldr	r0, [pc, #400]	; (8000958 <MX_GPIO_Init+0x2e0>)
 80007c8:	f000 ffb8 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80007cc:	2310      	movs	r3, #16
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	2302      	movs	r3, #2
 80007d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80007dc:	230e      	movs	r3, #14
 80007de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007e4:	4619      	mov	r1, r3
 80007e6:	485d      	ldr	r0, [pc, #372]	; (800095c <MX_GPIO_Init+0x2e4>)
 80007e8:	f000 fdfc 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80007ec:	2308      	movs	r3, #8
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007fc:	4619      	mov	r1, r3
 80007fe:	4857      	ldr	r0, [pc, #348]	; (800095c <MX_GPIO_Init+0x2e4>)
 8000800:	f000 fdf0 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000804:	2304      	movs	r3, #4
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000810:	2303      	movs	r3, #3
 8000812:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000814:	2309      	movs	r3, #9
 8000816:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800081c:	4619      	mov	r1, r3
 800081e:	484f      	ldr	r0, [pc, #316]	; (800095c <MX_GPIO_Init+0x2e4>)
 8000820:	f000 fde0 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000824:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000832:	2303      	movs	r3, #3
 8000834:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000836:	230b      	movs	r3, #11
 8000838:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800083a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083e:	4619      	mov	r1, r3
 8000840:	4845      	ldr	r0, [pc, #276]	; (8000958 <MX_GPIO_Init+0x2e0>)
 8000842:	f000 fdcf 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000846:	f64f 7383 	movw	r3, #65411	; 0xff83
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000858:	230c      	movs	r3, #12
 800085a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800085c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000860:	4619      	mov	r1, r3
 8000862:	483e      	ldr	r0, [pc, #248]	; (800095c <MX_GPIO_Init+0x2e4>)
 8000864:	f000 fdbe 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000868:	f44f 7340 	mov.w	r3, #768	; 0x300
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800086e:	2312      	movs	r3, #18
 8000870:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800087a:	2304      	movs	r3, #4
 800087c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000882:	4619      	mov	r1, r3
 8000884:	4836      	ldr	r0, [pc, #216]	; (8000960 <MX_GPIO_Init+0x2e8>)
 8000886:	f000 fdad 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800088a:	2310      	movs	r3, #16
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800089a:	2302      	movs	r3, #2
 800089c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008a2:	4619      	mov	r1, r3
 80008a4:	482e      	ldr	r0, [pc, #184]	; (8000960 <MX_GPIO_Init+0x2e8>)
 80008a6:	f000 fd9d 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80008aa:	2380      	movs	r3, #128	; 0x80
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80008ba:	2308      	movs	r3, #8
 80008bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008c2:	4619      	mov	r1, r3
 80008c4:	4820      	ldr	r0, [pc, #128]	; (8000948 <MX_GPIO_Init+0x2d0>)
 80008c6:	f000 fd8d 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80008ca:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008dc:	230c      	movs	r3, #12
 80008de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e4:	4619      	mov	r1, r3
 80008e6:	481f      	ldr	r0, [pc, #124]	; (8000964 <MX_GPIO_Init+0x2ec>)
 80008e8:	f000 fd7c 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80008ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008fe:	2301      	movs	r3, #1
 8000900:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000906:	4619      	mov	r1, r3
 8000908:	4817      	ldr	r0, [pc, #92]	; (8000968 <MX_GPIO_Init+0x2f0>)
 800090a:	f000 fd6b 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800090e:	2360      	movs	r3, #96	; 0x60
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800091e:	230d      	movs	r3, #13
 8000920:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000926:	4619      	mov	r1, r3
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <MX_GPIO_Init+0x2e4>)
 800092a:	f000 fd5b 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 800092e:	2380      	movs	r3, #128	; 0x80
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800093e:	2307      	movs	r3, #7
 8000940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000942:	e013      	b.n	800096c <MX_GPIO_Init+0x2f4>
 8000944:	40023800 	.word	0x40023800
 8000948:	40020c00 	.word	0x40020c00
 800094c:	40022000 	.word	0x40022000
 8000950:	40022800 	.word	0x40022800
 8000954:	40021c00 	.word	0x40021c00
 8000958:	40021800 	.word	0x40021800
 800095c:	40021000 	.word	0x40021000
 8000960:	40020400 	.word	0x40020400
 8000964:	40020800 	.word	0x40020800
 8000968:	40020000 	.word	0x40020000
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000970:	4619      	mov	r1, r3
 8000972:	48bc      	ldr	r0, [pc, #752]	; (8000c64 <MX_GPIO_Init+0x5ec>)
 8000974:	f000 fd36 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000978:	2340      	movs	r3, #64	; 0x40
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000988:	230a      	movs	r3, #10
 800098a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000990:	4619      	mov	r1, r3
 8000992:	48b4      	ldr	r0, [pc, #720]	; (8000c64 <MX_GPIO_Init+0x5ec>)
 8000994:	f000 fd26 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000998:	f248 1333 	movw	r3, #33075	; 0x8133
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009aa:	230c      	movs	r3, #12
 80009ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009b2:	4619      	mov	r1, r3
 80009b4:	48ac      	ldr	r0, [pc, #688]	; (8000c68 <MX_GPIO_Init+0x5f0>)
 80009b6:	f000 fd15 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80009ba:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009cc:	230e      	movs	r3, #14
 80009ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d4:	4619      	mov	r1, r3
 80009d6:	48a5      	ldr	r0, [pc, #660]	; (8000c6c <MX_GPIO_Init+0x5f4>)
 80009d8:	f000 fd04 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80009dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ee:	4619      	mov	r1, r3
 80009f0:	489e      	ldr	r0, [pc, #632]	; (8000c6c <MX_GPIO_Init+0x5f4>)
 80009f2:	f000 fcf7 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80009f6:	2340      	movs	r3, #64	; 0x40
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009fa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4899      	ldr	r0, [pc, #612]	; (8000c70 <MX_GPIO_Init+0x5f8>)
 8000a0c:	f000 fcea 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a10:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a22:	230c      	movs	r3, #12
 8000a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4890      	ldr	r0, [pc, #576]	; (8000c70 <MX_GPIO_Init+0x5f8>)
 8000a2e:	f000 fcd9 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000a32:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a44:	230a      	movs	r3, #10
 8000a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4889      	ldr	r0, [pc, #548]	; (8000c74 <MX_GPIO_Init+0x5fc>)
 8000a50:	f000 fcc8 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000a54:	23f0      	movs	r3, #240	; 0xf0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a64:	230a      	movs	r3, #10
 8000a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4882      	ldr	r0, [pc, #520]	; (8000c78 <MX_GPIO_Init+0x600>)
 8000a70:	f000 fcb8 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a74:	23f7      	movs	r3, #247	; 0xf7
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a84:	230e      	movs	r3, #14
 8000a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	487b      	ldr	r0, [pc, #492]	; (8000c7c <MX_GPIO_Init+0x604>)
 8000a90:	f000 fca8 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000aa6:	2309      	movs	r3, #9
 8000aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aae:	4619      	mov	r1, r3
 8000ab0:	486d      	ldr	r0, [pc, #436]	; (8000c68 <MX_GPIO_Init+0x5f0>)
 8000ab2:	f000 fc97 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000ac8:	230a      	movs	r3, #10
 8000aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4865      	ldr	r0, [pc, #404]	; (8000c68 <MX_GPIO_Init+0x5f0>)
 8000ad4:	f000 fc86 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ad8:	2320      	movs	r3, #32
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aec:	4619      	mov	r1, r3
 8000aee:	4860      	ldr	r0, [pc, #384]	; (8000c70 <MX_GPIO_Init+0x5f8>)
 8000af0:	f000 fc78 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000af4:	2308      	movs	r3, #8
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b04:	230d      	movs	r3, #13
 8000b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4858      	ldr	r0, [pc, #352]	; (8000c70 <MX_GPIO_Init+0x5f8>)
 8000b10:	f000 fc68 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000b14:	f241 030c 	movw	r3, #4108	; 0x100c
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4852      	ldr	r0, [pc, #328]	; (8000c78 <MX_GPIO_Init+0x600>)
 8000b2e:	f000 fc59 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000b32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b44:	4619      	mov	r1, r3
 8000b46:	484e      	ldr	r0, [pc, #312]	; (8000c80 <MX_GPIO_Init+0x608>)
 8000b48:	f000 fc4c 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b4c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b5e:	230c      	movs	r3, #12
 8000b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b66:	4619      	mov	r1, r3
 8000b68:	4846      	ldr	r0, [pc, #280]	; (8000c84 <MX_GPIO_Init+0x60c>)
 8000b6a:	f000 fc3b 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000b6e:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b80:	230e      	movs	r3, #14
 8000b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b88:	4619      	mov	r1, r3
 8000b8a:	483b      	ldr	r0, [pc, #236]	; (8000c78 <MX_GPIO_Init+0x600>)
 8000b8c:	f000 fc2a 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b90:	2308      	movs	r3, #8
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4835      	ldr	r0, [pc, #212]	; (8000c7c <MX_GPIO_Init+0x604>)
 8000ba8:	f000 fc1c 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000bac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bbe:	230d      	movs	r3, #13
 8000bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4827      	ldr	r0, [pc, #156]	; (8000c68 <MX_GPIO_Init+0x5f0>)
 8000bca:	f000 fc0b 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bce:	2310      	movs	r3, #16
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bde:	4619      	mov	r1, r3
 8000be0:	4823      	ldr	r0, [pc, #140]	; (8000c70 <MX_GPIO_Init+0x5f8>)
 8000be2:	f000 fbff 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000be6:	2304      	movs	r3, #4
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bfe:	4619      	mov	r1, r3
 8000c00:	481b      	ldr	r0, [pc, #108]	; (8000c70 <MX_GPIO_Init+0x5f8>)
 8000c02:	f000 fbef 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000c06:	f248 0304 	movw	r3, #32772	; 0x8004
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c18:	4619      	mov	r1, r3
 8000c1a:	481b      	ldr	r0, [pc, #108]	; (8000c88 <MX_GPIO_Init+0x610>)
 8000c1c:	f000 fbe2 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000c20:	2302      	movs	r3, #2
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c30:	2305      	movs	r3, #5
 8000c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480f      	ldr	r0, [pc, #60]	; (8000c78 <MX_GPIO_Init+0x600>)
 8000c3c:	f000 fbd2 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c56:	4619      	mov	r1, r3
 8000c58:	480b      	ldr	r0, [pc, #44]	; (8000c88 <MX_GPIO_Init+0x610>)
 8000c5a:	f000 fbc3 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000c5e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000c62:	e013      	b.n	8000c8c <MX_GPIO_Init+0x614>
 8000c64:	40020400 	.word	0x40020400
 8000c68:	40021800 	.word	0x40021800
 8000c6c:	40022400 	.word	0x40022400
 8000c70:	40020c00 	.word	0x40020c00
 8000c74:	40020000 	.word	0x40020000
 8000c78:	40022000 	.word	0x40022000
 8000c7c:	40022800 	.word	0x40022800
 8000c80:	40020800 	.word	0x40020800
 8000c84:	40021400 	.word	0x40021400
 8000c88:	40021c00 	.word	0x40021c00
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c9a:	230d      	movs	r3, #13
 8000c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4896      	ldr	r0, [pc, #600]	; (8000f00 <MX_GPIO_Init+0x888>)
 8000ca6:	f000 fb9d 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000caa:	2301      	movs	r3, #1
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	488f      	ldr	r0, [pc, #572]	; (8000f04 <MX_GPIO_Init+0x88c>)
 8000cc6:	f000 fb8d 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000cca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cdc:	2307      	movs	r3, #7
 8000cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4888      	ldr	r0, [pc, #544]	; (8000f08 <MX_GPIO_Init+0x890>)
 8000ce8:	f000 fb7c 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000cec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d06:	4619      	mov	r1, r3
 8000d08:	487f      	ldr	r0, [pc, #508]	; (8000f08 <MX_GPIO_Init+0x890>)
 8000d0a:	f000 fb6b 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d14:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d22:	4619      	mov	r1, r3
 8000d24:	4877      	ldr	r0, [pc, #476]	; (8000f04 <MX_GPIO_Init+0x88c>)
 8000d26:	f000 fb5d 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000d2a:	23c0      	movs	r3, #192	; 0xc0
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d3a:	2308      	movs	r3, #8
 8000d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d42:	4619      	mov	r1, r3
 8000d44:	4871      	ldr	r0, [pc, #452]	; (8000f0c <MX_GPIO_Init+0x894>)
 8000d46:	f000 fb4d 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d4a:	2328      	movs	r3, #40	; 0x28
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d5a:	230c      	movs	r3, #12
 8000d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d62:	4619      	mov	r1, r3
 8000d64:	4866      	ldr	r0, [pc, #408]	; (8000f00 <MX_GPIO_Init+0x888>)
 8000d66:	f000 fb3d 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000d6a:	23c8      	movs	r3, #200	; 0xc8
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4863      	ldr	r0, [pc, #396]	; (8000f10 <MX_GPIO_Init+0x898>)
 8000d82:	f000 fb2f 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d86:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d98:	4619      	mov	r1, r3
 8000d9a:	485e      	ldr	r0, [pc, #376]	; (8000f14 <MX_GPIO_Init+0x89c>)
 8000d9c:	f000 fb22 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000da0:	2308      	movs	r3, #8
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000db0:	230c      	movs	r3, #12
 8000db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db8:	4619      	mov	r1, r3
 8000dba:	4854      	ldr	r0, [pc, #336]	; (8000f0c <MX_GPIO_Init+0x894>)
 8000dbc:	f000 fb12 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dc0:	2332      	movs	r3, #50	; 0x32
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd0:	230b      	movs	r3, #11
 8000dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd8:	4619      	mov	r1, r3
 8000dda:	484c      	ldr	r0, [pc, #304]	; (8000f0c <MX_GPIO_Init+0x894>)
 8000ddc:	f000 fb02 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000de0:	2304      	movs	r3, #4
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000df0:	2309      	movs	r3, #9
 8000df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4847      	ldr	r0, [pc, #284]	; (8000f18 <MX_GPIO_Init+0x8a0>)
 8000dfc:	f000 faf2 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000e00:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e12:	2309      	movs	r3, #9
 8000e14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	483f      	ldr	r0, [pc, #252]	; (8000f1c <MX_GPIO_Init+0x8a4>)
 8000e1e:	f000 fae1 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000e22:	2304      	movs	r3, #4
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e26:	2300      	movs	r3, #0
 8000e28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e32:	4619      	mov	r1, r3
 8000e34:	4836      	ldr	r0, [pc, #216]	; (8000f10 <MX_GPIO_Init+0x898>)
 8000e36:	f000 fad5 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e3a:	2386      	movs	r3, #134	; 0x86
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e4a:	230b      	movs	r3, #11
 8000e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e52:	4619      	mov	r1, r3
 8000e54:	482c      	ldr	r0, [pc, #176]	; (8000f08 <MX_GPIO_Init+0x890>)
 8000e56:	f000 fac5 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4826      	ldr	r0, [pc, #152]	; (8000f08 <MX_GPIO_Init+0x890>)
 8000e6e:	f000 fab9 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e72:	2350      	movs	r3, #80	; 0x50
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e82:	230d      	movs	r3, #13
 8000e84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	481e      	ldr	r0, [pc, #120]	; (8000f08 <MX_GPIO_Init+0x890>)
 8000e8e:	f000 faa9 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e92:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e98:	2312      	movs	r3, #18
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eac:	4619      	mov	r1, r3
 8000eae:	4814      	ldr	r0, [pc, #80]	; (8000f00 <MX_GPIO_Init+0x888>)
 8000eb0:	f000 fa98 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000eb4:	2340      	movs	r3, #64	; 0x40
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000ec4:	2309      	movs	r3, #9
 8000ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480c      	ldr	r0, [pc, #48]	; (8000f00 <MX_GPIO_Init+0x888>)
 8000ed0:	f000 fa88 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000ed4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ee6:	2305      	movs	r3, #5
 8000ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4809      	ldr	r0, [pc, #36]	; (8000f18 <MX_GPIO_Init+0x8a0>)
 8000ef2:	f000 fa77 	bl	80013e4 <HAL_GPIO_Init>

}
 8000ef6:	bf00      	nop
 8000ef8:	3740      	adds	r7, #64	; 0x40
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40021c00 	.word	0x40021c00
 8000f04:	40022000 	.word	0x40022000
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020800 	.word	0x40020800
 8000f10:	40021800 	.word	0x40021800
 8000f14:	40021400 	.word	0x40021400
 8000f18:	40020400 	.word	0x40020400
 8000f1c:	40020c00 	.word	0x40020c00

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <Error_Handler+0x8>
	...

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_MspInit+0x44>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <HAL_MspInit+0x44>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_MspInit+0x44>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_MspInit+0x44>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <HAL_MspInit+0x44>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f54:	6453      	str	r3, [r2, #68]	; 0x44
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_MspInit+0x44>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <NMI_Handler+0x4>

08000f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler+0x4>

08000f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc0:	f000 f8ba 	bl	8001138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <OTG_HS_IRQHandler+0x10>)
 8000fce:	f000 fd14 	bl	80019fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20001674 	.word	0x20001674

08000fdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe4:	4a14      	ldr	r2, [pc, #80]	; (8001038 <_sbrk+0x5c>)
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <_sbrk+0x60>)
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d102      	bne.n	8000ffe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <_sbrk+0x64>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <_sbrk+0x68>)
 8000ffc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	429a      	cmp	r2, r3
 800100a:	d207      	bcs.n	800101c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800100c:	f006 fcd0 	bl	80079b0 <__errno>
 8001010:	4603      	mov	r3, r0
 8001012:	220c      	movs	r2, #12
 8001014:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	e009      	b.n	8001030 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <_sbrk+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <_sbrk+0x64>)
 800102c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102e:	68fb      	ldr	r3, [r7, #12]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20050000 	.word	0x20050000
 800103c:	00000400 	.word	0x00000400
 8001040:	2000018c 	.word	0x2000018c
 8001044:	20001b90 	.word	0x20001b90

08001048 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <SystemInit+0x20>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <SystemInit+0x20>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800106c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001072:	490e      	ldr	r1, [pc, #56]	; (80010ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001074:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001088:	4c0b      	ldr	r4, [pc, #44]	; (80010b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001096:	f7ff ffd7 	bl	8001048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109a:	f006 fc8f 	bl	80079bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109e:	f7ff fa35 	bl	800050c <main>
  bx  lr    
 80010a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 80010b0:	0800a4b0 	.word	0x0800a4b0
  ldr r2, =_sbss
 80010b4:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 80010b8:	20001b8c 	.word	0x20001b8c

080010bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC_IRQHandler>

080010be <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c2:	2003      	movs	r0, #3
 80010c4:	f000 f94c 	bl	8001360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c8:	2000      	movs	r0, #0
 80010ca:	f000 f805 	bl	80010d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ce:	f7ff ff2d 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x54>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_InitTick+0x58>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f967 	bl	80013ca <HAL_SYSTICK_Config>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e00e      	b.n	8001124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d80a      	bhi.n	8001122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110c:	2200      	movs	r2, #0
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f000 f92f 	bl	8001376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <HAL_InitTick+0x5c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	e000      	b.n	8001124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000000 	.word	0x20000000
 8001130:	20000008 	.word	0x20000008
 8001134:	20000004 	.word	0x20000004

08001138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x20>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x24>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_IncTick+0x24>)
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000008 	.word	0x20000008
 800115c:	20000190 	.word	0x20000190

08001160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <HAL_GetTick+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000190 	.word	0x20000190

08001178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001180:	f7ff ffee 	bl	8001160 <HAL_GetTick>
 8001184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001190:	d005      	beq.n	800119e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_Delay+0x44>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800119e:	bf00      	nop
 80011a0:	f7ff ffde 	bl	8001160 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d8f7      	bhi.n	80011a0 <HAL_Delay+0x28>
  {
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008

080011c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <__NVIC_SetPriorityGrouping+0x40>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ee:	4a04      	ldr	r2, [pc, #16]	; (8001200 <__NVIC_SetPriorityGrouping+0x40>)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	60d3      	str	r3, [r2, #12]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00
 8001204:	05fa0000 	.word	0x05fa0000

08001208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	2b00      	cmp	r3, #0
 8001234:	db0b      	blt.n	800124e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	f003 021f 	and.w	r2, r3, #31
 800123c:	4907      	ldr	r1, [pc, #28]	; (800125c <__NVIC_EnableIRQ+0x38>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	2001      	movs	r0, #1
 8001246:	fa00 f202 	lsl.w	r2, r0, r2
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000e100 	.word	0xe000e100

08001260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0a      	blt.n	800128a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	490c      	ldr	r1, [pc, #48]	; (80012ac <__NVIC_SetPriority+0x4c>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001288:	e00a      	b.n	80012a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4908      	ldr	r1, [pc, #32]	; (80012b0 <__NVIC_SetPriority+0x50>)
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	3b04      	subs	r3, #4
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	440b      	add	r3, r1
 800129e:	761a      	strb	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf28      	it	cs
 80012d2:	2304      	movcs	r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3304      	adds	r3, #4
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d902      	bls.n	80012e4 <NVIC_EncodePriority+0x30>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b03      	subs	r3, #3
 80012e2:	e000      	b.n	80012e6 <NVIC_EncodePriority+0x32>
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43d9      	mvns	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
         );
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	; 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800132c:	d301      	bcc.n	8001332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132e:	2301      	movs	r3, #1
 8001330:	e00f      	b.n	8001352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <SysTick_Config+0x40>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133a:	210f      	movs	r1, #15
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f7ff ff8e 	bl	8001260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <SysTick_Config+0x40>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134a:	4b04      	ldr	r3, [pc, #16]	; (800135c <SysTick_Config+0x40>)
 800134c:	2207      	movs	r2, #7
 800134e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	e000e010 	.word	0xe000e010

08001360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff29 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001388:	f7ff ff3e 	bl	8001208 <__NVIC_GetPriorityGrouping>
 800138c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	68b9      	ldr	r1, [r7, #8]
 8001392:	6978      	ldr	r0, [r7, #20]
 8001394:	f7ff ff8e 	bl	80012b4 <NVIC_EncodePriority>
 8001398:	4602      	mov	r2, r0
 800139a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff5d 	bl	8001260 <__NVIC_SetPriority>
}
 80013a6:	bf00      	nop
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff31 	bl	8001224 <__NVIC_EnableIRQ>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ffa2 	bl	800131c <SysTick_Config>
 80013d8:	4603      	mov	r3, r0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	e175      	b.n	80016f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001404:	2201      	movs	r2, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	429a      	cmp	r2, r3
 800141e:	f040 8164 	bne.w	80016ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	2b01      	cmp	r3, #1
 800142c:	d005      	beq.n	800143a <HAL_GPIO_Init+0x56>
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d130      	bne.n	800149c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	2203      	movs	r2, #3
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001470:	2201      	movs	r2, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	091b      	lsrs	r3, r3, #4
 8001486:	f003 0201 	and.w	r2, r3, #1
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d017      	beq.n	80014d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d123      	bne.n	800152c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	08da      	lsrs	r2, r3, #3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3208      	adds	r2, #8
 80014ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	220f      	movs	r2, #15
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	69b9      	ldr	r1, [r7, #24]
 8001528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0203 	and.w	r2, r3, #3
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80be 	beq.w	80016ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	4b66      	ldr	r3, [pc, #408]	; (8001708 <HAL_GPIO_Init+0x324>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a65      	ldr	r2, [pc, #404]	; (8001708 <HAL_GPIO_Init+0x324>)
 8001574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b63      	ldr	r3, [pc, #396]	; (8001708 <HAL_GPIO_Init+0x324>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001586:	4a61      	ldr	r2, [pc, #388]	; (800170c <HAL_GPIO_Init+0x328>)
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	3302      	adds	r3, #2
 800158e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	220f      	movs	r2, #15
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a58      	ldr	r2, [pc, #352]	; (8001710 <HAL_GPIO_Init+0x32c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d037      	beq.n	8001622 <HAL_GPIO_Init+0x23e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a57      	ldr	r2, [pc, #348]	; (8001714 <HAL_GPIO_Init+0x330>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d031      	beq.n	800161e <HAL_GPIO_Init+0x23a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a56      	ldr	r2, [pc, #344]	; (8001718 <HAL_GPIO_Init+0x334>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d02b      	beq.n	800161a <HAL_GPIO_Init+0x236>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a55      	ldr	r2, [pc, #340]	; (800171c <HAL_GPIO_Init+0x338>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d025      	beq.n	8001616 <HAL_GPIO_Init+0x232>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a54      	ldr	r2, [pc, #336]	; (8001720 <HAL_GPIO_Init+0x33c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d01f      	beq.n	8001612 <HAL_GPIO_Init+0x22e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a53      	ldr	r2, [pc, #332]	; (8001724 <HAL_GPIO_Init+0x340>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d019      	beq.n	800160e <HAL_GPIO_Init+0x22a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a52      	ldr	r2, [pc, #328]	; (8001728 <HAL_GPIO_Init+0x344>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d013      	beq.n	800160a <HAL_GPIO_Init+0x226>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a51      	ldr	r2, [pc, #324]	; (800172c <HAL_GPIO_Init+0x348>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d00d      	beq.n	8001606 <HAL_GPIO_Init+0x222>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a50      	ldr	r2, [pc, #320]	; (8001730 <HAL_GPIO_Init+0x34c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d007      	beq.n	8001602 <HAL_GPIO_Init+0x21e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4f      	ldr	r2, [pc, #316]	; (8001734 <HAL_GPIO_Init+0x350>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d101      	bne.n	80015fe <HAL_GPIO_Init+0x21a>
 80015fa:	2309      	movs	r3, #9
 80015fc:	e012      	b.n	8001624 <HAL_GPIO_Init+0x240>
 80015fe:	230a      	movs	r3, #10
 8001600:	e010      	b.n	8001624 <HAL_GPIO_Init+0x240>
 8001602:	2308      	movs	r3, #8
 8001604:	e00e      	b.n	8001624 <HAL_GPIO_Init+0x240>
 8001606:	2307      	movs	r3, #7
 8001608:	e00c      	b.n	8001624 <HAL_GPIO_Init+0x240>
 800160a:	2306      	movs	r3, #6
 800160c:	e00a      	b.n	8001624 <HAL_GPIO_Init+0x240>
 800160e:	2305      	movs	r3, #5
 8001610:	e008      	b.n	8001624 <HAL_GPIO_Init+0x240>
 8001612:	2304      	movs	r3, #4
 8001614:	e006      	b.n	8001624 <HAL_GPIO_Init+0x240>
 8001616:	2303      	movs	r3, #3
 8001618:	e004      	b.n	8001624 <HAL_GPIO_Init+0x240>
 800161a:	2302      	movs	r3, #2
 800161c:	e002      	b.n	8001624 <HAL_GPIO_Init+0x240>
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_GPIO_Init+0x240>
 8001622:	2300      	movs	r3, #0
 8001624:	69fa      	ldr	r2, [r7, #28]
 8001626:	f002 0203 	and.w	r2, r2, #3
 800162a:	0092      	lsls	r2, r2, #2
 800162c:	4093      	lsls	r3, r2
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001634:	4935      	ldr	r1, [pc, #212]	; (800170c <HAL_GPIO_Init+0x328>)
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	3302      	adds	r3, #2
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001642:	4b3d      	ldr	r3, [pc, #244]	; (8001738 <HAL_GPIO_Init+0x354>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001666:	4a34      	ldr	r2, [pc, #208]	; (8001738 <HAL_GPIO_Init+0x354>)
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800166c:	4b32      	ldr	r3, [pc, #200]	; (8001738 <HAL_GPIO_Init+0x354>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001690:	4a29      	ldr	r2, [pc, #164]	; (8001738 <HAL_GPIO_Init+0x354>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001696:	4b28      	ldr	r3, [pc, #160]	; (8001738 <HAL_GPIO_Init+0x354>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ba:	4a1f      	ldr	r2, [pc, #124]	; (8001738 <HAL_GPIO_Init+0x354>)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c0:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <HAL_GPIO_Init+0x354>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016e4:	4a14      	ldr	r2, [pc, #80]	; (8001738 <HAL_GPIO_Init+0x354>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3301      	adds	r3, #1
 80016ee:	61fb      	str	r3, [r7, #28]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	2b0f      	cmp	r3, #15
 80016f4:	f67f ae86 	bls.w	8001404 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	3724      	adds	r7, #36	; 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800
 800170c:	40013800 	.word	0x40013800
 8001710:	40020000 	.word	0x40020000
 8001714:	40020400 	.word	0x40020400
 8001718:	40020800 	.word	0x40020800
 800171c:	40020c00 	.word	0x40020c00
 8001720:	40021000 	.word	0x40021000
 8001724:	40021400 	.word	0x40021400
 8001728:	40021800 	.word	0x40021800
 800172c:	40021c00 	.word	0x40021c00
 8001730:	40022000 	.word	0x40022000
 8001734:	40022400 	.word	0x40022400
 8001738:	40013c00 	.word	0x40013c00

0800173c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
 8001748:	4613      	mov	r3, r2
 800174a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800174c:	787b      	ldrb	r3, [r7, #1]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001758:	e003      	b.n	8001762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	041a      	lsls	r2, r3, #16
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	619a      	str	r2, [r3, #24]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800176e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001770:	b08f      	sub	sp, #60	; 0x3c
 8001772:	af0a      	add	r7, sp, #40	; 0x28
 8001774:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e116      	b.n	80019ae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d106      	bne.n	80017a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f005 fd52 	bl	8007244 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2203      	movs	r2, #3
 80017a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f001 fffb 	bl	80037ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	687e      	ldr	r6, [r7, #4]
 80017cc:	466d      	mov	r5, sp
 80017ce:	f106 0410 	add.w	r4, r6, #16
 80017d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017de:	e885 0003 	stmia.w	r5, {r0, r1}
 80017e2:	1d33      	adds	r3, r6, #4
 80017e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e6:	6838      	ldr	r0, [r7, #0]
 80017e8:	f001 fedc 	bl	80035a4 <USB_CoreInit>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d005      	beq.n	80017fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2202      	movs	r2, #2
 80017f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e0d7      	b.n	80019ae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f001 ffe9 	bl	80037dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180a:	2300      	movs	r3, #0
 800180c:	73fb      	strb	r3, [r7, #15]
 800180e:	e04a      	b.n	80018a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	333d      	adds	r3, #61	; 0x3d
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001824:	7bfa      	ldrb	r2, [r7, #15]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	333c      	adds	r3, #60	; 0x3c
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001838:	7bfa      	ldrb	r2, [r7, #15]
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	b298      	uxth	r0, r3
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4413      	add	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	3344      	adds	r3, #68	; 0x44
 800184c:	4602      	mov	r2, r0
 800184e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001850:	7bfa      	ldrb	r2, [r7, #15]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	3340      	adds	r3, #64	; 0x40
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4413      	add	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	3348      	adds	r3, #72	; 0x48
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001878:	7bfa      	ldrb	r2, [r7, #15]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4413      	add	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	334c      	adds	r3, #76	; 0x4c
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800188c:	7bfa      	ldrb	r2, [r7, #15]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	3354      	adds	r3, #84	; 0x54
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	3301      	adds	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d3af      	bcc.n	8001810 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]
 80018b4:	e044      	b.n	8001940 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018f8:	7bfa      	ldrb	r2, [r7, #15]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4413      	add	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	3301      	adds	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	429a      	cmp	r2, r3
 8001948:	d3b5      	bcc.n	80018b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	687e      	ldr	r6, [r7, #4]
 8001952:	466d      	mov	r5, sp
 8001954:	f106 0410 	add.w	r4, r6, #16
 8001958:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800195a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800195c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800195e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001960:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001964:	e885 0003 	stmia.w	r5, {r0, r1}
 8001968:	1d33      	adds	r3, r6, #4
 800196a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800196c:	6838      	ldr	r0, [r7, #0]
 800196e:	f001 ff81 	bl	8003874 <USB_DevInit>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2202      	movs	r2, #2
 800197c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e014      	b.n	80019ae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	2b01      	cmp	r3, #1
 800199a:	d102      	bne.n	80019a2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f001 f97b 	bl	8002c98 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 f8cf 	bl	8004b4a <USB_DevDisconnect>

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <HAL_PCD_Start+0x16>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e012      	b.n	80019f2 <HAL_PCD_Start+0x3c>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f001 fedd 	bl	8003798 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 f890 	bl	8004b08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019fa:	b590      	push	{r4, r7, lr}
 80019fc:	b08d      	sub	sp, #52	; 0x34
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f003 f94e 	bl	8004cb2 <USB_GetMode>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f040 84b7 	bne.w	800238c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f003 f8b2 	bl	8004b8c <USB_ReadInterrupts>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 84ad 	beq.w	800238a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 f89f 	bl	8004b8c <USB_ReadInterrupts>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d107      	bne.n	8001a68 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	695a      	ldr	r2, [r3, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f002 0202 	and.w	r2, r2, #2
 8001a66:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 f88d 	bl	8004b8c <USB_ReadInterrupts>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f003 0310 	and.w	r3, r3, #16
 8001a78:	2b10      	cmp	r3, #16
 8001a7a:	d161      	bne.n	8001b40 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699a      	ldr	r2, [r3, #24]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0210 	bic.w	r2, r2, #16
 8001a8a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f003 020f 	and.w	r2, r3, #15
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	0c5b      	lsrs	r3, r3, #17
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d124      	bne.n	8001b02 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d035      	beq.n	8001b30 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	091b      	lsrs	r3, r3, #4
 8001acc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ace:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	6a38      	ldr	r0, [r7, #32]
 8001ad8:	f002 fec4 	bl	8004864 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ae8:	441a      	add	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	6a1a      	ldr	r2, [r3, #32]
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001afa:	441a      	add	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	621a      	str	r2, [r3, #32]
 8001b00:	e016      	b.n	8001b30 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	0c5b      	lsrs	r3, r3, #17
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d110      	bne.n	8001b30 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001b14:	2208      	movs	r2, #8
 8001b16:	4619      	mov	r1, r3
 8001b18:	6a38      	ldr	r0, [r7, #32]
 8001b1a:	f002 fea3 	bl	8004864 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	6a1a      	ldr	r2, [r3, #32]
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b2a:	441a      	add	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699a      	ldr	r2, [r3, #24]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0210 	orr.w	r2, r2, #16
 8001b3e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 f821 	bl	8004b8c <USB_ReadInterrupts>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b54:	f040 80a7 	bne.w	8001ca6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 f826 	bl	8004bb2 <USB_ReadDevAllOutEpInterrupt>
 8001b66:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b68:	e099      	b.n	8001c9e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 808e 	beq.w	8001c92 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f003 f84a 	bl	8004c1a <USB_ReadDevOutEPInterrupt>
 8001b86:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00c      	beq.n	8001bac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	015a      	lsls	r2, r3, #5
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fef0 	bl	800298c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00c      	beq.n	8001bd0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	015a      	lsls	r2, r3, #5
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	2308      	movs	r3, #8
 8001bc6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001bc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 ffc6 	bl	8002b5c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d008      	beq.n	8001bec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	015a      	lsls	r2, r3, #5
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	4413      	add	r3, r2
 8001be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001be6:	461a      	mov	r2, r3
 8001be8:	2310      	movs	r3, #16
 8001bea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d030      	beq.n	8001c58 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bfe:	2b80      	cmp	r3, #128	; 0x80
 8001c00:	d109      	bne.n	8001c16 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c14:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	4413      	add	r3, r2
 8001c28:	3304      	adds	r3, #4
 8001c2a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	78db      	ldrb	r3, [r3, #3]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d108      	bne.n	8001c46 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2200      	movs	r2, #0
 8001c38:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	4619      	mov	r1, r3
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f005 fc65 	bl	8007510 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c52:	461a      	mov	r2, r3
 8001c54:	2302      	movs	r3, #2
 8001c56:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	f003 0320 	and.w	r3, r3, #32
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d008      	beq.n	8001c74 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	015a      	lsls	r2, r3, #5
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	4413      	add	r3, r2
 8001c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2320      	movs	r3, #32
 8001c72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d009      	beq.n	8001c92 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	015a      	lsls	r2, r3, #5
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	4413      	add	r3, r2
 8001c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c90:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	3301      	adds	r3, #1
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9a:	085b      	lsrs	r3, r3, #1
 8001c9c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f47f af62 	bne.w	8001b6a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f002 ff6e 	bl	8004b8c <USB_ReadInterrupts>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001cba:	f040 80db 	bne.w	8001e74 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f002 ff8f 	bl	8004be6 <USB_ReadDevAllInEpInterrupt>
 8001cc8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001cce:	e0cd      	b.n	8001e6c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 80c2 	beq.w	8001e60 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f002 ffb5 	bl	8004c56 <USB_ReadDevInEPInterrupt>
 8001cec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d057      	beq.n	8001da8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	2201      	movs	r2, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69f9      	ldr	r1, [r7, #28]
 8001d14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d18:	4013      	ands	r3, r2
 8001d1a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	015a      	lsls	r2, r3, #5
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	4413      	add	r3, r2
 8001d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d28:	461a      	mov	r2, r3
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d132      	bne.n	8001d9c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	334c      	adds	r3, #76	; 0x4c
 8001d46:	6819      	ldr	r1, [r3, #0]
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4403      	add	r3, r0
 8001d56:	3348      	adds	r3, #72	; 0x48
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4419      	add	r1, r3
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4403      	add	r3, r0
 8001d6a:	334c      	adds	r3, #76	; 0x4c
 8001d6c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d113      	bne.n	8001d9c <HAL_PCD_IRQHandler+0x3a2>
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d78:	4613      	mov	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	3354      	adds	r3, #84	; 0x54
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d108      	bne.n	8001d9c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d94:	461a      	mov	r2, r3
 8001d96:	2101      	movs	r1, #1
 8001d98:	f002 ffbe 	bl	8004d18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	4619      	mov	r1, r3
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f005 fb2f 	bl	8007406 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d008      	beq.n	8001dc4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d008      	beq.n	8001de0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	015a      	lsls	r2, r3, #5
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dda:	461a      	mov	r2, r3
 8001ddc:	2310      	movs	r3, #16
 8001dde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d008      	beq.n	8001dfc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001df6:	461a      	mov	r2, r3
 8001df8:	2340      	movs	r3, #64	; 0x40
 8001dfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d023      	beq.n	8001e4e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001e06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e08:	6a38      	ldr	r0, [r7, #32]
 8001e0a:	f001 fe91 	bl	8003b30 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	3338      	adds	r3, #56	; 0x38
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3304      	adds	r3, #4
 8001e20:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	78db      	ldrb	r3, [r3, #3]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d108      	bne.n	8001e3c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	4619      	mov	r1, r3
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f005 fb7c 	bl	8007534 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fd08 	bl	8002870 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	3301      	adds	r3, #1
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e68:	085b      	lsrs	r3, r3, #1
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f47f af2e 	bne.w	8001cd0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f002 fe87 	bl	8004b8c <USB_ReadInterrupts>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e88:	d122      	bne.n	8001ed0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d108      	bne.n	8001eba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f005 fcfc 	bl	80078b0 <HAL_PCDEx_LPM_Callback>
 8001eb8:	e002      	b.n	8001ec0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f005 fb1a 	bl	80074f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	695a      	ldr	r2, [r3, #20]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ece:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f002 fe59 	bl	8004b8c <USB_ReadInterrupts>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ee4:	d112      	bne.n	8001f0c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d102      	bne.n	8001efc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f005 fad6 	bl	80074a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001f0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f002 fe3b 	bl	8004b8c <USB_ReadInterrupts>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f20:	d121      	bne.n	8001f66 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001f30:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d111      	bne.n	8001f60 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	089b      	lsrs	r3, r3, #2
 8001f4c:	f003 020f 	and.w	r2, r3, #15
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f56:	2101      	movs	r1, #1
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f005 fca9 	bl	80078b0 <HAL_PCDEx_LPM_Callback>
 8001f5e:	e002      	b.n	8001f66 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f005 faa1 	bl	80074a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f002 fe0e 	bl	8004b8c <USB_ReadInterrupts>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f7a:	f040 80b7 	bne.w	80020ec <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2110      	movs	r1, #16
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f001 fdc9 	bl	8003b30 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fa2:	e046      	b.n	8002032 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa6:	015a      	lsls	r2, r3, #5
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fb6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fba:	015a      	lsls	r2, r3, #5
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fc8:	0151      	lsls	r1, r2, #5
 8001fca:	69fa      	ldr	r2, [r7, #28]
 8001fcc:	440a      	add	r2, r1
 8001fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001fd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fd6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fda:	015a      	lsls	r2, r3, #5
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ffc:	0151      	lsls	r1, r2, #5
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	440a      	add	r2, r1
 8002002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002006:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800200a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200e:	015a      	lsls	r2, r3, #5
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	4413      	add	r3, r2
 8002014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800201c:	0151      	lsls	r1, r2, #5
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	440a      	add	r2, r1
 8002022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002026:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800202a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202e:	3301      	adds	r3, #1
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002038:	429a      	cmp	r2, r3
 800203a:	d3b3      	bcc.n	8001fa4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800204a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800204e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	2b00      	cmp	r3, #0
 8002056:	d016      	beq.n	8002086 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800205e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002068:	f043 030b 	orr.w	r3, r3, #11
 800206c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800207e:	f043 030b 	orr.w	r3, r3, #11
 8002082:	6453      	str	r3, [r2, #68]	; 0x44
 8002084:	e015      	b.n	80020b2 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002094:	4619      	mov	r1, r3
 8002096:	f242 032b 	movw	r3, #8235	; 0x202b
 800209a:	4313      	orrs	r3, r2
 800209c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ac:	f043 030b 	orr.w	r3, r3, #11
 80020b0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80020c4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020d6:	461a      	mov	r2, r3
 80020d8:	f002 fe1e 	bl	8004d18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80020ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f002 fd4b 	bl	8004b8c <USB_ReadInterrupts>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002100:	d124      	bne.n	800214c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f002 fde2 	bl	8004cd0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f001 fd8a 	bl	8003c2a <USB_GetDevSpeed>
 8002116:	4603      	mov	r3, r0
 8002118:	461a      	mov	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681c      	ldr	r4, [r3, #0]
 8002122:	f001 fa33 	bl	800358c <HAL_RCC_GetHCLKFreq>
 8002126:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800212c:	b2db      	uxtb	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	4620      	mov	r0, r4
 8002132:	f001 fa8f 	bl	8003654 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f005 f98d 	bl	8007456 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800214a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f002 fd1b 	bl	8004b8c <USB_ReadInterrupts>
 8002156:	4603      	mov	r3, r0
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b08      	cmp	r3, #8
 800215e:	d10a      	bne.n	8002176 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f005 f96a 	bl	800743a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f002 0208 	and.w	r2, r2, #8
 8002174:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f002 fd06 	bl	8004b8c <USB_ReadInterrupts>
 8002180:	4603      	mov	r3, r0
 8002182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002186:	2b80      	cmp	r3, #128	; 0x80
 8002188:	d122      	bne.n	80021d0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002196:	2301      	movs	r3, #1
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
 800219a:	e014      	b.n	80021c6 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d105      	bne.n	80021c0 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	4619      	mov	r1, r3
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fb27 	bl	800280e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	3301      	adds	r3, #1
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d3e5      	bcc.n	800219c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f002 fcd9 	bl	8004b8c <USB_ReadInterrupts>
 80021da:	4603      	mov	r3, r0
 80021dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021e4:	d13b      	bne.n	800225e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021e6:	2301      	movs	r3, #1
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ea:	e02b      	b.n	8002244 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	3340      	adds	r3, #64	; 0x40
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d115      	bne.n	800223e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002212:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002214:	2b00      	cmp	r3, #0
 8002216:	da12      	bge.n	800223e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	333f      	adds	r3, #63	; 0x3f
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002234:	b2db      	uxtb	r3, r3
 8002236:	4619      	mov	r1, r3
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 fae8 	bl	800280e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	3301      	adds	r3, #1
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224a:	429a      	cmp	r2, r3
 800224c:	d3ce      	bcc.n	80021ec <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695a      	ldr	r2, [r3, #20]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800225c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f002 fc92 	bl	8004b8c <USB_ReadInterrupts>
 8002268:	4603      	mov	r3, r0
 800226a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002272:	d155      	bne.n	8002320 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002274:	2301      	movs	r3, #1
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
 8002278:	e045      	b.n	8002306 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	4413      	add	r3, r2
 8002282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d12e      	bne.n	8002300 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022a2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	da2b      	bge.n	8002300 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80022b4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d121      	bne.n	8002300 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10a      	bne.n	8002300 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022fc:	6053      	str	r3, [r2, #4]
            break;
 80022fe:	e007      	b.n	8002310 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	3301      	adds	r3, #1
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800230c:	429a      	cmp	r2, r3
 800230e:	d3b4      	bcc.n	800227a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800231e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f002 fc31 	bl	8004b8c <USB_ReadInterrupts>
 800232a:	4603      	mov	r3, r0
 800232c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002334:	d10a      	bne.n	800234c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f005 f90e 	bl	8007558 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695a      	ldr	r2, [r3, #20]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800234a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f002 fc1b 	bl	8004b8c <USB_ReadInterrupts>
 8002356:	4603      	mov	r3, r0
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b04      	cmp	r3, #4
 800235e:	d115      	bne.n	800238c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f005 f8fe 	bl	8007574 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6859      	ldr	r1, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	430a      	orrs	r2, r1
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	e000      	b.n	800238c <HAL_PCD_IRQHandler+0x992>
      return;
 800238a:	bf00      	nop
    }
  }
}
 800238c:	3734      	adds	r7, #52	; 0x34
 800238e:	46bd      	mov	sp, r7
 8002390:	bd90      	pop	{r4, r7, pc}

08002392 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	460b      	mov	r3, r1
 800239c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_PCD_SetAddress+0x1a>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e013      	b.n	80023d4 <HAL_PCD_SetAddress+0x42>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f002 fb79 	bl	8004abc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	4608      	mov	r0, r1
 80023e6:	4611      	mov	r1, r2
 80023e8:	461a      	mov	r2, r3
 80023ea:	4603      	mov	r3, r0
 80023ec:	70fb      	strb	r3, [r7, #3]
 80023ee:	460b      	mov	r3, r1
 80023f0:	803b      	strh	r3, [r7, #0]
 80023f2:	4613      	mov	r3, r2
 80023f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	da0f      	bge.n	8002422 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	f003 020f 	and.w	r2, r3, #15
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	3338      	adds	r3, #56	; 0x38
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	3304      	adds	r3, #4
 8002418:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2201      	movs	r2, #1
 800241e:	705a      	strb	r2, [r3, #1]
 8002420:	e00f      	b.n	8002442 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	f003 020f 	and.w	r2, r3, #15
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	4413      	add	r3, r2
 8002438:	3304      	adds	r3, #4
 800243a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002442:	78fb      	ldrb	r3, [r7, #3]
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	b2da      	uxtb	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800244e:	883a      	ldrh	r2, [r7, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	78ba      	ldrb	r2, [r7, #2]
 8002458:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	785b      	ldrb	r3, [r3, #1]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d004      	beq.n	800246c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800246c:	78bb      	ldrb	r3, [r7, #2]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d102      	bne.n	8002478 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_PCD_EP_Open+0xaa>
 8002482:	2302      	movs	r3, #2
 8002484:	e00e      	b.n	80024a4 <HAL_PCD_EP_Open+0xc8>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68f9      	ldr	r1, [r7, #12]
 8002494:	4618      	mov	r0, r3
 8002496:	f001 fbed 	bl	8003c74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80024a2:	7afb      	ldrb	r3, [r7, #11]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	da0f      	bge.n	80024e0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	f003 020f 	and.w	r2, r3, #15
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	3338      	adds	r3, #56	; 0x38
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	4413      	add	r3, r2
 80024d4:	3304      	adds	r3, #4
 80024d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2201      	movs	r2, #1
 80024dc:	705a      	strb	r2, [r3, #1]
 80024de:	e00f      	b.n	8002500 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	f003 020f 	and.w	r2, r3, #15
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	3304      	adds	r3, #4
 80024f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	b2da      	uxtb	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_PCD_EP_Close+0x6e>
 8002516:	2302      	movs	r3, #2
 8002518:	e00e      	b.n	8002538 <HAL_PCD_EP_Close+0x8c>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	4618      	mov	r0, r3
 800252a:	f001 fc2b 	bl	8003d84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	607a      	str	r2, [r7, #4]
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	460b      	mov	r3, r1
 800254e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002550:	7afb      	ldrb	r3, [r7, #11]
 8002552:	f003 020f 	and.w	r2, r3, #15
 8002556:	4613      	mov	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4413      	add	r3, r2
 8002566:	3304      	adds	r3, #4
 8002568:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2200      	movs	r2, #0
 800257a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2200      	movs	r2, #0
 8002580:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002582:	7afb      	ldrb	r3, [r7, #11]
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	b2da      	uxtb	r2, r3
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d102      	bne.n	800259c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800259c:	7afb      	ldrb	r3, [r7, #11]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	6979      	ldr	r1, [r7, #20]
 80025b4:	f001 ff12 	bl	80043dc <USB_EP0StartXfer>
 80025b8:	e008      	b.n	80025cc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	6979      	ldr	r1, [r7, #20]
 80025c8:	f001 fcb8 	bl	8003f3c <USB_EPStartXfer>
  }

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	460b      	mov	r3, r1
 80025e0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	f003 020f 	and.w	r2, r3, #15
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80025f8:	681b      	ldr	r3, [r3, #0]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b086      	sub	sp, #24
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
 8002612:	460b      	mov	r3, r1
 8002614:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002616:	7afb      	ldrb	r3, [r7, #11]
 8002618:	f003 020f 	and.w	r2, r3, #15
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	3338      	adds	r3, #56	; 0x38
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4413      	add	r3, r2
 800262a:	3304      	adds	r3, #4
 800262c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2200      	movs	r2, #0
 800263e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2201      	movs	r2, #1
 8002644:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002646:	7afb      	ldrb	r3, [r7, #11]
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	b2da      	uxtb	r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d102      	bne.n	8002660 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002660:	7afb      	ldrb	r3, [r7, #11]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	6979      	ldr	r1, [r7, #20]
 8002678:	f001 feb0 	bl	80043dc <USB_EP0StartXfer>
 800267c:	e008      	b.n	8002690 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	6979      	ldr	r1, [r7, #20]
 800268c:	f001 fc56 	bl	8003f3c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	f003 020f 	and.w	r2, r3, #15
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d901      	bls.n	80026b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e050      	b.n	800275a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	da0f      	bge.n	80026e0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026c0:	78fb      	ldrb	r3, [r7, #3]
 80026c2:	f003 020f 	and.w	r2, r3, #15
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	3338      	adds	r3, #56	; 0x38
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	4413      	add	r3, r2
 80026d4:	3304      	adds	r3, #4
 80026d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	705a      	strb	r2, [r3, #1]
 80026de:	e00d      	b.n	80026fc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	4613      	mov	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	3304      	adds	r3, #4
 80026f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	b2da      	uxtb	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_PCD_EP_SetStall+0x82>
 8002718:	2302      	movs	r3, #2
 800271a:	e01e      	b.n	800275a <HAL_PCD_EP_SetStall+0xc0>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68f9      	ldr	r1, [r7, #12]
 800272a:	4618      	mov	r0, r3
 800272c:	f002 f8f2 	bl	8004914 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10a      	bne.n	8002750 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	b2d9      	uxtb	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800274a:	461a      	mov	r2, r3
 800274c:	f002 fae4 	bl	8004d18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b084      	sub	sp, #16
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	460b      	mov	r3, r1
 800276c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800276e:	78fb      	ldrb	r3, [r7, #3]
 8002770:	f003 020f 	and.w	r2, r3, #15
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	429a      	cmp	r2, r3
 800277a:	d901      	bls.n	8002780 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e042      	b.n	8002806 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002780:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002784:	2b00      	cmp	r3, #0
 8002786:	da0f      	bge.n	80027a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	f003 020f 	and.w	r2, r3, #15
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	3338      	adds	r3, #56	; 0x38
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	4413      	add	r3, r2
 800279c:	3304      	adds	r3, #4
 800279e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2201      	movs	r2, #1
 80027a4:	705a      	strb	r2, [r3, #1]
 80027a6:	e00f      	b.n	80027c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	f003 020f 	and.w	r2, r3, #15
 80027ae:	4613      	mov	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	3304      	adds	r3, #4
 80027c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027ce:	78fb      	ldrb	r3, [r7, #3]
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_PCD_EP_ClrStall+0x86>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e00e      	b.n	8002806 <HAL_PCD_EP_ClrStall+0xa4>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68f9      	ldr	r1, [r7, #12]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f002 f8fa 	bl	80049f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	460b      	mov	r3, r1
 8002818:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800281a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800281e:	2b00      	cmp	r3, #0
 8002820:	da0c      	bge.n	800283c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002822:	78fb      	ldrb	r3, [r7, #3]
 8002824:	f003 020f 	and.w	r2, r3, #15
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	3338      	adds	r3, #56	; 0x38
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	3304      	adds	r3, #4
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	e00c      	b.n	8002856 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	f003 020f 	and.w	r2, r3, #15
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	3304      	adds	r3, #4
 8002854:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68f9      	ldr	r1, [r7, #12]
 800285c:	4618      	mov	r0, r3
 800285e:	f001 ff19 	bl	8004694 <USB_EPStopXfer>
 8002862:	4603      	mov	r3, r0
 8002864:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002866:	7afb      	ldrb	r3, [r7, #11]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	; 0x28
 8002874:	af02      	add	r7, sp, #8
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	3338      	adds	r3, #56	; 0x38
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	4413      	add	r3, r2
 8002894:	3304      	adds	r3, #4
 8002896:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a1a      	ldr	r2, [r3, #32]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d901      	bls.n	80028a8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e06c      	b.n	8002982 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	699a      	ldr	r2, [r3, #24]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d902      	bls.n	80028c4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	3303      	adds	r3, #3
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028cc:	e02b      	b.n	8002926 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d902      	bls.n	80028ea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3303      	adds	r3, #3
 80028ee:	089b      	lsrs	r3, r3, #2
 80028f0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6919      	ldr	r1, [r3, #16]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002902:	b2db      	uxtb	r3, r3
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	4603      	mov	r3, r0
 8002908:	6978      	ldr	r0, [r7, #20]
 800290a:	f001 ff6d 	bl	80047e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	441a      	add	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a1a      	ldr	r2, [r3, #32]
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	441a      	add	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4413      	add	r3, r2
 800292e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	b29b      	uxth	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	429a      	cmp	r2, r3
 800293a:	d809      	bhi.n	8002950 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a1a      	ldr	r2, [r3, #32]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002944:	429a      	cmp	r2, r3
 8002946:	d203      	bcs.n	8002950 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1be      	bne.n	80028ce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	699a      	ldr	r2, [r3, #24]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	429a      	cmp	r2, r3
 800295a:	d811      	bhi.n	8002980 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	2201      	movs	r2, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	43db      	mvns	r3, r3
 8002976:	6939      	ldr	r1, [r7, #16]
 8002978:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800297c:	4013      	ands	r3, r2
 800297e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3720      	adds	r7, #32
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	333c      	adds	r3, #60	; 0x3c
 80029a4:	3304      	adds	r3, #4
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d17b      	bne.n	8002aba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d015      	beq.n	80029f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	4a61      	ldr	r2, [pc, #388]	; (8002b54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	f240 80b9 	bls.w	8002b48 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80b3 	beq.w	8002b48 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ee:	461a      	mov	r2, r3
 80029f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029f4:	6093      	str	r3, [r2, #8]
 80029f6:	e0a7      	b.n	8002b48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d009      	beq.n	8002a16 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a0e:	461a      	mov	r2, r3
 8002a10:	2320      	movs	r3, #32
 8002a12:	6093      	str	r3, [r2, #8]
 8002a14:	e098      	b.n	8002b48 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f040 8093 	bne.w	8002b48 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	4a4b      	ldr	r2, [pc, #300]	; (8002b54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d90f      	bls.n	8002a4a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a40:	461a      	mov	r2, r3
 8002a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a46:	6093      	str	r3, [r2, #8]
 8002a48:	e07e      	b.n	8002b48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	69da      	ldr	r2, [r3, #28]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	0159      	lsls	r1, r3, #5
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	440b      	add	r3, r1
 8002a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a76:	1ad2      	subs	r2, r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d114      	bne.n	8002aac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a94:	461a      	mov	r2, r3
 8002a96:	2101      	movs	r1, #1
 8002a98:	f002 f93e 	bl	8004d18 <USB_EP0_OutStart>
 8002a9c:	e006      	b.n	8002aac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	441a      	add	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f004 fc8c 	bl	80073d0 <HAL_PCD_DataOutStageCallback>
 8002ab8:	e046      	b.n	8002b48 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	4a26      	ldr	r2, [pc, #152]	; (8002b58 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d124      	bne.n	8002b0c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00a      	beq.n	8002ae2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad8:	461a      	mov	r2, r3
 8002ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ade:	6093      	str	r3, [r2, #8]
 8002ae0:	e032      	b.n	8002b48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002af8:	461a      	mov	r2, r3
 8002afa:	2320      	movs	r3, #32
 8002afc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f004 fc63 	bl	80073d0 <HAL_PCD_DataOutStageCallback>
 8002b0a:	e01d      	b.n	8002b48 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d114      	bne.n	8002b3c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d108      	bne.n	8002b3c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b34:	461a      	mov	r2, r3
 8002b36:	2100      	movs	r1, #0
 8002b38:	f002 f8ee 	bl	8004d18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	4619      	mov	r1, r3
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f004 fc44 	bl	80073d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	4f54300a 	.word	0x4f54300a
 8002b58:	4f54310a 	.word	0x4f54310a

08002b5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	333c      	adds	r3, #60	; 0x3c
 8002b74:	3304      	adds	r3, #4
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4a15      	ldr	r2, [pc, #84]	; (8002be4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d90e      	bls.n	8002bb0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d009      	beq.n	8002bb0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f004 fbfb 	bl	80073ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d90c      	bls.n	8002bd8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d108      	bne.n	8002bd8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	f002 f8a0 	bl	8004d18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	4f54300a 	.word	0x4f54300a

08002be8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	70fb      	strb	r3, [r7, #3]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c00:	78fb      	ldrb	r3, [r7, #3]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d107      	bne.n	8002c16 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c06:	883b      	ldrh	r3, [r7, #0]
 8002c08:	0419      	lsls	r1, r3, #16
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
 8002c14:	e028      	b.n	8002c68 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	4413      	add	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c24:	2300      	movs	r3, #0
 8002c26:	73fb      	strb	r3, [r7, #15]
 8002c28:	e00d      	b.n	8002c46 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	3340      	adds	r3, #64	; 0x40
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	0c1b      	lsrs	r3, r3, #16
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	3301      	adds	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d3ec      	bcc.n	8002c2a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c50:	883b      	ldrh	r3, [r7, #0]
 8002c52:	0418      	lsls	r0, r3, #16
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6819      	ldr	r1, [r3, #0]
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	4302      	orrs	r2, r0
 8002c60:	3340      	adds	r3, #64	; 0x40
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cc6:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_PCDEx_ActivateLPM+0x44>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	10000003 	.word	0x10000003

08002ce0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e291      	b.n	800321a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 8087 	beq.w	8002e12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d04:	4b96      	ldr	r3, [pc, #600]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 030c 	and.w	r3, r3, #12
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d00c      	beq.n	8002d2a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d10:	4b93      	ldr	r3, [pc, #588]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d112      	bne.n	8002d42 <HAL_RCC_OscConfig+0x62>
 8002d1c:	4b90      	ldr	r3, [pc, #576]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d28:	d10b      	bne.n	8002d42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2a:	4b8d      	ldr	r3, [pc, #564]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d06c      	beq.n	8002e10 <HAL_RCC_OscConfig+0x130>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d168      	bne.n	8002e10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e26b      	b.n	800321a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4a:	d106      	bne.n	8002d5a <HAL_RCC_OscConfig+0x7a>
 8002d4c:	4b84      	ldr	r3, [pc, #528]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a83      	ldr	r2, [pc, #524]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	e02e      	b.n	8002db8 <HAL_RCC_OscConfig+0xd8>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCC_OscConfig+0x9c>
 8002d62:	4b7f      	ldr	r3, [pc, #508]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a7e      	ldr	r2, [pc, #504]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	4b7c      	ldr	r3, [pc, #496]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a7b      	ldr	r2, [pc, #492]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e01d      	b.n	8002db8 <HAL_RCC_OscConfig+0xd8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0xc0>
 8002d86:	4b76      	ldr	r3, [pc, #472]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a75      	ldr	r2, [pc, #468]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	4b73      	ldr	r3, [pc, #460]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a72      	ldr	r2, [pc, #456]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCC_OscConfig+0xd8>
 8002da0:	4b6f      	ldr	r3, [pc, #444]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a6e      	ldr	r2, [pc, #440]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4b6c      	ldr	r3, [pc, #432]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a6b      	ldr	r2, [pc, #428]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d013      	beq.n	8002de8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fe f9ce 	bl	8001160 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7fe f9ca 	bl	8001160 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	; 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e21f      	b.n	800321a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	4b61      	ldr	r3, [pc, #388]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xe8>
 8002de6:	e014      	b.n	8002e12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7fe f9ba 	bl	8001160 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df0:	f7fe f9b6 	bl	8001160 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e20b      	b.n	800321a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e02:	4b57      	ldr	r3, [pc, #348]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x110>
 8002e0e:	e000      	b.n	8002e12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d069      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e1e:	4b50      	ldr	r3, [pc, #320]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2a:	4b4d      	ldr	r3, [pc, #308]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d11c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x190>
 8002e36:	4b4a      	ldr	r3, [pc, #296]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d116      	bne.n	8002e70 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e42:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_RCC_OscConfig+0x17a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d001      	beq.n	8002e5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e1df      	b.n	800321a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5a:	4b41      	ldr	r3, [pc, #260]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	493d      	ldr	r1, [pc, #244]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6e:	e040      	b.n	8002ef2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d023      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e78:	4b39      	ldr	r3, [pc, #228]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a38      	ldr	r2, [pc, #224]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7fe f96c 	bl	8001160 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e8c:	f7fe f968 	bl	8001160 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e1bd      	b.n	800321a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9e:	4b30      	ldr	r3, [pc, #192]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eaa:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4929      	ldr	r1, [pc, #164]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	600b      	str	r3, [r1, #0]
 8002ebe:	e018      	b.n	8002ef2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec0:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a26      	ldr	r2, [pc, #152]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002ec6:	f023 0301 	bic.w	r3, r3, #1
 8002eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fe f948 	bl	8001160 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed4:	f7fe f944 	bl	8001160 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e199      	b.n	800321a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee6:	4b1e      	ldr	r3, [pc, #120]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d038      	beq.n	8002f70 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d019      	beq.n	8002f3a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f06:	4b16      	ldr	r3, [pc, #88]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f0a:	4a15      	ldr	r2, [pc, #84]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f12:	f7fe f925 	bl	8001160 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f1a:	f7fe f921 	bl	8001160 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e176      	b.n	800321a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0x23a>
 8002f38:	e01a      	b.n	8002f70 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f3e:	4a08      	ldr	r2, [pc, #32]	; (8002f60 <HAL_RCC_OscConfig+0x280>)
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f46:	f7fe f90b 	bl	8001160 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f4e:	f7fe f907 	bl	8001160 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d903      	bls.n	8002f64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e15c      	b.n	800321a <HAL_RCC_OscConfig+0x53a>
 8002f60:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f64:	4b91      	ldr	r3, [pc, #580]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 8002f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1ee      	bne.n	8002f4e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a4 	beq.w	80030c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f7e:	4b8b      	ldr	r3, [pc, #556]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10d      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8a:	4b88      	ldr	r3, [pc, #544]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	4a87      	ldr	r2, [pc, #540]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 8002f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f94:	6413      	str	r3, [r2, #64]	; 0x40
 8002f96:	4b85      	ldr	r3, [pc, #532]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fa6:	4b82      	ldr	r3, [pc, #520]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d118      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002fb2:	4b7f      	ldr	r3, [pc, #508]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a7e      	ldr	r2, [pc, #504]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fbe:	f7fe f8cf 	bl	8001160 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc6:	f7fe f8cb 	bl	8001160 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b64      	cmp	r3, #100	; 0x64
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e120      	b.n	800321a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fd8:	4b75      	ldr	r3, [pc, #468]	; (80031b0 <HAL_RCC_OscConfig+0x4d0>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d106      	bne.n	8002ffa <HAL_RCC_OscConfig+0x31a>
 8002fec:	4b6f      	ldr	r3, [pc, #444]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	4a6e      	ldr	r2, [pc, #440]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff8:	e02d      	b.n	8003056 <HAL_RCC_OscConfig+0x376>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0x33c>
 8003002:	4b6a      	ldr	r3, [pc, #424]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	4a69      	ldr	r2, [pc, #420]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 8003008:	f023 0301 	bic.w	r3, r3, #1
 800300c:	6713      	str	r3, [r2, #112]	; 0x70
 800300e:	4b67      	ldr	r3, [pc, #412]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	4a66      	ldr	r2, [pc, #408]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 8003014:	f023 0304 	bic.w	r3, r3, #4
 8003018:	6713      	str	r3, [r2, #112]	; 0x70
 800301a:	e01c      	b.n	8003056 <HAL_RCC_OscConfig+0x376>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b05      	cmp	r3, #5
 8003022:	d10c      	bne.n	800303e <HAL_RCC_OscConfig+0x35e>
 8003024:	4b61      	ldr	r3, [pc, #388]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 8003026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003028:	4a60      	ldr	r2, [pc, #384]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 800302a:	f043 0304 	orr.w	r3, r3, #4
 800302e:	6713      	str	r3, [r2, #112]	; 0x70
 8003030:	4b5e      	ldr	r3, [pc, #376]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	4a5d      	ldr	r2, [pc, #372]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6713      	str	r3, [r2, #112]	; 0x70
 800303c:	e00b      	b.n	8003056 <HAL_RCC_OscConfig+0x376>
 800303e:	4b5b      	ldr	r3, [pc, #364]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003042:	4a5a      	ldr	r2, [pc, #360]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 8003044:	f023 0301 	bic.w	r3, r3, #1
 8003048:	6713      	str	r3, [r2, #112]	; 0x70
 800304a:	4b58      	ldr	r3, [pc, #352]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304e:	4a57      	ldr	r2, [pc, #348]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 8003050:	f023 0304 	bic.w	r3, r3, #4
 8003054:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d015      	beq.n	800308a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305e:	f7fe f87f 	bl	8001160 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003064:	e00a      	b.n	800307c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003066:	f7fe f87b 	bl	8001160 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f241 3288 	movw	r2, #5000	; 0x1388
 8003074:	4293      	cmp	r3, r2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e0ce      	b.n	800321a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307c:	4b4b      	ldr	r3, [pc, #300]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0ee      	beq.n	8003066 <HAL_RCC_OscConfig+0x386>
 8003088:	e014      	b.n	80030b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308a:	f7fe f869 	bl	8001160 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003090:	e00a      	b.n	80030a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7fe f865 	bl	8001160 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e0b8      	b.n	800321a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a8:	4b40      	ldr	r3, [pc, #256]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 80030aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1ee      	bne.n	8003092 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d105      	bne.n	80030c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ba:	4b3c      	ldr	r3, [pc, #240]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	4a3b      	ldr	r2, [pc, #236]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 80030c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 80a4 	beq.w	8003218 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d0:	4b36      	ldr	r3, [pc, #216]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 030c 	and.w	r3, r3, #12
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d06b      	beq.n	80031b4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d149      	bne.n	8003178 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e4:	4b31      	ldr	r3, [pc, #196]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a30      	ldr	r2, [pc, #192]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 80030ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fe f836 	bl	8001160 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f8:	f7fe f832 	bl	8001160 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e087      	b.n	800321a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310a:	4b28      	ldr	r3, [pc, #160]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	019b      	lsls	r3, r3, #6
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	085b      	lsrs	r3, r3, #1
 800312e:	3b01      	subs	r3, #1
 8003130:	041b      	lsls	r3, r3, #16
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	061b      	lsls	r3, r3, #24
 800313a:	4313      	orrs	r3, r2
 800313c:	4a1b      	ldr	r2, [pc, #108]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 800313e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003142:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003144:	4b19      	ldr	r3, [pc, #100]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a18      	ldr	r2, [pc, #96]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 800314a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800314e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7fe f806 	bl	8001160 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003158:	f7fe f802 	bl	8001160 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e057      	b.n	800321a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316a:	4b10      	ldr	r3, [pc, #64]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0x478>
 8003176:	e04f      	b.n	8003218 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a0b      	ldr	r2, [pc, #44]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 800317e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fd ffec 	bl	8001160 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318c:	f7fd ffe8 	bl	8001160 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e03d      	b.n	800321a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319e:	4b03      	ldr	r3, [pc, #12]	; (80031ac <HAL_RCC_OscConfig+0x4cc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x4ac>
 80031aa:	e035      	b.n	8003218 <HAL_RCC_OscConfig+0x538>
 80031ac:	40023800 	.word	0x40023800
 80031b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80031b4:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <HAL_RCC_OscConfig+0x544>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d028      	beq.n	8003214 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d121      	bne.n	8003214 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d11a      	bne.n	8003214 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031e4:	4013      	ands	r3, r2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d111      	bne.n	8003214 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	3b01      	subs	r3, #1
 80031fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003200:	429a      	cmp	r2, r3
 8003202:	d107      	bne.n	8003214 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800

08003228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0d0      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003240:	4b6a      	ldr	r3, [pc, #424]	; (80033ec <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d910      	bls.n	8003270 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324e:	4b67      	ldr	r3, [pc, #412]	; (80033ec <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 020f 	bic.w	r2, r3, #15
 8003256:	4965      	ldr	r1, [pc, #404]	; (80033ec <HAL_RCC_ClockConfig+0x1c4>)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800325e:	4b63      	ldr	r3, [pc, #396]	; (80033ec <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d001      	beq.n	8003270 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0b8      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d020      	beq.n	80032be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003288:	4b59      	ldr	r3, [pc, #356]	; (80033f0 <HAL_RCC_ClockConfig+0x1c8>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4a58      	ldr	r2, [pc, #352]	; (80033f0 <HAL_RCC_ClockConfig+0x1c8>)
 800328e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003292:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032a0:	4b53      	ldr	r3, [pc, #332]	; (80033f0 <HAL_RCC_ClockConfig+0x1c8>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	4a52      	ldr	r2, [pc, #328]	; (80033f0 <HAL_RCC_ClockConfig+0x1c8>)
 80032a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ac:	4b50      	ldr	r3, [pc, #320]	; (80033f0 <HAL_RCC_ClockConfig+0x1c8>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	494d      	ldr	r1, [pc, #308]	; (80033f0 <HAL_RCC_ClockConfig+0x1c8>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d040      	beq.n	800334c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d107      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d2:	4b47      	ldr	r3, [pc, #284]	; (80033f0 <HAL_RCC_ClockConfig+0x1c8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d115      	bne.n	800330a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e07f      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d107      	bne.n	80032fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ea:	4b41      	ldr	r3, [pc, #260]	; (80033f0 <HAL_RCC_ClockConfig+0x1c8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d109      	bne.n	800330a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e073      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fa:	4b3d      	ldr	r3, [pc, #244]	; (80033f0 <HAL_RCC_ClockConfig+0x1c8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e06b      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800330a:	4b39      	ldr	r3, [pc, #228]	; (80033f0 <HAL_RCC_ClockConfig+0x1c8>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f023 0203 	bic.w	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	4936      	ldr	r1, [pc, #216]	; (80033f0 <HAL_RCC_ClockConfig+0x1c8>)
 8003318:	4313      	orrs	r3, r2
 800331a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800331c:	f7fd ff20 	bl	8001160 <HAL_GetTick>
 8003320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003322:	e00a      	b.n	800333a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003324:	f7fd ff1c 	bl	8001160 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003332:	4293      	cmp	r3, r2
 8003334:	d901      	bls.n	800333a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e053      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333a:	4b2d      	ldr	r3, [pc, #180]	; (80033f0 <HAL_RCC_ClockConfig+0x1c8>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 020c 	and.w	r2, r3, #12
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	429a      	cmp	r2, r3
 800334a:	d1eb      	bne.n	8003324 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800334c:	4b27      	ldr	r3, [pc, #156]	; (80033ec <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 030f 	and.w	r3, r3, #15
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d210      	bcs.n	800337c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335a:	4b24      	ldr	r3, [pc, #144]	; (80033ec <HAL_RCC_ClockConfig+0x1c4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f023 020f 	bic.w	r2, r3, #15
 8003362:	4922      	ldr	r1, [pc, #136]	; (80033ec <HAL_RCC_ClockConfig+0x1c4>)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800336a:	4b20      	ldr	r3, [pc, #128]	; (80033ec <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e032      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003388:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <HAL_RCC_ClockConfig+0x1c8>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4916      	ldr	r1, [pc, #88]	; (80033f0 <HAL_RCC_ClockConfig+0x1c8>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033a6:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	490e      	ldr	r1, [pc, #56]	; (80033f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033ba:	f000 f821 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 80033be:	4602      	mov	r2, r0
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	091b      	lsrs	r3, r3, #4
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	490a      	ldr	r1, [pc, #40]	; (80033f4 <HAL_RCC_ClockConfig+0x1cc>)
 80033cc:	5ccb      	ldrb	r3, [r1, r3]
 80033ce:	fa22 f303 	lsr.w	r3, r2, r3
 80033d2:	4a09      	ldr	r2, [pc, #36]	; (80033f8 <HAL_RCC_ClockConfig+0x1d0>)
 80033d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033d6:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_RCC_ClockConfig+0x1d4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd fe7c 	bl	80010d8 <HAL_InitTick>

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40023c00 	.word	0x40023c00
 80033f0:	40023800 	.word	0x40023800
 80033f4:	0800a490 	.word	0x0800a490
 80033f8:	20000000 	.word	0x20000000
 80033fc:	20000004 	.word	0x20000004

08003400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003404:	b090      	sub	sp, #64	; 0x40
 8003406:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	637b      	str	r3, [r7, #52]	; 0x34
 800340c:	2300      	movs	r3, #0
 800340e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003410:	2300      	movs	r3, #0
 8003412:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003418:	4b59      	ldr	r3, [pc, #356]	; (8003580 <HAL_RCC_GetSysClockFreq+0x180>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 030c 	and.w	r3, r3, #12
 8003420:	2b08      	cmp	r3, #8
 8003422:	d00d      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x40>
 8003424:	2b08      	cmp	r3, #8
 8003426:	f200 80a1 	bhi.w	800356c <HAL_RCC_GetSysClockFreq+0x16c>
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x34>
 800342e:	2b04      	cmp	r3, #4
 8003430:	d003      	beq.n	800343a <HAL_RCC_GetSysClockFreq+0x3a>
 8003432:	e09b      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003434:	4b53      	ldr	r3, [pc, #332]	; (8003584 <HAL_RCC_GetSysClockFreq+0x184>)
 8003436:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003438:	e09b      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800343a:	4b53      	ldr	r3, [pc, #332]	; (8003588 <HAL_RCC_GetSysClockFreq+0x188>)
 800343c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800343e:	e098      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003440:	4b4f      	ldr	r3, [pc, #316]	; (8003580 <HAL_RCC_GetSysClockFreq+0x180>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003448:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800344a:	4b4d      	ldr	r3, [pc, #308]	; (8003580 <HAL_RCC_GetSysClockFreq+0x180>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d028      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003456:	4b4a      	ldr	r3, [pc, #296]	; (8003580 <HAL_RCC_GetSysClockFreq+0x180>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	099b      	lsrs	r3, r3, #6
 800345c:	2200      	movs	r2, #0
 800345e:	623b      	str	r3, [r7, #32]
 8003460:	627a      	str	r2, [r7, #36]	; 0x24
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003468:	2100      	movs	r1, #0
 800346a:	4b47      	ldr	r3, [pc, #284]	; (8003588 <HAL_RCC_GetSysClockFreq+0x188>)
 800346c:	fb03 f201 	mul.w	r2, r3, r1
 8003470:	2300      	movs	r3, #0
 8003472:	fb00 f303 	mul.w	r3, r0, r3
 8003476:	4413      	add	r3, r2
 8003478:	4a43      	ldr	r2, [pc, #268]	; (8003588 <HAL_RCC_GetSysClockFreq+0x188>)
 800347a:	fba0 1202 	umull	r1, r2, r0, r2
 800347e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003480:	460a      	mov	r2, r1
 8003482:	62ba      	str	r2, [r7, #40]	; 0x28
 8003484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003486:	4413      	add	r3, r2
 8003488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800348a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348c:	2200      	movs	r2, #0
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	61fa      	str	r2, [r7, #28]
 8003492:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003496:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800349a:	f7fc feb5 	bl	8000208 <__aeabi_uldivmod>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4613      	mov	r3, r2
 80034a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034a6:	e053      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a8:	4b35      	ldr	r3, [pc, #212]	; (8003580 <HAL_RCC_GetSysClockFreq+0x180>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	099b      	lsrs	r3, r3, #6
 80034ae:	2200      	movs	r2, #0
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	617a      	str	r2, [r7, #20]
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034ba:	f04f 0b00 	mov.w	fp, #0
 80034be:	4652      	mov	r2, sl
 80034c0:	465b      	mov	r3, fp
 80034c2:	f04f 0000 	mov.w	r0, #0
 80034c6:	f04f 0100 	mov.w	r1, #0
 80034ca:	0159      	lsls	r1, r3, #5
 80034cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034d0:	0150      	lsls	r0, r2, #5
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	ebb2 080a 	subs.w	r8, r2, sl
 80034da:	eb63 090b 	sbc.w	r9, r3, fp
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034f2:	ebb2 0408 	subs.w	r4, r2, r8
 80034f6:	eb63 0509 	sbc.w	r5, r3, r9
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	00eb      	lsls	r3, r5, #3
 8003504:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003508:	00e2      	lsls	r2, r4, #3
 800350a:	4614      	mov	r4, r2
 800350c:	461d      	mov	r5, r3
 800350e:	eb14 030a 	adds.w	r3, r4, sl
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	eb45 030b 	adc.w	r3, r5, fp
 8003518:	607b      	str	r3, [r7, #4]
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003526:	4629      	mov	r1, r5
 8003528:	028b      	lsls	r3, r1, #10
 800352a:	4621      	mov	r1, r4
 800352c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003530:	4621      	mov	r1, r4
 8003532:	028a      	lsls	r2, r1, #10
 8003534:	4610      	mov	r0, r2
 8003536:	4619      	mov	r1, r3
 8003538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353a:	2200      	movs	r2, #0
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	60fa      	str	r2, [r7, #12]
 8003540:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003544:	f7fc fe60 	bl	8000208 <__aeabi_uldivmod>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4613      	mov	r3, r2
 800354e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003550:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <HAL_RCC_GetSysClockFreq+0x180>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	0c1b      	lsrs	r3, r3, #16
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	3301      	adds	r3, #1
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003560:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800356a:	e002      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_RCC_GetSysClockFreq+0x184>)
 800356e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003574:	4618      	mov	r0, r3
 8003576:	3740      	adds	r7, #64	; 0x40
 8003578:	46bd      	mov	sp, r7
 800357a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800357e:	bf00      	nop
 8003580:	40023800 	.word	0x40023800
 8003584:	00f42400 	.word	0x00f42400
 8003588:	017d7840 	.word	0x017d7840

0800358c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003590:	4b03      	ldr	r3, [pc, #12]	; (80035a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003592:	681b      	ldr	r3, [r3, #0]
}
 8003594:	4618      	mov	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	20000000 	.word	0x20000000

080035a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035a4:	b084      	sub	sp, #16
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	f107 001c 	add.w	r0, r7, #28
 80035b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d120      	bne.n	80035fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	4b20      	ldr	r3, [pc, #128]	; (8003650 <USB_CoreInit+0xac>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80035e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d105      	bne.n	80035f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f001 fbee 	bl	8004dd4 <USB_CoreReset>
 80035f8:	4603      	mov	r3, r0
 80035fa:	73fb      	strb	r3, [r7, #15]
 80035fc:	e010      	b.n	8003620 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f001 fbe2 	bl	8004dd4 <USB_CoreReset>
 8003610:	4603      	mov	r3, r0
 8003612:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	2b01      	cmp	r3, #1
 8003624:	d10b      	bne.n	800363e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f043 0206 	orr.w	r2, r3, #6
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f043 0220 	orr.w	r2, r3, #32
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800363e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800364a:	b004      	add	sp, #16
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	ffbdffbf 	.word	0xffbdffbf

08003654 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	4613      	mov	r3, r2
 8003660:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003662:	79fb      	ldrb	r3, [r7, #7]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d165      	bne.n	8003734 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4a41      	ldr	r2, [pc, #260]	; (8003770 <USB_SetTurnaroundTime+0x11c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d906      	bls.n	800367e <USB_SetTurnaroundTime+0x2a>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4a40      	ldr	r2, [pc, #256]	; (8003774 <USB_SetTurnaroundTime+0x120>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d202      	bcs.n	800367e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003678:	230f      	movs	r3, #15
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	e062      	b.n	8003744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4a3c      	ldr	r2, [pc, #240]	; (8003774 <USB_SetTurnaroundTime+0x120>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d306      	bcc.n	8003694 <USB_SetTurnaroundTime+0x40>
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	4a3b      	ldr	r2, [pc, #236]	; (8003778 <USB_SetTurnaroundTime+0x124>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d202      	bcs.n	8003694 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800368e:	230e      	movs	r3, #14
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	e057      	b.n	8003744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4a38      	ldr	r2, [pc, #224]	; (8003778 <USB_SetTurnaroundTime+0x124>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d306      	bcc.n	80036aa <USB_SetTurnaroundTime+0x56>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4a37      	ldr	r2, [pc, #220]	; (800377c <USB_SetTurnaroundTime+0x128>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d202      	bcs.n	80036aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80036a4:	230d      	movs	r3, #13
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	e04c      	b.n	8003744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4a33      	ldr	r2, [pc, #204]	; (800377c <USB_SetTurnaroundTime+0x128>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d306      	bcc.n	80036c0 <USB_SetTurnaroundTime+0x6c>
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	4a32      	ldr	r2, [pc, #200]	; (8003780 <USB_SetTurnaroundTime+0x12c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d802      	bhi.n	80036c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80036ba:	230c      	movs	r3, #12
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	e041      	b.n	8003744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4a2f      	ldr	r2, [pc, #188]	; (8003780 <USB_SetTurnaroundTime+0x12c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d906      	bls.n	80036d6 <USB_SetTurnaroundTime+0x82>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4a2e      	ldr	r2, [pc, #184]	; (8003784 <USB_SetTurnaroundTime+0x130>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d802      	bhi.n	80036d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80036d0:	230b      	movs	r3, #11
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	e036      	b.n	8003744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4a2a      	ldr	r2, [pc, #168]	; (8003784 <USB_SetTurnaroundTime+0x130>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d906      	bls.n	80036ec <USB_SetTurnaroundTime+0x98>
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4a29      	ldr	r2, [pc, #164]	; (8003788 <USB_SetTurnaroundTime+0x134>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d802      	bhi.n	80036ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80036e6:	230a      	movs	r3, #10
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	e02b      	b.n	8003744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4a26      	ldr	r2, [pc, #152]	; (8003788 <USB_SetTurnaroundTime+0x134>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d906      	bls.n	8003702 <USB_SetTurnaroundTime+0xae>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4a25      	ldr	r2, [pc, #148]	; (800378c <USB_SetTurnaroundTime+0x138>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d202      	bcs.n	8003702 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80036fc:	2309      	movs	r3, #9
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	e020      	b.n	8003744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4a21      	ldr	r2, [pc, #132]	; (800378c <USB_SetTurnaroundTime+0x138>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d306      	bcc.n	8003718 <USB_SetTurnaroundTime+0xc4>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	4a20      	ldr	r2, [pc, #128]	; (8003790 <USB_SetTurnaroundTime+0x13c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d802      	bhi.n	8003718 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003712:	2308      	movs	r3, #8
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	e015      	b.n	8003744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4a1d      	ldr	r2, [pc, #116]	; (8003790 <USB_SetTurnaroundTime+0x13c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d906      	bls.n	800372e <USB_SetTurnaroundTime+0xda>
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4a1c      	ldr	r2, [pc, #112]	; (8003794 <USB_SetTurnaroundTime+0x140>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d202      	bcs.n	800372e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003728:	2307      	movs	r3, #7
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	e00a      	b.n	8003744 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800372e:	2306      	movs	r3, #6
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	e007      	b.n	8003744 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d102      	bne.n	8003740 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800373a:	2309      	movs	r3, #9
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	e001      	b.n	8003744 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003740:	2309      	movs	r3, #9
 8003742:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	029b      	lsls	r3, r3, #10
 8003758:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800375c:	431a      	orrs	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	371c      	adds	r7, #28
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	00d8acbf 	.word	0x00d8acbf
 8003774:	00e4e1c0 	.word	0x00e4e1c0
 8003778:	00f42400 	.word	0x00f42400
 800377c:	01067380 	.word	0x01067380
 8003780:	011a499f 	.word	0x011a499f
 8003784:	01312cff 	.word	0x01312cff
 8003788:	014ca43f 	.word	0x014ca43f
 800378c:	016e3600 	.word	0x016e3600
 8003790:	01a6ab1f 	.word	0x01a6ab1f
 8003794:	01e84800 	.word	0x01e84800

08003798 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f043 0201 	orr.w	r2, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f023 0201 	bic.w	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d115      	bne.n	800382a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800380a:	2001      	movs	r0, #1
 800380c:	f7fd fcb4 	bl	8001178 <HAL_Delay>
      ms++;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	3301      	adds	r3, #1
 8003814:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f001 fa4b 	bl	8004cb2 <USB_GetMode>
 800381c:	4603      	mov	r3, r0
 800381e:	2b01      	cmp	r3, #1
 8003820:	d01e      	beq.n	8003860 <USB_SetCurrentMode+0x84>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b31      	cmp	r3, #49	; 0x31
 8003826:	d9f0      	bls.n	800380a <USB_SetCurrentMode+0x2e>
 8003828:	e01a      	b.n	8003860 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d115      	bne.n	800385c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800383c:	2001      	movs	r0, #1
 800383e:	f7fd fc9b 	bl	8001178 <HAL_Delay>
      ms++;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3301      	adds	r3, #1
 8003846:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f001 fa32 	bl	8004cb2 <USB_GetMode>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <USB_SetCurrentMode+0x84>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b31      	cmp	r3, #49	; 0x31
 8003858:	d9f0      	bls.n	800383c <USB_SetCurrentMode+0x60>
 800385a:	e001      	b.n	8003860 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e005      	b.n	800386c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b32      	cmp	r3, #50	; 0x32
 8003864:	d101      	bne.n	800386a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003874:	b084      	sub	sp, #16
 8003876:	b580      	push	{r7, lr}
 8003878:	b086      	sub	sp, #24
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	e009      	b.n	80038a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	3340      	adds	r3, #64	; 0x40
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	2200      	movs	r2, #0
 80038a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	3301      	adds	r3, #1
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	2b0e      	cmp	r3, #14
 80038ac:	d9f2      	bls.n	8003894 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d11c      	bne.n	80038ee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038c2:	f043 0302 	orr.w	r3, r3, #2
 80038c6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	e005      	b.n	80038fa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003900:	461a      	mov	r2, r3
 8003902:	2300      	movs	r3, #0
 8003904:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390c:	4619      	mov	r1, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003914:	461a      	mov	r2, r3
 8003916:	680b      	ldr	r3, [r1, #0]
 8003918:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391c:	2b01      	cmp	r3, #1
 800391e:	d10c      	bne.n	800393a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d104      	bne.n	8003930 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003926:	2100      	movs	r1, #0
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f965 	bl	8003bf8 <USB_SetDevSpeed>
 800392e:	e008      	b.n	8003942 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003930:	2101      	movs	r1, #1
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f960 	bl	8003bf8 <USB_SetDevSpeed>
 8003938:	e003      	b.n	8003942 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800393a:	2103      	movs	r1, #3
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f95b 	bl	8003bf8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003942:	2110      	movs	r1, #16
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f8f3 	bl	8003b30 <USB_FlushTxFifo>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f91f 	bl	8003b98 <USB_FlushRxFifo>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396a:	461a      	mov	r2, r3
 800396c:	2300      	movs	r3, #0
 800396e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003976:	461a      	mov	r2, r3
 8003978:	2300      	movs	r3, #0
 800397a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003982:	461a      	mov	r2, r3
 8003984:	2300      	movs	r3, #0
 8003986:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003988:	2300      	movs	r3, #0
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	e043      	b.n	8003a16 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4413      	add	r3, r2
 8003996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039a4:	d118      	bne.n	80039d8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b8:	461a      	mov	r2, r3
 80039ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	e013      	b.n	80039ea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ce:	461a      	mov	r2, r3
 80039d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e008      	b.n	80039ea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e4:	461a      	mov	r2, r3
 80039e6:	2300      	movs	r3, #0
 80039e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f6:	461a      	mov	r2, r3
 80039f8:	2300      	movs	r3, #0
 80039fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a08:	461a      	mov	r2, r3
 8003a0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	3301      	adds	r3, #1
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d3b7      	bcc.n	800398e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	e043      	b.n	8003aac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a3a:	d118      	bne.n	8003a6e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e013      	b.n	8003a80 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a64:	461a      	mov	r2, r3
 8003a66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	e008      	b.n	8003a80 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2300      	movs	r3, #0
 8003a90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003aa4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d3b7      	bcc.n	8003a24 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ac2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ac6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ad4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d105      	bne.n	8003ae8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f043 0210 	orr.w	r2, r3, #16
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <USB_DevInit+0x2b4>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	f043 0208 	orr.w	r2, r3, #8
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d105      	bne.n	8003b18 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699a      	ldr	r2, [r3, #24]
 8003b10:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <USB_DevInit+0x2b8>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b24:	b004      	add	sp, #16
 8003b26:	4770      	bx	lr
 8003b28:	803c3800 	.word	0x803c3800
 8003b2c:	40000004 	.word	0x40000004

08003b30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3301      	adds	r3, #1
 8003b42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <USB_FlushTxFifo+0x64>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d901      	bls.n	8003b50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e01b      	b.n	8003b88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	daf2      	bge.n	8003b3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	019b      	lsls	r3, r3, #6
 8003b60:	f043 0220 	orr.w	r2, r3, #32
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a08      	ldr	r2, [pc, #32]	; (8003b94 <USB_FlushTxFifo+0x64>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e006      	b.n	8003b88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f003 0320 	and.w	r3, r3, #32
 8003b82:	2b20      	cmp	r3, #32
 8003b84:	d0f0      	beq.n	8003b68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	00030d40 	.word	0x00030d40

08003b98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4a11      	ldr	r2, [pc, #68]	; (8003bf4 <USB_FlushRxFifo+0x5c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e018      	b.n	8003be8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	daf2      	bge.n	8003ba4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2210      	movs	r2, #16
 8003bc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4a08      	ldr	r2, [pc, #32]	; (8003bf4 <USB_FlushRxFifo+0x5c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d901      	bls.n	8003bda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e006      	b.n	8003be8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b10      	cmp	r3, #16
 8003be4:	d0f0      	beq.n	8003bc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	00030d40 	.word	0x00030d40

08003bf8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	78fb      	ldrb	r3, [r7, #3]
 8003c12:	68f9      	ldr	r1, [r7, #12]
 8003c14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b087      	sub	sp, #28
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 0306 	and.w	r3, r3, #6
 8003c42:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d102      	bne.n	8003c50 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	75fb      	strb	r3, [r7, #23]
 8003c4e:	e00a      	b.n	8003c66 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d002      	beq.n	8003c5c <USB_GetDevSpeed+0x32>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b06      	cmp	r3, #6
 8003c5a:	d102      	bne.n	8003c62 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	75fb      	strb	r3, [r7, #23]
 8003c60:	e001      	b.n	8003c66 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003c62:	230f      	movs	r3, #15
 8003c64:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	785b      	ldrb	r3, [r3, #1]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d139      	bne.n	8003d04 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c96:	69da      	ldr	r2, [r3, #28]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	68f9      	ldr	r1, [r7, #12]
 8003caa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d153      	bne.n	8003d70 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	791b      	ldrb	r3, [r3, #4]
 8003ce2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ce4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	059b      	lsls	r3, r3, #22
 8003cea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cec:	431a      	orrs	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	0159      	lsls	r1, r3, #5
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	440b      	add	r3, r1
 8003cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4b20      	ldr	r3, [pc, #128]	; (8003d80 <USB_ActivateEndpoint+0x10c>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	600b      	str	r3, [r1, #0]
 8003d02:	e035      	b.n	8003d70 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	2101      	movs	r1, #1
 8003d16:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1a:	041b      	lsls	r3, r3, #16
 8003d1c:	68f9      	ldr	r1, [r7, #12]
 8003d1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d119      	bne.n	8003d70 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	791b      	ldrb	r3, [r3, #4]
 8003d56:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	0159      	lsls	r1, r3, #5
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	440b      	add	r3, r1
 8003d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <USB_ActivateEndpoint+0x10c>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	10008000 	.word	0x10008000

08003d84 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	785b      	ldrb	r3, [r3, #1]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d161      	bne.n	8003e64 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003db2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003db6:	d11f      	bne.n	8003df8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	0151      	lsls	r1, r2, #5
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	440a      	add	r2, r1
 8003dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dd6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	0151      	lsls	r1, r2, #5
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	440a      	add	r2, r1
 8003dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003df6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	2101      	movs	r1, #1
 8003e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	68f9      	ldr	r1, [r7, #12]
 8003e14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e18:	4013      	ands	r3, r2
 8003e1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	68f9      	ldr	r1, [r7, #12]
 8003e38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	0159      	lsls	r1, r3, #5
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	440b      	add	r3, r1
 8003e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4b35      	ldr	r3, [pc, #212]	; (8003f34 <USB_DeactivateEndpoint+0x1b0>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]
 8003e62:	e060      	b.n	8003f26 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e7a:	d11f      	bne.n	8003ebc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	0151      	lsls	r1, r2, #5
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	440a      	add	r2, r1
 8003e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e9a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	0151      	lsls	r1, r2, #5
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	440a      	add	r2, r1
 8003eb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003eba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	2101      	movs	r1, #1
 8003ece:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed2:	041b      	lsls	r3, r3, #16
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	68f9      	ldr	r1, [r7, #12]
 8003ed8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003edc:	4013      	ands	r3, r2
 8003ede:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee6:	69da      	ldr	r2, [r3, #28]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef6:	041b      	lsls	r3, r3, #16
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	68f9      	ldr	r1, [r7, #12]
 8003efc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f00:	4013      	ands	r3, r2
 8003f02:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	0159      	lsls	r1, r3, #5
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	440b      	add	r3, r1
 8003f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <USB_DeactivateEndpoint+0x1b4>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	ec337800 	.word	0xec337800
 8003f38:	eff37800 	.word	0xeff37800

08003f3c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08a      	sub	sp, #40	; 0x28
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	4613      	mov	r3, r2
 8003f48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	785b      	ldrb	r3, [r3, #1]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	f040 8163 	bne.w	8004224 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d132      	bne.n	8003fcc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	0159      	lsls	r1, r3, #5
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	440b      	add	r3, r1
 8003f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f80:	4619      	mov	r1, r3
 8003f82:	4ba5      	ldr	r3, [pc, #660]	; (8004218 <USB_EPStartXfer+0x2dc>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	0151      	lsls	r1, r2, #5
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	440a      	add	r2, r1
 8003f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fa6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	0159      	lsls	r1, r3, #5
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	440b      	add	r3, r1
 8003fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4b95      	ldr	r3, [pc, #596]	; (800421c <USB_EPStartXfer+0x2e0>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	610b      	str	r3, [r1, #16]
 8003fca:	e074      	b.n	80040b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	0159      	lsls	r1, r3, #5
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	440b      	add	r3, r1
 8003fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4b8c      	ldr	r3, [pc, #560]	; (800421c <USB_EPStartXfer+0x2e0>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	0159      	lsls	r1, r3, #5
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	440b      	add	r3, r1
 8004004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004008:	4619      	mov	r1, r3
 800400a:	4b83      	ldr	r3, [pc, #524]	; (8004218 <USB_EPStartXfer+0x2dc>)
 800400c:	4013      	ands	r3, r2
 800400e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	6999      	ldr	r1, [r3, #24]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	440b      	add	r3, r1
 8004028:	1e59      	subs	r1, r3, #1
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004032:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004034:	4b7a      	ldr	r3, [pc, #488]	; (8004220 <USB_EPStartXfer+0x2e4>)
 8004036:	400b      	ands	r3, r1
 8004038:	69b9      	ldr	r1, [r7, #24]
 800403a:	0148      	lsls	r0, r1, #5
 800403c:	69f9      	ldr	r1, [r7, #28]
 800403e:	4401      	add	r1, r0
 8004040:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004044:	4313      	orrs	r3, r2
 8004046:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800405e:	69b9      	ldr	r1, [r7, #24]
 8004060:	0148      	lsls	r0, r1, #5
 8004062:	69f9      	ldr	r1, [r7, #28]
 8004064:	4401      	add	r1, r0
 8004066:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800406a:	4313      	orrs	r3, r2
 800406c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	791b      	ldrb	r3, [r3, #4]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d11f      	bne.n	80040b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	0151      	lsls	r1, r2, #5
 8004088:	69fa      	ldr	r2, [r7, #28]
 800408a:	440a      	add	r2, r1
 800408c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004090:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004094:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	0151      	lsls	r1, r2, #5
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	440a      	add	r2, r1
 80040ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d14b      	bne.n	8004154 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d009      	beq.n	80040d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d0:	461a      	mov	r2, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	791b      	ldrb	r3, [r3, #4]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d128      	bne.n	8004132 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d110      	bne.n	8004112 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	0151      	lsls	r1, r2, #5
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	440a      	add	r2, r1
 8004106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800410a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	e00f      	b.n	8004132 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	0151      	lsls	r1, r2, #5
 8004124:	69fa      	ldr	r2, [r7, #28]
 8004126:	440a      	add	r2, r1
 8004128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800412c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004130:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	0151      	lsls	r1, r2, #5
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	440a      	add	r2, r1
 8004148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800414c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	e137      	b.n	80043c4 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	0151      	lsls	r1, r2, #5
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	440a      	add	r2, r1
 800416a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800416e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004172:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	791b      	ldrb	r3, [r3, #4]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d015      	beq.n	80041a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 811f 	beq.w	80043c4 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	2101      	movs	r1, #1
 8004198:	fa01 f303 	lsl.w	r3, r1, r3
 800419c:	69f9      	ldr	r1, [r7, #28]
 800419e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041a2:	4313      	orrs	r3, r2
 80041a4:	634b      	str	r3, [r1, #52]	; 0x34
 80041a6:	e10d      	b.n	80043c4 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d110      	bne.n	80041da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	0151      	lsls	r1, r2, #5
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	440a      	add	r2, r1
 80041ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	e00f      	b.n	80041fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	0151      	lsls	r1, r2, #5
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	440a      	add	r2, r1
 80041f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	6919      	ldr	r1, [r3, #16]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	781a      	ldrb	r2, [r3, #0]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	b298      	uxth	r0, r3
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	4603      	mov	r3, r0
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 faea 	bl	80047e8 <USB_WritePacket>
 8004214:	e0d6      	b.n	80043c4 <USB_EPStartXfer+0x488>
 8004216:	bf00      	nop
 8004218:	e007ffff 	.word	0xe007ffff
 800421c:	fff80000 	.word	0xfff80000
 8004220:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	0159      	lsls	r1, r3, #5
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	440b      	add	r3, r1
 800423a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423e:	4619      	mov	r1, r3
 8004240:	4b63      	ldr	r3, [pc, #396]	; (80043d0 <USB_EPStartXfer+0x494>)
 8004242:	4013      	ands	r3, r2
 8004244:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004252:	691a      	ldr	r2, [r3, #16]
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	0159      	lsls	r1, r3, #5
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	440b      	add	r3, r1
 800425c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004260:	4619      	mov	r1, r3
 8004262:	4b5c      	ldr	r3, [pc, #368]	; (80043d4 <USB_EPStartXfer+0x498>)
 8004264:	4013      	ands	r3, r2
 8004266:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d123      	bne.n	80042b8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004286:	69b9      	ldr	r1, [r7, #24]
 8004288:	0148      	lsls	r0, r1, #5
 800428a:	69f9      	ldr	r1, [r7, #28]
 800428c:	4401      	add	r1, r0
 800428e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004292:	4313      	orrs	r3, r2
 8004294:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	0151      	lsls	r1, r2, #5
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	440a      	add	r2, r1
 80042ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042b4:	6113      	str	r3, [r2, #16]
 80042b6:	e037      	b.n	8004328 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	699a      	ldr	r2, [r3, #24]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4413      	add	r3, r2
 80042c2:	1e5a      	subs	r2, r3, #1
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042cc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	8afa      	ldrh	r2, [r7, #22]
 80042d4:	fb03 f202 	mul.w	r2, r3, r2
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e8:	691a      	ldr	r2, [r3, #16]
 80042ea:	8afb      	ldrh	r3, [r7, #22]
 80042ec:	04d9      	lsls	r1, r3, #19
 80042ee:	4b3a      	ldr	r3, [pc, #232]	; (80043d8 <USB_EPStartXfer+0x49c>)
 80042f0:	400b      	ands	r3, r1
 80042f2:	69b9      	ldr	r1, [r7, #24]
 80042f4:	0148      	lsls	r0, r1, #5
 80042f6:	69f9      	ldr	r1, [r7, #28]
 80042f8:	4401      	add	r1, r0
 80042fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042fe:	4313      	orrs	r3, r2
 8004300:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004318:	69b9      	ldr	r1, [r7, #24]
 800431a:	0148      	lsls	r0, r1, #5
 800431c:	69f9      	ldr	r1, [r7, #28]
 800431e:	4401      	add	r1, r0
 8004320:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004324:	4313      	orrs	r3, r2
 8004326:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d10d      	bne.n	800434a <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	6919      	ldr	r1, [r3, #16]
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004346:	460a      	mov	r2, r1
 8004348:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	791b      	ldrb	r3, [r3, #4]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d128      	bne.n	80043a4 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435e:	2b00      	cmp	r3, #0
 8004360:	d110      	bne.n	8004384 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	0151      	lsls	r1, r2, #5
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	440a      	add	r2, r1
 8004378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800437c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	e00f      	b.n	80043a4 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	0151      	lsls	r1, r2, #5
 8004396:	69fa      	ldr	r2, [r7, #28]
 8004398:	440a      	add	r2, r1
 800439a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800439e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	0151      	lsls	r1, r2, #5
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	440a      	add	r2, r1
 80043ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3720      	adds	r7, #32
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	fff80000 	.word	0xfff80000
 80043d4:	e007ffff 	.word	0xe007ffff
 80043d8:	1ff80000 	.word	0x1ff80000

080043dc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	4613      	mov	r3, r2
 80043e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	785b      	ldrb	r3, [r3, #1]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	f040 80ce 	bne.w	800459a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d132      	bne.n	800446c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	0159      	lsls	r1, r3, #5
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	440b      	add	r3, r1
 800441c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004420:	4619      	mov	r1, r3
 8004422:	4b9a      	ldr	r3, [pc, #616]	; (800468c <USB_EP0StartXfer+0x2b0>)
 8004424:	4013      	ands	r3, r2
 8004426:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	0151      	lsls	r1, r2, #5
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	440a      	add	r2, r1
 800443e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004442:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004446:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	0159      	lsls	r1, r3, #5
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	440b      	add	r3, r1
 800445e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004462:	4619      	mov	r1, r3
 8004464:	4b8a      	ldr	r3, [pc, #552]	; (8004690 <USB_EP0StartXfer+0x2b4>)
 8004466:	4013      	ands	r3, r2
 8004468:	610b      	str	r3, [r1, #16]
 800446a:	e04e      	b.n	800450a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	0159      	lsls	r1, r3, #5
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	440b      	add	r3, r1
 8004482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004486:	4619      	mov	r1, r3
 8004488:	4b81      	ldr	r3, [pc, #516]	; (8004690 <USB_EP0StartXfer+0x2b4>)
 800448a:	4013      	ands	r3, r2
 800448c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	4413      	add	r3, r2
 8004496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	0159      	lsls	r1, r3, #5
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	440b      	add	r3, r1
 80044a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a8:	4619      	mov	r1, r3
 80044aa:	4b78      	ldr	r3, [pc, #480]	; (800468c <USB_EP0StartXfer+0x2b0>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	699a      	ldr	r2, [r3, #24]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d903      	bls.n	80044c4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	0151      	lsls	r1, r2, #5
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	440a      	add	r2, r1
 80044da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044fa:	6939      	ldr	r1, [r7, #16]
 80044fc:	0148      	lsls	r0, r1, #5
 80044fe:	6979      	ldr	r1, [r7, #20]
 8004500:	4401      	add	r1, r0
 8004502:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004506:	4313      	orrs	r3, r2
 8004508:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d11e      	bne.n	800454e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d009      	beq.n	800452c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004524:	461a      	mov	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	0151      	lsls	r1, r2, #5
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	440a      	add	r2, r1
 8004542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004546:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	e097      	b.n	800467e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	0151      	lsls	r1, r2, #5
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	440a      	add	r2, r1
 8004564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004568:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800456c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 8083 	beq.w	800467e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	2101      	movs	r1, #1
 800458a:	fa01 f303 	lsl.w	r3, r1, r3
 800458e:	6979      	ldr	r1, [r7, #20]
 8004590:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004594:	4313      	orrs	r3, r2
 8004596:	634b      	str	r3, [r1, #52]	; 0x34
 8004598:	e071      	b.n	800467e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	0159      	lsls	r1, r3, #5
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	440b      	add	r3, r1
 80045b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b4:	4619      	mov	r1, r3
 80045b6:	4b36      	ldr	r3, [pc, #216]	; (8004690 <USB_EP0StartXfer+0x2b4>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	0159      	lsls	r1, r3, #5
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	440b      	add	r3, r1
 80045d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d6:	4619      	mov	r1, r3
 80045d8:	4b2c      	ldr	r3, [pc, #176]	; (800468c <USB_EP0StartXfer+0x2b0>)
 80045da:	4013      	ands	r3, r2
 80045dc:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	0151      	lsls	r1, r2, #5
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	440a      	add	r2, r1
 800460c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004610:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004614:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	4413      	add	r3, r2
 800461e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800462c:	6939      	ldr	r1, [r7, #16]
 800462e:	0148      	lsls	r0, r1, #5
 8004630:	6979      	ldr	r1, [r7, #20]
 8004632:	4401      	add	r1, r0
 8004634:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004638:	4313      	orrs	r3, r2
 800463a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d10d      	bne.n	800465e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d009      	beq.n	800465e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	6919      	ldr	r1, [r3, #16]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465a:	460a      	mov	r2, r1
 800465c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	0151      	lsls	r1, r2, #5
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	440a      	add	r2, r1
 8004674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004678:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800467c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	371c      	adds	r7, #28
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	e007ffff 	.word	0xe007ffff
 8004690:	fff80000 	.word	0xfff80000

08004694 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	785b      	ldrb	r3, [r3, #1]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d14a      	bne.n	8004748 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ca:	f040 8086 	bne.w	80047da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	7812      	ldrb	r2, [r2, #0]
 80046e2:	0151      	lsls	r1, r2, #5
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	440a      	add	r2, r1
 80046e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	7812      	ldrb	r2, [r2, #0]
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	440a      	add	r2, r1
 800470c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004710:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004714:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3301      	adds	r3, #1
 800471a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004722:	4293      	cmp	r3, r2
 8004724:	d902      	bls.n	800472c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	75fb      	strb	r3, [r7, #23]
          break;
 800472a:	e056      	b.n	80047da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	4413      	add	r3, r2
 8004736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004744:	d0e7      	beq.n	8004716 <USB_EPStopXfer+0x82>
 8004746:	e048      	b.n	80047da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800475c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004760:	d13b      	bne.n	80047da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	4413      	add	r3, r2
 800476c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	7812      	ldrb	r2, [r2, #0]
 8004776:	0151      	lsls	r1, r2, #5
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	440a      	add	r2, r1
 800477c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004780:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004784:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	7812      	ldrb	r2, [r2, #0]
 800479a:	0151      	lsls	r1, r2, #5
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	440a      	add	r2, r1
 80047a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3301      	adds	r3, #1
 80047ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d902      	bls.n	80047c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	75fb      	strb	r3, [r7, #23]
          break;
 80047be:	e00c      	b.n	80047da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047d8:	d0e7      	beq.n	80047aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80047da:	7dfb      	ldrb	r3, [r7, #23]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b089      	sub	sp, #36	; 0x24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	4611      	mov	r1, r2
 80047f4:	461a      	mov	r2, r3
 80047f6:	460b      	mov	r3, r1
 80047f8:	71fb      	strb	r3, [r7, #7]
 80047fa:	4613      	mov	r3, r2
 80047fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004806:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800480a:	2b00      	cmp	r3, #0
 800480c:	d123      	bne.n	8004856 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800480e:	88bb      	ldrh	r3, [r7, #4]
 8004810:	3303      	adds	r3, #3
 8004812:	089b      	lsrs	r3, r3, #2
 8004814:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004816:	2300      	movs	r3, #0
 8004818:	61bb      	str	r3, [r7, #24]
 800481a:	e018      	b.n	800484e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	031a      	lsls	r2, r3, #12
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	4413      	add	r3, r2
 8004824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004828:	461a      	mov	r2, r3
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	3301      	adds	r3, #1
 8004834:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	3301      	adds	r3, #1
 800483a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	3301      	adds	r3, #1
 8004840:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	3301      	adds	r3, #1
 8004846:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	3301      	adds	r3, #1
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	429a      	cmp	r2, r3
 8004854:	d3e2      	bcc.n	800481c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3724      	adds	r7, #36	; 0x24
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004864:	b480      	push	{r7}
 8004866:	b08b      	sub	sp, #44	; 0x2c
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800487a:	88fb      	ldrh	r3, [r7, #6]
 800487c:	089b      	lsrs	r3, r3, #2
 800487e:	b29b      	uxth	r3, r3
 8004880:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	f003 0303 	and.w	r3, r3, #3
 8004888:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800488a:	2300      	movs	r3, #0
 800488c:	623b      	str	r3, [r7, #32]
 800488e:	e014      	b.n	80048ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	601a      	str	r2, [r3, #0]
    pDest++;
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	3301      	adds	r3, #1
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	3301      	adds	r3, #1
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	3301      	adds	r3, #1
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	3301      	adds	r3, #1
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	3301      	adds	r3, #1
 80048b8:	623b      	str	r3, [r7, #32]
 80048ba:	6a3a      	ldr	r2, [r7, #32]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d3e6      	bcc.n	8004890 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80048c2:	8bfb      	ldrh	r3, [r7, #30]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01e      	beq.n	8004906 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d2:	461a      	mov	r2, r3
 80048d4:	f107 0310 	add.w	r3, r7, #16
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	701a      	strb	r2, [r3, #0]
      i++;
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	3301      	adds	r3, #1
 80048f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	3301      	adds	r3, #1
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80048fa:	8bfb      	ldrh	r3, [r7, #30]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004900:	8bfb      	ldrh	r3, [r7, #30]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1ea      	bne.n	80048dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004908:	4618      	mov	r0, r3
 800490a:	372c      	adds	r7, #44	; 0x2c
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	785b      	ldrb	r3, [r3, #1]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d12c      	bne.n	800498a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	db12      	blt.n	8004968 <USB_EPSetStall+0x54>
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00f      	beq.n	8004968 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	440a      	add	r2, r1
 800495e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004962:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004966:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	0151      	lsls	r1, r2, #5
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	440a      	add	r2, r1
 800497e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004982:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	e02b      	b.n	80049e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	db12      	blt.n	80049c2 <USB_EPSetStall+0xae>
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00f      	beq.n	80049c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	0151      	lsls	r1, r2, #5
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	440a      	add	r2, r1
 80049b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	0151      	lsls	r1, r2, #5
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	440a      	add	r2, r1
 80049d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	785b      	ldrb	r3, [r3, #1]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d128      	bne.n	8004a5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	791b      	ldrb	r3, [r3, #4]
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d003      	beq.n	8004a3c <USB_EPClearStall+0x4c>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	791b      	ldrb	r3, [r3, #4]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d138      	bne.n	8004aae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	0151      	lsls	r1, r2, #5
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	440a      	add	r2, r1
 8004a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	e027      	b.n	8004aae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	791b      	ldrb	r3, [r3, #4]
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d003      	beq.n	8004a8e <USB_EPClearStall+0x9e>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	791b      	ldrb	r3, [r3, #4]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d10f      	bne.n	8004aae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	0151      	lsls	r1, r2, #5
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	440a      	add	r2, r1
 8004aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ada:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004ade:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004af0:	68f9      	ldr	r1, [r7, #12]
 8004af2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004af6:	4313      	orrs	r3, r2
 8004af8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b22:	f023 0303 	bic.w	r3, r3, #3
 8004b26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b36:	f023 0302 	bic.w	r3, r3, #2
 8004b3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b085      	sub	sp, #20
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b64:	f023 0303 	bic.w	r3, r3, #3
 8004b68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b78:	f043 0302 	orr.w	r3, r3, #2
 8004b7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b085      	sub	sp, #20
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	0c1b      	lsrs	r3, r3, #16
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b085      	sub	sp, #20
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	4013      	ands	r3, r2
 8004c08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	b29b      	uxth	r3, r3
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b085      	sub	sp, #20
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	460b      	mov	r3, r1
 8004c24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004c2a:	78fb      	ldrb	r3, [r7, #3]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	4013      	ands	r3, r2
 8004c46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c48:	68bb      	ldr	r3, [r7, #8]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b087      	sub	sp, #28
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c7a:	78fb      	ldrb	r3, [r7, #3]
 8004c7c:	f003 030f 	and.w	r3, r3, #15
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	fa22 f303 	lsr.w	r3, r2, r3
 8004c86:	01db      	lsls	r3, r3, #7
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
	...

08004cd0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cea:	4619      	mov	r1, r3
 8004cec:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <USB_ActivateSetup+0x44>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	fffff800 	.word	0xfffff800

08004d18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	460b      	mov	r3, r1
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	333c      	adds	r3, #60	; 0x3c
 8004d2e:	3304      	adds	r3, #4
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	4a26      	ldr	r2, [pc, #152]	; (8004dd0 <USB_EP0_OutStart+0xb8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d90a      	bls.n	8004d52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d4c:	d101      	bne.n	8004d52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e037      	b.n	8004dc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d58:	461a      	mov	r2, r3
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d80:	f043 0318 	orr.w	r3, r3, #24
 8004d84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004d98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004d9a:	7afb      	ldrb	r3, [r7, #11]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d10f      	bne.n	8004dc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da6:	461a      	mov	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004dbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	4f54300a 	.word	0x4f54300a

08004dd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3301      	adds	r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4a13      	ldr	r2, [pc, #76]	; (8004e38 <USB_CoreReset+0x64>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d901      	bls.n	8004df2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e01b      	b.n	8004e2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	daf2      	bge.n	8004de0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f043 0201 	orr.w	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4a09      	ldr	r2, [pc, #36]	; (8004e38 <USB_CoreReset+0x64>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d901      	bls.n	8004e1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e006      	b.n	8004e2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d0f0      	beq.n	8004e0a <USB_CoreReset+0x36>

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	00030d40 	.word	0x00030d40

08004e3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e48:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e4c:	f002 fdda 	bl	8007a04 <malloc>
 8004e50:	4603      	mov	r3, r0
 8004e52:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d109      	bne.n	8004e6e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	32b0      	adds	r2, #176	; 0xb0
 8004e64:	2100      	movs	r1, #0
 8004e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	e0d4      	b.n	8005018 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004e6e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004e72:	2100      	movs	r1, #0
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f002 fdd5 	bl	8007a24 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	32b0      	adds	r2, #176	; 0xb0
 8004e84:	68f9      	ldr	r1, [r7, #12]
 8004e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	32b0      	adds	r2, #176	; 0xb0
 8004e94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	7c1b      	ldrb	r3, [r3, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d138      	bne.n	8004f18 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ea6:	4b5e      	ldr	r3, [pc, #376]	; (8005020 <USBD_CDC_Init+0x1e4>)
 8004ea8:	7819      	ldrb	r1, [r3, #0]
 8004eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eae:	2202      	movs	r2, #2
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f002 fbda 	bl	800766a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004eb6:	4b5a      	ldr	r3, [pc, #360]	; (8005020 <USBD_CDC_Init+0x1e4>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	f003 020f 	and.w	r2, r3, #15
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	3324      	adds	r3, #36	; 0x24
 8004ecc:	2201      	movs	r2, #1
 8004ece:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004ed0:	4b54      	ldr	r3, [pc, #336]	; (8005024 <USBD_CDC_Init+0x1e8>)
 8004ed2:	7819      	ldrb	r1, [r3, #0]
 8004ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ed8:	2202      	movs	r2, #2
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f002 fbc5 	bl	800766a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004ee0:	4b50      	ldr	r3, [pc, #320]	; (8005024 <USBD_CDC_Init+0x1e8>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	f003 020f 	and.w	r2, r3, #15
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004ef8:	2201      	movs	r2, #1
 8004efa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004efc:	4b4a      	ldr	r3, [pc, #296]	; (8005028 <USBD_CDC_Init+0x1ec>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	f003 020f 	and.w	r2, r3, #15
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	3326      	adds	r3, #38	; 0x26
 8004f12:	2210      	movs	r2, #16
 8004f14:	801a      	strh	r2, [r3, #0]
 8004f16:	e035      	b.n	8004f84 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004f18:	4b41      	ldr	r3, [pc, #260]	; (8005020 <USBD_CDC_Init+0x1e4>)
 8004f1a:	7819      	ldrb	r1, [r3, #0]
 8004f1c:	2340      	movs	r3, #64	; 0x40
 8004f1e:	2202      	movs	r2, #2
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f002 fba2 	bl	800766a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004f26:	4b3e      	ldr	r3, [pc, #248]	; (8005020 <USBD_CDC_Init+0x1e4>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	f003 020f 	and.w	r2, r3, #15
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	3324      	adds	r3, #36	; 0x24
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004f40:	4b38      	ldr	r3, [pc, #224]	; (8005024 <USBD_CDC_Init+0x1e8>)
 8004f42:	7819      	ldrb	r1, [r3, #0]
 8004f44:	2340      	movs	r3, #64	; 0x40
 8004f46:	2202      	movs	r2, #2
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f002 fb8e 	bl	800766a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f4e:	4b35      	ldr	r3, [pc, #212]	; (8005024 <USBD_CDC_Init+0x1e8>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	f003 020f 	and.w	r2, r3, #15
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f66:	2201      	movs	r2, #1
 8004f68:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f6a:	4b2f      	ldr	r3, [pc, #188]	; (8005028 <USBD_CDC_Init+0x1ec>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	f003 020f 	and.w	r2, r3, #15
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	3326      	adds	r3, #38	; 0x26
 8004f80:	2210      	movs	r2, #16
 8004f82:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f84:	4b28      	ldr	r3, [pc, #160]	; (8005028 <USBD_CDC_Init+0x1ec>)
 8004f86:	7819      	ldrb	r1, [r3, #0]
 8004f88:	2308      	movs	r3, #8
 8004f8a:	2203      	movs	r2, #3
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f002 fb6c 	bl	800766a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004f92:	4b25      	ldr	r3, [pc, #148]	; (8005028 <USBD_CDC_Init+0x1ec>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	f003 020f 	and.w	r2, r3, #15
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	3324      	adds	r3, #36	; 0x24
 8004fa8:	2201      	movs	r2, #1
 8004faa:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	33b0      	adds	r3, #176	; 0xb0
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e018      	b.n	8005018 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	7c1b      	ldrb	r3, [r3, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10a      	bne.n	8005004 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004fee:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <USBD_CDC_Init+0x1e8>)
 8004ff0:	7819      	ldrb	r1, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f002 fc23 	bl	8007848 <USBD_LL_PrepareReceive>
 8005002:	e008      	b.n	8005016 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005004:	4b07      	ldr	r3, [pc, #28]	; (8005024 <USBD_CDC_Init+0x1e8>)
 8005006:	7819      	ldrb	r1, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800500e:	2340      	movs	r3, #64	; 0x40
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f002 fc19 	bl	8007848 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20000093 	.word	0x20000093
 8005024:	20000094 	.word	0x20000094
 8005028:	20000095 	.word	0x20000095

0800502c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005038:	4b3a      	ldr	r3, [pc, #232]	; (8005124 <USBD_CDC_DeInit+0xf8>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	4619      	mov	r1, r3
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f002 fb39 	bl	80076b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005044:	4b37      	ldr	r3, [pc, #220]	; (8005124 <USBD_CDC_DeInit+0xf8>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	f003 020f 	and.w	r2, r3, #15
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	440b      	add	r3, r1
 8005058:	3324      	adds	r3, #36	; 0x24
 800505a:	2200      	movs	r2, #0
 800505c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800505e:	4b32      	ldr	r3, [pc, #200]	; (8005128 <USBD_CDC_DeInit+0xfc>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	4619      	mov	r1, r3
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f002 fb26 	bl	80076b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800506a:	4b2f      	ldr	r3, [pc, #188]	; (8005128 <USBD_CDC_DeInit+0xfc>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	f003 020f 	and.w	r2, r3, #15
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005082:	2200      	movs	r2, #0
 8005084:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005086:	4b29      	ldr	r3, [pc, #164]	; (800512c <USBD_CDC_DeInit+0x100>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	4619      	mov	r1, r3
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f002 fb12 	bl	80076b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005092:	4b26      	ldr	r3, [pc, #152]	; (800512c <USBD_CDC_DeInit+0x100>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	f003 020f 	and.w	r2, r3, #15
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	3324      	adds	r3, #36	; 0x24
 80050a8:	2200      	movs	r2, #0
 80050aa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80050ac:	4b1f      	ldr	r3, [pc, #124]	; (800512c <USBD_CDC_DeInit+0x100>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	f003 020f 	and.w	r2, r3, #15
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	3326      	adds	r3, #38	; 0x26
 80050c2:	2200      	movs	r2, #0
 80050c4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	32b0      	adds	r2, #176	; 0xb0
 80050d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d01f      	beq.n	8005118 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	33b0      	adds	r3, #176	; 0xb0
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	32b0      	adds	r2, #176	; 0xb0
 80050f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f002 fc8a 	bl	8007a14 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	32b0      	adds	r2, #176	; 0xb0
 800510a:	2100      	movs	r1, #0
 800510c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20000093 	.word	0x20000093
 8005128:	20000094 	.word	0x20000094
 800512c:	20000095 	.word	0x20000095

08005130 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	32b0      	adds	r2, #176	; 0xb0
 8005144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005148:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800515c:	2303      	movs	r3, #3
 800515e:	e0bf      	b.n	80052e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005168:	2b00      	cmp	r3, #0
 800516a:	d050      	beq.n	800520e <USBD_CDC_Setup+0xde>
 800516c:	2b20      	cmp	r3, #32
 800516e:	f040 80af 	bne.w	80052d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	88db      	ldrh	r3, [r3, #6]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d03a      	beq.n	80051f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	b25b      	sxtb	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	da1b      	bge.n	80051bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	33b0      	adds	r3, #176	; 0xb0
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800519a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	88d2      	ldrh	r2, [r2, #6]
 80051a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	88db      	ldrh	r3, [r3, #6]
 80051a6:	2b07      	cmp	r3, #7
 80051a8:	bf28      	it	cs
 80051aa:	2307      	movcs	r3, #7
 80051ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	89fa      	ldrh	r2, [r7, #14]
 80051b2:	4619      	mov	r1, r3
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f001 fdad 	bl	8006d14 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80051ba:	e090      	b.n	80052de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	785a      	ldrb	r2, [r3, #1]
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	88db      	ldrh	r3, [r3, #6]
 80051ca:	2b3f      	cmp	r3, #63	; 0x3f
 80051cc:	d803      	bhi.n	80051d6 <USBD_CDC_Setup+0xa6>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	88db      	ldrh	r3, [r3, #6]
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	e000      	b.n	80051d8 <USBD_CDC_Setup+0xa8>
 80051d6:	2240      	movs	r2, #64	; 0x40
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80051de:	6939      	ldr	r1, [r7, #16]
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80051e6:	461a      	mov	r2, r3
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f001 fdbf 	bl	8006d6c <USBD_CtlPrepareRx>
      break;
 80051ee:	e076      	b.n	80052de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	33b0      	adds	r3, #176	; 0xb0
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	7850      	ldrb	r0, [r2, #1]
 8005206:	2200      	movs	r2, #0
 8005208:	6839      	ldr	r1, [r7, #0]
 800520a:	4798      	blx	r3
      break;
 800520c:	e067      	b.n	80052de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	785b      	ldrb	r3, [r3, #1]
 8005212:	2b0b      	cmp	r3, #11
 8005214:	d851      	bhi.n	80052ba <USBD_CDC_Setup+0x18a>
 8005216:	a201      	add	r2, pc, #4	; (adr r2, 800521c <USBD_CDC_Setup+0xec>)
 8005218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521c:	0800524d 	.word	0x0800524d
 8005220:	080052c9 	.word	0x080052c9
 8005224:	080052bb 	.word	0x080052bb
 8005228:	080052bb 	.word	0x080052bb
 800522c:	080052bb 	.word	0x080052bb
 8005230:	080052bb 	.word	0x080052bb
 8005234:	080052bb 	.word	0x080052bb
 8005238:	080052bb 	.word	0x080052bb
 800523c:	080052bb 	.word	0x080052bb
 8005240:	080052bb 	.word	0x080052bb
 8005244:	08005277 	.word	0x08005277
 8005248:	080052a1 	.word	0x080052a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b03      	cmp	r3, #3
 8005256:	d107      	bne.n	8005268 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005258:	f107 030a 	add.w	r3, r7, #10
 800525c:	2202      	movs	r2, #2
 800525e:	4619      	mov	r1, r3
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f001 fd57 	bl	8006d14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005266:	e032      	b.n	80052ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005268:	6839      	ldr	r1, [r7, #0]
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f001 fce1 	bl	8006c32 <USBD_CtlError>
            ret = USBD_FAIL;
 8005270:	2303      	movs	r3, #3
 8005272:	75fb      	strb	r3, [r7, #23]
          break;
 8005274:	e02b      	b.n	80052ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b03      	cmp	r3, #3
 8005280:	d107      	bne.n	8005292 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005282:	f107 030d 	add.w	r3, r7, #13
 8005286:	2201      	movs	r2, #1
 8005288:	4619      	mov	r1, r3
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f001 fd42 	bl	8006d14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005290:	e01d      	b.n	80052ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005292:	6839      	ldr	r1, [r7, #0]
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f001 fccc 	bl	8006c32 <USBD_CtlError>
            ret = USBD_FAIL;
 800529a:	2303      	movs	r3, #3
 800529c:	75fb      	strb	r3, [r7, #23]
          break;
 800529e:	e016      	b.n	80052ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d00f      	beq.n	80052cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80052ac:	6839      	ldr	r1, [r7, #0]
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f001 fcbf 	bl	8006c32 <USBD_CtlError>
            ret = USBD_FAIL;
 80052b4:	2303      	movs	r3, #3
 80052b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80052b8:	e008      	b.n	80052cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80052ba:	6839      	ldr	r1, [r7, #0]
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f001 fcb8 	bl	8006c32 <USBD_CtlError>
          ret = USBD_FAIL;
 80052c2:	2303      	movs	r3, #3
 80052c4:	75fb      	strb	r3, [r7, #23]
          break;
 80052c6:	e002      	b.n	80052ce <USBD_CDC_Setup+0x19e>
          break;
 80052c8:	bf00      	nop
 80052ca:	e008      	b.n	80052de <USBD_CDC_Setup+0x1ae>
          break;
 80052cc:	bf00      	nop
      }
      break;
 80052ce:	e006      	b.n	80052de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f001 fcad 	bl	8006c32 <USBD_CtlError>
      ret = USBD_FAIL;
 80052d8:	2303      	movs	r3, #3
 80052da:	75fb      	strb	r3, [r7, #23]
      break;
 80052dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80052de:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80052fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	32b0      	adds	r2, #176	; 0xb0
 8005306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800530e:	2303      	movs	r3, #3
 8005310:	e065      	b.n	80053de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	32b0      	adds	r2, #176	; 0xb0
 800531c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005320:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	f003 020f 	and.w	r2, r3, #15
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	4613      	mov	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	440b      	add	r3, r1
 8005334:	3318      	adds	r3, #24
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d02f      	beq.n	800539c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800533c:	78fb      	ldrb	r3, [r7, #3]
 800533e:	f003 020f 	and.w	r2, r3, #15
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	440b      	add	r3, r1
 800534e:	3318      	adds	r3, #24
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	78fb      	ldrb	r3, [r7, #3]
 8005354:	f003 010f 	and.w	r1, r3, #15
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	460b      	mov	r3, r1
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	440b      	add	r3, r1
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4403      	add	r3, r0
 8005364:	3348      	adds	r3, #72	; 0x48
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	fbb2 f1f3 	udiv	r1, r2, r3
 800536c:	fb01 f303 	mul.w	r3, r1, r3
 8005370:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005372:	2b00      	cmp	r3, #0
 8005374:	d112      	bne.n	800539c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005376:	78fb      	ldrb	r3, [r7, #3]
 8005378:	f003 020f 	and.w	r2, r3, #15
 800537c:	6879      	ldr	r1, [r7, #4]
 800537e:	4613      	mov	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	440b      	add	r3, r1
 8005388:	3318      	adds	r3, #24
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800538e:	78f9      	ldrb	r1, [r7, #3]
 8005390:	2300      	movs	r3, #0
 8005392:	2200      	movs	r2, #0
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f002 fa36 	bl	8007806 <USBD_LL_Transmit>
 800539a:	e01f      	b.n	80053dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2200      	movs	r2, #0
 80053a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	33b0      	adds	r3, #176	; 0xb0
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d010      	beq.n	80053dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	33b0      	adds	r3, #176	; 0xb0
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80053d8:	78fa      	ldrb	r2, [r7, #3]
 80053da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	460b      	mov	r3, r1
 80053f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	32b0      	adds	r2, #176	; 0xb0
 80053fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005400:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	32b0      	adds	r2, #176	; 0xb0
 800540c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005414:	2303      	movs	r3, #3
 8005416:	e01a      	b.n	800544e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	4619      	mov	r1, r3
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f002 fa34 	bl	800788a <USBD_LL_GetRxDataSize>
 8005422:	4602      	mov	r2, r0
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	33b0      	adds	r3, #176	; 0xb0
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005448:	4611      	mov	r1, r2
 800544a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	32b0      	adds	r2, #176	; 0xb0
 8005468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800546c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005474:	2303      	movs	r3, #3
 8005476:	e025      	b.n	80054c4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	33b0      	adds	r3, #176	; 0xb0
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01a      	beq.n	80054c2 <USBD_CDC_EP0_RxReady+0x6c>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005492:	2bff      	cmp	r3, #255	; 0xff
 8005494:	d015      	beq.n	80054c2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	33b0      	adds	r3, #176	; 0xb0
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80054ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80054b6:	b292      	uxth	r2, r2
 80054b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	22ff      	movs	r2, #255	; 0xff
 80054be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80054d4:	2182      	movs	r1, #130	; 0x82
 80054d6:	4818      	ldr	r0, [pc, #96]	; (8005538 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054d8:	f000 fd49 	bl	8005f6e <USBD_GetEpDesc>
 80054dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80054de:	2101      	movs	r1, #1
 80054e0:	4815      	ldr	r0, [pc, #84]	; (8005538 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054e2:	f000 fd44 	bl	8005f6e <USBD_GetEpDesc>
 80054e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80054e8:	2181      	movs	r1, #129	; 0x81
 80054ea:	4813      	ldr	r0, [pc, #76]	; (8005538 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054ec:	f000 fd3f 	bl	8005f6e <USBD_GetEpDesc>
 80054f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2210      	movs	r2, #16
 80054fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d006      	beq.n	8005512 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	2200      	movs	r2, #0
 8005508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800550c:	711a      	strb	r2, [r3, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d006      	beq.n	8005526 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005520:	711a      	strb	r2, [r3, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2243      	movs	r2, #67	; 0x43
 800552a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800552c:	4b02      	ldr	r3, [pc, #8]	; (8005538 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800552e:	4618      	mov	r0, r3
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000050 	.word	0x20000050

0800553c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005544:	2182      	movs	r1, #130	; 0x82
 8005546:	4818      	ldr	r0, [pc, #96]	; (80055a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005548:	f000 fd11 	bl	8005f6e <USBD_GetEpDesc>
 800554c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800554e:	2101      	movs	r1, #1
 8005550:	4815      	ldr	r0, [pc, #84]	; (80055a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005552:	f000 fd0c 	bl	8005f6e <USBD_GetEpDesc>
 8005556:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005558:	2181      	movs	r1, #129	; 0x81
 800555a:	4813      	ldr	r0, [pc, #76]	; (80055a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800555c:	f000 fd07 	bl	8005f6e <USBD_GetEpDesc>
 8005560:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2210      	movs	r2, #16
 800556c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d006      	beq.n	8005582 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	2200      	movs	r2, #0
 8005578:	711a      	strb	r2, [r3, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f042 0202 	orr.w	r2, r2, #2
 8005580:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d006      	beq.n	8005596 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	711a      	strb	r2, [r3, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f042 0202 	orr.w	r2, r2, #2
 8005594:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2243      	movs	r2, #67	; 0x43
 800559a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800559c:	4b02      	ldr	r3, [pc, #8]	; (80055a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000050 	.word	0x20000050

080055ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055b4:	2182      	movs	r1, #130	; 0x82
 80055b6:	4818      	ldr	r0, [pc, #96]	; (8005618 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055b8:	f000 fcd9 	bl	8005f6e <USBD_GetEpDesc>
 80055bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80055be:	2101      	movs	r1, #1
 80055c0:	4815      	ldr	r0, [pc, #84]	; (8005618 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055c2:	f000 fcd4 	bl	8005f6e <USBD_GetEpDesc>
 80055c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80055c8:	2181      	movs	r1, #129	; 0x81
 80055ca:	4813      	ldr	r0, [pc, #76]	; (8005618 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055cc:	f000 fccf 	bl	8005f6e <USBD_GetEpDesc>
 80055d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2210      	movs	r2, #16
 80055dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d006      	beq.n	80055f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055ec:	711a      	strb	r2, [r3, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d006      	beq.n	8005606 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005600:	711a      	strb	r2, [r3, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2243      	movs	r2, #67	; 0x43
 800560a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800560c:	4b02      	ldr	r3, [pc, #8]	; (8005618 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20000050 	.word	0x20000050

0800561c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	220a      	movs	r2, #10
 8005628:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800562a:	4b03      	ldr	r3, [pc, #12]	; (8005638 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800562c:	4618      	mov	r0, r3
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	2000000c 	.word	0x2000000c

0800563c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800564c:	2303      	movs	r3, #3
 800564e:	e009      	b.n	8005664 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	33b0      	adds	r3, #176	; 0xb0
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	32b0      	adds	r2, #176	; 0xb0
 8005686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800568a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005692:	2303      	movs	r3, #3
 8005694:	e008      	b.n	80056a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	371c      	adds	r7, #28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	32b0      	adds	r2, #176	; 0xb0
 80056c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e004      	b.n	80056e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
	...

080056f0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	32b0      	adds	r2, #176	; 0xb0
 8005702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005706:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005708:	2301      	movs	r3, #1
 800570a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005712:	2303      	movs	r3, #3
 8005714:	e025      	b.n	8005762 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800571c:	2b00      	cmp	r3, #0
 800571e:	d11f      	bne.n	8005760 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2201      	movs	r2, #1
 8005724:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005728:	4b10      	ldr	r3, [pc, #64]	; (800576c <USBD_CDC_TransmitPacket+0x7c>)
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	f003 020f 	and.w	r2, r3, #15
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	4613      	mov	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4403      	add	r3, r0
 8005742:	3318      	adds	r3, #24
 8005744:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005746:	4b09      	ldr	r3, [pc, #36]	; (800576c <USBD_CDC_TransmitPacket+0x7c>)
 8005748:	7819      	ldrb	r1, [r3, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f002 f855 	bl	8007806 <USBD_LL_Transmit>

    ret = USBD_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005760:	7bfb      	ldrb	r3, [r7, #15]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	20000093 	.word	0x20000093

08005770 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	32b0      	adds	r2, #176	; 0xb0
 8005782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005786:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	32b0      	adds	r2, #176	; 0xb0
 8005792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800579a:	2303      	movs	r3, #3
 800579c:	e018      	b.n	80057d0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	7c1b      	ldrb	r3, [r3, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10a      	bne.n	80057bc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057a6:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <USBD_CDC_ReceivePacket+0x68>)
 80057a8:	7819      	ldrb	r1, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f002 f847 	bl	8007848 <USBD_LL_PrepareReceive>
 80057ba:	e008      	b.n	80057ce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057bc:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <USBD_CDC_ReceivePacket+0x68>)
 80057be:	7819      	ldrb	r1, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057c6:	2340      	movs	r3, #64	; 0x40
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f002 f83d 	bl	8007848 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	20000094 	.word	0x20000094

080057dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	4613      	mov	r3, r2
 80057e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e01f      	b.n	8005834 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	79fa      	ldrb	r2, [r7, #7]
 8005826:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f001 feb1 	bl	8007590 <USBD_LL_Init>
 800582e:	4603      	mov	r3, r0
 8005830:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005832:	7dfb      	ldrb	r3, [r7, #23]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3718      	adds	r7, #24
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005850:	2303      	movs	r3, #3
 8005852:	e025      	b.n	80058a0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	32ae      	adds	r2, #174	; 0xae
 8005866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00f      	beq.n	8005890 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	32ae      	adds	r2, #174	; 0xae
 800587a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	f107 020e 	add.w	r2, r7, #14
 8005884:	4610      	mov	r0, r2
 8005886:	4798      	blx	r3
 8005888:	4602      	mov	r2, r0
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f001 febf 	bl	8007634 <USBD_LL_Start>
 80058b6:	4603      	mov	r3, r0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058c8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b084      	sub	sp, #16
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	460b      	mov	r3, r1
 80058e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d009      	beq.n	8005904 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	78fa      	ldrb	r2, [r7, #3]
 80058fa:	4611      	mov	r1, r2
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	4798      	blx	r3
 8005900:	4603      	mov	r3, r0
 8005902:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005904:	7bfb      	ldrb	r3, [r7, #15]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	460b      	mov	r3, r1
 8005918:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	78fa      	ldrb	r2, [r7, #3]
 8005928:	4611      	mov	r1, r2
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	4798      	blx	r3
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005934:	2303      	movs	r3, #3
 8005936:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005938:	7bfb      	ldrb	r3, [r7, #15]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b084      	sub	sp, #16
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005952:	6839      	ldr	r1, [r7, #0]
 8005954:	4618      	mov	r0, r3
 8005956:	f001 f932 	bl	8006bbe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005968:	461a      	mov	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005976:	f003 031f 	and.w	r3, r3, #31
 800597a:	2b02      	cmp	r3, #2
 800597c:	d01a      	beq.n	80059b4 <USBD_LL_SetupStage+0x72>
 800597e:	2b02      	cmp	r3, #2
 8005980:	d822      	bhi.n	80059c8 <USBD_LL_SetupStage+0x86>
 8005982:	2b00      	cmp	r3, #0
 8005984:	d002      	beq.n	800598c <USBD_LL_SetupStage+0x4a>
 8005986:	2b01      	cmp	r3, #1
 8005988:	d00a      	beq.n	80059a0 <USBD_LL_SetupStage+0x5e>
 800598a:	e01d      	b.n	80059c8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005992:	4619      	mov	r1, r3
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fb5f 	bl	8006058 <USBD_StdDevReq>
 800599a:	4603      	mov	r3, r0
 800599c:	73fb      	strb	r3, [r7, #15]
      break;
 800599e:	e020      	b.n	80059e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059a6:	4619      	mov	r1, r3
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fbc7 	bl	800613c <USBD_StdItfReq>
 80059ae:	4603      	mov	r3, r0
 80059b0:	73fb      	strb	r3, [r7, #15]
      break;
 80059b2:	e016      	b.n	80059e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059ba:	4619      	mov	r1, r3
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fc29 	bl	8006214 <USBD_StdEPReq>
 80059c2:	4603      	mov	r3, r0
 80059c4:	73fb      	strb	r3, [r7, #15]
      break;
 80059c6:	e00c      	b.n	80059e2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	4619      	mov	r1, r3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f001 fe8c 	bl	80076f4 <USBD_LL_StallEP>
 80059dc:	4603      	mov	r3, r0
 80059de:	73fb      	strb	r3, [r7, #15]
      break;
 80059e0:	bf00      	nop
  }

  return ret;
 80059e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	460b      	mov	r3, r1
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80059fe:	7afb      	ldrb	r3, [r7, #11]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d16e      	bne.n	8005ae2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	f040 8098 	bne.w	8005b48 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d913      	bls.n	8005a4c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	689a      	ldr	r2, [r3, #8]
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	1ad2      	subs	r2, r2, r3
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	bf28      	it	cs
 8005a3e:	4613      	movcs	r3, r2
 8005a40:	461a      	mov	r2, r3
 8005a42:	6879      	ldr	r1, [r7, #4]
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f001 f9ae 	bl	8006da6 <USBD_CtlContinueRx>
 8005a4a:	e07d      	b.n	8005b48 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a52:	f003 031f 	and.w	r3, r3, #31
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d014      	beq.n	8005a84 <USBD_LL_DataOutStage+0x98>
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d81d      	bhi.n	8005a9a <USBD_LL_DataOutStage+0xae>
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <USBD_LL_DataOutStage+0x7c>
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d003      	beq.n	8005a6e <USBD_LL_DataOutStage+0x82>
 8005a66:	e018      	b.n	8005a9a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	75bb      	strb	r3, [r7, #22]
            break;
 8005a6c:	e018      	b.n	8005aa0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	4619      	mov	r1, r3
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 fa5e 	bl	8005f3a <USBD_CoreFindIF>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	75bb      	strb	r3, [r7, #22]
            break;
 8005a82:	e00d      	b.n	8005aa0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 fa60 	bl	8005f54 <USBD_CoreFindEP>
 8005a94:	4603      	mov	r3, r0
 8005a96:	75bb      	strb	r3, [r7, #22]
            break;
 8005a98:	e002      	b.n	8005aa0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	75bb      	strb	r3, [r7, #22]
            break;
 8005a9e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005aa0:	7dbb      	ldrb	r3, [r7, #22]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d119      	bne.n	8005ada <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	d113      	bne.n	8005ada <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005ab2:	7dba      	ldrb	r2, [r7, #22]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	32ae      	adds	r2, #174	; 0xae
 8005ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00b      	beq.n	8005ada <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005ac2:	7dba      	ldrb	r2, [r7, #22]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005aca:	7dba      	ldrb	r2, [r7, #22]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	32ae      	adds	r2, #174	; 0xae
 8005ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f001 f974 	bl	8006dc8 <USBD_CtlSendStatus>
 8005ae0:	e032      	b.n	8005b48 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005ae2:	7afb      	ldrb	r3, [r7, #11]
 8005ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	4619      	mov	r1, r3
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 fa31 	bl	8005f54 <USBD_CoreFindEP>
 8005af2:	4603      	mov	r3, r0
 8005af4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005af6:	7dbb      	ldrb	r3, [r7, #22]
 8005af8:	2bff      	cmp	r3, #255	; 0xff
 8005afa:	d025      	beq.n	8005b48 <USBD_LL_DataOutStage+0x15c>
 8005afc:	7dbb      	ldrb	r3, [r7, #22]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d122      	bne.n	8005b48 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d117      	bne.n	8005b3e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005b0e:	7dba      	ldrb	r2, [r7, #22]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	32ae      	adds	r2, #174	; 0xae
 8005b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00f      	beq.n	8005b3e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005b1e:	7dba      	ldrb	r2, [r7, #22]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005b26:	7dba      	ldrb	r2, [r7, #22]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	32ae      	adds	r2, #174	; 0xae
 8005b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	7afa      	ldrb	r2, [r7, #11]
 8005b34:	4611      	mov	r1, r2
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	4798      	blx	r3
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005b3e:	7dfb      	ldrb	r3, [r7, #23]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005b44:	7dfb      	ldrb	r3, [r7, #23]
 8005b46:	e000      	b.n	8005b4a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b086      	sub	sp, #24
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	607a      	str	r2, [r7, #4]
 8005b5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005b60:	7afb      	ldrb	r3, [r7, #11]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d16f      	bne.n	8005c46 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3314      	adds	r3, #20
 8005b6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d15a      	bne.n	8005c2c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d914      	bls.n	8005bac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	1ad2      	subs	r2, r2, r3
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	461a      	mov	r2, r3
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f001 f8d6 	bl	8006d4a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f001 fe4f 	bl	8007848 <USBD_LL_PrepareReceive>
 8005baa:	e03f      	b.n	8005c2c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d11c      	bne.n	8005bf2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d316      	bcc.n	8005bf2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d20f      	bcs.n	8005bf2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f001 f8b7 	bl	8006d4a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005be4:	2300      	movs	r3, #0
 8005be6:	2200      	movs	r2, #0
 8005be8:	2100      	movs	r1, #0
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f001 fe2c 	bl	8007848 <USBD_LL_PrepareReceive>
 8005bf0:	e01c      	b.n	8005c2c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	d10f      	bne.n	8005c1e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d009      	beq.n	8005c1e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c1e:	2180      	movs	r1, #128	; 0x80
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f001 fd67 	bl	80076f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f001 f8e1 	bl	8006dee <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d03a      	beq.n	8005cac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f7ff fe42 	bl	80058c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c44:	e032      	b.n	8005cac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005c46:	7afb      	ldrb	r3, [r7, #11]
 8005c48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	4619      	mov	r1, r3
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 f97f 	bl	8005f54 <USBD_CoreFindEP>
 8005c56:	4603      	mov	r3, r0
 8005c58:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
 8005c5c:	2bff      	cmp	r3, #255	; 0xff
 8005c5e:	d025      	beq.n	8005cac <USBD_LL_DataInStage+0x15a>
 8005c60:	7dfb      	ldrb	r3, [r7, #23]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d122      	bne.n	8005cac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d11c      	bne.n	8005cac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005c72:	7dfa      	ldrb	r2, [r7, #23]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	32ae      	adds	r2, #174	; 0xae
 8005c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d014      	beq.n	8005cac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005c82:	7dfa      	ldrb	r2, [r7, #23]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005c8a:	7dfa      	ldrb	r2, [r7, #23]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	32ae      	adds	r2, #174	; 0xae
 8005c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	7afa      	ldrb	r2, [r7, #11]
 8005c98:	4611      	mov	r1, r2
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	4798      	blx	r3
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005ca2:	7dbb      	ldrb	r3, [r7, #22]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005ca8:	7dbb      	ldrb	r3, [r7, #22]
 8005caa:	e000      	b.n	8005cae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d014      	beq.n	8005d1c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00e      	beq.n	8005d1c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6852      	ldr	r2, [r2, #4]
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	4798      	blx	r3
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d1c:	2340      	movs	r3, #64	; 0x40
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2100      	movs	r1, #0
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f001 fca1 	bl	800766a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2240      	movs	r2, #64	; 0x40
 8005d34:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d38:	2340      	movs	r3, #64	; 0x40
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2180      	movs	r1, #128	; 0x80
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f001 fc93 	bl	800766a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2240      	movs	r2, #64	; 0x40
 8005d4e:	621a      	str	r2, [r3, #32]

  return ret;
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	460b      	mov	r3, r1
 8005d64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	78fa      	ldrb	r2, [r7, #3]
 8005d6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2204      	movs	r2, #4
 8005d94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d106      	bne.n	8005dc8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b082      	sub	sp, #8
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d110      	bne.n	8005e0c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00b      	beq.n	8005e0c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d005      	beq.n	8005e0c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b082      	sub	sp, #8
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	460b      	mov	r3, r1
 8005e20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	32ae      	adds	r2, #174	; 0xae
 8005e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e01c      	b.n	8005e72 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b03      	cmp	r3, #3
 8005e42:	d115      	bne.n	8005e70 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	32ae      	adds	r2, #174	; 0xae
 8005e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00b      	beq.n	8005e70 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	32ae      	adds	r2, #174	; 0xae
 8005e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	78fa      	ldrb	r2, [r7, #3]
 8005e6a:	4611      	mov	r1, r2
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b082      	sub	sp, #8
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	460b      	mov	r3, r1
 8005e84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	32ae      	adds	r2, #174	; 0xae
 8005e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e01c      	b.n	8005ed6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b03      	cmp	r3, #3
 8005ea6:	d115      	bne.n	8005ed4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	32ae      	adds	r2, #174	; 0xae
 8005eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00b      	beq.n	8005ed4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	32ae      	adds	r2, #174	; 0xae
 8005ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	78fa      	ldrb	r2, [r7, #3]
 8005ece:	4611      	mov	r1, r2
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005efc:	2300      	movs	r3, #0
 8005efe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00e      	beq.n	8005f30 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6852      	ldr	r2, [r2, #4]
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	4611      	mov	r1, r2
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	4798      	blx	r3
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	460b      	mov	r3, r1
 8005f44:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f46:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f60:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b086      	sub	sp, #24
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	460b      	mov	r3, r1
 8005f78:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005f82:	2300      	movs	r3, #0
 8005f84:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	885b      	ldrh	r3, [r3, #2]
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d920      	bls.n	8005fd8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005f9e:	e013      	b.n	8005fc8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005fa0:	f107 030a 	add.w	r3, r7, #10
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	6978      	ldr	r0, [r7, #20]
 8005fa8:	f000 f81b 	bl	8005fe2 <USBD_GetNextDesc>
 8005fac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	785b      	ldrb	r3, [r3, #1]
 8005fb2:	2b05      	cmp	r3, #5
 8005fb4:	d108      	bne.n	8005fc8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	789b      	ldrb	r3, [r3, #2]
 8005fbe:	78fa      	ldrb	r2, [r7, #3]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d008      	beq.n	8005fd6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	885b      	ldrh	r3, [r3, #2]
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	897b      	ldrh	r3, [r7, #10]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d8e5      	bhi.n	8005fa0 <USBD_GetEpDesc+0x32>
 8005fd4:	e000      	b.n	8005fd8 <USBD_GetEpDesc+0x6a>
          break;
 8005fd6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005fd8:	693b      	ldr	r3, [r7, #16]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b085      	sub	sp, #20
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	881a      	ldrh	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	4413      	add	r3, r2
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4413      	add	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800600e:	68fb      	ldr	r3, [r7, #12]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	3301      	adds	r3, #1
 8006032:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800603a:	8a3b      	ldrh	r3, [r7, #16]
 800603c:	021b      	lsls	r3, r3, #8
 800603e:	b21a      	sxth	r2, r3
 8006040:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006044:	4313      	orrs	r3, r2
 8006046:	b21b      	sxth	r3, r3
 8006048:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800604a:	89fb      	ldrh	r3, [r7, #14]
}
 800604c:	4618      	mov	r0, r3
 800604e:	371c      	adds	r7, #28
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800606e:	2b40      	cmp	r3, #64	; 0x40
 8006070:	d005      	beq.n	800607e <USBD_StdDevReq+0x26>
 8006072:	2b40      	cmp	r3, #64	; 0x40
 8006074:	d857      	bhi.n	8006126 <USBD_StdDevReq+0xce>
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00f      	beq.n	800609a <USBD_StdDevReq+0x42>
 800607a:	2b20      	cmp	r3, #32
 800607c:	d153      	bne.n	8006126 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	32ae      	adds	r2, #174	; 0xae
 8006088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	6839      	ldr	r1, [r7, #0]
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	4798      	blx	r3
 8006094:	4603      	mov	r3, r0
 8006096:	73fb      	strb	r3, [r7, #15]
      break;
 8006098:	e04a      	b.n	8006130 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	2b09      	cmp	r3, #9
 80060a0:	d83b      	bhi.n	800611a <USBD_StdDevReq+0xc2>
 80060a2:	a201      	add	r2, pc, #4	; (adr r2, 80060a8 <USBD_StdDevReq+0x50>)
 80060a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a8:	080060fd 	.word	0x080060fd
 80060ac:	08006111 	.word	0x08006111
 80060b0:	0800611b 	.word	0x0800611b
 80060b4:	08006107 	.word	0x08006107
 80060b8:	0800611b 	.word	0x0800611b
 80060bc:	080060db 	.word	0x080060db
 80060c0:	080060d1 	.word	0x080060d1
 80060c4:	0800611b 	.word	0x0800611b
 80060c8:	080060f3 	.word	0x080060f3
 80060cc:	080060e5 	.word	0x080060e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80060d0:	6839      	ldr	r1, [r7, #0]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fa3c 	bl	8006550 <USBD_GetDescriptor>
          break;
 80060d8:	e024      	b.n	8006124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fbcb 	bl	8006878 <USBD_SetAddress>
          break;
 80060e2:	e01f      	b.n	8006124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fc0a 	bl	8006900 <USBD_SetConfig>
 80060ec:	4603      	mov	r3, r0
 80060ee:	73fb      	strb	r3, [r7, #15]
          break;
 80060f0:	e018      	b.n	8006124 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80060f2:	6839      	ldr	r1, [r7, #0]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fcad 	bl	8006a54 <USBD_GetConfig>
          break;
 80060fa:	e013      	b.n	8006124 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80060fc:	6839      	ldr	r1, [r7, #0]
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fcde 	bl	8006ac0 <USBD_GetStatus>
          break;
 8006104:	e00e      	b.n	8006124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fd0d 	bl	8006b28 <USBD_SetFeature>
          break;
 800610e:	e009      	b.n	8006124 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006110:	6839      	ldr	r1, [r7, #0]
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fd31 	bl	8006b7a <USBD_ClrFeature>
          break;
 8006118:	e004      	b.n	8006124 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800611a:	6839      	ldr	r1, [r7, #0]
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fd88 	bl	8006c32 <USBD_CtlError>
          break;
 8006122:	bf00      	nop
      }
      break;
 8006124:	e004      	b.n	8006130 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fd82 	bl	8006c32 <USBD_CtlError>
      break;
 800612e:	bf00      	nop
  }

  return ret;
 8006130:	7bfb      	ldrb	r3, [r7, #15]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop

0800613c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006152:	2b40      	cmp	r3, #64	; 0x40
 8006154:	d005      	beq.n	8006162 <USBD_StdItfReq+0x26>
 8006156:	2b40      	cmp	r3, #64	; 0x40
 8006158:	d852      	bhi.n	8006200 <USBD_StdItfReq+0xc4>
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <USBD_StdItfReq+0x26>
 800615e:	2b20      	cmp	r3, #32
 8006160:	d14e      	bne.n	8006200 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006168:	b2db      	uxtb	r3, r3
 800616a:	3b01      	subs	r3, #1
 800616c:	2b02      	cmp	r3, #2
 800616e:	d840      	bhi.n	80061f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	889b      	ldrh	r3, [r3, #4]
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b01      	cmp	r3, #1
 8006178:	d836      	bhi.n	80061e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	889b      	ldrh	r3, [r3, #4]
 800617e:	b2db      	uxtb	r3, r3
 8006180:	4619      	mov	r1, r3
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff fed9 	bl	8005f3a <USBD_CoreFindIF>
 8006188:	4603      	mov	r3, r0
 800618a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800618c:	7bbb      	ldrb	r3, [r7, #14]
 800618e:	2bff      	cmp	r3, #255	; 0xff
 8006190:	d01d      	beq.n	80061ce <USBD_StdItfReq+0x92>
 8006192:	7bbb      	ldrb	r3, [r7, #14]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d11a      	bne.n	80061ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006198:	7bba      	ldrb	r2, [r7, #14]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	32ae      	adds	r2, #174	; 0xae
 800619e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00f      	beq.n	80061c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80061a8:	7bba      	ldrb	r2, [r7, #14]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80061b0:	7bba      	ldrb	r2, [r7, #14]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	32ae      	adds	r2, #174	; 0xae
 80061b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	4798      	blx	r3
 80061c2:	4603      	mov	r3, r0
 80061c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061c6:	e004      	b.n	80061d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80061c8:	2303      	movs	r3, #3
 80061ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061cc:	e001      	b.n	80061d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80061ce:	2303      	movs	r3, #3
 80061d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	88db      	ldrh	r3, [r3, #6]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d110      	bne.n	80061fc <USBD_StdItfReq+0xc0>
 80061da:	7bfb      	ldrb	r3, [r7, #15]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10d      	bne.n	80061fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fdf1 	bl	8006dc8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80061e6:	e009      	b.n	80061fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80061e8:	6839      	ldr	r1, [r7, #0]
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fd21 	bl	8006c32 <USBD_CtlError>
          break;
 80061f0:	e004      	b.n	80061fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fd1c 	bl	8006c32 <USBD_CtlError>
          break;
 80061fa:	e000      	b.n	80061fe <USBD_StdItfReq+0xc2>
          break;
 80061fc:	bf00      	nop
      }
      break;
 80061fe:	e004      	b.n	800620a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fd15 	bl	8006c32 <USBD_CtlError>
      break;
 8006208:	bf00      	nop
  }

  return ret;
 800620a:	7bfb      	ldrb	r3, [r7, #15]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	889b      	ldrh	r3, [r3, #4]
 8006226:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006230:	2b40      	cmp	r3, #64	; 0x40
 8006232:	d007      	beq.n	8006244 <USBD_StdEPReq+0x30>
 8006234:	2b40      	cmp	r3, #64	; 0x40
 8006236:	f200 817f 	bhi.w	8006538 <USBD_StdEPReq+0x324>
 800623a:	2b00      	cmp	r3, #0
 800623c:	d02a      	beq.n	8006294 <USBD_StdEPReq+0x80>
 800623e:	2b20      	cmp	r3, #32
 8006240:	f040 817a 	bne.w	8006538 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006244:	7bbb      	ldrb	r3, [r7, #14]
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7ff fe83 	bl	8005f54 <USBD_CoreFindEP>
 800624e:	4603      	mov	r3, r0
 8006250:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006252:	7b7b      	ldrb	r3, [r7, #13]
 8006254:	2bff      	cmp	r3, #255	; 0xff
 8006256:	f000 8174 	beq.w	8006542 <USBD_StdEPReq+0x32e>
 800625a:	7b7b      	ldrb	r3, [r7, #13]
 800625c:	2b00      	cmp	r3, #0
 800625e:	f040 8170 	bne.w	8006542 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006262:	7b7a      	ldrb	r2, [r7, #13]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800626a:	7b7a      	ldrb	r2, [r7, #13]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	32ae      	adds	r2, #174	; 0xae
 8006270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	f000 8163 	beq.w	8006542 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800627c:	7b7a      	ldrb	r2, [r7, #13]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	32ae      	adds	r2, #174	; 0xae
 8006282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	4798      	blx	r3
 800628e:	4603      	mov	r3, r0
 8006290:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006292:	e156      	b.n	8006542 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	785b      	ldrb	r3, [r3, #1]
 8006298:	2b03      	cmp	r3, #3
 800629a:	d008      	beq.n	80062ae <USBD_StdEPReq+0x9a>
 800629c:	2b03      	cmp	r3, #3
 800629e:	f300 8145 	bgt.w	800652c <USBD_StdEPReq+0x318>
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 809b 	beq.w	80063de <USBD_StdEPReq+0x1ca>
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d03c      	beq.n	8006326 <USBD_StdEPReq+0x112>
 80062ac:	e13e      	b.n	800652c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d002      	beq.n	80062c0 <USBD_StdEPReq+0xac>
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d016      	beq.n	80062ec <USBD_StdEPReq+0xd8>
 80062be:	e02c      	b.n	800631a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062c0:	7bbb      	ldrb	r3, [r7, #14]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00d      	beq.n	80062e2 <USBD_StdEPReq+0xce>
 80062c6:	7bbb      	ldrb	r3, [r7, #14]
 80062c8:	2b80      	cmp	r3, #128	; 0x80
 80062ca:	d00a      	beq.n	80062e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80062cc:	7bbb      	ldrb	r3, [r7, #14]
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f001 fa0f 	bl	80076f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80062d6:	2180      	movs	r1, #128	; 0x80
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f001 fa0b 	bl	80076f4 <USBD_LL_StallEP>
 80062de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062e0:	e020      	b.n	8006324 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fca4 	bl	8006c32 <USBD_CtlError>
              break;
 80062ea:	e01b      	b.n	8006324 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	885b      	ldrh	r3, [r3, #2]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10e      	bne.n	8006312 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80062f4:	7bbb      	ldrb	r3, [r7, #14]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00b      	beq.n	8006312 <USBD_StdEPReq+0xfe>
 80062fa:	7bbb      	ldrb	r3, [r7, #14]
 80062fc:	2b80      	cmp	r3, #128	; 0x80
 80062fe:	d008      	beq.n	8006312 <USBD_StdEPReq+0xfe>
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	88db      	ldrh	r3, [r3, #6]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d104      	bne.n	8006312 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006308:	7bbb      	ldrb	r3, [r7, #14]
 800630a:	4619      	mov	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 f9f1 	bl	80076f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fd58 	bl	8006dc8 <USBD_CtlSendStatus>

              break;
 8006318:	e004      	b.n	8006324 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800631a:	6839      	ldr	r1, [r7, #0]
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fc88 	bl	8006c32 <USBD_CtlError>
              break;
 8006322:	bf00      	nop
          }
          break;
 8006324:	e107      	b.n	8006536 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d002      	beq.n	8006338 <USBD_StdEPReq+0x124>
 8006332:	2b03      	cmp	r3, #3
 8006334:	d016      	beq.n	8006364 <USBD_StdEPReq+0x150>
 8006336:	e04b      	b.n	80063d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006338:	7bbb      	ldrb	r3, [r7, #14]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00d      	beq.n	800635a <USBD_StdEPReq+0x146>
 800633e:	7bbb      	ldrb	r3, [r7, #14]
 8006340:	2b80      	cmp	r3, #128	; 0x80
 8006342:	d00a      	beq.n	800635a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006344:	7bbb      	ldrb	r3, [r7, #14]
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f001 f9d3 	bl	80076f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800634e:	2180      	movs	r1, #128	; 0x80
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f001 f9cf 	bl	80076f4 <USBD_LL_StallEP>
 8006356:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006358:	e040      	b.n	80063dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fc68 	bl	8006c32 <USBD_CtlError>
              break;
 8006362:	e03b      	b.n	80063dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	885b      	ldrh	r3, [r3, #2]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d136      	bne.n	80063da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800636c:	7bbb      	ldrb	r3, [r7, #14]
 800636e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006372:	2b00      	cmp	r3, #0
 8006374:	d004      	beq.n	8006380 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006376:	7bbb      	ldrb	r3, [r7, #14]
 8006378:	4619      	mov	r1, r3
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 f9d9 	bl	8007732 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fd21 	bl	8006dc8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006386:	7bbb      	ldrb	r3, [r7, #14]
 8006388:	4619      	mov	r1, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7ff fde2 	bl	8005f54 <USBD_CoreFindEP>
 8006390:	4603      	mov	r3, r0
 8006392:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006394:	7b7b      	ldrb	r3, [r7, #13]
 8006396:	2bff      	cmp	r3, #255	; 0xff
 8006398:	d01f      	beq.n	80063da <USBD_StdEPReq+0x1c6>
 800639a:	7b7b      	ldrb	r3, [r7, #13]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d11c      	bne.n	80063da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80063a0:	7b7a      	ldrb	r2, [r7, #13]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80063a8:	7b7a      	ldrb	r2, [r7, #13]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	32ae      	adds	r2, #174	; 0xae
 80063ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d010      	beq.n	80063da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80063b8:	7b7a      	ldrb	r2, [r7, #13]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	32ae      	adds	r2, #174	; 0xae
 80063be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	4798      	blx	r3
 80063ca:	4603      	mov	r3, r0
 80063cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80063ce:	e004      	b.n	80063da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80063d0:	6839      	ldr	r1, [r7, #0]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fc2d 	bl	8006c32 <USBD_CtlError>
              break;
 80063d8:	e000      	b.n	80063dc <USBD_StdEPReq+0x1c8>
              break;
 80063da:	bf00      	nop
          }
          break;
 80063dc:	e0ab      	b.n	8006536 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d002      	beq.n	80063f0 <USBD_StdEPReq+0x1dc>
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d032      	beq.n	8006454 <USBD_StdEPReq+0x240>
 80063ee:	e097      	b.n	8006520 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063f0:	7bbb      	ldrb	r3, [r7, #14]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d007      	beq.n	8006406 <USBD_StdEPReq+0x1f2>
 80063f6:	7bbb      	ldrb	r3, [r7, #14]
 80063f8:	2b80      	cmp	r3, #128	; 0x80
 80063fa:	d004      	beq.n	8006406 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fc17 	bl	8006c32 <USBD_CtlError>
                break;
 8006404:	e091      	b.n	800652a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006406:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800640a:	2b00      	cmp	r3, #0
 800640c:	da0b      	bge.n	8006426 <USBD_StdEPReq+0x212>
 800640e:	7bbb      	ldrb	r3, [r7, #14]
 8006410:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	3310      	adds	r3, #16
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	4413      	add	r3, r2
 8006422:	3304      	adds	r3, #4
 8006424:	e00b      	b.n	800643e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006426:	7bbb      	ldrb	r3, [r7, #14]
 8006428:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800642c:	4613      	mov	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	4413      	add	r3, r2
 800643c:	3304      	adds	r3, #4
 800643e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2202      	movs	r2, #2
 800644a:	4619      	mov	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fc61 	bl	8006d14 <USBD_CtlSendData>
              break;
 8006452:	e06a      	b.n	800652a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006458:	2b00      	cmp	r3, #0
 800645a:	da11      	bge.n	8006480 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800645c:	7bbb      	ldrb	r3, [r7, #14]
 800645e:	f003 020f 	and.w	r2, r3, #15
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	4613      	mov	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	440b      	add	r3, r1
 800646e:	3324      	adds	r3, #36	; 0x24
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d117      	bne.n	80064a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fbda 	bl	8006c32 <USBD_CtlError>
                  break;
 800647e:	e054      	b.n	800652a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006480:	7bbb      	ldrb	r3, [r7, #14]
 8006482:	f003 020f 	and.w	r2, r3, #15
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	4613      	mov	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	440b      	add	r3, r1
 8006492:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d104      	bne.n	80064a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800649c:	6839      	ldr	r1, [r7, #0]
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fbc7 	bl	8006c32 <USBD_CtlError>
                  break;
 80064a4:	e041      	b.n	800652a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	da0b      	bge.n	80064c6 <USBD_StdEPReq+0x2b2>
 80064ae:	7bbb      	ldrb	r3, [r7, #14]
 80064b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064b4:	4613      	mov	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	3310      	adds	r3, #16
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	4413      	add	r3, r2
 80064c2:	3304      	adds	r3, #4
 80064c4:	e00b      	b.n	80064de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064c6:	7bbb      	ldrb	r3, [r7, #14]
 80064c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	4413      	add	r3, r2
 80064dc:	3304      	adds	r3, #4
 80064de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80064e0:	7bbb      	ldrb	r3, [r7, #14]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <USBD_StdEPReq+0x2d8>
 80064e6:	7bbb      	ldrb	r3, [r7, #14]
 80064e8:	2b80      	cmp	r3, #128	; 0x80
 80064ea:	d103      	bne.n	80064f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	e00e      	b.n	8006512 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80064f4:	7bbb      	ldrb	r3, [r7, #14]
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f001 f939 	bl	8007770 <USBD_LL_IsStallEP>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2201      	movs	r2, #1
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	e002      	b.n	8006512 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2200      	movs	r2, #0
 8006510:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2202      	movs	r2, #2
 8006516:	4619      	mov	r1, r3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fbfb 	bl	8006d14 <USBD_CtlSendData>
              break;
 800651e:	e004      	b.n	800652a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fb85 	bl	8006c32 <USBD_CtlError>
              break;
 8006528:	bf00      	nop
          }
          break;
 800652a:	e004      	b.n	8006536 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fb7f 	bl	8006c32 <USBD_CtlError>
          break;
 8006534:	bf00      	nop
      }
      break;
 8006536:	e005      	b.n	8006544 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fb79 	bl	8006c32 <USBD_CtlError>
      break;
 8006540:	e000      	b.n	8006544 <USBD_StdEPReq+0x330>
      break;
 8006542:	bf00      	nop
  }

  return ret;
 8006544:	7bfb      	ldrb	r3, [r7, #15]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800655e:	2300      	movs	r3, #0
 8006560:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	885b      	ldrh	r3, [r3, #2]
 800656a:	0a1b      	lsrs	r3, r3, #8
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	2b0e      	cmp	r3, #14
 8006572:	f200 8152 	bhi.w	800681a <USBD_GetDescriptor+0x2ca>
 8006576:	a201      	add	r2, pc, #4	; (adr r2, 800657c <USBD_GetDescriptor+0x2c>)
 8006578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657c:	080065ed 	.word	0x080065ed
 8006580:	08006605 	.word	0x08006605
 8006584:	08006645 	.word	0x08006645
 8006588:	0800681b 	.word	0x0800681b
 800658c:	0800681b 	.word	0x0800681b
 8006590:	080067bb 	.word	0x080067bb
 8006594:	080067e7 	.word	0x080067e7
 8006598:	0800681b 	.word	0x0800681b
 800659c:	0800681b 	.word	0x0800681b
 80065a0:	0800681b 	.word	0x0800681b
 80065a4:	0800681b 	.word	0x0800681b
 80065a8:	0800681b 	.word	0x0800681b
 80065ac:	0800681b 	.word	0x0800681b
 80065b0:	0800681b 	.word	0x0800681b
 80065b4:	080065b9 	.word	0x080065b9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00b      	beq.n	80065dc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	7c12      	ldrb	r2, [r2, #16]
 80065d0:	f107 0108 	add.w	r1, r7, #8
 80065d4:	4610      	mov	r0, r2
 80065d6:	4798      	blx	r3
 80065d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065da:	e126      	b.n	800682a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80065dc:	6839      	ldr	r1, [r7, #0]
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fb27 	bl	8006c32 <USBD_CtlError>
        err++;
 80065e4:	7afb      	ldrb	r3, [r7, #11]
 80065e6:	3301      	adds	r3, #1
 80065e8:	72fb      	strb	r3, [r7, #11]
      break;
 80065ea:	e11e      	b.n	800682a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	7c12      	ldrb	r2, [r2, #16]
 80065f8:	f107 0108 	add.w	r1, r7, #8
 80065fc:	4610      	mov	r0, r2
 80065fe:	4798      	blx	r3
 8006600:	60f8      	str	r0, [r7, #12]
      break;
 8006602:	e112      	b.n	800682a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	7c1b      	ldrb	r3, [r3, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10d      	bne.n	8006628 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006614:	f107 0208 	add.w	r2, r7, #8
 8006618:	4610      	mov	r0, r2
 800661a:	4798      	blx	r3
 800661c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3301      	adds	r3, #1
 8006622:	2202      	movs	r2, #2
 8006624:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006626:	e100      	b.n	800682a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	f107 0208 	add.w	r2, r7, #8
 8006634:	4610      	mov	r0, r2
 8006636:	4798      	blx	r3
 8006638:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3301      	adds	r3, #1
 800663e:	2202      	movs	r2, #2
 8006640:	701a      	strb	r2, [r3, #0]
      break;
 8006642:	e0f2      	b.n	800682a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	885b      	ldrh	r3, [r3, #2]
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b05      	cmp	r3, #5
 800664c:	f200 80ac 	bhi.w	80067a8 <USBD_GetDescriptor+0x258>
 8006650:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <USBD_GetDescriptor+0x108>)
 8006652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006656:	bf00      	nop
 8006658:	08006671 	.word	0x08006671
 800665c:	080066a5 	.word	0x080066a5
 8006660:	080066d9 	.word	0x080066d9
 8006664:	0800670d 	.word	0x0800670d
 8006668:	08006741 	.word	0x08006741
 800666c:	08006775 	.word	0x08006775
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00b      	beq.n	8006694 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	7c12      	ldrb	r2, [r2, #16]
 8006688:	f107 0108 	add.w	r1, r7, #8
 800668c:	4610      	mov	r0, r2
 800668e:	4798      	blx	r3
 8006690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006692:	e091      	b.n	80067b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 facb 	bl	8006c32 <USBD_CtlError>
            err++;
 800669c:	7afb      	ldrb	r3, [r7, #11]
 800669e:	3301      	adds	r3, #1
 80066a0:	72fb      	strb	r3, [r7, #11]
          break;
 80066a2:	e089      	b.n	80067b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00b      	beq.n	80066c8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	7c12      	ldrb	r2, [r2, #16]
 80066bc:	f107 0108 	add.w	r1, r7, #8
 80066c0:	4610      	mov	r0, r2
 80066c2:	4798      	blx	r3
 80066c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066c6:	e077      	b.n	80067b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fab1 	bl	8006c32 <USBD_CtlError>
            err++;
 80066d0:	7afb      	ldrb	r3, [r7, #11]
 80066d2:	3301      	adds	r3, #1
 80066d4:	72fb      	strb	r3, [r7, #11]
          break;
 80066d6:	e06f      	b.n	80067b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00b      	beq.n	80066fc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	7c12      	ldrb	r2, [r2, #16]
 80066f0:	f107 0108 	add.w	r1, r7, #8
 80066f4:	4610      	mov	r0, r2
 80066f6:	4798      	blx	r3
 80066f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066fa:	e05d      	b.n	80067b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fa97 	bl	8006c32 <USBD_CtlError>
            err++;
 8006704:	7afb      	ldrb	r3, [r7, #11]
 8006706:	3301      	adds	r3, #1
 8006708:	72fb      	strb	r3, [r7, #11]
          break;
 800670a:	e055      	b.n	80067b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00b      	beq.n	8006730 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	7c12      	ldrb	r2, [r2, #16]
 8006724:	f107 0108 	add.w	r1, r7, #8
 8006728:	4610      	mov	r0, r2
 800672a:	4798      	blx	r3
 800672c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800672e:	e043      	b.n	80067b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006730:	6839      	ldr	r1, [r7, #0]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa7d 	bl	8006c32 <USBD_CtlError>
            err++;
 8006738:	7afb      	ldrb	r3, [r7, #11]
 800673a:	3301      	adds	r3, #1
 800673c:	72fb      	strb	r3, [r7, #11]
          break;
 800673e:	e03b      	b.n	80067b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00b      	beq.n	8006764 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	7c12      	ldrb	r2, [r2, #16]
 8006758:	f107 0108 	add.w	r1, r7, #8
 800675c:	4610      	mov	r0, r2
 800675e:	4798      	blx	r3
 8006760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006762:	e029      	b.n	80067b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fa63 	bl	8006c32 <USBD_CtlError>
            err++;
 800676c:	7afb      	ldrb	r3, [r7, #11]
 800676e:	3301      	adds	r3, #1
 8006770:	72fb      	strb	r3, [r7, #11]
          break;
 8006772:	e021      	b.n	80067b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00b      	beq.n	8006798 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	7c12      	ldrb	r2, [r2, #16]
 800678c:	f107 0108 	add.w	r1, r7, #8
 8006790:	4610      	mov	r0, r2
 8006792:	4798      	blx	r3
 8006794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006796:	e00f      	b.n	80067b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fa49 	bl	8006c32 <USBD_CtlError>
            err++;
 80067a0:	7afb      	ldrb	r3, [r7, #11]
 80067a2:	3301      	adds	r3, #1
 80067a4:	72fb      	strb	r3, [r7, #11]
          break;
 80067a6:	e007      	b.n	80067b8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fa41 	bl	8006c32 <USBD_CtlError>
          err++;
 80067b0:	7afb      	ldrb	r3, [r7, #11]
 80067b2:	3301      	adds	r3, #1
 80067b4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80067b6:	bf00      	nop
      }
      break;
 80067b8:	e037      	b.n	800682a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	7c1b      	ldrb	r3, [r3, #16]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ca:	f107 0208 	add.w	r2, r7, #8
 80067ce:	4610      	mov	r0, r2
 80067d0:	4798      	blx	r3
 80067d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067d4:	e029      	b.n	800682a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fa2a 	bl	8006c32 <USBD_CtlError>
        err++;
 80067de:	7afb      	ldrb	r3, [r7, #11]
 80067e0:	3301      	adds	r3, #1
 80067e2:	72fb      	strb	r3, [r7, #11]
      break;
 80067e4:	e021      	b.n	800682a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	7c1b      	ldrb	r3, [r3, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10d      	bne.n	800680a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f6:	f107 0208 	add.w	r2, r7, #8
 80067fa:	4610      	mov	r0, r2
 80067fc:	4798      	blx	r3
 80067fe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3301      	adds	r3, #1
 8006804:	2207      	movs	r2, #7
 8006806:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006808:	e00f      	b.n	800682a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fa10 	bl	8006c32 <USBD_CtlError>
        err++;
 8006812:	7afb      	ldrb	r3, [r7, #11]
 8006814:	3301      	adds	r3, #1
 8006816:	72fb      	strb	r3, [r7, #11]
      break;
 8006818:	e007      	b.n	800682a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fa08 	bl	8006c32 <USBD_CtlError>
      err++;
 8006822:	7afb      	ldrb	r3, [r7, #11]
 8006824:	3301      	adds	r3, #1
 8006826:	72fb      	strb	r3, [r7, #11]
      break;
 8006828:	bf00      	nop
  }

  if (err != 0U)
 800682a:	7afb      	ldrb	r3, [r7, #11]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d11e      	bne.n	800686e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	88db      	ldrh	r3, [r3, #6]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d016      	beq.n	8006866 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006838:	893b      	ldrh	r3, [r7, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00e      	beq.n	800685c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	88da      	ldrh	r2, [r3, #6]
 8006842:	893b      	ldrh	r3, [r7, #8]
 8006844:	4293      	cmp	r3, r2
 8006846:	bf28      	it	cs
 8006848:	4613      	movcs	r3, r2
 800684a:	b29b      	uxth	r3, r3
 800684c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800684e:	893b      	ldrh	r3, [r7, #8]
 8006850:	461a      	mov	r2, r3
 8006852:	68f9      	ldr	r1, [r7, #12]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fa5d 	bl	8006d14 <USBD_CtlSendData>
 800685a:	e009      	b.n	8006870 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800685c:	6839      	ldr	r1, [r7, #0]
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f9e7 	bl	8006c32 <USBD_CtlError>
 8006864:	e004      	b.n	8006870 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 faae 	bl	8006dc8 <USBD_CtlSendStatus>
 800686c:	e000      	b.n	8006870 <USBD_GetDescriptor+0x320>
    return;
 800686e:	bf00      	nop
  }
}
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop

08006878 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	889b      	ldrh	r3, [r3, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d131      	bne.n	80068ee <USBD_SetAddress+0x76>
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	88db      	ldrh	r3, [r3, #6]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d12d      	bne.n	80068ee <USBD_SetAddress+0x76>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	885b      	ldrh	r3, [r3, #2]
 8006896:	2b7f      	cmp	r3, #127	; 0x7f
 8006898:	d829      	bhi.n	80068ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	885b      	ldrh	r3, [r3, #2]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d104      	bne.n	80068bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80068b2:	6839      	ldr	r1, [r7, #0]
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 f9bc 	bl	8006c32 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ba:	e01d      	b.n	80068f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	7bfa      	ldrb	r2, [r7, #15]
 80068c0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 ff7d 	bl	80077c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fa7a 	bl	8006dc8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d004      	beq.n	80068e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2202      	movs	r2, #2
 80068de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e2:	e009      	b.n	80068f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ec:	e004      	b.n	80068f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f99e 	bl	8006c32 <USBD_CtlError>
  }
}
 80068f6:	bf00      	nop
 80068f8:	bf00      	nop
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	885b      	ldrh	r3, [r3, #2]
 8006912:	b2da      	uxtb	r2, r3
 8006914:	4b4e      	ldr	r3, [pc, #312]	; (8006a50 <USBD_SetConfig+0x150>)
 8006916:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006918:	4b4d      	ldr	r3, [pc, #308]	; (8006a50 <USBD_SetConfig+0x150>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d905      	bls.n	800692c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006920:	6839      	ldr	r1, [r7, #0]
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f985 	bl	8006c32 <USBD_CtlError>
    return USBD_FAIL;
 8006928:	2303      	movs	r3, #3
 800692a:	e08c      	b.n	8006a46 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b02      	cmp	r3, #2
 8006936:	d002      	beq.n	800693e <USBD_SetConfig+0x3e>
 8006938:	2b03      	cmp	r3, #3
 800693a:	d029      	beq.n	8006990 <USBD_SetConfig+0x90>
 800693c:	e075      	b.n	8006a2a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800693e:	4b44      	ldr	r3, [pc, #272]	; (8006a50 <USBD_SetConfig+0x150>)
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d020      	beq.n	8006988 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006946:	4b42      	ldr	r3, [pc, #264]	; (8006a50 <USBD_SetConfig+0x150>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006950:	4b3f      	ldr	r3, [pc, #252]	; (8006a50 <USBD_SetConfig+0x150>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	4619      	mov	r1, r3
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fe ffbd 	bl	80058d6 <USBD_SetClassConfig>
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d008      	beq.n	8006978 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006966:	6839      	ldr	r1, [r7, #0]
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f962 	bl	8006c32 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2202      	movs	r2, #2
 8006972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006976:	e065      	b.n	8006a44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fa25 	bl	8006dc8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2203      	movs	r2, #3
 8006982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006986:	e05d      	b.n	8006a44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fa1d 	bl	8006dc8 <USBD_CtlSendStatus>
      break;
 800698e:	e059      	b.n	8006a44 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006990:	4b2f      	ldr	r3, [pc, #188]	; (8006a50 <USBD_SetConfig+0x150>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d112      	bne.n	80069be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80069a0:	4b2b      	ldr	r3, [pc, #172]	; (8006a50 <USBD_SetConfig+0x150>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	461a      	mov	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069aa:	4b29      	ldr	r3, [pc, #164]	; (8006a50 <USBD_SetConfig+0x150>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7fe ffac 	bl	800590e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fa06 	bl	8006dc8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069bc:	e042      	b.n	8006a44 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80069be:	4b24      	ldr	r3, [pc, #144]	; (8006a50 <USBD_SetConfig+0x150>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d02a      	beq.n	8006a22 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7fe ff9a 	bl	800590e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80069da:	4b1d      	ldr	r3, [pc, #116]	; (8006a50 <USBD_SetConfig+0x150>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069e4:	4b1a      	ldr	r3, [pc, #104]	; (8006a50 <USBD_SetConfig+0x150>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fe ff73 	bl	80058d6 <USBD_SetClassConfig>
 80069f0:	4603      	mov	r3, r0
 80069f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00f      	beq.n	8006a1a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f918 	bl	8006c32 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	4619      	mov	r1, r3
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7fe ff7f 	bl	800590e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a18:	e014      	b.n	8006a44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f9d4 	bl	8006dc8 <USBD_CtlSendStatus>
      break;
 8006a20:	e010      	b.n	8006a44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f9d0 	bl	8006dc8 <USBD_CtlSendStatus>
      break;
 8006a28:	e00c      	b.n	8006a44 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f900 	bl	8006c32 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a32:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <USBD_SetConfig+0x150>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7fe ff68 	bl	800590e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	73fb      	strb	r3, [r7, #15]
      break;
 8006a42:	bf00      	nop
  }

  return ret;
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	20000194 	.word	0x20000194

08006a54 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	88db      	ldrh	r3, [r3, #6]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d004      	beq.n	8006a70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f8e2 	bl	8006c32 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a6e:	e023      	b.n	8006ab8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	dc02      	bgt.n	8006a82 <USBD_GetConfig+0x2e>
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	dc03      	bgt.n	8006a88 <USBD_GetConfig+0x34>
 8006a80:	e015      	b.n	8006aae <USBD_GetConfig+0x5a>
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d00b      	beq.n	8006a9e <USBD_GetConfig+0x4a>
 8006a86:	e012      	b.n	8006aae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3308      	adds	r3, #8
 8006a92:	2201      	movs	r2, #1
 8006a94:	4619      	mov	r1, r3
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f93c 	bl	8006d14 <USBD_CtlSendData>
        break;
 8006a9c:	e00c      	b.n	8006ab8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f934 	bl	8006d14 <USBD_CtlSendData>
        break;
 8006aac:	e004      	b.n	8006ab8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f8be 	bl	8006c32 <USBD_CtlError>
        break;
 8006ab6:	bf00      	nop
}
 8006ab8:	bf00      	nop
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d81e      	bhi.n	8006b16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	88db      	ldrh	r3, [r3, #6]
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d004      	beq.n	8006aea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006ae0:	6839      	ldr	r1, [r7, #0]
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f8a5 	bl	8006c32 <USBD_CtlError>
        break;
 8006ae8:	e01a      	b.n	8006b20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d005      	beq.n	8006b06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	f043 0202 	orr.w	r2, r3, #2
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	330c      	adds	r3, #12
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f900 	bl	8006d14 <USBD_CtlSendData>
      break;
 8006b14:	e004      	b.n	8006b20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f88a 	bl	8006c32 <USBD_CtlError>
      break;
 8006b1e:	bf00      	nop
  }
}
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	885b      	ldrh	r3, [r3, #2]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d107      	bne.n	8006b4a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f940 	bl	8006dc8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006b48:	e013      	b.n	8006b72 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	885b      	ldrh	r3, [r3, #2]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d10b      	bne.n	8006b6a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	889b      	ldrh	r3, [r3, #4]
 8006b56:	0a1b      	lsrs	r3, r3, #8
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f930 	bl	8006dc8 <USBD_CtlSendStatus>
}
 8006b68:	e003      	b.n	8006b72 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f860 	bl	8006c32 <USBD_CtlError>
}
 8006b72:	bf00      	nop
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d80b      	bhi.n	8006baa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	885b      	ldrh	r3, [r3, #2]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d10c      	bne.n	8006bb4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f910 	bl	8006dc8 <USBD_CtlSendStatus>
      }
      break;
 8006ba8:	e004      	b.n	8006bb4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006baa:	6839      	ldr	r1, [r7, #0]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f840 	bl	8006c32 <USBD_CtlError>
      break;
 8006bb2:	e000      	b.n	8006bb6 <USBD_ClrFeature+0x3c>
      break;
 8006bb4:	bf00      	nop
  }
}
 8006bb6:	bf00      	nop
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	781a      	ldrb	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	781a      	ldrb	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	3301      	adds	r3, #1
 8006be6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f7ff fa17 	bl	800601c <SWAPBYTE>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f7ff fa0a 	bl	800601c <SWAPBYTE>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	3301      	adds	r3, #1
 8006c14:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f7ff f9fd 	bl	800601c <SWAPBYTE>
 8006c22:	4603      	mov	r3, r0
 8006c24:	461a      	mov	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	80da      	strh	r2, [r3, #6]
}
 8006c2a:	bf00      	nop
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b082      	sub	sp, #8
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c3c:	2180      	movs	r1, #128	; 0x80
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fd58 	bl	80076f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c44:	2100      	movs	r1, #0
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fd54 	bl	80076f4 <USBD_LL_StallEP>
}
 8006c4c:	bf00      	nop
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d036      	beq.n	8006cd8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c6e:	6938      	ldr	r0, [r7, #16]
 8006c70:	f000 f836 	bl	8006ce0 <USBD_GetLen>
 8006c74:	4603      	mov	r3, r0
 8006c76:	3301      	adds	r3, #1
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c82:	7dfb      	ldrb	r3, [r7, #23]
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	4413      	add	r3, r2
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	7812      	ldrb	r2, [r2, #0]
 8006c8c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c8e:	7dfb      	ldrb	r3, [r7, #23]
 8006c90:	3301      	adds	r3, #1
 8006c92:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c94:	7dfb      	ldrb	r3, [r7, #23]
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	4413      	add	r3, r2
 8006c9a:	2203      	movs	r2, #3
 8006c9c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006ca4:	e013      	b.n	8006cce <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	4413      	add	r3, r2
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	7812      	ldrb	r2, [r2, #0]
 8006cb0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	613b      	str	r3, [r7, #16]
    idx++;
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006cbe:	7dfb      	ldrb	r3, [r7, #23]
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	701a      	strb	r2, [r3, #0]
    idx++;
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e7      	bne.n	8006ca6 <USBD_GetString+0x52>
 8006cd6:	e000      	b.n	8006cda <USBD_GetString+0x86>
    return;
 8006cd8:	bf00      	nop
  }
}
 8006cda:	3718      	adds	r7, #24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006cf0:	e005      	b.n	8006cfe <USBD_GetLen+0x1e>
  {
    len++;
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1f5      	bne.n	8006cf2 <USBD_GetLen+0x12>
  }

  return len;
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2202      	movs	r2, #2
 8006d24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	2100      	movs	r1, #0
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f000 fd63 	bl	8007806 <USBD_LL_Transmit>

  return USBD_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	60b9      	str	r1, [r7, #8]
 8006d54:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 fd52 	bl	8007806 <USBD_LL_Transmit>

  return USBD_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2203      	movs	r2, #3
 8006d7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	2100      	movs	r1, #0
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f000 fd56 	bl	8007848 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	60f8      	str	r0, [r7, #12]
 8006dae:	60b9      	str	r1, [r7, #8]
 8006db0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	2100      	movs	r1, #0
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 fd45 	bl	8007848 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2204      	movs	r2, #4
 8006dd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006dd8:	2300      	movs	r3, #0
 8006dda:	2200      	movs	r2, #0
 8006ddc:	2100      	movs	r1, #0
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fd11 	bl	8007806 <USBD_LL_Transmit>

  return USBD_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b082      	sub	sp, #8
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2205      	movs	r2, #5
 8006dfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dfe:	2300      	movs	r3, #0
 8006e00:	2200      	movs	r2, #0
 8006e02:	2100      	movs	r1, #0
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fd1f 	bl	8007848 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8006e18:	2201      	movs	r2, #1
 8006e1a:	4912      	ldr	r1, [pc, #72]	; (8006e64 <MX_USB_DEVICE_Init+0x50>)
 8006e1c:	4812      	ldr	r0, [pc, #72]	; (8006e68 <MX_USB_DEVICE_Init+0x54>)
 8006e1e:	f7fe fcdd 	bl	80057dc <USBD_Init>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e28:	f7fa f87a 	bl	8000f20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8006e2c:	490f      	ldr	r1, [pc, #60]	; (8006e6c <MX_USB_DEVICE_Init+0x58>)
 8006e2e:	480e      	ldr	r0, [pc, #56]	; (8006e68 <MX_USB_DEVICE_Init+0x54>)
 8006e30:	f7fe fd04 	bl	800583c <USBD_RegisterClass>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e3a:	f7fa f871 	bl	8000f20 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8006e3e:	490c      	ldr	r1, [pc, #48]	; (8006e70 <MX_USB_DEVICE_Init+0x5c>)
 8006e40:	4809      	ldr	r0, [pc, #36]	; (8006e68 <MX_USB_DEVICE_Init+0x54>)
 8006e42:	f7fe fbfb 	bl	800563c <USBD_CDC_RegisterInterface>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e4c:	f7fa f868 	bl	8000f20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8006e50:	4805      	ldr	r0, [pc, #20]	; (8006e68 <MX_USB_DEVICE_Init+0x54>)
 8006e52:	f7fe fd29 	bl	80058a8 <USBD_Start>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e5c:	f7fa f860 	bl	8000f20 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e60:	bf00      	nop
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	200000ac 	.word	0x200000ac
 8006e68:	20000198 	.word	0x20000198
 8006e6c:	20000018 	.word	0x20000018
 8006e70:	20000098 	.word	0x20000098

08006e74 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8006e78:	2200      	movs	r2, #0
 8006e7a:	4905      	ldr	r1, [pc, #20]	; (8006e90 <CDC_Init_HS+0x1c>)
 8006e7c:	4805      	ldr	r0, [pc, #20]	; (8006e94 <CDC_Init_HS+0x20>)
 8006e7e:	f7fe fbf7 	bl	8005670 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8006e82:	4905      	ldr	r1, [pc, #20]	; (8006e98 <CDC_Init_HS+0x24>)
 8006e84:	4803      	ldr	r0, [pc, #12]	; (8006e94 <CDC_Init_HS+0x20>)
 8006e86:	f7fe fc15 	bl	80056b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e8a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	20000c74 	.word	0x20000c74
 8006e94:	20000198 	.word	0x20000198
 8006e98:	20000474 	.word	0x20000474

08006e9c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8006ea0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	6039      	str	r1, [r7, #0]
 8006eb6:	71fb      	strb	r3, [r7, #7]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8006ebc:	79fb      	ldrb	r3, [r7, #7]
 8006ebe:	2b23      	cmp	r3, #35	; 0x23
 8006ec0:	d84a      	bhi.n	8006f58 <CDC_Control_HS+0xac>
 8006ec2:	a201      	add	r2, pc, #4	; (adr r2, 8006ec8 <CDC_Control_HS+0x1c>)
 8006ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec8:	08006f59 	.word	0x08006f59
 8006ecc:	08006f59 	.word	0x08006f59
 8006ed0:	08006f59 	.word	0x08006f59
 8006ed4:	08006f59 	.word	0x08006f59
 8006ed8:	08006f59 	.word	0x08006f59
 8006edc:	08006f59 	.word	0x08006f59
 8006ee0:	08006f59 	.word	0x08006f59
 8006ee4:	08006f59 	.word	0x08006f59
 8006ee8:	08006f59 	.word	0x08006f59
 8006eec:	08006f59 	.word	0x08006f59
 8006ef0:	08006f59 	.word	0x08006f59
 8006ef4:	08006f59 	.word	0x08006f59
 8006ef8:	08006f59 	.word	0x08006f59
 8006efc:	08006f59 	.word	0x08006f59
 8006f00:	08006f59 	.word	0x08006f59
 8006f04:	08006f59 	.word	0x08006f59
 8006f08:	08006f59 	.word	0x08006f59
 8006f0c:	08006f59 	.word	0x08006f59
 8006f10:	08006f59 	.word	0x08006f59
 8006f14:	08006f59 	.word	0x08006f59
 8006f18:	08006f59 	.word	0x08006f59
 8006f1c:	08006f59 	.word	0x08006f59
 8006f20:	08006f59 	.word	0x08006f59
 8006f24:	08006f59 	.word	0x08006f59
 8006f28:	08006f59 	.word	0x08006f59
 8006f2c:	08006f59 	.word	0x08006f59
 8006f30:	08006f59 	.word	0x08006f59
 8006f34:	08006f59 	.word	0x08006f59
 8006f38:	08006f59 	.word	0x08006f59
 8006f3c:	08006f59 	.word	0x08006f59
 8006f40:	08006f59 	.word	0x08006f59
 8006f44:	08006f59 	.word	0x08006f59
 8006f48:	08006f59 	.word	0x08006f59
 8006f4c:	08006f59 	.word	0x08006f59
 8006f50:	08006f59 	.word	0x08006f59
 8006f54:	08006f59 	.word	0x08006f59
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f58:	bf00      	nop
  }

  return (USBD_OK);
 8006f5a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	4805      	ldr	r0, [pc, #20]	; (8006f8c <CDC_Receive_HS+0x24>)
 8006f76:	f7fe fb9d 	bl	80056b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8006f7a:	4804      	ldr	r0, [pc, #16]	; (8006f8c <CDC_Receive_HS+0x24>)
 8006f7c:	f7fe fbf8 	bl	8005770 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006f80:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	20000198 	.word	0x20000198

08006f90 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8006fa0:	4b0d      	ldr	r3, [pc, #52]	; (8006fd8 <CDC_Transmit_HS+0x48>)
 8006fa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fa6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e00b      	b.n	8006fce <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8006fb6:	887b      	ldrh	r3, [r7, #2]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	6879      	ldr	r1, [r7, #4]
 8006fbc:	4806      	ldr	r0, [pc, #24]	; (8006fd8 <CDC_Transmit_HS+0x48>)
 8006fbe:	f7fe fb57 	bl	8005670 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8006fc2:	4805      	ldr	r0, [pc, #20]	; (8006fd8 <CDC_Transmit_HS+0x48>)
 8006fc4:	f7fe fb94 	bl	80056f0 <USBD_CDC_TransmitPacket>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000198 	.word	0x20000198

08006fdc <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8006fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
	...

08007000 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	6039      	str	r1, [r7, #0]
 800700a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	2212      	movs	r2, #18
 8007010:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8007012:	4b03      	ldr	r3, [pc, #12]	; (8007020 <USBD_HS_DeviceDescriptor+0x20>)
}
 8007014:	4618      	mov	r0, r3
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	200000cc 	.word	0x200000cc

08007024 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	6039      	str	r1, [r7, #0]
 800702e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	2204      	movs	r2, #4
 8007034:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007036:	4b03      	ldr	r3, [pc, #12]	; (8007044 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8007038:	4618      	mov	r0, r3
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	200000ec 	.word	0x200000ec

08007048 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	4603      	mov	r3, r0
 8007050:	6039      	str	r1, [r7, #0]
 8007052:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007054:	79fb      	ldrb	r3, [r7, #7]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d105      	bne.n	8007066 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	4907      	ldr	r1, [pc, #28]	; (800707c <USBD_HS_ProductStrDescriptor+0x34>)
 800705e:	4808      	ldr	r0, [pc, #32]	; (8007080 <USBD_HS_ProductStrDescriptor+0x38>)
 8007060:	f7ff fdf8 	bl	8006c54 <USBD_GetString>
 8007064:	e004      	b.n	8007070 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	4904      	ldr	r1, [pc, #16]	; (800707c <USBD_HS_ProductStrDescriptor+0x34>)
 800706a:	4805      	ldr	r0, [pc, #20]	; (8007080 <USBD_HS_ProductStrDescriptor+0x38>)
 800706c:	f7ff fdf2 	bl	8006c54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007070:	4b02      	ldr	r3, [pc, #8]	; (800707c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8007072:	4618      	mov	r0, r3
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20001474 	.word	0x20001474
 8007080:	0800a448 	.word	0x0800a448

08007084 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	4603      	mov	r3, r0
 800708c:	6039      	str	r1, [r7, #0]
 800708e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	4904      	ldr	r1, [pc, #16]	; (80070a4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8007094:	4804      	ldr	r0, [pc, #16]	; (80070a8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8007096:	f7ff fddd 	bl	8006c54 <USBD_GetString>
  return USBD_StrDesc;
 800709a:	4b02      	ldr	r3, [pc, #8]	; (80070a4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800709c:	4618      	mov	r0, r3
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	20001474 	.word	0x20001474
 80070a8:	0800a460 	.word	0x0800a460

080070ac <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	4603      	mov	r3, r0
 80070b4:	6039      	str	r1, [r7, #0]
 80070b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	221a      	movs	r2, #26
 80070bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80070be:	f000 f855 	bl	800716c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80070c2:	4b02      	ldr	r3, [pc, #8]	; (80070cc <USBD_HS_SerialStrDescriptor+0x20>)
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	200000f0 	.word	0x200000f0

080070d0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4603      	mov	r3, r0
 80070d8:	6039      	str	r1, [r7, #0]
 80070da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80070dc:	79fb      	ldrb	r3, [r7, #7]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d105      	bne.n	80070ee <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	4907      	ldr	r1, [pc, #28]	; (8007104 <USBD_HS_ConfigStrDescriptor+0x34>)
 80070e6:	4808      	ldr	r0, [pc, #32]	; (8007108 <USBD_HS_ConfigStrDescriptor+0x38>)
 80070e8:	f7ff fdb4 	bl	8006c54 <USBD_GetString>
 80070ec:	e004      	b.n	80070f8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	4904      	ldr	r1, [pc, #16]	; (8007104 <USBD_HS_ConfigStrDescriptor+0x34>)
 80070f2:	4805      	ldr	r0, [pc, #20]	; (8007108 <USBD_HS_ConfigStrDescriptor+0x38>)
 80070f4:	f7ff fdae 	bl	8006c54 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070f8:	4b02      	ldr	r3, [pc, #8]	; (8007104 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	20001474 	.word	0x20001474
 8007108:	0800a474 	.word	0x0800a474

0800710c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	6039      	str	r1, [r7, #0]
 8007116:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007118:	79fb      	ldrb	r3, [r7, #7]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d105      	bne.n	800712a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	4907      	ldr	r1, [pc, #28]	; (8007140 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8007122:	4808      	ldr	r0, [pc, #32]	; (8007144 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8007124:	f7ff fd96 	bl	8006c54 <USBD_GetString>
 8007128:	e004      	b.n	8007134 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	4904      	ldr	r1, [pc, #16]	; (8007140 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800712e:	4805      	ldr	r0, [pc, #20]	; (8007144 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8007130:	f7ff fd90 	bl	8006c54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007134:	4b02      	ldr	r3, [pc, #8]	; (8007140 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8007136:	4618      	mov	r0, r3
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	20001474 	.word	0x20001474
 8007144:	0800a480 	.word	0x0800a480

08007148 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	4603      	mov	r3, r0
 8007150:	6039      	str	r1, [r7, #0]
 8007152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	220c      	movs	r2, #12
 8007158:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 800715a:	4b03      	ldr	r3, [pc, #12]	; (8007168 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 800715c:	4618      	mov	r0, r3
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	200000e0 	.word	0x200000e0

0800716c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007172:	4b0f      	ldr	r3, [pc, #60]	; (80071b0 <Get_SerialNum+0x44>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007178:	4b0e      	ldr	r3, [pc, #56]	; (80071b4 <Get_SerialNum+0x48>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800717e:	4b0e      	ldr	r3, [pc, #56]	; (80071b8 <Get_SerialNum+0x4c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4413      	add	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d009      	beq.n	80071a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007192:	2208      	movs	r2, #8
 8007194:	4909      	ldr	r1, [pc, #36]	; (80071bc <Get_SerialNum+0x50>)
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 f814 	bl	80071c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800719c:	2204      	movs	r2, #4
 800719e:	4908      	ldr	r1, [pc, #32]	; (80071c0 <Get_SerialNum+0x54>)
 80071a0:	68b8      	ldr	r0, [r7, #8]
 80071a2:	f000 f80f 	bl	80071c4 <IntToUnicode>
  }
}
 80071a6:	bf00      	nop
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	1ff0f420 	.word	0x1ff0f420
 80071b4:	1ff0f424 	.word	0x1ff0f424
 80071b8:	1ff0f428 	.word	0x1ff0f428
 80071bc:	200000f2 	.word	0x200000f2
 80071c0:	20000102 	.word	0x20000102

080071c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	4613      	mov	r3, r2
 80071d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80071d6:	2300      	movs	r3, #0
 80071d8:	75fb      	strb	r3, [r7, #23]
 80071da:	e027      	b.n	800722c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	0f1b      	lsrs	r3, r3, #28
 80071e0:	2b09      	cmp	r3, #9
 80071e2:	d80b      	bhi.n	80071fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	0f1b      	lsrs	r3, r3, #28
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	4619      	mov	r1, r3
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	440b      	add	r3, r1
 80071f4:	3230      	adds	r2, #48	; 0x30
 80071f6:	b2d2      	uxtb	r2, r2
 80071f8:	701a      	strb	r2, [r3, #0]
 80071fa:	e00a      	b.n	8007212 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	0f1b      	lsrs	r3, r3, #28
 8007200:	b2da      	uxtb	r2, r3
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	005b      	lsls	r3, r3, #1
 8007206:	4619      	mov	r1, r3
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	440b      	add	r3, r1
 800720c:	3237      	adds	r2, #55	; 0x37
 800720e:	b2d2      	uxtb	r2, r2
 8007210:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	011b      	lsls	r3, r3, #4
 8007216:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007218:	7dfb      	ldrb	r3, [r7, #23]
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	3301      	adds	r3, #1
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	4413      	add	r3, r2
 8007222:	2200      	movs	r2, #0
 8007224:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007226:	7dfb      	ldrb	r3, [r7, #23]
 8007228:	3301      	adds	r3, #1
 800722a:	75fb      	strb	r3, [r7, #23]
 800722c:	7dfa      	ldrb	r2, [r7, #23]
 800722e:	79fb      	ldrb	r3, [r7, #7]
 8007230:	429a      	cmp	r2, r3
 8007232:	d3d3      	bcc.n	80071dc <IntToUnicode+0x18>
  }
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop
 8007238:	371c      	adds	r7, #28
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
	...

08007244 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b08e      	sub	sp, #56	; 0x38
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800724c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	605a      	str	r2, [r3, #4]
 8007256:	609a      	str	r2, [r3, #8]
 8007258:	60da      	str	r2, [r3, #12]
 800725a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a4c      	ldr	r2, [pc, #304]	; (8007394 <HAL_PCD_MspInit+0x150>)
 8007262:	4293      	cmp	r3, r2
 8007264:	f040 8091 	bne.w	800738a <HAL_PCD_MspInit+0x146>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007268:	4b4b      	ldr	r3, [pc, #300]	; (8007398 <HAL_PCD_MspInit+0x154>)
 800726a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726c:	4a4a      	ldr	r2, [pc, #296]	; (8007398 <HAL_PCD_MspInit+0x154>)
 800726e:	f043 0302 	orr.w	r3, r3, #2
 8007272:	6313      	str	r3, [r2, #48]	; 0x30
 8007274:	4b48      	ldr	r3, [pc, #288]	; (8007398 <HAL_PCD_MspInit+0x154>)
 8007276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007278:	f003 0302 	and.w	r3, r3, #2
 800727c:	623b      	str	r3, [r7, #32]
 800727e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8007280:	4b45      	ldr	r3, [pc, #276]	; (8007398 <HAL_PCD_MspInit+0x154>)
 8007282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007284:	4a44      	ldr	r2, [pc, #272]	; (8007398 <HAL_PCD_MspInit+0x154>)
 8007286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800728a:	6313      	str	r3, [r2, #48]	; 0x30
 800728c:	4b42      	ldr	r3, [pc, #264]	; (8007398 <HAL_PCD_MspInit+0x154>)
 800728e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007294:	61fb      	str	r3, [r7, #28]
 8007296:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007298:	4b3f      	ldr	r3, [pc, #252]	; (8007398 <HAL_PCD_MspInit+0x154>)
 800729a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729c:	4a3e      	ldr	r2, [pc, #248]	; (8007398 <HAL_PCD_MspInit+0x154>)
 800729e:	f043 0304 	orr.w	r3, r3, #4
 80072a2:	6313      	str	r3, [r2, #48]	; 0x30
 80072a4:	4b3c      	ldr	r3, [pc, #240]	; (8007398 <HAL_PCD_MspInit+0x154>)
 80072a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072b0:	4b39      	ldr	r3, [pc, #228]	; (8007398 <HAL_PCD_MspInit+0x154>)
 80072b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b4:	4a38      	ldr	r2, [pc, #224]	; (8007398 <HAL_PCD_MspInit+0x154>)
 80072b6:	f043 0301 	orr.w	r3, r3, #1
 80072ba:	6313      	str	r3, [r2, #48]	; 0x30
 80072bc:	4b36      	ldr	r3, [pc, #216]	; (8007398 <HAL_PCD_MspInit+0x154>)
 80072be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	697b      	ldr	r3, [r7, #20]
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80072c8:	f643 4323 	movw	r3, #15395	; 0x3c23
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072ce:	2302      	movs	r3, #2
 80072d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072d6:	2303      	movs	r3, #3
 80072d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80072da:	230a      	movs	r3, #10
 80072dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072e2:	4619      	mov	r1, r3
 80072e4:	482d      	ldr	r0, [pc, #180]	; (800739c <HAL_PCD_MspInit+0x158>)
 80072e6:	f7fa f87d 	bl	80013e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80072ea:	2310      	movs	r3, #16
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072ee:	2302      	movs	r3, #2
 80072f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072f2:	2300      	movs	r3, #0
 80072f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072f6:	2303      	movs	r3, #3
 80072f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80072fa:	230a      	movs	r3, #10
 80072fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80072fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007302:	4619      	mov	r1, r3
 8007304:	4826      	ldr	r0, [pc, #152]	; (80073a0 <HAL_PCD_MspInit+0x15c>)
 8007306:	f7fa f86d 	bl	80013e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800730a:	2305      	movs	r3, #5
 800730c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800730e:	2302      	movs	r3, #2
 8007310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007312:	2300      	movs	r3, #0
 8007314:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007316:	2303      	movs	r3, #3
 8007318:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800731a:	230a      	movs	r3, #10
 800731c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800731e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007322:	4619      	mov	r1, r3
 8007324:	481f      	ldr	r0, [pc, #124]	; (80073a4 <HAL_PCD_MspInit+0x160>)
 8007326:	f7fa f85d 	bl	80013e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800732a:	2328      	movs	r3, #40	; 0x28
 800732c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800732e:	2302      	movs	r3, #2
 8007330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007332:	2300      	movs	r3, #0
 8007334:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007336:	2303      	movs	r3, #3
 8007338:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800733a:	230a      	movs	r3, #10
 800733c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800733e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007342:	4619      	mov	r1, r3
 8007344:	4818      	ldr	r0, [pc, #96]	; (80073a8 <HAL_PCD_MspInit+0x164>)
 8007346:	f7fa f84d 	bl	80013e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800734a:	4b13      	ldr	r3, [pc, #76]	; (8007398 <HAL_PCD_MspInit+0x154>)
 800734c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734e:	4a12      	ldr	r2, [pc, #72]	; (8007398 <HAL_PCD_MspInit+0x154>)
 8007350:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007354:	6313      	str	r3, [r2, #48]	; 0x30
 8007356:	4b10      	ldr	r3, [pc, #64]	; (8007398 <HAL_PCD_MspInit+0x154>)
 8007358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800735e:	613b      	str	r3, [r7, #16]
 8007360:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8007362:	4b0d      	ldr	r3, [pc, #52]	; (8007398 <HAL_PCD_MspInit+0x154>)
 8007364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007366:	4a0c      	ldr	r2, [pc, #48]	; (8007398 <HAL_PCD_MspInit+0x154>)
 8007368:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800736c:	6313      	str	r3, [r2, #48]	; 0x30
 800736e:	4b0a      	ldr	r3, [pc, #40]	; (8007398 <HAL_PCD_MspInit+0x154>)
 8007370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007372:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800737a:	2200      	movs	r2, #0
 800737c:	2100      	movs	r1, #0
 800737e:	204d      	movs	r0, #77	; 0x4d
 8007380:	f7f9 fff9 	bl	8001376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8007384:	204d      	movs	r0, #77	; 0x4d
 8007386:	f7fa f812 	bl	80013ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800738a:	bf00      	nop
 800738c:	3738      	adds	r7, #56	; 0x38
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	40040000 	.word	0x40040000
 8007398:	40023800 	.word	0x40023800
 800739c:	40020400 	.word	0x40020400
 80073a0:	40021c00 	.word	0x40021c00
 80073a4:	40020800 	.word	0x40020800
 80073a8:	40020000 	.word	0x40020000

080073ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80073c0:	4619      	mov	r1, r3
 80073c2:	4610      	mov	r0, r2
 80073c4:	f7fe fabd 	bl	8005942 <USBD_LL_SetupStage>
}
 80073c8:	bf00      	nop
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	460b      	mov	r3, r1
 80073da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80073e2:	78fa      	ldrb	r2, [r7, #3]
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	4613      	mov	r3, r2
 80073e8:	00db      	lsls	r3, r3, #3
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	440b      	add	r3, r1
 80073f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	78fb      	ldrb	r3, [r7, #3]
 80073f8:	4619      	mov	r1, r3
 80073fa:	f7fe faf7 	bl	80059ec <USBD_LL_DataOutStage>
}
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b082      	sub	sp, #8
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	460b      	mov	r3, r1
 8007410:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8007418:	78fa      	ldrb	r2, [r7, #3]
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	4613      	mov	r3, r2
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	4413      	add	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	440b      	add	r3, r1
 8007426:	334c      	adds	r3, #76	; 0x4c
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	78fb      	ldrb	r3, [r7, #3]
 800742c:	4619      	mov	r1, r3
 800742e:	f7fe fb90 	bl	8005b52 <USBD_LL_DataInStage>
}
 8007432:	bf00      	nop
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b082      	sub	sp, #8
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007448:	4618      	mov	r0, r3
 800744a:	f7fe fcc4 	bl	8005dd6 <USBD_LL_SOF>
}
 800744e:	bf00      	nop
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800745e:	2301      	movs	r3, #1
 8007460:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d102      	bne.n	8007470 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]
 800746e:	e008      	b.n	8007482 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	2b02      	cmp	r3, #2
 8007476:	d102      	bne.n	800747e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007478:	2301      	movs	r3, #1
 800747a:	73fb      	strb	r3, [r7, #15]
 800747c:	e001      	b.n	8007482 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800747e:	f7f9 fd4f 	bl	8000f20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007488:	7bfa      	ldrb	r2, [r7, #15]
 800748a:	4611      	mov	r1, r2
 800748c:	4618      	mov	r0, r3
 800748e:	f7fe fc64 	bl	8005d5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007498:	4618      	mov	r0, r3
 800749a:	f7fe fc0c 	bl	8005cb6 <USBD_LL_Reset>
}
 800749e:	bf00      	nop
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
	...

080074a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe fc5f 	bl	8005d7a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6812      	ldr	r2, [r2, #0]
 80074ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074ce:	f043 0301 	orr.w	r3, r3, #1
 80074d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a1b      	ldr	r3, [r3, #32]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d005      	beq.n	80074e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074dc:	4b04      	ldr	r3, [pc, #16]	; (80074f0 <HAL_PCD_SuspendCallback+0x48>)
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	4a03      	ldr	r2, [pc, #12]	; (80074f0 <HAL_PCD_SuspendCallback+0x48>)
 80074e2:	f043 0306 	orr.w	r3, r3, #6
 80074e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80074e8:	bf00      	nop
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	e000ed00 	.word	0xe000ed00

080074f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007502:	4618      	mov	r0, r3
 8007504:	f7fe fc4f 	bl	8005da6 <USBD_LL_Resume>
}
 8007508:	bf00      	nop
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007522:	78fa      	ldrb	r2, [r7, #3]
 8007524:	4611      	mov	r1, r2
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fca7 	bl	8005e7a <USBD_LL_IsoOUTIncomplete>
}
 800752c:	bf00      	nop
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007546:	78fa      	ldrb	r2, [r7, #3]
 8007548:	4611      	mov	r1, r2
 800754a:	4618      	mov	r0, r3
 800754c:	f7fe fc63 	bl	8005e16 <USBD_LL_IsoINIncomplete>
}
 8007550:	bf00      	nop
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007566:	4618      	mov	r0, r3
 8007568:	f7fe fcb9 	bl	8005ede <USBD_LL_DevConnected>
}
 800756c:	bf00      	nop
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007582:	4618      	mov	r0, r3
 8007584:	f7fe fcb6 	bl	8005ef4 <USBD_LL_DevDisconnected>
}
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d140      	bne.n	8007622 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80075a0:	4a22      	ldr	r2, [pc, #136]	; (800762c <USBD_LL_Init+0x9c>)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_HS;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a20      	ldr	r2, [pc, #128]	; (800762c <USBD_LL_Init+0x9c>)
 80075ac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80075b0:	4b1e      	ldr	r3, [pc, #120]	; (800762c <USBD_LL_Init+0x9c>)
 80075b2:	4a1f      	ldr	r2, [pc, #124]	; (8007630 <USBD_LL_Init+0xa0>)
 80075b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 80075b6:	4b1d      	ldr	r3, [pc, #116]	; (800762c <USBD_LL_Init+0x9c>)
 80075b8:	2208      	movs	r2, #8
 80075ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80075bc:	4b1b      	ldr	r3, [pc, #108]	; (800762c <USBD_LL_Init+0x9c>)
 80075be:	2200      	movs	r2, #0
 80075c0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80075c2:	4b1a      	ldr	r3, [pc, #104]	; (800762c <USBD_LL_Init+0x9c>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 80075c8:	4b18      	ldr	r3, [pc, #96]	; (800762c <USBD_LL_Init+0x9c>)
 80075ca:	2201      	movs	r2, #1
 80075cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80075ce:	4b17      	ldr	r3, [pc, #92]	; (800762c <USBD_LL_Init+0x9c>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80075d4:	4b15      	ldr	r3, [pc, #84]	; (800762c <USBD_LL_Init+0x9c>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80075da:	4b14      	ldr	r3, [pc, #80]	; (800762c <USBD_LL_Init+0x9c>)
 80075dc:	2200      	movs	r2, #0
 80075de:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80075e0:	4b12      	ldr	r3, [pc, #72]	; (800762c <USBD_LL_Init+0x9c>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80075e6:	4b11      	ldr	r3, [pc, #68]	; (800762c <USBD_LL_Init+0x9c>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80075ec:	4b0f      	ldr	r3, [pc, #60]	; (800762c <USBD_LL_Init+0x9c>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80075f2:	480e      	ldr	r0, [pc, #56]	; (800762c <USBD_LL_Init+0x9c>)
 80075f4:	f7fa f8bb 	bl	800176e <HAL_PCD_Init>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80075fe:	f7f9 fc8f 	bl	8000f20 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8007602:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007606:	4809      	ldr	r0, [pc, #36]	; (800762c <USBD_LL_Init+0x9c>)
 8007608:	f7fb fb35 	bl	8002c76 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800760c:	2280      	movs	r2, #128	; 0x80
 800760e:	2100      	movs	r1, #0
 8007610:	4806      	ldr	r0, [pc, #24]	; (800762c <USBD_LL_Init+0x9c>)
 8007612:	f7fb fae9 	bl	8002be8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8007616:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800761a:	2101      	movs	r1, #1
 800761c:	4803      	ldr	r0, [pc, #12]	; (800762c <USBD_LL_Init+0x9c>)
 800761e:	f7fb fae3 	bl	8002be8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	20001674 	.word	0x20001674
 8007630:	40040000 	.word	0x40040000

08007634 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007640:	2300      	movs	r3, #0
 8007642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800764a:	4618      	mov	r0, r3
 800764c:	f7fa f9b3 	bl	80019b6 <HAL_PCD_Start>
 8007650:	4603      	mov	r3, r0
 8007652:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	4618      	mov	r0, r3
 8007658:	f000 f97e 	bl	8007958 <USBD_Get_USB_Status>
 800765c:	4603      	mov	r3, r0
 800765e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007660:	7bbb      	ldrb	r3, [r7, #14]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	4608      	mov	r0, r1
 8007674:	4611      	mov	r1, r2
 8007676:	461a      	mov	r2, r3
 8007678:	4603      	mov	r3, r0
 800767a:	70fb      	strb	r3, [r7, #3]
 800767c:	460b      	mov	r3, r1
 800767e:	70bb      	strb	r3, [r7, #2]
 8007680:	4613      	mov	r3, r2
 8007682:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007684:	2300      	movs	r3, #0
 8007686:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007692:	78bb      	ldrb	r3, [r7, #2]
 8007694:	883a      	ldrh	r2, [r7, #0]
 8007696:	78f9      	ldrb	r1, [r7, #3]
 8007698:	f7fa fea0 	bl	80023dc <HAL_PCD_EP_Open>
 800769c:	4603      	mov	r3, r0
 800769e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 f958 	bl	8007958 <USBD_Get_USB_Status>
 80076a8:	4603      	mov	r3, r0
 80076aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	460b      	mov	r3, r1
 80076c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076d0:	78fa      	ldrb	r2, [r7, #3]
 80076d2:	4611      	mov	r1, r2
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fa fee9 	bl	80024ac <HAL_PCD_EP_Close>
 80076da:	4603      	mov	r3, r0
 80076dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076de:	7bfb      	ldrb	r3, [r7, #15]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f000 f939 	bl	8007958 <USBD_Get_USB_Status>
 80076e6:	4603      	mov	r3, r0
 80076e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	460b      	mov	r3, r1
 80076fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007704:	2300      	movs	r3, #0
 8007706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800770e:	78fa      	ldrb	r2, [r7, #3]
 8007710:	4611      	mov	r1, r2
 8007712:	4618      	mov	r0, r3
 8007714:	f7fa ffc1 	bl	800269a <HAL_PCD_EP_SetStall>
 8007718:	4603      	mov	r3, r0
 800771a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800771c:	7bfb      	ldrb	r3, [r7, #15]
 800771e:	4618      	mov	r0, r3
 8007720:	f000 f91a 	bl	8007958 <USBD_Get_USB_Status>
 8007724:	4603      	mov	r3, r0
 8007726:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007728:	7bbb      	ldrb	r3, [r7, #14]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	460b      	mov	r3, r1
 800773c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800774c:	78fa      	ldrb	r2, [r7, #3]
 800774e:	4611      	mov	r1, r2
 8007750:	4618      	mov	r0, r3
 8007752:	f7fb f806 	bl	8002762 <HAL_PCD_EP_ClrStall>
 8007756:	4603      	mov	r3, r0
 8007758:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800775a:	7bfb      	ldrb	r3, [r7, #15]
 800775c:	4618      	mov	r0, r3
 800775e:	f000 f8fb 	bl	8007958 <USBD_Get_USB_Status>
 8007762:	4603      	mov	r3, r0
 8007764:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007766:	7bbb      	ldrb	r3, [r7, #14]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	460b      	mov	r3, r1
 800777a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007782:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007784:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007788:	2b00      	cmp	r3, #0
 800778a:	da0b      	bge.n	80077a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800778c:	78fb      	ldrb	r3, [r7, #3]
 800778e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007792:	68f9      	ldr	r1, [r7, #12]
 8007794:	4613      	mov	r3, r2
 8007796:	00db      	lsls	r3, r3, #3
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	440b      	add	r3, r1
 800779e:	333e      	adds	r3, #62	; 0x3e
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	e00b      	b.n	80077bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80077a4:	78fb      	ldrb	r3, [r7, #3]
 80077a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077aa:	68f9      	ldr	r1, [r7, #12]
 80077ac:	4613      	mov	r3, r2
 80077ae:	00db      	lsls	r3, r3, #3
 80077b0:	4413      	add	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	440b      	add	r3, r1
 80077b6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80077ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	460b      	mov	r3, r1
 80077d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077e2:	78fa      	ldrb	r2, [r7, #3]
 80077e4:	4611      	mov	r1, r2
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fa fdd3 	bl	8002392 <HAL_PCD_SetAddress>
 80077ec:	4603      	mov	r3, r0
 80077ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 f8b0 	bl	8007958 <USBD_Get_USB_Status>
 80077f8:	4603      	mov	r3, r0
 80077fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b086      	sub	sp, #24
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	607a      	str	r2, [r7, #4]
 8007810:	603b      	str	r3, [r7, #0]
 8007812:	460b      	mov	r3, r1
 8007814:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007816:	2300      	movs	r3, #0
 8007818:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800781a:	2300      	movs	r3, #0
 800781c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007824:	7af9      	ldrb	r1, [r7, #11]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	f7fa feec 	bl	8002606 <HAL_PCD_EP_Transmit>
 800782e:	4603      	mov	r3, r0
 8007830:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007832:	7dfb      	ldrb	r3, [r7, #23]
 8007834:	4618      	mov	r0, r3
 8007836:	f000 f88f 	bl	8007958 <USBD_Get_USB_Status>
 800783a:	4603      	mov	r3, r0
 800783c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800783e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3718      	adds	r7, #24
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	607a      	str	r2, [r7, #4]
 8007852:	603b      	str	r3, [r7, #0]
 8007854:	460b      	mov	r3, r1
 8007856:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007858:	2300      	movs	r3, #0
 800785a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007866:	7af9      	ldrb	r1, [r7, #11]
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	f7fa fe68 	bl	8002540 <HAL_PCD_EP_Receive>
 8007870:	4603      	mov	r3, r0
 8007872:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007874:	7dfb      	ldrb	r3, [r7, #23]
 8007876:	4618      	mov	r0, r3
 8007878:	f000 f86e 	bl	8007958 <USBD_Get_USB_Status>
 800787c:	4603      	mov	r3, r0
 800787e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007880:	7dbb      	ldrb	r3, [r7, #22]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b082      	sub	sp, #8
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	460b      	mov	r3, r1
 8007894:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800789c:	78fa      	ldrb	r2, [r7, #3]
 800789e:	4611      	mov	r1, r2
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fa fe98 	bl	80025d6 <HAL_PCD_EP_GetRxCount>
 80078a6:	4603      	mov	r3, r0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	460b      	mov	r3, r1
 80078ba:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80078bc:	78fb      	ldrb	r3, [r7, #3]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d002      	beq.n	80078c8 <HAL_PCDEx_LPM_Callback+0x18>
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d01f      	beq.n	8007906 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80078c6:	e03b      	b.n	8007940 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d007      	beq.n	80078e0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80078d0:	f000 f83c 	bl	800794c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078d4:	4b1c      	ldr	r3, [pc, #112]	; (8007948 <HAL_PCDEx_LPM_Callback+0x98>)
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	4a1b      	ldr	r2, [pc, #108]	; (8007948 <HAL_PCDEx_LPM_Callback+0x98>)
 80078da:	f023 0306 	bic.w	r3, r3, #6
 80078de:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6812      	ldr	r2, [r2, #0]
 80078ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078f2:	f023 0301 	bic.w	r3, r3, #1
 80078f6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fe fa51 	bl	8005da6 <USBD_LL_Resume>
    break;
 8007904:	e01c      	b.n	8007940 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	6812      	ldr	r2, [r2, #0]
 8007914:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007918:	f043 0301 	orr.w	r3, r3, #1
 800791c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007924:	4618      	mov	r0, r3
 8007926:	f7fe fa28 	bl	8005d7a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d005      	beq.n	800793e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007932:	4b05      	ldr	r3, [pc, #20]	; (8007948 <HAL_PCDEx_LPM_Callback+0x98>)
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	4a04      	ldr	r2, [pc, #16]	; (8007948 <HAL_PCDEx_LPM_Callback+0x98>)
 8007938:	f043 0306 	orr.w	r3, r3, #6
 800793c:	6113      	str	r3, [r2, #16]
    break;
 800793e:	bf00      	nop
}
 8007940:	bf00      	nop
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	e000ed00 	.word	0xe000ed00

0800794c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007950:	f7f8 fe2a 	bl	80005a8 <SystemClock_Config>
}
 8007954:	bf00      	nop
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	4603      	mov	r3, r0
 8007960:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007966:	79fb      	ldrb	r3, [r7, #7]
 8007968:	2b03      	cmp	r3, #3
 800796a:	d817      	bhi.n	800799c <USBD_Get_USB_Status+0x44>
 800796c:	a201      	add	r2, pc, #4	; (adr r2, 8007974 <USBD_Get_USB_Status+0x1c>)
 800796e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007972:	bf00      	nop
 8007974:	08007985 	.word	0x08007985
 8007978:	0800798b 	.word	0x0800798b
 800797c:	08007991 	.word	0x08007991
 8007980:	08007997 	.word	0x08007997
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	73fb      	strb	r3, [r7, #15]
    break;
 8007988:	e00b      	b.n	80079a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800798a:	2303      	movs	r3, #3
 800798c:	73fb      	strb	r3, [r7, #15]
    break;
 800798e:	e008      	b.n	80079a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007990:	2301      	movs	r3, #1
 8007992:	73fb      	strb	r3, [r7, #15]
    break;
 8007994:	e005      	b.n	80079a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007996:	2303      	movs	r3, #3
 8007998:	73fb      	strb	r3, [r7, #15]
    break;
 800799a:	e002      	b.n	80079a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800799c:	2303      	movs	r3, #3
 800799e:	73fb      	strb	r3, [r7, #15]
    break;
 80079a0:	bf00      	nop
  }
  return usb_status;
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <__errno>:
 80079b0:	4b01      	ldr	r3, [pc, #4]	; (80079b8 <__errno+0x8>)
 80079b2:	6818      	ldr	r0, [r3, #0]
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	2000010c 	.word	0x2000010c

080079bc <__libc_init_array>:
 80079bc:	b570      	push	{r4, r5, r6, lr}
 80079be:	4d0d      	ldr	r5, [pc, #52]	; (80079f4 <__libc_init_array+0x38>)
 80079c0:	4c0d      	ldr	r4, [pc, #52]	; (80079f8 <__libc_init_array+0x3c>)
 80079c2:	1b64      	subs	r4, r4, r5
 80079c4:	10a4      	asrs	r4, r4, #2
 80079c6:	2600      	movs	r6, #0
 80079c8:	42a6      	cmp	r6, r4
 80079ca:	d109      	bne.n	80079e0 <__libc_init_array+0x24>
 80079cc:	4d0b      	ldr	r5, [pc, #44]	; (80079fc <__libc_init_array+0x40>)
 80079ce:	4c0c      	ldr	r4, [pc, #48]	; (8007a00 <__libc_init_array+0x44>)
 80079d0:	f000 f92e 	bl	8007c30 <_init>
 80079d4:	1b64      	subs	r4, r4, r5
 80079d6:	10a4      	asrs	r4, r4, #2
 80079d8:	2600      	movs	r6, #0
 80079da:	42a6      	cmp	r6, r4
 80079dc:	d105      	bne.n	80079ea <__libc_init_array+0x2e>
 80079de:	bd70      	pop	{r4, r5, r6, pc}
 80079e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079e4:	4798      	blx	r3
 80079e6:	3601      	adds	r6, #1
 80079e8:	e7ee      	b.n	80079c8 <__libc_init_array+0xc>
 80079ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ee:	4798      	blx	r3
 80079f0:	3601      	adds	r6, #1
 80079f2:	e7f2      	b.n	80079da <__libc_init_array+0x1e>
 80079f4:	0800a4a8 	.word	0x0800a4a8
 80079f8:	0800a4a8 	.word	0x0800a4a8
 80079fc:	0800a4a8 	.word	0x0800a4a8
 8007a00:	0800a4ac 	.word	0x0800a4ac

08007a04 <malloc>:
 8007a04:	4b02      	ldr	r3, [pc, #8]	; (8007a10 <malloc+0xc>)
 8007a06:	4601      	mov	r1, r0
 8007a08:	6818      	ldr	r0, [r3, #0]
 8007a0a:	f000 b87f 	b.w	8007b0c <_malloc_r>
 8007a0e:	bf00      	nop
 8007a10:	2000010c 	.word	0x2000010c

08007a14 <free>:
 8007a14:	4b02      	ldr	r3, [pc, #8]	; (8007a20 <free+0xc>)
 8007a16:	4601      	mov	r1, r0
 8007a18:	6818      	ldr	r0, [r3, #0]
 8007a1a:	f000 b80b 	b.w	8007a34 <_free_r>
 8007a1e:	bf00      	nop
 8007a20:	2000010c 	.word	0x2000010c

08007a24 <memset>:
 8007a24:	4402      	add	r2, r0
 8007a26:	4603      	mov	r3, r0
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d100      	bne.n	8007a2e <memset+0xa>
 8007a2c:	4770      	bx	lr
 8007a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a32:	e7f9      	b.n	8007a28 <memset+0x4>

08007a34 <_free_r>:
 8007a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a36:	2900      	cmp	r1, #0
 8007a38:	d044      	beq.n	8007ac4 <_free_r+0x90>
 8007a3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a3e:	9001      	str	r0, [sp, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f1a1 0404 	sub.w	r4, r1, #4
 8007a46:	bfb8      	it	lt
 8007a48:	18e4      	addlt	r4, r4, r3
 8007a4a:	f000 f8e3 	bl	8007c14 <__malloc_lock>
 8007a4e:	4a1e      	ldr	r2, [pc, #120]	; (8007ac8 <_free_r+0x94>)
 8007a50:	9801      	ldr	r0, [sp, #4]
 8007a52:	6813      	ldr	r3, [r2, #0]
 8007a54:	b933      	cbnz	r3, 8007a64 <_free_r+0x30>
 8007a56:	6063      	str	r3, [r4, #4]
 8007a58:	6014      	str	r4, [r2, #0]
 8007a5a:	b003      	add	sp, #12
 8007a5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a60:	f000 b8de 	b.w	8007c20 <__malloc_unlock>
 8007a64:	42a3      	cmp	r3, r4
 8007a66:	d908      	bls.n	8007a7a <_free_r+0x46>
 8007a68:	6825      	ldr	r5, [r4, #0]
 8007a6a:	1961      	adds	r1, r4, r5
 8007a6c:	428b      	cmp	r3, r1
 8007a6e:	bf01      	itttt	eq
 8007a70:	6819      	ldreq	r1, [r3, #0]
 8007a72:	685b      	ldreq	r3, [r3, #4]
 8007a74:	1949      	addeq	r1, r1, r5
 8007a76:	6021      	streq	r1, [r4, #0]
 8007a78:	e7ed      	b.n	8007a56 <_free_r+0x22>
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	b10b      	cbz	r3, 8007a84 <_free_r+0x50>
 8007a80:	42a3      	cmp	r3, r4
 8007a82:	d9fa      	bls.n	8007a7a <_free_r+0x46>
 8007a84:	6811      	ldr	r1, [r2, #0]
 8007a86:	1855      	adds	r5, r2, r1
 8007a88:	42a5      	cmp	r5, r4
 8007a8a:	d10b      	bne.n	8007aa4 <_free_r+0x70>
 8007a8c:	6824      	ldr	r4, [r4, #0]
 8007a8e:	4421      	add	r1, r4
 8007a90:	1854      	adds	r4, r2, r1
 8007a92:	42a3      	cmp	r3, r4
 8007a94:	6011      	str	r1, [r2, #0]
 8007a96:	d1e0      	bne.n	8007a5a <_free_r+0x26>
 8007a98:	681c      	ldr	r4, [r3, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	6053      	str	r3, [r2, #4]
 8007a9e:	4421      	add	r1, r4
 8007aa0:	6011      	str	r1, [r2, #0]
 8007aa2:	e7da      	b.n	8007a5a <_free_r+0x26>
 8007aa4:	d902      	bls.n	8007aac <_free_r+0x78>
 8007aa6:	230c      	movs	r3, #12
 8007aa8:	6003      	str	r3, [r0, #0]
 8007aaa:	e7d6      	b.n	8007a5a <_free_r+0x26>
 8007aac:	6825      	ldr	r5, [r4, #0]
 8007aae:	1961      	adds	r1, r4, r5
 8007ab0:	428b      	cmp	r3, r1
 8007ab2:	bf04      	itt	eq
 8007ab4:	6819      	ldreq	r1, [r3, #0]
 8007ab6:	685b      	ldreq	r3, [r3, #4]
 8007ab8:	6063      	str	r3, [r4, #4]
 8007aba:	bf04      	itt	eq
 8007abc:	1949      	addeq	r1, r1, r5
 8007abe:	6021      	streq	r1, [r4, #0]
 8007ac0:	6054      	str	r4, [r2, #4]
 8007ac2:	e7ca      	b.n	8007a5a <_free_r+0x26>
 8007ac4:	b003      	add	sp, #12
 8007ac6:	bd30      	pop	{r4, r5, pc}
 8007ac8:	20001b7c 	.word	0x20001b7c

08007acc <sbrk_aligned>:
 8007acc:	b570      	push	{r4, r5, r6, lr}
 8007ace:	4e0e      	ldr	r6, [pc, #56]	; (8007b08 <sbrk_aligned+0x3c>)
 8007ad0:	460c      	mov	r4, r1
 8007ad2:	6831      	ldr	r1, [r6, #0]
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	b911      	cbnz	r1, 8007ade <sbrk_aligned+0x12>
 8007ad8:	f000 f88c 	bl	8007bf4 <_sbrk_r>
 8007adc:	6030      	str	r0, [r6, #0]
 8007ade:	4621      	mov	r1, r4
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	f000 f887 	bl	8007bf4 <_sbrk_r>
 8007ae6:	1c43      	adds	r3, r0, #1
 8007ae8:	d00a      	beq.n	8007b00 <sbrk_aligned+0x34>
 8007aea:	1cc4      	adds	r4, r0, #3
 8007aec:	f024 0403 	bic.w	r4, r4, #3
 8007af0:	42a0      	cmp	r0, r4
 8007af2:	d007      	beq.n	8007b04 <sbrk_aligned+0x38>
 8007af4:	1a21      	subs	r1, r4, r0
 8007af6:	4628      	mov	r0, r5
 8007af8:	f000 f87c 	bl	8007bf4 <_sbrk_r>
 8007afc:	3001      	adds	r0, #1
 8007afe:	d101      	bne.n	8007b04 <sbrk_aligned+0x38>
 8007b00:	f04f 34ff 	mov.w	r4, #4294967295
 8007b04:	4620      	mov	r0, r4
 8007b06:	bd70      	pop	{r4, r5, r6, pc}
 8007b08:	20001b80 	.word	0x20001b80

08007b0c <_malloc_r>:
 8007b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b10:	1ccd      	adds	r5, r1, #3
 8007b12:	f025 0503 	bic.w	r5, r5, #3
 8007b16:	3508      	adds	r5, #8
 8007b18:	2d0c      	cmp	r5, #12
 8007b1a:	bf38      	it	cc
 8007b1c:	250c      	movcc	r5, #12
 8007b1e:	2d00      	cmp	r5, #0
 8007b20:	4607      	mov	r7, r0
 8007b22:	db01      	blt.n	8007b28 <_malloc_r+0x1c>
 8007b24:	42a9      	cmp	r1, r5
 8007b26:	d905      	bls.n	8007b34 <_malloc_r+0x28>
 8007b28:	230c      	movs	r3, #12
 8007b2a:	603b      	str	r3, [r7, #0]
 8007b2c:	2600      	movs	r6, #0
 8007b2e:	4630      	mov	r0, r6
 8007b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b34:	4e2e      	ldr	r6, [pc, #184]	; (8007bf0 <_malloc_r+0xe4>)
 8007b36:	f000 f86d 	bl	8007c14 <__malloc_lock>
 8007b3a:	6833      	ldr	r3, [r6, #0]
 8007b3c:	461c      	mov	r4, r3
 8007b3e:	bb34      	cbnz	r4, 8007b8e <_malloc_r+0x82>
 8007b40:	4629      	mov	r1, r5
 8007b42:	4638      	mov	r0, r7
 8007b44:	f7ff ffc2 	bl	8007acc <sbrk_aligned>
 8007b48:	1c43      	adds	r3, r0, #1
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	d14d      	bne.n	8007bea <_malloc_r+0xde>
 8007b4e:	6834      	ldr	r4, [r6, #0]
 8007b50:	4626      	mov	r6, r4
 8007b52:	2e00      	cmp	r6, #0
 8007b54:	d140      	bne.n	8007bd8 <_malloc_r+0xcc>
 8007b56:	6823      	ldr	r3, [r4, #0]
 8007b58:	4631      	mov	r1, r6
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	eb04 0803 	add.w	r8, r4, r3
 8007b60:	f000 f848 	bl	8007bf4 <_sbrk_r>
 8007b64:	4580      	cmp	r8, r0
 8007b66:	d13a      	bne.n	8007bde <_malloc_r+0xd2>
 8007b68:	6821      	ldr	r1, [r4, #0]
 8007b6a:	3503      	adds	r5, #3
 8007b6c:	1a6d      	subs	r5, r5, r1
 8007b6e:	f025 0503 	bic.w	r5, r5, #3
 8007b72:	3508      	adds	r5, #8
 8007b74:	2d0c      	cmp	r5, #12
 8007b76:	bf38      	it	cc
 8007b78:	250c      	movcc	r5, #12
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	4638      	mov	r0, r7
 8007b7e:	f7ff ffa5 	bl	8007acc <sbrk_aligned>
 8007b82:	3001      	adds	r0, #1
 8007b84:	d02b      	beq.n	8007bde <_malloc_r+0xd2>
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	442b      	add	r3, r5
 8007b8a:	6023      	str	r3, [r4, #0]
 8007b8c:	e00e      	b.n	8007bac <_malloc_r+0xa0>
 8007b8e:	6822      	ldr	r2, [r4, #0]
 8007b90:	1b52      	subs	r2, r2, r5
 8007b92:	d41e      	bmi.n	8007bd2 <_malloc_r+0xc6>
 8007b94:	2a0b      	cmp	r2, #11
 8007b96:	d916      	bls.n	8007bc6 <_malloc_r+0xba>
 8007b98:	1961      	adds	r1, r4, r5
 8007b9a:	42a3      	cmp	r3, r4
 8007b9c:	6025      	str	r5, [r4, #0]
 8007b9e:	bf18      	it	ne
 8007ba0:	6059      	strne	r1, [r3, #4]
 8007ba2:	6863      	ldr	r3, [r4, #4]
 8007ba4:	bf08      	it	eq
 8007ba6:	6031      	streq	r1, [r6, #0]
 8007ba8:	5162      	str	r2, [r4, r5]
 8007baa:	604b      	str	r3, [r1, #4]
 8007bac:	4638      	mov	r0, r7
 8007bae:	f104 060b 	add.w	r6, r4, #11
 8007bb2:	f000 f835 	bl	8007c20 <__malloc_unlock>
 8007bb6:	f026 0607 	bic.w	r6, r6, #7
 8007bba:	1d23      	adds	r3, r4, #4
 8007bbc:	1af2      	subs	r2, r6, r3
 8007bbe:	d0b6      	beq.n	8007b2e <_malloc_r+0x22>
 8007bc0:	1b9b      	subs	r3, r3, r6
 8007bc2:	50a3      	str	r3, [r4, r2]
 8007bc4:	e7b3      	b.n	8007b2e <_malloc_r+0x22>
 8007bc6:	6862      	ldr	r2, [r4, #4]
 8007bc8:	42a3      	cmp	r3, r4
 8007bca:	bf0c      	ite	eq
 8007bcc:	6032      	streq	r2, [r6, #0]
 8007bce:	605a      	strne	r2, [r3, #4]
 8007bd0:	e7ec      	b.n	8007bac <_malloc_r+0xa0>
 8007bd2:	4623      	mov	r3, r4
 8007bd4:	6864      	ldr	r4, [r4, #4]
 8007bd6:	e7b2      	b.n	8007b3e <_malloc_r+0x32>
 8007bd8:	4634      	mov	r4, r6
 8007bda:	6876      	ldr	r6, [r6, #4]
 8007bdc:	e7b9      	b.n	8007b52 <_malloc_r+0x46>
 8007bde:	230c      	movs	r3, #12
 8007be0:	603b      	str	r3, [r7, #0]
 8007be2:	4638      	mov	r0, r7
 8007be4:	f000 f81c 	bl	8007c20 <__malloc_unlock>
 8007be8:	e7a1      	b.n	8007b2e <_malloc_r+0x22>
 8007bea:	6025      	str	r5, [r4, #0]
 8007bec:	e7de      	b.n	8007bac <_malloc_r+0xa0>
 8007bee:	bf00      	nop
 8007bf0:	20001b7c 	.word	0x20001b7c

08007bf4 <_sbrk_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4d06      	ldr	r5, [pc, #24]	; (8007c10 <_sbrk_r+0x1c>)
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	4608      	mov	r0, r1
 8007bfe:	602b      	str	r3, [r5, #0]
 8007c00:	f7f9 f9ec 	bl	8000fdc <_sbrk>
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	d102      	bne.n	8007c0e <_sbrk_r+0x1a>
 8007c08:	682b      	ldr	r3, [r5, #0]
 8007c0a:	b103      	cbz	r3, 8007c0e <_sbrk_r+0x1a>
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	bd38      	pop	{r3, r4, r5, pc}
 8007c10:	20001b84 	.word	0x20001b84

08007c14 <__malloc_lock>:
 8007c14:	4801      	ldr	r0, [pc, #4]	; (8007c1c <__malloc_lock+0x8>)
 8007c16:	f000 b809 	b.w	8007c2c <__retarget_lock_acquire_recursive>
 8007c1a:	bf00      	nop
 8007c1c:	20001b88 	.word	0x20001b88

08007c20 <__malloc_unlock>:
 8007c20:	4801      	ldr	r0, [pc, #4]	; (8007c28 <__malloc_unlock+0x8>)
 8007c22:	f000 b804 	b.w	8007c2e <__retarget_lock_release_recursive>
 8007c26:	bf00      	nop
 8007c28:	20001b88 	.word	0x20001b88

08007c2c <__retarget_lock_acquire_recursive>:
 8007c2c:	4770      	bx	lr

08007c2e <__retarget_lock_release_recursive>:
 8007c2e:	4770      	bx	lr

08007c30 <_init>:
 8007c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c32:	bf00      	nop
 8007c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c36:	bc08      	pop	{r3}
 8007c38:	469e      	mov	lr, r3
 8007c3a:	4770      	bx	lr

08007c3c <_fini>:
 8007c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3e:	bf00      	nop
 8007c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c42:	bc08      	pop	{r3}
 8007c44:	469e      	mov	lr, r3
 8007c46:	4770      	bx	lr
