
audiousbfs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093e8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  080096b8  080096b8  000196b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080099e4  080099e4  000199e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080099e8  080099e8  000199e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000194  24000000  080099ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00014474  24000194  08009b80  00020194  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24014608  08009b80  00024608  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013c28  00000000  00000000  000201c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000322f  00000000  00000000  00033dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000f68  00000000  00000000  00037020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000df0  00000000  00000000  00037f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034aa6  00000000  00000000  00038d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00013d45  00000000  00000000  0006d81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013de5a  00000000  00000000  00081563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001bf3bd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004608  00000000  00000000  001bf410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000194 	.word	0x24000194
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080096a0 	.word	0x080096a0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000198 	.word	0x24000198
 800030c:	080096a0 	.word	0x080096a0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b5b0      	push	{r4, r5, r7, lr}
 80003b2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b8:	f000 fb72 	bl	8000aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003bc:	f000 f840 	bl	8000440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c0:	f000 f8b0 	bl	8000524 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80003c4:	f007 fc7a 	bl	8007cbc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t data[512] = "QUANTTRONIX\n";
 80003c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80003cc:	f5a3 7500 	sub.w	r5, r3, #512	; 0x200
 80003d0:	4b18      	ldr	r3, [pc, #96]	; (8000434 <main+0x84>)
 80003d2:	462c      	mov	r4, r5
 80003d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003d6:	c407      	stmia	r4!, {r0, r1, r2}
 80003d8:	7023      	strb	r3, [r4, #0]
 80003da:	f105 030d 	add.w	r3, r5, #13
 80003de:	f240 12f3 	movw	r2, #499	; 0x1f3
 80003e2:	2100      	movs	r1, #0
 80003e4:	4618      	mov	r0, r3
 80003e6:	f008 f967 	bl	80086b8 <memset>

  memset(data+14, 1 , 512-14);
 80003ea:	463b      	mov	r3, r7
 80003ec:	330e      	adds	r3, #14
 80003ee:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 80003f2:	2101      	movs	r1, #1
 80003f4:	4618      	mov	r0, r3
 80003f6:	f008 f95f 	bl	80086b8 <memset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);
 80003fa:	2200      	movs	r2, #0
 80003fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000400:	480d      	ldr	r0, [pc, #52]	; (8000438 <main+0x88>)
 8000402:	f000 febb 	bl	800117c <HAL_GPIO_WritePin>
//	  USBD_AUDIO_RegisterInterface(&hUsbDeviceHS, &fops);
//	  USBD_AUDIO_DataIn(&hUsbDeviceHS , 1);
	  if(USBD_CtlSendData(&hUsbDeviceHS,  data,  64) != USBD_OK)
 8000406:	463b      	mov	r3, r7
 8000408:	2240      	movs	r2, #64	; 0x40
 800040a:	4619      	mov	r1, r3
 800040c:	480b      	ldr	r0, [pc, #44]	; (800043c <main+0x8c>)
 800040e:	f007 fbd5 	bl	8007bbc <USBD_CtlSendData>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d006      	beq.n	8000426 <main+0x76>
	  {
		  while(USBD_CtlSendStatus(&hUsbDeviceHS) != USBD_OK);
 8000418:	bf00      	nop
 800041a:	4808      	ldr	r0, [pc, #32]	; (800043c <main+0x8c>)
 800041c:	f007 fc28 	bl	8007c70 <USBD_CtlSendStatus>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1f9      	bne.n	800041a <main+0x6a>
	  }
//	  while((*(hUsbDeviceHS.pClass))->Setup(&hUsbDeviceHS , &req));
//	  while(!(OTG_HS_DIEPINT0 & (1<<7)));
//	  HAL_Delay(1000);

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
 8000426:	2201      	movs	r2, #1
 8000428:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <main+0x88>)
 800042e:	f000 fea5 	bl	800117c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);
 8000432:	e7e2      	b.n	80003fa <main+0x4a>
 8000434:	080096b8 	.word	0x080096b8
 8000438:	58020800 	.word	0x58020800
 800043c:	240001bc 	.word	0x240001bc

08000440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b09c      	sub	sp, #112	; 0x70
 8000444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800044a:	224c      	movs	r2, #76	; 0x4c
 800044c:	2100      	movs	r1, #0
 800044e:	4618      	mov	r0, r3
 8000450:	f008 f932 	bl	80086b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	2220      	movs	r2, #32
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f008 f92c 	bl	80086b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000460:	2002      	movs	r0, #2
 8000462:	f002 f979 	bl	8002758 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000466:	2300      	movs	r3, #0
 8000468:	603b      	str	r3, [r7, #0]
 800046a:	4b2d      	ldr	r3, [pc, #180]	; (8000520 <SystemClock_Config+0xe0>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000472:	4a2b      	ldr	r2, [pc, #172]	; (8000520 <SystemClock_Config+0xe0>)
 8000474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000478:	6193      	str	r3, [r2, #24]
 800047a:	4b29      	ldr	r3, [pc, #164]	; (8000520 <SystemClock_Config+0xe0>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000486:	bf00      	nop
 8000488:	4b25      	ldr	r3, [pc, #148]	; (8000520 <SystemClock_Config+0xe0>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000494:	d1f8      	bne.n	8000488 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000496:	2322      	movs	r3, #34	; 0x22
 8000498:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800049a:	2301      	movs	r3, #1
 800049c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800049e:	2340      	movs	r3, #64	; 0x40
 80004a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004a2:	2301      	movs	r3, #1
 80004a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a6:	2302      	movs	r3, #2
 80004a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004aa:	2300      	movs	r3, #0
 80004ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80004ae:	2304      	movs	r3, #4
 80004b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80004b2:	230c      	movs	r3, #12
 80004b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80004b6:	2301      	movs	r3, #1
 80004b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80004ba:	2304      	movs	r3, #4
 80004bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004be:	2302      	movs	r3, #2
 80004c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80004c2:	230c      	movs	r3, #12
 80004c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004c6:	2300      	movs	r3, #0
 80004c8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004d2:	4618      	mov	r0, r3
 80004d4:	f002 f98a 	bl	80027ec <HAL_RCC_OscConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80004de:	f000 f945 	bl	800076c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e2:	233f      	movs	r3, #63	; 0x3f
 80004e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e6:	2303      	movs	r3, #3
 80004e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004ee:	2308      	movs	r3, #8
 80004f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004f2:	2340      	movs	r3, #64	; 0x40
 80004f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004f6:	2340      	movs	r3, #64	; 0x40
 80004f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004fe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000500:	2340      	movs	r3, #64	; 0x40
 8000502:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2101      	movs	r1, #1
 8000508:	4618      	mov	r0, r3
 800050a:	f002 fd1d 	bl	8002f48 <HAL_RCC_ClockConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000514:	f000 f92a 	bl	800076c <Error_Handler>
  }
}
 8000518:	bf00      	nop
 800051a:	3770      	adds	r7, #112	; 0x70
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	58024800 	.word	0x58024800

08000524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08c      	sub	sp, #48	; 0x30
 8000528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052a:	f107 031c 	add.w	r3, r7, #28
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053a:	4b85      	ldr	r3, [pc, #532]	; (8000750 <MX_GPIO_Init+0x22c>)
 800053c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000540:	4a83      	ldr	r2, [pc, #524]	; (8000750 <MX_GPIO_Init+0x22c>)
 8000542:	f043 0304 	orr.w	r3, r3, #4
 8000546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800054a:	4b81      	ldr	r3, [pc, #516]	; (8000750 <MX_GPIO_Init+0x22c>)
 800054c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	61bb      	str	r3, [r7, #24]
 8000556:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000558:	4b7d      	ldr	r3, [pc, #500]	; (8000750 <MX_GPIO_Init+0x22c>)
 800055a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800055e:	4a7c      	ldr	r2, [pc, #496]	; (8000750 <MX_GPIO_Init+0x22c>)
 8000560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000564:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000568:	4b79      	ldr	r3, [pc, #484]	; (8000750 <MX_GPIO_Init+0x22c>)
 800056a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800056e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b76      	ldr	r3, [pc, #472]	; (8000750 <MX_GPIO_Init+0x22c>)
 8000578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800057c:	4a74      	ldr	r2, [pc, #464]	; (8000750 <MX_GPIO_Init+0x22c>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000586:	4b72      	ldr	r3, [pc, #456]	; (8000750 <MX_GPIO_Init+0x22c>)
 8000588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000594:	4b6e      	ldr	r3, [pc, #440]	; (8000750 <MX_GPIO_Init+0x22c>)
 8000596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800059a:	4a6d      	ldr	r2, [pc, #436]	; (8000750 <MX_GPIO_Init+0x22c>)
 800059c:	f043 0302 	orr.w	r3, r3, #2
 80005a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005a4:	4b6a      	ldr	r3, [pc, #424]	; (8000750 <MX_GPIO_Init+0x22c>)
 80005a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b2:	4b67      	ldr	r3, [pc, #412]	; (8000750 <MX_GPIO_Init+0x22c>)
 80005b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b8:	4a65      	ldr	r2, [pc, #404]	; (8000750 <MX_GPIO_Init+0x22c>)
 80005ba:	f043 0308 	orr.w	r3, r3, #8
 80005be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005c2:	4b63      	ldr	r3, [pc, #396]	; (8000750 <MX_GPIO_Init+0x22c>)
 80005c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c8:	f003 0308 	and.w	r3, r3, #8
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005d0:	4b5f      	ldr	r3, [pc, #380]	; (8000750 <MX_GPIO_Init+0x22c>)
 80005d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d6:	4a5e      	ldr	r2, [pc, #376]	; (8000750 <MX_GPIO_Init+0x22c>)
 80005d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005e0:	4b5b      	ldr	r3, [pc, #364]	; (8000750 <MX_GPIO_Init+0x22c>)
 80005e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ee:	4b58      	ldr	r3, [pc, #352]	; (8000750 <MX_GPIO_Init+0x22c>)
 80005f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f4:	4a56      	ldr	r2, [pc, #344]	; (8000750 <MX_GPIO_Init+0x22c>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005fe:	4b54      	ldr	r3, [pc, #336]	; (8000750 <MX_GPIO_Init+0x22c>)
 8000600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000604:	f003 0310 	and.w	r3, r3, #16
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000612:	4850      	ldr	r0, [pc, #320]	; (8000754 <MX_GPIO_Init+0x230>)
 8000614:	f000 fdb2 	bl	800117c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800061e:	484e      	ldr	r0, [pc, #312]	; (8000758 <MX_GPIO_Init+0x234>)
 8000620:	f000 fdac 	bl	800117c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2102      	movs	r1, #2
 8000628:	484c      	ldr	r0, [pc, #304]	; (800075c <MX_GPIO_Init+0x238>)
 800062a:	f000 fda7 	bl	800117c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800062e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000634:	2300      	movs	r3, #0
 8000636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4619      	mov	r1, r3
 8000642:	4845      	ldr	r0, [pc, #276]	; (8000758 <MX_GPIO_Init+0x234>)
 8000644:	f000 fbf2 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000648:	2332      	movs	r3, #50	; 0x32
 800064a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064c:	2302      	movs	r3, #2
 800064e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000658:	230b      	movs	r3, #11
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4619      	mov	r1, r3
 8000662:	483d      	ldr	r0, [pc, #244]	; (8000758 <MX_GPIO_Init+0x234>)
 8000664:	f000 fbe2 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000668:	2386      	movs	r3, #134	; 0x86
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2302      	movs	r3, #2
 800066e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000678:	230b      	movs	r3, #11
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	4837      	ldr	r0, [pc, #220]	; (8000760 <MX_GPIO_Init+0x23c>)
 8000684:	f000 fbd2 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000688:	f244 0301 	movw	r3, #16385	; 0x4001
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	482c      	ldr	r0, [pc, #176]	; (8000754 <MX_GPIO_Init+0x230>)
 80006a2:	f000 fbc3 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006b8:	230b      	movs	r3, #11
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	4619      	mov	r1, r3
 80006c2:	4824      	ldr	r0, [pc, #144]	; (8000754 <MX_GPIO_Init+0x230>)
 80006c4:	f000 fbb2 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80006c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ce:	2302      	movs	r3, #2
 80006d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2300      	movs	r3, #0
 80006d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006da:	2307      	movs	r3, #7
 80006dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4619      	mov	r1, r3
 80006e4:	481f      	ldr	r0, [pc, #124]	; (8000764 <MX_GPIO_Init+0x240>)
 80006e6:	f000 fba1 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	4815      	ldr	r0, [pc, #84]	; (8000758 <MX_GPIO_Init+0x234>)
 8000704:	f000 fb92 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000708:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800070c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070e:	2302      	movs	r3, #2
 8000710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2300      	movs	r3, #0
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800071a:	230b      	movs	r3, #11
 800071c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4619      	mov	r1, r3
 8000724:	4810      	ldr	r0, [pc, #64]	; (8000768 <MX_GPIO_Init+0x244>)
 8000726:	f000 fb81 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800072a:	2302      	movs	r3, #2
 800072c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	4806      	ldr	r0, [pc, #24]	; (800075c <MX_GPIO_Init+0x238>)
 8000742:	f000 fb73 	bl	8000e2c <HAL_GPIO_Init>

}
 8000746:	bf00      	nop
 8000748:	3730      	adds	r7, #48	; 0x30
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	58024400 	.word	0x58024400
 8000754:	58020400 	.word	0x58020400
 8000758:	58020800 	.word	0x58020800
 800075c:	58021000 	.word	0x58021000
 8000760:	58020000 	.word	0x58020000
 8000764:	58020c00 	.word	0x58020c00
 8000768:	58021800 	.word	0x58021800

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_MspInit+0x30>)
 8000780:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000784:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <HAL_MspInit+0x30>)
 8000786:	f043 0302 	orr.w	r3, r3, #2
 800078a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_MspInit+0x30>)
 8000790:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000794:	f003 0302 	and.w	r3, r3, #2
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	58024400 	.word	0x58024400

080007ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <NMI_Handler+0x4>

080007b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <HardFault_Handler+0x4>

080007b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <MemManage_Handler+0x4>

080007be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <BusFault_Handler+0x4>

080007c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <UsageFault_Handler+0x4>

080007ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f8:	f000 f9c4 	bl	8000b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}

08000800 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <OTG_HS_IRQHandler+0x10>)
 8000806:	f000 fe29 	bl	800145c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	24010498 	.word	0x24010498

08000814 <_read>:
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	e00a      	b.n	800083c <_read+0x28>
 8000826:	f3af 8000 	nop.w
 800082a:	4601      	mov	r1, r0
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	60ba      	str	r2, [r7, #8]
 8000832:	b2ca      	uxtb	r2, r1
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	3301      	adds	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697a      	ldr	r2, [r7, #20]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	429a      	cmp	r2, r3
 8000842:	dbf0      	blt.n	8000826 <_read+0x12>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4618      	mov	r0, r3
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <_write>:
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	60f8      	str	r0, [r7, #12]
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	e009      	b.n	8000874 <_write+0x26>
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	60ba      	str	r2, [r7, #8]
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f3af 8000 	nop.w
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	3301      	adds	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	429a      	cmp	r2, r3
 800087a:	dbf1      	blt.n	8000860 <_write+0x12>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4618      	mov	r0, r3
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <_close>:
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <_fstat>:
 800089e:	b480      	push	{r7}
 80008a0:	b083      	sub	sp, #12
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
 80008a6:	6039      	str	r1, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	2300      	movs	r3, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <_isatty>:
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
 80008c6:	2301      	movs	r3, #1
 80008c8:	4618      	mov	r0, r3
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <_lseek>:
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
 80008e0:	2300      	movs	r3, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
	...

080008f0 <_sbrk>:
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	4a14      	ldr	r2, [pc, #80]	; (800094c <_sbrk+0x5c>)
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <_sbrk+0x60>)
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d102      	bne.n	8000912 <_sbrk+0x22>
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <_sbrk+0x64>)
 800090e:	4a12      	ldr	r2, [pc, #72]	; (8000958 <_sbrk+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <_sbrk+0x64>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	429a      	cmp	r2, r3
 800091e:	d207      	bcs.n	8000930 <_sbrk+0x40>
 8000920:	f007 fea0 	bl	8008664 <__errno>
 8000924:	4603      	mov	r3, r0
 8000926:	220c      	movs	r2, #12
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
 800092e:	e009      	b.n	8000944 <_sbrk+0x54>
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <_sbrk+0x64>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <_sbrk+0x64>)
 8000940:	6013      	str	r3, [r2, #0]
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	24050000 	.word	0x24050000
 8000950:	00000400 	.word	0x00000400
 8000954:	240001b0 	.word	0x240001b0
 8000958:	24014608 	.word	0x24014608

0800095c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000960:	4b32      	ldr	r3, [pc, #200]	; (8000a2c <SystemInit+0xd0>)
 8000962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000966:	4a31      	ldr	r2, [pc, #196]	; (8000a2c <SystemInit+0xd0>)
 8000968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800096c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000970:	4b2f      	ldr	r3, [pc, #188]	; (8000a30 <SystemInit+0xd4>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f003 030f 	and.w	r3, r3, #15
 8000978:	2b06      	cmp	r3, #6
 800097a:	d807      	bhi.n	800098c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800097c:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <SystemInit+0xd4>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f023 030f 	bic.w	r3, r3, #15
 8000984:	4a2a      	ldr	r2, [pc, #168]	; (8000a30 <SystemInit+0xd4>)
 8000986:	f043 0307 	orr.w	r3, r3, #7
 800098a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800098c:	4b29      	ldr	r3, [pc, #164]	; (8000a34 <SystemInit+0xd8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a28      	ldr	r2, [pc, #160]	; (8000a34 <SystemInit+0xd8>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000998:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <SystemInit+0xd8>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <SystemInit+0xd8>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	4924      	ldr	r1, [pc, #144]	; (8000a34 <SystemInit+0xd8>)
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <SystemInit+0xdc>)
 80009a6:	4013      	ands	r3, r2
 80009a8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <SystemInit+0xd4>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f003 0308 	and.w	r3, r3, #8
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d007      	beq.n	80009c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009b6:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <SystemInit+0xd4>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f023 030f 	bic.w	r3, r3, #15
 80009be:	4a1c      	ldr	r2, [pc, #112]	; (8000a30 <SystemInit+0xd4>)
 80009c0:	f043 0307 	orr.w	r3, r3, #7
 80009c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009c6:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <SystemInit+0xd8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <SystemInit+0xd8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <SystemInit+0xd8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <SystemInit+0xd8>)
 80009da:	4a18      	ldr	r2, [pc, #96]	; (8000a3c <SystemInit+0xe0>)
 80009dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <SystemInit+0xd8>)
 80009e0:	4a17      	ldr	r2, [pc, #92]	; (8000a40 <SystemInit+0xe4>)
 80009e2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <SystemInit+0xd8>)
 80009e6:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <SystemInit+0xe8>)
 80009e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <SystemInit+0xd8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <SystemInit+0xd8>)
 80009f2:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <SystemInit+0xe8>)
 80009f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <SystemInit+0xd8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <SystemInit+0xd8>)
 80009fe:	4a11      	ldr	r2, [pc, #68]	; (8000a44 <SystemInit+0xe8>)
 8000a00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <SystemInit+0xd8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <SystemInit+0xd8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a09      	ldr	r2, [pc, #36]	; (8000a34 <SystemInit+0xd8>)
 8000a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <SystemInit+0xd8>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <SystemInit+0xec>)
 8000a1c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a20:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00
 8000a30:	52002000 	.word	0x52002000
 8000a34:	58024400 	.word	0x58024400
 8000a38:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a3c:	02020200 	.word	0x02020200
 8000a40:	01ff0000 	.word	0x01ff0000
 8000a44:	01010280 	.word	0x01010280
 8000a48:	52004000 	.word	0x52004000

08000a4c <Reset_Handler>:
 8000a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a84 <LoopFillZerobss+0xe>
 8000a50:	f7ff ff84 	bl	800095c <SystemInit>
 8000a54:	480c      	ldr	r0, [pc, #48]	; (8000a88 <LoopFillZerobss+0x12>)
 8000a56:	490d      	ldr	r1, [pc, #52]	; (8000a8c <LoopFillZerobss+0x16>)
 8000a58:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <LoopFillZerobss+0x1a>)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e002      	b.n	8000a64 <LoopCopyDataInit>

08000a5e <CopyDataInit>:
 8000a5e:	58d4      	ldr	r4, [r2, r3]
 8000a60:	50c4      	str	r4, [r0, r3]
 8000a62:	3304      	adds	r3, #4

08000a64 <LoopCopyDataInit>:
 8000a64:	18c4      	adds	r4, r0, r3
 8000a66:	428c      	cmp	r4, r1
 8000a68:	d3f9      	bcc.n	8000a5e <CopyDataInit>
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <LoopFillZerobss+0x1e>)
 8000a6c:	4c0a      	ldr	r4, [pc, #40]	; (8000a98 <LoopFillZerobss+0x22>)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e001      	b.n	8000a76 <LoopFillZerobss>

08000a72 <FillZerobss>:
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	3204      	adds	r2, #4

08000a76 <LoopFillZerobss>:
 8000a76:	42a2      	cmp	r2, r4
 8000a78:	d3fb      	bcc.n	8000a72 <FillZerobss>
 8000a7a:	f007 fdf9 	bl	8008670 <__libc_init_array>
 8000a7e:	f7ff fc97 	bl	80003b0 <main>
 8000a82:	4770      	bx	lr
 8000a84:	24050000 	.word	0x24050000
 8000a88:	24000000 	.word	0x24000000
 8000a8c:	24000194 	.word	0x24000194
 8000a90:	080099ec 	.word	0x080099ec
 8000a94:	24000194 	.word	0x24000194
 8000a98:	24014608 	.word	0x24014608

08000a9c <ADC3_IRQHandler>:
 8000a9c:	e7fe      	b.n	8000a9c <ADC3_IRQHandler>
	...

08000aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa6:	2003      	movs	r0, #3
 8000aa8:	f000 f980 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000aac:	f002 fc02 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <HAL_Init+0x68>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	0a1b      	lsrs	r3, r3, #8
 8000ab8:	f003 030f 	and.w	r3, r3, #15
 8000abc:	4913      	ldr	r1, [pc, #76]	; (8000b0c <HAL_Init+0x6c>)
 8000abe:	5ccb      	ldrb	r3, [r1, r3]
 8000ac0:	f003 031f 	and.w	r3, r3, #31
 8000ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ac8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <HAL_Init+0x68>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_Init+0x6c>)
 8000ad4:	5cd3      	ldrb	r3, [r2, r3]
 8000ad6:	f003 031f 	and.w	r3, r3, #31
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae0:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <HAL_Init+0x70>)
 8000ae2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ae4:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <HAL_Init+0x74>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aea:	2000      	movs	r0, #0
 8000aec:	f000 f814 	bl	8000b18 <HAL_InitTick>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e002      	b.n	8000b00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000afa:	f7ff fe3d 	bl	8000778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	58024400 	.word	0x58024400
 8000b0c:	0800993c 	.word	0x0800993c
 8000b10:	24000004 	.word	0x24000004
 8000b14:	24000000 	.word	0x24000000

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_InitTick+0x60>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d101      	bne.n	8000b2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e021      	b.n	8000b70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <HAL_InitTick+0x64>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_InitTick+0x60>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f965 	bl	8000e12 <HAL_SYSTICK_Config>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00e      	b.n	8000b70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d80a      	bhi.n	8000b6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f000 f92f 	bl	8000dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <HAL_InitTick+0x68>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e000      	b.n	8000b70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	2400000c 	.word	0x2400000c
 8000b7c:	24000000 	.word	0x24000000
 8000b80:	24000008 	.word	0x24000008

08000b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	2400000c 	.word	0x2400000c
 8000ba8:	240001b4 	.word	0x240001b4

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	240001b4 	.word	0x240001b4

08000bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bcc:	f7ff ffee 	bl	8000bac <HAL_GetTick>
 8000bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bdc:	d005      	beq.n	8000bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_Delay+0x44>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4413      	add	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bea:	bf00      	nop
 8000bec:	f7ff ffde 	bl	8000bac <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d8f7      	bhi.n	8000bec <HAL_Delay+0x28>
  {
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	2400000c 	.word	0x2400000c

08000c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <__NVIC_SetPriorityGrouping+0x40>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c36:	4313      	orrs	r3, r2
 8000c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <__NVIC_SetPriorityGrouping+0x40>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00
 8000c50:	05fa0000 	.word	0x05fa0000

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db0b      	blt.n	8000c9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c82:	88fb      	ldrh	r3, [r7, #6]
 8000c84:	f003 021f 	and.w	r2, r3, #31
 8000c88:	4907      	ldr	r1, [pc, #28]	; (8000ca8 <__NVIC_EnableIRQ+0x38>)
 8000c8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	2001      	movs	r0, #1
 8000c92:	fa00 f202 	lsl.w	r2, r0, r2
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	; (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
         );
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	; 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d78:	d301      	bcc.n	8000d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00f      	b.n	8000d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <SysTick_Config+0x40>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d86:	210f      	movs	r1, #15
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f7ff ff8e 	bl	8000cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SysTick_Config+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SysTick_Config+0x40>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff29 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd0:	f7ff ff40 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000dd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	f7ff ff90 	bl	8000d00 <NVIC_EncodePriority>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff5f 	bl	8000cac <__NVIC_SetPriority>
}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff33 	bl	8000c70 <__NVIC_EnableIRQ>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ffa4 	bl	8000d68 <SysTick_Config>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000e3a:	4b86      	ldr	r3, [pc, #536]	; (8001054 <HAL_GPIO_Init+0x228>)
 8000e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e3e:	e18c      	b.n	800115a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	2101      	movs	r1, #1
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 817e 	beq.w	8001154 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d005      	beq.n	8000e70 <HAL_GPIO_Init+0x44>
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d130      	bne.n	8000ed2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	68da      	ldr	r2, [r3, #12]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	091b      	lsrs	r3, r3, #4
 8000ebc:	f003 0201 	and.w	r2, r3, #1
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	d017      	beq.n	8000f0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	2203      	movs	r2, #3
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d123      	bne.n	8000f62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	08da      	lsrs	r2, r3, #3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3208      	adds	r2, #8
 8000f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	220f      	movs	r2, #15
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	691a      	ldr	r2, [r3, #16]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	08da      	lsrs	r2, r3, #3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3208      	adds	r2, #8
 8000f5c:	69b9      	ldr	r1, [r7, #24]
 8000f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0203 	and.w	r2, r3, #3
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 80d8 	beq.w	8001154 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa4:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <HAL_GPIO_Init+0x22c>)
 8000fa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000faa:	4a2b      	ldr	r2, [pc, #172]	; (8001058 <HAL_GPIO_Init+0x22c>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <HAL_GPIO_Init+0x22c>)
 8000fb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc2:	4a26      	ldr	r2, [pc, #152]	; (800105c <HAL_GPIO_Init+0x230>)
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	3302      	adds	r3, #2
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <HAL_GPIO_Init+0x234>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d04a      	beq.n	8001084 <HAL_GPIO_Init+0x258>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <HAL_GPIO_Init+0x238>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d02b      	beq.n	800104e <HAL_GPIO_Init+0x222>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <HAL_GPIO_Init+0x23c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d025      	beq.n	800104a <HAL_GPIO_Init+0x21e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a1a      	ldr	r2, [pc, #104]	; (800106c <HAL_GPIO_Init+0x240>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d01f      	beq.n	8001046 <HAL_GPIO_Init+0x21a>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a19      	ldr	r2, [pc, #100]	; (8001070 <HAL_GPIO_Init+0x244>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d019      	beq.n	8001042 <HAL_GPIO_Init+0x216>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a18      	ldr	r2, [pc, #96]	; (8001074 <HAL_GPIO_Init+0x248>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d013      	beq.n	800103e <HAL_GPIO_Init+0x212>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a17      	ldr	r2, [pc, #92]	; (8001078 <HAL_GPIO_Init+0x24c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d00d      	beq.n	800103a <HAL_GPIO_Init+0x20e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a16      	ldr	r2, [pc, #88]	; (800107c <HAL_GPIO_Init+0x250>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0x20a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a15      	ldr	r2, [pc, #84]	; (8001080 <HAL_GPIO_Init+0x254>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d101      	bne.n	8001032 <HAL_GPIO_Init+0x206>
 800102e:	2309      	movs	r3, #9
 8001030:	e029      	b.n	8001086 <HAL_GPIO_Init+0x25a>
 8001032:	230a      	movs	r3, #10
 8001034:	e027      	b.n	8001086 <HAL_GPIO_Init+0x25a>
 8001036:	2307      	movs	r3, #7
 8001038:	e025      	b.n	8001086 <HAL_GPIO_Init+0x25a>
 800103a:	2306      	movs	r3, #6
 800103c:	e023      	b.n	8001086 <HAL_GPIO_Init+0x25a>
 800103e:	2305      	movs	r3, #5
 8001040:	e021      	b.n	8001086 <HAL_GPIO_Init+0x25a>
 8001042:	2304      	movs	r3, #4
 8001044:	e01f      	b.n	8001086 <HAL_GPIO_Init+0x25a>
 8001046:	2303      	movs	r3, #3
 8001048:	e01d      	b.n	8001086 <HAL_GPIO_Init+0x25a>
 800104a:	2302      	movs	r3, #2
 800104c:	e01b      	b.n	8001086 <HAL_GPIO_Init+0x25a>
 800104e:	2301      	movs	r3, #1
 8001050:	e019      	b.n	8001086 <HAL_GPIO_Init+0x25a>
 8001052:	bf00      	nop
 8001054:	58000080 	.word	0x58000080
 8001058:	58024400 	.word	0x58024400
 800105c:	58000400 	.word	0x58000400
 8001060:	58020000 	.word	0x58020000
 8001064:	58020400 	.word	0x58020400
 8001068:	58020800 	.word	0x58020800
 800106c:	58020c00 	.word	0x58020c00
 8001070:	58021000 	.word	0x58021000
 8001074:	58021400 	.word	0x58021400
 8001078:	58021800 	.word	0x58021800
 800107c:	58021c00 	.word	0x58021c00
 8001080:	58022400 	.word	0x58022400
 8001084:	2300      	movs	r3, #0
 8001086:	69fa      	ldr	r2, [r7, #28]
 8001088:	f002 0203 	and.w	r2, r2, #3
 800108c:	0092      	lsls	r2, r2, #2
 800108e:	4093      	lsls	r3, r2
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001096:	4938      	ldr	r1, [pc, #224]	; (8001178 <HAL_GPIO_Init+0x34c>)
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	3302      	adds	r3, #2
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80010ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80010d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80010f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	3301      	adds	r3, #1
 8001158:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	f47f ae6b 	bne.w	8000e40 <HAL_GPIO_Init+0x14>
  }
}
 800116a:	bf00      	nop
 800116c:	bf00      	nop
 800116e:	3724      	adds	r7, #36	; 0x24
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	58000400 	.word	0x58000400

0800117c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]
 8001188:	4613      	mov	r3, r2
 800118a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800118c:	787b      	ldrb	r3, [r7, #1]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001198:	e003      	b.n	80011a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	041a      	lsls	r2, r3, #16
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	619a      	str	r2, [r3, #24]
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b0:	b08f      	sub	sp, #60	; 0x3c
 80011b2:	af0a      	add	r7, sp, #40	; 0x28
 80011b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e116      	b.n	80013ee <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d106      	bne.n	80011e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f006 ff0a 	bl	8007ff4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2203      	movs	r2, #3
 80011e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d102      	bne.n	80011fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 fb81 	bl	8004906 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	687e      	ldr	r6, [r7, #4]
 800120c:	466d      	mov	r5, sp
 800120e:	f106 0410 	add.w	r4, r6, #16
 8001212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800121a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800121e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001222:	1d33      	adds	r3, r6, #4
 8001224:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001226:	6838      	ldr	r0, [r7, #0]
 8001228:	f003 fa4c 	bl	80046c4 <USB_CoreInit>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d005      	beq.n	800123e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2202      	movs	r2, #2
 8001236:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e0d7      	b.n	80013ee <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f003 fb6f 	bl	8004928 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	e04a      	b.n	80012e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	4413      	add	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	333d      	adds	r3, #61	; 0x3d
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	333c      	adds	r3, #60	; 0x3c
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	b298      	uxth	r0, r3
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	3344      	adds	r3, #68	; 0x44
 800128c:	4602      	mov	r2, r0
 800128e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4413      	add	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	3340      	adds	r3, #64	; 0x40
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	4413      	add	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	3348      	adds	r3, #72	; 0x48
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012b8:	7bfa      	ldrb	r2, [r7, #15]
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	4413      	add	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	334c      	adds	r3, #76	; 0x4c
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4413      	add	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	3354      	adds	r3, #84	; 0x54
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	3301      	adds	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d3af      	bcc.n	8001250 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	e044      	b.n	8001380 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800131e:	7bfa      	ldrb	r2, [r7, #15]
 8001320:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001322:	7bfa      	ldrb	r2, [r7, #15]
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4413      	add	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	440b      	add	r3, r1
 8001330:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	440b      	add	r3, r1
 800135c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4413      	add	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	3301      	adds	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	7bfa      	ldrb	r2, [r7, #15]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	429a      	cmp	r2, r3
 8001388:	d3b5      	bcc.n	80012f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	687e      	ldr	r6, [r7, #4]
 8001392:	466d      	mov	r5, sp
 8001394:	f106 0410 	add.w	r4, r6, #16
 8001398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800139c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80013a8:	1d33      	adds	r3, r6, #4
 80013aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ac:	6838      	ldr	r0, [r7, #0]
 80013ae:	f003 fb07 	bl	80049c0 <USB_DevInit>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d005      	beq.n	80013c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2202      	movs	r2, #2
 80013bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e014      	b.n	80013ee <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d102      	bne.n	80013e2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f001 f98b 	bl	80026f8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 fc55 	bl	8005c96 <USB_DevDisconnect>

  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b084      	sub	sp, #16
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800140a:	2b01      	cmp	r3, #1
 800140c:	d101      	bne.n	8001412 <HAL_PCD_Start+0x1c>
 800140e:	2302      	movs	r3, #2
 8001410:	e020      	b.n	8001454 <HAL_PCD_Start+0x5e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141e:	2b01      	cmp	r3, #1
 8001420:	d109      	bne.n	8001436 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001426:	2b01      	cmp	r3, #1
 8001428:	d005      	beq.n	8001436 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f003 fa52 	bl	80048e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f004 fc05 	bl	8005c54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b08d      	sub	sp, #52	; 0x34
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f004 fcc3 	bl	8005dfe <USB_GetMode>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	f040 84b7 	bne.w	8001dee <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f004 fc27 	bl	8005cd8 <USB_ReadInterrupts>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 84ad 	beq.w	8001dec <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	0a1b      	lsrs	r3, r3, #8
 800149c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f004 fc14 	bl	8005cd8 <USB_ReadInterrupts>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d107      	bne.n	80014ca <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	695a      	ldr	r2, [r3, #20]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f002 0202 	and.w	r2, r2, #2
 80014c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f004 fc02 	bl	8005cd8 <USB_ReadInterrupts>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	2b10      	cmp	r3, #16
 80014dc:	d161      	bne.n	80015a2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	699a      	ldr	r2, [r3, #24]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0210 	bic.w	r2, r2, #16
 80014ec:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	f003 020f 	and.w	r2, r3, #15
 80014fa:	4613      	mov	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	4413      	add	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	3304      	adds	r3, #4
 800150c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	0c5b      	lsrs	r3, r3, #17
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	2b02      	cmp	r3, #2
 8001518:	d124      	bne.n	8001564 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001520:	4013      	ands	r3, r2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d035      	beq.n	8001592 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	091b      	lsrs	r3, r3, #4
 800152e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001530:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001534:	b29b      	uxth	r3, r3
 8001536:	461a      	mov	r2, r3
 8001538:	6a38      	ldr	r0, [r7, #32]
 800153a:	f004 fa39 	bl	80059b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800154a:	441a      	add	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	6a1a      	ldr	r2, [r3, #32]
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	091b      	lsrs	r3, r3, #4
 8001558:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800155c:	441a      	add	r2, r3
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	621a      	str	r2, [r3, #32]
 8001562:	e016      	b.n	8001592 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	0c5b      	lsrs	r3, r3, #17
 8001568:	f003 030f 	and.w	r3, r3, #15
 800156c:	2b06      	cmp	r3, #6
 800156e:	d110      	bne.n	8001592 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001576:	2208      	movs	r2, #8
 8001578:	4619      	mov	r1, r3
 800157a:	6a38      	ldr	r0, [r7, #32]
 800157c:	f004 fa18 	bl	80059b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	6a1a      	ldr	r2, [r3, #32]
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800158c:	441a      	add	r2, r3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	699a      	ldr	r2, [r3, #24]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0210 	orr.w	r2, r2, #16
 80015a0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f004 fb96 	bl	8005cd8 <USB_ReadInterrupts>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015b6:	f040 80a7 	bne.w	8001708 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f004 fb9b 	bl	8005cfe <USB_ReadDevAllOutEpInterrupt>
 80015c8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80015ca:	e099      	b.n	8001700 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80015cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 808e 	beq.w	80016f4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 fbbf 	bl	8005d66 <USB_ReadDevOutEPInterrupt>
 80015e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00c      	beq.n	800160e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	015a      	lsls	r2, r3, #5
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	4413      	add	r3, r2
 80015fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001600:	461a      	mov	r2, r3
 8001602:	2301      	movs	r3, #1
 8001604:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001606:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 feef 	bl	80023ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00c      	beq.n	8001632 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	015a      	lsls	r2, r3, #5
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	4413      	add	r3, r2
 8001620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001624:	461a      	mov	r2, r3
 8001626:	2308      	movs	r3, #8
 8001628:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800162a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 ffc5 	bl	80025bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	2b00      	cmp	r3, #0
 800163a:	d008      	beq.n	800164e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	015a      	lsls	r2, r3, #5
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	4413      	add	r3, r2
 8001644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001648:	461a      	mov	r2, r3
 800164a:	2310      	movs	r3, #16
 800164c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d030      	beq.n	80016ba <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001660:	2b80      	cmp	r3, #128	; 0x80
 8001662:	d109      	bne.n	8001678 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	69fa      	ldr	r2, [r7, #28]
 800166e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001676:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800167a:	4613      	mov	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4413      	add	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	3304      	adds	r3, #4
 800168c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	78db      	ldrb	r3, [r3, #3]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d108      	bne.n	80016a8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2200      	movs	r2, #0
 800169a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	4619      	mov	r1, r3
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f006 fdca 	bl	800823c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	015a      	lsls	r2, r3, #5
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	4413      	add	r3, r2
 80016b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016b4:	461a      	mov	r2, r3
 80016b6:	2302      	movs	r3, #2
 80016b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	f003 0320 	and.w	r3, r3, #32
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d008      	beq.n	80016d6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	015a      	lsls	r2, r3, #5
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016d0:	461a      	mov	r2, r3
 80016d2:	2320      	movs	r3, #32
 80016d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d009      	beq.n	80016f4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	015a      	lsls	r2, r3, #5
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	4413      	add	r3, r2
 80016e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ec:	461a      	mov	r2, r3
 80016ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	3301      	adds	r3, #1
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fc:	085b      	lsrs	r3, r3, #1
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001702:	2b00      	cmp	r3, #0
 8001704:	f47f af62 	bne.w	80015cc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f004 fae3 	bl	8005cd8 <USB_ReadInterrupts>
 8001712:	4603      	mov	r3, r0
 8001714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001718:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800171c:	f040 80db 	bne.w	80018d6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f004 fb04 	bl	8005d32 <USB_ReadDevAllInEpInterrupt>
 800172a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001730:	e0cd      	b.n	80018ce <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80c2 	beq.w	80018c2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f004 fb2a 	bl	8005da2 <USB_ReadDevInEPInterrupt>
 800174e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d057      	beq.n	800180a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	f003 030f 	and.w	r3, r3, #15
 8001760:	2201      	movs	r2, #1
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800176e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	43db      	mvns	r3, r3
 8001774:	69f9      	ldr	r1, [r7, #28]
 8001776:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800177a:	4013      	ands	r3, r2
 800177c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	015a      	lsls	r2, r3, #5
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	4413      	add	r3, r2
 8001786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800178a:	461a      	mov	r2, r3
 800178c:	2301      	movs	r3, #1
 800178e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d132      	bne.n	80017fe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800179c:	4613      	mov	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	334c      	adds	r3, #76	; 0x4c
 80017a8:	6819      	ldr	r1, [r3, #0]
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ae:	4613      	mov	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4413      	add	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4403      	add	r3, r0
 80017b8:	3348      	adds	r3, #72	; 0x48
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4419      	add	r1, r3
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c2:	4613      	mov	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4413      	add	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4403      	add	r3, r0
 80017cc:	334c      	adds	r3, #76	; 0x4c
 80017ce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d113      	bne.n	80017fe <HAL_PCD_IRQHandler+0x3a2>
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017da:	4613      	mov	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	3354      	adds	r3, #84	; 0x54
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d108      	bne.n	80017fe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80017f6:	461a      	mov	r2, r3
 80017f8:	2101      	movs	r1, #1
 80017fa:	f004 fb33 	bl	8005e64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4619      	mov	r1, r3
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f006 fc94 	bl	8008132 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	015a      	lsls	r2, r3, #5
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	4413      	add	r3, r2
 800181c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001820:	461a      	mov	r2, r3
 8001822:	2308      	movs	r3, #8
 8001824:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	2b00      	cmp	r3, #0
 800182e:	d008      	beq.n	8001842 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	015a      	lsls	r2, r3, #5
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	4413      	add	r3, r2
 8001838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800183c:	461a      	mov	r2, r3
 800183e:	2310      	movs	r3, #16
 8001840:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001848:	2b00      	cmp	r3, #0
 800184a:	d008      	beq.n	800185e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	015a      	lsls	r2, r3, #5
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	4413      	add	r3, r2
 8001854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001858:	461a      	mov	r2, r3
 800185a:	2340      	movs	r3, #64	; 0x40
 800185c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d023      	beq.n	80018b0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800186a:	6a38      	ldr	r0, [r7, #32]
 800186c:	f003 fa06 	bl	8004c7c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001872:	4613      	mov	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	3338      	adds	r3, #56	; 0x38
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	4413      	add	r3, r2
 8001880:	3304      	adds	r3, #4
 8001882:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	78db      	ldrb	r3, [r3, #3]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d108      	bne.n	800189e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	2200      	movs	r2, #0
 8001890:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	b2db      	uxtb	r3, r3
 8001896:	4619      	mov	r1, r3
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f006 fce1 	bl	8008260 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	015a      	lsls	r2, r3, #5
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	4413      	add	r3, r2
 80018a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018aa:	461a      	mov	r2, r3
 80018ac:	2302      	movs	r3, #2
 80018ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80018ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 fd08 	bl	80022d2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	3301      	adds	r3, #1
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ca:	085b      	lsrs	r3, r3, #1
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f47f af2e 	bne.w	8001732 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f004 f9fc 	bl	8005cd8 <USB_ReadInterrupts>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018ea:	d122      	bne.n	8001932 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018fa:	f023 0301 	bic.w	r3, r3, #1
 80018fe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001906:	2b01      	cmp	r3, #1
 8001908:	d108      	bne.n	800191c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001912:	2100      	movs	r1, #0
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 ff13 	bl	8002740 <HAL_PCDEx_LPM_Callback>
 800191a:	e002      	b.n	8001922 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f006 fc7f 	bl	8008220 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	695a      	ldr	r2, [r3, #20]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001930:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f004 f9ce 	bl	8005cd8 <USB_ReadInterrupts>
 800193c:	4603      	mov	r3, r0
 800193e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001946:	d112      	bne.n	800196e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b01      	cmp	r3, #1
 8001956:	d102      	bne.n	800195e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f006 fc3b 	bl	80081d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800196c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f004 f9b0 	bl	8005cd8 <USB_ReadInterrupts>
 8001978:	4603      	mov	r3, r0
 800197a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800197e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001982:	d121      	bne.n	80019c8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001992:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800199a:	2b00      	cmp	r3, #0
 800199c:	d111      	bne.n	80019c2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	f003 020f 	and.w	r2, r3, #15
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80019b8:	2101      	movs	r1, #1
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 fec0 	bl	8002740 <HAL_PCDEx_LPM_Callback>
 80019c0:	e002      	b.n	80019c8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f006 fc06 	bl	80081d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f004 f983 	bl	8005cd8 <USB_ReadInterrupts>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019dc:	f040 80b7 	bne.w	8001b4e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ee:	f023 0301 	bic.w	r3, r3, #1
 80019f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2110      	movs	r1, #16
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 f93e 	bl	8004c7c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a00:	2300      	movs	r3, #0
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a04:	e046      	b.n	8001a94 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a08:	015a      	lsls	r2, r3, #5
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a12:	461a      	mov	r2, r3
 8001a14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1c:	015a      	lsls	r2, r3, #5
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	4413      	add	r3, r2
 8001a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a2a:	0151      	lsls	r1, r2, #5
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	440a      	add	r2, r1
 8001a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3c:	015a      	lsls	r2, r3, #5
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	4413      	add	r3, r2
 8001a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a46:	461a      	mov	r2, r3
 8001a48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a50:	015a      	lsls	r2, r3, #5
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a5e:	0151      	lsls	r1, r2, #5
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	440a      	add	r2, r1
 8001a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a70:	015a      	lsls	r2, r3, #5
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	4413      	add	r3, r2
 8001a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a7e:	0151      	lsls	r1, r2, #5
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	440a      	add	r2, r1
 8001a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a90:	3301      	adds	r3, #1
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d3b3      	bcc.n	8001a06 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001ab0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d016      	beq.n	8001ae8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ac4:	69fa      	ldr	r2, [r7, #28]
 8001ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aca:	f043 030b 	orr.w	r3, r3, #11
 8001ace:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ae0:	f043 030b 	orr.w	r3, r3, #11
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	e015      	b.n	8001b14 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001af6:	4619      	mov	r1, r3
 8001af8:	f242 032b 	movw	r3, #8235	; 0x202b
 8001afc:	4313      	orrs	r3, r2
 8001afe:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	69fa      	ldr	r2, [r7, #28]
 8001b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b0e:	f043 030b 	orr.w	r3, r3, #11
 8001b12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6818      	ldr	r0, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b38:	461a      	mov	r2, r3
 8001b3a:	f004 f993 	bl	8005e64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f004 f8c0 	bl	8005cd8 <USB_ReadInterrupts>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b62:	d124      	bne.n	8001bae <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f004 f957 	bl	8005e1c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 f8ff 	bl	8004d76 <USB_GetDevSpeed>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681c      	ldr	r4, [r3, #0]
 8001b84:	f001 fd10 	bl	80035a8 <HAL_RCC_GetHCLKFreq>
 8001b88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	4620      	mov	r0, r4
 8001b94:	f002 fe04 	bl	80047a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f006 faf2 	bl	8008182 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695a      	ldr	r2, [r3, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f004 f890 	bl	8005cd8 <USB_ReadInterrupts>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d10a      	bne.n	8001bd8 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f006 facf 	bl	8008166 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	695a      	ldr	r2, [r3, #20]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f002 0208 	and.w	r2, r2, #8
 8001bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f004 f87b 	bl	8005cd8 <USB_ReadInterrupts>
 8001be2:	4603      	mov	r3, r0
 8001be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be8:	2b80      	cmp	r3, #128	; 0x80
 8001bea:	d122      	bne.n	8001c32 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfc:	e014      	b.n	8001c28 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c02:	4613      	mov	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d105      	bne.n	8001c22 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 fb27 	bl	8002270 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	3301      	adds	r3, #1
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d3e5      	bcc.n	8001bfe <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f004 f84e 	bl	8005cd8 <USB_ReadInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c46:	d13b      	bne.n	8001cc0 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c48:	2301      	movs	r3, #1
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4c:	e02b      	b.n	8001ca6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c62:	4613      	mov	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	3340      	adds	r3, #64	; 0x40
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d115      	bne.n	8001ca0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001c74:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	da12      	bge.n	8001ca0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	333f      	adds	r3, #63	; 0x3f
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	4619      	mov	r1, r3
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 fae8 	bl	8002270 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d3ce      	bcc.n	8001c4e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695a      	ldr	r2, [r3, #20]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001cbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f004 f807 	bl	8005cd8 <USB_ReadInterrupts>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cd4:	d155      	bne.n	8001d82 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cda:	e045      	b.n	8001d68 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	015a      	lsls	r2, r3, #5
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d12e      	bne.n	8001d62 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d04:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	da2b      	bge.n	8001d62 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001d16:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d121      	bne.n	8001d62 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d22:	4613      	mov	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d30:	2201      	movs	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10a      	bne.n	8001d62 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d5e:	6053      	str	r3, [r2, #4]
            break;
 8001d60:	e007      	b.n	8001d72 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	3301      	adds	r3, #1
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d3b4      	bcc.n	8001cdc <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695a      	ldr	r2, [r3, #20]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001d80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f003 ffa6 	bl	8005cd8 <USB_ReadInterrupts>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d96:	d10a      	bne.n	8001dae <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f006 fa73 	bl	8008284 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001dac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 ff90 	bl	8005cd8 <USB_ReadInterrupts>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d115      	bne.n	8001dee <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f006 fa63 	bl	80082a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6859      	ldr	r1, [r3, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	e000      	b.n	8001dee <HAL_PCD_IRQHandler+0x992>
      return;
 8001dec:	bf00      	nop
    }
  }
}
 8001dee:	3734      	adds	r7, #52	; 0x34
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd90      	pop	{r4, r7, pc}

08001df4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_PCD_SetAddress+0x1a>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e013      	b.n	8001e36 <HAL_PCD_SetAddress+0x42>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	78fa      	ldrb	r2, [r7, #3]
 8001e24:	4611      	mov	r1, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f003 feee 	bl	8005c08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	4608      	mov	r0, r1
 8001e48:	4611      	mov	r1, r2
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	70fb      	strb	r3, [r7, #3]
 8001e50:	460b      	mov	r3, r1
 8001e52:	803b      	strh	r3, [r7, #0]
 8001e54:	4613      	mov	r3, r2
 8001e56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	da0f      	bge.n	8001e84 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	f003 020f 	and.w	r2, r3, #15
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	3338      	adds	r3, #56	; 0x38
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	4413      	add	r3, r2
 8001e78:	3304      	adds	r3, #4
 8001e7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	705a      	strb	r2, [r3, #1]
 8001e82:	e00f      	b.n	8001ea4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	f003 020f 	and.w	r2, r3, #15
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001eb0:	883a      	ldrh	r2, [r7, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	78ba      	ldrb	r2, [r7, #2]
 8001eba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	785b      	ldrb	r3, [r3, #1]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ece:	78bb      	ldrb	r3, [r7, #2]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d102      	bne.n	8001eda <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d101      	bne.n	8001ee8 <HAL_PCD_EP_Open+0xaa>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e00e      	b.n	8001f06 <HAL_PCD_EP_Open+0xc8>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68f9      	ldr	r1, [r7, #12]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f002 ff62 	bl	8004dc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001f04:	7afb      	ldrb	r3, [r7, #11]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	da0f      	bge.n	8001f42 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	f003 020f 	and.w	r2, r3, #15
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	3338      	adds	r3, #56	; 0x38
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	3304      	adds	r3, #4
 8001f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	705a      	strb	r2, [r3, #1]
 8001f40:	e00f      	b.n	8001f62 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	f003 020f 	and.w	r2, r3, #15
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	3304      	adds	r3, #4
 8001f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_PCD_EP_Close+0x6e>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e00e      	b.n	8001f9a <HAL_PCD_EP_Close+0x8c>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68f9      	ldr	r1, [r7, #12]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f002 ffa0 	bl	8004ed0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b086      	sub	sp, #24
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	f003 020f 	and.w	r2, r3, #15
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3304      	adds	r3, #4
 8001fca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe4:	7afb      	ldrb	r3, [r7, #11]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d102      	bne.n	8001ffe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ffe:	7afb      	ldrb	r3, [r7, #11]
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	2b00      	cmp	r3, #0
 8002006:	d109      	bne.n	800201c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	461a      	mov	r2, r3
 8002014:	6979      	ldr	r1, [r7, #20]
 8002016:	f003 fa87 	bl	8005528 <USB_EP0StartXfer>
 800201a:	e008      	b.n	800202e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	6979      	ldr	r1, [r7, #20]
 800202a:	f003 f82d 	bl	8005088 <USB_EPStartXfer>
  }

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	f003 020f 	and.w	r2, r3, #15
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800205a:	681b      	ldr	r3, [r3, #0]
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	460b      	mov	r3, r1
 8002076:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002078:	7afb      	ldrb	r3, [r7, #11]
 800207a:	f003 020f 	and.w	r2, r3, #15
 800207e:	4613      	mov	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	3338      	adds	r3, #56	; 0x38
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4413      	add	r3, r2
 800208c:	3304      	adds	r3, #4
 800208e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2200      	movs	r2, #0
 80020a0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2201      	movs	r2, #1
 80020a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020a8:	7afb      	ldrb	r3, [r7, #11]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d102      	bne.n	80020c2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020c2:	7afb      	ldrb	r3, [r7, #11]
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d109      	bne.n	80020e0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	6979      	ldr	r1, [r7, #20]
 80020da:	f003 fa25 	bl	8005528 <USB_EP0StartXfer>
 80020de:	e008      	b.n	80020f2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	6979      	ldr	r1, [r7, #20]
 80020ee:	f002 ffcb 	bl	8005088 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	f003 020f 	and.w	r2, r3, #15
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	429a      	cmp	r2, r3
 8002114:	d901      	bls.n	800211a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e050      	b.n	80021bc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800211a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800211e:	2b00      	cmp	r3, #0
 8002120:	da0f      	bge.n	8002142 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	f003 020f 	and.w	r2, r3, #15
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	3338      	adds	r3, #56	; 0x38
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	3304      	adds	r3, #4
 8002138:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	705a      	strb	r2, [r3, #1]
 8002140:	e00d      	b.n	800215e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	4413      	add	r3, r2
 8002154:	3304      	adds	r3, #4
 8002156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	b2da      	uxtb	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_PCD_EP_SetStall+0x82>
 800217a:	2302      	movs	r3, #2
 800217c:	e01e      	b.n	80021bc <HAL_PCD_EP_SetStall+0xc0>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68f9      	ldr	r1, [r7, #12]
 800218c:	4618      	mov	r0, r3
 800218e:	f003 fc67 	bl	8005a60 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10a      	bne.n	80021b2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	b2d9      	uxtb	r1, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021ac:	461a      	mov	r2, r3
 80021ae:	f003 fe59 	bl	8005e64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	f003 020f 	and.w	r2, r3, #15
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d901      	bls.n	80021e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e042      	b.n	8002268 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	da0f      	bge.n	800220a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	f003 020f 	and.w	r2, r3, #15
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	3338      	adds	r3, #56	; 0x38
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	3304      	adds	r3, #4
 8002200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	705a      	strb	r2, [r3, #1]
 8002208:	e00f      	b.n	800222a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	f003 020f 	and.w	r2, r3, #15
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	4413      	add	r3, r2
 8002220:	3304      	adds	r3, #4
 8002222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	b2da      	uxtb	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_PCD_EP_ClrStall+0x86>
 8002246:	2302      	movs	r3, #2
 8002248:	e00e      	b.n	8002268 <HAL_PCD_EP_ClrStall+0xa4>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68f9      	ldr	r1, [r7, #12]
 8002258:	4618      	mov	r0, r3
 800225a:	f003 fc6f 	bl	8005b3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800227c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002280:	2b00      	cmp	r3, #0
 8002282:	da0c      	bge.n	800229e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	f003 020f 	and.w	r2, r3, #15
 800228a:	4613      	mov	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	3338      	adds	r3, #56	; 0x38
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	4413      	add	r3, r2
 8002298:	3304      	adds	r3, #4
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	e00c      	b.n	80022b8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	f003 020f 	and.w	r2, r3, #15
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	3304      	adds	r3, #4
 80022b6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68f9      	ldr	r1, [r7, #12]
 80022be:	4618      	mov	r0, r3
 80022c0:	f003 fa8e 	bl	80057e0 <USB_EPStopXfer>
 80022c4:	4603      	mov	r3, r0
 80022c6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80022c8:	7afb      	ldrb	r3, [r7, #11]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b08a      	sub	sp, #40	; 0x28
 80022d6:	af02      	add	r7, sp, #8
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	3338      	adds	r3, #56	; 0x38
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	3304      	adds	r3, #4
 80022f8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a1a      	ldr	r2, [r3, #32]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	429a      	cmp	r2, r3
 8002304:	d901      	bls.n	800230a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e06c      	b.n	80023e4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	699a      	ldr	r2, [r3, #24]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	429a      	cmp	r2, r3
 800231e:	d902      	bls.n	8002326 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3303      	adds	r3, #3
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800232e:	e02b      	b.n	8002388 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	699a      	ldr	r2, [r3, #24]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	429a      	cmp	r2, r3
 8002344:	d902      	bls.n	800234c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	3303      	adds	r3, #3
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6919      	ldr	r1, [r3, #16]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002364:	b2db      	uxtb	r3, r3
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	4603      	mov	r3, r0
 800236a:	6978      	ldr	r0, [r7, #20]
 800236c:	f003 fae2 	bl	8005934 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	441a      	add	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a1a      	ldr	r2, [r3, #32]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	441a      	add	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4413      	add	r3, r2
 8002390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	b29b      	uxth	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	429a      	cmp	r2, r3
 800239c:	d809      	bhi.n	80023b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a1a      	ldr	r2, [r3, #32]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d203      	bcs.n	80023b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1be      	bne.n	8002330 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	699a      	ldr	r2, [r3, #24]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d811      	bhi.n	80023e2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	2201      	movs	r2, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	6939      	ldr	r1, [r7, #16]
 80023da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023de:	4013      	ands	r3, r2
 80023e0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3720      	adds	r7, #32
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	333c      	adds	r3, #60	; 0x3c
 8002404:	3304      	adds	r3, #4
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	015a      	lsls	r2, r3, #5
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	4413      	add	r3, r2
 8002412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d17b      	bne.n	800251a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d015      	beq.n	8002458 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	4a61      	ldr	r2, [pc, #388]	; (80025b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	f240 80b9 	bls.w	80025a8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80b3 	beq.w	80025a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	4413      	add	r3, r2
 800244a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800244e:	461a      	mov	r2, r3
 8002450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002454:	6093      	str	r3, [r2, #8]
 8002456:	e0a7      	b.n	80025a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	f003 0320 	and.w	r3, r3, #32
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4413      	add	r3, r2
 800246a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246e:	461a      	mov	r2, r3
 8002470:	2320      	movs	r3, #32
 8002472:	6093      	str	r3, [r2, #8]
 8002474:	e098      	b.n	80025a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800247c:	2b00      	cmp	r3, #0
 800247e:	f040 8093 	bne.w	80025a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	4a4b      	ldr	r2, [pc, #300]	; (80025b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d90f      	bls.n	80024aa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00a      	beq.n	80024aa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	4413      	add	r3, r2
 800249c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a0:	461a      	mov	r2, r3
 80024a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024a6:	6093      	str	r3, [r2, #8]
 80024a8:	e07e      	b.n	80025a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	4413      	add	r3, r2
 80024bc:	3304      	adds	r3, #4
 80024be:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	69da      	ldr	r2, [r3, #28]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	0159      	lsls	r1, r3, #5
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	440b      	add	r3, r1
 80024cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d6:	1ad2      	subs	r2, r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d114      	bne.n	800250c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024f4:	461a      	mov	r2, r3
 80024f6:	2101      	movs	r1, #1
 80024f8:	f003 fcb4 	bl	8005e64 <USB_EP0_OutStart>
 80024fc:	e006      	b.n	800250c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	441a      	add	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2db      	uxtb	r3, r3
 8002510:	4619      	mov	r1, r3
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f005 fdf2 	bl	80080fc <HAL_PCD_DataOutStageCallback>
 8002518:	e046      	b.n	80025a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	4a26      	ldr	r2, [pc, #152]	; (80025b8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d124      	bne.n	800256c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	4413      	add	r3, r2
 8002534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002538:	461a      	mov	r2, r3
 800253a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800253e:	6093      	str	r3, [r2, #8]
 8002540:	e032      	b.n	80025a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	4413      	add	r3, r2
 8002554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002558:	461a      	mov	r2, r3
 800255a:	2320      	movs	r3, #32
 800255c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	4619      	mov	r1, r3
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f005 fdc9 	bl	80080fc <HAL_PCD_DataOutStageCallback>
 800256a:	e01d      	b.n	80025a8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d114      	bne.n	800259c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d108      	bne.n	800259c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002594:	461a      	mov	r2, r3
 8002596:	2100      	movs	r1, #0
 8002598:	f003 fc64 	bl	8005e64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	4619      	mov	r1, r3
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f005 fdaa 	bl	80080fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3720      	adds	r7, #32
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	4f54300a 	.word	0x4f54300a
 80025b8:	4f54310a 	.word	0x4f54310a

080025bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	333c      	adds	r3, #60	; 0x3c
 80025d4:	3304      	adds	r3, #4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4a15      	ldr	r2, [pc, #84]	; (8002644 <PCD_EP_OutSetupPacket_int+0x88>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d90e      	bls.n	8002610 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d009      	beq.n	8002610 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4413      	add	r3, r2
 8002604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002608:	461a      	mov	r2, r3
 800260a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800260e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f005 fd61 	bl	80080d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <PCD_EP_OutSetupPacket_int+0x88>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d90c      	bls.n	8002638 <PCD_EP_OutSetupPacket_int+0x7c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d108      	bne.n	8002638 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002630:	461a      	mov	r2, r3
 8002632:	2101      	movs	r1, #1
 8002634:	f003 fc16 	bl	8005e64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	4f54300a 	.word	0x4f54300a

08002648 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	70fb      	strb	r3, [r7, #3]
 8002654:	4613      	mov	r3, r2
 8002656:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d107      	bne.n	8002676 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002666:	883b      	ldrh	r3, [r7, #0]
 8002668:	0419      	lsls	r1, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	430a      	orrs	r2, r1
 8002672:	629a      	str	r2, [r3, #40]	; 0x28
 8002674:	e028      	b.n	80026c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	0c1b      	lsrs	r3, r3, #16
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	4413      	add	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002684:	2300      	movs	r3, #0
 8002686:	73fb      	strb	r3, [r7, #15]
 8002688:	e00d      	b.n	80026a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	3340      	adds	r3, #64	; 0x40
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	0c1b      	lsrs	r3, r3, #16
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	4413      	add	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	3301      	adds	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d3ec      	bcc.n	800268a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80026b0:	883b      	ldrh	r3, [r7, #0]
 80026b2:	0418      	lsls	r0, r3, #16
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6819      	ldr	r1, [r3, #0]
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	4302      	orrs	r2, r0
 80026c0:	3340      	adds	r3, #64	; 0x40
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	460b      	mov	r3, r1
 80026e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	887a      	ldrh	r2, [r7, #2]
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002726:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_PCDEx_ActivateLPM+0x44>)
 8002728:	4313      	orrs	r3, r2
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	10000003 	.word	0x10000003

08002740 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002760:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <HAL_PWREx_ConfigSupply+0x70>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b04      	cmp	r3, #4
 800276a:	d00a      	beq.n	8002782 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800276c:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <HAL_PWREx_ConfigSupply+0x70>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	429a      	cmp	r2, r3
 8002778:	d001      	beq.n	800277e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e01f      	b.n	80027be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	e01d      	b.n	80027be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002782:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <HAL_PWREx_ConfigSupply+0x70>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f023 0207 	bic.w	r2, r3, #7
 800278a:	490f      	ldr	r1, [pc, #60]	; (80027c8 <HAL_PWREx_ConfigSupply+0x70>)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4313      	orrs	r3, r2
 8002790:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002792:	f7fe fa0b 	bl	8000bac <HAL_GetTick>
 8002796:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002798:	e009      	b.n	80027ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800279a:	f7fe fa07 	bl	8000bac <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027a8:	d901      	bls.n	80027ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e007      	b.n	80027be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_PWREx_ConfigSupply+0x70>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ba:	d1ee      	bne.n	800279a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	58024800 	.word	0x58024800

080027cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80027d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027da:	60d3      	str	r3, [r2, #12]
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	58024800 	.word	0x58024800

080027ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08c      	sub	sp, #48	; 0x30
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e39d      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 8087 	beq.w	800291a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800280c:	4b88      	ldr	r3, [pc, #544]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002814:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002816:	4b86      	ldr	r3, [pc, #536]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800281c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281e:	2b10      	cmp	r3, #16
 8002820:	d007      	beq.n	8002832 <HAL_RCC_OscConfig+0x46>
 8002822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002824:	2b18      	cmp	r3, #24
 8002826:	d110      	bne.n	800284a <HAL_RCC_OscConfig+0x5e>
 8002828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d10b      	bne.n	800284a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002832:	4b7f      	ldr	r3, [pc, #508]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d06c      	beq.n	8002918 <HAL_RCC_OscConfig+0x12c>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d168      	bne.n	8002918 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e377      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002852:	d106      	bne.n	8002862 <HAL_RCC_OscConfig+0x76>
 8002854:	4b76      	ldr	r3, [pc, #472]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a75      	ldr	r2, [pc, #468]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 800285a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	e02e      	b.n	80028c0 <HAL_RCC_OscConfig+0xd4>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x98>
 800286a:	4b71      	ldr	r3, [pc, #452]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a70      	ldr	r2, [pc, #448]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 8002870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b6e      	ldr	r3, [pc, #440]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a6d      	ldr	r2, [pc, #436]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 800287c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e01d      	b.n	80028c0 <HAL_RCC_OscConfig+0xd4>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800288c:	d10c      	bne.n	80028a8 <HAL_RCC_OscConfig+0xbc>
 800288e:	4b68      	ldr	r3, [pc, #416]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a67      	ldr	r2, [pc, #412]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 8002894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	4b65      	ldr	r3, [pc, #404]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a64      	ldr	r2, [pc, #400]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	e00b      	b.n	80028c0 <HAL_RCC_OscConfig+0xd4>
 80028a8:	4b61      	ldr	r3, [pc, #388]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a60      	ldr	r2, [pc, #384]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 80028ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	4b5e      	ldr	r3, [pc, #376]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a5d      	ldr	r2, [pc, #372]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 80028ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d013      	beq.n	80028f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7fe f970 	bl	8000bac <HAL_GetTick>
 80028cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d0:	f7fe f96c 	bl	8000bac <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b64      	cmp	r3, #100	; 0x64
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e32b      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028e2:	4b53      	ldr	r3, [pc, #332]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0xe4>
 80028ee:	e014      	b.n	800291a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe f95c 	bl	8000bac <HAL_GetTick>
 80028f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f8:	f7fe f958 	bl	8000bac <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e317      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800290a:	4b49      	ldr	r3, [pc, #292]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x10c>
 8002916:	e000      	b.n	800291a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 808c 	beq.w	8002a40 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002928:	4b41      	ldr	r3, [pc, #260]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002930:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002932:	4b3f      	ldr	r3, [pc, #252]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d007      	beq.n	800294e <HAL_RCC_OscConfig+0x162>
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	2b18      	cmp	r3, #24
 8002942:	d137      	bne.n	80029b4 <HAL_RCC_OscConfig+0x1c8>
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d132      	bne.n	80029b4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800294e:	4b38      	ldr	r3, [pc, #224]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <HAL_RCC_OscConfig+0x17a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e2e9      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002966:	4b32      	ldr	r3, [pc, #200]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 0219 	bic.w	r2, r3, #25
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	492f      	ldr	r1, [pc, #188]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 8002974:	4313      	orrs	r3, r2
 8002976:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002978:	f7fe f918 	bl	8000bac <HAL_GetTick>
 800297c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002980:	f7fe f914 	bl	8000bac <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e2d3      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002992:	4b27      	ldr	r3, [pc, #156]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299e:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	061b      	lsls	r3, r3, #24
 80029ac:	4920      	ldr	r1, [pc, #128]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029b2:	e045      	b.n	8002a40 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d026      	beq.n	8002a0a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029bc:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f023 0219 	bic.w	r2, r3, #25
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4919      	ldr	r1, [pc, #100]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ce:	f7fe f8ed 	bl	8000bac <HAL_GetTick>
 80029d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d6:	f7fe f8e9 	bl	8000bac <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e2a8      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	061b      	lsls	r3, r3, #24
 8002a02:	490b      	ldr	r1, [pc, #44]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
 8002a08:	e01a      	b.n	8002a40 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a08      	ldr	r2, [pc, #32]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 8002a10:	f023 0301 	bic.w	r3, r3, #1
 8002a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a16:	f7fe f8c9 	bl	8000bac <HAL_GetTick>
 8002a1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a1c:	e00a      	b.n	8002a34 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a1e:	f7fe f8c5 	bl	8000bac <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d903      	bls.n	8002a34 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e284      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
 8002a30:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a34:	4b96      	ldr	r3, [pc, #600]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1ee      	bne.n	8002a1e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d06a      	beq.n	8002b22 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a4c:	4b90      	ldr	r3, [pc, #576]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a54:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a56:	4b8e      	ldr	r3, [pc, #568]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d007      	beq.n	8002a72 <HAL_RCC_OscConfig+0x286>
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	2b18      	cmp	r3, #24
 8002a66:	d11b      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x2b4>
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d116      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a72:	4b87      	ldr	r3, [pc, #540]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <HAL_RCC_OscConfig+0x29e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	2b80      	cmp	r3, #128	; 0x80
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e257      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a8a:	4b81      	ldr	r3, [pc, #516]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	061b      	lsls	r3, r3, #24
 8002a98:	497d      	ldr	r1, [pc, #500]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a9e:	e040      	b.n	8002b22 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d023      	beq.n	8002af0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002aa8:	4b79      	ldr	r3, [pc, #484]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a78      	ldr	r2, [pc, #480]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7fe f87a 	bl	8000bac <HAL_GetTick>
 8002ab8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002abc:	f7fe f876 	bl	8000bac <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e235      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ace:	4b70      	ldr	r3, [pc, #448]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ada:	4b6d      	ldr	r3, [pc, #436]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	061b      	lsls	r3, r3, #24
 8002ae8:	4969      	ldr	r1, [pc, #420]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60cb      	str	r3, [r1, #12]
 8002aee:	e018      	b.n	8002b22 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002af0:	4b67      	ldr	r3, [pc, #412]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a66      	ldr	r2, [pc, #408]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe f856 	bl	8000bac <HAL_GetTick>
 8002b00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b04:	f7fe f852 	bl	8000bac <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e211      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b16:	4b5e      	ldr	r3, [pc, #376]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d036      	beq.n	8002b9c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d019      	beq.n	8002b6a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b36:	4b56      	ldr	r3, [pc, #344]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3a:	4a55      	ldr	r2, [pc, #340]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b42:	f7fe f833 	bl	8000bac <HAL_GetTick>
 8002b46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b4a:	f7fe f82f 	bl	8000bac <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e1ee      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b5c:	4b4c      	ldr	r3, [pc, #304]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x35e>
 8002b68:	e018      	b.n	8002b9c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b6a:	4b49      	ldr	r3, [pc, #292]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6e:	4a48      	ldr	r2, [pc, #288]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b76:	f7fe f819 	bl	8000bac <HAL_GetTick>
 8002b7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b7e:	f7fe f815 	bl	8000bac <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e1d4      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b90:	4b3f      	ldr	r3, [pc, #252]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f0      	bne.n	8002b7e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d036      	beq.n	8002c16 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d019      	beq.n	8002be4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bb0:	4b37      	ldr	r3, [pc, #220]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a36      	ldr	r2, [pc, #216]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002bb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bbc:	f7fd fff6 	bl	8000bac <HAL_GetTick>
 8002bc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002bc4:	f7fd fff2 	bl	8000bac <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e1b1      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bd6:	4b2e      	ldr	r3, [pc, #184]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x3d8>
 8002be2:	e018      	b.n	8002c16 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002be4:	4b2a      	ldr	r3, [pc, #168]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a29      	ldr	r2, [pc, #164]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002bea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bf0:	f7fd ffdc 	bl	8000bac <HAL_GetTick>
 8002bf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002bf8:	f7fd ffd8 	bl	8000bac <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e197      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c0a:	4b21      	ldr	r3, [pc, #132]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 8086 	beq.w	8002d30 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c24:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <HAL_RCC_OscConfig+0x4a8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1a      	ldr	r2, [pc, #104]	; (8002c94 <HAL_RCC_OscConfig+0x4a8>)
 8002c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c30:	f7fd ffbc 	bl	8000bac <HAL_GetTick>
 8002c34:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c38:	f7fd ffb8 	bl	8000bac <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	; 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e177      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c4a:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_RCC_OscConfig+0x4a8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d106      	bne.n	8002c6c <HAL_RCC_OscConfig+0x480>
 8002c5e:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	4a0b      	ldr	r2, [pc, #44]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6a:	e032      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e6>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d111      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4ac>
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c78:	4a05      	ldr	r2, [pc, #20]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002c7a:	f023 0301 	bic.w	r3, r3, #1
 8002c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	4a02      	ldr	r2, [pc, #8]	; (8002c90 <HAL_RCC_OscConfig+0x4a4>)
 8002c86:	f023 0304 	bic.w	r3, r3, #4
 8002c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8c:	e021      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e6>
 8002c8e:	bf00      	nop
 8002c90:	58024400 	.word	0x58024400
 8002c94:	58024800 	.word	0x58024800
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	d10c      	bne.n	8002cba <HAL_RCC_OscConfig+0x4ce>
 8002ca0:	4b83      	ldr	r3, [pc, #524]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	4a82      	ldr	r2, [pc, #520]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002ca6:	f043 0304 	orr.w	r3, r3, #4
 8002caa:	6713      	str	r3, [r2, #112]	; 0x70
 8002cac:	4b80      	ldr	r3, [pc, #512]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	4a7f      	ldr	r2, [pc, #508]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb8:	e00b      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e6>
 8002cba:	4b7d      	ldr	r3, [pc, #500]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	4a7c      	ldr	r2, [pc, #496]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc6:	4b7a      	ldr	r3, [pc, #488]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	4a79      	ldr	r2, [pc, #484]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002ccc:	f023 0304 	bic.w	r3, r3, #4
 8002cd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d015      	beq.n	8002d06 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cda:	f7fd ff67 	bl	8000bac <HAL_GetTick>
 8002cde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce2:	f7fd ff63 	bl	8000bac <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e120      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cf8:	4b6d      	ldr	r3, [pc, #436]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0ee      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x4f6>
 8002d04:	e014      	b.n	8002d30 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d06:	f7fd ff51 	bl	8000bac <HAL_GetTick>
 8002d0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fd ff4d 	bl	8000bac <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e10a      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d24:	4b62      	ldr	r3, [pc, #392]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ee      	bne.n	8002d0e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80ff 	beq.w	8002f38 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d3a:	4b5d      	ldr	r3, [pc, #372]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d42:	2b18      	cmp	r3, #24
 8002d44:	f000 80ba 	beq.w	8002ebc <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	f040 8095 	bne.w	8002e7c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d52:	4b57      	ldr	r3, [pc, #348]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a56      	ldr	r2, [pc, #344]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002d58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7fd ff25 	bl	8000bac <HAL_GetTick>
 8002d62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d66:	f7fd ff21 	bl	8000bac <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e0e0      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d78:	4b4d      	ldr	r3, [pc, #308]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f0      	bne.n	8002d66 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d84:	4b4a      	ldr	r3, [pc, #296]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002d86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d88:	4b4a      	ldr	r3, [pc, #296]	; (8002eb4 <HAL_RCC_OscConfig+0x6c8>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d94:	0112      	lsls	r2, r2, #4
 8002d96:	430a      	orrs	r2, r1
 8002d98:	4945      	ldr	r1, [pc, #276]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	628b      	str	r3, [r1, #40]	; 0x28
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	3b01      	subs	r3, #1
 8002da4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dac:	3b01      	subs	r3, #1
 8002dae:	025b      	lsls	r3, r3, #9
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db8:	3b01      	subs	r3, #1
 8002dba:	041b      	lsls	r3, r3, #16
 8002dbc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	061b      	lsls	r3, r3, #24
 8002dca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002dce:	4938      	ldr	r1, [pc, #224]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002dd4:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	4a35      	ldr	r2, [pc, #212]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002dda:	f023 0301 	bic.w	r3, r3, #1
 8002dde:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002de0:	4b33      	ldr	r3, [pc, #204]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002de4:	4b34      	ldr	r3, [pc, #208]	; (8002eb8 <HAL_RCC_OscConfig+0x6cc>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002dec:	00d2      	lsls	r2, r2, #3
 8002dee:	4930      	ldr	r1, [pc, #192]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002df4:	4b2e      	ldr	r3, [pc, #184]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	f023 020c 	bic.w	r2, r3, #12
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	492b      	ldr	r1, [pc, #172]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e06:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	f023 0202 	bic.w	r2, r3, #2
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	4927      	ldr	r1, [pc, #156]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e18:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	4a24      	ldr	r2, [pc, #144]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e24:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	4a21      	ldr	r2, [pc, #132]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e30:	4b1f      	ldr	r3, [pc, #124]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	4a1e      	ldr	r2, [pc, #120]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002e36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002e3c:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	4a1b      	ldr	r2, [pc, #108]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e48:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a18      	ldr	r2, [pc, #96]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fd feaa 	bl	8000bac <HAL_GetTick>
 8002e58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5c:	f7fd fea6 	bl	8000bac <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e065      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e6e:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x670>
 8002e7a:	e05d      	b.n	8002f38 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0b      	ldr	r2, [pc, #44]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fd fe90 	bl	8000bac <HAL_GetTick>
 8002e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e90:	f7fd fe8c 	bl	8000bac <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e04b      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ea2:	4b03      	ldr	r3, [pc, #12]	; (8002eb0 <HAL_RCC_OscConfig+0x6c4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x6a4>
 8002eae:	e043      	b.n	8002f38 <HAL_RCC_OscConfig+0x74c>
 8002eb0:	58024400 	.word	0x58024400
 8002eb4:	fffffc0c 	.word	0xfffffc0c
 8002eb8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ebc:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <HAL_RCC_OscConfig+0x758>)
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ec2:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <HAL_RCC_OscConfig+0x758>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d031      	beq.n	8002f34 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f003 0203 	and.w	r2, r3, #3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d12a      	bne.n	8002f34 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d122      	bne.n	8002f34 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d11a      	bne.n	8002f34 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	0a5b      	lsrs	r3, r3, #9
 8002f02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d111      	bne.n	8002f34 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	0c1b      	lsrs	r3, r3, #16
 8002f14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d108      	bne.n	8002f34 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	0e1b      	lsrs	r3, r3, #24
 8002f26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3730      	adds	r7, #48	; 0x30
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	58024400 	.word	0x58024400

08002f48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e19c      	b.n	8003296 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b8a      	ldr	r3, [pc, #552]	; (8003188 <HAL_RCC_ClockConfig+0x240>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d910      	bls.n	8002f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b87      	ldr	r3, [pc, #540]	; (8003188 <HAL_RCC_ClockConfig+0x240>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 020f 	bic.w	r2, r3, #15
 8002f72:	4985      	ldr	r1, [pc, #532]	; (8003188 <HAL_RCC_ClockConfig+0x240>)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	4b83      	ldr	r3, [pc, #524]	; (8003188 <HAL_RCC_ClockConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e184      	b.n	8003296 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d010      	beq.n	8002fba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	4b7b      	ldr	r3, [pc, #492]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d908      	bls.n	8002fba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fa8:	4b78      	ldr	r3, [pc, #480]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	4975      	ldr	r1, [pc, #468]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d010      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	4b70      	ldr	r3, [pc, #448]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d908      	bls.n	8002fe8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fd6:	4b6d      	ldr	r3, [pc, #436]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	496a      	ldr	r1, [pc, #424]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0310 	and.w	r3, r3, #16
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d010      	beq.n	8003016 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699a      	ldr	r2, [r3, #24]
 8002ff8:	4b64      	ldr	r3, [pc, #400]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003000:	429a      	cmp	r2, r3
 8003002:	d908      	bls.n	8003016 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003004:	4b61      	ldr	r3, [pc, #388]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	495e      	ldr	r1, [pc, #376]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 8003012:	4313      	orrs	r3, r2
 8003014:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b00      	cmp	r3, #0
 8003020:	d010      	beq.n	8003044 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69da      	ldr	r2, [r3, #28]
 8003026:	4b59      	ldr	r3, [pc, #356]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800302e:	429a      	cmp	r2, r3
 8003030:	d908      	bls.n	8003044 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003032:	4b56      	ldr	r3, [pc, #344]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	4953      	ldr	r1, [pc, #332]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 8003040:	4313      	orrs	r3, r2
 8003042:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d010      	beq.n	8003072 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	4b4d      	ldr	r3, [pc, #308]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	429a      	cmp	r2, r3
 800305e:	d908      	bls.n	8003072 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003060:	4b4a      	ldr	r3, [pc, #296]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f023 020f 	bic.w	r2, r3, #15
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4947      	ldr	r1, [pc, #284]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 800306e:	4313      	orrs	r3, r2
 8003070:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d055      	beq.n	800312a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800307e:	4b43      	ldr	r3, [pc, #268]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	4940      	ldr	r1, [pc, #256]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 800308c:	4313      	orrs	r3, r2
 800308e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d107      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003098:	4b3c      	ldr	r3, [pc, #240]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d121      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0f6      	b.n	8003296 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d107      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030b0:	4b36      	ldr	r3, [pc, #216]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d115      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0ea      	b.n	8003296 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d107      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030c8:	4b30      	ldr	r3, [pc, #192]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d109      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0de      	b.n	8003296 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030d8:	4b2c      	ldr	r3, [pc, #176]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0d6      	b.n	8003296 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030e8:	4b28      	ldr	r3, [pc, #160]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f023 0207 	bic.w	r2, r3, #7
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4925      	ldr	r1, [pc, #148]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fa:	f7fd fd57 	bl	8000bac <HAL_GetTick>
 80030fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003100:	e00a      	b.n	8003118 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003102:	f7fd fd53 	bl	8000bac <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003110:	4293      	cmp	r3, r2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e0be      	b.n	8003296 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003118:	4b1c      	ldr	r3, [pc, #112]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	429a      	cmp	r2, r3
 8003128:	d1eb      	bne.n	8003102 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d010      	beq.n	8003158 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	4b14      	ldr	r3, [pc, #80]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	429a      	cmp	r2, r3
 8003144:	d208      	bcs.n	8003158 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003146:	4b11      	ldr	r3, [pc, #68]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f023 020f 	bic.w	r2, r3, #15
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	490e      	ldr	r1, [pc, #56]	; (800318c <HAL_RCC_ClockConfig+0x244>)
 8003154:	4313      	orrs	r3, r2
 8003156:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003158:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <HAL_RCC_ClockConfig+0x240>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 030f 	and.w	r3, r3, #15
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d214      	bcs.n	8003190 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003166:	4b08      	ldr	r3, [pc, #32]	; (8003188 <HAL_RCC_ClockConfig+0x240>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 020f 	bic.w	r2, r3, #15
 800316e:	4906      	ldr	r1, [pc, #24]	; (8003188 <HAL_RCC_ClockConfig+0x240>)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003176:	4b04      	ldr	r3, [pc, #16]	; (8003188 <HAL_RCC_ClockConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d005      	beq.n	8003190 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e086      	b.n	8003296 <HAL_RCC_ClockConfig+0x34e>
 8003188:	52002000 	.word	0x52002000
 800318c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d010      	beq.n	80031be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	4b3f      	ldr	r3, [pc, #252]	; (80032a0 <HAL_RCC_ClockConfig+0x358>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d208      	bcs.n	80031be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031ac:	4b3c      	ldr	r3, [pc, #240]	; (80032a0 <HAL_RCC_ClockConfig+0x358>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	4939      	ldr	r1, [pc, #228]	; (80032a0 <HAL_RCC_ClockConfig+0x358>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d010      	beq.n	80031ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	4b34      	ldr	r3, [pc, #208]	; (80032a0 <HAL_RCC_ClockConfig+0x358>)
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d208      	bcs.n	80031ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031da:	4b31      	ldr	r3, [pc, #196]	; (80032a0 <HAL_RCC_ClockConfig+0x358>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	492e      	ldr	r1, [pc, #184]	; (80032a0 <HAL_RCC_ClockConfig+0x358>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d010      	beq.n	800321a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699a      	ldr	r2, [r3, #24]
 80031fc:	4b28      	ldr	r3, [pc, #160]	; (80032a0 <HAL_RCC_ClockConfig+0x358>)
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003204:	429a      	cmp	r2, r3
 8003206:	d208      	bcs.n	800321a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003208:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <HAL_RCC_ClockConfig+0x358>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	4922      	ldr	r1, [pc, #136]	; (80032a0 <HAL_RCC_ClockConfig+0x358>)
 8003216:	4313      	orrs	r3, r2
 8003218:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b00      	cmp	r3, #0
 8003224:	d010      	beq.n	8003248 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69da      	ldr	r2, [r3, #28]
 800322a:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <HAL_RCC_ClockConfig+0x358>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003232:	429a      	cmp	r2, r3
 8003234:	d208      	bcs.n	8003248 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003236:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <HAL_RCC_ClockConfig+0x358>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	4917      	ldr	r1, [pc, #92]	; (80032a0 <HAL_RCC_ClockConfig+0x358>)
 8003244:	4313      	orrs	r3, r2
 8003246:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003248:	f000 f834 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 800324c:	4602      	mov	r2, r0
 800324e:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <HAL_RCC_ClockConfig+0x358>)
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	0a1b      	lsrs	r3, r3, #8
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	4912      	ldr	r1, [pc, #72]	; (80032a4 <HAL_RCC_ClockConfig+0x35c>)
 800325a:	5ccb      	ldrb	r3, [r1, r3]
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
 8003264:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <HAL_RCC_ClockConfig+0x358>)
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	4a0d      	ldr	r2, [pc, #52]	; (80032a4 <HAL_RCC_ClockConfig+0x35c>)
 8003270:	5cd3      	ldrb	r3, [r2, r3]
 8003272:	f003 031f 	and.w	r3, r3, #31
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	fa22 f303 	lsr.w	r3, r2, r3
 800327c:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <HAL_RCC_ClockConfig+0x360>)
 800327e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003280:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <HAL_RCC_ClockConfig+0x364>)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003286:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <HAL_RCC_ClockConfig+0x368>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7fd fc44 	bl	8000b18 <HAL_InitTick>
 8003290:	4603      	mov	r3, r0
 8003292:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003294:	7bfb      	ldrb	r3, [r7, #15]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	58024400 	.word	0x58024400
 80032a4:	0800993c 	.word	0x0800993c
 80032a8:	24000004 	.word	0x24000004
 80032ac:	24000000 	.word	0x24000000
 80032b0:	24000008 	.word	0x24000008

080032b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b089      	sub	sp, #36	; 0x24
 80032b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032ba:	4bb3      	ldr	r3, [pc, #716]	; (8003588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032c2:	2b18      	cmp	r3, #24
 80032c4:	f200 8155 	bhi.w	8003572 <HAL_RCC_GetSysClockFreq+0x2be>
 80032c8:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	08003335 	.word	0x08003335
 80032d4:	08003573 	.word	0x08003573
 80032d8:	08003573 	.word	0x08003573
 80032dc:	08003573 	.word	0x08003573
 80032e0:	08003573 	.word	0x08003573
 80032e4:	08003573 	.word	0x08003573
 80032e8:	08003573 	.word	0x08003573
 80032ec:	08003573 	.word	0x08003573
 80032f0:	0800335b 	.word	0x0800335b
 80032f4:	08003573 	.word	0x08003573
 80032f8:	08003573 	.word	0x08003573
 80032fc:	08003573 	.word	0x08003573
 8003300:	08003573 	.word	0x08003573
 8003304:	08003573 	.word	0x08003573
 8003308:	08003573 	.word	0x08003573
 800330c:	08003573 	.word	0x08003573
 8003310:	08003361 	.word	0x08003361
 8003314:	08003573 	.word	0x08003573
 8003318:	08003573 	.word	0x08003573
 800331c:	08003573 	.word	0x08003573
 8003320:	08003573 	.word	0x08003573
 8003324:	08003573 	.word	0x08003573
 8003328:	08003573 	.word	0x08003573
 800332c:	08003573 	.word	0x08003573
 8003330:	08003367 	.word	0x08003367
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003334:	4b94      	ldr	r3, [pc, #592]	; (8003588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b00      	cmp	r3, #0
 800333e:	d009      	beq.n	8003354 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003340:	4b91      	ldr	r3, [pc, #580]	; (8003588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	08db      	lsrs	r3, r3, #3
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	4a90      	ldr	r2, [pc, #576]	; (800358c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800334c:	fa22 f303 	lsr.w	r3, r2, r3
 8003350:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003352:	e111      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003354:	4b8d      	ldr	r3, [pc, #564]	; (800358c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003356:	61bb      	str	r3, [r7, #24]
    break;
 8003358:	e10e      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800335a:	4b8d      	ldr	r3, [pc, #564]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800335c:	61bb      	str	r3, [r7, #24]
    break;
 800335e:	e10b      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003360:	4b8c      	ldr	r3, [pc, #560]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003362:	61bb      	str	r3, [r7, #24]
    break;
 8003364:	e108      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003366:	4b88      	ldr	r3, [pc, #544]	; (8003588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003370:	4b85      	ldr	r3, [pc, #532]	; (8003588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800337a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800337c:	4b82      	ldr	r3, [pc, #520]	; (8003588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003386:	4b80      	ldr	r3, [pc, #512]	; (8003588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338a:	08db      	lsrs	r3, r3, #3
 800338c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80e1 	beq.w	800356c <HAL_RCC_GetSysClockFreq+0x2b8>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	f000 8083 	beq.w	80034b8 <HAL_RCC_GetSysClockFreq+0x204>
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	f200 80a1 	bhi.w	80034fc <HAL_RCC_GetSysClockFreq+0x248>
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_RCC_GetSysClockFreq+0x114>
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d056      	beq.n	8003474 <HAL_RCC_GetSysClockFreq+0x1c0>
 80033c6:	e099      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033c8:	4b6f      	ldr	r3, [pc, #444]	; (8003588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0320 	and.w	r3, r3, #32
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d02d      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033d4:	4b6c      	ldr	r3, [pc, #432]	; (8003588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	08db      	lsrs	r3, r3, #3
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	4a6b      	ldr	r2, [pc, #428]	; (800358c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
 80033e4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	ee07 3a90 	vmov	s15, r3
 80033ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033fe:	4b62      	ldr	r3, [pc, #392]	; (8003588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003406:	ee07 3a90 	vmov	s15, r3
 800340a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800340e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003412:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003598 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800341a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800341e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800342a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800342e:	e087      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800359c <HAL_RCC_GetSysClockFreq+0x2e8>
 800343e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003442:	4b51      	ldr	r3, [pc, #324]	; (8003588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800344a:	ee07 3a90 	vmov	s15, r3
 800344e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003452:	ed97 6a02 	vldr	s12, [r7, #8]
 8003456:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003598 <HAL_RCC_GetSysClockFreq+0x2e4>
 800345a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800345e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800346a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003472:	e065      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	ee07 3a90 	vmov	s15, r3
 800347a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800347e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80035a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003486:	4b40      	ldr	r3, [pc, #256]	; (8003588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800348e:	ee07 3a90 	vmov	s15, r3
 8003492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003496:	ed97 6a02 	vldr	s12, [r7, #8]
 800349a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003598 <HAL_RCC_GetSysClockFreq+0x2e4>
 800349e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034b6:	e043      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	ee07 3a90 	vmov	s15, r3
 80034be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80035a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80034c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ca:	4b2f      	ldr	r3, [pc, #188]	; (8003588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d2:	ee07 3a90 	vmov	s15, r3
 80034d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034da:	ed97 6a02 	vldr	s12, [r7, #8]
 80034de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003598 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034fa:	e021      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	ee07 3a90 	vmov	s15, r3
 8003502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003506:	eddf 6a26 	vldr	s13, [pc, #152]	; 80035a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800350a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800350e:	4b1e      	ldr	r3, [pc, #120]	; (8003588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003516:	ee07 3a90 	vmov	s15, r3
 800351a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800351e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003522:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003598 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800352a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800352e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800353a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800353e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003540:	4b11      	ldr	r3, [pc, #68]	; (8003588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	0a5b      	lsrs	r3, r3, #9
 8003546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800354a:	3301      	adds	r3, #1
 800354c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	ee07 3a90 	vmov	s15, r3
 8003554:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003558:	edd7 6a07 	vldr	s13, [r7, #28]
 800355c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003564:	ee17 3a90 	vmov	r3, s15
 8003568:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800356a:	e005      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]
    break;
 8003570:	e002      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003572:	4b07      	ldr	r3, [pc, #28]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003574:	61bb      	str	r3, [r7, #24]
    break;
 8003576:	bf00      	nop
  }

  return sysclockfreq;
 8003578:	69bb      	ldr	r3, [r7, #24]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3724      	adds	r7, #36	; 0x24
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	58024400 	.word	0x58024400
 800358c:	03d09000 	.word	0x03d09000
 8003590:	003d0900 	.word	0x003d0900
 8003594:	007a1200 	.word	0x007a1200
 8003598:	46000000 	.word	0x46000000
 800359c:	4c742400 	.word	0x4c742400
 80035a0:	4a742400 	.word	0x4a742400
 80035a4:	4af42400 	.word	0x4af42400

080035a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035ae:	f7ff fe81 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 80035b2:	4602      	mov	r2, r0
 80035b4:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	0a1b      	lsrs	r3, r3, #8
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	490f      	ldr	r1, [pc, #60]	; (80035fc <HAL_RCC_GetHCLKFreq+0x54>)
 80035c0:	5ccb      	ldrb	r3, [r1, r3]
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035cc:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	4a09      	ldr	r2, [pc, #36]	; (80035fc <HAL_RCC_GetHCLKFreq+0x54>)
 80035d6:	5cd3      	ldrb	r3, [r2, r3]
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	fa22 f303 	lsr.w	r3, r2, r3
 80035e2:	4a07      	ldr	r2, [pc, #28]	; (8003600 <HAL_RCC_GetHCLKFreq+0x58>)
 80035e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035e6:	4a07      	ldr	r2, [pc, #28]	; (8003604 <HAL_RCC_GetHCLKFreq+0x5c>)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035ec:	4b04      	ldr	r3, [pc, #16]	; (8003600 <HAL_RCC_GetHCLKFreq+0x58>)
 80035ee:	681b      	ldr	r3, [r3, #0]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	58024400 	.word	0x58024400
 80035fc:	0800993c 	.word	0x0800993c
 8003600:	24000004 	.word	0x24000004
 8003604:	24000000 	.word	0x24000000

08003608 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003610:	2300      	movs	r3, #0
 8003612:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003614:	2300      	movs	r3, #0
 8003616:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d03f      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003628:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800362c:	d02a      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800362e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003632:	d824      	bhi.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003634:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003638:	d018      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800363a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800363e:	d81e      	bhi.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003648:	d007      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800364a:	e018      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800364c:	4ba4      	ldr	r3, [pc, #656]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	4aa3      	ldr	r2, [pc, #652]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003656:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003658:	e015      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3304      	adds	r3, #4
 800365e:	2102      	movs	r1, #2
 8003660:	4618      	mov	r0, r3
 8003662:	f000 fecb 	bl	80043fc <RCCEx_PLL2_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800366a:	e00c      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3324      	adds	r3, #36	; 0x24
 8003670:	2102      	movs	r1, #2
 8003672:	4618      	mov	r0, r3
 8003674:	f000 ff74 	bl	8004560 <RCCEx_PLL3_Config>
 8003678:	4603      	mov	r3, r0
 800367a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800367c:	e003      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	75fb      	strb	r3, [r7, #23]
      break;
 8003682:	e000      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003684:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003686:	7dfb      	ldrb	r3, [r7, #23]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800368c:	4b94      	ldr	r3, [pc, #592]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800368e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003690:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003698:	4991      	ldr	r1, [pc, #580]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800369a:	4313      	orrs	r3, r2
 800369c:	650b      	str	r3, [r1, #80]	; 0x50
 800369e:	e001      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
 80036a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d03d      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d826      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80036b8:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80036ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036be:	bf00      	nop
 80036c0:	080036d5 	.word	0x080036d5
 80036c4:	080036e3 	.word	0x080036e3
 80036c8:	080036f5 	.word	0x080036f5
 80036cc:	0800370d 	.word	0x0800370d
 80036d0:	0800370d 	.word	0x0800370d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d4:	4b82      	ldr	r3, [pc, #520]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	4a81      	ldr	r2, [pc, #516]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80036da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036e0:	e015      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3304      	adds	r3, #4
 80036e6:	2100      	movs	r1, #0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fe87 	bl	80043fc <RCCEx_PLL2_Config>
 80036ee:	4603      	mov	r3, r0
 80036f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036f2:	e00c      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3324      	adds	r3, #36	; 0x24
 80036f8:	2100      	movs	r1, #0
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 ff30 	bl	8004560 <RCCEx_PLL3_Config>
 8003700:	4603      	mov	r3, r0
 8003702:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003704:	e003      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	75fb      	strb	r3, [r7, #23]
      break;
 800370a:	e000      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800370c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d109      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003714:	4b72      	ldr	r3, [pc, #456]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003718:	f023 0207 	bic.w	r2, r3, #7
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003720:	496f      	ldr	r1, [pc, #444]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003722:	4313      	orrs	r3, r2
 8003724:	650b      	str	r3, [r1, #80]	; 0x50
 8003726:	e001      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003728:	7dfb      	ldrb	r3, [r7, #23]
 800372a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003734:	2b00      	cmp	r3, #0
 8003736:	d051      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800373e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003742:	d036      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003744:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003748:	d830      	bhi.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800374a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800374e:	d032      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003750:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003754:	d82a      	bhi.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003756:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800375a:	d02e      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800375c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003760:	d824      	bhi.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003766:	d018      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800376c:	d81e      	bhi.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003772:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003776:	d007      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003778:	e018      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800377a:	4b59      	ldr	r3, [pc, #356]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	4a58      	ldr	r2, [pc, #352]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003784:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003786:	e019      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3304      	adds	r3, #4
 800378c:	2100      	movs	r1, #0
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fe34 	bl	80043fc <RCCEx_PLL2_Config>
 8003794:	4603      	mov	r3, r0
 8003796:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003798:	e010      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3324      	adds	r3, #36	; 0x24
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fedd 	bl	8004560 <RCCEx_PLL3_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037aa:	e007      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	75fb      	strb	r3, [r7, #23]
      break;
 80037b0:	e004      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80037b2:	bf00      	nop
 80037b4:	e002      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80037b6:	bf00      	nop
 80037b8:	e000      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80037ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037bc:	7dfb      	ldrb	r3, [r7, #23]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10a      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037c2:	4b47      	ldr	r3, [pc, #284]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80037c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037d0:	4943      	ldr	r1, [pc, #268]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	658b      	str	r3, [r1, #88]	; 0x58
 80037d6:	e001      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d8:	7dfb      	ldrb	r3, [r7, #23]
 80037da:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d051      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037ee:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80037f2:	d036      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80037f4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80037f8:	d830      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80037fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037fe:	d032      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003800:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003804:	d82a      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003806:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800380a:	d02e      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x262>
 800380c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003810:	d824      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003812:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003816:	d018      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003818:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800381c:	d81e      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003822:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003826:	d007      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003828:	e018      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800382a:	4b2d      	ldr	r3, [pc, #180]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	4a2c      	ldr	r2, [pc, #176]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003834:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003836:	e019      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3304      	adds	r3, #4
 800383c:	2100      	movs	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f000 fddc 	bl	80043fc <RCCEx_PLL2_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003848:	e010      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3324      	adds	r3, #36	; 0x24
 800384e:	2100      	movs	r1, #0
 8003850:	4618      	mov	r0, r3
 8003852:	f000 fe85 	bl	8004560 <RCCEx_PLL3_Config>
 8003856:	4603      	mov	r3, r0
 8003858:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800385a:	e007      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	75fb      	strb	r3, [r7, #23]
      break;
 8003860:	e004      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003862:	bf00      	nop
 8003864:	e002      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003866:	bf00      	nop
 8003868:	e000      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800386a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800386c:	7dfb      	ldrb	r3, [r7, #23]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10a      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003872:	4b1b      	ldr	r3, [pc, #108]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003876:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003880:	4917      	ldr	r1, [pc, #92]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003882:	4313      	orrs	r3, r2
 8003884:	658b      	str	r3, [r1, #88]	; 0x58
 8003886:	e001      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003888:	7dfb      	ldrb	r3, [r7, #23]
 800388a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d035      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389c:	2b30      	cmp	r3, #48	; 0x30
 800389e:	d01c      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80038a0:	2b30      	cmp	r3, #48	; 0x30
 80038a2:	d817      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d00c      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d813      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d019      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d10f      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b4:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80038ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80038c0:	e011      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3304      	adds	r3, #4
 80038c6:	2102      	movs	r1, #2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fd97 	bl	80043fc <RCCEx_PLL2_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80038d2:	e008      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	75fb      	strb	r3, [r7, #23]
      break;
 80038d8:	e005      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 80038da:	bf00      	nop
 80038dc:	e003      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80038de:	bf00      	nop
 80038e0:	58024400 	.word	0x58024400
      break;
 80038e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038e6:	7dfb      	ldrb	r3, [r7, #23]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d109      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80038ec:	4ba3      	ldr	r3, [pc, #652]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80038ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f8:	49a0      	ldr	r1, [pc, #640]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80038fe:	e001      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003900:	7dfb      	ldrb	r3, [r7, #23]
 8003902:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d047      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003918:	d030      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x374>
 800391a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800391e:	d82a      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003920:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003924:	d02c      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003926:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800392a:	d824      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800392c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003930:	d018      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003936:	d81e      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800393c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003940:	d007      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003942:	e018      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003944:	4b8d      	ldr	r3, [pc, #564]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	4a8c      	ldr	r2, [pc, #560]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800394a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800394e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003950:	e017      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3304      	adds	r3, #4
 8003956:	2100      	movs	r1, #0
 8003958:	4618      	mov	r0, r3
 800395a:	f000 fd4f 	bl	80043fc <RCCEx_PLL2_Config>
 800395e:	4603      	mov	r3, r0
 8003960:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003962:	e00e      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3324      	adds	r3, #36	; 0x24
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fdf8 	bl	8004560 <RCCEx_PLL3_Config>
 8003970:	4603      	mov	r3, r0
 8003972:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003974:	e005      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	75fb      	strb	r3, [r7, #23]
      break;
 800397a:	e002      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800397c:	bf00      	nop
 800397e:	e000      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003982:	7dfb      	ldrb	r3, [r7, #23]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d109      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003988:	4b7c      	ldr	r3, [pc, #496]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800398a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	4979      	ldr	r1, [pc, #484]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003996:	4313      	orrs	r3, r2
 8003998:	650b      	str	r3, [r1, #80]	; 0x50
 800399a:	e001      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399c:	7dfb      	ldrb	r3, [r7, #23]
 800399e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d049      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039b4:	d02e      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80039b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ba:	d828      	bhi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80039bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039c0:	d02a      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80039c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039c6:	d822      	bhi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80039c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039cc:	d026      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80039ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039d2:	d81c      	bhi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80039d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039d8:	d010      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80039da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039de:	d816      	bhi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d01d      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80039e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e8:	d111      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3304      	adds	r3, #4
 80039ee:	2101      	movs	r1, #1
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fd03 	bl	80043fc <RCCEx_PLL2_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80039fa:	e012      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3324      	adds	r3, #36	; 0x24
 8003a00:	2101      	movs	r1, #1
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fdac 	bl	8004560 <RCCEx_PLL3_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a0c:	e009      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	75fb      	strb	r3, [r7, #23]
      break;
 8003a12:	e006      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a14:	bf00      	nop
 8003a16:	e004      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a18:	bf00      	nop
 8003a1a:	e002      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a1c:	bf00      	nop
 8003a1e:	e000      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d109      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a28:	4b54      	ldr	r3, [pc, #336]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a34:	4951      	ldr	r1, [pc, #324]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	650b      	str	r3, [r1, #80]	; 0x50
 8003a3a:	e001      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
 8003a3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d04b      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a56:	d02e      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a5c:	d828      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a62:	d02a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a68:	d822      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a6e:	d026      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003a70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a74:	d81c      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a7a:	d010      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a80:	d816      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d01d      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003a86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a8a:	d111      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	2101      	movs	r1, #1
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fcb2 	bl	80043fc <RCCEx_PLL2_Config>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a9c:	e012      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3324      	adds	r3, #36	; 0x24
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fd5b 	bl	8004560 <RCCEx_PLL3_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003aae:	e009      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab4:	e006      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003ab6:	bf00      	nop
 8003ab8:	e004      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003aba:	bf00      	nop
 8003abc:	e002      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e000      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003ac2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10a      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003aca:	4b2c      	ldr	r3, [pc, #176]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ace:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ad8:	4928      	ldr	r1, [pc, #160]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	658b      	str	r3, [r1, #88]	; 0x58
 8003ade:	e001      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae0:	7dfb      	ldrb	r3, [r7, #23]
 8003ae2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d02f      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003af8:	d00e      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003afe:	d814      	bhi.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d015      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003b04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b08:	d10f      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b0a:	4b1c      	ldr	r3, [pc, #112]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	4a1b      	ldr	r2, [pc, #108]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b16:	e00c      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fc6c 	bl	80043fc <RCCEx_PLL2_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b28:	e003      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b2e:	e000      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d109      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b38:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b44:	490d      	ldr	r1, [pc, #52]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	650b      	str	r3, [r1, #80]	; 0x50
 8003b4a:	e001      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
 8003b4e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d034      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d81d      	bhi.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003b64:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6a:	bf00      	nop
 8003b6c:	08003ba7 	.word	0x08003ba7
 8003b70:	08003b81 	.word	0x08003b81
 8003b74:	08003b8f 	.word	0x08003b8f
 8003b78:	08003ba7 	.word	0x08003ba7
 8003b7c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b80:	4bb1      	ldr	r3, [pc, #708]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	4ab0      	ldr	r2, [pc, #704]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b8c:	e00c      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3304      	adds	r3, #4
 8003b92:	2102      	movs	r1, #2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fc31 	bl	80043fc <RCCEx_PLL2_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b9e:	e003      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba4:	e000      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8003ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ba8:	7dfb      	ldrb	r3, [r7, #23]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d109      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003bae:	4ba6      	ldr	r3, [pc, #664]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb2:	f023 0203 	bic.w	r2, r3, #3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	49a3      	ldr	r1, [pc, #652]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003bc0:	e001      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
 8003bc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 8086 	beq.w	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bd4:	4b9d      	ldr	r3, [pc, #628]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a9c      	ldr	r2, [pc, #624]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003be0:	f7fc ffe4 	bl	8000bac <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003be6:	e009      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be8:	f7fc ffe0 	bl	8000bac <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	; 0x64
 8003bf4:	d902      	bls.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	75fb      	strb	r3, [r7, #23]
        break;
 8003bfa:	e005      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bfc:	4b93      	ldr	r3, [pc, #588]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0ef      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d166      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c0e:	4b8e      	ldr	r3, [pc, #568]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c18:	4053      	eors	r3, r2
 8003c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d013      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c22:	4b89      	ldr	r3, [pc, #548]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c2c:	4b86      	ldr	r3, [pc, #536]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c30:	4a85      	ldr	r2, [pc, #532]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c36:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c38:	4b83      	ldr	r3, [pc, #524]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	4a82      	ldr	r2, [pc, #520]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c42:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c44:	4a80      	ldr	r2, [pc, #512]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c54:	d115      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c56:	f7fc ffa9 	bl	8000bac <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c5c:	e00b      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5e:	f7fc ffa5 	bl	8000bac <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d902      	bls.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	75fb      	strb	r3, [r7, #23]
            break;
 8003c74:	e005      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c76:	4b74      	ldr	r3, [pc, #464]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0ed      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d126      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c96:	d10d      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003c98:	4b6b      	ldr	r3, [pc, #428]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ca6:	0919      	lsrs	r1, r3, #4
 8003ca8:	4b69      	ldr	r3, [pc, #420]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003caa:	400b      	ands	r3, r1
 8003cac:	4966      	ldr	r1, [pc, #408]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	610b      	str	r3, [r1, #16]
 8003cb2:	e005      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003cb4:	4b64      	ldr	r3, [pc, #400]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	4a63      	ldr	r2, [pc, #396]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003cbe:	6113      	str	r3, [r2, #16]
 8003cc0:	4b61      	ldr	r3, [pc, #388]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cce:	495e      	ldr	r1, [pc, #376]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	670b      	str	r3, [r1, #112]	; 0x70
 8003cd4:	e004      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cd6:	7dfb      	ldrb	r3, [r7, #23]
 8003cd8:	75bb      	strb	r3, [r7, #22]
 8003cda:	e001      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d07e      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf0:	2b28      	cmp	r3, #40	; 0x28
 8003cf2:	d867      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003cf4:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfa:	bf00      	nop
 8003cfc:	08003dcb 	.word	0x08003dcb
 8003d00:	08003dc5 	.word	0x08003dc5
 8003d04:	08003dc5 	.word	0x08003dc5
 8003d08:	08003dc5 	.word	0x08003dc5
 8003d0c:	08003dc5 	.word	0x08003dc5
 8003d10:	08003dc5 	.word	0x08003dc5
 8003d14:	08003dc5 	.word	0x08003dc5
 8003d18:	08003dc5 	.word	0x08003dc5
 8003d1c:	08003da1 	.word	0x08003da1
 8003d20:	08003dc5 	.word	0x08003dc5
 8003d24:	08003dc5 	.word	0x08003dc5
 8003d28:	08003dc5 	.word	0x08003dc5
 8003d2c:	08003dc5 	.word	0x08003dc5
 8003d30:	08003dc5 	.word	0x08003dc5
 8003d34:	08003dc5 	.word	0x08003dc5
 8003d38:	08003dc5 	.word	0x08003dc5
 8003d3c:	08003db3 	.word	0x08003db3
 8003d40:	08003dc5 	.word	0x08003dc5
 8003d44:	08003dc5 	.word	0x08003dc5
 8003d48:	08003dc5 	.word	0x08003dc5
 8003d4c:	08003dc5 	.word	0x08003dc5
 8003d50:	08003dc5 	.word	0x08003dc5
 8003d54:	08003dc5 	.word	0x08003dc5
 8003d58:	08003dc5 	.word	0x08003dc5
 8003d5c:	08003dcb 	.word	0x08003dcb
 8003d60:	08003dc5 	.word	0x08003dc5
 8003d64:	08003dc5 	.word	0x08003dc5
 8003d68:	08003dc5 	.word	0x08003dc5
 8003d6c:	08003dc5 	.word	0x08003dc5
 8003d70:	08003dc5 	.word	0x08003dc5
 8003d74:	08003dc5 	.word	0x08003dc5
 8003d78:	08003dc5 	.word	0x08003dc5
 8003d7c:	08003dcb 	.word	0x08003dcb
 8003d80:	08003dc5 	.word	0x08003dc5
 8003d84:	08003dc5 	.word	0x08003dc5
 8003d88:	08003dc5 	.word	0x08003dc5
 8003d8c:	08003dc5 	.word	0x08003dc5
 8003d90:	08003dc5 	.word	0x08003dc5
 8003d94:	08003dc5 	.word	0x08003dc5
 8003d98:	08003dc5 	.word	0x08003dc5
 8003d9c:	08003dcb 	.word	0x08003dcb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3304      	adds	r3, #4
 8003da4:	2101      	movs	r1, #1
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 fb28 	bl	80043fc <RCCEx_PLL2_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003db0:	e00c      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3324      	adds	r3, #36	; 0x24
 8003db6:	2101      	movs	r1, #1
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fbd1 	bl	8004560 <RCCEx_PLL3_Config>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003dc2:	e003      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc8:	e000      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d109      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003dd2:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dde:	491a      	ldr	r1, [pc, #104]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	654b      	str	r3, [r1, #84]	; 0x54
 8003de4:	e001      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
 8003de8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d03e      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	2b05      	cmp	r3, #5
 8003dfc:	d820      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8003dfe:	a201      	add	r2, pc, #4	; (adr r2, 8003e04 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8003e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e04:	08003e55 	.word	0x08003e55
 8003e08:	08003e1d 	.word	0x08003e1d
 8003e0c:	08003e2f 	.word	0x08003e2f
 8003e10:	08003e55 	.word	0x08003e55
 8003e14:	08003e55 	.word	0x08003e55
 8003e18:	08003e55 	.word	0x08003e55
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	2101      	movs	r1, #1
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 faea 	bl	80043fc <RCCEx_PLL2_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e2c:	e013      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3324      	adds	r3, #36	; 0x24
 8003e32:	2101      	movs	r1, #1
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fb93 	bl	8004560 <RCCEx_PLL3_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e3e:	e00a      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	75fb      	strb	r3, [r7, #23]
      break;
 8003e44:	e007      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8003e46:	bf00      	nop
 8003e48:	58024400 	.word	0x58024400
 8003e4c:	58024800 	.word	0x58024800
 8003e50:	00ffffcf 	.word	0x00ffffcf
      break;
 8003e54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e56:	7dfb      	ldrb	r3, [r7, #23]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d109      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e5c:	4b9f      	ldr	r3, [pc, #636]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e60:	f023 0207 	bic.w	r2, r3, #7
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	499c      	ldr	r1, [pc, #624]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	654b      	str	r3, [r1, #84]	; 0x54
 8003e6e:	e001      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d039      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e86:	2b05      	cmp	r3, #5
 8003e88:	d820      	bhi.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8003e8a:	a201      	add	r2, pc, #4	; (adr r2, 8003e90 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8003e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e90:	08003ed3 	.word	0x08003ed3
 8003e94:	08003ea9 	.word	0x08003ea9
 8003e98:	08003ebb 	.word	0x08003ebb
 8003e9c:	08003ed3 	.word	0x08003ed3
 8003ea0:	08003ed3 	.word	0x08003ed3
 8003ea4:	08003ed3 	.word	0x08003ed3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	2101      	movs	r1, #1
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 faa4 	bl	80043fc <RCCEx_PLL2_Config>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003eb8:	e00c      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3324      	adds	r3, #36	; 0x24
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fb4d 	bl	8004560 <RCCEx_PLL3_Config>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003eca:	e003      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed0:	e000      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8003ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed4:	7dfb      	ldrb	r3, [r7, #23]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10a      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eda:	4b80      	ldr	r3, [pc, #512]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ede:	f023 0207 	bic.w	r2, r3, #7
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ee8:	497c      	ldr	r1, [pc, #496]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	658b      	str	r3, [r1, #88]	; 0x58
 8003eee:	e001      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
 8003ef2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0320 	and.w	r3, r3, #32
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d04b      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f0a:	d02e      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x962>
 8003f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f10:	d828      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f16:	d02a      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1c:	d822      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f22:	d026      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003f24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f28:	d81c      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f2e:	d010      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8003f30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f34:	d816      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01d      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003f3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f3e:	d111      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3304      	adds	r3, #4
 8003f44:	2100      	movs	r1, #0
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fa58 	bl	80043fc <RCCEx_PLL2_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f50:	e012      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3324      	adds	r3, #36	; 0x24
 8003f56:	2102      	movs	r1, #2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fb01 	bl	8004560 <RCCEx_PLL3_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f62:	e009      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	75fb      	strb	r3, [r7, #23]
      break;
 8003f68:	e006      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f6a:	bf00      	nop
 8003f6c:	e004      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f6e:	bf00      	nop
 8003f70:	e002      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f72:	bf00      	nop
 8003f74:	e000      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f7e:	4b57      	ldr	r3, [pc, #348]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8c:	4953      	ldr	r1, [pc, #332]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	654b      	str	r3, [r1, #84]	; 0x54
 8003f92:	e001      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
 8003f96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d04b      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003faa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fae:	d02e      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8003fb0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fb4:	d828      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fba:	d02a      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc0:	d822      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003fc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fc6:	d026      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003fc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fcc:	d81c      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd2:	d010      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8003fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd8:	d816      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d01d      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe2:	d111      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fa06 	bl	80043fc <RCCEx_PLL2_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003ff4:	e012      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3324      	adds	r3, #36	; 0x24
 8003ffa:	2102      	movs	r1, #2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 faaf 	bl	8004560 <RCCEx_PLL3_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004006:	e009      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	75fb      	strb	r3, [r7, #23]
      break;
 800400c:	e006      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800400e:	bf00      	nop
 8004010:	e004      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004012:	bf00      	nop
 8004014:	e002      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004016:	bf00      	nop
 8004018:	e000      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800401a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800401c:	7dfb      	ldrb	r3, [r7, #23]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10a      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004022:	4b2e      	ldr	r3, [pc, #184]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004026:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004030:	492a      	ldr	r1, [pc, #168]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004032:	4313      	orrs	r3, r2
 8004034:	658b      	str	r3, [r1, #88]	; 0x58
 8004036:	e001      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004038:	7dfb      	ldrb	r3, [r7, #23]
 800403a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004044:	2b00      	cmp	r3, #0
 8004046:	d04d      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800404e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004052:	d02e      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8004054:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004058:	d828      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800405a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405e:	d02a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004064:	d822      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004066:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800406a:	d026      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800406c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004070:	d81c      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004076:	d010      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8004078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800407c:	d816      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d01d      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004086:	d111      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3304      	adds	r3, #4
 800408c:	2100      	movs	r1, #0
 800408e:	4618      	mov	r0, r3
 8004090:	f000 f9b4 	bl	80043fc <RCCEx_PLL2_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004098:	e012      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3324      	adds	r3, #36	; 0x24
 800409e:	2102      	movs	r1, #2
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fa5d 	bl	8004560 <RCCEx_PLL3_Config>
 80040a6:	4603      	mov	r3, r0
 80040a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040aa:	e009      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	75fb      	strb	r3, [r7, #23]
      break;
 80040b0:	e006      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80040b2:	bf00      	nop
 80040b4:	e004      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80040b6:	bf00      	nop
 80040b8:	e002      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80040ba:	bf00      	nop
 80040bc:	e000      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80040be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10c      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040c6:	4b05      	ldr	r3, [pc, #20]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040d4:	4901      	ldr	r1, [pc, #4]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	658b      	str	r3, [r1, #88]	; 0x58
 80040da:	e003      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80040dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e0:	7dfb      	ldrb	r3, [r7, #23]
 80040e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d018      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f8:	d10a      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3324      	adds	r3, #36	; 0x24
 80040fe:	2102      	movs	r1, #2
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fa2d 	bl	8004560 <RCCEx_PLL3_Config>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004110:	4b8a      	ldr	r3, [pc, #552]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004114:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800411c:	4987      	ldr	r1, [pc, #540]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800411e:	4313      	orrs	r3, r2
 8004120:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0310 	and.w	r3, r3, #16
 800412a:	2b00      	cmp	r3, #0
 800412c:	d01a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004138:	d10a      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3324      	adds	r3, #36	; 0x24
 800413e:	2102      	movs	r1, #2
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fa0d 	bl	8004560 <RCCEx_PLL3_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004150:	4b7a      	ldr	r3, [pc, #488]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004154:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415e:	4977      	ldr	r1, [pc, #476]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004160:	4313      	orrs	r3, r2
 8004162:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d034      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004176:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800417a:	d01d      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800417c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004180:	d817      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418a:	d009      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800418c:	e011      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3304      	adds	r3, #4
 8004192:	2100      	movs	r1, #0
 8004194:	4618      	mov	r0, r3
 8004196:	f000 f931 	bl	80043fc <RCCEx_PLL2_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800419e:	e00c      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3324      	adds	r3, #36	; 0x24
 80041a4:	2102      	movs	r1, #2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 f9da 	bl	8004560 <RCCEx_PLL3_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041b0:	e003      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	75fb      	strb	r3, [r7, #23]
      break;
 80041b6:	e000      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80041b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ba:	7dfb      	ldrb	r3, [r7, #23]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10a      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041c0:	4b5e      	ldr	r3, [pc, #376]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80041c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041ce:	495b      	ldr	r1, [pc, #364]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	658b      	str	r3, [r1, #88]	; 0x58
 80041d4:	e001      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d6:	7dfb      	ldrb	r3, [r7, #23]
 80041d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d033      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041f0:	d01c      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80041f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041f6:	d816      	bhi.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80041f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041fc:	d003      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80041fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004202:	d007      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004204:	e00f      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004206:	4b4d      	ldr	r3, [pc, #308]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	4a4c      	ldr	r2, [pc, #304]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800420c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004210:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004212:	e00c      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3324      	adds	r3, #36	; 0x24
 8004218:	2101      	movs	r1, #1
 800421a:	4618      	mov	r0, r3
 800421c:	f000 f9a0 	bl	8004560 <RCCEx_PLL3_Config>
 8004220:	4603      	mov	r3, r0
 8004222:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004224:	e003      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	75fb      	strb	r3, [r7, #23]
      break;
 800422a:	e000      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800422c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800422e:	7dfb      	ldrb	r3, [r7, #23]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004234:	4b41      	ldr	r3, [pc, #260]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004238:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004242:	493e      	ldr	r1, [pc, #248]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004244:	4313      	orrs	r3, r2
 8004246:	654b      	str	r3, [r1, #84]	; 0x54
 8004248:	e001      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424a:	7dfb      	ldrb	r3, [r7, #23]
 800424c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d029      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8004262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004266:	d007      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004268:	e00f      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800426a:	4b34      	ldr	r3, [pc, #208]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426e:	4a33      	ldr	r2, [pc, #204]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004274:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004276:	e00b      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3304      	adds	r3, #4
 800427c:	2102      	movs	r1, #2
 800427e:	4618      	mov	r0, r3
 8004280:	f000 f8bc 	bl	80043fc <RCCEx_PLL2_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004288:	e002      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	75fb      	strb	r3, [r7, #23]
      break;
 800428e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004290:	7dfb      	ldrb	r3, [r7, #23]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d109      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004296:	4b29      	ldr	r3, [pc, #164]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a2:	4926      	ldr	r1, [pc, #152]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042a8:	e001      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
 80042ac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3324      	adds	r3, #36	; 0x24
 80042be:	2102      	movs	r1, #2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 f94d 	bl	8004560 <RCCEx_PLL3_Config>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d033      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042e4:	d017      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80042e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ea:	d811      	bhi.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80042ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f0:	d013      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 80042f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f6:	d80b      	bhi.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d010      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 80042fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004300:	d106      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004302:	4b0e      	ldr	r3, [pc, #56]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	4a0d      	ldr	r2, [pc, #52]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800430c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800430e:	e007      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	75fb      	strb	r3, [r7, #23]
      break;
 8004314:	e004      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004316:	bf00      	nop
 8004318:	e002      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800431a:	bf00      	nop
 800431c:	e000      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800431e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004320:	7dfb      	ldrb	r3, [r7, #23]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10c      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004332:	4902      	ldr	r1, [pc, #8]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004334:	4313      	orrs	r3, r2
 8004336:	654b      	str	r3, [r1, #84]	; 0x54
 8004338:	e004      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800433a:	bf00      	nop
 800433c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004350:	4b29      	ldr	r3, [pc, #164]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004354:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800435c:	4926      	ldr	r1, [pc, #152]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800435e:	4313      	orrs	r3, r2
 8004360:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d008      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800436e:	4b22      	ldr	r3, [pc, #136]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004372:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800437a:	491f      	ldr	r1, [pc, #124]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800437c:	4313      	orrs	r3, r2
 800437e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00d      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800438c:	4b1a      	ldr	r3, [pc, #104]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	4a19      	ldr	r2, [pc, #100]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004392:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004396:	6113      	str	r3, [r2, #16]
 8004398:	4b17      	ldr	r3, [pc, #92]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043a2:	4915      	ldr	r1, [pc, #84]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	da08      	bge.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80043b0:	4b11      	ldr	r3, [pc, #68]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043bc:	490e      	ldr	r1, [pc, #56]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043ce:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043dc:	4906      	ldr	r1, [pc, #24]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80043e2:	7dbb      	ldrb	r3, [r7, #22]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	e000      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	58024400 	.word	0x58024400

080043fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800440a:	4b53      	ldr	r3, [pc, #332]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	2b03      	cmp	r3, #3
 8004414:	d101      	bne.n	800441a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e099      	b.n	800454e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800441a:	4b4f      	ldr	r3, [pc, #316]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a4e      	ldr	r2, [pc, #312]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 8004420:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004426:	f7fc fbc1 	bl	8000bac <HAL_GetTick>
 800442a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800442c:	e008      	b.n	8004440 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800442e:	f7fc fbbd 	bl	8000bac <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e086      	b.n	800454e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004440:	4b45      	ldr	r3, [pc, #276]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f0      	bne.n	800442e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800444c:	4b42      	ldr	r3, [pc, #264]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	031b      	lsls	r3, r3, #12
 800445a:	493f      	ldr	r1, [pc, #252]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 800445c:	4313      	orrs	r3, r2
 800445e:	628b      	str	r3, [r1, #40]	; 0x28
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	3b01      	subs	r3, #1
 8004466:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	3b01      	subs	r3, #1
 8004470:	025b      	lsls	r3, r3, #9
 8004472:	b29b      	uxth	r3, r3
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	3b01      	subs	r3, #1
 800447c:	041b      	lsls	r3, r3, #16
 800447e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	3b01      	subs	r3, #1
 800448a:	061b      	lsls	r3, r3, #24
 800448c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004490:	4931      	ldr	r1, [pc, #196]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 8004492:	4313      	orrs	r3, r2
 8004494:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004496:	4b30      	ldr	r3, [pc, #192]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	492d      	ldr	r1, [pc, #180]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80044a8:	4b2b      	ldr	r3, [pc, #172]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	f023 0220 	bic.w	r2, r3, #32
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	4928      	ldr	r1, [pc, #160]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80044ba:	4b27      	ldr	r3, [pc, #156]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	4a26      	ldr	r2, [pc, #152]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 80044c0:	f023 0310 	bic.w	r3, r3, #16
 80044c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80044c6:	4b24      	ldr	r3, [pc, #144]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 80044c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044ca:	4b24      	ldr	r3, [pc, #144]	; (800455c <RCCEx_PLL2_Config+0x160>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	69d2      	ldr	r2, [r2, #28]
 80044d2:	00d2      	lsls	r2, r2, #3
 80044d4:	4920      	ldr	r1, [pc, #128]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80044da:	4b1f      	ldr	r3, [pc, #124]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	4a1e      	ldr	r2, [pc, #120]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 80044e0:	f043 0310 	orr.w	r3, r3, #16
 80044e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d106      	bne.n	80044fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80044ec:	4b1a      	ldr	r3, [pc, #104]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	4a19      	ldr	r2, [pc, #100]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 80044f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044f8:	e00f      	b.n	800451a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d106      	bne.n	800450e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004500:	4b15      	ldr	r3, [pc, #84]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	4a14      	ldr	r2, [pc, #80]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 8004506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800450a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800450c:	e005      	b.n	800451a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800450e:	4b12      	ldr	r3, [pc, #72]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 8004510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004512:	4a11      	ldr	r2, [pc, #68]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 8004514:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004518:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800451a:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a0e      	ldr	r2, [pc, #56]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 8004520:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004526:	f7fc fb41 	bl	8000bac <HAL_GetTick>
 800452a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800452c:	e008      	b.n	8004540 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800452e:	f7fc fb3d 	bl	8000bac <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e006      	b.n	800454e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004540:	4b05      	ldr	r3, [pc, #20]	; (8004558 <RCCEx_PLL2_Config+0x15c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800454c:	7bfb      	ldrb	r3, [r7, #15]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	58024400 	.word	0x58024400
 800455c:	ffff0007 	.word	0xffff0007

08004560 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800456e:	4b53      	ldr	r3, [pc, #332]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 8004570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	2b03      	cmp	r3, #3
 8004578:	d101      	bne.n	800457e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e099      	b.n	80046b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800457e:	4b4f      	ldr	r3, [pc, #316]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a4e      	ldr	r2, [pc, #312]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 8004584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004588:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800458a:	f7fc fb0f 	bl	8000bac <HAL_GetTick>
 800458e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004590:	e008      	b.n	80045a4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004592:	f7fc fb0b 	bl	8000bac <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e086      	b.n	80046b2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045a4:	4b45      	ldr	r3, [pc, #276]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1f0      	bne.n	8004592 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80045b0:	4b42      	ldr	r3, [pc, #264]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	051b      	lsls	r3, r3, #20
 80045be:	493f      	ldr	r1, [pc, #252]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	628b      	str	r3, [r1, #40]	; 0x28
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	3b01      	subs	r3, #1
 80045ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	025b      	lsls	r3, r3, #9
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	3b01      	subs	r3, #1
 80045e0:	041b      	lsls	r3, r3, #16
 80045e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	061b      	lsls	r3, r3, #24
 80045f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045f4:	4931      	ldr	r1, [pc, #196]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80045fa:	4b30      	ldr	r3, [pc, #192]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	492d      	ldr	r1, [pc, #180]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 8004608:	4313      	orrs	r3, r2
 800460a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800460c:	4b2b      	ldr	r3, [pc, #172]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	4928      	ldr	r1, [pc, #160]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 800461a:	4313      	orrs	r3, r2
 800461c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800461e:	4b27      	ldr	r3, [pc, #156]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004622:	4a26      	ldr	r2, [pc, #152]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 8004624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004628:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800462a:	4b24      	ldr	r3, [pc, #144]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 800462c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800462e:	4b24      	ldr	r3, [pc, #144]	; (80046c0 <RCCEx_PLL3_Config+0x160>)
 8004630:	4013      	ands	r3, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	69d2      	ldr	r2, [r2, #28]
 8004636:	00d2      	lsls	r2, r2, #3
 8004638:	4920      	ldr	r1, [pc, #128]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 800463a:	4313      	orrs	r3, r2
 800463c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800463e:	4b1f      	ldr	r3, [pc, #124]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	4a1e      	ldr	r2, [pc, #120]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 8004644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004648:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d106      	bne.n	800465e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004650:	4b1a      	ldr	r3, [pc, #104]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	4a19      	ldr	r2, [pc, #100]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 8004656:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800465a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800465c:	e00f      	b.n	800467e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d106      	bne.n	8004672 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004664:	4b15      	ldr	r3, [pc, #84]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	4a14      	ldr	r2, [pc, #80]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 800466a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800466e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004670:	e005      	b.n	800467e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004672:	4b12      	ldr	r3, [pc, #72]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	4a11      	ldr	r2, [pc, #68]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 8004678:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800467c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800467e:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a0e      	ldr	r2, [pc, #56]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 8004684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800468a:	f7fc fa8f 	bl	8000bac <HAL_GetTick>
 800468e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004690:	e008      	b.n	80046a4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004692:	f7fc fa8b 	bl	8000bac <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e006      	b.n	80046b2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <RCCEx_PLL3_Config+0x15c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	58024400 	.word	0x58024400
 80046c0:	ffff0007 	.word	0xffff0007

080046c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046c4:	b084      	sub	sp, #16
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b084      	sub	sp, #16
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	f107 001c 	add.w	r0, r7, #28
 80046d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d120      	bne.n	800471e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	4b2a      	ldr	r3, [pc, #168]	; (8004798 <USB_CoreInit+0xd4>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004702:	2b01      	cmp	r3, #1
 8004704:	d105      	bne.n	8004712 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f001 fc04 	bl	8005f20 <USB_CoreReset>
 8004718:	4603      	mov	r3, r0
 800471a:	73fb      	strb	r3, [r7, #15]
 800471c:	e01a      	b.n	8004754 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f001 fbf8 	bl	8005f20 <USB_CoreReset>
 8004730:	4603      	mov	r3, r0
 8004732:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004736:	2b00      	cmp	r3, #0
 8004738:	d106      	bne.n	8004748 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	639a      	str	r2, [r3, #56]	; 0x38
 8004746:	e005      	b.n	8004754 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	2b01      	cmp	r3, #1
 8004758:	d116      	bne.n	8004788 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475e:	b29a      	uxth	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004768:	4b0c      	ldr	r3, [pc, #48]	; (800479c <USB_CoreInit+0xd8>)
 800476a:	4313      	orrs	r3, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f043 0206 	orr.w	r2, r3, #6
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f043 0220 	orr.w	r2, r3, #32
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004788:	7bfb      	ldrb	r3, [r7, #15]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004794:	b004      	add	sp, #16
 8004796:	4770      	bx	lr
 8004798:	ffbdffbf 	.word	0xffbdffbf
 800479c:	03ee0000 	.word	0x03ee0000

080047a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	4613      	mov	r3, r2
 80047ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80047ae:	79fb      	ldrb	r3, [r7, #7]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d165      	bne.n	8004880 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4a41      	ldr	r2, [pc, #260]	; (80048bc <USB_SetTurnaroundTime+0x11c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d906      	bls.n	80047ca <USB_SetTurnaroundTime+0x2a>
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4a40      	ldr	r2, [pc, #256]	; (80048c0 <USB_SetTurnaroundTime+0x120>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d202      	bcs.n	80047ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80047c4:	230f      	movs	r3, #15
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e062      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	4a3c      	ldr	r2, [pc, #240]	; (80048c0 <USB_SetTurnaroundTime+0x120>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d306      	bcc.n	80047e0 <USB_SetTurnaroundTime+0x40>
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4a3b      	ldr	r2, [pc, #236]	; (80048c4 <USB_SetTurnaroundTime+0x124>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d202      	bcs.n	80047e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80047da:	230e      	movs	r3, #14
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	e057      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4a38      	ldr	r2, [pc, #224]	; (80048c4 <USB_SetTurnaroundTime+0x124>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d306      	bcc.n	80047f6 <USB_SetTurnaroundTime+0x56>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4a37      	ldr	r2, [pc, #220]	; (80048c8 <USB_SetTurnaroundTime+0x128>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d202      	bcs.n	80047f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80047f0:	230d      	movs	r3, #13
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	e04c      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4a33      	ldr	r2, [pc, #204]	; (80048c8 <USB_SetTurnaroundTime+0x128>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d306      	bcc.n	800480c <USB_SetTurnaroundTime+0x6c>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4a32      	ldr	r2, [pc, #200]	; (80048cc <USB_SetTurnaroundTime+0x12c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d802      	bhi.n	800480c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004806:	230c      	movs	r3, #12
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	e041      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4a2f      	ldr	r2, [pc, #188]	; (80048cc <USB_SetTurnaroundTime+0x12c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d906      	bls.n	8004822 <USB_SetTurnaroundTime+0x82>
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4a2e      	ldr	r2, [pc, #184]	; (80048d0 <USB_SetTurnaroundTime+0x130>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d802      	bhi.n	8004822 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800481c:	230b      	movs	r3, #11
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	e036      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	4a2a      	ldr	r2, [pc, #168]	; (80048d0 <USB_SetTurnaroundTime+0x130>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d906      	bls.n	8004838 <USB_SetTurnaroundTime+0x98>
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4a29      	ldr	r2, [pc, #164]	; (80048d4 <USB_SetTurnaroundTime+0x134>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d802      	bhi.n	8004838 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004832:	230a      	movs	r3, #10
 8004834:	617b      	str	r3, [r7, #20]
 8004836:	e02b      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4a26      	ldr	r2, [pc, #152]	; (80048d4 <USB_SetTurnaroundTime+0x134>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d906      	bls.n	800484e <USB_SetTurnaroundTime+0xae>
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4a25      	ldr	r2, [pc, #148]	; (80048d8 <USB_SetTurnaroundTime+0x138>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d202      	bcs.n	800484e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004848:	2309      	movs	r3, #9
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	e020      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	4a21      	ldr	r2, [pc, #132]	; (80048d8 <USB_SetTurnaroundTime+0x138>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d306      	bcc.n	8004864 <USB_SetTurnaroundTime+0xc4>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4a20      	ldr	r2, [pc, #128]	; (80048dc <USB_SetTurnaroundTime+0x13c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d802      	bhi.n	8004864 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800485e:	2308      	movs	r3, #8
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	e015      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4a1d      	ldr	r2, [pc, #116]	; (80048dc <USB_SetTurnaroundTime+0x13c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d906      	bls.n	800487a <USB_SetTurnaroundTime+0xda>
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4a1c      	ldr	r2, [pc, #112]	; (80048e0 <USB_SetTurnaroundTime+0x140>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d202      	bcs.n	800487a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004874:	2307      	movs	r3, #7
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	e00a      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800487a:	2306      	movs	r3, #6
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	e007      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004880:	79fb      	ldrb	r3, [r7, #7]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d102      	bne.n	800488c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004886:	2309      	movs	r3, #9
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	e001      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800488c:	2309      	movs	r3, #9
 800488e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	029b      	lsls	r3, r3, #10
 80048a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	00d8acbf 	.word	0x00d8acbf
 80048c0:	00e4e1c0 	.word	0x00e4e1c0
 80048c4:	00f42400 	.word	0x00f42400
 80048c8:	01067380 	.word	0x01067380
 80048cc:	011a499f 	.word	0x011a499f
 80048d0:	01312cff 	.word	0x01312cff
 80048d4:	014ca43f 	.word	0x014ca43f
 80048d8:	016e3600 	.word	0x016e3600
 80048dc:	01a6ab1f 	.word	0x01a6ab1f
 80048e0:	01e84800 	.word	0x01e84800

080048e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f043 0201 	orr.w	r2, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f023 0201 	bic.w	r2, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d115      	bne.n	8004976 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004956:	2001      	movs	r0, #1
 8004958:	f7fc f934 	bl	8000bc4 <HAL_Delay>
      ms++;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3301      	adds	r3, #1
 8004960:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f001 fa4b 	bl	8005dfe <USB_GetMode>
 8004968:	4603      	mov	r3, r0
 800496a:	2b01      	cmp	r3, #1
 800496c:	d01e      	beq.n	80049ac <USB_SetCurrentMode+0x84>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2b31      	cmp	r3, #49	; 0x31
 8004972:	d9f0      	bls.n	8004956 <USB_SetCurrentMode+0x2e>
 8004974:	e01a      	b.n	80049ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004976:	78fb      	ldrb	r3, [r7, #3]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d115      	bne.n	80049a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004988:	2001      	movs	r0, #1
 800498a:	f7fc f91b 	bl	8000bc4 <HAL_Delay>
      ms++;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3301      	adds	r3, #1
 8004992:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f001 fa32 	bl	8005dfe <USB_GetMode>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d005      	beq.n	80049ac <USB_SetCurrentMode+0x84>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b31      	cmp	r3, #49	; 0x31
 80049a4:	d9f0      	bls.n	8004988 <USB_SetCurrentMode+0x60>
 80049a6:	e001      	b.n	80049ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e005      	b.n	80049b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b32      	cmp	r3, #50	; 0x32
 80049b0:	d101      	bne.n	80049b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049c0:	b084      	sub	sp, #16
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b086      	sub	sp, #24
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80049ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049da:	2300      	movs	r3, #0
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	e009      	b.n	80049f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	3340      	adds	r3, #64	; 0x40
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	2200      	movs	r2, #0
 80049ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	3301      	adds	r3, #1
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b0e      	cmp	r3, #14
 80049f8:	d9f2      	bls.n	80049e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d11c      	bne.n	8004a3a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a0e:	f043 0302 	orr.w	r3, r3, #2
 8004a12:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	e005      	b.n	8004a46 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	2300      	movs	r3, #0
 8004a50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a58:	4619      	mov	r1, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a60:	461a      	mov	r2, r3
 8004a62:	680b      	ldr	r3, [r1, #0]
 8004a64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d10c      	bne.n	8004a86 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d104      	bne.n	8004a7c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a72:	2100      	movs	r1, #0
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f965 	bl	8004d44 <USB_SetDevSpeed>
 8004a7a:	e008      	b.n	8004a8e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f960 	bl	8004d44 <USB_SetDevSpeed>
 8004a84:	e003      	b.n	8004a8e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a86:	2103      	movs	r1, #3
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f95b 	bl	8004d44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a8e:	2110      	movs	r1, #16
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f8f3 	bl	8004c7c <USB_FlushTxFifo>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f91f 	bl	8004ce4 <USB_FlushRxFifo>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	2300      	movs	r3, #0
 8004aba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ace:	461a      	mov	r2, r3
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	613b      	str	r3, [r7, #16]
 8004ad8:	e043      	b.n	8004b62 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004af0:	d118      	bne.n	8004b24 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b04:	461a      	mov	r2, r3
 8004b06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	e013      	b.n	8004b36 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	e008      	b.n	8004b36 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b30:	461a      	mov	r2, r3
 8004b32:	2300      	movs	r3, #0
 8004b34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b42:	461a      	mov	r2, r3
 8004b44:	2300      	movs	r3, #0
 8004b46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b54:	461a      	mov	r2, r3
 8004b56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d3b7      	bcc.n	8004ada <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	613b      	str	r3, [r7, #16]
 8004b6e:	e043      	b.n	8004bf8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b86:	d118      	bne.n	8004bba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10a      	bne.n	8004ba4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	e013      	b.n	8004bcc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	e008      	b.n	8004bcc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	2300      	movs	r3, #0
 8004bca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd8:	461a      	mov	r2, r3
 8004bda:	2300      	movs	r3, #0
 8004bdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bea:	461a      	mov	r2, r3
 8004bec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bf0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d3b7      	bcc.n	8004b70 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d105      	bne.n	8004c34 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	f043 0210 	orr.w	r2, r3, #16
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699a      	ldr	r2, [r3, #24]
 8004c38:	4b0e      	ldr	r3, [pc, #56]	; (8004c74 <USB_DevInit+0x2b4>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	f043 0208 	orr.w	r2, r3, #8
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d105      	bne.n	8004c64 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699a      	ldr	r2, [r3, #24]
 8004c5c:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <USB_DevInit+0x2b8>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c70:	b004      	add	sp, #16
 8004c72:	4770      	bx	lr
 8004c74:	803c3800 	.word	0x803c3800
 8004c78:	40000004 	.word	0x40000004

08004c7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4a13      	ldr	r2, [pc, #76]	; (8004ce0 <USB_FlushTxFifo+0x64>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d901      	bls.n	8004c9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e01b      	b.n	8004cd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	daf2      	bge.n	8004c8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	019b      	lsls	r3, r3, #6
 8004cac:	f043 0220 	orr.w	r2, r3, #32
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4a08      	ldr	r2, [pc, #32]	; (8004ce0 <USB_FlushTxFifo+0x64>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d901      	bls.n	8004cc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e006      	b.n	8004cd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b20      	cmp	r3, #32
 8004cd0:	d0f0      	beq.n	8004cb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	00030d40 	.word	0x00030d40

08004ce4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4a11      	ldr	r2, [pc, #68]	; (8004d40 <USB_FlushRxFifo+0x5c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e018      	b.n	8004d34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	daf2      	bge.n	8004cf0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2210      	movs	r2, #16
 8004d12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3301      	adds	r3, #1
 8004d18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4a08      	ldr	r2, [pc, #32]	; (8004d40 <USB_FlushRxFifo+0x5c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d901      	bls.n	8004d26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e006      	b.n	8004d34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f003 0310 	and.w	r3, r3, #16
 8004d2e:	2b10      	cmp	r3, #16
 8004d30:	d0f0      	beq.n	8004d14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	00030d40 	.word	0x00030d40

08004d44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	68f9      	ldr	r1, [r7, #12]
 8004d60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d64:	4313      	orrs	r3, r2
 8004d66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b087      	sub	sp, #28
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 0306 	and.w	r3, r3, #6
 8004d8e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d102      	bne.n	8004d9c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004d96:	2300      	movs	r3, #0
 8004d98:	75fb      	strb	r3, [r7, #23]
 8004d9a:	e00a      	b.n	8004db2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d002      	beq.n	8004da8 <USB_GetDevSpeed+0x32>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b06      	cmp	r3, #6
 8004da6:	d102      	bne.n	8004dae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004da8:	2302      	movs	r3, #2
 8004daa:	75fb      	strb	r3, [r7, #23]
 8004dac:	e001      	b.n	8004db2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004dae:	230f      	movs	r3, #15
 8004db0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	371c      	adds	r7, #28
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	785b      	ldrb	r3, [r3, #1]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d139      	bne.n	8004e50 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de2:	69da      	ldr	r2, [r3, #28]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	f003 030f 	and.w	r3, r3, #15
 8004dec:	2101      	movs	r1, #1
 8004dee:	fa01 f303 	lsl.w	r3, r1, r3
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	68f9      	ldr	r1, [r7, #12]
 8004df6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d153      	bne.n	8004ebc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	791b      	ldrb	r3, [r3, #4]
 8004e2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	059b      	lsls	r3, r3, #22
 8004e36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	0159      	lsls	r1, r3, #5
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	440b      	add	r3, r1
 8004e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e46:	4619      	mov	r1, r3
 8004e48:	4b20      	ldr	r3, [pc, #128]	; (8004ecc <USB_ActivateEndpoint+0x10c>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	600b      	str	r3, [r1, #0]
 8004e4e:	e035      	b.n	8004ebc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e56:	69da      	ldr	r2, [r3, #28]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	2101      	movs	r1, #1
 8004e62:	fa01 f303 	lsl.w	r3, r1, r3
 8004e66:	041b      	lsls	r3, r3, #16
 8004e68:	68f9      	ldr	r1, [r7, #12]
 8004e6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d119      	bne.n	8004ebc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	791b      	ldrb	r3, [r3, #4]
 8004ea2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	0159      	lsls	r1, r3, #5
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	440b      	add	r3, r1
 8004eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <USB_ActivateEndpoint+0x10c>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	10008000 	.word	0x10008000

08004ed0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	785b      	ldrb	r3, [r3, #1]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d161      	bne.n	8004fb0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004efe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f02:	d11f      	bne.n	8004f44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	0151      	lsls	r1, r2, #5
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	440a      	add	r2, r1
 8004f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	2101      	movs	r1, #1
 8004f56:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	68f9      	ldr	r1, [r7, #12]
 8004f60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f64:	4013      	ands	r3, r2
 8004f66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	2101      	movs	r1, #1
 8004f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	43db      	mvns	r3, r3
 8004f82:	68f9      	ldr	r1, [r7, #12]
 8004f84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	0159      	lsls	r1, r3, #5
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	440b      	add	r3, r1
 8004fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4b35      	ldr	r3, [pc, #212]	; (8005080 <USB_DeactivateEndpoint+0x1b0>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	600b      	str	r3, [r1, #0]
 8004fae:	e060      	b.n	8005072 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fc6:	d11f      	bne.n	8005008 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	0151      	lsls	r1, r2, #5
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	440a      	add	r2, r1
 8004fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fe6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	0151      	lsls	r1, r2, #5
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	440a      	add	r2, r1
 8004ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005002:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005006:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	2101      	movs	r1, #1
 800501a:	fa01 f303 	lsl.w	r3, r1, r3
 800501e:	041b      	lsls	r3, r3, #16
 8005020:	43db      	mvns	r3, r3
 8005022:	68f9      	ldr	r1, [r7, #12]
 8005024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005028:	4013      	ands	r3, r2
 800502a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	2101      	movs	r1, #1
 800503e:	fa01 f303 	lsl.w	r3, r1, r3
 8005042:	041b      	lsls	r3, r3, #16
 8005044:	43db      	mvns	r3, r3
 8005046:	68f9      	ldr	r1, [r7, #12]
 8005048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800504c:	4013      	ands	r3, r2
 800504e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	0159      	lsls	r1, r3, #5
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	440b      	add	r3, r1
 8005066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506a:	4619      	mov	r1, r3
 800506c:	4b05      	ldr	r3, [pc, #20]	; (8005084 <USB_DeactivateEndpoint+0x1b4>)
 800506e:	4013      	ands	r3, r2
 8005070:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	ec337800 	.word	0xec337800
 8005084:	eff37800 	.word	0xeff37800

08005088 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08a      	sub	sp, #40	; 0x28
 800508c:	af02      	add	r7, sp, #8
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	4613      	mov	r3, r2
 8005094:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	785b      	ldrb	r3, [r3, #1]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	f040 8163 	bne.w	8005370 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d132      	bne.n	8005118 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050be:	691a      	ldr	r2, [r3, #16]
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	0159      	lsls	r1, r3, #5
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	440b      	add	r3, r1
 80050c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050cc:	4619      	mov	r1, r3
 80050ce:	4ba5      	ldr	r3, [pc, #660]	; (8005364 <USB_EPStartXfer+0x2dc>)
 80050d0:	4013      	ands	r3, r2
 80050d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	0151      	lsls	r1, r2, #5
 80050e6:	69fa      	ldr	r2, [r7, #28]
 80050e8:	440a      	add	r2, r1
 80050ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	0159      	lsls	r1, r3, #5
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	440b      	add	r3, r1
 800510a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510e:	4619      	mov	r1, r3
 8005110:	4b95      	ldr	r3, [pc, #596]	; (8005368 <USB_EPStartXfer+0x2e0>)
 8005112:	4013      	ands	r3, r2
 8005114:	610b      	str	r3, [r1, #16]
 8005116:	e074      	b.n	8005202 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005124:	691a      	ldr	r2, [r3, #16]
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	0159      	lsls	r1, r3, #5
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	440b      	add	r3, r1
 800512e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005132:	4619      	mov	r1, r3
 8005134:	4b8c      	ldr	r3, [pc, #560]	; (8005368 <USB_EPStartXfer+0x2e0>)
 8005136:	4013      	ands	r3, r2
 8005138:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	0159      	lsls	r1, r3, #5
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	440b      	add	r3, r1
 8005150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005154:	4619      	mov	r1, r3
 8005156:	4b83      	ldr	r3, [pc, #524]	; (8005364 <USB_EPStartXfer+0x2dc>)
 8005158:	4013      	ands	r3, r2
 800515a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005168:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	6999      	ldr	r1, [r3, #24]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	440b      	add	r3, r1
 8005174:	1e59      	subs	r1, r3, #1
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	fbb1 f3f3 	udiv	r3, r1, r3
 800517e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005180:	4b7a      	ldr	r3, [pc, #488]	; (800536c <USB_EPStartXfer+0x2e4>)
 8005182:	400b      	ands	r3, r1
 8005184:	69b9      	ldr	r1, [r7, #24]
 8005186:	0148      	lsls	r0, r1, #5
 8005188:	69f9      	ldr	r1, [r7, #28]
 800518a:	4401      	add	r1, r0
 800518c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005190:	4313      	orrs	r3, r2
 8005192:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a0:	691a      	ldr	r2, [r3, #16]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051aa:	69b9      	ldr	r1, [r7, #24]
 80051ac:	0148      	lsls	r0, r1, #5
 80051ae:	69f9      	ldr	r1, [r7, #28]
 80051b0:	4401      	add	r1, r0
 80051b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051b6:	4313      	orrs	r3, r2
 80051b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	791b      	ldrb	r3, [r3, #4]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d11f      	bne.n	8005202 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80051e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	0151      	lsls	r1, r2, #5
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	440a      	add	r2, r1
 80051f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005200:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005202:	79fb      	ldrb	r3, [r7, #7]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d14b      	bne.n	80052a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d009      	beq.n	8005224 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521c:	461a      	mov	r2, r3
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	791b      	ldrb	r3, [r3, #4]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d128      	bne.n	800527e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005238:	2b00      	cmp	r3, #0
 800523a:	d110      	bne.n	800525e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	0151      	lsls	r1, r2, #5
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	440a      	add	r2, r1
 8005252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005256:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800525a:	6013      	str	r3, [r2, #0]
 800525c:	e00f      	b.n	800527e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	0151      	lsls	r1, r2, #5
 8005270:	69fa      	ldr	r2, [r7, #28]
 8005272:	440a      	add	r2, r1
 8005274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	0151      	lsls	r1, r2, #5
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	440a      	add	r2, r1
 8005294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005298:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	e137      	b.n	8005510 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	0151      	lsls	r1, r2, #5
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	440a      	add	r2, r1
 80052b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	791b      	ldrb	r3, [r3, #4]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d015      	beq.n	80052f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 811f 	beq.w	8005510 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	2101      	movs	r1, #1
 80052e4:	fa01 f303 	lsl.w	r3, r1, r3
 80052e8:	69f9      	ldr	r1, [r7, #28]
 80052ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052ee:	4313      	orrs	r3, r2
 80052f0:	634b      	str	r3, [r1, #52]	; 0x34
 80052f2:	e10d      	b.n	8005510 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005300:	2b00      	cmp	r3, #0
 8005302:	d110      	bne.n	8005326 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	0151      	lsls	r1, r2, #5
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	440a      	add	r2, r1
 800531a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800531e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	e00f      	b.n	8005346 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	0151      	lsls	r1, r2, #5
 8005338:	69fa      	ldr	r2, [r7, #28]
 800533a:	440a      	add	r2, r1
 800533c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005344:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	6919      	ldr	r1, [r3, #16]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	781a      	ldrb	r2, [r3, #0]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	b298      	uxth	r0, r3
 8005354:	79fb      	ldrb	r3, [r7, #7]
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	4603      	mov	r3, r0
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 faea 	bl	8005934 <USB_WritePacket>
 8005360:	e0d6      	b.n	8005510 <USB_EPStartXfer+0x488>
 8005362:	bf00      	nop
 8005364:	e007ffff 	.word	0xe007ffff
 8005368:	fff80000 	.word	0xfff80000
 800536c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537c:	691a      	ldr	r2, [r3, #16]
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	0159      	lsls	r1, r3, #5
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	440b      	add	r3, r1
 8005386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538a:	4619      	mov	r1, r3
 800538c:	4b63      	ldr	r3, [pc, #396]	; (800551c <USB_EPStartXfer+0x494>)
 800538e:	4013      	ands	r3, r2
 8005390:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	0159      	lsls	r1, r3, #5
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	440b      	add	r3, r1
 80053a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ac:	4619      	mov	r1, r3
 80053ae:	4b5c      	ldr	r3, [pc, #368]	; (8005520 <USB_EPStartXfer+0x498>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d123      	bne.n	8005404 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d2:	69b9      	ldr	r1, [r7, #24]
 80053d4:	0148      	lsls	r0, r1, #5
 80053d6:	69f9      	ldr	r1, [r7, #28]
 80053d8:	4401      	add	r1, r0
 80053da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053de:	4313      	orrs	r3, r2
 80053e0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	0151      	lsls	r1, r2, #5
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	440a      	add	r2, r1
 80053f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005400:	6113      	str	r3, [r2, #16]
 8005402:	e037      	b.n	8005474 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	699a      	ldr	r2, [r3, #24]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	4413      	add	r3, r2
 800540e:	1e5a      	subs	r2, r3, #1
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	fbb2 f3f3 	udiv	r3, r2, r3
 8005418:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	8afa      	ldrh	r2, [r7, #22]
 8005420:	fb03 f202 	mul.w	r2, r3, r2
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	8afb      	ldrh	r3, [r7, #22]
 8005438:	04d9      	lsls	r1, r3, #19
 800543a:	4b3a      	ldr	r3, [pc, #232]	; (8005524 <USB_EPStartXfer+0x49c>)
 800543c:	400b      	ands	r3, r1
 800543e:	69b9      	ldr	r1, [r7, #24]
 8005440:	0148      	lsls	r0, r1, #5
 8005442:	69f9      	ldr	r1, [r7, #28]
 8005444:	4401      	add	r1, r0
 8005446:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800544a:	4313      	orrs	r3, r2
 800544c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005464:	69b9      	ldr	r1, [r7, #24]
 8005466:	0148      	lsls	r0, r1, #5
 8005468:	69f9      	ldr	r1, [r7, #28]
 800546a:	4401      	add	r1, r0
 800546c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005470:	4313      	orrs	r3, r2
 8005472:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d10d      	bne.n	8005496 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d009      	beq.n	8005496 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	6919      	ldr	r1, [r3, #16]
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005492:	460a      	mov	r2, r1
 8005494:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	791b      	ldrb	r3, [r3, #4]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d128      	bne.n	80054f0 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d110      	bne.n	80054d0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	0151      	lsls	r1, r2, #5
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	440a      	add	r2, r1
 80054c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	e00f      	b.n	80054f0 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	0151      	lsls	r1, r2, #5
 8005502:	69fa      	ldr	r2, [r7, #28]
 8005504:	440a      	add	r2, r1
 8005506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800550a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800550e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3720      	adds	r7, #32
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	fff80000 	.word	0xfff80000
 8005520:	e007ffff 	.word	0xe007ffff
 8005524:	1ff80000 	.word	0x1ff80000

08005528 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	4613      	mov	r3, r2
 8005534:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	785b      	ldrb	r3, [r3, #1]
 8005544:	2b01      	cmp	r3, #1
 8005546:	f040 80ce 	bne.w	80056e6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d132      	bne.n	80055b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	0159      	lsls	r1, r3, #5
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	440b      	add	r3, r1
 8005568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556c:	4619      	mov	r1, r3
 800556e:	4b9a      	ldr	r3, [pc, #616]	; (80057d8 <USB_EP0StartXfer+0x2b0>)
 8005570:	4013      	ands	r3, r2
 8005572:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	0151      	lsls	r1, r2, #5
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	440a      	add	r2, r1
 800558a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005592:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a0:	691a      	ldr	r2, [r3, #16]
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	0159      	lsls	r1, r3, #5
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	440b      	add	r3, r1
 80055aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ae:	4619      	mov	r1, r3
 80055b0:	4b8a      	ldr	r3, [pc, #552]	; (80057dc <USB_EP0StartXfer+0x2b4>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	610b      	str	r3, [r1, #16]
 80055b6:	e04e      	b.n	8005656 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c4:	691a      	ldr	r2, [r3, #16]
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	0159      	lsls	r1, r3, #5
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	440b      	add	r3, r1
 80055ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d2:	4619      	mov	r1, r3
 80055d4:	4b81      	ldr	r3, [pc, #516]	; (80057dc <USB_EP0StartXfer+0x2b4>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	0159      	lsls	r1, r3, #5
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	440b      	add	r3, r1
 80055f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f4:	4619      	mov	r1, r3
 80055f6:	4b78      	ldr	r3, [pc, #480]	; (80057d8 <USB_EP0StartXfer+0x2b0>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	699a      	ldr	r2, [r3, #24]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	429a      	cmp	r2, r3
 8005606:	d903      	bls.n	8005610 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	4413      	add	r3, r2
 8005618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	0151      	lsls	r1, r2, #5
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	440a      	add	r2, r1
 8005626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800562a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800562e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005646:	6939      	ldr	r1, [r7, #16]
 8005648:	0148      	lsls	r0, r1, #5
 800564a:	6979      	ldr	r1, [r7, #20]
 800564c:	4401      	add	r1, r0
 800564e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005652:	4313      	orrs	r3, r2
 8005654:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d11e      	bne.n	800569a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d009      	beq.n	8005678 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005670:	461a      	mov	r2, r3
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	0151      	lsls	r1, r2, #5
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	440a      	add	r2, r1
 800568e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005692:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	e097      	b.n	80057ca <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	0151      	lsls	r1, r2, #5
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	440a      	add	r2, r1
 80056b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056b8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 8083 	beq.w	80057ca <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	2101      	movs	r1, #1
 80056d6:	fa01 f303 	lsl.w	r3, r1, r3
 80056da:	6979      	ldr	r1, [r7, #20]
 80056dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056e0:	4313      	orrs	r3, r2
 80056e2:	634b      	str	r3, [r1, #52]	; 0x34
 80056e4:	e071      	b.n	80057ca <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f2:	691a      	ldr	r2, [r3, #16]
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	0159      	lsls	r1, r3, #5
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	440b      	add	r3, r1
 80056fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005700:	4619      	mov	r1, r3
 8005702:	4b36      	ldr	r3, [pc, #216]	; (80057dc <USB_EP0StartXfer+0x2b4>)
 8005704:	4013      	ands	r3, r2
 8005706:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	0159      	lsls	r1, r3, #5
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	440b      	add	r3, r1
 800571e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005722:	4619      	mov	r1, r3
 8005724:	4b2c      	ldr	r3, [pc, #176]	; (80057d8 <USB_EP0StartXfer+0x2b0>)
 8005726:	4013      	ands	r3, r2
 8005728:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	0151      	lsls	r1, r2, #5
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	440a      	add	r2, r1
 8005758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005760:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005778:	6939      	ldr	r1, [r7, #16]
 800577a:	0148      	lsls	r0, r1, #5
 800577c:	6979      	ldr	r1, [r7, #20]
 800577e:	4401      	add	r1, r0
 8005780:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005784:	4313      	orrs	r3, r2
 8005786:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005788:	79fb      	ldrb	r3, [r7, #7]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d10d      	bne.n	80057aa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d009      	beq.n	80057aa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	6919      	ldr	r1, [r3, #16]
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a6:	460a      	mov	r2, r1
 80057a8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	371c      	adds	r7, #28
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	e007ffff 	.word	0xe007ffff
 80057dc:	fff80000 	.word	0xfff80000

080057e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	785b      	ldrb	r3, [r3, #1]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d14a      	bne.n	8005894 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005816:	f040 8086 	bne.w	8005926 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	7812      	ldrb	r2, [r2, #0]
 800582e:	0151      	lsls	r1, r2, #5
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	440a      	add	r2, r1
 8005834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005838:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800583c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	7812      	ldrb	r2, [r2, #0]
 8005852:	0151      	lsls	r1, r2, #5
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	440a      	add	r2, r1
 8005858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005860:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3301      	adds	r3, #1
 8005866:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f242 7210 	movw	r2, #10000	; 0x2710
 800586e:	4293      	cmp	r3, r2
 8005870:	d902      	bls.n	8005878 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	75fb      	strb	r3, [r7, #23]
          break;
 8005876:	e056      	b.n	8005926 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800588c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005890:	d0e7      	beq.n	8005862 <USB_EPStopXfer+0x82>
 8005892:	e048      	b.n	8005926 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058ac:	d13b      	bne.n	8005926 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	7812      	ldrb	r2, [r2, #0]
 80058c2:	0151      	lsls	r1, r2, #5
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	440a      	add	r2, r1
 80058c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	7812      	ldrb	r2, [r2, #0]
 80058e6:	0151      	lsls	r1, r2, #5
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	440a      	add	r2, r1
 80058ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3301      	adds	r3, #1
 80058fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005902:	4293      	cmp	r3, r2
 8005904:	d902      	bls.n	800590c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	75fb      	strb	r3, [r7, #23]
          break;
 800590a:	e00c      	b.n	8005926 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005924:	d0e7      	beq.n	80058f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005926:	7dfb      	ldrb	r3, [r7, #23]
}
 8005928:	4618      	mov	r0, r3
 800592a:	371c      	adds	r7, #28
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005934:	b480      	push	{r7}
 8005936:	b089      	sub	sp, #36	; 0x24
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	4611      	mov	r1, r2
 8005940:	461a      	mov	r2, r3
 8005942:	460b      	mov	r3, r1
 8005944:	71fb      	strb	r3, [r7, #7]
 8005946:	4613      	mov	r3, r2
 8005948:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005952:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005956:	2b00      	cmp	r3, #0
 8005958:	d123      	bne.n	80059a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800595a:	88bb      	ldrh	r3, [r7, #4]
 800595c:	3303      	adds	r3, #3
 800595e:	089b      	lsrs	r3, r3, #2
 8005960:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005962:	2300      	movs	r3, #0
 8005964:	61bb      	str	r3, [r7, #24]
 8005966:	e018      	b.n	800599a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005968:	79fb      	ldrb	r3, [r7, #7]
 800596a:	031a      	lsls	r2, r3, #12
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	4413      	add	r3, r2
 8005970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005974:	461a      	mov	r2, r3
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	3301      	adds	r3, #1
 8005980:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	3301      	adds	r3, #1
 8005986:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	3301      	adds	r3, #1
 800598c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	3301      	adds	r3, #1
 8005992:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	3301      	adds	r3, #1
 8005998:	61bb      	str	r3, [r7, #24]
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d3e2      	bcc.n	8005968 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3724      	adds	r7, #36	; 0x24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b08b      	sub	sp, #44	; 0x2c
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	4613      	mov	r3, r2
 80059bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80059c6:	88fb      	ldrh	r3, [r7, #6]
 80059c8:	089b      	lsrs	r3, r3, #2
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80059ce:	88fb      	ldrh	r3, [r7, #6]
 80059d0:	f003 0303 	and.w	r3, r3, #3
 80059d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80059d6:	2300      	movs	r3, #0
 80059d8:	623b      	str	r3, [r7, #32]
 80059da:	e014      	b.n	8005a06 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	3301      	adds	r3, #1
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	3301      	adds	r3, #1
 80059f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	3301      	adds	r3, #1
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	3301      	adds	r3, #1
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	3301      	adds	r3, #1
 8005a04:	623b      	str	r3, [r7, #32]
 8005a06:	6a3a      	ldr	r2, [r7, #32]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d3e6      	bcc.n	80059dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a0e:	8bfb      	ldrh	r3, [r7, #30]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d01e      	beq.n	8005a52 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f107 0310 	add.w	r3, r7, #16
 8005a24:	6812      	ldr	r2, [r2, #0]
 8005a26:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	701a      	strb	r2, [r3, #0]
      i++;
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	3301      	adds	r3, #1
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005a46:	8bfb      	ldrh	r3, [r7, #30]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a4c:	8bfb      	ldrh	r3, [r7, #30]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1ea      	bne.n	8005a28 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	372c      	adds	r7, #44	; 0x2c
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	785b      	ldrb	r3, [r3, #1]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d12c      	bne.n	8005ad6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	db12      	blt.n	8005ab4 <USB_EPSetStall+0x54>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00f      	beq.n	8005ab4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	0151      	lsls	r1, r2, #5
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	440a      	add	r2, r1
 8005aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ab2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ace:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ad2:	6013      	str	r3, [r2, #0]
 8005ad4:	e02b      	b.n	8005b2e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	db12      	blt.n	8005b0e <USB_EPSetStall+0xae>
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00f      	beq.n	8005b0e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b0c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	785b      	ldrb	r3, [r3, #1]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d128      	bne.n	8005baa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	0151      	lsls	r1, r2, #5
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	440a      	add	r2, r1
 8005b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	791b      	ldrb	r3, [r3, #4]
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d003      	beq.n	8005b88 <USB_EPClearStall+0x4c>
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	791b      	ldrb	r3, [r3, #4]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d138      	bne.n	8005bfa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	0151      	lsls	r1, r2, #5
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	e027      	b.n	8005bfa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	0151      	lsls	r1, r2, #5
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	440a      	add	r2, r1
 8005bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bc8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	791b      	ldrb	r3, [r3, #4]
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d003      	beq.n	8005bda <USB_EPClearStall+0x9e>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	791b      	ldrb	r3, [r3, #4]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d10f      	bne.n	8005bfa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bf8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c2a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	78fb      	ldrb	r3, [r7, #3]
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005c3c:	68f9      	ldr	r1, [r7, #12]
 8005c3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c42:	4313      	orrs	r3, r2
 8005c44:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c6e:	f023 0303 	bic.w	r3, r3, #3
 8005c72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c82:	f023 0302 	bic.w	r3, r3, #2
 8005c86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b085      	sub	sp, #20
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cb0:	f023 0303 	bic.w	r3, r3, #3
 8005cb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cc4:	f043 0302 	orr.w	r3, r3, #2
 8005cc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4013      	ands	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b085      	sub	sp, #20
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	0c1b      	lsrs	r3, r3, #16
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b085      	sub	sp, #20
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	4013      	ands	r3, r2
 8005d54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	b29b      	uxth	r3, r3
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	4013      	ands	r3, r2
 8005d92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d94:	68bb      	ldr	r3, [r7, #8]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b087      	sub	sp, #28
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	460b      	mov	r3, r1
 8005dac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005dc6:	78fb      	ldrb	r3, [r7, #3]
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd2:	01db      	lsls	r3, r3, #7
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4013      	ands	r3, r2
 8005dee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005df0:	68bb      	ldr	r3, [r7, #8]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
	...

08005e1c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e36:	4619      	mov	r1, r3
 8005e38:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <USB_ActivateSetup+0x44>)
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	fffff800 	.word	0xfffff800

08005e64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	607a      	str	r2, [r7, #4]
 8005e70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	333c      	adds	r3, #60	; 0x3c
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	4a26      	ldr	r2, [pc, #152]	; (8005f1c <USB_EP0_OutStart+0xb8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d90a      	bls.n	8005e9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e98:	d101      	bne.n	8005e9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	e037      	b.n	8005f0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ebc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ecc:	f043 0318 	orr.w	r3, r3, #24
 8005ed0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005ee4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005ee6:	7afb      	ldrb	r3, [r7, #11]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d10f      	bne.n	8005f0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f06:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005f0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	4f54300a 	.word	0x4f54300a

08005f20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4a13      	ldr	r2, [pc, #76]	; (8005f84 <USB_CoreReset+0x64>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d901      	bls.n	8005f3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e01b      	b.n	8005f76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	daf2      	bge.n	8005f2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f043 0201 	orr.w	r2, r3, #1
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4a09      	ldr	r2, [pc, #36]	; (8005f84 <USB_CoreReset+0x64>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d901      	bls.n	8005f68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e006      	b.n	8005f76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d0f0      	beq.n	8005f56 <USB_CoreReset+0x36>

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	00030d40 	.word	0x00030d40

08005f88 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8005f94:	f643 4050 	movw	r0, #15440	; 0x3c50
 8005f98:	f002 fb20 	bl	80085dc <USBD_static_malloc>
 8005f9c:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d109      	bne.n	8005fb8 <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	32b0      	adds	r2, #176	; 0xb0
 8005fae:	2100      	movs	r1, #0
 8005fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e07e      	b.n	80060b6 <USBD_AUDIO_Init+0x12e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	32b0      	adds	r2, #176	; 0xb0
 8005fc2:	68f9      	ldr	r1, [r7, #12]
 8005fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	32b0      	adds	r2, #176	; 0xb0
 8005fd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	7c1b      	ldrb	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10e      	bne.n	8006002 <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8005fe4:	4b36      	ldr	r3, [pc, #216]	; (80060c0 <USBD_AUDIO_Init+0x138>)
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	f003 020f 	and.w	r2, r3, #15
 8005fec:	6879      	ldr	r1, [r7, #4]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4413      	add	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	440b      	add	r3, r1
 8005ff8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	801a      	strh	r2, [r3, #0]
 8006000:	e00d      	b.n	800601e <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8006002:	4b2f      	ldr	r3, [pc, #188]	; (80060c0 <USBD_AUDIO_Init+0x138>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	f003 020f 	and.w	r2, r3, #15
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	440b      	add	r3, r1
 8006016:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800601a:	2201      	movs	r2, #1
 800601c:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800601e:	4b28      	ldr	r3, [pc, #160]	; (80060c0 <USBD_AUDIO_Init+0x138>)
 8006020:	7819      	ldrb	r1, [r3, #0]
 8006022:	23c0      	movs	r3, #192	; 0xc0
 8006024:	2201      	movs	r2, #1
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f002 f9b5 	bl	8008396 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 800602c:	4b24      	ldr	r3, [pc, #144]	; (80060c0 <USBD_AUDIO_Init+0x138>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	f003 020f 	and.w	r2, r3, #15
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	4613      	mov	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	440b      	add	r3, r1
 8006040:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006044:	2201      	movs	r2, #1
 8006046:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006054:	2203      	movs	r2, #3
 8006056:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
  haudio->wr_ptr = 0U;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006060:	2200      	movs	r2, #0
 8006062:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08
  haudio->rd_ptr = 0U;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800606c:	2200      	movs	r2, #0
 800606e:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
  haudio->rd_enable = 0U;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	33b0      	adds	r3, #176	; 0xb0
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2200      	movs	r2, #0
 8006092:	2146      	movs	r1, #70	; 0x46
 8006094:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8006098:	4798      	blx	r3
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <USBD_AUDIO_Init+0x11c>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e008      	b.n	80060b6 <USBD_AUDIO_Init+0x12e>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 80060a4:	4b06      	ldr	r3, [pc, #24]	; (80060c0 <USBD_AUDIO_Init+0x138>)
 80060a6:	7819      	ldrb	r1, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	1d1a      	adds	r2, r3, #4
 80060ac:	23c0      	movs	r3, #192	; 0xc0
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f002 fa60 	bl	8008574 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	240000c2 	.word	0x240000c2

080060c4 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 80060d0:	4b28      	ldr	r3, [pc, #160]	; (8006174 <USBD_AUDIO_DeInit+0xb0>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	4619      	mov	r1, r3
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f002 f983 	bl	80083e2 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 80060dc:	4b25      	ldr	r3, [pc, #148]	; (8006174 <USBD_AUDIO_DeInit+0xb0>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	f003 020f 	and.w	r2, r3, #15
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	4613      	mov	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	440b      	add	r3, r1
 80060f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060f4:	2200      	movs	r2, #0
 80060f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 80060f8:	4b1e      	ldr	r3, [pc, #120]	; (8006174 <USBD_AUDIO_DeInit+0xb0>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	f003 020f 	and.w	r2, r3, #15
 8006100:	6879      	ldr	r1, [r7, #4]
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	440b      	add	r3, r1
 800610c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006110:	2200      	movs	r2, #0
 8006112:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	32b0      	adds	r2, #176	; 0xb0
 800611e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d020      	beq.n	8006168 <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	33b0      	adds	r3, #176	; 0xb0
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2000      	movs	r0, #0
 800613a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	32b0      	adds	r2, #176	; 0xb0
 8006146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614a:	4618      	mov	r0, r3
 800614c:	f002 fa54 	bl	80085f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	32b0      	adds	r2, #176	; 0xb0
 800615a:	2100      	movs	r1, #0
 800615c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	240000c2 	.word	0x240000c2

08006178 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	32b0      	adds	r2, #176	; 0xb0
 8006194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006198:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e0c1      	b.n	8006328 <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d01a      	beq.n	80061e6 <USBD_AUDIO_Setup+0x6e>
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	f040 80b1 	bne.w	8006318 <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	785b      	ldrb	r3, [r3, #1]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d006      	beq.n	80061cc <USBD_AUDIO_Setup+0x54>
 80061be:	2b81      	cmp	r3, #129	; 0x81
 80061c0:	d109      	bne.n	80061d6 <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 80061c2:	6839      	ldr	r1, [r7, #0]
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f9d7 	bl	8006578 <AUDIO_REQ_GetCurrent>
          break;
 80061ca:	e00b      	b.n	80061e4 <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f9fe 	bl	80065d0 <AUDIO_REQ_SetCurrent>
          break;
 80061d4:	e006      	b.n	80061e4 <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 80061d6:	6839      	ldr	r1, [r7, #0]
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f001 fc7e 	bl	8007ada <USBD_CtlError>
          ret = USBD_FAIL;
 80061de:	2303      	movs	r3, #3
 80061e0:	75fb      	strb	r3, [r7, #23]
          break;
 80061e2:	bf00      	nop
      }
      break;
 80061e4:	e09f      	b.n	8006326 <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	785b      	ldrb	r3, [r3, #1]
 80061ea:	2b0b      	cmp	r3, #11
 80061ec:	f200 8089 	bhi.w	8006302 <USBD_AUDIO_Setup+0x18a>
 80061f0:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <USBD_AUDIO_Setup+0x80>)
 80061f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f6:	bf00      	nop
 80061f8:	08006229 	.word	0x08006229
 80061fc:	08006311 	.word	0x08006311
 8006200:	08006303 	.word	0x08006303
 8006204:	08006303 	.word	0x08006303
 8006208:	08006303 	.word	0x08006303
 800620c:	08006303 	.word	0x08006303
 8006210:	08006253 	.word	0x08006253
 8006214:	08006303 	.word	0x08006303
 8006218:	08006303 	.word	0x08006303
 800621c:	08006303 	.word	0x08006303
 8006220:	0800629b 	.word	0x0800629b
 8006224:	080062c3 	.word	0x080062c3
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b03      	cmp	r3, #3
 8006232:	d107      	bne.n	8006244 <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006234:	f107 0308 	add.w	r3, r7, #8
 8006238:	2202      	movs	r2, #2
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f001 fcbd 	bl	8007bbc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006242:	e068      	b.n	8006316 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f001 fc47 	bl	8007ada <USBD_CtlError>
            ret = USBD_FAIL;
 800624c:	2303      	movs	r3, #3
 800624e:	75fb      	strb	r3, [r7, #23]
          break;
 8006250:	e061      	b.n	8006316 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	885b      	ldrh	r3, [r3, #2]
 8006256:	0a1b      	lsrs	r3, r3, #8
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b21      	cmp	r3, #33	; 0x21
 800625c:	d15a      	bne.n	8006314 <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8006264:	4618      	mov	r0, r3
 8006266:	f000 fa21 	bl	80066ac <USBD_AUDIO_GetAudioHeaderDesc>
 800626a:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00c      	beq.n	800628c <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	88db      	ldrh	r3, [r3, #6]
 8006276:	2b09      	cmp	r3, #9
 8006278:	bf28      	it	cs
 800627a:	2309      	movcs	r3, #9
 800627c:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 800627e:	897b      	ldrh	r3, [r7, #10]
 8006280:	461a      	mov	r2, r3
 8006282:	68f9      	ldr	r1, [r7, #12]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f001 fc99 	bl	8007bbc <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 800628a:	e043      	b.n	8006314 <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f001 fc23 	bl	8007ada <USBD_CtlError>
              ret = USBD_FAIL;
 8006294:	2303      	movs	r3, #3
 8006296:	75fb      	strb	r3, [r7, #23]
          break;
 8006298:	e03c      	b.n	8006314 <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d106      	bne.n	80062b4 <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	2201      	movs	r2, #1
 80062aa:	4619      	mov	r1, r3
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f001 fc85 	bl	8007bbc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062b2:	e030      	b.n	8006316 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80062b4:	6839      	ldr	r1, [r7, #0]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f001 fc0f 	bl	8007ada <USBD_CtlError>
            ret = USBD_FAIL;
 80062bc:	2303      	movs	r3, #3
 80062be:	75fb      	strb	r3, [r7, #23]
          break;
 80062c0:	e029      	b.n	8006316 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d112      	bne.n	80062f4 <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	885b      	ldrh	r3, [r3, #2]
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d806      	bhi.n	80062e6 <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	885b      	ldrh	r3, [r3, #2]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062e4:	e017      	b.n	8006316 <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f001 fbf6 	bl	8007ada <USBD_CtlError>
              ret = USBD_FAIL;
 80062ee:	2303      	movs	r3, #3
 80062f0:	75fb      	strb	r3, [r7, #23]
          break;
 80062f2:	e010      	b.n	8006316 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f001 fbef 	bl	8007ada <USBD_CtlError>
            ret = USBD_FAIL;
 80062fc:	2303      	movs	r3, #3
 80062fe:	75fb      	strb	r3, [r7, #23]
          break;
 8006300:	e009      	b.n	8006316 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 fbe8 	bl	8007ada <USBD_CtlError>
          ret = USBD_FAIL;
 800630a:	2303      	movs	r3, #3
 800630c:	75fb      	strb	r3, [r7, #23]
          break;
 800630e:	e002      	b.n	8006316 <USBD_AUDIO_Setup+0x19e>
          break;
 8006310:	bf00      	nop
 8006312:	e008      	b.n	8006326 <USBD_AUDIO_Setup+0x1ae>
          break;
 8006314:	bf00      	nop
      }
      break;
 8006316:	e006      	b.n	8006326 <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f001 fbdd 	bl	8007ada <USBD_CtlError>
      ret = USBD_FAIL;
 8006320:	2303      	movs	r3, #3
 8006322:	75fb      	strb	r3, [r7, #23]
      break;
 8006324:	bf00      	nop
  }

  return (uint8_t)ret;
 8006326:	7dfb      	ldrb	r3, [r7, #23]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	226d      	movs	r2, #109	; 0x6d
 800633c:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 800633e:	4b03      	ldr	r3, [pc, #12]	; (800634c <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8006340:	4618      	mov	r0, r3
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	24000048 	.word	0x24000048

08006350 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	32b0      	adds	r2, #176	; 0xb0
 800637c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006380:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006388:	2303      	movs	r3, #3
 800638a:	e02a      	b.n	80063e2 <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006392:	f893 3c0a 	ldrb.w	r3, [r3, #3082]	; 0xc0a
 8006396:	2b01      	cmp	r3, #1
 8006398:	d122      	bne.n	80063e0 <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80063a0:	f893 3c4c 	ldrb.w	r3, [r3, #3148]	; 0xc4c
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d11b      	bne.n	80063e0 <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	33b0      	adds	r3, #176	; 0xb0
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80063c0:	f892 2c0b 	ldrb.w	r2, [r2, #3083]	; 0xc0b
 80063c4:	4610      	mov	r0, r2
 80063c6:	4798      	blx	r3
      haudio->control.cmd = 0U;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
      haudio->control.len = 0U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    }
  }

  return (uint8_t)USBD_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	460b      	mov	r3, r1
 8006420:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
	...

0800644c <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	32b0      	adds	r2, #176	; 0xb0
 8006462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006466:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800646e:	2303      	movs	r3, #3
 8006470:	e07c      	b.n	800656c <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 8006472:	4b40      	ldr	r3, [pc, #256]	; (8006574 <USBD_AUDIO_DataOut+0x128>)
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	78fa      	ldrb	r2, [r7, #3]
 8006478:	429a      	cmp	r2, r3
 800647a:	d176      	bne.n	800656a <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	4619      	mov	r1, r3
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f002 f898 	bl	80085b6 <USBD_LL_GetRxDataSize>
 8006486:	4603      	mov	r3, r0
 8006488:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	33b0      	adds	r3, #176	; 0xb0
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80064a2:	f8b2 2c08 	ldrh.w	r2, [r2, #3080]	; 0xc08
 80064a6:	4611      	mov	r1, r2
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	440a      	add	r2, r1
 80064ac:	1d10      	adds	r0, r2, #4
 80064ae:	8979      	ldrh	r1, [r7, #10]
 80064b0:	2201      	movs	r2, #1
 80064b2:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80064ba:	f8b3 2c08 	ldrh.w	r2, [r3, #3080]	; 0xc08
 80064be:	897b      	ldrh	r3, [r7, #10]
 80064c0:	4413      	add	r3, r2
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80064ca:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80064d4:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80064d8:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 80064dc:	d121      	bne.n	8006522 <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80064e4:	2200      	movs	r2, #0
 80064e6:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80064f0:	f893 3c04 	ldrb.w	r3, [r3, #3076]	; 0xc04
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d114      	bne.n	8006522 <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	33b0      	adds	r3, #176	; 0xb0
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	1d10      	adds	r0, r2, #4
 800650e:	2201      	movs	r2, #1
 8006510:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8006514:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
      }
    }

    if (haudio->rd_enable == 0U)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006528:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10d      	bne.n	800654c <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006536:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 800653a:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800653e:	d105      	bne.n	800654c <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 800654c:	4b09      	ldr	r3, [pc, #36]	; (8006574 <USBD_AUDIO_DataOut+0x128>)
 800654e:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006556:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 800655a:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	1d1a      	adds	r2, r3, #4
 8006562:	23c0      	movs	r3, #192	; 0xc0
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f002 f805 	bl	8008574 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	240000c2 	.word	0x240000c2

08006578 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	32b0      	adds	r2, #176	; 0xb0
 800658c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006590:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d017      	beq.n	80065c8 <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	f643 430b 	movw	r3, #15371	; 0x3c0b
 800659e:	4413      	add	r3, r2
 80065a0:	2240      	movs	r2, #64	; 0x40
 80065a2:	2100      	movs	r1, #0
 80065a4:	4618      	mov	r0, r3
 80065a6:	f002 f887 	bl	80086b8 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	f643 430b 	movw	r3, #15371	; 0x3c0b
 80065b0:	4413      	add	r3, r2
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	88d2      	ldrh	r2, [r2, #6]
 80065b6:	2a40      	cmp	r2, #64	; 0x40
 80065b8:	bf28      	it	cs
 80065ba:	2240      	movcs	r2, #64	; 0x40
 80065bc:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 80065be:	4619      	mov	r1, r3
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f001 fafb 	bl	8007bbc <USBD_CtlSendData>
 80065c6:	e000      	b.n	80065ca <AUDIO_REQ_GetCurrent+0x52>
    return;
 80065c8:	bf00      	nop
}
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	32b0      	adds	r2, #176	; 0xb0
 80065e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e8:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d02f      	beq.n	8006650 <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	88db      	ldrh	r3, [r3, #6]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d02c      	beq.n	8006652 <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	88db      	ldrh	r3, [r3, #6]
 8006608:	2b3f      	cmp	r3, #63	; 0x3f
 800660a:	d803      	bhi.n	8006614 <AUDIO_REQ_SetCurrent+0x44>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	88db      	ldrh	r3, [r3, #6]
 8006610:	b2da      	uxtb	r2, r3
 8006612:	e000      	b.n	8006616 <AUDIO_REQ_SetCurrent+0x46>
 8006614:	2240      	movs	r2, #64	; 0x40
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800661c:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	889b      	ldrh	r3, [r3, #4]
 8006624:	0a1b      	lsrs	r3, r3, #8
 8006626:	b29b      	uxth	r3, r3
 8006628:	b2da      	uxtb	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006630:	f883 2c4c 	strb.w	r2, [r3, #3148]	; 0xc4c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	f643 430b 	movw	r3, #15371	; 0x3c0b
 800663a:	4413      	add	r3, r2
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8006642:	f892 2c4b 	ldrb.w	r2, [r2, #3147]	; 0xc4b
 8006646:	4619      	mov	r1, r3
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 fae3 	bl	8007c14 <USBD_CtlPrepareRx>
 800664e:	e000      	b.n	8006652 <AUDIO_REQ_SetCurrent+0x82>
    return;
 8006650:	bf00      	nop
  }
}
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	220a      	movs	r2, #10
 8006664:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8006666:	4b03      	ldr	r3, [pc, #12]	; (8006674 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8006668:	4618      	mov	r0, r3
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	240000b8 	.word	0x240000b8

08006678 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006688:	2303      	movs	r3, #3
 800668a:	e009      	b.n	80066a0 <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	33b0      	adds	r3, #176	; 0xb0
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 80066bc:	2300      	movs	r3, #0
 80066be:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	885b      	ldrh	r3, [r3, #2]
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d91c      	bls.n	800670a <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
  {
    ptr = desc->bLength;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80066d8:	e011      	b.n	80066fe <USBD_AUDIO_GetAudioHeaderDesc+0x52>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80066da:	f107 030a 	add.w	r3, r7, #10
 80066de:	4619      	mov	r1, r3
 80066e0:	6978      	ldr	r0, [r7, #20]
 80066e2:	f000 fbfc 	bl	8006ede <USBD_GetNextDesc>
 80066e6:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	785b      	ldrb	r3, [r3, #1]
 80066ec:	2b24      	cmp	r3, #36	; 0x24
 80066ee:	d106      	bne.n	80066fe <USBD_AUDIO_GetAudioHeaderDesc+0x52>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d102      	bne.n	80066fe <USBD_AUDIO_GetAudioHeaderDesc+0x52>
      {
        pAudioDesc = (uint8_t *)pdesc;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	613b      	str	r3, [r7, #16]
        break;
 80066fc:	e005      	b.n	800670a <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
    while (ptr < desc->wTotalLength)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	885b      	ldrh	r3, [r3, #2]
 8006702:	b29a      	uxth	r2, r3
 8006704:	897b      	ldrh	r3, [r7, #10]
 8006706:	429a      	cmp	r2, r3
 8006708:	d8e7      	bhi.n	80066da <USBD_AUDIO_GetAudioHeaderDesc+0x2e>
      }
    }
  }
  return pAudioDesc;
 800670a:	693b      	ldr	r3, [r7, #16]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	4613      	mov	r3, r2
 8006720:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10a      	bne.n	800673e <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8006728:	4817      	ldr	r0, [pc, #92]	; (8006788 <USBD_Init+0x74>)
 800672a:	f001 ffcd 	bl	80086c8 <iprintf>
 800672e:	4817      	ldr	r0, [pc, #92]	; (800678c <USBD_Init+0x78>)
 8006730:	f001 ffca 	bl	80086c8 <iprintf>
 8006734:	200a      	movs	r0, #10
 8006736:	f001 ffdf 	bl	80086f8 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800673a:	2303      	movs	r3, #3
 800673c:	e01f      	b.n	800677e <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d003      	beq.n	8006764 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	79fa      	ldrb	r2, [r7, #7]
 8006770:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f001 fda2 	bl	80082bc <USBD_LL_Init>
 8006778:	4603      	mov	r3, r0
 800677a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800677c:	7dfb      	ldrb	r3, [r7, #23]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	080098b8 	.word	0x080098b8
 800678c:	080098c0 	.word	0x080098c0

08006790 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800679a:	2300      	movs	r3, #0
 800679c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80067a4:	481a      	ldr	r0, [pc, #104]	; (8006810 <USBD_RegisterClass+0x80>)
 80067a6:	f001 ff8f 	bl	80086c8 <iprintf>
 80067aa:	481a      	ldr	r0, [pc, #104]	; (8006814 <USBD_RegisterClass+0x84>)
 80067ac:	f001 ff8c 	bl	80086c8 <iprintf>
 80067b0:	200a      	movs	r0, #10
 80067b2:	f001 ffa1 	bl	80086f8 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e025      	b.n	8006806 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	32ae      	adds	r2, #174	; 0xae
 80067cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00f      	beq.n	80067f6 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	32ae      	adds	r2, #174	; 0xae
 80067e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e6:	f107 020e 	add.w	r2, r7, #14
 80067ea:	4610      	mov	r0, r2
 80067ec:	4798      	blx	r3
 80067ee:	4602      	mov	r2, r0
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	080098b8 	.word	0x080098b8
 8006814:	080098d8 	.word	0x080098d8

08006818 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 fd9d 	bl	8008360 <USBD_LL_Start>
 8006826:	4603      	mov	r3, r0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006838:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800683a:	4618      	mov	r0, r3
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	460b      	mov	r3, r1
 8006850:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685c:	2b00      	cmp	r3, #0
 800685e:	d009      	beq.n	8006874 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	78fa      	ldrb	r2, [r7, #3]
 800686a:	4611      	mov	r1, r2
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	4798      	blx	r3
 8006870:	4603      	mov	r3, r0
 8006872:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006874:	7bfb      	ldrb	r3, [r7, #15]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	460b      	mov	r3, r1
 8006888:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	78fa      	ldrb	r2, [r7, #3]
 8006898:	4611      	mov	r1, r2
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80068a4:	2303      	movs	r3, #3
 80068a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f001 f8ce 	bl	8007a66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80068d8:	461a      	mov	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068e6:	f003 031f 	and.w	r3, r3, #31
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d01a      	beq.n	8006924 <USBD_LL_SetupStage+0x72>
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d822      	bhi.n	8006938 <USBD_LL_SetupStage+0x86>
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <USBD_LL_SetupStage+0x4a>
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d00a      	beq.n	8006910 <USBD_LL_SetupStage+0x5e>
 80068fa:	e01d      	b.n	8006938 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fb25 	bl	8006f54 <USBD_StdDevReq>
 800690a:	4603      	mov	r3, r0
 800690c:	73fb      	strb	r3, [r7, #15]
      break;
 800690e:	e020      	b.n	8006952 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fb8d 	bl	8007038 <USBD_StdItfReq>
 800691e:	4603      	mov	r3, r0
 8006920:	73fb      	strb	r3, [r7, #15]
      break;
 8006922:	e016      	b.n	8006952 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fbef 	bl	8007110 <USBD_StdEPReq>
 8006932:	4603      	mov	r3, r0
 8006934:	73fb      	strb	r3, [r7, #15]
      break;
 8006936:	e00c      	b.n	8006952 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800693e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006942:	b2db      	uxtb	r3, r3
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f001 fd6a 	bl	8008420 <USBD_LL_StallEP>
 800694c:	4603      	mov	r3, r0
 800694e:	73fb      	strb	r3, [r7, #15]
      break;
 8006950:	bf00      	nop
  }

  return ret;
 8006952:	7bfb      	ldrb	r3, [r7, #15]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	460b      	mov	r3, r1
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800696e:	7afb      	ldrb	r3, [r7, #11]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d16e      	bne.n	8006a52 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800697a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006982:	2b03      	cmp	r3, #3
 8006984:	f040 8098 	bne.w	8006ab8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	429a      	cmp	r2, r3
 8006992:	d913      	bls.n	80069bc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	1ad2      	subs	r2, r2, r3
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	68da      	ldr	r2, [r3, #12]
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	4293      	cmp	r3, r2
 80069ac:	bf28      	it	cs
 80069ae:	4613      	movcs	r3, r2
 80069b0:	461a      	mov	r2, r3
 80069b2:	6879      	ldr	r1, [r7, #4]
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f001 f94a 	bl	8007c4e <USBD_CtlContinueRx>
 80069ba:	e07d      	b.n	8006ab8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069c2:	f003 031f 	and.w	r3, r3, #31
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d014      	beq.n	80069f4 <USBD_LL_DataOutStage+0x98>
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d81d      	bhi.n	8006a0a <USBD_LL_DataOutStage+0xae>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <USBD_LL_DataOutStage+0x7c>
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d003      	beq.n	80069de <USBD_LL_DataOutStage+0x82>
 80069d6:	e018      	b.n	8006a0a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	75bb      	strb	r3, [r7, #22]
            break;
 80069dc:	e018      	b.n	8006a10 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	4619      	mov	r1, r3
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 fa5e 	bl	8006eaa <USBD_CoreFindIF>
 80069ee:	4603      	mov	r3, r0
 80069f0:	75bb      	strb	r3, [r7, #22]
            break;
 80069f2:	e00d      	b.n	8006a10 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	4619      	mov	r1, r3
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 fa60 	bl	8006ec4 <USBD_CoreFindEP>
 8006a04:	4603      	mov	r3, r0
 8006a06:	75bb      	strb	r3, [r7, #22]
            break;
 8006a08:	e002      	b.n	8006a10 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	75bb      	strb	r3, [r7, #22]
            break;
 8006a0e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006a10:	7dbb      	ldrb	r3, [r7, #22]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d119      	bne.n	8006a4a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d113      	bne.n	8006a4a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006a22:	7dba      	ldrb	r2, [r7, #22]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	32ae      	adds	r2, #174	; 0xae
 8006a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00b      	beq.n	8006a4a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006a32:	7dba      	ldrb	r2, [r7, #22]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a3a:	7dba      	ldrb	r2, [r7, #22]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	32ae      	adds	r2, #174	; 0xae
 8006a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f001 f910 	bl	8007c70 <USBD_CtlSendStatus>
 8006a50:	e032      	b.n	8006ab8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a52:	7afb      	ldrb	r3, [r7, #11]
 8006a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 fa31 	bl	8006ec4 <USBD_CoreFindEP>
 8006a62:	4603      	mov	r3, r0
 8006a64:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a66:	7dbb      	ldrb	r3, [r7, #22]
 8006a68:	2bff      	cmp	r3, #255	; 0xff
 8006a6a:	d025      	beq.n	8006ab8 <USBD_LL_DataOutStage+0x15c>
 8006a6c:	7dbb      	ldrb	r3, [r7, #22]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d122      	bne.n	8006ab8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	d117      	bne.n	8006aae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a7e:	7dba      	ldrb	r2, [r7, #22]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	32ae      	adds	r2, #174	; 0xae
 8006a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00f      	beq.n	8006aae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006a8e:	7dba      	ldrb	r2, [r7, #22]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006a96:	7dba      	ldrb	r2, [r7, #22]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	32ae      	adds	r2, #174	; 0xae
 8006a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	7afa      	ldrb	r2, [r7, #11]
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	4798      	blx	r3
 8006aaa:	4603      	mov	r3, r0
 8006aac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006aae:	7dfb      	ldrb	r3, [r7, #23]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006ab4:	7dfb      	ldrb	r3, [r7, #23]
 8006ab6:	e000      	b.n	8006aba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b086      	sub	sp, #24
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	460b      	mov	r3, r1
 8006acc:	607a      	str	r2, [r7, #4]
 8006ace:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006ad0:	7afb      	ldrb	r3, [r7, #11]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d16f      	bne.n	8006bb6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	3314      	adds	r3, #20
 8006ada:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d15a      	bne.n	8006b9c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	689a      	ldr	r2, [r3, #8]
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d914      	bls.n	8006b1c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	1ad2      	subs	r2, r2, r3
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	461a      	mov	r2, r3
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f001 f872 	bl	8007bf2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b0e:	2300      	movs	r3, #0
 8006b10:	2200      	movs	r2, #0
 8006b12:	2100      	movs	r1, #0
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f001 fd2d 	bl	8008574 <USBD_LL_PrepareReceive>
 8006b1a:	e03f      	b.n	8006b9c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	68da      	ldr	r2, [r3, #12]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d11c      	bne.n	8006b62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d316      	bcc.n	8006b62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d20f      	bcs.n	8006b62 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b42:	2200      	movs	r2, #0
 8006b44:	2100      	movs	r1, #0
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f001 f853 	bl	8007bf2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b54:	2300      	movs	r3, #0
 8006b56:	2200      	movs	r2, #0
 8006b58:	2100      	movs	r1, #0
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f001 fd0a 	bl	8008574 <USBD_LL_PrepareReceive>
 8006b60:	e01c      	b.n	8006b9c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b03      	cmp	r3, #3
 8006b6c:	d10f      	bne.n	8006b8e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d009      	beq.n	8006b8e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b8e:	2180      	movs	r1, #128	; 0x80
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f001 fc45 	bl	8008420 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f001 f87d 	bl	8007c96 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d03a      	beq.n	8006c1c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f7ff fe42 	bl	8006830 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006bb4:	e032      	b.n	8006c1c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006bb6:	7afb      	ldrb	r3, [r7, #11]
 8006bb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 f97f 	bl	8006ec4 <USBD_CoreFindEP>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bca:	7dfb      	ldrb	r3, [r7, #23]
 8006bcc:	2bff      	cmp	r3, #255	; 0xff
 8006bce:	d025      	beq.n	8006c1c <USBD_LL_DataInStage+0x15a>
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d122      	bne.n	8006c1c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d11c      	bne.n	8006c1c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006be2:	7dfa      	ldrb	r2, [r7, #23]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	32ae      	adds	r2, #174	; 0xae
 8006be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d014      	beq.n	8006c1c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006bf2:	7dfa      	ldrb	r2, [r7, #23]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006bfa:	7dfa      	ldrb	r2, [r7, #23]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	32ae      	adds	r2, #174	; 0xae
 8006c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	7afa      	ldrb	r2, [r7, #11]
 8006c08:	4611      	mov	r1, r2
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	4798      	blx	r3
 8006c0e:	4603      	mov	r3, r0
 8006c10:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006c12:	7dbb      	ldrb	r3, [r7, #22]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006c18:	7dbb      	ldrb	r3, [r7, #22]
 8006c1a:	e000      	b.n	8006c1e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b084      	sub	sp, #16
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d014      	beq.n	8006c8c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00e      	beq.n	8006c8c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	6852      	ldr	r2, [r2, #4]
 8006c7a:	b2d2      	uxtb	r2, r2
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	4798      	blx	r3
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d001      	beq.n	8006c8c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c8c:	2340      	movs	r3, #64	; 0x40
 8006c8e:	2200      	movs	r2, #0
 8006c90:	2100      	movs	r1, #0
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f001 fb7f 	bl	8008396 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2240      	movs	r2, #64	; 0x40
 8006ca4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ca8:	2340      	movs	r3, #64	; 0x40
 8006caa:	2200      	movs	r2, #0
 8006cac:	2180      	movs	r1, #128	; 0x80
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f001 fb71 	bl	8008396 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2240      	movs	r2, #64	; 0x40
 8006cbe:	621a      	str	r2, [r3, #32]

  return ret;
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	78fa      	ldrb	r2, [r7, #3]
 8006cda:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2204      	movs	r2, #4
 8006d04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d106      	bne.n	8006d38 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b082      	sub	sp, #8
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d110      	bne.n	8006d7c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00b      	beq.n	8006d7c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6a:	69db      	ldr	r3, [r3, #28]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d005      	beq.n	8006d7c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b082      	sub	sp, #8
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	32ae      	adds	r2, #174	; 0xae
 8006d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e01c      	b.n	8006de2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b03      	cmp	r3, #3
 8006db2:	d115      	bne.n	8006de0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	32ae      	adds	r2, #174	; 0xae
 8006dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00b      	beq.n	8006de0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	32ae      	adds	r2, #174	; 0xae
 8006dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	78fa      	ldrb	r2, [r7, #3]
 8006dda:	4611      	mov	r1, r2
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b082      	sub	sp, #8
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	460b      	mov	r3, r1
 8006df4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	32ae      	adds	r2, #174	; 0xae
 8006e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e01c      	b.n	8006e46 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d115      	bne.n	8006e44 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	32ae      	adds	r2, #174	; 0xae
 8006e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00b      	beq.n	8006e44 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	32ae      	adds	r2, #174	; 0xae
 8006e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	78fa      	ldrb	r2, [r7, #3]
 8006e3e:	4611      	mov	r1, r2
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00e      	beq.n	8006ea0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6852      	ldr	r2, [r2, #4]
 8006e8e:	b2d2      	uxtb	r2, r2
 8006e90:	4611      	mov	r1, r2
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	4798      	blx	r3
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006eb6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ed0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b085      	sub	sp, #20
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	881a      	ldrh	r2, [r3, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	4413      	add	r3, r2
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	461a      	mov	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4413      	add	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f36:	8a3b      	ldrh	r3, [r7, #16]
 8006f38:	021b      	lsls	r3, r3, #8
 8006f3a:	b21a      	sxth	r2, r3
 8006f3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	b21b      	sxth	r3, r3
 8006f44:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f46:	89fb      	ldrh	r3, [r7, #14]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	371c      	adds	r7, #28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f6a:	2b40      	cmp	r3, #64	; 0x40
 8006f6c:	d005      	beq.n	8006f7a <USBD_StdDevReq+0x26>
 8006f6e:	2b40      	cmp	r3, #64	; 0x40
 8006f70:	d857      	bhi.n	8007022 <USBD_StdDevReq+0xce>
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00f      	beq.n	8006f96 <USBD_StdDevReq+0x42>
 8006f76:	2b20      	cmp	r3, #32
 8006f78:	d153      	bne.n	8007022 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	32ae      	adds	r2, #174	; 0xae
 8006f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4798      	blx	r3
 8006f90:	4603      	mov	r3, r0
 8006f92:	73fb      	strb	r3, [r7, #15]
      break;
 8006f94:	e04a      	b.n	800702c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	785b      	ldrb	r3, [r3, #1]
 8006f9a:	2b09      	cmp	r3, #9
 8006f9c:	d83b      	bhi.n	8007016 <USBD_StdDevReq+0xc2>
 8006f9e:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <USBD_StdDevReq+0x50>)
 8006fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa4:	08006ff9 	.word	0x08006ff9
 8006fa8:	0800700d 	.word	0x0800700d
 8006fac:	08007017 	.word	0x08007017
 8006fb0:	08007003 	.word	0x08007003
 8006fb4:	08007017 	.word	0x08007017
 8006fb8:	08006fd7 	.word	0x08006fd7
 8006fbc:	08006fcd 	.word	0x08006fcd
 8006fc0:	08007017 	.word	0x08007017
 8006fc4:	08006fef 	.word	0x08006fef
 8006fc8:	08006fe1 	.word	0x08006fe1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa3c 	bl	800744c <USBD_GetDescriptor>
          break;
 8006fd4:	e024      	b.n	8007020 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fba1 	bl	8007720 <USBD_SetAddress>
          break;
 8006fde:	e01f      	b.n	8007020 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fbe0 	bl	80077a8 <USBD_SetConfig>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	73fb      	strb	r3, [r7, #15]
          break;
 8006fec:	e018      	b.n	8007020 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fc83 	bl	80078fc <USBD_GetConfig>
          break;
 8006ff6:	e013      	b.n	8007020 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fcb4 	bl	8007968 <USBD_GetStatus>
          break;
 8007000:	e00e      	b.n	8007020 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fce3 	bl	80079d0 <USBD_SetFeature>
          break;
 800700a:	e009      	b.n	8007020 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fd07 	bl	8007a22 <USBD_ClrFeature>
          break;
 8007014:	e004      	b.n	8007020 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fd5e 	bl	8007ada <USBD_CtlError>
          break;
 800701e:	bf00      	nop
      }
      break;
 8007020:	e004      	b.n	800702c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fd58 	bl	8007ada <USBD_CtlError>
      break;
 800702a:	bf00      	nop
  }

  return ret;
 800702c:	7bfb      	ldrb	r3, [r7, #15]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop

08007038 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800704e:	2b40      	cmp	r3, #64	; 0x40
 8007050:	d005      	beq.n	800705e <USBD_StdItfReq+0x26>
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	d852      	bhi.n	80070fc <USBD_StdItfReq+0xc4>
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <USBD_StdItfReq+0x26>
 800705a:	2b20      	cmp	r3, #32
 800705c:	d14e      	bne.n	80070fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007064:	b2db      	uxtb	r3, r3
 8007066:	3b01      	subs	r3, #1
 8007068:	2b02      	cmp	r3, #2
 800706a:	d840      	bhi.n	80070ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	889b      	ldrh	r3, [r3, #4]
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b01      	cmp	r3, #1
 8007074:	d836      	bhi.n	80070e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	889b      	ldrh	r3, [r3, #4]
 800707a:	b2db      	uxtb	r3, r3
 800707c:	4619      	mov	r1, r3
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7ff ff13 	bl	8006eaa <USBD_CoreFindIF>
 8007084:	4603      	mov	r3, r0
 8007086:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007088:	7bbb      	ldrb	r3, [r7, #14]
 800708a:	2bff      	cmp	r3, #255	; 0xff
 800708c:	d01d      	beq.n	80070ca <USBD_StdItfReq+0x92>
 800708e:	7bbb      	ldrb	r3, [r7, #14]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d11a      	bne.n	80070ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007094:	7bba      	ldrb	r2, [r7, #14]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	32ae      	adds	r2, #174	; 0xae
 800709a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00f      	beq.n	80070c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80070a4:	7bba      	ldrb	r2, [r7, #14]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80070ac:	7bba      	ldrb	r2, [r7, #14]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	32ae      	adds	r2, #174	; 0xae
 80070b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	4798      	blx	r3
 80070be:	4603      	mov	r3, r0
 80070c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80070c2:	e004      	b.n	80070ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80070c4:	2303      	movs	r3, #3
 80070c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80070c8:	e001      	b.n	80070ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80070ca:	2303      	movs	r3, #3
 80070cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	88db      	ldrh	r3, [r3, #6]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d110      	bne.n	80070f8 <USBD_StdItfReq+0xc0>
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10d      	bne.n	80070f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fdc7 	bl	8007c70 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80070e2:	e009      	b.n	80070f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fcf7 	bl	8007ada <USBD_CtlError>
          break;
 80070ec:	e004      	b.n	80070f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fcf2 	bl	8007ada <USBD_CtlError>
          break;
 80070f6:	e000      	b.n	80070fa <USBD_StdItfReq+0xc2>
          break;
 80070f8:	bf00      	nop
      }
      break;
 80070fa:	e004      	b.n	8007106 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fceb 	bl	8007ada <USBD_CtlError>
      break;
 8007104:	bf00      	nop
  }

  return ret;
 8007106:	7bfb      	ldrb	r3, [r7, #15]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	889b      	ldrh	r3, [r3, #4]
 8007122:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800712c:	2b40      	cmp	r3, #64	; 0x40
 800712e:	d007      	beq.n	8007140 <USBD_StdEPReq+0x30>
 8007130:	2b40      	cmp	r3, #64	; 0x40
 8007132:	f200 817f 	bhi.w	8007434 <USBD_StdEPReq+0x324>
 8007136:	2b00      	cmp	r3, #0
 8007138:	d02a      	beq.n	8007190 <USBD_StdEPReq+0x80>
 800713a:	2b20      	cmp	r3, #32
 800713c:	f040 817a 	bne.w	8007434 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007140:	7bbb      	ldrb	r3, [r7, #14]
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7ff febd 	bl	8006ec4 <USBD_CoreFindEP>
 800714a:	4603      	mov	r3, r0
 800714c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800714e:	7b7b      	ldrb	r3, [r7, #13]
 8007150:	2bff      	cmp	r3, #255	; 0xff
 8007152:	f000 8174 	beq.w	800743e <USBD_StdEPReq+0x32e>
 8007156:	7b7b      	ldrb	r3, [r7, #13]
 8007158:	2b00      	cmp	r3, #0
 800715a:	f040 8170 	bne.w	800743e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800715e:	7b7a      	ldrb	r2, [r7, #13]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007166:	7b7a      	ldrb	r2, [r7, #13]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	32ae      	adds	r2, #174	; 0xae
 800716c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 8163 	beq.w	800743e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007178:	7b7a      	ldrb	r2, [r7, #13]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	32ae      	adds	r2, #174	; 0xae
 800717e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	4798      	blx	r3
 800718a:	4603      	mov	r3, r0
 800718c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800718e:	e156      	b.n	800743e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	785b      	ldrb	r3, [r3, #1]
 8007194:	2b03      	cmp	r3, #3
 8007196:	d008      	beq.n	80071aa <USBD_StdEPReq+0x9a>
 8007198:	2b03      	cmp	r3, #3
 800719a:	f300 8145 	bgt.w	8007428 <USBD_StdEPReq+0x318>
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f000 809b 	beq.w	80072da <USBD_StdEPReq+0x1ca>
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d03c      	beq.n	8007222 <USBD_StdEPReq+0x112>
 80071a8:	e13e      	b.n	8007428 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d002      	beq.n	80071bc <USBD_StdEPReq+0xac>
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	d016      	beq.n	80071e8 <USBD_StdEPReq+0xd8>
 80071ba:	e02c      	b.n	8007216 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071bc:	7bbb      	ldrb	r3, [r7, #14]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00d      	beq.n	80071de <USBD_StdEPReq+0xce>
 80071c2:	7bbb      	ldrb	r3, [r7, #14]
 80071c4:	2b80      	cmp	r3, #128	; 0x80
 80071c6:	d00a      	beq.n	80071de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071c8:	7bbb      	ldrb	r3, [r7, #14]
 80071ca:	4619      	mov	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f001 f927 	bl	8008420 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071d2:	2180      	movs	r1, #128	; 0x80
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f001 f923 	bl	8008420 <USBD_LL_StallEP>
 80071da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071dc:	e020      	b.n	8007220 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fc7a 	bl	8007ada <USBD_CtlError>
              break;
 80071e6:	e01b      	b.n	8007220 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	885b      	ldrh	r3, [r3, #2]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10e      	bne.n	800720e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80071f0:	7bbb      	ldrb	r3, [r7, #14]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00b      	beq.n	800720e <USBD_StdEPReq+0xfe>
 80071f6:	7bbb      	ldrb	r3, [r7, #14]
 80071f8:	2b80      	cmp	r3, #128	; 0x80
 80071fa:	d008      	beq.n	800720e <USBD_StdEPReq+0xfe>
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	88db      	ldrh	r3, [r3, #6]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d104      	bne.n	800720e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007204:	7bbb      	ldrb	r3, [r7, #14]
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 f909 	bl	8008420 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fd2e 	bl	8007c70 <USBD_CtlSendStatus>

              break;
 8007214:	e004      	b.n	8007220 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007216:	6839      	ldr	r1, [r7, #0]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fc5e 	bl	8007ada <USBD_CtlError>
              break;
 800721e:	bf00      	nop
          }
          break;
 8007220:	e107      	b.n	8007432 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b02      	cmp	r3, #2
 800722c:	d002      	beq.n	8007234 <USBD_StdEPReq+0x124>
 800722e:	2b03      	cmp	r3, #3
 8007230:	d016      	beq.n	8007260 <USBD_StdEPReq+0x150>
 8007232:	e04b      	b.n	80072cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007234:	7bbb      	ldrb	r3, [r7, #14]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00d      	beq.n	8007256 <USBD_StdEPReq+0x146>
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	2b80      	cmp	r3, #128	; 0x80
 800723e:	d00a      	beq.n	8007256 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007240:	7bbb      	ldrb	r3, [r7, #14]
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 f8eb 	bl	8008420 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800724a:	2180      	movs	r1, #128	; 0x80
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 f8e7 	bl	8008420 <USBD_LL_StallEP>
 8007252:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007254:	e040      	b.n	80072d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fc3e 	bl	8007ada <USBD_CtlError>
              break;
 800725e:	e03b      	b.n	80072d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	885b      	ldrh	r3, [r3, #2]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d136      	bne.n	80072d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007268:	7bbb      	ldrb	r3, [r7, #14]
 800726a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800726e:	2b00      	cmp	r3, #0
 8007270:	d004      	beq.n	800727c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007272:	7bbb      	ldrb	r3, [r7, #14]
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f001 f8f1 	bl	800845e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fcf7 	bl	8007c70 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007282:	7bbb      	ldrb	r3, [r7, #14]
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7ff fe1c 	bl	8006ec4 <USBD_CoreFindEP>
 800728c:	4603      	mov	r3, r0
 800728e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007290:	7b7b      	ldrb	r3, [r7, #13]
 8007292:	2bff      	cmp	r3, #255	; 0xff
 8007294:	d01f      	beq.n	80072d6 <USBD_StdEPReq+0x1c6>
 8007296:	7b7b      	ldrb	r3, [r7, #13]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d11c      	bne.n	80072d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800729c:	7b7a      	ldrb	r2, [r7, #13]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80072a4:	7b7a      	ldrb	r2, [r7, #13]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	32ae      	adds	r2, #174	; 0xae
 80072aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d010      	beq.n	80072d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80072b4:	7b7a      	ldrb	r2, [r7, #13]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	32ae      	adds	r2, #174	; 0xae
 80072ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	4798      	blx	r3
 80072c6:	4603      	mov	r3, r0
 80072c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80072ca:	e004      	b.n	80072d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fc03 	bl	8007ada <USBD_CtlError>
              break;
 80072d4:	e000      	b.n	80072d8 <USBD_StdEPReq+0x1c8>
              break;
 80072d6:	bf00      	nop
          }
          break;
 80072d8:	e0ab      	b.n	8007432 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d002      	beq.n	80072ec <USBD_StdEPReq+0x1dc>
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d032      	beq.n	8007350 <USBD_StdEPReq+0x240>
 80072ea:	e097      	b.n	800741c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072ec:	7bbb      	ldrb	r3, [r7, #14]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d007      	beq.n	8007302 <USBD_StdEPReq+0x1f2>
 80072f2:	7bbb      	ldrb	r3, [r7, #14]
 80072f4:	2b80      	cmp	r3, #128	; 0x80
 80072f6:	d004      	beq.n	8007302 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fbed 	bl	8007ada <USBD_CtlError>
                break;
 8007300:	e091      	b.n	8007426 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007302:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007306:	2b00      	cmp	r3, #0
 8007308:	da0b      	bge.n	8007322 <USBD_StdEPReq+0x212>
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	3310      	adds	r3, #16
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	4413      	add	r3, r2
 800731e:	3304      	adds	r3, #4
 8007320:	e00b      	b.n	800733a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007322:	7bbb      	ldrb	r3, [r7, #14]
 8007324:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007328:	4613      	mov	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	4413      	add	r3, r2
 8007338:	3304      	adds	r3, #4
 800733a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2202      	movs	r2, #2
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fc37 	bl	8007bbc <USBD_CtlSendData>
              break;
 800734e:	e06a      	b.n	8007426 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007350:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007354:	2b00      	cmp	r3, #0
 8007356:	da11      	bge.n	800737c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007358:	7bbb      	ldrb	r3, [r7, #14]
 800735a:	f003 020f 	and.w	r2, r3, #15
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	440b      	add	r3, r1
 800736a:	3324      	adds	r3, #36	; 0x24
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d117      	bne.n	80073a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fbb0 	bl	8007ada <USBD_CtlError>
                  break;
 800737a:	e054      	b.n	8007426 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800737c:	7bbb      	ldrb	r3, [r7, #14]
 800737e:	f003 020f 	and.w	r2, r3, #15
 8007382:	6879      	ldr	r1, [r7, #4]
 8007384:	4613      	mov	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	440b      	add	r3, r1
 800738e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d104      	bne.n	80073a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fb9d 	bl	8007ada <USBD_CtlError>
                  break;
 80073a0:	e041      	b.n	8007426 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	da0b      	bge.n	80073c2 <USBD_StdEPReq+0x2b2>
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073b0:	4613      	mov	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	3310      	adds	r3, #16
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	3304      	adds	r3, #4
 80073c0:	e00b      	b.n	80073da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073c2:	7bbb      	ldrb	r3, [r7, #14]
 80073c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073c8:	4613      	mov	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	4413      	add	r3, r2
 80073d8:	3304      	adds	r3, #4
 80073da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d002      	beq.n	80073e8 <USBD_StdEPReq+0x2d8>
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	2b80      	cmp	r3, #128	; 0x80
 80073e6:	d103      	bne.n	80073f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	e00e      	b.n	800740e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073f0:	7bbb      	ldrb	r3, [r7, #14]
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f001 f851 	bl	800849c <USBD_LL_IsStallEP>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2201      	movs	r2, #1
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	e002      	b.n	800740e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2200      	movs	r2, #0
 800740c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2202      	movs	r2, #2
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fbd1 	bl	8007bbc <USBD_CtlSendData>
              break;
 800741a:	e004      	b.n	8007426 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fb5b 	bl	8007ada <USBD_CtlError>
              break;
 8007424:	bf00      	nop
          }
          break;
 8007426:	e004      	b.n	8007432 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007428:	6839      	ldr	r1, [r7, #0]
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fb55 	bl	8007ada <USBD_CtlError>
          break;
 8007430:	bf00      	nop
      }
      break;
 8007432:	e005      	b.n	8007440 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fb4f 	bl	8007ada <USBD_CtlError>
      break;
 800743c:	e000      	b.n	8007440 <USBD_StdEPReq+0x330>
      break;
 800743e:	bf00      	nop
  }

  return ret;
 8007440:	7bfb      	ldrb	r3, [r7, #15]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
	...

0800744c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800745a:	2300      	movs	r3, #0
 800745c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	885b      	ldrh	r3, [r3, #2]
 8007466:	0a1b      	lsrs	r3, r3, #8
 8007468:	b29b      	uxth	r3, r3
 800746a:	3b01      	subs	r3, #1
 800746c:	2b06      	cmp	r3, #6
 800746e:	f200 8128 	bhi.w	80076c2 <USBD_GetDescriptor+0x276>
 8007472:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <USBD_GetDescriptor+0x2c>)
 8007474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007478:	08007495 	.word	0x08007495
 800747c:	080074ad 	.word	0x080074ad
 8007480:	080074ed 	.word	0x080074ed
 8007484:	080076c3 	.word	0x080076c3
 8007488:	080076c3 	.word	0x080076c3
 800748c:	08007663 	.word	0x08007663
 8007490:	0800768f 	.word	0x0800768f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	7c12      	ldrb	r2, [r2, #16]
 80074a0:	f107 0108 	add.w	r1, r7, #8
 80074a4:	4610      	mov	r0, r2
 80074a6:	4798      	blx	r3
 80074a8:	60f8      	str	r0, [r7, #12]
      break;
 80074aa:	e112      	b.n	80076d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	7c1b      	ldrb	r3, [r3, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10d      	bne.n	80074d0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074bc:	f107 0208 	add.w	r2, r7, #8
 80074c0:	4610      	mov	r0, r2
 80074c2:	4798      	blx	r3
 80074c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	3301      	adds	r3, #1
 80074ca:	2202      	movs	r2, #2
 80074cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80074ce:	e100      	b.n	80076d2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d8:	f107 0208 	add.w	r2, r7, #8
 80074dc:	4610      	mov	r0, r2
 80074de:	4798      	blx	r3
 80074e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3301      	adds	r3, #1
 80074e6:	2202      	movs	r2, #2
 80074e8:	701a      	strb	r2, [r3, #0]
      break;
 80074ea:	e0f2      	b.n	80076d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	885b      	ldrh	r3, [r3, #2]
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b05      	cmp	r3, #5
 80074f4:	f200 80ac 	bhi.w	8007650 <USBD_GetDescriptor+0x204>
 80074f8:	a201      	add	r2, pc, #4	; (adr r2, 8007500 <USBD_GetDescriptor+0xb4>)
 80074fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fe:	bf00      	nop
 8007500:	08007519 	.word	0x08007519
 8007504:	0800754d 	.word	0x0800754d
 8007508:	08007581 	.word	0x08007581
 800750c:	080075b5 	.word	0x080075b5
 8007510:	080075e9 	.word	0x080075e9
 8007514:	0800761d 	.word	0x0800761d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00b      	beq.n	800753c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	7c12      	ldrb	r2, [r2, #16]
 8007530:	f107 0108 	add.w	r1, r7, #8
 8007534:	4610      	mov	r0, r2
 8007536:	4798      	blx	r3
 8007538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800753a:	e091      	b.n	8007660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 facb 	bl	8007ada <USBD_CtlError>
            err++;
 8007544:	7afb      	ldrb	r3, [r7, #11]
 8007546:	3301      	adds	r3, #1
 8007548:	72fb      	strb	r3, [r7, #11]
          break;
 800754a:	e089      	b.n	8007660 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00b      	beq.n	8007570 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	7c12      	ldrb	r2, [r2, #16]
 8007564:	f107 0108 	add.w	r1, r7, #8
 8007568:	4610      	mov	r0, r2
 800756a:	4798      	blx	r3
 800756c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800756e:	e077      	b.n	8007660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fab1 	bl	8007ada <USBD_CtlError>
            err++;
 8007578:	7afb      	ldrb	r3, [r7, #11]
 800757a:	3301      	adds	r3, #1
 800757c:	72fb      	strb	r3, [r7, #11]
          break;
 800757e:	e06f      	b.n	8007660 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00b      	beq.n	80075a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	7c12      	ldrb	r2, [r2, #16]
 8007598:	f107 0108 	add.w	r1, r7, #8
 800759c:	4610      	mov	r0, r2
 800759e:	4798      	blx	r3
 80075a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075a2:	e05d      	b.n	8007660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fa97 	bl	8007ada <USBD_CtlError>
            err++;
 80075ac:	7afb      	ldrb	r3, [r7, #11]
 80075ae:	3301      	adds	r3, #1
 80075b0:	72fb      	strb	r3, [r7, #11]
          break;
 80075b2:	e055      	b.n	8007660 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00b      	beq.n	80075d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	7c12      	ldrb	r2, [r2, #16]
 80075cc:	f107 0108 	add.w	r1, r7, #8
 80075d0:	4610      	mov	r0, r2
 80075d2:	4798      	blx	r3
 80075d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075d6:	e043      	b.n	8007660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa7d 	bl	8007ada <USBD_CtlError>
            err++;
 80075e0:	7afb      	ldrb	r3, [r7, #11]
 80075e2:	3301      	adds	r3, #1
 80075e4:	72fb      	strb	r3, [r7, #11]
          break;
 80075e6:	e03b      	b.n	8007660 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ee:	695b      	ldr	r3, [r3, #20]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00b      	beq.n	800760c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	7c12      	ldrb	r2, [r2, #16]
 8007600:	f107 0108 	add.w	r1, r7, #8
 8007604:	4610      	mov	r0, r2
 8007606:	4798      	blx	r3
 8007608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800760a:	e029      	b.n	8007660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fa63 	bl	8007ada <USBD_CtlError>
            err++;
 8007614:	7afb      	ldrb	r3, [r7, #11]
 8007616:	3301      	adds	r3, #1
 8007618:	72fb      	strb	r3, [r7, #11]
          break;
 800761a:	e021      	b.n	8007660 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00b      	beq.n	8007640 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	7c12      	ldrb	r2, [r2, #16]
 8007634:	f107 0108 	add.w	r1, r7, #8
 8007638:	4610      	mov	r0, r2
 800763a:	4798      	blx	r3
 800763c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800763e:	e00f      	b.n	8007660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fa49 	bl	8007ada <USBD_CtlError>
            err++;
 8007648:	7afb      	ldrb	r3, [r7, #11]
 800764a:	3301      	adds	r3, #1
 800764c:	72fb      	strb	r3, [r7, #11]
          break;
 800764e:	e007      	b.n	8007660 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fa41 	bl	8007ada <USBD_CtlError>
          err++;
 8007658:	7afb      	ldrb	r3, [r7, #11]
 800765a:	3301      	adds	r3, #1
 800765c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800765e:	bf00      	nop
      }
      break;
 8007660:	e037      	b.n	80076d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	7c1b      	ldrb	r3, [r3, #16]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d109      	bne.n	800767e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007672:	f107 0208 	add.w	r2, r7, #8
 8007676:	4610      	mov	r0, r2
 8007678:	4798      	blx	r3
 800767a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800767c:	e029      	b.n	80076d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fa2a 	bl	8007ada <USBD_CtlError>
        err++;
 8007686:	7afb      	ldrb	r3, [r7, #11]
 8007688:	3301      	adds	r3, #1
 800768a:	72fb      	strb	r3, [r7, #11]
      break;
 800768c:	e021      	b.n	80076d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	7c1b      	ldrb	r3, [r3, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10d      	bne.n	80076b2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769e:	f107 0208 	add.w	r2, r7, #8
 80076a2:	4610      	mov	r0, r2
 80076a4:	4798      	blx	r3
 80076a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3301      	adds	r3, #1
 80076ac:	2207      	movs	r2, #7
 80076ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076b0:	e00f      	b.n	80076d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fa10 	bl	8007ada <USBD_CtlError>
        err++;
 80076ba:	7afb      	ldrb	r3, [r7, #11]
 80076bc:	3301      	adds	r3, #1
 80076be:	72fb      	strb	r3, [r7, #11]
      break;
 80076c0:	e007      	b.n	80076d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fa08 	bl	8007ada <USBD_CtlError>
      err++;
 80076ca:	7afb      	ldrb	r3, [r7, #11]
 80076cc:	3301      	adds	r3, #1
 80076ce:	72fb      	strb	r3, [r7, #11]
      break;
 80076d0:	bf00      	nop
  }

  if (err != 0U)
 80076d2:	7afb      	ldrb	r3, [r7, #11]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d11e      	bne.n	8007716 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	88db      	ldrh	r3, [r3, #6]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d016      	beq.n	800770e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80076e0:	893b      	ldrh	r3, [r7, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00e      	beq.n	8007704 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	88da      	ldrh	r2, [r3, #6]
 80076ea:	893b      	ldrh	r3, [r7, #8]
 80076ec:	4293      	cmp	r3, r2
 80076ee:	bf28      	it	cs
 80076f0:	4613      	movcs	r3, r2
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076f6:	893b      	ldrh	r3, [r7, #8]
 80076f8:	461a      	mov	r2, r3
 80076fa:	68f9      	ldr	r1, [r7, #12]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fa5d 	bl	8007bbc <USBD_CtlSendData>
 8007702:	e009      	b.n	8007718 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f9e7 	bl	8007ada <USBD_CtlError>
 800770c:	e004      	b.n	8007718 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 faae 	bl	8007c70 <USBD_CtlSendStatus>
 8007714:	e000      	b.n	8007718 <USBD_GetDescriptor+0x2cc>
    return;
 8007716:	bf00      	nop
  }
}
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop

08007720 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	889b      	ldrh	r3, [r3, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d131      	bne.n	8007796 <USBD_SetAddress+0x76>
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	88db      	ldrh	r3, [r3, #6]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d12d      	bne.n	8007796 <USBD_SetAddress+0x76>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	885b      	ldrh	r3, [r3, #2]
 800773e:	2b7f      	cmp	r3, #127	; 0x7f
 8007740:	d829      	bhi.n	8007796 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	885b      	ldrh	r3, [r3, #2]
 8007746:	b2db      	uxtb	r3, r3
 8007748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800774c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b03      	cmp	r3, #3
 8007758:	d104      	bne.n	8007764 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f9bc 	bl	8007ada <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007762:	e01d      	b.n	80077a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	7bfa      	ldrb	r2, [r7, #15]
 8007768:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800776c:	7bfb      	ldrb	r3, [r7, #15]
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 febf 	bl	80084f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fa7a 	bl	8007c70 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d004      	beq.n	800778c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2202      	movs	r2, #2
 8007786:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800778a:	e009      	b.n	80077a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007794:	e004      	b.n	80077a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f99e 	bl	8007ada <USBD_CtlError>
  }
}
 800779e:	bf00      	nop
 80077a0:	bf00      	nop
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	885b      	ldrh	r3, [r3, #2]
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	4b4e      	ldr	r3, [pc, #312]	; (80078f8 <USBD_SetConfig+0x150>)
 80077be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077c0:	4b4d      	ldr	r3, [pc, #308]	; (80078f8 <USBD_SetConfig+0x150>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d905      	bls.n	80077d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f985 	bl	8007ada <USBD_CtlError>
    return USBD_FAIL;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e08c      	b.n	80078ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d002      	beq.n	80077e6 <USBD_SetConfig+0x3e>
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d029      	beq.n	8007838 <USBD_SetConfig+0x90>
 80077e4:	e075      	b.n	80078d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80077e6:	4b44      	ldr	r3, [pc, #272]	; (80078f8 <USBD_SetConfig+0x150>)
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d020      	beq.n	8007830 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80077ee:	4b42      	ldr	r3, [pc, #264]	; (80078f8 <USBD_SetConfig+0x150>)
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077f8:	4b3f      	ldr	r3, [pc, #252]	; (80078f8 <USBD_SetConfig+0x150>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	4619      	mov	r1, r3
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7ff f821 	bl	8006846 <USBD_SetClassConfig>
 8007804:	4603      	mov	r3, r0
 8007806:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007808:	7bfb      	ldrb	r3, [r7, #15]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d008      	beq.n	8007820 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f962 	bl	8007ada <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2202      	movs	r2, #2
 800781a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800781e:	e065      	b.n	80078ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fa25 	bl	8007c70 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2203      	movs	r2, #3
 800782a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800782e:	e05d      	b.n	80078ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fa1d 	bl	8007c70 <USBD_CtlSendStatus>
      break;
 8007836:	e059      	b.n	80078ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007838:	4b2f      	ldr	r3, [pc, #188]	; (80078f8 <USBD_SetConfig+0x150>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d112      	bne.n	8007866 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007848:	4b2b      	ldr	r3, [pc, #172]	; (80078f8 <USBD_SetConfig+0x150>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007852:	4b29      	ldr	r3, [pc, #164]	; (80078f8 <USBD_SetConfig+0x150>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff f810 	bl	800687e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fa06 	bl	8007c70 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007864:	e042      	b.n	80078ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007866:	4b24      	ldr	r3, [pc, #144]	; (80078f8 <USBD_SetConfig+0x150>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	461a      	mov	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	429a      	cmp	r2, r3
 8007872:	d02a      	beq.n	80078ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	b2db      	uxtb	r3, r3
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7fe fffe 	bl	800687e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007882:	4b1d      	ldr	r3, [pc, #116]	; (80078f8 <USBD_SetConfig+0x150>)
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800788c:	4b1a      	ldr	r3, [pc, #104]	; (80078f8 <USBD_SetConfig+0x150>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	4619      	mov	r1, r3
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7fe ffd7 	bl	8006846 <USBD_SetClassConfig>
 8007898:	4603      	mov	r3, r0
 800789a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00f      	beq.n	80078c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f918 	bl	8007ada <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	4619      	mov	r1, r3
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7fe ffe3 	bl	800687e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2202      	movs	r2, #2
 80078bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078c0:	e014      	b.n	80078ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f9d4 	bl	8007c70 <USBD_CtlSendStatus>
      break;
 80078c8:	e010      	b.n	80078ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f9d0 	bl	8007c70 <USBD_CtlSendStatus>
      break;
 80078d0:	e00c      	b.n	80078ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f900 	bl	8007ada <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078da:	4b07      	ldr	r3, [pc, #28]	; (80078f8 <USBD_SetConfig+0x150>)
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	4619      	mov	r1, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7fe ffcc 	bl	800687e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80078e6:	2303      	movs	r3, #3
 80078e8:	73fb      	strb	r3, [r7, #15]
      break;
 80078ea:	bf00      	nop
  }

  return ret;
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	240001b8 	.word	0x240001b8

080078fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	88db      	ldrh	r3, [r3, #6]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d004      	beq.n	8007918 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f8e2 	bl	8007ada <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007916:	e023      	b.n	8007960 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b02      	cmp	r3, #2
 8007922:	dc02      	bgt.n	800792a <USBD_GetConfig+0x2e>
 8007924:	2b00      	cmp	r3, #0
 8007926:	dc03      	bgt.n	8007930 <USBD_GetConfig+0x34>
 8007928:	e015      	b.n	8007956 <USBD_GetConfig+0x5a>
 800792a:	2b03      	cmp	r3, #3
 800792c:	d00b      	beq.n	8007946 <USBD_GetConfig+0x4a>
 800792e:	e012      	b.n	8007956 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3308      	adds	r3, #8
 800793a:	2201      	movs	r2, #1
 800793c:	4619      	mov	r1, r3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f93c 	bl	8007bbc <USBD_CtlSendData>
        break;
 8007944:	e00c      	b.n	8007960 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	3304      	adds	r3, #4
 800794a:	2201      	movs	r2, #1
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f934 	bl	8007bbc <USBD_CtlSendData>
        break;
 8007954:	e004      	b.n	8007960 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f8be 	bl	8007ada <USBD_CtlError>
        break;
 800795e:	bf00      	nop
}
 8007960:	bf00      	nop
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007978:	b2db      	uxtb	r3, r3
 800797a:	3b01      	subs	r3, #1
 800797c:	2b02      	cmp	r3, #2
 800797e:	d81e      	bhi.n	80079be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	88db      	ldrh	r3, [r3, #6]
 8007984:	2b02      	cmp	r3, #2
 8007986:	d004      	beq.n	8007992 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f8a5 	bl	8007ada <USBD_CtlError>
        break;
 8007990:	e01a      	b.n	80079c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d005      	beq.n	80079ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	f043 0202 	orr.w	r2, r3, #2
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	330c      	adds	r3, #12
 80079b2:	2202      	movs	r2, #2
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f900 	bl	8007bbc <USBD_CtlSendData>
      break;
 80079bc:	e004      	b.n	80079c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f88a 	bl	8007ada <USBD_CtlError>
      break;
 80079c6:	bf00      	nop
  }
}
 80079c8:	bf00      	nop
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	885b      	ldrh	r3, [r3, #2]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d107      	bne.n	80079f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f940 	bl	8007c70 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80079f0:	e013      	b.n	8007a1a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	885b      	ldrh	r3, [r3, #2]
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d10b      	bne.n	8007a12 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	889b      	ldrh	r3, [r3, #4]
 80079fe:	0a1b      	lsrs	r3, r3, #8
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f930 	bl	8007c70 <USBD_CtlSendStatus>
}
 8007a10:	e003      	b.n	8007a1a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f860 	bl	8007ada <USBD_CtlError>
}
 8007a1a:	bf00      	nop
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b082      	sub	sp, #8
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	3b01      	subs	r3, #1
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d80b      	bhi.n	8007a52 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	885b      	ldrh	r3, [r3, #2]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d10c      	bne.n	8007a5c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f910 	bl	8007c70 <USBD_CtlSendStatus>
      }
      break;
 8007a50:	e004      	b.n	8007a5c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f840 	bl	8007ada <USBD_CtlError>
      break;
 8007a5a:	e000      	b.n	8007a5e <USBD_ClrFeature+0x3c>
      break;
 8007a5c:	bf00      	nop
  }
}
 8007a5e:	bf00      	nop
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b084      	sub	sp, #16
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	781a      	ldrb	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	781a      	ldrb	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f7ff fa41 	bl	8006f18 <SWAPBYTE>
 8007a96:	4603      	mov	r3, r0
 8007a98:	461a      	mov	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f7ff fa34 	bl	8006f18 <SWAPBYTE>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	3301      	adds	r3, #1
 8007abc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f7ff fa27 	bl	8006f18 <SWAPBYTE>
 8007aca:	4603      	mov	r3, r0
 8007acc:	461a      	mov	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	80da      	strh	r2, [r3, #6]
}
 8007ad2:	bf00      	nop
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b082      	sub	sp, #8
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ae4:	2180      	movs	r1, #128	; 0x80
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fc9a 	bl	8008420 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007aec:	2100      	movs	r1, #0
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fc96 	bl	8008420 <USBD_LL_StallEP>
}
 8007af4:	bf00      	nop
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d036      	beq.n	8007b80 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007b16:	6938      	ldr	r0, [r7, #16]
 8007b18:	f000 f836 	bl	8007b88 <USBD_GetLen>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	3301      	adds	r3, #1
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	005b      	lsls	r3, r3, #1
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	4413      	add	r3, r2
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	7812      	ldrb	r2, [r2, #0]
 8007b34:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b36:	7dfb      	ldrb	r3, [r7, #23]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b3c:	7dfb      	ldrb	r3, [r7, #23]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	4413      	add	r3, r2
 8007b42:	2203      	movs	r2, #3
 8007b44:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007b4c:	e013      	b.n	8007b76 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	4413      	add	r3, r2
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	7812      	ldrb	r2, [r2, #0]
 8007b58:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	613b      	str	r3, [r7, #16]
    idx++;
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
 8007b62:	3301      	adds	r3, #1
 8007b64:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	3301      	adds	r3, #1
 8007b74:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e7      	bne.n	8007b4e <USBD_GetString+0x52>
 8007b7e:	e000      	b.n	8007b82 <USBD_GetString+0x86>
    return;
 8007b80:	bf00      	nop
  }
}
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b98:	e005      	b.n	8007ba6 <USBD_GetLen+0x1e>
  {
    len++;
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1f5      	bne.n	8007b9a <USBD_GetLen+0x12>
  }

  return len;
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	2100      	movs	r1, #0
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f000 fca5 	bl	8008532 <USBD_LL_Transmit>

  return USBD_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b084      	sub	sp, #16
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	60f8      	str	r0, [r7, #12]
 8007bfa:	60b9      	str	r1, [r7, #8]
 8007bfc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	2100      	movs	r1, #0
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 fc94 	bl	8008532 <USBD_LL_Transmit>

  return USBD_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2203      	movs	r2, #3
 8007c24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 fc98 	bl	8008574 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	2100      	movs	r1, #0
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 fc87 	bl	8008574 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2204      	movs	r2, #4
 8007c7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c80:	2300      	movs	r3, #0
 8007c82:	2200      	movs	r2, #0
 8007c84:	2100      	movs	r1, #0
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fc53 	bl	8008532 <USBD_LL_Transmit>

  return USBD_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b082      	sub	sp, #8
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2205      	movs	r2, #5
 8007ca2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2100      	movs	r1, #0
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fc61 	bl	8008574 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	4913      	ldr	r1, [pc, #76]	; (8007d10 <MX_USB_DEVICE_Init+0x54>)
 8007cc4:	4813      	ldr	r0, [pc, #76]	; (8007d14 <MX_USB_DEVICE_Init+0x58>)
 8007cc6:	f7fe fd25 	bl	8006714 <USBD_Init>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d001      	beq.n	8007cd4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007cd0:	f7f8 fd4c 	bl	800076c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_AUDIO) != USBD_OK)
 8007cd4:	4910      	ldr	r1, [pc, #64]	; (8007d18 <MX_USB_DEVICE_Init+0x5c>)
 8007cd6:	480f      	ldr	r0, [pc, #60]	; (8007d14 <MX_USB_DEVICE_Init+0x58>)
 8007cd8:	f7fe fd5a 	bl	8006790 <USBD_RegisterClass>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007ce2:	f7f8 fd43 	bl	800076c <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceHS, &USBD_AUDIO_fops_HS) != USBD_OK)
 8007ce6:	490d      	ldr	r1, [pc, #52]	; (8007d1c <MX_USB_DEVICE_Init+0x60>)
 8007ce8:	480a      	ldr	r0, [pc, #40]	; (8007d14 <MX_USB_DEVICE_Init+0x58>)
 8007cea:	f7fe fcc5 	bl	8006678 <USBD_AUDIO_RegisterInterface>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d001      	beq.n	8007cf8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007cf4:	f7f8 fd3a 	bl	800076c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8007cf8:	4806      	ldr	r0, [pc, #24]	; (8007d14 <MX_USB_DEVICE_Init+0x58>)
 8007cfa:	f7fe fd8d 	bl	8006818 <USBD_Start>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d04:	f7f8 fd32 	bl	800076c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8007d08:	f7fa fd60 	bl	80027cc <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d0c:	bf00      	nop
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	240000e0 	.word	0x240000e0
 8007d14:	240001bc 	.word	0x240001bc
 8007d18:	24000010 	.word	0x24000010
 8007d1c:	240000c4 	.word	0x240000c4

08007d20 <AUDIO_Init_HS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_HS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 9 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 8007d2c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <AUDIO_DeInit_HS>:
  * @brief  DeInitializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_HS(uint32_t options)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b083      	sub	sp, #12
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 10 */
  UNUSED(options);
  return (USBD_OK);
 8007d42:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <AUDIO_AudioCmd_HS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_HS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 11 */
  switch(cmd)
 8007d5e:	79fb      	ldrb	r3, [r7, #7]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d001      	beq.n	8007d68 <AUDIO_AudioCmd_HS+0x18>
 8007d64:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 8007d66:	e000      	b.n	8007d6a <AUDIO_AudioCmd_HS+0x1a>
    break;
 8007d68:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8007d6a:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <AUDIO_VolumeCtl_HS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_HS(uint8_t vol)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 12 */
  UNUSED(vol);
  return (USBD_OK);
 8007d82:	2300      	movs	r3, #0
  /* USER CODE END 12 */
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <AUDIO_MuteCtl_HS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_HS(uint8_t cmd)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	4603      	mov	r3, r0
 8007d98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 13 */
  UNUSED(cmd);
  return (USBD_OK);
 8007d9a:	2300      	movs	r3, #0
  /* USER CODE END 13 */
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <AUDIO_PeriodicTC_HS>:
  * @brief  AUDIO_PeriodicTC_HS
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_HS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	4613      	mov	r3, r2
 8007db4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 14 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8007db6:	2300      	movs	r3, #0
  /* USER CODE END 14 */
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <AUDIO_GetState_HS>:
/**
  * @brief  Gets AUDIO state.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_HS(void)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 15 */
  return (USBD_OK);
 8007dc8:	2300      	movs	r3, #0
  /* USER CODE END 15 */
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	6039      	str	r1, [r7, #0]
 8007dde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	2212      	movs	r2, #18
 8007de4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8007de6:	4b03      	ldr	r3, [pc, #12]	; (8007df4 <USBD_HS_DeviceDescriptor+0x20>)
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	240000fc 	.word	0x240000fc

08007df8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	4603      	mov	r3, r0
 8007e00:	6039      	str	r1, [r7, #0]
 8007e02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	2204      	movs	r2, #4
 8007e08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e0a:	4b03      	ldr	r3, [pc, #12]	; (8007e18 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	24000110 	.word	0x24000110

08007e1c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	6039      	str	r1, [r7, #0]
 8007e26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e28:	79fb      	ldrb	r3, [r7, #7]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d105      	bne.n	8007e3a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	4907      	ldr	r1, [pc, #28]	; (8007e50 <USBD_HS_ProductStrDescriptor+0x34>)
 8007e32:	4808      	ldr	r0, [pc, #32]	; (8007e54 <USBD_HS_ProductStrDescriptor+0x38>)
 8007e34:	f7ff fe62 	bl	8007afc <USBD_GetString>
 8007e38:	e004      	b.n	8007e44 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	4904      	ldr	r1, [pc, #16]	; (8007e50 <USBD_HS_ProductStrDescriptor+0x34>)
 8007e3e:	4805      	ldr	r0, [pc, #20]	; (8007e54 <USBD_HS_ProductStrDescriptor+0x38>)
 8007e40:	f7ff fe5c 	bl	8007afc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e44:	4b02      	ldr	r3, [pc, #8]	; (8007e50 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	24000498 	.word	0x24000498
 8007e54:	080098f0 	.word	0x080098f0

08007e58 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	4603      	mov	r3, r0
 8007e60:	6039      	str	r1, [r7, #0]
 8007e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	4904      	ldr	r1, [pc, #16]	; (8007e78 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8007e68:	4804      	ldr	r0, [pc, #16]	; (8007e7c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8007e6a:	f7ff fe47 	bl	8007afc <USBD_GetString>
  return USBD_StrDesc;
 8007e6e:	4b02      	ldr	r3, [pc, #8]	; (8007e78 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	24000498 	.word	0x24000498
 8007e7c:	08009908 	.word	0x08009908

08007e80 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	4603      	mov	r3, r0
 8007e88:	6039      	str	r1, [r7, #0]
 8007e8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	221a      	movs	r2, #26
 8007e90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e92:	f000 f843 	bl	8007f1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8007e96:	4b02      	ldr	r3, [pc, #8]	; (8007ea0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	24000114 	.word	0x24000114

08007ea4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	6039      	str	r1, [r7, #0]
 8007eae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d105      	bne.n	8007ec2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	4907      	ldr	r1, [pc, #28]	; (8007ed8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8007eba:	4808      	ldr	r0, [pc, #32]	; (8007edc <USBD_HS_ConfigStrDescriptor+0x38>)
 8007ebc:	f7ff fe1e 	bl	8007afc <USBD_GetString>
 8007ec0:	e004      	b.n	8007ecc <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	4904      	ldr	r1, [pc, #16]	; (8007ed8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8007ec6:	4805      	ldr	r0, [pc, #20]	; (8007edc <USBD_HS_ConfigStrDescriptor+0x38>)
 8007ec8:	f7ff fe18 	bl	8007afc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ecc:	4b02      	ldr	r3, [pc, #8]	; (8007ed8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	24000498 	.word	0x24000498
 8007edc:	0800991c 	.word	0x0800991c

08007ee0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	6039      	str	r1, [r7, #0]
 8007eea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007eec:	79fb      	ldrb	r3, [r7, #7]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d105      	bne.n	8007efe <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	4907      	ldr	r1, [pc, #28]	; (8007f14 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8007ef6:	4808      	ldr	r0, [pc, #32]	; (8007f18 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8007ef8:	f7ff fe00 	bl	8007afc <USBD_GetString>
 8007efc:	e004      	b.n	8007f08 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	4904      	ldr	r1, [pc, #16]	; (8007f14 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8007f02:	4805      	ldr	r0, [pc, #20]	; (8007f18 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8007f04:	f7ff fdfa 	bl	8007afc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f08:	4b02      	ldr	r3, [pc, #8]	; (8007f14 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	24000498 	.word	0x24000498
 8007f18:	0800992c 	.word	0x0800992c

08007f1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f22:	4b0f      	ldr	r3, [pc, #60]	; (8007f60 <Get_SerialNum+0x44>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f28:	4b0e      	ldr	r3, [pc, #56]	; (8007f64 <Get_SerialNum+0x48>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007f2e:	4b0e      	ldr	r3, [pc, #56]	; (8007f68 <Get_SerialNum+0x4c>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4413      	add	r3, r2
 8007f3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d009      	beq.n	8007f56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f42:	2208      	movs	r2, #8
 8007f44:	4909      	ldr	r1, [pc, #36]	; (8007f6c <Get_SerialNum+0x50>)
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 f814 	bl	8007f74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007f4c:	2204      	movs	r2, #4
 8007f4e:	4908      	ldr	r1, [pc, #32]	; (8007f70 <Get_SerialNum+0x54>)
 8007f50:	68b8      	ldr	r0, [r7, #8]
 8007f52:	f000 f80f 	bl	8007f74 <IntToUnicode>
  }
}
 8007f56:	bf00      	nop
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	1ff1e800 	.word	0x1ff1e800
 8007f64:	1ff1e804 	.word	0x1ff1e804
 8007f68:	1ff1e808 	.word	0x1ff1e808
 8007f6c:	24000116 	.word	0x24000116
 8007f70:	24000126 	.word	0x24000126

08007f74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007f82:	2300      	movs	r3, #0
 8007f84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007f86:	2300      	movs	r3, #0
 8007f88:	75fb      	strb	r3, [r7, #23]
 8007f8a:	e027      	b.n	8007fdc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	0f1b      	lsrs	r3, r3, #28
 8007f90:	2b09      	cmp	r3, #9
 8007f92:	d80b      	bhi.n	8007fac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	0f1b      	lsrs	r3, r3, #28
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	7dfb      	ldrb	r3, [r7, #23]
 8007f9c:	005b      	lsls	r3, r3, #1
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	440b      	add	r3, r1
 8007fa4:	3230      	adds	r2, #48	; 0x30
 8007fa6:	b2d2      	uxtb	r2, r2
 8007fa8:	701a      	strb	r2, [r3, #0]
 8007faa:	e00a      	b.n	8007fc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	0f1b      	lsrs	r3, r3, #28
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	7dfb      	ldrb	r3, [r7, #23]
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	440b      	add	r3, r1
 8007fbc:	3237      	adds	r2, #55	; 0x37
 8007fbe:	b2d2      	uxtb	r2, r2
 8007fc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	011b      	lsls	r3, r3, #4
 8007fc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007fc8:	7dfb      	ldrb	r3, [r7, #23]
 8007fca:	005b      	lsls	r3, r3, #1
 8007fcc:	3301      	adds	r3, #1
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007fd6:	7dfb      	ldrb	r3, [r7, #23]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	75fb      	strb	r3, [r7, #23]
 8007fdc:	7dfa      	ldrb	r2, [r7, #23]
 8007fde:	79fb      	ldrb	r3, [r7, #7]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d3d3      	bcc.n	8007f8c <IntToUnicode+0x18>
  }
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop
 8007fe8:	371c      	adds	r7, #28
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
	...

08007ff4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b0b6      	sub	sp, #216	; 0xd8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ffc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008000:	2200      	movs	r2, #0
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	605a      	str	r2, [r3, #4]
 8008006:	609a      	str	r2, [r3, #8]
 8008008:	60da      	str	r2, [r3, #12]
 800800a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800800c:	f107 0310 	add.w	r3, r7, #16
 8008010:	22b4      	movs	r2, #180	; 0xb4
 8008012:	2100      	movs	r1, #0
 8008014:	4618      	mov	r0, r3
 8008016:	f000 fb4f 	bl	80086b8 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a2b      	ldr	r2, [pc, #172]	; (80080cc <HAL_PCD_MspInit+0xd8>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d14e      	bne.n	80080c2 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008024:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008028:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800802a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800802e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008032:	f107 0310 	add.w	r3, r7, #16
 8008036:	4618      	mov	r0, r3
 8008038:	f7fb fae6 	bl	8003608 <HAL_RCCEx_PeriphCLKConfig>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d001      	beq.n	8008046 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8008042:	f7f8 fb93 	bl	800076c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8008046:	f7fa fbc1 	bl	80027cc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800804a:	4b21      	ldr	r3, [pc, #132]	; (80080d0 <HAL_PCD_MspInit+0xdc>)
 800804c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008050:	4a1f      	ldr	r2, [pc, #124]	; (80080d0 <HAL_PCD_MspInit+0xdc>)
 8008052:	f043 0301 	orr.w	r3, r3, #1
 8008056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800805a:	4b1d      	ldr	r3, [pc, #116]	; (80080d0 <HAL_PCD_MspInit+0xdc>)
 800805c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	60fb      	str	r3, [r7, #12]
 8008066:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA10     ------> USB_OTG_HS_ID
    */
    GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8008068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800806c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008070:	2302      	movs	r3, #2
 8008072:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008076:	2300      	movs	r3, #0
 8008078:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800807c:	2300      	movs	r3, #0
 800807e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8008082:	230a      	movs	r3, #10
 8008084:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8008088:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800808c:	4619      	mov	r1, r3
 800808e:	4811      	ldr	r0, [pc, #68]	; (80080d4 <HAL_PCD_MspInit+0xe0>)
 8008090:	f7f8 fecc 	bl	8000e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8008094:	4b0e      	ldr	r3, [pc, #56]	; (80080d0 <HAL_PCD_MspInit+0xdc>)
 8008096:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800809a:	4a0d      	ldr	r2, [pc, #52]	; (80080d0 <HAL_PCD_MspInit+0xdc>)
 800809c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80080a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80080a4:	4b0a      	ldr	r3, [pc, #40]	; (80080d0 <HAL_PCD_MspInit+0xdc>)
 80080a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80080aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ae:	60bb      	str	r3, [r7, #8]
 80080b0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80080b2:	2200      	movs	r2, #0
 80080b4:	2100      	movs	r1, #0
 80080b6:	204d      	movs	r0, #77	; 0x4d
 80080b8:	f7f8 fe83 	bl	8000dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80080bc:	204d      	movs	r0, #77	; 0x4d
 80080be:	f7f8 fe9a 	bl	8000df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80080c2:	bf00      	nop
 80080c4:	37d8      	adds	r7, #216	; 0xd8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	40040000 	.word	0x40040000
 80080d0:	58024400 	.word	0x58024400
 80080d4:	58020000 	.word	0x58020000

080080d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80080ec:	4619      	mov	r1, r3
 80080ee:	4610      	mov	r0, r2
 80080f0:	f7fe fbdf 	bl	80068b2 <USBD_LL_SetupStage>
}
 80080f4:	bf00      	nop
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800810e:	78fa      	ldrb	r2, [r7, #3]
 8008110:	6879      	ldr	r1, [r7, #4]
 8008112:	4613      	mov	r3, r2
 8008114:	00db      	lsls	r3, r3, #3
 8008116:	4413      	add	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	440b      	add	r3, r1
 800811c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	78fb      	ldrb	r3, [r7, #3]
 8008124:	4619      	mov	r1, r3
 8008126:	f7fe fc19 	bl	800695c <USBD_LL_DataOutStage>
}
 800812a:	bf00      	nop
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b082      	sub	sp, #8
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	460b      	mov	r3, r1
 800813c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008144:	78fa      	ldrb	r2, [r7, #3]
 8008146:	6879      	ldr	r1, [r7, #4]
 8008148:	4613      	mov	r3, r2
 800814a:	00db      	lsls	r3, r3, #3
 800814c:	4413      	add	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	440b      	add	r3, r1
 8008152:	334c      	adds	r3, #76	; 0x4c
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	78fb      	ldrb	r3, [r7, #3]
 8008158:	4619      	mov	r1, r3
 800815a:	f7fe fcb2 	bl	8006ac2 <USBD_LL_DataInStage>
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b082      	sub	sp, #8
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008174:	4618      	mov	r0, r3
 8008176:	f7fe fde6 	bl	8006d46 <USBD_LL_SOF>
}
 800817a:	bf00      	nop
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b084      	sub	sp, #16
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800818a:	2301      	movs	r3, #1
 800818c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d102      	bne.n	800819c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008196:	2300      	movs	r3, #0
 8008198:	73fb      	strb	r3, [r7, #15]
 800819a:	e008      	b.n	80081ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d102      	bne.n	80081aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80081a4:	2301      	movs	r3, #1
 80081a6:	73fb      	strb	r3, [r7, #15]
 80081a8:	e001      	b.n	80081ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80081aa:	f7f8 fadf 	bl	800076c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081b4:	7bfa      	ldrb	r2, [r7, #15]
 80081b6:	4611      	mov	r1, r2
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fe fd86 	bl	8006cca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fe fd2e 	bl	8006c26 <USBD_LL_Reset>
}
 80081ca:	bf00      	nop
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
	...

080081d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fe fd81 	bl	8006cea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	6812      	ldr	r2, [r2, #0]
 80081f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081fa:	f043 0301 	orr.w	r3, r3, #1
 80081fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d005      	beq.n	8008214 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <HAL_PCD_SuspendCallback+0x48>)
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	4a03      	ldr	r2, [pc, #12]	; (800821c <HAL_PCD_SuspendCallback+0x48>)
 800820e:	f043 0306 	orr.w	r3, r3, #6
 8008212:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008214:	bf00      	nop
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	e000ed00 	.word	0xe000ed00

08008220 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800822e:	4618      	mov	r0, r3
 8008230:	f7fe fd71 	bl	8006d16 <USBD_LL_Resume>
}
 8008234:	bf00      	nop
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	460b      	mov	r3, r1
 8008246:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800824e:	78fa      	ldrb	r2, [r7, #3]
 8008250:	4611      	mov	r1, r2
 8008252:	4618      	mov	r0, r3
 8008254:	f7fe fdc9 	bl	8006dea <USBD_LL_IsoOUTIncomplete>
}
 8008258:	bf00      	nop
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008272:	78fa      	ldrb	r2, [r7, #3]
 8008274:	4611      	mov	r1, r2
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe fd85 	bl	8006d86 <USBD_LL_IsoINIncomplete>
}
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe fddb 	bl	8006e4e <USBD_LL_DevConnected>
}
 8008298:	bf00      	nop
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fe fdd8 	bl	8006e64 <USBD_LL_DevDisconnected>
}
 80082b4:	bf00      	nop
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d140      	bne.n	800834e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80082cc:	4a22      	ldr	r2, [pc, #136]	; (8008358 <USBD_LL_Init+0x9c>)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a20      	ldr	r2, [pc, #128]	; (8008358 <USBD_LL_Init+0x9c>)
 80082d8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80082dc:	4b1e      	ldr	r3, [pc, #120]	; (8008358 <USBD_LL_Init+0x9c>)
 80082de:	4a1f      	ldr	r2, [pc, #124]	; (800835c <USBD_LL_Init+0xa0>)
 80082e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80082e2:	4b1d      	ldr	r3, [pc, #116]	; (8008358 <USBD_LL_Init+0x9c>)
 80082e4:	2209      	movs	r2, #9
 80082e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80082e8:	4b1b      	ldr	r3, [pc, #108]	; (8008358 <USBD_LL_Init+0x9c>)
 80082ea:	2202      	movs	r2, #2
 80082ec:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = ENABLE;
 80082ee:	4b1a      	ldr	r3, [pc, #104]	; (8008358 <USBD_LL_Init+0x9c>)
 80082f0:	2201      	movs	r2, #1
 80082f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80082f4:	4b18      	ldr	r3, [pc, #96]	; (8008358 <USBD_LL_Init+0x9c>)
 80082f6:	2202      	movs	r2, #2
 80082f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80082fa:	4b17      	ldr	r3, [pc, #92]	; (8008358 <USBD_LL_Init+0x9c>)
 80082fc:	2200      	movs	r2, #0
 80082fe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8008300:	4b15      	ldr	r3, [pc, #84]	; (8008358 <USBD_LL_Init+0x9c>)
 8008302:	2200      	movs	r2, #0
 8008304:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8008306:	4b14      	ldr	r3, [pc, #80]	; (8008358 <USBD_LL_Init+0x9c>)
 8008308:	2200      	movs	r2, #0
 800830a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800830c:	4b12      	ldr	r3, [pc, #72]	; (8008358 <USBD_LL_Init+0x9c>)
 800830e:	2200      	movs	r2, #0
 8008310:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8008312:	4b11      	ldr	r3, [pc, #68]	; (8008358 <USBD_LL_Init+0x9c>)
 8008314:	2200      	movs	r2, #0
 8008316:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8008318:	4b0f      	ldr	r3, [pc, #60]	; (8008358 <USBD_LL_Init+0x9c>)
 800831a:	2200      	movs	r2, #0
 800831c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800831e:	480e      	ldr	r0, [pc, #56]	; (8008358 <USBD_LL_Init+0x9c>)
 8008320:	f7f8 ff45 	bl	80011ae <HAL_PCD_Init>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800832a:	f7f8 fa1f 	bl	800076c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800832e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008332:	4809      	ldr	r0, [pc, #36]	; (8008358 <USBD_LL_Init+0x9c>)
 8008334:	f7fa f9cf 	bl	80026d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8008338:	2280      	movs	r2, #128	; 0x80
 800833a:	2100      	movs	r1, #0
 800833c:	4806      	ldr	r0, [pc, #24]	; (8008358 <USBD_LL_Init+0x9c>)
 800833e:	f7fa f983 	bl	8002648 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8008342:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8008346:	2101      	movs	r1, #1
 8008348:	4803      	ldr	r0, [pc, #12]	; (8008358 <USBD_LL_Init+0x9c>)
 800834a:	f7fa f97d 	bl	8002648 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	24010498 	.word	0x24010498
 800835c:	40040000 	.word	0x40040000

08008360 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008376:	4618      	mov	r0, r3
 8008378:	f7f9 f83d 	bl	80013f6 <HAL_PCD_Start>
 800837c:	4603      	mov	r3, r0
 800837e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	4618      	mov	r0, r3
 8008384:	f000 f942 	bl	800860c <USBD_Get_USB_Status>
 8008388:	4603      	mov	r3, r0
 800838a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800838c:	7bbb      	ldrb	r3, [r7, #14]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	4608      	mov	r0, r1
 80083a0:	4611      	mov	r1, r2
 80083a2:	461a      	mov	r2, r3
 80083a4:	4603      	mov	r3, r0
 80083a6:	70fb      	strb	r3, [r7, #3]
 80083a8:	460b      	mov	r3, r1
 80083aa:	70bb      	strb	r3, [r7, #2]
 80083ac:	4613      	mov	r3, r2
 80083ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80083be:	78bb      	ldrb	r3, [r7, #2]
 80083c0:	883a      	ldrh	r2, [r7, #0]
 80083c2:	78f9      	ldrb	r1, [r7, #3]
 80083c4:	f7f9 fd3b 	bl	8001e3e <HAL_PCD_EP_Open>
 80083c8:	4603      	mov	r3, r0
 80083ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 f91c 	bl	800860c <USBD_Get_USB_Status>
 80083d4:	4603      	mov	r3, r0
 80083d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b084      	sub	sp, #16
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	460b      	mov	r3, r1
 80083ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083ee:	2300      	movs	r3, #0
 80083f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083fc:	78fa      	ldrb	r2, [r7, #3]
 80083fe:	4611      	mov	r1, r2
 8008400:	4618      	mov	r0, r3
 8008402:	f7f9 fd84 	bl	8001f0e <HAL_PCD_EP_Close>
 8008406:	4603      	mov	r3, r0
 8008408:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800840a:	7bfb      	ldrb	r3, [r7, #15]
 800840c:	4618      	mov	r0, r3
 800840e:	f000 f8fd 	bl	800860c <USBD_Get_USB_Status>
 8008412:	4603      	mov	r3, r0
 8008414:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008416:	7bbb      	ldrb	r3, [r7, #14]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	460b      	mov	r3, r1
 800842a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800843a:	78fa      	ldrb	r2, [r7, #3]
 800843c:	4611      	mov	r1, r2
 800843e:	4618      	mov	r0, r3
 8008440:	f7f9 fe5c 	bl	80020fc <HAL_PCD_EP_SetStall>
 8008444:	4603      	mov	r3, r0
 8008446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	4618      	mov	r0, r3
 800844c:	f000 f8de 	bl	800860c <USBD_Get_USB_Status>
 8008450:	4603      	mov	r3, r0
 8008452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008454:	7bbb      	ldrb	r3, [r7, #14]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b084      	sub	sp, #16
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	460b      	mov	r3, r1
 8008468:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008478:	78fa      	ldrb	r2, [r7, #3]
 800847a:	4611      	mov	r1, r2
 800847c:	4618      	mov	r0, r3
 800847e:	f7f9 fea1 	bl	80021c4 <HAL_PCD_EP_ClrStall>
 8008482:	4603      	mov	r3, r0
 8008484:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008486:	7bfb      	ldrb	r3, [r7, #15]
 8008488:	4618      	mov	r0, r3
 800848a:	f000 f8bf 	bl	800860c <USBD_Get_USB_Status>
 800848e:	4603      	mov	r3, r0
 8008490:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008492:	7bbb      	ldrb	r3, [r7, #14]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80084b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	da0b      	bge.n	80084d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80084b8:	78fb      	ldrb	r3, [r7, #3]
 80084ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084be:	68f9      	ldr	r1, [r7, #12]
 80084c0:	4613      	mov	r3, r2
 80084c2:	00db      	lsls	r3, r3, #3
 80084c4:	4413      	add	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	440b      	add	r3, r1
 80084ca:	333e      	adds	r3, #62	; 0x3e
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	e00b      	b.n	80084e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80084d0:	78fb      	ldrb	r3, [r7, #3]
 80084d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084d6:	68f9      	ldr	r1, [r7, #12]
 80084d8:	4613      	mov	r3, r2
 80084da:	00db      	lsls	r3, r3, #3
 80084dc:	4413      	add	r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	440b      	add	r3, r1
 80084e2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80084e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3714      	adds	r7, #20
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800850e:	78fa      	ldrb	r2, [r7, #3]
 8008510:	4611      	mov	r1, r2
 8008512:	4618      	mov	r0, r3
 8008514:	f7f9 fc6e 	bl	8001df4 <HAL_PCD_SetAddress>
 8008518:	4603      	mov	r3, r0
 800851a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	4618      	mov	r0, r3
 8008520:	f000 f874 	bl	800860c <USBD_Get_USB_Status>
 8008524:	4603      	mov	r3, r0
 8008526:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008528:	7bbb      	ldrb	r3, [r7, #14]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b086      	sub	sp, #24
 8008536:	af00      	add	r7, sp, #0
 8008538:	60f8      	str	r0, [r7, #12]
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	603b      	str	r3, [r7, #0]
 800853e:	460b      	mov	r3, r1
 8008540:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008550:	7af9      	ldrb	r1, [r7, #11]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	f7f9 fd87 	bl	8002068 <HAL_PCD_EP_Transmit>
 800855a:	4603      	mov	r3, r0
 800855c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800855e:	7dfb      	ldrb	r3, [r7, #23]
 8008560:	4618      	mov	r0, r3
 8008562:	f000 f853 	bl	800860c <USBD_Get_USB_Status>
 8008566:	4603      	mov	r3, r0
 8008568:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800856a:	7dbb      	ldrb	r3, [r7, #22]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	607a      	str	r2, [r7, #4]
 800857e:	603b      	str	r3, [r7, #0]
 8008580:	460b      	mov	r3, r1
 8008582:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008584:	2300      	movs	r3, #0
 8008586:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008588:	2300      	movs	r3, #0
 800858a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008592:	7af9      	ldrb	r1, [r7, #11]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	f7f9 fd03 	bl	8001fa2 <HAL_PCD_EP_Receive>
 800859c:	4603      	mov	r3, r0
 800859e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085a0:	7dfb      	ldrb	r3, [r7, #23]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 f832 	bl	800860c <USBD_Get_USB_Status>
 80085a8:	4603      	mov	r3, r0
 80085aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3718      	adds	r7, #24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b082      	sub	sp, #8
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	460b      	mov	r3, r1
 80085c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085c8:	78fa      	ldrb	r2, [r7, #3]
 80085ca:	4611      	mov	r1, r2
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7f9 fd33 	bl	8002038 <HAL_PCD_EP_GetRxCount>
 80085d2:	4603      	mov	r3, r0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80085e4:	4b03      	ldr	r3, [pc, #12]	; (80085f4 <USBD_static_malloc+0x18>)
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	240109a4 	.word	0x240109a4

080085f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]

}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	4603      	mov	r3, r0
 8008614:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800861a:	79fb      	ldrb	r3, [r7, #7]
 800861c:	2b03      	cmp	r3, #3
 800861e:	d817      	bhi.n	8008650 <USBD_Get_USB_Status+0x44>
 8008620:	a201      	add	r2, pc, #4	; (adr r2, 8008628 <USBD_Get_USB_Status+0x1c>)
 8008622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008626:	bf00      	nop
 8008628:	08008639 	.word	0x08008639
 800862c:	0800863f 	.word	0x0800863f
 8008630:	08008645 	.word	0x08008645
 8008634:	0800864b 	.word	0x0800864b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	73fb      	strb	r3, [r7, #15]
    break;
 800863c:	e00b      	b.n	8008656 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800863e:	2303      	movs	r3, #3
 8008640:	73fb      	strb	r3, [r7, #15]
    break;
 8008642:	e008      	b.n	8008656 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008644:	2301      	movs	r3, #1
 8008646:	73fb      	strb	r3, [r7, #15]
    break;
 8008648:	e005      	b.n	8008656 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800864a:	2303      	movs	r3, #3
 800864c:	73fb      	strb	r3, [r7, #15]
    break;
 800864e:	e002      	b.n	8008656 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008650:	2303      	movs	r3, #3
 8008652:	73fb      	strb	r3, [r7, #15]
    break;
 8008654:	bf00      	nop
  }
  return usb_status;
 8008656:	7bfb      	ldrb	r3, [r7, #15]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3714      	adds	r7, #20
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <__errno>:
 8008664:	4b01      	ldr	r3, [pc, #4]	; (800866c <__errno+0x8>)
 8008666:	6818      	ldr	r0, [r3, #0]
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	24000130 	.word	0x24000130

08008670 <__libc_init_array>:
 8008670:	b570      	push	{r4, r5, r6, lr}
 8008672:	4d0d      	ldr	r5, [pc, #52]	; (80086a8 <__libc_init_array+0x38>)
 8008674:	4c0d      	ldr	r4, [pc, #52]	; (80086ac <__libc_init_array+0x3c>)
 8008676:	1b64      	subs	r4, r4, r5
 8008678:	10a4      	asrs	r4, r4, #2
 800867a:	2600      	movs	r6, #0
 800867c:	42a6      	cmp	r6, r4
 800867e:	d109      	bne.n	8008694 <__libc_init_array+0x24>
 8008680:	4d0b      	ldr	r5, [pc, #44]	; (80086b0 <__libc_init_array+0x40>)
 8008682:	4c0c      	ldr	r4, [pc, #48]	; (80086b4 <__libc_init_array+0x44>)
 8008684:	f001 f80c 	bl	80096a0 <_init>
 8008688:	1b64      	subs	r4, r4, r5
 800868a:	10a4      	asrs	r4, r4, #2
 800868c:	2600      	movs	r6, #0
 800868e:	42a6      	cmp	r6, r4
 8008690:	d105      	bne.n	800869e <__libc_init_array+0x2e>
 8008692:	bd70      	pop	{r4, r5, r6, pc}
 8008694:	f855 3b04 	ldr.w	r3, [r5], #4
 8008698:	4798      	blx	r3
 800869a:	3601      	adds	r6, #1
 800869c:	e7ee      	b.n	800867c <__libc_init_array+0xc>
 800869e:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a2:	4798      	blx	r3
 80086a4:	3601      	adds	r6, #1
 80086a6:	e7f2      	b.n	800868e <__libc_init_array+0x1e>
 80086a8:	080099e4 	.word	0x080099e4
 80086ac:	080099e4 	.word	0x080099e4
 80086b0:	080099e4 	.word	0x080099e4
 80086b4:	080099e8 	.word	0x080099e8

080086b8 <memset>:
 80086b8:	4402      	add	r2, r0
 80086ba:	4603      	mov	r3, r0
 80086bc:	4293      	cmp	r3, r2
 80086be:	d100      	bne.n	80086c2 <memset+0xa>
 80086c0:	4770      	bx	lr
 80086c2:	f803 1b01 	strb.w	r1, [r3], #1
 80086c6:	e7f9      	b.n	80086bc <memset+0x4>

080086c8 <iprintf>:
 80086c8:	b40f      	push	{r0, r1, r2, r3}
 80086ca:	4b0a      	ldr	r3, [pc, #40]	; (80086f4 <iprintf+0x2c>)
 80086cc:	b513      	push	{r0, r1, r4, lr}
 80086ce:	681c      	ldr	r4, [r3, #0]
 80086d0:	b124      	cbz	r4, 80086dc <iprintf+0x14>
 80086d2:	69a3      	ldr	r3, [r4, #24]
 80086d4:	b913      	cbnz	r3, 80086dc <iprintf+0x14>
 80086d6:	4620      	mov	r0, r4
 80086d8:	f000 f87c 	bl	80087d4 <__sinit>
 80086dc:	ab05      	add	r3, sp, #20
 80086de:	9a04      	ldr	r2, [sp, #16]
 80086e0:	68a1      	ldr	r1, [r4, #8]
 80086e2:	9301      	str	r3, [sp, #4]
 80086e4:	4620      	mov	r0, r4
 80086e6:	f000 f9d3 	bl	8008a90 <_vfiprintf_r>
 80086ea:	b002      	add	sp, #8
 80086ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086f0:	b004      	add	sp, #16
 80086f2:	4770      	bx	lr
 80086f4:	24000130 	.word	0x24000130

080086f8 <putchar>:
 80086f8:	4b09      	ldr	r3, [pc, #36]	; (8008720 <putchar+0x28>)
 80086fa:	b513      	push	{r0, r1, r4, lr}
 80086fc:	681c      	ldr	r4, [r3, #0]
 80086fe:	4601      	mov	r1, r0
 8008700:	b134      	cbz	r4, 8008710 <putchar+0x18>
 8008702:	69a3      	ldr	r3, [r4, #24]
 8008704:	b923      	cbnz	r3, 8008710 <putchar+0x18>
 8008706:	9001      	str	r0, [sp, #4]
 8008708:	4620      	mov	r0, r4
 800870a:	f000 f863 	bl	80087d4 <__sinit>
 800870e:	9901      	ldr	r1, [sp, #4]
 8008710:	68a2      	ldr	r2, [r4, #8]
 8008712:	4620      	mov	r0, r4
 8008714:	b002      	add	sp, #8
 8008716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800871a:	f000 bc7d 	b.w	8009018 <_putc_r>
 800871e:	bf00      	nop
 8008720:	24000130 	.word	0x24000130

08008724 <std>:
 8008724:	2300      	movs	r3, #0
 8008726:	b510      	push	{r4, lr}
 8008728:	4604      	mov	r4, r0
 800872a:	e9c0 3300 	strd	r3, r3, [r0]
 800872e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008732:	6083      	str	r3, [r0, #8]
 8008734:	8181      	strh	r1, [r0, #12]
 8008736:	6643      	str	r3, [r0, #100]	; 0x64
 8008738:	81c2      	strh	r2, [r0, #14]
 800873a:	6183      	str	r3, [r0, #24]
 800873c:	4619      	mov	r1, r3
 800873e:	2208      	movs	r2, #8
 8008740:	305c      	adds	r0, #92	; 0x5c
 8008742:	f7ff ffb9 	bl	80086b8 <memset>
 8008746:	4b05      	ldr	r3, [pc, #20]	; (800875c <std+0x38>)
 8008748:	6263      	str	r3, [r4, #36]	; 0x24
 800874a:	4b05      	ldr	r3, [pc, #20]	; (8008760 <std+0x3c>)
 800874c:	62a3      	str	r3, [r4, #40]	; 0x28
 800874e:	4b05      	ldr	r3, [pc, #20]	; (8008764 <std+0x40>)
 8008750:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008752:	4b05      	ldr	r3, [pc, #20]	; (8008768 <std+0x44>)
 8008754:	6224      	str	r4, [r4, #32]
 8008756:	6323      	str	r3, [r4, #48]	; 0x30
 8008758:	bd10      	pop	{r4, pc}
 800875a:	bf00      	nop
 800875c:	080090c9 	.word	0x080090c9
 8008760:	080090eb 	.word	0x080090eb
 8008764:	08009123 	.word	0x08009123
 8008768:	08009147 	.word	0x08009147

0800876c <_cleanup_r>:
 800876c:	4901      	ldr	r1, [pc, #4]	; (8008774 <_cleanup_r+0x8>)
 800876e:	f000 b8af 	b.w	80088d0 <_fwalk_reent>
 8008772:	bf00      	nop
 8008774:	08009421 	.word	0x08009421

08008778 <__sfmoreglue>:
 8008778:	b570      	push	{r4, r5, r6, lr}
 800877a:	2268      	movs	r2, #104	; 0x68
 800877c:	1e4d      	subs	r5, r1, #1
 800877e:	4355      	muls	r5, r2
 8008780:	460e      	mov	r6, r1
 8008782:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008786:	f000 f8e5 	bl	8008954 <_malloc_r>
 800878a:	4604      	mov	r4, r0
 800878c:	b140      	cbz	r0, 80087a0 <__sfmoreglue+0x28>
 800878e:	2100      	movs	r1, #0
 8008790:	e9c0 1600 	strd	r1, r6, [r0]
 8008794:	300c      	adds	r0, #12
 8008796:	60a0      	str	r0, [r4, #8]
 8008798:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800879c:	f7ff ff8c 	bl	80086b8 <memset>
 80087a0:	4620      	mov	r0, r4
 80087a2:	bd70      	pop	{r4, r5, r6, pc}

080087a4 <__sfp_lock_acquire>:
 80087a4:	4801      	ldr	r0, [pc, #4]	; (80087ac <__sfp_lock_acquire+0x8>)
 80087a6:	f000 b8b3 	b.w	8008910 <__retarget_lock_acquire_recursive>
 80087aa:	bf00      	nop
 80087ac:	240145f9 	.word	0x240145f9

080087b0 <__sfp_lock_release>:
 80087b0:	4801      	ldr	r0, [pc, #4]	; (80087b8 <__sfp_lock_release+0x8>)
 80087b2:	f000 b8ae 	b.w	8008912 <__retarget_lock_release_recursive>
 80087b6:	bf00      	nop
 80087b8:	240145f9 	.word	0x240145f9

080087bc <__sinit_lock_acquire>:
 80087bc:	4801      	ldr	r0, [pc, #4]	; (80087c4 <__sinit_lock_acquire+0x8>)
 80087be:	f000 b8a7 	b.w	8008910 <__retarget_lock_acquire_recursive>
 80087c2:	bf00      	nop
 80087c4:	240145fa 	.word	0x240145fa

080087c8 <__sinit_lock_release>:
 80087c8:	4801      	ldr	r0, [pc, #4]	; (80087d0 <__sinit_lock_release+0x8>)
 80087ca:	f000 b8a2 	b.w	8008912 <__retarget_lock_release_recursive>
 80087ce:	bf00      	nop
 80087d0:	240145fa 	.word	0x240145fa

080087d4 <__sinit>:
 80087d4:	b510      	push	{r4, lr}
 80087d6:	4604      	mov	r4, r0
 80087d8:	f7ff fff0 	bl	80087bc <__sinit_lock_acquire>
 80087dc:	69a3      	ldr	r3, [r4, #24]
 80087de:	b11b      	cbz	r3, 80087e8 <__sinit+0x14>
 80087e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087e4:	f7ff bff0 	b.w	80087c8 <__sinit_lock_release>
 80087e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80087ec:	6523      	str	r3, [r4, #80]	; 0x50
 80087ee:	4b13      	ldr	r3, [pc, #76]	; (800883c <__sinit+0x68>)
 80087f0:	4a13      	ldr	r2, [pc, #76]	; (8008840 <__sinit+0x6c>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80087f6:	42a3      	cmp	r3, r4
 80087f8:	bf04      	itt	eq
 80087fa:	2301      	moveq	r3, #1
 80087fc:	61a3      	streq	r3, [r4, #24]
 80087fe:	4620      	mov	r0, r4
 8008800:	f000 f820 	bl	8008844 <__sfp>
 8008804:	6060      	str	r0, [r4, #4]
 8008806:	4620      	mov	r0, r4
 8008808:	f000 f81c 	bl	8008844 <__sfp>
 800880c:	60a0      	str	r0, [r4, #8]
 800880e:	4620      	mov	r0, r4
 8008810:	f000 f818 	bl	8008844 <__sfp>
 8008814:	2200      	movs	r2, #0
 8008816:	60e0      	str	r0, [r4, #12]
 8008818:	2104      	movs	r1, #4
 800881a:	6860      	ldr	r0, [r4, #4]
 800881c:	f7ff ff82 	bl	8008724 <std>
 8008820:	68a0      	ldr	r0, [r4, #8]
 8008822:	2201      	movs	r2, #1
 8008824:	2109      	movs	r1, #9
 8008826:	f7ff ff7d 	bl	8008724 <std>
 800882a:	68e0      	ldr	r0, [r4, #12]
 800882c:	2202      	movs	r2, #2
 800882e:	2112      	movs	r1, #18
 8008830:	f7ff ff78 	bl	8008724 <std>
 8008834:	2301      	movs	r3, #1
 8008836:	61a3      	str	r3, [r4, #24]
 8008838:	e7d2      	b.n	80087e0 <__sinit+0xc>
 800883a:	bf00      	nop
 800883c:	0800994c 	.word	0x0800994c
 8008840:	0800876d 	.word	0x0800876d

08008844 <__sfp>:
 8008844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008846:	4607      	mov	r7, r0
 8008848:	f7ff ffac 	bl	80087a4 <__sfp_lock_acquire>
 800884c:	4b1e      	ldr	r3, [pc, #120]	; (80088c8 <__sfp+0x84>)
 800884e:	681e      	ldr	r6, [r3, #0]
 8008850:	69b3      	ldr	r3, [r6, #24]
 8008852:	b913      	cbnz	r3, 800885a <__sfp+0x16>
 8008854:	4630      	mov	r0, r6
 8008856:	f7ff ffbd 	bl	80087d4 <__sinit>
 800885a:	3648      	adds	r6, #72	; 0x48
 800885c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008860:	3b01      	subs	r3, #1
 8008862:	d503      	bpl.n	800886c <__sfp+0x28>
 8008864:	6833      	ldr	r3, [r6, #0]
 8008866:	b30b      	cbz	r3, 80088ac <__sfp+0x68>
 8008868:	6836      	ldr	r6, [r6, #0]
 800886a:	e7f7      	b.n	800885c <__sfp+0x18>
 800886c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008870:	b9d5      	cbnz	r5, 80088a8 <__sfp+0x64>
 8008872:	4b16      	ldr	r3, [pc, #88]	; (80088cc <__sfp+0x88>)
 8008874:	60e3      	str	r3, [r4, #12]
 8008876:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800887a:	6665      	str	r5, [r4, #100]	; 0x64
 800887c:	f000 f847 	bl	800890e <__retarget_lock_init_recursive>
 8008880:	f7ff ff96 	bl	80087b0 <__sfp_lock_release>
 8008884:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008888:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800888c:	6025      	str	r5, [r4, #0]
 800888e:	61a5      	str	r5, [r4, #24]
 8008890:	2208      	movs	r2, #8
 8008892:	4629      	mov	r1, r5
 8008894:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008898:	f7ff ff0e 	bl	80086b8 <memset>
 800889c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80088a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80088a4:	4620      	mov	r0, r4
 80088a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088a8:	3468      	adds	r4, #104	; 0x68
 80088aa:	e7d9      	b.n	8008860 <__sfp+0x1c>
 80088ac:	2104      	movs	r1, #4
 80088ae:	4638      	mov	r0, r7
 80088b0:	f7ff ff62 	bl	8008778 <__sfmoreglue>
 80088b4:	4604      	mov	r4, r0
 80088b6:	6030      	str	r0, [r6, #0]
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d1d5      	bne.n	8008868 <__sfp+0x24>
 80088bc:	f7ff ff78 	bl	80087b0 <__sfp_lock_release>
 80088c0:	230c      	movs	r3, #12
 80088c2:	603b      	str	r3, [r7, #0]
 80088c4:	e7ee      	b.n	80088a4 <__sfp+0x60>
 80088c6:	bf00      	nop
 80088c8:	0800994c 	.word	0x0800994c
 80088cc:	ffff0001 	.word	0xffff0001

080088d0 <_fwalk_reent>:
 80088d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d4:	4606      	mov	r6, r0
 80088d6:	4688      	mov	r8, r1
 80088d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80088dc:	2700      	movs	r7, #0
 80088de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088e2:	f1b9 0901 	subs.w	r9, r9, #1
 80088e6:	d505      	bpl.n	80088f4 <_fwalk_reent+0x24>
 80088e8:	6824      	ldr	r4, [r4, #0]
 80088ea:	2c00      	cmp	r4, #0
 80088ec:	d1f7      	bne.n	80088de <_fwalk_reent+0xe>
 80088ee:	4638      	mov	r0, r7
 80088f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088f4:	89ab      	ldrh	r3, [r5, #12]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d907      	bls.n	800890a <_fwalk_reent+0x3a>
 80088fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088fe:	3301      	adds	r3, #1
 8008900:	d003      	beq.n	800890a <_fwalk_reent+0x3a>
 8008902:	4629      	mov	r1, r5
 8008904:	4630      	mov	r0, r6
 8008906:	47c0      	blx	r8
 8008908:	4307      	orrs	r7, r0
 800890a:	3568      	adds	r5, #104	; 0x68
 800890c:	e7e9      	b.n	80088e2 <_fwalk_reent+0x12>

0800890e <__retarget_lock_init_recursive>:
 800890e:	4770      	bx	lr

08008910 <__retarget_lock_acquire_recursive>:
 8008910:	4770      	bx	lr

08008912 <__retarget_lock_release_recursive>:
 8008912:	4770      	bx	lr

08008914 <sbrk_aligned>:
 8008914:	b570      	push	{r4, r5, r6, lr}
 8008916:	4e0e      	ldr	r6, [pc, #56]	; (8008950 <sbrk_aligned+0x3c>)
 8008918:	460c      	mov	r4, r1
 800891a:	6831      	ldr	r1, [r6, #0]
 800891c:	4605      	mov	r5, r0
 800891e:	b911      	cbnz	r1, 8008926 <sbrk_aligned+0x12>
 8008920:	f000 fbc2 	bl	80090a8 <_sbrk_r>
 8008924:	6030      	str	r0, [r6, #0]
 8008926:	4621      	mov	r1, r4
 8008928:	4628      	mov	r0, r5
 800892a:	f000 fbbd 	bl	80090a8 <_sbrk_r>
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	d00a      	beq.n	8008948 <sbrk_aligned+0x34>
 8008932:	1cc4      	adds	r4, r0, #3
 8008934:	f024 0403 	bic.w	r4, r4, #3
 8008938:	42a0      	cmp	r0, r4
 800893a:	d007      	beq.n	800894c <sbrk_aligned+0x38>
 800893c:	1a21      	subs	r1, r4, r0
 800893e:	4628      	mov	r0, r5
 8008940:	f000 fbb2 	bl	80090a8 <_sbrk_r>
 8008944:	3001      	adds	r0, #1
 8008946:	d101      	bne.n	800894c <sbrk_aligned+0x38>
 8008948:	f04f 34ff 	mov.w	r4, #4294967295
 800894c:	4620      	mov	r0, r4
 800894e:	bd70      	pop	{r4, r5, r6, pc}
 8008950:	24014600 	.word	0x24014600

08008954 <_malloc_r>:
 8008954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008958:	1ccd      	adds	r5, r1, #3
 800895a:	f025 0503 	bic.w	r5, r5, #3
 800895e:	3508      	adds	r5, #8
 8008960:	2d0c      	cmp	r5, #12
 8008962:	bf38      	it	cc
 8008964:	250c      	movcc	r5, #12
 8008966:	2d00      	cmp	r5, #0
 8008968:	4607      	mov	r7, r0
 800896a:	db01      	blt.n	8008970 <_malloc_r+0x1c>
 800896c:	42a9      	cmp	r1, r5
 800896e:	d905      	bls.n	800897c <_malloc_r+0x28>
 8008970:	230c      	movs	r3, #12
 8008972:	603b      	str	r3, [r7, #0]
 8008974:	2600      	movs	r6, #0
 8008976:	4630      	mov	r0, r6
 8008978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800897c:	4e2e      	ldr	r6, [pc, #184]	; (8008a38 <_malloc_r+0xe4>)
 800897e:	f000 fe03 	bl	8009588 <__malloc_lock>
 8008982:	6833      	ldr	r3, [r6, #0]
 8008984:	461c      	mov	r4, r3
 8008986:	bb34      	cbnz	r4, 80089d6 <_malloc_r+0x82>
 8008988:	4629      	mov	r1, r5
 800898a:	4638      	mov	r0, r7
 800898c:	f7ff ffc2 	bl	8008914 <sbrk_aligned>
 8008990:	1c43      	adds	r3, r0, #1
 8008992:	4604      	mov	r4, r0
 8008994:	d14d      	bne.n	8008a32 <_malloc_r+0xde>
 8008996:	6834      	ldr	r4, [r6, #0]
 8008998:	4626      	mov	r6, r4
 800899a:	2e00      	cmp	r6, #0
 800899c:	d140      	bne.n	8008a20 <_malloc_r+0xcc>
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	4631      	mov	r1, r6
 80089a2:	4638      	mov	r0, r7
 80089a4:	eb04 0803 	add.w	r8, r4, r3
 80089a8:	f000 fb7e 	bl	80090a8 <_sbrk_r>
 80089ac:	4580      	cmp	r8, r0
 80089ae:	d13a      	bne.n	8008a26 <_malloc_r+0xd2>
 80089b0:	6821      	ldr	r1, [r4, #0]
 80089b2:	3503      	adds	r5, #3
 80089b4:	1a6d      	subs	r5, r5, r1
 80089b6:	f025 0503 	bic.w	r5, r5, #3
 80089ba:	3508      	adds	r5, #8
 80089bc:	2d0c      	cmp	r5, #12
 80089be:	bf38      	it	cc
 80089c0:	250c      	movcc	r5, #12
 80089c2:	4629      	mov	r1, r5
 80089c4:	4638      	mov	r0, r7
 80089c6:	f7ff ffa5 	bl	8008914 <sbrk_aligned>
 80089ca:	3001      	adds	r0, #1
 80089cc:	d02b      	beq.n	8008a26 <_malloc_r+0xd2>
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	442b      	add	r3, r5
 80089d2:	6023      	str	r3, [r4, #0]
 80089d4:	e00e      	b.n	80089f4 <_malloc_r+0xa0>
 80089d6:	6822      	ldr	r2, [r4, #0]
 80089d8:	1b52      	subs	r2, r2, r5
 80089da:	d41e      	bmi.n	8008a1a <_malloc_r+0xc6>
 80089dc:	2a0b      	cmp	r2, #11
 80089de:	d916      	bls.n	8008a0e <_malloc_r+0xba>
 80089e0:	1961      	adds	r1, r4, r5
 80089e2:	42a3      	cmp	r3, r4
 80089e4:	6025      	str	r5, [r4, #0]
 80089e6:	bf18      	it	ne
 80089e8:	6059      	strne	r1, [r3, #4]
 80089ea:	6863      	ldr	r3, [r4, #4]
 80089ec:	bf08      	it	eq
 80089ee:	6031      	streq	r1, [r6, #0]
 80089f0:	5162      	str	r2, [r4, r5]
 80089f2:	604b      	str	r3, [r1, #4]
 80089f4:	4638      	mov	r0, r7
 80089f6:	f104 060b 	add.w	r6, r4, #11
 80089fa:	f000 fdcb 	bl	8009594 <__malloc_unlock>
 80089fe:	f026 0607 	bic.w	r6, r6, #7
 8008a02:	1d23      	adds	r3, r4, #4
 8008a04:	1af2      	subs	r2, r6, r3
 8008a06:	d0b6      	beq.n	8008976 <_malloc_r+0x22>
 8008a08:	1b9b      	subs	r3, r3, r6
 8008a0a:	50a3      	str	r3, [r4, r2]
 8008a0c:	e7b3      	b.n	8008976 <_malloc_r+0x22>
 8008a0e:	6862      	ldr	r2, [r4, #4]
 8008a10:	42a3      	cmp	r3, r4
 8008a12:	bf0c      	ite	eq
 8008a14:	6032      	streq	r2, [r6, #0]
 8008a16:	605a      	strne	r2, [r3, #4]
 8008a18:	e7ec      	b.n	80089f4 <_malloc_r+0xa0>
 8008a1a:	4623      	mov	r3, r4
 8008a1c:	6864      	ldr	r4, [r4, #4]
 8008a1e:	e7b2      	b.n	8008986 <_malloc_r+0x32>
 8008a20:	4634      	mov	r4, r6
 8008a22:	6876      	ldr	r6, [r6, #4]
 8008a24:	e7b9      	b.n	800899a <_malloc_r+0x46>
 8008a26:	230c      	movs	r3, #12
 8008a28:	603b      	str	r3, [r7, #0]
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	f000 fdb2 	bl	8009594 <__malloc_unlock>
 8008a30:	e7a1      	b.n	8008976 <_malloc_r+0x22>
 8008a32:	6025      	str	r5, [r4, #0]
 8008a34:	e7de      	b.n	80089f4 <_malloc_r+0xa0>
 8008a36:	bf00      	nop
 8008a38:	240145fc 	.word	0x240145fc

08008a3c <__sfputc_r>:
 8008a3c:	6893      	ldr	r3, [r2, #8]
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	b410      	push	{r4}
 8008a44:	6093      	str	r3, [r2, #8]
 8008a46:	da08      	bge.n	8008a5a <__sfputc_r+0x1e>
 8008a48:	6994      	ldr	r4, [r2, #24]
 8008a4a:	42a3      	cmp	r3, r4
 8008a4c:	db01      	blt.n	8008a52 <__sfputc_r+0x16>
 8008a4e:	290a      	cmp	r1, #10
 8008a50:	d103      	bne.n	8008a5a <__sfputc_r+0x1e>
 8008a52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a56:	f000 bb7b 	b.w	8009150 <__swbuf_r>
 8008a5a:	6813      	ldr	r3, [r2, #0]
 8008a5c:	1c58      	adds	r0, r3, #1
 8008a5e:	6010      	str	r0, [r2, #0]
 8008a60:	7019      	strb	r1, [r3, #0]
 8008a62:	4608      	mov	r0, r1
 8008a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <__sfputs_r>:
 8008a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6c:	4606      	mov	r6, r0
 8008a6e:	460f      	mov	r7, r1
 8008a70:	4614      	mov	r4, r2
 8008a72:	18d5      	adds	r5, r2, r3
 8008a74:	42ac      	cmp	r4, r5
 8008a76:	d101      	bne.n	8008a7c <__sfputs_r+0x12>
 8008a78:	2000      	movs	r0, #0
 8008a7a:	e007      	b.n	8008a8c <__sfputs_r+0x22>
 8008a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a80:	463a      	mov	r2, r7
 8008a82:	4630      	mov	r0, r6
 8008a84:	f7ff ffda 	bl	8008a3c <__sfputc_r>
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	d1f3      	bne.n	8008a74 <__sfputs_r+0xa>
 8008a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a90 <_vfiprintf_r>:
 8008a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	460d      	mov	r5, r1
 8008a96:	b09d      	sub	sp, #116	; 0x74
 8008a98:	4614      	mov	r4, r2
 8008a9a:	4698      	mov	r8, r3
 8008a9c:	4606      	mov	r6, r0
 8008a9e:	b118      	cbz	r0, 8008aa8 <_vfiprintf_r+0x18>
 8008aa0:	6983      	ldr	r3, [r0, #24]
 8008aa2:	b90b      	cbnz	r3, 8008aa8 <_vfiprintf_r+0x18>
 8008aa4:	f7ff fe96 	bl	80087d4 <__sinit>
 8008aa8:	4b89      	ldr	r3, [pc, #548]	; (8008cd0 <_vfiprintf_r+0x240>)
 8008aaa:	429d      	cmp	r5, r3
 8008aac:	d11b      	bne.n	8008ae6 <_vfiprintf_r+0x56>
 8008aae:	6875      	ldr	r5, [r6, #4]
 8008ab0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ab2:	07d9      	lsls	r1, r3, #31
 8008ab4:	d405      	bmi.n	8008ac2 <_vfiprintf_r+0x32>
 8008ab6:	89ab      	ldrh	r3, [r5, #12]
 8008ab8:	059a      	lsls	r2, r3, #22
 8008aba:	d402      	bmi.n	8008ac2 <_vfiprintf_r+0x32>
 8008abc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008abe:	f7ff ff27 	bl	8008910 <__retarget_lock_acquire_recursive>
 8008ac2:	89ab      	ldrh	r3, [r5, #12]
 8008ac4:	071b      	lsls	r3, r3, #28
 8008ac6:	d501      	bpl.n	8008acc <_vfiprintf_r+0x3c>
 8008ac8:	692b      	ldr	r3, [r5, #16]
 8008aca:	b9eb      	cbnz	r3, 8008b08 <_vfiprintf_r+0x78>
 8008acc:	4629      	mov	r1, r5
 8008ace:	4630      	mov	r0, r6
 8008ad0:	f000 fba2 	bl	8009218 <__swsetup_r>
 8008ad4:	b1c0      	cbz	r0, 8008b08 <_vfiprintf_r+0x78>
 8008ad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ad8:	07dc      	lsls	r4, r3, #31
 8008ada:	d50e      	bpl.n	8008afa <_vfiprintf_r+0x6a>
 8008adc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae0:	b01d      	add	sp, #116	; 0x74
 8008ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae6:	4b7b      	ldr	r3, [pc, #492]	; (8008cd4 <_vfiprintf_r+0x244>)
 8008ae8:	429d      	cmp	r5, r3
 8008aea:	d101      	bne.n	8008af0 <_vfiprintf_r+0x60>
 8008aec:	68b5      	ldr	r5, [r6, #8]
 8008aee:	e7df      	b.n	8008ab0 <_vfiprintf_r+0x20>
 8008af0:	4b79      	ldr	r3, [pc, #484]	; (8008cd8 <_vfiprintf_r+0x248>)
 8008af2:	429d      	cmp	r5, r3
 8008af4:	bf08      	it	eq
 8008af6:	68f5      	ldreq	r5, [r6, #12]
 8008af8:	e7da      	b.n	8008ab0 <_vfiprintf_r+0x20>
 8008afa:	89ab      	ldrh	r3, [r5, #12]
 8008afc:	0598      	lsls	r0, r3, #22
 8008afe:	d4ed      	bmi.n	8008adc <_vfiprintf_r+0x4c>
 8008b00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b02:	f7ff ff06 	bl	8008912 <__retarget_lock_release_recursive>
 8008b06:	e7e9      	b.n	8008adc <_vfiprintf_r+0x4c>
 8008b08:	2300      	movs	r3, #0
 8008b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b0c:	2320      	movs	r3, #32
 8008b0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b12:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b16:	2330      	movs	r3, #48	; 0x30
 8008b18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008cdc <_vfiprintf_r+0x24c>
 8008b1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b20:	f04f 0901 	mov.w	r9, #1
 8008b24:	4623      	mov	r3, r4
 8008b26:	469a      	mov	sl, r3
 8008b28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b2c:	b10a      	cbz	r2, 8008b32 <_vfiprintf_r+0xa2>
 8008b2e:	2a25      	cmp	r2, #37	; 0x25
 8008b30:	d1f9      	bne.n	8008b26 <_vfiprintf_r+0x96>
 8008b32:	ebba 0b04 	subs.w	fp, sl, r4
 8008b36:	d00b      	beq.n	8008b50 <_vfiprintf_r+0xc0>
 8008b38:	465b      	mov	r3, fp
 8008b3a:	4622      	mov	r2, r4
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f7ff ff93 	bl	8008a6a <__sfputs_r>
 8008b44:	3001      	adds	r0, #1
 8008b46:	f000 80aa 	beq.w	8008c9e <_vfiprintf_r+0x20e>
 8008b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b4c:	445a      	add	r2, fp
 8008b4e:	9209      	str	r2, [sp, #36]	; 0x24
 8008b50:	f89a 3000 	ldrb.w	r3, [sl]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f000 80a2 	beq.w	8008c9e <_vfiprintf_r+0x20e>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b64:	f10a 0a01 	add.w	sl, sl, #1
 8008b68:	9304      	str	r3, [sp, #16]
 8008b6a:	9307      	str	r3, [sp, #28]
 8008b6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b70:	931a      	str	r3, [sp, #104]	; 0x68
 8008b72:	4654      	mov	r4, sl
 8008b74:	2205      	movs	r2, #5
 8008b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b7a:	4858      	ldr	r0, [pc, #352]	; (8008cdc <_vfiprintf_r+0x24c>)
 8008b7c:	f7f7 fbc8 	bl	8000310 <memchr>
 8008b80:	9a04      	ldr	r2, [sp, #16]
 8008b82:	b9d8      	cbnz	r0, 8008bbc <_vfiprintf_r+0x12c>
 8008b84:	06d1      	lsls	r1, r2, #27
 8008b86:	bf44      	itt	mi
 8008b88:	2320      	movmi	r3, #32
 8008b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b8e:	0713      	lsls	r3, r2, #28
 8008b90:	bf44      	itt	mi
 8008b92:	232b      	movmi	r3, #43	; 0x2b
 8008b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b98:	f89a 3000 	ldrb.w	r3, [sl]
 8008b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8008b9e:	d015      	beq.n	8008bcc <_vfiprintf_r+0x13c>
 8008ba0:	9a07      	ldr	r2, [sp, #28]
 8008ba2:	4654      	mov	r4, sl
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	f04f 0c0a 	mov.w	ip, #10
 8008baa:	4621      	mov	r1, r4
 8008bac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bb0:	3b30      	subs	r3, #48	; 0x30
 8008bb2:	2b09      	cmp	r3, #9
 8008bb4:	d94e      	bls.n	8008c54 <_vfiprintf_r+0x1c4>
 8008bb6:	b1b0      	cbz	r0, 8008be6 <_vfiprintf_r+0x156>
 8008bb8:	9207      	str	r2, [sp, #28]
 8008bba:	e014      	b.n	8008be6 <_vfiprintf_r+0x156>
 8008bbc:	eba0 0308 	sub.w	r3, r0, r8
 8008bc0:	fa09 f303 	lsl.w	r3, r9, r3
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	9304      	str	r3, [sp, #16]
 8008bc8:	46a2      	mov	sl, r4
 8008bca:	e7d2      	b.n	8008b72 <_vfiprintf_r+0xe2>
 8008bcc:	9b03      	ldr	r3, [sp, #12]
 8008bce:	1d19      	adds	r1, r3, #4
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	9103      	str	r1, [sp, #12]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	bfbb      	ittet	lt
 8008bd8:	425b      	neglt	r3, r3
 8008bda:	f042 0202 	orrlt.w	r2, r2, #2
 8008bde:	9307      	strge	r3, [sp, #28]
 8008be0:	9307      	strlt	r3, [sp, #28]
 8008be2:	bfb8      	it	lt
 8008be4:	9204      	strlt	r2, [sp, #16]
 8008be6:	7823      	ldrb	r3, [r4, #0]
 8008be8:	2b2e      	cmp	r3, #46	; 0x2e
 8008bea:	d10c      	bne.n	8008c06 <_vfiprintf_r+0x176>
 8008bec:	7863      	ldrb	r3, [r4, #1]
 8008bee:	2b2a      	cmp	r3, #42	; 0x2a
 8008bf0:	d135      	bne.n	8008c5e <_vfiprintf_r+0x1ce>
 8008bf2:	9b03      	ldr	r3, [sp, #12]
 8008bf4:	1d1a      	adds	r2, r3, #4
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	9203      	str	r2, [sp, #12]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	bfb8      	it	lt
 8008bfe:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c02:	3402      	adds	r4, #2
 8008c04:	9305      	str	r3, [sp, #20]
 8008c06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008cec <_vfiprintf_r+0x25c>
 8008c0a:	7821      	ldrb	r1, [r4, #0]
 8008c0c:	2203      	movs	r2, #3
 8008c0e:	4650      	mov	r0, sl
 8008c10:	f7f7 fb7e 	bl	8000310 <memchr>
 8008c14:	b140      	cbz	r0, 8008c28 <_vfiprintf_r+0x198>
 8008c16:	2340      	movs	r3, #64	; 0x40
 8008c18:	eba0 000a 	sub.w	r0, r0, sl
 8008c1c:	fa03 f000 	lsl.w	r0, r3, r0
 8008c20:	9b04      	ldr	r3, [sp, #16]
 8008c22:	4303      	orrs	r3, r0
 8008c24:	3401      	adds	r4, #1
 8008c26:	9304      	str	r3, [sp, #16]
 8008c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c2c:	482c      	ldr	r0, [pc, #176]	; (8008ce0 <_vfiprintf_r+0x250>)
 8008c2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c32:	2206      	movs	r2, #6
 8008c34:	f7f7 fb6c 	bl	8000310 <memchr>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	d03f      	beq.n	8008cbc <_vfiprintf_r+0x22c>
 8008c3c:	4b29      	ldr	r3, [pc, #164]	; (8008ce4 <_vfiprintf_r+0x254>)
 8008c3e:	bb1b      	cbnz	r3, 8008c88 <_vfiprintf_r+0x1f8>
 8008c40:	9b03      	ldr	r3, [sp, #12]
 8008c42:	3307      	adds	r3, #7
 8008c44:	f023 0307 	bic.w	r3, r3, #7
 8008c48:	3308      	adds	r3, #8
 8008c4a:	9303      	str	r3, [sp, #12]
 8008c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c4e:	443b      	add	r3, r7
 8008c50:	9309      	str	r3, [sp, #36]	; 0x24
 8008c52:	e767      	b.n	8008b24 <_vfiprintf_r+0x94>
 8008c54:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c58:	460c      	mov	r4, r1
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	e7a5      	b.n	8008baa <_vfiprintf_r+0x11a>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	3401      	adds	r4, #1
 8008c62:	9305      	str	r3, [sp, #20]
 8008c64:	4619      	mov	r1, r3
 8008c66:	f04f 0c0a 	mov.w	ip, #10
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c70:	3a30      	subs	r2, #48	; 0x30
 8008c72:	2a09      	cmp	r2, #9
 8008c74:	d903      	bls.n	8008c7e <_vfiprintf_r+0x1ee>
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d0c5      	beq.n	8008c06 <_vfiprintf_r+0x176>
 8008c7a:	9105      	str	r1, [sp, #20]
 8008c7c:	e7c3      	b.n	8008c06 <_vfiprintf_r+0x176>
 8008c7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c82:	4604      	mov	r4, r0
 8008c84:	2301      	movs	r3, #1
 8008c86:	e7f0      	b.n	8008c6a <_vfiprintf_r+0x1da>
 8008c88:	ab03      	add	r3, sp, #12
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	462a      	mov	r2, r5
 8008c8e:	4b16      	ldr	r3, [pc, #88]	; (8008ce8 <_vfiprintf_r+0x258>)
 8008c90:	a904      	add	r1, sp, #16
 8008c92:	4630      	mov	r0, r6
 8008c94:	f3af 8000 	nop.w
 8008c98:	4607      	mov	r7, r0
 8008c9a:	1c78      	adds	r0, r7, #1
 8008c9c:	d1d6      	bne.n	8008c4c <_vfiprintf_r+0x1bc>
 8008c9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ca0:	07d9      	lsls	r1, r3, #31
 8008ca2:	d405      	bmi.n	8008cb0 <_vfiprintf_r+0x220>
 8008ca4:	89ab      	ldrh	r3, [r5, #12]
 8008ca6:	059a      	lsls	r2, r3, #22
 8008ca8:	d402      	bmi.n	8008cb0 <_vfiprintf_r+0x220>
 8008caa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cac:	f7ff fe31 	bl	8008912 <__retarget_lock_release_recursive>
 8008cb0:	89ab      	ldrh	r3, [r5, #12]
 8008cb2:	065b      	lsls	r3, r3, #25
 8008cb4:	f53f af12 	bmi.w	8008adc <_vfiprintf_r+0x4c>
 8008cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cba:	e711      	b.n	8008ae0 <_vfiprintf_r+0x50>
 8008cbc:	ab03      	add	r3, sp, #12
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	462a      	mov	r2, r5
 8008cc2:	4b09      	ldr	r3, [pc, #36]	; (8008ce8 <_vfiprintf_r+0x258>)
 8008cc4:	a904      	add	r1, sp, #16
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	f000 f880 	bl	8008dcc <_printf_i>
 8008ccc:	e7e4      	b.n	8008c98 <_vfiprintf_r+0x208>
 8008cce:	bf00      	nop
 8008cd0:	08009970 	.word	0x08009970
 8008cd4:	08009990 	.word	0x08009990
 8008cd8:	08009950 	.word	0x08009950
 8008cdc:	080099b0 	.word	0x080099b0
 8008ce0:	080099ba 	.word	0x080099ba
 8008ce4:	00000000 	.word	0x00000000
 8008ce8:	08008a6b 	.word	0x08008a6b
 8008cec:	080099b6 	.word	0x080099b6

08008cf0 <_printf_common>:
 8008cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf4:	4616      	mov	r6, r2
 8008cf6:	4699      	mov	r9, r3
 8008cf8:	688a      	ldr	r2, [r1, #8]
 8008cfa:	690b      	ldr	r3, [r1, #16]
 8008cfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d00:	4293      	cmp	r3, r2
 8008d02:	bfb8      	it	lt
 8008d04:	4613      	movlt	r3, r2
 8008d06:	6033      	str	r3, [r6, #0]
 8008d08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d0c:	4607      	mov	r7, r0
 8008d0e:	460c      	mov	r4, r1
 8008d10:	b10a      	cbz	r2, 8008d16 <_printf_common+0x26>
 8008d12:	3301      	adds	r3, #1
 8008d14:	6033      	str	r3, [r6, #0]
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	0699      	lsls	r1, r3, #26
 8008d1a:	bf42      	ittt	mi
 8008d1c:	6833      	ldrmi	r3, [r6, #0]
 8008d1e:	3302      	addmi	r3, #2
 8008d20:	6033      	strmi	r3, [r6, #0]
 8008d22:	6825      	ldr	r5, [r4, #0]
 8008d24:	f015 0506 	ands.w	r5, r5, #6
 8008d28:	d106      	bne.n	8008d38 <_printf_common+0x48>
 8008d2a:	f104 0a19 	add.w	sl, r4, #25
 8008d2e:	68e3      	ldr	r3, [r4, #12]
 8008d30:	6832      	ldr	r2, [r6, #0]
 8008d32:	1a9b      	subs	r3, r3, r2
 8008d34:	42ab      	cmp	r3, r5
 8008d36:	dc26      	bgt.n	8008d86 <_printf_common+0x96>
 8008d38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d3c:	1e13      	subs	r3, r2, #0
 8008d3e:	6822      	ldr	r2, [r4, #0]
 8008d40:	bf18      	it	ne
 8008d42:	2301      	movne	r3, #1
 8008d44:	0692      	lsls	r2, r2, #26
 8008d46:	d42b      	bmi.n	8008da0 <_printf_common+0xb0>
 8008d48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	4638      	mov	r0, r7
 8008d50:	47c0      	blx	r8
 8008d52:	3001      	adds	r0, #1
 8008d54:	d01e      	beq.n	8008d94 <_printf_common+0xa4>
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	68e5      	ldr	r5, [r4, #12]
 8008d5a:	6832      	ldr	r2, [r6, #0]
 8008d5c:	f003 0306 	and.w	r3, r3, #6
 8008d60:	2b04      	cmp	r3, #4
 8008d62:	bf08      	it	eq
 8008d64:	1aad      	subeq	r5, r5, r2
 8008d66:	68a3      	ldr	r3, [r4, #8]
 8008d68:	6922      	ldr	r2, [r4, #16]
 8008d6a:	bf0c      	ite	eq
 8008d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d70:	2500      	movne	r5, #0
 8008d72:	4293      	cmp	r3, r2
 8008d74:	bfc4      	itt	gt
 8008d76:	1a9b      	subgt	r3, r3, r2
 8008d78:	18ed      	addgt	r5, r5, r3
 8008d7a:	2600      	movs	r6, #0
 8008d7c:	341a      	adds	r4, #26
 8008d7e:	42b5      	cmp	r5, r6
 8008d80:	d11a      	bne.n	8008db8 <_printf_common+0xc8>
 8008d82:	2000      	movs	r0, #0
 8008d84:	e008      	b.n	8008d98 <_printf_common+0xa8>
 8008d86:	2301      	movs	r3, #1
 8008d88:	4652      	mov	r2, sl
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	47c0      	blx	r8
 8008d90:	3001      	adds	r0, #1
 8008d92:	d103      	bne.n	8008d9c <_printf_common+0xac>
 8008d94:	f04f 30ff 	mov.w	r0, #4294967295
 8008d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d9c:	3501      	adds	r5, #1
 8008d9e:	e7c6      	b.n	8008d2e <_printf_common+0x3e>
 8008da0:	18e1      	adds	r1, r4, r3
 8008da2:	1c5a      	adds	r2, r3, #1
 8008da4:	2030      	movs	r0, #48	; 0x30
 8008da6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008daa:	4422      	add	r2, r4
 8008dac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008db0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008db4:	3302      	adds	r3, #2
 8008db6:	e7c7      	b.n	8008d48 <_printf_common+0x58>
 8008db8:	2301      	movs	r3, #1
 8008dba:	4622      	mov	r2, r4
 8008dbc:	4649      	mov	r1, r9
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	47c0      	blx	r8
 8008dc2:	3001      	adds	r0, #1
 8008dc4:	d0e6      	beq.n	8008d94 <_printf_common+0xa4>
 8008dc6:	3601      	adds	r6, #1
 8008dc8:	e7d9      	b.n	8008d7e <_printf_common+0x8e>
	...

08008dcc <_printf_i>:
 8008dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd0:	7e0f      	ldrb	r7, [r1, #24]
 8008dd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008dd4:	2f78      	cmp	r7, #120	; 0x78
 8008dd6:	4691      	mov	r9, r2
 8008dd8:	4680      	mov	r8, r0
 8008dda:	460c      	mov	r4, r1
 8008ddc:	469a      	mov	sl, r3
 8008dde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008de2:	d807      	bhi.n	8008df4 <_printf_i+0x28>
 8008de4:	2f62      	cmp	r7, #98	; 0x62
 8008de6:	d80a      	bhi.n	8008dfe <_printf_i+0x32>
 8008de8:	2f00      	cmp	r7, #0
 8008dea:	f000 80d8 	beq.w	8008f9e <_printf_i+0x1d2>
 8008dee:	2f58      	cmp	r7, #88	; 0x58
 8008df0:	f000 80a3 	beq.w	8008f3a <_printf_i+0x16e>
 8008df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008df8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008dfc:	e03a      	b.n	8008e74 <_printf_i+0xa8>
 8008dfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e02:	2b15      	cmp	r3, #21
 8008e04:	d8f6      	bhi.n	8008df4 <_printf_i+0x28>
 8008e06:	a101      	add	r1, pc, #4	; (adr r1, 8008e0c <_printf_i+0x40>)
 8008e08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e0c:	08008e65 	.word	0x08008e65
 8008e10:	08008e79 	.word	0x08008e79
 8008e14:	08008df5 	.word	0x08008df5
 8008e18:	08008df5 	.word	0x08008df5
 8008e1c:	08008df5 	.word	0x08008df5
 8008e20:	08008df5 	.word	0x08008df5
 8008e24:	08008e79 	.word	0x08008e79
 8008e28:	08008df5 	.word	0x08008df5
 8008e2c:	08008df5 	.word	0x08008df5
 8008e30:	08008df5 	.word	0x08008df5
 8008e34:	08008df5 	.word	0x08008df5
 8008e38:	08008f85 	.word	0x08008f85
 8008e3c:	08008ea9 	.word	0x08008ea9
 8008e40:	08008f67 	.word	0x08008f67
 8008e44:	08008df5 	.word	0x08008df5
 8008e48:	08008df5 	.word	0x08008df5
 8008e4c:	08008fa7 	.word	0x08008fa7
 8008e50:	08008df5 	.word	0x08008df5
 8008e54:	08008ea9 	.word	0x08008ea9
 8008e58:	08008df5 	.word	0x08008df5
 8008e5c:	08008df5 	.word	0x08008df5
 8008e60:	08008f6f 	.word	0x08008f6f
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	1d1a      	adds	r2, r3, #4
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	602a      	str	r2, [r5, #0]
 8008e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e74:	2301      	movs	r3, #1
 8008e76:	e0a3      	b.n	8008fc0 <_printf_i+0x1f4>
 8008e78:	6820      	ldr	r0, [r4, #0]
 8008e7a:	6829      	ldr	r1, [r5, #0]
 8008e7c:	0606      	lsls	r6, r0, #24
 8008e7e:	f101 0304 	add.w	r3, r1, #4
 8008e82:	d50a      	bpl.n	8008e9a <_printf_i+0xce>
 8008e84:	680e      	ldr	r6, [r1, #0]
 8008e86:	602b      	str	r3, [r5, #0]
 8008e88:	2e00      	cmp	r6, #0
 8008e8a:	da03      	bge.n	8008e94 <_printf_i+0xc8>
 8008e8c:	232d      	movs	r3, #45	; 0x2d
 8008e8e:	4276      	negs	r6, r6
 8008e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e94:	485e      	ldr	r0, [pc, #376]	; (8009010 <_printf_i+0x244>)
 8008e96:	230a      	movs	r3, #10
 8008e98:	e019      	b.n	8008ece <_printf_i+0x102>
 8008e9a:	680e      	ldr	r6, [r1, #0]
 8008e9c:	602b      	str	r3, [r5, #0]
 8008e9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ea2:	bf18      	it	ne
 8008ea4:	b236      	sxthne	r6, r6
 8008ea6:	e7ef      	b.n	8008e88 <_printf_i+0xbc>
 8008ea8:	682b      	ldr	r3, [r5, #0]
 8008eaa:	6820      	ldr	r0, [r4, #0]
 8008eac:	1d19      	adds	r1, r3, #4
 8008eae:	6029      	str	r1, [r5, #0]
 8008eb0:	0601      	lsls	r1, r0, #24
 8008eb2:	d501      	bpl.n	8008eb8 <_printf_i+0xec>
 8008eb4:	681e      	ldr	r6, [r3, #0]
 8008eb6:	e002      	b.n	8008ebe <_printf_i+0xf2>
 8008eb8:	0646      	lsls	r6, r0, #25
 8008eba:	d5fb      	bpl.n	8008eb4 <_printf_i+0xe8>
 8008ebc:	881e      	ldrh	r6, [r3, #0]
 8008ebe:	4854      	ldr	r0, [pc, #336]	; (8009010 <_printf_i+0x244>)
 8008ec0:	2f6f      	cmp	r7, #111	; 0x6f
 8008ec2:	bf0c      	ite	eq
 8008ec4:	2308      	moveq	r3, #8
 8008ec6:	230a      	movne	r3, #10
 8008ec8:	2100      	movs	r1, #0
 8008eca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ece:	6865      	ldr	r5, [r4, #4]
 8008ed0:	60a5      	str	r5, [r4, #8]
 8008ed2:	2d00      	cmp	r5, #0
 8008ed4:	bfa2      	ittt	ge
 8008ed6:	6821      	ldrge	r1, [r4, #0]
 8008ed8:	f021 0104 	bicge.w	r1, r1, #4
 8008edc:	6021      	strge	r1, [r4, #0]
 8008ede:	b90e      	cbnz	r6, 8008ee4 <_printf_i+0x118>
 8008ee0:	2d00      	cmp	r5, #0
 8008ee2:	d04d      	beq.n	8008f80 <_printf_i+0x1b4>
 8008ee4:	4615      	mov	r5, r2
 8008ee6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008eea:	fb03 6711 	mls	r7, r3, r1, r6
 8008eee:	5dc7      	ldrb	r7, [r0, r7]
 8008ef0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ef4:	4637      	mov	r7, r6
 8008ef6:	42bb      	cmp	r3, r7
 8008ef8:	460e      	mov	r6, r1
 8008efa:	d9f4      	bls.n	8008ee6 <_printf_i+0x11a>
 8008efc:	2b08      	cmp	r3, #8
 8008efe:	d10b      	bne.n	8008f18 <_printf_i+0x14c>
 8008f00:	6823      	ldr	r3, [r4, #0]
 8008f02:	07de      	lsls	r6, r3, #31
 8008f04:	d508      	bpl.n	8008f18 <_printf_i+0x14c>
 8008f06:	6923      	ldr	r3, [r4, #16]
 8008f08:	6861      	ldr	r1, [r4, #4]
 8008f0a:	4299      	cmp	r1, r3
 8008f0c:	bfde      	ittt	le
 8008f0e:	2330      	movle	r3, #48	; 0x30
 8008f10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f18:	1b52      	subs	r2, r2, r5
 8008f1a:	6122      	str	r2, [r4, #16]
 8008f1c:	f8cd a000 	str.w	sl, [sp]
 8008f20:	464b      	mov	r3, r9
 8008f22:	aa03      	add	r2, sp, #12
 8008f24:	4621      	mov	r1, r4
 8008f26:	4640      	mov	r0, r8
 8008f28:	f7ff fee2 	bl	8008cf0 <_printf_common>
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d14c      	bne.n	8008fca <_printf_i+0x1fe>
 8008f30:	f04f 30ff 	mov.w	r0, #4294967295
 8008f34:	b004      	add	sp, #16
 8008f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f3a:	4835      	ldr	r0, [pc, #212]	; (8009010 <_printf_i+0x244>)
 8008f3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f40:	6829      	ldr	r1, [r5, #0]
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f48:	6029      	str	r1, [r5, #0]
 8008f4a:	061d      	lsls	r5, r3, #24
 8008f4c:	d514      	bpl.n	8008f78 <_printf_i+0x1ac>
 8008f4e:	07df      	lsls	r7, r3, #31
 8008f50:	bf44      	itt	mi
 8008f52:	f043 0320 	orrmi.w	r3, r3, #32
 8008f56:	6023      	strmi	r3, [r4, #0]
 8008f58:	b91e      	cbnz	r6, 8008f62 <_printf_i+0x196>
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	f023 0320 	bic.w	r3, r3, #32
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	2310      	movs	r3, #16
 8008f64:	e7b0      	b.n	8008ec8 <_printf_i+0xfc>
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	f043 0320 	orr.w	r3, r3, #32
 8008f6c:	6023      	str	r3, [r4, #0]
 8008f6e:	2378      	movs	r3, #120	; 0x78
 8008f70:	4828      	ldr	r0, [pc, #160]	; (8009014 <_printf_i+0x248>)
 8008f72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f76:	e7e3      	b.n	8008f40 <_printf_i+0x174>
 8008f78:	0659      	lsls	r1, r3, #25
 8008f7a:	bf48      	it	mi
 8008f7c:	b2b6      	uxthmi	r6, r6
 8008f7e:	e7e6      	b.n	8008f4e <_printf_i+0x182>
 8008f80:	4615      	mov	r5, r2
 8008f82:	e7bb      	b.n	8008efc <_printf_i+0x130>
 8008f84:	682b      	ldr	r3, [r5, #0]
 8008f86:	6826      	ldr	r6, [r4, #0]
 8008f88:	6961      	ldr	r1, [r4, #20]
 8008f8a:	1d18      	adds	r0, r3, #4
 8008f8c:	6028      	str	r0, [r5, #0]
 8008f8e:	0635      	lsls	r5, r6, #24
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	d501      	bpl.n	8008f98 <_printf_i+0x1cc>
 8008f94:	6019      	str	r1, [r3, #0]
 8008f96:	e002      	b.n	8008f9e <_printf_i+0x1d2>
 8008f98:	0670      	lsls	r0, r6, #25
 8008f9a:	d5fb      	bpl.n	8008f94 <_printf_i+0x1c8>
 8008f9c:	8019      	strh	r1, [r3, #0]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	6123      	str	r3, [r4, #16]
 8008fa2:	4615      	mov	r5, r2
 8008fa4:	e7ba      	b.n	8008f1c <_printf_i+0x150>
 8008fa6:	682b      	ldr	r3, [r5, #0]
 8008fa8:	1d1a      	adds	r2, r3, #4
 8008faa:	602a      	str	r2, [r5, #0]
 8008fac:	681d      	ldr	r5, [r3, #0]
 8008fae:	6862      	ldr	r2, [r4, #4]
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f7f7 f9ac 	bl	8000310 <memchr>
 8008fb8:	b108      	cbz	r0, 8008fbe <_printf_i+0x1f2>
 8008fba:	1b40      	subs	r0, r0, r5
 8008fbc:	6060      	str	r0, [r4, #4]
 8008fbe:	6863      	ldr	r3, [r4, #4]
 8008fc0:	6123      	str	r3, [r4, #16]
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fc8:	e7a8      	b.n	8008f1c <_printf_i+0x150>
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	462a      	mov	r2, r5
 8008fce:	4649      	mov	r1, r9
 8008fd0:	4640      	mov	r0, r8
 8008fd2:	47d0      	blx	sl
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d0ab      	beq.n	8008f30 <_printf_i+0x164>
 8008fd8:	6823      	ldr	r3, [r4, #0]
 8008fda:	079b      	lsls	r3, r3, #30
 8008fdc:	d413      	bmi.n	8009006 <_printf_i+0x23a>
 8008fde:	68e0      	ldr	r0, [r4, #12]
 8008fe0:	9b03      	ldr	r3, [sp, #12]
 8008fe2:	4298      	cmp	r0, r3
 8008fe4:	bfb8      	it	lt
 8008fe6:	4618      	movlt	r0, r3
 8008fe8:	e7a4      	b.n	8008f34 <_printf_i+0x168>
 8008fea:	2301      	movs	r3, #1
 8008fec:	4632      	mov	r2, r6
 8008fee:	4649      	mov	r1, r9
 8008ff0:	4640      	mov	r0, r8
 8008ff2:	47d0      	blx	sl
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	d09b      	beq.n	8008f30 <_printf_i+0x164>
 8008ff8:	3501      	adds	r5, #1
 8008ffa:	68e3      	ldr	r3, [r4, #12]
 8008ffc:	9903      	ldr	r1, [sp, #12]
 8008ffe:	1a5b      	subs	r3, r3, r1
 8009000:	42ab      	cmp	r3, r5
 8009002:	dcf2      	bgt.n	8008fea <_printf_i+0x21e>
 8009004:	e7eb      	b.n	8008fde <_printf_i+0x212>
 8009006:	2500      	movs	r5, #0
 8009008:	f104 0619 	add.w	r6, r4, #25
 800900c:	e7f5      	b.n	8008ffa <_printf_i+0x22e>
 800900e:	bf00      	nop
 8009010:	080099c1 	.word	0x080099c1
 8009014:	080099d2 	.word	0x080099d2

08009018 <_putc_r>:
 8009018:	b570      	push	{r4, r5, r6, lr}
 800901a:	460d      	mov	r5, r1
 800901c:	4614      	mov	r4, r2
 800901e:	4606      	mov	r6, r0
 8009020:	b118      	cbz	r0, 800902a <_putc_r+0x12>
 8009022:	6983      	ldr	r3, [r0, #24]
 8009024:	b90b      	cbnz	r3, 800902a <_putc_r+0x12>
 8009026:	f7ff fbd5 	bl	80087d4 <__sinit>
 800902a:	4b1c      	ldr	r3, [pc, #112]	; (800909c <_putc_r+0x84>)
 800902c:	429c      	cmp	r4, r3
 800902e:	d124      	bne.n	800907a <_putc_r+0x62>
 8009030:	6874      	ldr	r4, [r6, #4]
 8009032:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009034:	07d8      	lsls	r0, r3, #31
 8009036:	d405      	bmi.n	8009044 <_putc_r+0x2c>
 8009038:	89a3      	ldrh	r3, [r4, #12]
 800903a:	0599      	lsls	r1, r3, #22
 800903c:	d402      	bmi.n	8009044 <_putc_r+0x2c>
 800903e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009040:	f7ff fc66 	bl	8008910 <__retarget_lock_acquire_recursive>
 8009044:	68a3      	ldr	r3, [r4, #8]
 8009046:	3b01      	subs	r3, #1
 8009048:	2b00      	cmp	r3, #0
 800904a:	60a3      	str	r3, [r4, #8]
 800904c:	da05      	bge.n	800905a <_putc_r+0x42>
 800904e:	69a2      	ldr	r2, [r4, #24]
 8009050:	4293      	cmp	r3, r2
 8009052:	db1c      	blt.n	800908e <_putc_r+0x76>
 8009054:	b2eb      	uxtb	r3, r5
 8009056:	2b0a      	cmp	r3, #10
 8009058:	d019      	beq.n	800908e <_putc_r+0x76>
 800905a:	6823      	ldr	r3, [r4, #0]
 800905c:	1c5a      	adds	r2, r3, #1
 800905e:	6022      	str	r2, [r4, #0]
 8009060:	701d      	strb	r5, [r3, #0]
 8009062:	b2ed      	uxtb	r5, r5
 8009064:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009066:	07da      	lsls	r2, r3, #31
 8009068:	d405      	bmi.n	8009076 <_putc_r+0x5e>
 800906a:	89a3      	ldrh	r3, [r4, #12]
 800906c:	059b      	lsls	r3, r3, #22
 800906e:	d402      	bmi.n	8009076 <_putc_r+0x5e>
 8009070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009072:	f7ff fc4e 	bl	8008912 <__retarget_lock_release_recursive>
 8009076:	4628      	mov	r0, r5
 8009078:	bd70      	pop	{r4, r5, r6, pc}
 800907a:	4b09      	ldr	r3, [pc, #36]	; (80090a0 <_putc_r+0x88>)
 800907c:	429c      	cmp	r4, r3
 800907e:	d101      	bne.n	8009084 <_putc_r+0x6c>
 8009080:	68b4      	ldr	r4, [r6, #8]
 8009082:	e7d6      	b.n	8009032 <_putc_r+0x1a>
 8009084:	4b07      	ldr	r3, [pc, #28]	; (80090a4 <_putc_r+0x8c>)
 8009086:	429c      	cmp	r4, r3
 8009088:	bf08      	it	eq
 800908a:	68f4      	ldreq	r4, [r6, #12]
 800908c:	e7d1      	b.n	8009032 <_putc_r+0x1a>
 800908e:	4629      	mov	r1, r5
 8009090:	4622      	mov	r2, r4
 8009092:	4630      	mov	r0, r6
 8009094:	f000 f85c 	bl	8009150 <__swbuf_r>
 8009098:	4605      	mov	r5, r0
 800909a:	e7e3      	b.n	8009064 <_putc_r+0x4c>
 800909c:	08009970 	.word	0x08009970
 80090a0:	08009990 	.word	0x08009990
 80090a4:	08009950 	.word	0x08009950

080090a8 <_sbrk_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	4d06      	ldr	r5, [pc, #24]	; (80090c4 <_sbrk_r+0x1c>)
 80090ac:	2300      	movs	r3, #0
 80090ae:	4604      	mov	r4, r0
 80090b0:	4608      	mov	r0, r1
 80090b2:	602b      	str	r3, [r5, #0]
 80090b4:	f7f7 fc1c 	bl	80008f0 <_sbrk>
 80090b8:	1c43      	adds	r3, r0, #1
 80090ba:	d102      	bne.n	80090c2 <_sbrk_r+0x1a>
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	b103      	cbz	r3, 80090c2 <_sbrk_r+0x1a>
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	bd38      	pop	{r3, r4, r5, pc}
 80090c4:	24014604 	.word	0x24014604

080090c8 <__sread>:
 80090c8:	b510      	push	{r4, lr}
 80090ca:	460c      	mov	r4, r1
 80090cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d0:	f000 fab2 	bl	8009638 <_read_r>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	bfab      	itete	ge
 80090d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090da:	89a3      	ldrhlt	r3, [r4, #12]
 80090dc:	181b      	addge	r3, r3, r0
 80090de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090e2:	bfac      	ite	ge
 80090e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80090e6:	81a3      	strhlt	r3, [r4, #12]
 80090e8:	bd10      	pop	{r4, pc}

080090ea <__swrite>:
 80090ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ee:	461f      	mov	r7, r3
 80090f0:	898b      	ldrh	r3, [r1, #12]
 80090f2:	05db      	lsls	r3, r3, #23
 80090f4:	4605      	mov	r5, r0
 80090f6:	460c      	mov	r4, r1
 80090f8:	4616      	mov	r6, r2
 80090fa:	d505      	bpl.n	8009108 <__swrite+0x1e>
 80090fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009100:	2302      	movs	r3, #2
 8009102:	2200      	movs	r2, #0
 8009104:	f000 f9c8 	bl	8009498 <_lseek_r>
 8009108:	89a3      	ldrh	r3, [r4, #12]
 800910a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800910e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009112:	81a3      	strh	r3, [r4, #12]
 8009114:	4632      	mov	r2, r6
 8009116:	463b      	mov	r3, r7
 8009118:	4628      	mov	r0, r5
 800911a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800911e:	f000 b869 	b.w	80091f4 <_write_r>

08009122 <__sseek>:
 8009122:	b510      	push	{r4, lr}
 8009124:	460c      	mov	r4, r1
 8009126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800912a:	f000 f9b5 	bl	8009498 <_lseek_r>
 800912e:	1c43      	adds	r3, r0, #1
 8009130:	89a3      	ldrh	r3, [r4, #12]
 8009132:	bf15      	itete	ne
 8009134:	6560      	strne	r0, [r4, #84]	; 0x54
 8009136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800913a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800913e:	81a3      	strheq	r3, [r4, #12]
 8009140:	bf18      	it	ne
 8009142:	81a3      	strhne	r3, [r4, #12]
 8009144:	bd10      	pop	{r4, pc}

08009146 <__sclose>:
 8009146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800914a:	f000 b8d3 	b.w	80092f4 <_close_r>
	...

08009150 <__swbuf_r>:
 8009150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009152:	460e      	mov	r6, r1
 8009154:	4614      	mov	r4, r2
 8009156:	4605      	mov	r5, r0
 8009158:	b118      	cbz	r0, 8009162 <__swbuf_r+0x12>
 800915a:	6983      	ldr	r3, [r0, #24]
 800915c:	b90b      	cbnz	r3, 8009162 <__swbuf_r+0x12>
 800915e:	f7ff fb39 	bl	80087d4 <__sinit>
 8009162:	4b21      	ldr	r3, [pc, #132]	; (80091e8 <__swbuf_r+0x98>)
 8009164:	429c      	cmp	r4, r3
 8009166:	d12b      	bne.n	80091c0 <__swbuf_r+0x70>
 8009168:	686c      	ldr	r4, [r5, #4]
 800916a:	69a3      	ldr	r3, [r4, #24]
 800916c:	60a3      	str	r3, [r4, #8]
 800916e:	89a3      	ldrh	r3, [r4, #12]
 8009170:	071a      	lsls	r2, r3, #28
 8009172:	d52f      	bpl.n	80091d4 <__swbuf_r+0x84>
 8009174:	6923      	ldr	r3, [r4, #16]
 8009176:	b36b      	cbz	r3, 80091d4 <__swbuf_r+0x84>
 8009178:	6923      	ldr	r3, [r4, #16]
 800917a:	6820      	ldr	r0, [r4, #0]
 800917c:	1ac0      	subs	r0, r0, r3
 800917e:	6963      	ldr	r3, [r4, #20]
 8009180:	b2f6      	uxtb	r6, r6
 8009182:	4283      	cmp	r3, r0
 8009184:	4637      	mov	r7, r6
 8009186:	dc04      	bgt.n	8009192 <__swbuf_r+0x42>
 8009188:	4621      	mov	r1, r4
 800918a:	4628      	mov	r0, r5
 800918c:	f000 f948 	bl	8009420 <_fflush_r>
 8009190:	bb30      	cbnz	r0, 80091e0 <__swbuf_r+0x90>
 8009192:	68a3      	ldr	r3, [r4, #8]
 8009194:	3b01      	subs	r3, #1
 8009196:	60a3      	str	r3, [r4, #8]
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	1c5a      	adds	r2, r3, #1
 800919c:	6022      	str	r2, [r4, #0]
 800919e:	701e      	strb	r6, [r3, #0]
 80091a0:	6963      	ldr	r3, [r4, #20]
 80091a2:	3001      	adds	r0, #1
 80091a4:	4283      	cmp	r3, r0
 80091a6:	d004      	beq.n	80091b2 <__swbuf_r+0x62>
 80091a8:	89a3      	ldrh	r3, [r4, #12]
 80091aa:	07db      	lsls	r3, r3, #31
 80091ac:	d506      	bpl.n	80091bc <__swbuf_r+0x6c>
 80091ae:	2e0a      	cmp	r6, #10
 80091b0:	d104      	bne.n	80091bc <__swbuf_r+0x6c>
 80091b2:	4621      	mov	r1, r4
 80091b4:	4628      	mov	r0, r5
 80091b6:	f000 f933 	bl	8009420 <_fflush_r>
 80091ba:	b988      	cbnz	r0, 80091e0 <__swbuf_r+0x90>
 80091bc:	4638      	mov	r0, r7
 80091be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091c0:	4b0a      	ldr	r3, [pc, #40]	; (80091ec <__swbuf_r+0x9c>)
 80091c2:	429c      	cmp	r4, r3
 80091c4:	d101      	bne.n	80091ca <__swbuf_r+0x7a>
 80091c6:	68ac      	ldr	r4, [r5, #8]
 80091c8:	e7cf      	b.n	800916a <__swbuf_r+0x1a>
 80091ca:	4b09      	ldr	r3, [pc, #36]	; (80091f0 <__swbuf_r+0xa0>)
 80091cc:	429c      	cmp	r4, r3
 80091ce:	bf08      	it	eq
 80091d0:	68ec      	ldreq	r4, [r5, #12]
 80091d2:	e7ca      	b.n	800916a <__swbuf_r+0x1a>
 80091d4:	4621      	mov	r1, r4
 80091d6:	4628      	mov	r0, r5
 80091d8:	f000 f81e 	bl	8009218 <__swsetup_r>
 80091dc:	2800      	cmp	r0, #0
 80091de:	d0cb      	beq.n	8009178 <__swbuf_r+0x28>
 80091e0:	f04f 37ff 	mov.w	r7, #4294967295
 80091e4:	e7ea      	b.n	80091bc <__swbuf_r+0x6c>
 80091e6:	bf00      	nop
 80091e8:	08009970 	.word	0x08009970
 80091ec:	08009990 	.word	0x08009990
 80091f0:	08009950 	.word	0x08009950

080091f4 <_write_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4d07      	ldr	r5, [pc, #28]	; (8009214 <_write_r+0x20>)
 80091f8:	4604      	mov	r4, r0
 80091fa:	4608      	mov	r0, r1
 80091fc:	4611      	mov	r1, r2
 80091fe:	2200      	movs	r2, #0
 8009200:	602a      	str	r2, [r5, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	f7f7 fb23 	bl	800084e <_write>
 8009208:	1c43      	adds	r3, r0, #1
 800920a:	d102      	bne.n	8009212 <_write_r+0x1e>
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	b103      	cbz	r3, 8009212 <_write_r+0x1e>
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	bd38      	pop	{r3, r4, r5, pc}
 8009214:	24014604 	.word	0x24014604

08009218 <__swsetup_r>:
 8009218:	4b32      	ldr	r3, [pc, #200]	; (80092e4 <__swsetup_r+0xcc>)
 800921a:	b570      	push	{r4, r5, r6, lr}
 800921c:	681d      	ldr	r5, [r3, #0]
 800921e:	4606      	mov	r6, r0
 8009220:	460c      	mov	r4, r1
 8009222:	b125      	cbz	r5, 800922e <__swsetup_r+0x16>
 8009224:	69ab      	ldr	r3, [r5, #24]
 8009226:	b913      	cbnz	r3, 800922e <__swsetup_r+0x16>
 8009228:	4628      	mov	r0, r5
 800922a:	f7ff fad3 	bl	80087d4 <__sinit>
 800922e:	4b2e      	ldr	r3, [pc, #184]	; (80092e8 <__swsetup_r+0xd0>)
 8009230:	429c      	cmp	r4, r3
 8009232:	d10f      	bne.n	8009254 <__swsetup_r+0x3c>
 8009234:	686c      	ldr	r4, [r5, #4]
 8009236:	89a3      	ldrh	r3, [r4, #12]
 8009238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800923c:	0719      	lsls	r1, r3, #28
 800923e:	d42c      	bmi.n	800929a <__swsetup_r+0x82>
 8009240:	06dd      	lsls	r5, r3, #27
 8009242:	d411      	bmi.n	8009268 <__swsetup_r+0x50>
 8009244:	2309      	movs	r3, #9
 8009246:	6033      	str	r3, [r6, #0]
 8009248:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800924c:	81a3      	strh	r3, [r4, #12]
 800924e:	f04f 30ff 	mov.w	r0, #4294967295
 8009252:	e03e      	b.n	80092d2 <__swsetup_r+0xba>
 8009254:	4b25      	ldr	r3, [pc, #148]	; (80092ec <__swsetup_r+0xd4>)
 8009256:	429c      	cmp	r4, r3
 8009258:	d101      	bne.n	800925e <__swsetup_r+0x46>
 800925a:	68ac      	ldr	r4, [r5, #8]
 800925c:	e7eb      	b.n	8009236 <__swsetup_r+0x1e>
 800925e:	4b24      	ldr	r3, [pc, #144]	; (80092f0 <__swsetup_r+0xd8>)
 8009260:	429c      	cmp	r4, r3
 8009262:	bf08      	it	eq
 8009264:	68ec      	ldreq	r4, [r5, #12]
 8009266:	e7e6      	b.n	8009236 <__swsetup_r+0x1e>
 8009268:	0758      	lsls	r0, r3, #29
 800926a:	d512      	bpl.n	8009292 <__swsetup_r+0x7a>
 800926c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800926e:	b141      	cbz	r1, 8009282 <__swsetup_r+0x6a>
 8009270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009274:	4299      	cmp	r1, r3
 8009276:	d002      	beq.n	800927e <__swsetup_r+0x66>
 8009278:	4630      	mov	r0, r6
 800927a:	f000 f991 	bl	80095a0 <_free_r>
 800927e:	2300      	movs	r3, #0
 8009280:	6363      	str	r3, [r4, #52]	; 0x34
 8009282:	89a3      	ldrh	r3, [r4, #12]
 8009284:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009288:	81a3      	strh	r3, [r4, #12]
 800928a:	2300      	movs	r3, #0
 800928c:	6063      	str	r3, [r4, #4]
 800928e:	6923      	ldr	r3, [r4, #16]
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	89a3      	ldrh	r3, [r4, #12]
 8009294:	f043 0308 	orr.w	r3, r3, #8
 8009298:	81a3      	strh	r3, [r4, #12]
 800929a:	6923      	ldr	r3, [r4, #16]
 800929c:	b94b      	cbnz	r3, 80092b2 <__swsetup_r+0x9a>
 800929e:	89a3      	ldrh	r3, [r4, #12]
 80092a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80092a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092a8:	d003      	beq.n	80092b2 <__swsetup_r+0x9a>
 80092aa:	4621      	mov	r1, r4
 80092ac:	4630      	mov	r0, r6
 80092ae:	f000 f92b 	bl	8009508 <__smakebuf_r>
 80092b2:	89a0      	ldrh	r0, [r4, #12]
 80092b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092b8:	f010 0301 	ands.w	r3, r0, #1
 80092bc:	d00a      	beq.n	80092d4 <__swsetup_r+0xbc>
 80092be:	2300      	movs	r3, #0
 80092c0:	60a3      	str	r3, [r4, #8]
 80092c2:	6963      	ldr	r3, [r4, #20]
 80092c4:	425b      	negs	r3, r3
 80092c6:	61a3      	str	r3, [r4, #24]
 80092c8:	6923      	ldr	r3, [r4, #16]
 80092ca:	b943      	cbnz	r3, 80092de <__swsetup_r+0xc6>
 80092cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80092d0:	d1ba      	bne.n	8009248 <__swsetup_r+0x30>
 80092d2:	bd70      	pop	{r4, r5, r6, pc}
 80092d4:	0781      	lsls	r1, r0, #30
 80092d6:	bf58      	it	pl
 80092d8:	6963      	ldrpl	r3, [r4, #20]
 80092da:	60a3      	str	r3, [r4, #8]
 80092dc:	e7f4      	b.n	80092c8 <__swsetup_r+0xb0>
 80092de:	2000      	movs	r0, #0
 80092e0:	e7f7      	b.n	80092d2 <__swsetup_r+0xba>
 80092e2:	bf00      	nop
 80092e4:	24000130 	.word	0x24000130
 80092e8:	08009970 	.word	0x08009970
 80092ec:	08009990 	.word	0x08009990
 80092f0:	08009950 	.word	0x08009950

080092f4 <_close_r>:
 80092f4:	b538      	push	{r3, r4, r5, lr}
 80092f6:	4d06      	ldr	r5, [pc, #24]	; (8009310 <_close_r+0x1c>)
 80092f8:	2300      	movs	r3, #0
 80092fa:	4604      	mov	r4, r0
 80092fc:	4608      	mov	r0, r1
 80092fe:	602b      	str	r3, [r5, #0]
 8009300:	f7f7 fac1 	bl	8000886 <_close>
 8009304:	1c43      	adds	r3, r0, #1
 8009306:	d102      	bne.n	800930e <_close_r+0x1a>
 8009308:	682b      	ldr	r3, [r5, #0]
 800930a:	b103      	cbz	r3, 800930e <_close_r+0x1a>
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	bd38      	pop	{r3, r4, r5, pc}
 8009310:	24014604 	.word	0x24014604

08009314 <__sflush_r>:
 8009314:	898a      	ldrh	r2, [r1, #12]
 8009316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800931a:	4605      	mov	r5, r0
 800931c:	0710      	lsls	r0, r2, #28
 800931e:	460c      	mov	r4, r1
 8009320:	d458      	bmi.n	80093d4 <__sflush_r+0xc0>
 8009322:	684b      	ldr	r3, [r1, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	dc05      	bgt.n	8009334 <__sflush_r+0x20>
 8009328:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800932a:	2b00      	cmp	r3, #0
 800932c:	dc02      	bgt.n	8009334 <__sflush_r+0x20>
 800932e:	2000      	movs	r0, #0
 8009330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009334:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009336:	2e00      	cmp	r6, #0
 8009338:	d0f9      	beq.n	800932e <__sflush_r+0x1a>
 800933a:	2300      	movs	r3, #0
 800933c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009340:	682f      	ldr	r7, [r5, #0]
 8009342:	602b      	str	r3, [r5, #0]
 8009344:	d032      	beq.n	80093ac <__sflush_r+0x98>
 8009346:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009348:	89a3      	ldrh	r3, [r4, #12]
 800934a:	075a      	lsls	r2, r3, #29
 800934c:	d505      	bpl.n	800935a <__sflush_r+0x46>
 800934e:	6863      	ldr	r3, [r4, #4]
 8009350:	1ac0      	subs	r0, r0, r3
 8009352:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009354:	b10b      	cbz	r3, 800935a <__sflush_r+0x46>
 8009356:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009358:	1ac0      	subs	r0, r0, r3
 800935a:	2300      	movs	r3, #0
 800935c:	4602      	mov	r2, r0
 800935e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009360:	6a21      	ldr	r1, [r4, #32]
 8009362:	4628      	mov	r0, r5
 8009364:	47b0      	blx	r6
 8009366:	1c43      	adds	r3, r0, #1
 8009368:	89a3      	ldrh	r3, [r4, #12]
 800936a:	d106      	bne.n	800937a <__sflush_r+0x66>
 800936c:	6829      	ldr	r1, [r5, #0]
 800936e:	291d      	cmp	r1, #29
 8009370:	d82c      	bhi.n	80093cc <__sflush_r+0xb8>
 8009372:	4a2a      	ldr	r2, [pc, #168]	; (800941c <__sflush_r+0x108>)
 8009374:	40ca      	lsrs	r2, r1
 8009376:	07d6      	lsls	r6, r2, #31
 8009378:	d528      	bpl.n	80093cc <__sflush_r+0xb8>
 800937a:	2200      	movs	r2, #0
 800937c:	6062      	str	r2, [r4, #4]
 800937e:	04d9      	lsls	r1, r3, #19
 8009380:	6922      	ldr	r2, [r4, #16]
 8009382:	6022      	str	r2, [r4, #0]
 8009384:	d504      	bpl.n	8009390 <__sflush_r+0x7c>
 8009386:	1c42      	adds	r2, r0, #1
 8009388:	d101      	bne.n	800938e <__sflush_r+0x7a>
 800938a:	682b      	ldr	r3, [r5, #0]
 800938c:	b903      	cbnz	r3, 8009390 <__sflush_r+0x7c>
 800938e:	6560      	str	r0, [r4, #84]	; 0x54
 8009390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009392:	602f      	str	r7, [r5, #0]
 8009394:	2900      	cmp	r1, #0
 8009396:	d0ca      	beq.n	800932e <__sflush_r+0x1a>
 8009398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800939c:	4299      	cmp	r1, r3
 800939e:	d002      	beq.n	80093a6 <__sflush_r+0x92>
 80093a0:	4628      	mov	r0, r5
 80093a2:	f000 f8fd 	bl	80095a0 <_free_r>
 80093a6:	2000      	movs	r0, #0
 80093a8:	6360      	str	r0, [r4, #52]	; 0x34
 80093aa:	e7c1      	b.n	8009330 <__sflush_r+0x1c>
 80093ac:	6a21      	ldr	r1, [r4, #32]
 80093ae:	2301      	movs	r3, #1
 80093b0:	4628      	mov	r0, r5
 80093b2:	47b0      	blx	r6
 80093b4:	1c41      	adds	r1, r0, #1
 80093b6:	d1c7      	bne.n	8009348 <__sflush_r+0x34>
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d0c4      	beq.n	8009348 <__sflush_r+0x34>
 80093be:	2b1d      	cmp	r3, #29
 80093c0:	d001      	beq.n	80093c6 <__sflush_r+0xb2>
 80093c2:	2b16      	cmp	r3, #22
 80093c4:	d101      	bne.n	80093ca <__sflush_r+0xb6>
 80093c6:	602f      	str	r7, [r5, #0]
 80093c8:	e7b1      	b.n	800932e <__sflush_r+0x1a>
 80093ca:	89a3      	ldrh	r3, [r4, #12]
 80093cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093d0:	81a3      	strh	r3, [r4, #12]
 80093d2:	e7ad      	b.n	8009330 <__sflush_r+0x1c>
 80093d4:	690f      	ldr	r7, [r1, #16]
 80093d6:	2f00      	cmp	r7, #0
 80093d8:	d0a9      	beq.n	800932e <__sflush_r+0x1a>
 80093da:	0793      	lsls	r3, r2, #30
 80093dc:	680e      	ldr	r6, [r1, #0]
 80093de:	bf08      	it	eq
 80093e0:	694b      	ldreq	r3, [r1, #20]
 80093e2:	600f      	str	r7, [r1, #0]
 80093e4:	bf18      	it	ne
 80093e6:	2300      	movne	r3, #0
 80093e8:	eba6 0807 	sub.w	r8, r6, r7
 80093ec:	608b      	str	r3, [r1, #8]
 80093ee:	f1b8 0f00 	cmp.w	r8, #0
 80093f2:	dd9c      	ble.n	800932e <__sflush_r+0x1a>
 80093f4:	6a21      	ldr	r1, [r4, #32]
 80093f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093f8:	4643      	mov	r3, r8
 80093fa:	463a      	mov	r2, r7
 80093fc:	4628      	mov	r0, r5
 80093fe:	47b0      	blx	r6
 8009400:	2800      	cmp	r0, #0
 8009402:	dc06      	bgt.n	8009412 <__sflush_r+0xfe>
 8009404:	89a3      	ldrh	r3, [r4, #12]
 8009406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800940a:	81a3      	strh	r3, [r4, #12]
 800940c:	f04f 30ff 	mov.w	r0, #4294967295
 8009410:	e78e      	b.n	8009330 <__sflush_r+0x1c>
 8009412:	4407      	add	r7, r0
 8009414:	eba8 0800 	sub.w	r8, r8, r0
 8009418:	e7e9      	b.n	80093ee <__sflush_r+0xda>
 800941a:	bf00      	nop
 800941c:	20400001 	.word	0x20400001

08009420 <_fflush_r>:
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	690b      	ldr	r3, [r1, #16]
 8009424:	4605      	mov	r5, r0
 8009426:	460c      	mov	r4, r1
 8009428:	b913      	cbnz	r3, 8009430 <_fflush_r+0x10>
 800942a:	2500      	movs	r5, #0
 800942c:	4628      	mov	r0, r5
 800942e:	bd38      	pop	{r3, r4, r5, pc}
 8009430:	b118      	cbz	r0, 800943a <_fflush_r+0x1a>
 8009432:	6983      	ldr	r3, [r0, #24]
 8009434:	b90b      	cbnz	r3, 800943a <_fflush_r+0x1a>
 8009436:	f7ff f9cd 	bl	80087d4 <__sinit>
 800943a:	4b14      	ldr	r3, [pc, #80]	; (800948c <_fflush_r+0x6c>)
 800943c:	429c      	cmp	r4, r3
 800943e:	d11b      	bne.n	8009478 <_fflush_r+0x58>
 8009440:	686c      	ldr	r4, [r5, #4]
 8009442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d0ef      	beq.n	800942a <_fflush_r+0xa>
 800944a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800944c:	07d0      	lsls	r0, r2, #31
 800944e:	d404      	bmi.n	800945a <_fflush_r+0x3a>
 8009450:	0599      	lsls	r1, r3, #22
 8009452:	d402      	bmi.n	800945a <_fflush_r+0x3a>
 8009454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009456:	f7ff fa5b 	bl	8008910 <__retarget_lock_acquire_recursive>
 800945a:	4628      	mov	r0, r5
 800945c:	4621      	mov	r1, r4
 800945e:	f7ff ff59 	bl	8009314 <__sflush_r>
 8009462:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009464:	07da      	lsls	r2, r3, #31
 8009466:	4605      	mov	r5, r0
 8009468:	d4e0      	bmi.n	800942c <_fflush_r+0xc>
 800946a:	89a3      	ldrh	r3, [r4, #12]
 800946c:	059b      	lsls	r3, r3, #22
 800946e:	d4dd      	bmi.n	800942c <_fflush_r+0xc>
 8009470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009472:	f7ff fa4e 	bl	8008912 <__retarget_lock_release_recursive>
 8009476:	e7d9      	b.n	800942c <_fflush_r+0xc>
 8009478:	4b05      	ldr	r3, [pc, #20]	; (8009490 <_fflush_r+0x70>)
 800947a:	429c      	cmp	r4, r3
 800947c:	d101      	bne.n	8009482 <_fflush_r+0x62>
 800947e:	68ac      	ldr	r4, [r5, #8]
 8009480:	e7df      	b.n	8009442 <_fflush_r+0x22>
 8009482:	4b04      	ldr	r3, [pc, #16]	; (8009494 <_fflush_r+0x74>)
 8009484:	429c      	cmp	r4, r3
 8009486:	bf08      	it	eq
 8009488:	68ec      	ldreq	r4, [r5, #12]
 800948a:	e7da      	b.n	8009442 <_fflush_r+0x22>
 800948c:	08009970 	.word	0x08009970
 8009490:	08009990 	.word	0x08009990
 8009494:	08009950 	.word	0x08009950

08009498 <_lseek_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	4d07      	ldr	r5, [pc, #28]	; (80094b8 <_lseek_r+0x20>)
 800949c:	4604      	mov	r4, r0
 800949e:	4608      	mov	r0, r1
 80094a0:	4611      	mov	r1, r2
 80094a2:	2200      	movs	r2, #0
 80094a4:	602a      	str	r2, [r5, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	f7f7 fa14 	bl	80008d4 <_lseek>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	d102      	bne.n	80094b6 <_lseek_r+0x1e>
 80094b0:	682b      	ldr	r3, [r5, #0]
 80094b2:	b103      	cbz	r3, 80094b6 <_lseek_r+0x1e>
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	24014604 	.word	0x24014604

080094bc <__swhatbuf_r>:
 80094bc:	b570      	push	{r4, r5, r6, lr}
 80094be:	460e      	mov	r6, r1
 80094c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c4:	2900      	cmp	r1, #0
 80094c6:	b096      	sub	sp, #88	; 0x58
 80094c8:	4614      	mov	r4, r2
 80094ca:	461d      	mov	r5, r3
 80094cc:	da08      	bge.n	80094e0 <__swhatbuf_r+0x24>
 80094ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	602a      	str	r2, [r5, #0]
 80094d6:	061a      	lsls	r2, r3, #24
 80094d8:	d410      	bmi.n	80094fc <__swhatbuf_r+0x40>
 80094da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094de:	e00e      	b.n	80094fe <__swhatbuf_r+0x42>
 80094e0:	466a      	mov	r2, sp
 80094e2:	f000 f8bb 	bl	800965c <_fstat_r>
 80094e6:	2800      	cmp	r0, #0
 80094e8:	dbf1      	blt.n	80094ce <__swhatbuf_r+0x12>
 80094ea:	9a01      	ldr	r2, [sp, #4]
 80094ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094f4:	425a      	negs	r2, r3
 80094f6:	415a      	adcs	r2, r3
 80094f8:	602a      	str	r2, [r5, #0]
 80094fa:	e7ee      	b.n	80094da <__swhatbuf_r+0x1e>
 80094fc:	2340      	movs	r3, #64	; 0x40
 80094fe:	2000      	movs	r0, #0
 8009500:	6023      	str	r3, [r4, #0]
 8009502:	b016      	add	sp, #88	; 0x58
 8009504:	bd70      	pop	{r4, r5, r6, pc}
	...

08009508 <__smakebuf_r>:
 8009508:	898b      	ldrh	r3, [r1, #12]
 800950a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800950c:	079d      	lsls	r5, r3, #30
 800950e:	4606      	mov	r6, r0
 8009510:	460c      	mov	r4, r1
 8009512:	d507      	bpl.n	8009524 <__smakebuf_r+0x1c>
 8009514:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	6123      	str	r3, [r4, #16]
 800951c:	2301      	movs	r3, #1
 800951e:	6163      	str	r3, [r4, #20]
 8009520:	b002      	add	sp, #8
 8009522:	bd70      	pop	{r4, r5, r6, pc}
 8009524:	ab01      	add	r3, sp, #4
 8009526:	466a      	mov	r2, sp
 8009528:	f7ff ffc8 	bl	80094bc <__swhatbuf_r>
 800952c:	9900      	ldr	r1, [sp, #0]
 800952e:	4605      	mov	r5, r0
 8009530:	4630      	mov	r0, r6
 8009532:	f7ff fa0f 	bl	8008954 <_malloc_r>
 8009536:	b948      	cbnz	r0, 800954c <__smakebuf_r+0x44>
 8009538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800953c:	059a      	lsls	r2, r3, #22
 800953e:	d4ef      	bmi.n	8009520 <__smakebuf_r+0x18>
 8009540:	f023 0303 	bic.w	r3, r3, #3
 8009544:	f043 0302 	orr.w	r3, r3, #2
 8009548:	81a3      	strh	r3, [r4, #12]
 800954a:	e7e3      	b.n	8009514 <__smakebuf_r+0xc>
 800954c:	4b0d      	ldr	r3, [pc, #52]	; (8009584 <__smakebuf_r+0x7c>)
 800954e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	6020      	str	r0, [r4, #0]
 8009554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009558:	81a3      	strh	r3, [r4, #12]
 800955a:	9b00      	ldr	r3, [sp, #0]
 800955c:	6163      	str	r3, [r4, #20]
 800955e:	9b01      	ldr	r3, [sp, #4]
 8009560:	6120      	str	r0, [r4, #16]
 8009562:	b15b      	cbz	r3, 800957c <__smakebuf_r+0x74>
 8009564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009568:	4630      	mov	r0, r6
 800956a:	f000 f889 	bl	8009680 <_isatty_r>
 800956e:	b128      	cbz	r0, 800957c <__smakebuf_r+0x74>
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	f023 0303 	bic.w	r3, r3, #3
 8009576:	f043 0301 	orr.w	r3, r3, #1
 800957a:	81a3      	strh	r3, [r4, #12]
 800957c:	89a0      	ldrh	r0, [r4, #12]
 800957e:	4305      	orrs	r5, r0
 8009580:	81a5      	strh	r5, [r4, #12]
 8009582:	e7cd      	b.n	8009520 <__smakebuf_r+0x18>
 8009584:	0800876d 	.word	0x0800876d

08009588 <__malloc_lock>:
 8009588:	4801      	ldr	r0, [pc, #4]	; (8009590 <__malloc_lock+0x8>)
 800958a:	f7ff b9c1 	b.w	8008910 <__retarget_lock_acquire_recursive>
 800958e:	bf00      	nop
 8009590:	240145f8 	.word	0x240145f8

08009594 <__malloc_unlock>:
 8009594:	4801      	ldr	r0, [pc, #4]	; (800959c <__malloc_unlock+0x8>)
 8009596:	f7ff b9bc 	b.w	8008912 <__retarget_lock_release_recursive>
 800959a:	bf00      	nop
 800959c:	240145f8 	.word	0x240145f8

080095a0 <_free_r>:
 80095a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095a2:	2900      	cmp	r1, #0
 80095a4:	d044      	beq.n	8009630 <_free_r+0x90>
 80095a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095aa:	9001      	str	r0, [sp, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f1a1 0404 	sub.w	r4, r1, #4
 80095b2:	bfb8      	it	lt
 80095b4:	18e4      	addlt	r4, r4, r3
 80095b6:	f7ff ffe7 	bl	8009588 <__malloc_lock>
 80095ba:	4a1e      	ldr	r2, [pc, #120]	; (8009634 <_free_r+0x94>)
 80095bc:	9801      	ldr	r0, [sp, #4]
 80095be:	6813      	ldr	r3, [r2, #0]
 80095c0:	b933      	cbnz	r3, 80095d0 <_free_r+0x30>
 80095c2:	6063      	str	r3, [r4, #4]
 80095c4:	6014      	str	r4, [r2, #0]
 80095c6:	b003      	add	sp, #12
 80095c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095cc:	f7ff bfe2 	b.w	8009594 <__malloc_unlock>
 80095d0:	42a3      	cmp	r3, r4
 80095d2:	d908      	bls.n	80095e6 <_free_r+0x46>
 80095d4:	6825      	ldr	r5, [r4, #0]
 80095d6:	1961      	adds	r1, r4, r5
 80095d8:	428b      	cmp	r3, r1
 80095da:	bf01      	itttt	eq
 80095dc:	6819      	ldreq	r1, [r3, #0]
 80095de:	685b      	ldreq	r3, [r3, #4]
 80095e0:	1949      	addeq	r1, r1, r5
 80095e2:	6021      	streq	r1, [r4, #0]
 80095e4:	e7ed      	b.n	80095c2 <_free_r+0x22>
 80095e6:	461a      	mov	r2, r3
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	b10b      	cbz	r3, 80095f0 <_free_r+0x50>
 80095ec:	42a3      	cmp	r3, r4
 80095ee:	d9fa      	bls.n	80095e6 <_free_r+0x46>
 80095f0:	6811      	ldr	r1, [r2, #0]
 80095f2:	1855      	adds	r5, r2, r1
 80095f4:	42a5      	cmp	r5, r4
 80095f6:	d10b      	bne.n	8009610 <_free_r+0x70>
 80095f8:	6824      	ldr	r4, [r4, #0]
 80095fa:	4421      	add	r1, r4
 80095fc:	1854      	adds	r4, r2, r1
 80095fe:	42a3      	cmp	r3, r4
 8009600:	6011      	str	r1, [r2, #0]
 8009602:	d1e0      	bne.n	80095c6 <_free_r+0x26>
 8009604:	681c      	ldr	r4, [r3, #0]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	6053      	str	r3, [r2, #4]
 800960a:	4421      	add	r1, r4
 800960c:	6011      	str	r1, [r2, #0]
 800960e:	e7da      	b.n	80095c6 <_free_r+0x26>
 8009610:	d902      	bls.n	8009618 <_free_r+0x78>
 8009612:	230c      	movs	r3, #12
 8009614:	6003      	str	r3, [r0, #0]
 8009616:	e7d6      	b.n	80095c6 <_free_r+0x26>
 8009618:	6825      	ldr	r5, [r4, #0]
 800961a:	1961      	adds	r1, r4, r5
 800961c:	428b      	cmp	r3, r1
 800961e:	bf04      	itt	eq
 8009620:	6819      	ldreq	r1, [r3, #0]
 8009622:	685b      	ldreq	r3, [r3, #4]
 8009624:	6063      	str	r3, [r4, #4]
 8009626:	bf04      	itt	eq
 8009628:	1949      	addeq	r1, r1, r5
 800962a:	6021      	streq	r1, [r4, #0]
 800962c:	6054      	str	r4, [r2, #4]
 800962e:	e7ca      	b.n	80095c6 <_free_r+0x26>
 8009630:	b003      	add	sp, #12
 8009632:	bd30      	pop	{r4, r5, pc}
 8009634:	240145fc 	.word	0x240145fc

08009638 <_read_r>:
 8009638:	b538      	push	{r3, r4, r5, lr}
 800963a:	4d07      	ldr	r5, [pc, #28]	; (8009658 <_read_r+0x20>)
 800963c:	4604      	mov	r4, r0
 800963e:	4608      	mov	r0, r1
 8009640:	4611      	mov	r1, r2
 8009642:	2200      	movs	r2, #0
 8009644:	602a      	str	r2, [r5, #0]
 8009646:	461a      	mov	r2, r3
 8009648:	f7f7 f8e4 	bl	8000814 <_read>
 800964c:	1c43      	adds	r3, r0, #1
 800964e:	d102      	bne.n	8009656 <_read_r+0x1e>
 8009650:	682b      	ldr	r3, [r5, #0]
 8009652:	b103      	cbz	r3, 8009656 <_read_r+0x1e>
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	bd38      	pop	{r3, r4, r5, pc}
 8009658:	24014604 	.word	0x24014604

0800965c <_fstat_r>:
 800965c:	b538      	push	{r3, r4, r5, lr}
 800965e:	4d07      	ldr	r5, [pc, #28]	; (800967c <_fstat_r+0x20>)
 8009660:	2300      	movs	r3, #0
 8009662:	4604      	mov	r4, r0
 8009664:	4608      	mov	r0, r1
 8009666:	4611      	mov	r1, r2
 8009668:	602b      	str	r3, [r5, #0]
 800966a:	f7f7 f918 	bl	800089e <_fstat>
 800966e:	1c43      	adds	r3, r0, #1
 8009670:	d102      	bne.n	8009678 <_fstat_r+0x1c>
 8009672:	682b      	ldr	r3, [r5, #0]
 8009674:	b103      	cbz	r3, 8009678 <_fstat_r+0x1c>
 8009676:	6023      	str	r3, [r4, #0]
 8009678:	bd38      	pop	{r3, r4, r5, pc}
 800967a:	bf00      	nop
 800967c:	24014604 	.word	0x24014604

08009680 <_isatty_r>:
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	4d06      	ldr	r5, [pc, #24]	; (800969c <_isatty_r+0x1c>)
 8009684:	2300      	movs	r3, #0
 8009686:	4604      	mov	r4, r0
 8009688:	4608      	mov	r0, r1
 800968a:	602b      	str	r3, [r5, #0]
 800968c:	f7f7 f917 	bl	80008be <_isatty>
 8009690:	1c43      	adds	r3, r0, #1
 8009692:	d102      	bne.n	800969a <_isatty_r+0x1a>
 8009694:	682b      	ldr	r3, [r5, #0]
 8009696:	b103      	cbz	r3, 800969a <_isatty_r+0x1a>
 8009698:	6023      	str	r3, [r4, #0]
 800969a:	bd38      	pop	{r3, r4, r5, pc}
 800969c:	24014604 	.word	0x24014604

080096a0 <_init>:
 80096a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a2:	bf00      	nop
 80096a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096a6:	bc08      	pop	{r3}
 80096a8:	469e      	mov	lr, r3
 80096aa:	4770      	bx	lr

080096ac <_fini>:
 80096ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ae:	bf00      	nop
 80096b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096b2:	bc08      	pop	{r3}
 80096b4:	469e      	mov	lr, r3
 80096b6:	4770      	bx	lr
