
audiousbfs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009460  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000093c  08009730  08009730  00019730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a06c  0800a06c  0001a06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a070  0800a070  0001a070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000194  24000000  0800a074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004c74  24000194  0800a208  00020194  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24004e08  0800a208  00024e08  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013c38  00000000  00000000  000201c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003214  00000000  00000000  00033dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000f68  00000000  00000000  00037010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000df0  00000000  00000000  00037f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034aa7  00000000  00000000  00038d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00013d6c  00000000  00000000  0006d80f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013de0e  00000000  00000000  0008157b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001bf389  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004604  00000000  00000000  001bf3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000194 	.word	0x24000194
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009718 	.word	0x08009718

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000198 	.word	0x24000198
 800030c:	08009718 	.word	0x08009718

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b5b0      	push	{r4, r5, r7, lr}
 80003b2:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b8:	f000 fb78 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003bc:	f000 f846 	bl	800044c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c0:	f000 f8b6 	bl	8000530 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80003c4:	f007 fcb6 	bl	8007d34 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t data[2048] = "QUANTTRONIX\n";
 80003c8:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 80003cc:	f5a3 6500 	sub.w	r5, r3, #2048	; 0x800
 80003d0:	4b1a      	ldr	r3, [pc, #104]	; (800043c <main+0x8c>)
 80003d2:	462c      	mov	r4, r5
 80003d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003d6:	c407      	stmia	r4!, {r0, r1, r2}
 80003d8:	7023      	strb	r3, [r4, #0]
 80003da:	f105 030d 	add.w	r3, r5, #13
 80003de:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80003e2:	2100      	movs	r1, #0
 80003e4:	4618      	mov	r0, r3
 80003e6:	f008 f9a3 	bl	8008730 <memset>

  memset(data+14, 1 , 2048-14);
 80003ea:	463b      	mov	r3, r7
 80003ec:	330e      	adds	r3, #14
 80003ee:	f240 72f2 	movw	r2, #2034	; 0x7f2
 80003f2:	2101      	movs	r1, #1
 80003f4:	4618      	mov	r0, r3
 80003f6:	f008 f99b 	bl	8008730 <memset>
  USBD_AUDIO_Init(&hUsbDeviceHS,1);
 80003fa:	2101      	movs	r1, #1
 80003fc:	4810      	ldr	r0, [pc, #64]	; (8000440 <main+0x90>)
 80003fe:	f005 fdc9 	bl	8005f94 <USBD_AUDIO_Init>
#define OTG_HS_DIEPINT1 (*(volatile uint32_t*)0x40040928)
#define OTG_HS_DIEPINT0 (*(volatile uint32_t*)0x40040908)

#define OTG_HS_DAINT (*(volatile uint32_t*)0x40040818)
  USBD_AUDIO_DataIn(&hUsbDeviceHS , 1);
 8000402:	2101      	movs	r1, #1
 8000404:	480e      	ldr	r0, [pc, #56]	; (8000440 <main+0x90>)
 8000406:	f005 ffa9 	bl	800635c <USBD_AUDIO_DataIn>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);
 800040a:	2200      	movs	r2, #0
 800040c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000410:	480c      	ldr	r0, [pc, #48]	; (8000444 <main+0x94>)
 8000412:	f000 feb9 	bl	8001188 <HAL_GPIO_WritePin>
//	  USBD_AUDIO_RegisterInterface(&hUsbDeviceHS, &fops);
	  USBD_AUDIO_DataIn(&hUsbDeviceHS , 1);
 8000416:	2101      	movs	r1, #1
 8000418:	4809      	ldr	r0, [pc, #36]	; (8000440 <main+0x90>)
 800041a:	f005 ff9f 	bl	800635c <USBD_AUDIO_DataIn>
	  while(!(OTG_HS_DIEPINT0 & (1<<7)));
 800041e:	bf00      	nop
 8000420:	4b09      	ldr	r3, [pc, #36]	; (8000448 <main+0x98>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000428:	2b00      	cmp	r3, #0
 800042a:	d0f9      	beq.n	8000420 <main+0x70>
//	  HAL_Delay(1000);

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
 800042c:	2201      	movs	r2, #1
 800042e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000432:	4804      	ldr	r0, [pc, #16]	; (8000444 <main+0x94>)
 8000434:	f000 fea8 	bl	8001188 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);
 8000438:	e7e7      	b.n	800040a <main+0x5a>
 800043a:	bf00      	nop
 800043c:	08009730 	.word	0x08009730
 8000440:	240001bc 	.word	0x240001bc
 8000444:	58020800 	.word	0x58020800
 8000448:	40040908 	.word	0x40040908

0800044c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b09c      	sub	sp, #112	; 0x70
 8000450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000456:	224c      	movs	r2, #76	; 0x4c
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f008 f968 	bl	8008730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2220      	movs	r2, #32
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f008 f962 	bl	8008730 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800046c:	2002      	movs	r0, #2
 800046e:	f002 f979 	bl	8002764 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000472:	2300      	movs	r3, #0
 8000474:	603b      	str	r3, [r7, #0]
 8000476:	4b2d      	ldr	r3, [pc, #180]	; (800052c <SystemClock_Config+0xe0>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800047e:	4a2b      	ldr	r2, [pc, #172]	; (800052c <SystemClock_Config+0xe0>)
 8000480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000484:	6193      	str	r3, [r2, #24]
 8000486:	4b29      	ldr	r3, [pc, #164]	; (800052c <SystemClock_Config+0xe0>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000492:	bf00      	nop
 8000494:	4b25      	ldr	r3, [pc, #148]	; (800052c <SystemClock_Config+0xe0>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800049c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004a0:	d1f8      	bne.n	8000494 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80004a2:	2322      	movs	r3, #34	; 0x22
 80004a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004a6:	2301      	movs	r3, #1
 80004a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004aa:	2340      	movs	r3, #64	; 0x40
 80004ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004ae:	2301      	movs	r3, #1
 80004b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004b2:	2302      	movs	r3, #2
 80004b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004b6:	2300      	movs	r3, #0
 80004b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80004ba:	2304      	movs	r3, #4
 80004bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80004be:	230c      	movs	r3, #12
 80004c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80004c2:	2301      	movs	r3, #1
 80004c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80004c6:	2304      	movs	r3, #4
 80004c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004ca:	2302      	movs	r3, #2
 80004cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80004ce:	230c      	movs	r3, #12
 80004d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004de:	4618      	mov	r0, r3
 80004e0:	f002 f98a 	bl	80027f8 <HAL_RCC_OscConfig>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80004ea:	f000 f945 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ee:	233f      	movs	r3, #63	; 0x3f
 80004f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f2:	2303      	movs	r3, #3
 80004f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004fa:	2308      	movs	r3, #8
 80004fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004fe:	2340      	movs	r3, #64	; 0x40
 8000500:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000502:	2340      	movs	r3, #64	; 0x40
 8000504:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800050a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800050c:	2340      	movs	r3, #64	; 0x40
 800050e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2101      	movs	r1, #1
 8000514:	4618      	mov	r0, r3
 8000516:	f002 fd1d 	bl	8002f54 <HAL_RCC_ClockConfig>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000520:	f000 f92a 	bl	8000778 <Error_Handler>
  }
}
 8000524:	bf00      	nop
 8000526:	3770      	adds	r7, #112	; 0x70
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	58024800 	.word	0x58024800

08000530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08c      	sub	sp, #48	; 0x30
 8000534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000536:	f107 031c 	add.w	r3, r7, #28
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	4b85      	ldr	r3, [pc, #532]	; (800075c <MX_GPIO_Init+0x22c>)
 8000548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800054c:	4a83      	ldr	r2, [pc, #524]	; (800075c <MX_GPIO_Init+0x22c>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000556:	4b81      	ldr	r3, [pc, #516]	; (800075c <MX_GPIO_Init+0x22c>)
 8000558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800055c:	f003 0304 	and.w	r3, r3, #4
 8000560:	61bb      	str	r3, [r7, #24]
 8000562:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000564:	4b7d      	ldr	r3, [pc, #500]	; (800075c <MX_GPIO_Init+0x22c>)
 8000566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800056a:	4a7c      	ldr	r2, [pc, #496]	; (800075c <MX_GPIO_Init+0x22c>)
 800056c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000570:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000574:	4b79      	ldr	r3, [pc, #484]	; (800075c <MX_GPIO_Init+0x22c>)
 8000576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800057a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800057e:	617b      	str	r3, [r7, #20]
 8000580:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b76      	ldr	r3, [pc, #472]	; (800075c <MX_GPIO_Init+0x22c>)
 8000584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000588:	4a74      	ldr	r2, [pc, #464]	; (800075c <MX_GPIO_Init+0x22c>)
 800058a:	f043 0301 	orr.w	r3, r3, #1
 800058e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000592:	4b72      	ldr	r3, [pc, #456]	; (800075c <MX_GPIO_Init+0x22c>)
 8000594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a0:	4b6e      	ldr	r3, [pc, #440]	; (800075c <MX_GPIO_Init+0x22c>)
 80005a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a6:	4a6d      	ldr	r2, [pc, #436]	; (800075c <MX_GPIO_Init+0x22c>)
 80005a8:	f043 0302 	orr.w	r3, r3, #2
 80005ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005b0:	4b6a      	ldr	r3, [pc, #424]	; (800075c <MX_GPIO_Init+0x22c>)
 80005b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b6:	f003 0302 	and.w	r3, r3, #2
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005be:	4b67      	ldr	r3, [pc, #412]	; (800075c <MX_GPIO_Init+0x22c>)
 80005c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c4:	4a65      	ldr	r2, [pc, #404]	; (800075c <MX_GPIO_Init+0x22c>)
 80005c6:	f043 0308 	orr.w	r3, r3, #8
 80005ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ce:	4b63      	ldr	r3, [pc, #396]	; (800075c <MX_GPIO_Init+0x22c>)
 80005d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d4:	f003 0308 	and.w	r3, r3, #8
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005dc:	4b5f      	ldr	r3, [pc, #380]	; (800075c <MX_GPIO_Init+0x22c>)
 80005de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005e2:	4a5e      	ldr	r2, [pc, #376]	; (800075c <MX_GPIO_Init+0x22c>)
 80005e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ec:	4b5b      	ldr	r3, [pc, #364]	; (800075c <MX_GPIO_Init+0x22c>)
 80005ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005fa:	4b58      	ldr	r3, [pc, #352]	; (800075c <MX_GPIO_Init+0x22c>)
 80005fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000600:	4a56      	ldr	r2, [pc, #344]	; (800075c <MX_GPIO_Init+0x22c>)
 8000602:	f043 0310 	orr.w	r3, r3, #16
 8000606:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800060a:	4b54      	ldr	r3, [pc, #336]	; (800075c <MX_GPIO_Init+0x22c>)
 800060c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000610:	f003 0310 	and.w	r3, r3, #16
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f244 0101 	movw	r1, #16385	; 0x4001
 800061e:	4850      	ldr	r0, [pc, #320]	; (8000760 <MX_GPIO_Init+0x230>)
 8000620:	f000 fdb2 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800062a:	484e      	ldr	r0, [pc, #312]	; (8000764 <MX_GPIO_Init+0x234>)
 800062c:	f000 fdac 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2102      	movs	r1, #2
 8000634:	484c      	ldr	r0, [pc, #304]	; (8000768 <MX_GPIO_Init+0x238>)
 8000636:	f000 fda7 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800063a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000640:	2300      	movs	r3, #0
 8000642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	4845      	ldr	r0, [pc, #276]	; (8000764 <MX_GPIO_Init+0x234>)
 8000650:	f000 fbf2 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000654:	2332      	movs	r3, #50	; 0x32
 8000656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000664:	230b      	movs	r3, #11
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	483d      	ldr	r0, [pc, #244]	; (8000764 <MX_GPIO_Init+0x234>)
 8000670:	f000 fbe2 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000674:	2386      	movs	r3, #134	; 0x86
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000684:	230b      	movs	r3, #11
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	4619      	mov	r1, r3
 800068e:	4837      	ldr	r0, [pc, #220]	; (800076c <MX_GPIO_Init+0x23c>)
 8000690:	f000 fbd2 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000694:	f244 0301 	movw	r3, #16385	; 0x4001
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	482c      	ldr	r0, [pc, #176]	; (8000760 <MX_GPIO_Init+0x230>)
 80006ae:	f000 fbc3 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c4:	230b      	movs	r3, #11
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	4824      	ldr	r0, [pc, #144]	; (8000760 <MX_GPIO_Init+0x230>)
 80006d0:	f000 fbb2 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80006d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	2302      	movs	r3, #2
 80006dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006e6:	2307      	movs	r3, #7
 80006e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	481f      	ldr	r0, [pc, #124]	; (8000770 <MX_GPIO_Init+0x240>)
 80006f2:	f000 fba1 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	4815      	ldr	r0, [pc, #84]	; (8000764 <MX_GPIO_Init+0x234>)
 8000710:	f000 fb92 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000714:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071a:	2302      	movs	r3, #2
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000726:	230b      	movs	r3, #11
 8000728:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	4810      	ldr	r0, [pc, #64]	; (8000774 <MX_GPIO_Init+0x244>)
 8000732:	f000 fb81 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000736:	2302      	movs	r3, #2
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	2301      	movs	r3, #1
 800073c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2300      	movs	r3, #0
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	4806      	ldr	r0, [pc, #24]	; (8000768 <MX_GPIO_Init+0x238>)
 800074e:	f000 fb73 	bl	8000e38 <HAL_GPIO_Init>

}
 8000752:	bf00      	nop
 8000754:	3730      	adds	r7, #48	; 0x30
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	58024400 	.word	0x58024400
 8000760:	58020400 	.word	0x58020400
 8000764:	58020800 	.word	0x58020800
 8000768:	58021000 	.word	0x58021000
 800076c:	58020000 	.word	0x58020000
 8000770:	58020c00 	.word	0x58020c00
 8000774:	58021800 	.word	0x58021800

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	e7fe      	b.n	8000780 <Error_Handler+0x8>
	...

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <HAL_MspInit+0x30>)
 800078c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000790:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <HAL_MspInit+0x30>)
 8000792:	f043 0302 	orr.w	r3, r3, #2
 8000796:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_MspInit+0x30>)
 800079c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007a0:	f003 0302 	and.w	r3, r3, #2
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	58024400 	.word	0x58024400

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <NMI_Handler+0x4>

080007be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <HardFault_Handler+0x4>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <MemManage_Handler+0x4>

080007ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000804:	f000 f9c4 	bl	8000b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <OTG_HS_IRQHandler+0x10>)
 8000812:	f000 fe29 	bl	8001468 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	24000c98 	.word	0x24000c98

08000820 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	e00a      	b.n	8000848 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000832:	f3af 8000 	nop.w
 8000836:	4601      	mov	r1, r0
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	1c5a      	adds	r2, r3, #1
 800083c:	60ba      	str	r2, [r7, #8]
 800083e:	b2ca      	uxtb	r2, r1
 8000840:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	3301      	adds	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697a      	ldr	r2, [r7, #20]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	429a      	cmp	r2, r3
 800084e:	dbf0      	blt.n	8000832 <_read+0x12>
	}

return len;
 8000850:	687b      	ldr	r3, [r7, #4]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b086      	sub	sp, #24
 800085e:	af00      	add	r7, sp, #0
 8000860:	60f8      	str	r0, [r7, #12]
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	e009      	b.n	8000880 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	1c5a      	adds	r2, r3, #1
 8000870:	60ba      	str	r2, [r7, #8]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	3301      	adds	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697a      	ldr	r2, [r7, #20]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	429a      	cmp	r2, r3
 8000886:	dbf1      	blt.n	800086c <_write+0x12>
	}
	return len;
 8000888:	687b      	ldr	r3, [r7, #4]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <_close>:

int _close(int file)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
	return -1;
 800089a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ba:	605a      	str	r2, [r3, #4]
	return 0;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <_isatty>:

int _isatty(int file)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
	return 1;
 80008d2:	2301      	movs	r3, #1
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
	return 0;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
	...

080008fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000904:	4a14      	ldr	r2, [pc, #80]	; (8000958 <_sbrk+0x5c>)
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <_sbrk+0x60>)
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d102      	bne.n	800091e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <_sbrk+0x64>)
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <_sbrk+0x68>)
 800091c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <_sbrk+0x64>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	429a      	cmp	r2, r3
 800092a:	d207      	bcs.n	800093c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800092c:	f007 fed6 	bl	80086dc <__errno>
 8000930:	4603      	mov	r3, r0
 8000932:	220c      	movs	r2, #12
 8000934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
 800093a:	e009      	b.n	8000950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000942:	4b07      	ldr	r3, [pc, #28]	; (8000960 <_sbrk+0x64>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4413      	add	r3, r2
 800094a:	4a05      	ldr	r2, [pc, #20]	; (8000960 <_sbrk+0x64>)
 800094c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800094e:	68fb      	ldr	r3, [r7, #12]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	24050000 	.word	0x24050000
 800095c:	00000400 	.word	0x00000400
 8000960:	240001b0 	.word	0x240001b0
 8000964:	24004e08 	.word	0x24004e08

08000968 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800096c:	4b32      	ldr	r3, [pc, #200]	; (8000a38 <SystemInit+0xd0>)
 800096e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000972:	4a31      	ldr	r2, [pc, #196]	; (8000a38 <SystemInit+0xd0>)
 8000974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800097c:	4b2f      	ldr	r3, [pc, #188]	; (8000a3c <SystemInit+0xd4>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f003 030f 	and.w	r3, r3, #15
 8000984:	2b06      	cmp	r3, #6
 8000986:	d807      	bhi.n	8000998 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000988:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <SystemInit+0xd4>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f023 030f 	bic.w	r3, r3, #15
 8000990:	4a2a      	ldr	r2, [pc, #168]	; (8000a3c <SystemInit+0xd4>)
 8000992:	f043 0307 	orr.w	r3, r3, #7
 8000996:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000998:	4b29      	ldr	r3, [pc, #164]	; (8000a40 <SystemInit+0xd8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a28      	ldr	r2, [pc, #160]	; (8000a40 <SystemInit+0xd8>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009a4:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <SystemInit+0xd8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009aa:	4b25      	ldr	r3, [pc, #148]	; (8000a40 <SystemInit+0xd8>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	4924      	ldr	r1, [pc, #144]	; (8000a40 <SystemInit+0xd8>)
 80009b0:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <SystemInit+0xdc>)
 80009b2:	4013      	ands	r3, r2
 80009b4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <SystemInit+0xd4>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d007      	beq.n	80009d2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009c2:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <SystemInit+0xd4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f023 030f 	bic.w	r3, r3, #15
 80009ca:	4a1c      	ldr	r2, [pc, #112]	; (8000a3c <SystemInit+0xd4>)
 80009cc:	f043 0307 	orr.w	r3, r3, #7
 80009d0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <SystemInit+0xd8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009d8:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <SystemInit+0xd8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <SystemInit+0xd8>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <SystemInit+0xd8>)
 80009e6:	4a18      	ldr	r2, [pc, #96]	; (8000a48 <SystemInit+0xe0>)
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <SystemInit+0xd8>)
 80009ec:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <SystemInit+0xe4>)
 80009ee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <SystemInit+0xd8>)
 80009f2:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <SystemInit+0xe8>)
 80009f4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <SystemInit+0xd8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <SystemInit+0xd8>)
 80009fe:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <SystemInit+0xe8>)
 8000a00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <SystemInit+0xd8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <SystemInit+0xd8>)
 8000a0a:	4a11      	ldr	r2, [pc, #68]	; (8000a50 <SystemInit+0xe8>)
 8000a0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <SystemInit+0xd8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <SystemInit+0xd8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <SystemInit+0xd8>)
 8000a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <SystemInit+0xd8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <SystemInit+0xec>)
 8000a28:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a2c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00
 8000a3c:	52002000 	.word	0x52002000
 8000a40:	58024400 	.word	0x58024400
 8000a44:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a48:	02020200 	.word	0x02020200
 8000a4c:	01ff0000 	.word	0x01ff0000
 8000a50:	01010280 	.word	0x01010280
 8000a54:	52004000 	.word	0x52004000

08000a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a5c:	f7ff ff84 	bl	8000968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a62:	490d      	ldr	r1, [pc, #52]	; (8000a98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a64:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a78:	4c0a      	ldr	r4, [pc, #40]	; (8000aa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a86:	f007 fe2f 	bl	80086e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8a:	f7ff fc91 	bl	80003b0 <main>
  bx  lr
 8000a8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a90:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000a94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a98:	24000194 	.word	0x24000194
  ldr r2, =_sidata
 8000a9c:	0800a074 	.word	0x0800a074
  ldr r2, =_sbss
 8000aa0:	24000194 	.word	0x24000194
  ldr r4, =_ebss
 8000aa4:	24004e08 	.word	0x24004e08

08000aa8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC3_IRQHandler>
	...

08000aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab2:	2003      	movs	r0, #3
 8000ab4:	f000 f980 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ab8:	f002 fc02 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 8000abc:	4602      	mov	r2, r0
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_Init+0x68>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	0a1b      	lsrs	r3, r3, #8
 8000ac4:	f003 030f 	and.w	r3, r3, #15
 8000ac8:	4913      	ldr	r1, [pc, #76]	; (8000b18 <HAL_Init+0x6c>)
 8000aca:	5ccb      	ldrb	r3, [r1, r3]
 8000acc:	f003 031f 	and.w	r3, r3, #31
 8000ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_Init+0x68>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_Init+0x6c>)
 8000ae0:	5cd3      	ldrb	r3, [r2, r3]
 8000ae2:	f003 031f 	and.w	r3, r3, #31
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8000aec:	4a0b      	ldr	r2, [pc, #44]	; (8000b1c <HAL_Init+0x70>)
 8000aee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000af0:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <HAL_Init+0x74>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000af6:	2000      	movs	r0, #0
 8000af8:	f000 f814 	bl	8000b24 <HAL_InitTick>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e002      	b.n	8000b0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b06:	f7ff fe3d 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	58024400 	.word	0x58024400
 8000b18:	08009fc4 	.word	0x08009fc4
 8000b1c:	24000004 	.word	0x24000004
 8000b20:	24000000 	.word	0x24000000

08000b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_InitTick+0x60>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e021      	b.n	8000b7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <HAL_InitTick+0x64>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_InitTick+0x60>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f965 	bl	8000e1e <HAL_SYSTICK_Config>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00e      	b.n	8000b7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	d80a      	bhi.n	8000b7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f000 f92f 	bl	8000dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b70:	4a06      	ldr	r2, [pc, #24]	; (8000b8c <HAL_InitTick+0x68>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e000      	b.n	8000b7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	2400000c 	.word	0x2400000c
 8000b88:	24000000 	.word	0x24000000
 8000b8c:	24000008 	.word	0x24000008

08000b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	2400000c 	.word	0x2400000c
 8000bb4:	240001b4 	.word	0x240001b4

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	240001b4 	.word	0x240001b4

08000bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff ffee 	bl	8000bb8 <HAL_GetTick>
 8000bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be8:	d005      	beq.n	8000bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_Delay+0x44>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bf6:	bf00      	nop
 8000bf8:	f7ff ffde 	bl	8000bb8 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d8f7      	bhi.n	8000bf8 <HAL_Delay+0x28>
  {
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2400000c 	.word	0x2400000c

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <__NVIC_SetPriorityGrouping+0x40>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	4313      	orrs	r3, r2
 8000c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c46:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <__NVIC_SetPriorityGrouping+0x40>)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	60d3      	str	r3, [r2, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00
 8000c5c:	05fa0000 	.word	0x05fa0000

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4907      	ldr	r1, [pc, #28]	; (8000cb4 <__NVIC_EnableIRQ+0x38>)
 8000c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d84:	d301      	bcc.n	8000d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00f      	b.n	8000daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <SysTick_Config+0x40>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d92:	210f      	movs	r1, #15
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f7ff ff8e 	bl	8000cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <SysTick_Config+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <SysTick_Config+0x40>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff29 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ddc:	f7ff ff40 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000de0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff ff90 	bl	8000d0c <NVIC_EncodePriority>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5f 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff33 	bl	8000c7c <__NVIC_EnableIRQ>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffa4 	bl	8000d74 <SysTick_Config>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000e46:	4b86      	ldr	r3, [pc, #536]	; (8001060 <HAL_GPIO_Init+0x228>)
 8000e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e4a:	e18c      	b.n	8001166 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	2101      	movs	r1, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 817e 	beq.w	8001160 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d005      	beq.n	8000e7c <HAL_GPIO_Init+0x44>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d130      	bne.n	8000ede <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	091b      	lsrs	r3, r3, #4
 8000ec8:	f003 0201 	and.w	r2, r3, #1
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d017      	beq.n	8000f1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d123      	bne.n	8000f6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	08da      	lsrs	r2, r3, #3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3208      	adds	r2, #8
 8000f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	691a      	ldr	r2, [r3, #16]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	69b9      	ldr	r1, [r7, #24]
 8000f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0203 	and.w	r2, r3, #3
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 80d8 	beq.w	8001160 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb0:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <HAL_GPIO_Init+0x22c>)
 8000fb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fb6:	4a2b      	ldr	r2, [pc, #172]	; (8001064 <HAL_GPIO_Init+0x22c>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fc0:	4b28      	ldr	r3, [pc, #160]	; (8001064 <HAL_GPIO_Init+0x22c>)
 8000fc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fce:	4a26      	ldr	r2, [pc, #152]	; (8001068 <HAL_GPIO_Init+0x230>)
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a1d      	ldr	r2, [pc, #116]	; (800106c <HAL_GPIO_Init+0x234>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d04a      	beq.n	8001090 <HAL_GPIO_Init+0x258>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a1c      	ldr	r2, [pc, #112]	; (8001070 <HAL_GPIO_Init+0x238>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d02b      	beq.n	800105a <HAL_GPIO_Init+0x222>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <HAL_GPIO_Init+0x23c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d025      	beq.n	8001056 <HAL_GPIO_Init+0x21e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a1a      	ldr	r2, [pc, #104]	; (8001078 <HAL_GPIO_Init+0x240>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d01f      	beq.n	8001052 <HAL_GPIO_Init+0x21a>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a19      	ldr	r2, [pc, #100]	; (800107c <HAL_GPIO_Init+0x244>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d019      	beq.n	800104e <HAL_GPIO_Init+0x216>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a18      	ldr	r2, [pc, #96]	; (8001080 <HAL_GPIO_Init+0x248>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d013      	beq.n	800104a <HAL_GPIO_Init+0x212>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a17      	ldr	r2, [pc, #92]	; (8001084 <HAL_GPIO_Init+0x24c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d00d      	beq.n	8001046 <HAL_GPIO_Init+0x20e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a16      	ldr	r2, [pc, #88]	; (8001088 <HAL_GPIO_Init+0x250>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d007      	beq.n	8001042 <HAL_GPIO_Init+0x20a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a15      	ldr	r2, [pc, #84]	; (800108c <HAL_GPIO_Init+0x254>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d101      	bne.n	800103e <HAL_GPIO_Init+0x206>
 800103a:	2309      	movs	r3, #9
 800103c:	e029      	b.n	8001092 <HAL_GPIO_Init+0x25a>
 800103e:	230a      	movs	r3, #10
 8001040:	e027      	b.n	8001092 <HAL_GPIO_Init+0x25a>
 8001042:	2307      	movs	r3, #7
 8001044:	e025      	b.n	8001092 <HAL_GPIO_Init+0x25a>
 8001046:	2306      	movs	r3, #6
 8001048:	e023      	b.n	8001092 <HAL_GPIO_Init+0x25a>
 800104a:	2305      	movs	r3, #5
 800104c:	e021      	b.n	8001092 <HAL_GPIO_Init+0x25a>
 800104e:	2304      	movs	r3, #4
 8001050:	e01f      	b.n	8001092 <HAL_GPIO_Init+0x25a>
 8001052:	2303      	movs	r3, #3
 8001054:	e01d      	b.n	8001092 <HAL_GPIO_Init+0x25a>
 8001056:	2302      	movs	r3, #2
 8001058:	e01b      	b.n	8001092 <HAL_GPIO_Init+0x25a>
 800105a:	2301      	movs	r3, #1
 800105c:	e019      	b.n	8001092 <HAL_GPIO_Init+0x25a>
 800105e:	bf00      	nop
 8001060:	58000080 	.word	0x58000080
 8001064:	58024400 	.word	0x58024400
 8001068:	58000400 	.word	0x58000400
 800106c:	58020000 	.word	0x58020000
 8001070:	58020400 	.word	0x58020400
 8001074:	58020800 	.word	0x58020800
 8001078:	58020c00 	.word	0x58020c00
 800107c:	58021000 	.word	0x58021000
 8001080:	58021400 	.word	0x58021400
 8001084:	58021800 	.word	0x58021800
 8001088:	58021c00 	.word	0x58021c00
 800108c:	58022400 	.word	0x58022400
 8001090:	2300      	movs	r3, #0
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	f002 0203 	and.w	r2, r2, #3
 8001098:	0092      	lsls	r2, r2, #2
 800109a:	4093      	lsls	r3, r2
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a2:	4938      	ldr	r1, [pc, #224]	; (8001184 <HAL_GPIO_Init+0x34c>)
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3302      	adds	r3, #2
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80010d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80010de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	3301      	adds	r3, #1
 8001164:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa22 f303 	lsr.w	r3, r2, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	f47f ae6b 	bne.w	8000e4c <HAL_GPIO_Init+0x14>
  }
}
 8001176:	bf00      	nop
 8001178:	bf00      	nop
 800117a:	3724      	adds	r7, #36	; 0x24
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	58000400 	.word	0x58000400

08001188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
 8001194:	4613      	mov	r3, r2
 8001196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001198:	787b      	ldrb	r3, [r7, #1]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800119e:	887a      	ldrh	r2, [r7, #2]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80011a4:	e003      	b.n	80011ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	041a      	lsls	r2, r3, #16
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	619a      	str	r2, [r3, #24]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011bc:	b08f      	sub	sp, #60	; 0x3c
 80011be:	af0a      	add	r7, sp, #40	; 0x28
 80011c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e116      	b.n	80013fa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d106      	bne.n	80011ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f006 ff40 	bl	800806c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2203      	movs	r2, #3
 80011f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d102      	bne.n	8001206 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f003 fb81 	bl	8004912 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	687e      	ldr	r6, [r7, #4]
 8001218:	466d      	mov	r5, sp
 800121a:	f106 0410 	add.w	r4, r6, #16
 800121e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001226:	e894 0003 	ldmia.w	r4, {r0, r1}
 800122a:	e885 0003 	stmia.w	r5, {r0, r1}
 800122e:	1d33      	adds	r3, r6, #4
 8001230:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001232:	6838      	ldr	r0, [r7, #0]
 8001234:	f003 fa4c 	bl	80046d0 <USB_CoreInit>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d005      	beq.n	800124a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2202      	movs	r2, #2
 8001242:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e0d7      	b.n	80013fa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f003 fb6f 	bl	8004934 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001256:	2300      	movs	r3, #0
 8001258:	73fb      	strb	r3, [r7, #15]
 800125a:	e04a      	b.n	80012f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800125c:	7bfa      	ldrb	r2, [r7, #15]
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	4613      	mov	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	4413      	add	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	333d      	adds	r3, #61	; 0x3d
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	4413      	add	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	333c      	adds	r3, #60	; 0x3c
 8001280:	7bfa      	ldrb	r2, [r7, #15]
 8001282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	b298      	uxth	r0, r3
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	3344      	adds	r3, #68	; 0x44
 8001298:	4602      	mov	r2, r0
 800129a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	3340      	adds	r3, #64	; 0x40
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	4413      	add	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	3348      	adds	r3, #72	; 0x48
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012c4:	7bfa      	ldrb	r2, [r7, #15]
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	4413      	add	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	334c      	adds	r3, #76	; 0x4c
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	4413      	add	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	3354      	adds	r3, #84	; 0x54
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	3301      	adds	r3, #1
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	7bfa      	ldrb	r2, [r7, #15]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d3af      	bcc.n	800125c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	73fb      	strb	r3, [r7, #15]
 8001300:	e044      	b.n	800138c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001302:	7bfa      	ldrb	r2, [r7, #15]
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	4413      	add	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	440b      	add	r3, r1
 8001310:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	4613      	mov	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	4413      	add	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	440b      	add	r3, r1
 8001326:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800132a:	7bfa      	ldrb	r2, [r7, #15]
 800132c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4413      	add	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	440b      	add	r3, r1
 800133c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	4413      	add	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800135a:	7bfa      	ldrb	r2, [r7, #15]
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4413      	add	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	440b      	add	r3, r1
 8001368:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4413      	add	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	3301      	adds	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	429a      	cmp	r2, r3
 8001394:	d3b5      	bcc.n	8001302 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	687e      	ldr	r6, [r7, #4]
 800139e:	466d      	mov	r5, sp
 80013a0:	f106 0410 	add.w	r4, r6, #16
 80013a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80013b4:	1d33      	adds	r3, r6, #4
 80013b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013b8:	6838      	ldr	r0, [r7, #0]
 80013ba:	f003 fb07 	bl	80049cc <USB_DevInit>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2202      	movs	r2, #2
 80013c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e014      	b.n	80013fa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d102      	bne.n	80013ee <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f001 f98b 	bl	8002704 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f004 fc55 	bl	8005ca2 <USB_DevDisconnect>

  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001402 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b084      	sub	sp, #16
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <HAL_PCD_Start+0x1c>
 800141a:	2302      	movs	r3, #2
 800141c:	e020      	b.n	8001460 <HAL_PCD_Start+0x5e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142a:	2b01      	cmp	r3, #1
 800142c:	d109      	bne.n	8001442 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001432:	2b01      	cmp	r3, #1
 8001434:	d005      	beq.n	8001442 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f003 fa52 	bl	80048f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f004 fc05 	bl	8005c60 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b08d      	sub	sp, #52	; 0x34
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f004 fcc3 	bl	8005e0a <USB_GetMode>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	f040 84b7 	bne.w	8001dfa <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f004 fc27 	bl	8005ce4 <USB_ReadInterrupts>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 84ad 	beq.w	8001df8 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	0a1b      	lsrs	r3, r3, #8
 80014a8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f004 fc14 	bl	8005ce4 <USB_ReadInterrupts>
 80014bc:	4603      	mov	r3, r0
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d107      	bne.n	80014d6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	695a      	ldr	r2, [r3, #20]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f002 0202 	and.w	r2, r2, #2
 80014d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f004 fc02 	bl	8005ce4 <USB_ReadInterrupts>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	2b10      	cmp	r3, #16
 80014e8:	d161      	bne.n	80015ae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	699a      	ldr	r2, [r3, #24]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0210 	bic.w	r2, r2, #16
 80014f8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80014fa:	6a3b      	ldr	r3, [r7, #32]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	f003 020f 	and.w	r2, r3, #15
 8001506:	4613      	mov	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	3304      	adds	r3, #4
 8001518:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	0c5b      	lsrs	r3, r3, #17
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	2b02      	cmp	r3, #2
 8001524:	d124      	bne.n	8001570 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800152c:	4013      	ands	r3, r2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d035      	beq.n	800159e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	091b      	lsrs	r3, r3, #4
 800153a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800153c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001540:	b29b      	uxth	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	6a38      	ldr	r0, [r7, #32]
 8001546:	f004 fa39 	bl	80059bc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	691a      	ldr	r2, [r3, #16]
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001556:	441a      	add	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	6a1a      	ldr	r2, [r3, #32]
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001568:	441a      	add	r2, r3
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	621a      	str	r2, [r3, #32]
 800156e:	e016      	b.n	800159e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	0c5b      	lsrs	r3, r3, #17
 8001574:	f003 030f 	and.w	r3, r3, #15
 8001578:	2b06      	cmp	r3, #6
 800157a:	d110      	bne.n	800159e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001582:	2208      	movs	r2, #8
 8001584:	4619      	mov	r1, r3
 8001586:	6a38      	ldr	r0, [r7, #32]
 8001588:	f004 fa18 	bl	80059bc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	6a1a      	ldr	r2, [r3, #32]
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001598:	441a      	add	r2, r3
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	699a      	ldr	r2, [r3, #24]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f042 0210 	orr.w	r2, r2, #16
 80015ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f004 fb96 	bl	8005ce4 <USB_ReadInterrupts>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015c2:	f040 80a7 	bne.w	8001714 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f004 fb9b 	bl	8005d0a <USB_ReadDevAllOutEpInterrupt>
 80015d4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80015d6:	e099      	b.n	800170c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80015d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 808e 	beq.w	8001700 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f004 fbbf 	bl	8005d72 <USB_ReadDevOutEPInterrupt>
 80015f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00c      	beq.n	800161a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	015a      	lsls	r2, r3, #5
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	4413      	add	r3, r2
 8001608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800160c:	461a      	mov	r2, r3
 800160e:	2301      	movs	r3, #1
 8001610:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001612:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 feef 	bl	80023f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00c      	beq.n	800163e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	015a      	lsls	r2, r3, #5
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	4413      	add	r3, r2
 800162c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001630:	461a      	mov	r2, r3
 8001632:	2308      	movs	r3, #8
 8001634:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 ffc5 	bl	80025c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	f003 0310 	and.w	r3, r3, #16
 8001644:	2b00      	cmp	r3, #0
 8001646:	d008      	beq.n	800165a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	015a      	lsls	r2, r3, #5
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	4413      	add	r3, r2
 8001650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001654:	461a      	mov	r2, r3
 8001656:	2310      	movs	r3, #16
 8001658:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d030      	beq.n	80016c6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166c:	2b80      	cmp	r3, #128	; 0x80
 800166e:	d109      	bne.n	8001684 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	69fa      	ldr	r2, [r7, #28]
 800167a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800167e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001682:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001686:	4613      	mov	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	3304      	adds	r3, #4
 8001698:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	78db      	ldrb	r3, [r3, #3]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d108      	bne.n	80016b4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2200      	movs	r2, #0
 80016a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	4619      	mov	r1, r3
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f006 fe00 	bl	80082b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	015a      	lsls	r2, r3, #5
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	4413      	add	r3, r2
 80016bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016c0:	461a      	mov	r2, r3
 80016c2:	2302      	movs	r3, #2
 80016c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	f003 0320 	and.w	r3, r3, #32
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d008      	beq.n	80016e2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	015a      	lsls	r2, r3, #5
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	4413      	add	r3, r2
 80016d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016dc:	461a      	mov	r2, r3
 80016de:	2320      	movs	r3, #32
 80016e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d009      	beq.n	8001700 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	015a      	lsls	r2, r3, #5
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	4413      	add	r3, r2
 80016f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016f8:	461a      	mov	r2, r3
 80016fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	3301      	adds	r3, #1
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001708:	085b      	lsrs	r3, r3, #1
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170e:	2b00      	cmp	r3, #0
 8001710:	f47f af62 	bne.w	80015d8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f004 fae3 	bl	8005ce4 <USB_ReadInterrupts>
 800171e:	4603      	mov	r3, r0
 8001720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001724:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001728:	f040 80db 	bne.w	80018e2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f004 fb04 	bl	8005d3e <USB_ReadDevAllInEpInterrupt>
 8001736:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800173c:	e0cd      	b.n	80018da <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800173e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 80c2 	beq.w	80018ce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f004 fb2a 	bl	8005dae <USB_ReadDevInEPInterrupt>
 800175a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d057      	beq.n	8001816 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	2201      	movs	r2, #1
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800177a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	43db      	mvns	r3, r3
 8001780:	69f9      	ldr	r1, [r7, #28]
 8001782:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001786:	4013      	ands	r3, r2
 8001788:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	015a      	lsls	r2, r3, #5
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	4413      	add	r3, r2
 8001792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001796:	461a      	mov	r2, r3
 8001798:	2301      	movs	r3, #1
 800179a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d132      	bne.n	800180a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a8:	4613      	mov	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4413      	add	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	334c      	adds	r3, #76	; 0x4c
 80017b4:	6819      	ldr	r1, [r3, #0]
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ba:	4613      	mov	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4403      	add	r3, r0
 80017c4:	3348      	adds	r3, #72	; 0x48
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4419      	add	r1, r3
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ce:	4613      	mov	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4413      	add	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4403      	add	r3, r0
 80017d8:	334c      	adds	r3, #76	; 0x4c
 80017da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d113      	bne.n	800180a <HAL_PCD_IRQHandler+0x3a2>
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e6:	4613      	mov	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	3354      	adds	r3, #84	; 0x54
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d108      	bne.n	800180a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001802:	461a      	mov	r2, r3
 8001804:	2101      	movs	r1, #1
 8001806:	f004 fb33 	bl	8005e70 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	b2db      	uxtb	r3, r3
 800180e:	4619      	mov	r1, r3
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f006 fcca 	bl	80081aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d008      	beq.n	8001832 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	015a      	lsls	r2, r3, #5
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	4413      	add	r3, r2
 8001828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800182c:	461a      	mov	r2, r3
 800182e:	2308      	movs	r3, #8
 8001830:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	f003 0310 	and.w	r3, r3, #16
 8001838:	2b00      	cmp	r3, #0
 800183a:	d008      	beq.n	800184e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	015a      	lsls	r2, r3, #5
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	4413      	add	r3, r2
 8001844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001848:	461a      	mov	r2, r3
 800184a:	2310      	movs	r3, #16
 800184c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001854:	2b00      	cmp	r3, #0
 8001856:	d008      	beq.n	800186a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	015a      	lsls	r2, r3, #5
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	4413      	add	r3, r2
 8001860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001864:	461a      	mov	r2, r3
 8001866:	2340      	movs	r3, #64	; 0x40
 8001868:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d023      	beq.n	80018bc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001876:	6a38      	ldr	r0, [r7, #32]
 8001878:	f003 fa06 	bl	8004c88 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800187c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187e:	4613      	mov	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4413      	add	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	3338      	adds	r3, #56	; 0x38
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	4413      	add	r3, r2
 800188c:	3304      	adds	r3, #4
 800188e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	78db      	ldrb	r3, [r3, #3]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d108      	bne.n	80018aa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2200      	movs	r2, #0
 800189c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	4619      	mov	r1, r3
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f006 fd17 	bl	80082d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	015a      	lsls	r2, r3, #5
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	4413      	add	r3, r2
 80018b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018b6:	461a      	mov	r2, r3
 80018b8:	2302      	movs	r3, #2
 80018ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80018c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 fd08 	bl	80022de <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	3301      	adds	r3, #1
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d6:	085b      	lsrs	r3, r3, #1
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f47f af2e 	bne.w	800173e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f004 f9fc 	bl	8005ce4 <USB_ReadInterrupts>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018f6:	d122      	bne.n	800193e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001912:	2b01      	cmp	r3, #1
 8001914:	d108      	bne.n	8001928 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800191e:	2100      	movs	r1, #0
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 ff13 	bl	800274c <HAL_PCDEx_LPM_Callback>
 8001926:	e002      	b.n	800192e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f006 fcb5 	bl	8008298 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	695a      	ldr	r2, [r3, #20]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800193c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f004 f9ce 	bl	8005ce4 <USB_ReadInterrupts>
 8001948:	4603      	mov	r3, r0
 800194a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800194e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001952:	d112      	bne.n	800197a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b01      	cmp	r3, #1
 8001962:	d102      	bne.n	800196a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f006 fc71 	bl	800824c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695a      	ldr	r2, [r3, #20]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001978:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f004 f9b0 	bl	8005ce4 <USB_ReadInterrupts>
 8001984:	4603      	mov	r3, r0
 8001986:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800198a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800198e:	d121      	bne.n	80019d4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800199e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d111      	bne.n	80019ce <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	f003 020f 	and.w	r2, r3, #15
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80019c4:	2101      	movs	r1, #1
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 fec0 	bl	800274c <HAL_PCDEx_LPM_Callback>
 80019cc:	e002      	b.n	80019d4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f006 fc3c 	bl	800824c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f004 f983 	bl	8005ce4 <USB_ReadInterrupts>
 80019de:	4603      	mov	r3, r0
 80019e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019e8:	f040 80b7 	bne.w	8001b5a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	69fa      	ldr	r2, [r7, #28]
 80019f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019fa:	f023 0301 	bic.w	r3, r3, #1
 80019fe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2110      	movs	r1, #16
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 f93e 	bl	8004c88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a10:	e046      	b.n	8001aa0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a14:	015a      	lsls	r2, r3, #5
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	4413      	add	r3, r2
 8001a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a1e:	461a      	mov	r2, r3
 8001a20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a24:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a28:	015a      	lsls	r2, r3, #5
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a36:	0151      	lsls	r1, r2, #5
 8001a38:	69fa      	ldr	r2, [r7, #28]
 8001a3a:	440a      	add	r2, r1
 8001a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a48:	015a      	lsls	r2, r3, #5
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a52:	461a      	mov	r2, r3
 8001a54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a58:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5c:	015a      	lsls	r2, r3, #5
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	4413      	add	r3, r2
 8001a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a6a:	0151      	lsls	r1, r2, #5
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	440a      	add	r2, r1
 8001a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7c:	015a      	lsls	r2, r3, #5
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	4413      	add	r3, r2
 8001a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a8a:	0151      	lsls	r1, r2, #5
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	440a      	add	r2, r1
 8001a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a98:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d3b3      	bcc.n	8001a12 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	69fa      	ldr	r2, [r7, #28]
 8001ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ab8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001abc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d016      	beq.n	8001af4 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ad6:	f043 030b 	orr.w	r3, r3, #11
 8001ada:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aec:	f043 030b 	orr.w	r3, r3, #11
 8001af0:	6453      	str	r3, [r2, #68]	; 0x44
 8001af2:	e015      	b.n	8001b20 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b02:	4619      	mov	r1, r3
 8001b04:	f242 032b 	movw	r3, #8235	; 0x202b
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	69fa      	ldr	r2, [r7, #28]
 8001b16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b1a:	f043 030b 	orr.w	r3, r3, #11
 8001b1e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b32:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b44:	461a      	mov	r2, r3
 8001b46:	f004 f993 	bl	8005e70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f004 f8c0 	bl	8005ce4 <USB_ReadInterrupts>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b6e:	d124      	bne.n	8001bba <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f004 f957 	bl	8005e28 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f003 f8ff 	bl	8004d82 <USB_GetDevSpeed>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681c      	ldr	r4, [r3, #0]
 8001b90:	f001 fd10 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 8001b94:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f002 fe04 	bl	80047ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f006 fb28 	bl	80081fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	695a      	ldr	r2, [r3, #20]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001bb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f004 f890 	bl	8005ce4 <USB_ReadInterrupts>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d10a      	bne.n	8001be4 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f006 fb05 	bl	80081de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f002 0208 	and.w	r2, r2, #8
 8001be2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f004 f87b 	bl	8005ce4 <USB_ReadInterrupts>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf4:	2b80      	cmp	r3, #128	; 0x80
 8001bf6:	d122      	bne.n	8001c3e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c04:	2301      	movs	r3, #1
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
 8001c08:	e014      	b.n	8001c34 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0e:	4613      	mov	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4413      	add	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d105      	bne.n	8001c2e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4619      	mov	r1, r3
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 fb27 	bl	800227c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	3301      	adds	r3, #1
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d3e5      	bcc.n	8001c0a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f004 f84e 	bl	8005ce4 <USB_ReadInterrupts>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c52:	d13b      	bne.n	8001ccc <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c54:	2301      	movs	r3, #1
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
 8001c58:	e02b      	b.n	8001cb2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	015a      	lsls	r2, r3, #5
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6e:	4613      	mov	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4413      	add	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	3340      	adds	r3, #64	; 0x40
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d115      	bne.n	8001cac <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001c80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	da12      	bge.n	8001cac <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	333f      	adds	r3, #63	; 0x3f
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fae8 	bl	800227c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	3301      	adds	r3, #1
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d3ce      	bcc.n	8001c5a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695a      	ldr	r2, [r3, #20]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001cca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f004 f807 	bl	8005ce4 <USB_ReadInterrupts>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ce0:	d155      	bne.n	8001d8e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce6:	e045      	b.n	8001d74 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	015a      	lsls	r2, r3, #5
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d12e      	bne.n	8001d6e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d10:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	da2b      	bge.n	8001d6e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001d22:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d121      	bne.n	8001d6e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10a      	bne.n	8001d6e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d6a:	6053      	str	r3, [r2, #4]
            break;
 8001d6c:	e007      	b.n	8001d7e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	3301      	adds	r3, #1
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d3b4      	bcc.n	8001ce8 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	695a      	ldr	r2, [r3, #20]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001d8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 ffa6 	bl	8005ce4 <USB_ReadInterrupts>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da2:	d10a      	bne.n	8001dba <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f006 faa9 	bl	80082fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695a      	ldr	r2, [r3, #20]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001db8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 ff90 	bl	8005ce4 <USB_ReadInterrupts>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d115      	bne.n	8001dfa <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f006 fa99 	bl	8008318 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	e000      	b.n	8001dfa <HAL_PCD_IRQHandler+0x992>
      return;
 8001df8:	bf00      	nop
    }
  }
}
 8001dfa:	3734      	adds	r7, #52	; 0x34
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd90      	pop	{r4, r7, pc}

08001e00 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_PCD_SetAddress+0x1a>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e013      	b.n	8001e42 <HAL_PCD_SetAddress+0x42>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	78fa      	ldrb	r2, [r7, #3]
 8001e30:	4611      	mov	r1, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 feee 	bl	8005c14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	4608      	mov	r0, r1
 8001e54:	4611      	mov	r1, r2
 8001e56:	461a      	mov	r2, r3
 8001e58:	4603      	mov	r3, r0
 8001e5a:	70fb      	strb	r3, [r7, #3]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	803b      	strh	r3, [r7, #0]
 8001e60:	4613      	mov	r3, r2
 8001e62:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	da0f      	bge.n	8001e90 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	f003 020f 	and.w	r2, r3, #15
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	3338      	adds	r3, #56	; 0x38
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	3304      	adds	r3, #4
 8001e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	705a      	strb	r2, [r3, #1]
 8001e8e:	e00f      	b.n	8001eb0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	f003 020f 	and.w	r2, r3, #15
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ebc:	883a      	ldrh	r2, [r7, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	78ba      	ldrb	r2, [r7, #2]
 8001ec6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	785b      	ldrb	r3, [r3, #1]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d004      	beq.n	8001eda <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001eda:	78bb      	ldrb	r3, [r7, #2]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d102      	bne.n	8001ee6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_PCD_EP_Open+0xaa>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e00e      	b.n	8001f12 <HAL_PCD_EP_Open+0xc8>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68f9      	ldr	r1, [r7, #12]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f002 ff62 	bl	8004dcc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001f10:	7afb      	ldrb	r3, [r7, #11]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	da0f      	bge.n	8001f4e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	f003 020f 	and.w	r2, r3, #15
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	3338      	adds	r3, #56	; 0x38
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	3304      	adds	r3, #4
 8001f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	705a      	strb	r2, [r3, #1]
 8001f4c:	e00f      	b.n	8001f6e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	f003 020f 	and.w	r2, r3, #15
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	4413      	add	r3, r2
 8001f64:	3304      	adds	r3, #4
 8001f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_PCD_EP_Close+0x6e>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e00e      	b.n	8001fa6 <HAL_PCD_EP_Close+0x8c>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68f9      	ldr	r1, [r7, #12]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f002 ffa0 	bl	8004edc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fbe:	7afb      	ldrb	r3, [r7, #11]
 8001fc0:	f003 020f 	and.w	r2, r3, #15
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2200      	movs	r2, #0
 8001fee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ff0:	7afb      	ldrb	r3, [r7, #11]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d102      	bne.n	800200a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800200a:	7afb      	ldrb	r3, [r7, #11]
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	6979      	ldr	r1, [r7, #20]
 8002022:	f003 fa87 	bl	8005534 <USB_EP0StartXfer>
 8002026:	e008      	b.n	800203a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	461a      	mov	r2, r3
 8002034:	6979      	ldr	r1, [r7, #20]
 8002036:	f003 f82d 	bl	8005094 <USB_EPStartXfer>
  }

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	f003 020f 	and.w	r2, r3, #15
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	460b      	mov	r3, r1
 8002082:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002084:	7afb      	ldrb	r3, [r7, #11]
 8002086:	f003 020f 	and.w	r2, r3, #15
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	3338      	adds	r3, #56	; 0x38
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	3304      	adds	r3, #4
 800209a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2200      	movs	r2, #0
 80020ac:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	2201      	movs	r2, #1
 80020b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020b4:	7afb      	ldrb	r3, [r7, #11]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d102      	bne.n	80020ce <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ce:	7afb      	ldrb	r3, [r7, #11]
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d109      	bne.n	80020ec <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	6979      	ldr	r1, [r7, #20]
 80020e6:	f003 fa25 	bl	8005534 <USB_EP0StartXfer>
 80020ea:	e008      	b.n	80020fe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	6979      	ldr	r1, [r7, #20]
 80020fa:	f002 ffcb 	bl	8005094 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	f003 020f 	and.w	r2, r3, #15
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	429a      	cmp	r2, r3
 8002120:	d901      	bls.n	8002126 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e050      	b.n	80021c8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800212a:	2b00      	cmp	r3, #0
 800212c:	da0f      	bge.n	800214e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	f003 020f 	and.w	r2, r3, #15
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	3338      	adds	r3, #56	; 0x38
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	3304      	adds	r3, #4
 8002144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	705a      	strb	r2, [r3, #1]
 800214c:	e00d      	b.n	800216a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800214e:	78fa      	ldrb	r2, [r7, #3]
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	3304      	adds	r3, #4
 8002162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2201      	movs	r2, #1
 800216e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	b2da      	uxtb	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_PCD_EP_SetStall+0x82>
 8002186:	2302      	movs	r3, #2
 8002188:	e01e      	b.n	80021c8 <HAL_PCD_EP_SetStall+0xc0>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68f9      	ldr	r1, [r7, #12]
 8002198:	4618      	mov	r0, r3
 800219a:	f003 fc67 	bl	8005a6c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10a      	bne.n	80021be <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	b2d9      	uxtb	r1, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021b8:	461a      	mov	r2, r3
 80021ba:	f003 fe59 	bl	8005e70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	f003 020f 	and.w	r2, r3, #15
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d901      	bls.n	80021ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e042      	b.n	8002274 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	da0f      	bge.n	8002216 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	f003 020f 	and.w	r2, r3, #15
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	3338      	adds	r3, #56	; 0x38
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	3304      	adds	r3, #4
 800220c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2201      	movs	r2, #1
 8002212:	705a      	strb	r2, [r3, #1]
 8002214:	e00f      	b.n	8002236 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	f003 020f 	and.w	r2, r3, #15
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	4413      	add	r3, r2
 800222c:	3304      	adds	r3, #4
 800222e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	b2da      	uxtb	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_PCD_EP_ClrStall+0x86>
 8002252:	2302      	movs	r3, #2
 8002254:	e00e      	b.n	8002274 <HAL_PCD_EP_ClrStall+0xa4>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68f9      	ldr	r1, [r7, #12]
 8002264:	4618      	mov	r0, r3
 8002266:	f003 fc6f 	bl	8005b48 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002288:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800228c:	2b00      	cmp	r3, #0
 800228e:	da0c      	bge.n	80022aa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	f003 020f 	and.w	r2, r3, #15
 8002296:	4613      	mov	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	3338      	adds	r3, #56	; 0x38
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	4413      	add	r3, r2
 80022a4:	3304      	adds	r3, #4
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	e00c      	b.n	80022c4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	f003 020f 	and.w	r2, r3, #15
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	4413      	add	r3, r2
 80022c0:	3304      	adds	r3, #4
 80022c2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68f9      	ldr	r1, [r7, #12]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f003 fa8e 	bl	80057ec <USB_EPStopXfer>
 80022d0:	4603      	mov	r3, r0
 80022d2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80022d4:	7afb      	ldrb	r3, [r7, #11]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b08a      	sub	sp, #40	; 0x28
 80022e2:	af02      	add	r7, sp, #8
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4413      	add	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	3338      	adds	r3, #56	; 0x38
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	3304      	adds	r3, #4
 8002304:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a1a      	ldr	r2, [r3, #32]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	429a      	cmp	r2, r3
 8002310:	d901      	bls.n	8002316 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e06c      	b.n	80023f0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	699a      	ldr	r2, [r3, #24]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	429a      	cmp	r2, r3
 800232a:	d902      	bls.n	8002332 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3303      	adds	r3, #3
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800233a:	e02b      	b.n	8002394 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	699a      	ldr	r2, [r3, #24]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	429a      	cmp	r2, r3
 8002350:	d902      	bls.n	8002358 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	3303      	adds	r3, #3
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6919      	ldr	r1, [r3, #16]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002370:	b2db      	uxtb	r3, r3
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	4603      	mov	r3, r0
 8002376:	6978      	ldr	r0, [r7, #20]
 8002378:	f003 fae2 	bl	8005940 <USB_WritePacket>

    ep->xfer_buff  += len;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	441a      	add	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a1a      	ldr	r2, [r3, #32]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	441a      	add	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d809      	bhi.n	80023be <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a1a      	ldr	r2, [r3, #32]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d203      	bcs.n	80023be <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1be      	bne.n	800233c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d811      	bhi.n	80023ee <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	2201      	movs	r2, #1
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	6939      	ldr	r1, [r7, #16]
 80023e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023ea:	4013      	ands	r3, r2
 80023ec:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3720      	adds	r7, #32
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	333c      	adds	r3, #60	; 0x3c
 8002410:	3304      	adds	r3, #4
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4413      	add	r3, r2
 800241e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d17b      	bne.n	8002526 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d015      	beq.n	8002464 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	4a61      	ldr	r2, [pc, #388]	; (80025c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	f240 80b9 	bls.w	80025b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80b3 	beq.w	80025b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	4413      	add	r3, r2
 8002456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800245a:	461a      	mov	r2, r3
 800245c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002460:	6093      	str	r3, [r2, #8]
 8002462:	e0a7      	b.n	80025b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	4413      	add	r3, r2
 8002476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800247a:	461a      	mov	r2, r3
 800247c:	2320      	movs	r3, #32
 800247e:	6093      	str	r3, [r2, #8]
 8002480:	e098      	b.n	80025b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002488:	2b00      	cmp	r3, #0
 800248a:	f040 8093 	bne.w	80025b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	4a4b      	ldr	r2, [pc, #300]	; (80025c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d90f      	bls.n	80024b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ac:	461a      	mov	r2, r3
 80024ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024b2:	6093      	str	r3, [r2, #8]
 80024b4:	e07e      	b.n	80025b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4413      	add	r3, r2
 80024c8:	3304      	adds	r3, #4
 80024ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	69da      	ldr	r2, [r3, #28]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	0159      	lsls	r1, r3, #5
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	440b      	add	r3, r1
 80024d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e2:	1ad2      	subs	r2, r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d114      	bne.n	8002518 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002500:	461a      	mov	r2, r3
 8002502:	2101      	movs	r1, #1
 8002504:	f003 fcb4 	bl	8005e70 <USB_EP0_OutStart>
 8002508:	e006      	b.n	8002518 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	441a      	add	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	4619      	mov	r1, r3
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f005 fe28 	bl	8008174 <HAL_PCD_DataOutStageCallback>
 8002524:	e046      	b.n	80025b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	4a26      	ldr	r2, [pc, #152]	; (80025c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d124      	bne.n	8002578 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	4413      	add	r3, r2
 8002540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002544:	461a      	mov	r2, r3
 8002546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800254a:	6093      	str	r3, [r2, #8]
 800254c:	e032      	b.n	80025b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	4413      	add	r3, r2
 8002560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002564:	461a      	mov	r2, r3
 8002566:	2320      	movs	r3, #32
 8002568:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	4619      	mov	r1, r3
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f005 fdff 	bl	8008174 <HAL_PCD_DataOutStageCallback>
 8002576:	e01d      	b.n	80025b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d114      	bne.n	80025a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d108      	bne.n	80025a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025a0:	461a      	mov	r2, r3
 80025a2:	2100      	movs	r1, #0
 80025a4:	f003 fc64 	bl	8005e70 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	4619      	mov	r1, r3
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f005 fde0 	bl	8008174 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3720      	adds	r7, #32
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	4f54300a 	.word	0x4f54300a
 80025c4:	4f54310a 	.word	0x4f54310a

080025c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	333c      	adds	r3, #60	; 0x3c
 80025e0:	3304      	adds	r3, #4
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4a15      	ldr	r2, [pc, #84]	; (8002650 <PCD_EP_OutSetupPacket_int+0x88>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d90e      	bls.n	800261c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002614:	461a      	mov	r2, r3
 8002616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800261a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f005 fd97 	bl	8008150 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <PCD_EP_OutSetupPacket_int+0x88>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d90c      	bls.n	8002644 <PCD_EP_OutSetupPacket_int+0x7c>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d108      	bne.n	8002644 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800263c:	461a      	mov	r2, r3
 800263e:	2101      	movs	r1, #1
 8002640:	f003 fc16 	bl	8005e70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	4f54300a 	.word	0x4f54300a

08002654 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	70fb      	strb	r3, [r7, #3]
 8002660:	4613      	mov	r3, r2
 8002662:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d107      	bne.n	8002682 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002672:	883b      	ldrh	r3, [r7, #0]
 8002674:	0419      	lsls	r1, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	430a      	orrs	r2, r1
 800267e:	629a      	str	r2, [r3, #40]	; 0x28
 8002680:	e028      	b.n	80026d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	0c1b      	lsrs	r3, r3, #16
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	4413      	add	r3, r2
 800268e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002690:	2300      	movs	r3, #0
 8002692:	73fb      	strb	r3, [r7, #15]
 8002694:	e00d      	b.n	80026b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	3340      	adds	r3, #64	; 0x40
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	0c1b      	lsrs	r3, r3, #16
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	4413      	add	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	3301      	adds	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	7bfa      	ldrb	r2, [r7, #15]
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d3ec      	bcc.n	8002696 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80026bc:	883b      	ldrh	r3, [r7, #0]
 80026be:	0418      	lsls	r0, r3, #16
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6819      	ldr	r1, [r3, #0]
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	4302      	orrs	r2, r0
 80026cc:	3340      	adds	r3, #64	; 0x40
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	460b      	mov	r3, r1
 80026ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	887a      	ldrh	r2, [r7, #2]
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_PCDEx_ActivateLPM+0x44>)
 8002734:	4313      	orrs	r3, r2
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	10000003 	.word	0x10000003

0800274c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800276c:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <HAL_PWREx_ConfigSupply+0x70>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b04      	cmp	r3, #4
 8002776:	d00a      	beq.n	800278e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <HAL_PWREx_ConfigSupply+0x70>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	429a      	cmp	r2, r3
 8002784:	d001      	beq.n	800278a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e01f      	b.n	80027ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e01d      	b.n	80027ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_PWREx_ConfigSupply+0x70>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f023 0207 	bic.w	r2, r3, #7
 8002796:	490f      	ldr	r1, [pc, #60]	; (80027d4 <HAL_PWREx_ConfigSupply+0x70>)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4313      	orrs	r3, r2
 800279c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800279e:	f7fe fa0b 	bl	8000bb8 <HAL_GetTick>
 80027a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027a4:	e009      	b.n	80027ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027a6:	f7fe fa07 	bl	8000bb8 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027b4:	d901      	bls.n	80027ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e007      	b.n	80027ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_PWREx_ConfigSupply+0x70>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027c6:	d1ee      	bne.n	80027a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	58024800 	.word	0x58024800

080027d8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80027e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027e6:	60d3      	str	r3, [r2, #12]
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	58024800 	.word	0x58024800

080027f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08c      	sub	sp, #48	; 0x30
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e39d      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8087 	beq.w	8002926 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002818:	4b88      	ldr	r3, [pc, #544]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002820:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002822:	4b86      	ldr	r3, [pc, #536]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 8002824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002826:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282a:	2b10      	cmp	r3, #16
 800282c:	d007      	beq.n	800283e <HAL_RCC_OscConfig+0x46>
 800282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002830:	2b18      	cmp	r3, #24
 8002832:	d110      	bne.n	8002856 <HAL_RCC_OscConfig+0x5e>
 8002834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d10b      	bne.n	8002856 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283e:	4b7f      	ldr	r3, [pc, #508]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d06c      	beq.n	8002924 <HAL_RCC_OscConfig+0x12c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d168      	bne.n	8002924 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e377      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285e:	d106      	bne.n	800286e <HAL_RCC_OscConfig+0x76>
 8002860:	4b76      	ldr	r3, [pc, #472]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a75      	ldr	r2, [pc, #468]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 8002866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	e02e      	b.n	80028cc <HAL_RCC_OscConfig+0xd4>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x98>
 8002876:	4b71      	ldr	r3, [pc, #452]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a70      	ldr	r2, [pc, #448]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 800287c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b6e      	ldr	r3, [pc, #440]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a6d      	ldr	r2, [pc, #436]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 8002888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e01d      	b.n	80028cc <HAL_RCC_OscConfig+0xd4>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002898:	d10c      	bne.n	80028b4 <HAL_RCC_OscConfig+0xbc>
 800289a:	4b68      	ldr	r3, [pc, #416]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a67      	ldr	r2, [pc, #412]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 80028a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	4b65      	ldr	r3, [pc, #404]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a64      	ldr	r2, [pc, #400]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	e00b      	b.n	80028cc <HAL_RCC_OscConfig+0xd4>
 80028b4:	4b61      	ldr	r3, [pc, #388]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a60      	ldr	r2, [pc, #384]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 80028ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	4b5e      	ldr	r3, [pc, #376]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a5d      	ldr	r2, [pc, #372]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 80028c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d013      	beq.n	80028fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe f970 	bl	8000bb8 <HAL_GetTick>
 80028d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028dc:	f7fe f96c 	bl	8000bb8 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e32b      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028ee:	4b53      	ldr	r3, [pc, #332]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0xe4>
 80028fa:	e014      	b.n	8002926 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fc:	f7fe f95c 	bl	8000bb8 <HAL_GetTick>
 8002900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002904:	f7fe f958 	bl	8000bb8 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	; 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e317      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002916:	4b49      	ldr	r3, [pc, #292]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x10c>
 8002922:	e000      	b.n	8002926 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 808c 	beq.w	8002a4c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002934:	4b41      	ldr	r3, [pc, #260]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800293c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800293e:	4b3f      	ldr	r3, [pc, #252]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <HAL_RCC_OscConfig+0x162>
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	2b18      	cmp	r3, #24
 800294e:	d137      	bne.n	80029c0 <HAL_RCC_OscConfig+0x1c8>
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d132      	bne.n	80029c0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800295a:	4b38      	ldr	r3, [pc, #224]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <HAL_RCC_OscConfig+0x17a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e2e9      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002972:	4b32      	ldr	r3, [pc, #200]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 0219 	bic.w	r2, r3, #25
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	492f      	ldr	r1, [pc, #188]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002984:	f7fe f918 	bl	8000bb8 <HAL_GetTick>
 8002988:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800298c:	f7fe f914 	bl	8000bb8 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e2d3      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800299e:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029aa:	4b24      	ldr	r3, [pc, #144]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	061b      	lsls	r3, r3, #24
 80029b8:	4920      	ldr	r1, [pc, #128]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029be:	e045      	b.n	8002a4c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d026      	beq.n	8002a16 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029c8:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f023 0219 	bic.w	r2, r3, #25
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4919      	ldr	r1, [pc, #100]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7fe f8ed 	bl	8000bb8 <HAL_GetTick>
 80029de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e2:	f7fe f8e9 	bl	8000bb8 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e2a8      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029f4:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a00:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	061b      	lsls	r3, r3, #24
 8002a0e:	490b      	ldr	r1, [pc, #44]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
 8002a14:	e01a      	b.n	8002a4c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a16:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a08      	ldr	r2, [pc, #32]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a22:	f7fe f8c9 	bl	8000bb8 <HAL_GetTick>
 8002a26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a28:	e00a      	b.n	8002a40 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a2a:	f7fe f8c5 	bl	8000bb8 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d903      	bls.n	8002a40 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e284      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
 8002a3c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a40:	4b96      	ldr	r3, [pc, #600]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1ee      	bne.n	8002a2a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d06a      	beq.n	8002b2e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a58:	4b90      	ldr	r3, [pc, #576]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a60:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a62:	4b8e      	ldr	r3, [pc, #568]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d007      	beq.n	8002a7e <HAL_RCC_OscConfig+0x286>
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2b18      	cmp	r3, #24
 8002a72:	d11b      	bne.n	8002aac <HAL_RCC_OscConfig+0x2b4>
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d116      	bne.n	8002aac <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a7e:	4b87      	ldr	r3, [pc, #540]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <HAL_RCC_OscConfig+0x29e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	2b80      	cmp	r3, #128	; 0x80
 8002a90:	d001      	beq.n	8002a96 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e257      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a96:	4b81      	ldr	r3, [pc, #516]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	061b      	lsls	r3, r3, #24
 8002aa4:	497d      	ldr	r1, [pc, #500]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002aaa:	e040      	b.n	8002b2e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d023      	beq.n	8002afc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ab4:	4b79      	ldr	r3, [pc, #484]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a78      	ldr	r2, [pc, #480]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe f87a 	bl	8000bb8 <HAL_GetTick>
 8002ac4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ac8:	f7fe f876 	bl	8000bb8 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e235      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ada:	4b70      	ldr	r3, [pc, #448]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ae6:	4b6d      	ldr	r3, [pc, #436]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	061b      	lsls	r3, r3, #24
 8002af4:	4969      	ldr	r1, [pc, #420]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60cb      	str	r3, [r1, #12]
 8002afa:	e018      	b.n	8002b2e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002afc:	4b67      	ldr	r3, [pc, #412]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a66      	ldr	r2, [pc, #408]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe f856 	bl	8000bb8 <HAL_GetTick>
 8002b0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b10:	f7fe f852 	bl	8000bb8 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e211      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b22:	4b5e      	ldr	r3, [pc, #376]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d036      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d019      	beq.n	8002b76 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b42:	4b56      	ldr	r3, [pc, #344]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b46:	4a55      	ldr	r2, [pc, #340]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4e:	f7fe f833 	bl	8000bb8 <HAL_GetTick>
 8002b52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b56:	f7fe f82f 	bl	8000bb8 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e1ee      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b68:	4b4c      	ldr	r3, [pc, #304]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x35e>
 8002b74:	e018      	b.n	8002ba8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b76:	4b49      	ldr	r3, [pc, #292]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7a:	4a48      	ldr	r2, [pc, #288]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002b7c:	f023 0301 	bic.w	r3, r3, #1
 8002b80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b82:	f7fe f819 	bl	8000bb8 <HAL_GetTick>
 8002b86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b8a:	f7fe f815 	bl	8000bb8 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e1d4      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b9c:	4b3f      	ldr	r3, [pc, #252]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f0      	bne.n	8002b8a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d036      	beq.n	8002c22 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d019      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bbc:	4b37      	ldr	r3, [pc, #220]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a36      	ldr	r2, [pc, #216]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002bc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bc6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bc8:	f7fd fff6 	bl	8000bb8 <HAL_GetTick>
 8002bcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002bd0:	f7fd fff2 	bl	8000bb8 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e1b1      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002be2:	4b2e      	ldr	r3, [pc, #184]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x3d8>
 8002bee:	e018      	b.n	8002c22 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bf0:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a29      	ldr	r2, [pc, #164]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002bf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bfa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bfc:	f7fd ffdc 	bl	8000bb8 <HAL_GetTick>
 8002c00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c04:	f7fd ffd8 	bl	8000bb8 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e197      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c16:	4b21      	ldr	r3, [pc, #132]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 8086 	beq.w	8002d3c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_RCC_OscConfig+0x4a8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1a      	ldr	r2, [pc, #104]	; (8002ca0 <HAL_RCC_OscConfig+0x4a8>)
 8002c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c3c:	f7fd ffbc 	bl	8000bb8 <HAL_GetTick>
 8002c40:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c44:	f7fd ffb8 	bl	8000bb8 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e177      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c56:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <HAL_RCC_OscConfig+0x4a8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d106      	bne.n	8002c78 <HAL_RCC_OscConfig+0x480>
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	6713      	str	r3, [r2, #112]	; 0x70
 8002c76:	e032      	b.n	8002cde <HAL_RCC_OscConfig+0x4e6>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d111      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x4ac>
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	4a05      	ldr	r2, [pc, #20]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8c:	4b03      	ldr	r3, [pc, #12]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c90:	4a02      	ldr	r2, [pc, #8]	; (8002c9c <HAL_RCC_OscConfig+0x4a4>)
 8002c92:	f023 0304 	bic.w	r3, r3, #4
 8002c96:	6713      	str	r3, [r2, #112]	; 0x70
 8002c98:	e021      	b.n	8002cde <HAL_RCC_OscConfig+0x4e6>
 8002c9a:	bf00      	nop
 8002c9c:	58024400 	.word	0x58024400
 8002ca0:	58024800 	.word	0x58024800
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b05      	cmp	r3, #5
 8002caa:	d10c      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x4ce>
 8002cac:	4b83      	ldr	r3, [pc, #524]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	4a82      	ldr	r2, [pc, #520]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002cb2:	f043 0304 	orr.w	r3, r3, #4
 8002cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb8:	4b80      	ldr	r3, [pc, #512]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	4a7f      	ldr	r2, [pc, #508]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc4:	e00b      	b.n	8002cde <HAL_RCC_OscConfig+0x4e6>
 8002cc6:	4b7d      	ldr	r3, [pc, #500]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	4a7c      	ldr	r2, [pc, #496]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002ccc:	f023 0301 	bic.w	r3, r3, #1
 8002cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd2:	4b7a      	ldr	r3, [pc, #488]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	4a79      	ldr	r2, [pc, #484]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002cd8:	f023 0304 	bic.w	r3, r3, #4
 8002cdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d015      	beq.n	8002d12 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce6:	f7fd ff67 	bl	8000bb8 <HAL_GetTick>
 8002cea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cec:	e00a      	b.n	8002d04 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cee:	f7fd ff63 	bl	8000bb8 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e120      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d04:	4b6d      	ldr	r3, [pc, #436]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0ee      	beq.n	8002cee <HAL_RCC_OscConfig+0x4f6>
 8002d10:	e014      	b.n	8002d3c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d12:	f7fd ff51 	bl	8000bb8 <HAL_GetTick>
 8002d16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d18:	e00a      	b.n	8002d30 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d1a:	f7fd ff4d 	bl	8000bb8 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e10a      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d30:	4b62      	ldr	r3, [pc, #392]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1ee      	bne.n	8002d1a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80ff 	beq.w	8002f44 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d46:	4b5d      	ldr	r3, [pc, #372]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d4e:	2b18      	cmp	r3, #24
 8002d50:	f000 80ba 	beq.w	8002ec8 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	f040 8095 	bne.w	8002e88 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5e:	4b57      	ldr	r3, [pc, #348]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a56      	ldr	r2, [pc, #344]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002d64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6a:	f7fd ff25 	bl	8000bb8 <HAL_GetTick>
 8002d6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d72:	f7fd ff21 	bl	8000bb8 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e0e0      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d84:	4b4d      	ldr	r3, [pc, #308]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f0      	bne.n	8002d72 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d90:	4b4a      	ldr	r3, [pc, #296]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002d92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d94:	4b4a      	ldr	r3, [pc, #296]	; (8002ec0 <HAL_RCC_OscConfig+0x6c8>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002da0:	0112      	lsls	r2, r2, #4
 8002da2:	430a      	orrs	r2, r1
 8002da4:	4945      	ldr	r1, [pc, #276]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	628b      	str	r3, [r1, #40]	; 0x28
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	3b01      	subs	r3, #1
 8002db0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db8:	3b01      	subs	r3, #1
 8002dba:	025b      	lsls	r3, r3, #9
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	061b      	lsls	r3, r3, #24
 8002dd6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002dda:	4938      	ldr	r1, [pc, #224]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002de0:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	4a35      	ldr	r2, [pc, #212]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002de6:	f023 0301 	bic.w	r3, r3, #1
 8002dea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002dec:	4b33      	ldr	r3, [pc, #204]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002df0:	4b34      	ldr	r3, [pc, #208]	; (8002ec4 <HAL_RCC_OscConfig+0x6cc>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002df8:	00d2      	lsls	r2, r2, #3
 8002dfa:	4930      	ldr	r1, [pc, #192]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e00:	4b2e      	ldr	r3, [pc, #184]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	f023 020c 	bic.w	r2, r3, #12
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	492b      	ldr	r1, [pc, #172]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e12:	4b2a      	ldr	r3, [pc, #168]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	f023 0202 	bic.w	r2, r3, #2
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	4927      	ldr	r1, [pc, #156]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e24:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	4a24      	ldr	r2, [pc, #144]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e30:	4b22      	ldr	r3, [pc, #136]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	4a21      	ldr	r2, [pc, #132]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e3c:	4b1f      	ldr	r3, [pc, #124]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	4a1e      	ldr	r2, [pc, #120]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002e48:	4b1c      	ldr	r3, [pc, #112]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	4a1b      	ldr	r2, [pc, #108]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e54:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fd feaa 	bl	8000bb8 <HAL_GetTick>
 8002e64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e68:	f7fd fea6 	bl	8000bb8 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e065      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e7a:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x670>
 8002e86:	e05d      	b.n	8002f44 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a0b      	ldr	r2, [pc, #44]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7fd fe90 	bl	8000bb8 <HAL_GetTick>
 8002e98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7fd fe8c 	bl	8000bb8 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e04b      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eae:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <HAL_RCC_OscConfig+0x6c4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x6a4>
 8002eba:	e043      	b.n	8002f44 <HAL_RCC_OscConfig+0x74c>
 8002ebc:	58024400 	.word	0x58024400
 8002ec0:	fffffc0c 	.word	0xfffffc0c
 8002ec4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ec8:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <HAL_RCC_OscConfig+0x758>)
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <HAL_RCC_OscConfig+0x758>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d031      	beq.n	8002f40 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f003 0203 	and.w	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d12a      	bne.n	8002f40 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	091b      	lsrs	r3, r3, #4
 8002eee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d122      	bne.n	8002f40 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d11a      	bne.n	8002f40 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	0a5b      	lsrs	r3, r3, #9
 8002f0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f16:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d111      	bne.n	8002f40 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	0c1b      	lsrs	r3, r3, #16
 8002f20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d108      	bne.n	8002f40 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	0e1b      	lsrs	r3, r3, #24
 8002f32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e000      	b.n	8002f46 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3730      	adds	r7, #48	; 0x30
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	58024400 	.word	0x58024400

08002f54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e19c      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f68:	4b8a      	ldr	r3, [pc, #552]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d910      	bls.n	8002f98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b87      	ldr	r3, [pc, #540]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 020f 	bic.w	r2, r3, #15
 8002f7e:	4985      	ldr	r1, [pc, #532]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b83      	ldr	r3, [pc, #524]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e184      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d010      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	4b7b      	ldr	r3, [pc, #492]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d908      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fb4:	4b78      	ldr	r3, [pc, #480]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	4975      	ldr	r1, [pc, #468]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d010      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	4b70      	ldr	r3, [pc, #448]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d908      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fe2:	4b6d      	ldr	r3, [pc, #436]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	496a      	ldr	r1, [pc, #424]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d010      	beq.n	8003022 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699a      	ldr	r2, [r3, #24]
 8003004:	4b64      	ldr	r3, [pc, #400]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800300c:	429a      	cmp	r2, r3
 800300e:	d908      	bls.n	8003022 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003010:	4b61      	ldr	r3, [pc, #388]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	495e      	ldr	r1, [pc, #376]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 800301e:	4313      	orrs	r3, r2
 8003020:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d010      	beq.n	8003050 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	4b59      	ldr	r3, [pc, #356]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800303a:	429a      	cmp	r2, r3
 800303c:	d908      	bls.n	8003050 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800303e:	4b56      	ldr	r3, [pc, #344]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	4953      	ldr	r1, [pc, #332]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 800304c:	4313      	orrs	r3, r2
 800304e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d010      	beq.n	800307e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	4b4d      	ldr	r3, [pc, #308]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	429a      	cmp	r2, r3
 800306a:	d908      	bls.n	800307e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	4b4a      	ldr	r3, [pc, #296]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	f023 020f 	bic.w	r2, r3, #15
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4947      	ldr	r1, [pc, #284]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 800307a:	4313      	orrs	r3, r2
 800307c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d055      	beq.n	8003136 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800308a:	4b43      	ldr	r3, [pc, #268]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	4940      	ldr	r1, [pc, #256]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003098:	4313      	orrs	r3, r2
 800309a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d107      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030a4:	4b3c      	ldr	r3, [pc, #240]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d121      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0f6      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d107      	bne.n	80030cc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030bc:	4b36      	ldr	r3, [pc, #216]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d115      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0ea      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d107      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030d4:	4b30      	ldr	r3, [pc, #192]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d109      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0de      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030e4:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0d6      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030f4:	4b28      	ldr	r3, [pc, #160]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	f023 0207 	bic.w	r2, r3, #7
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4925      	ldr	r1, [pc, #148]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003102:	4313      	orrs	r3, r2
 8003104:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003106:	f7fd fd57 	bl	8000bb8 <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310c:	e00a      	b.n	8003124 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310e:	f7fd fd53 	bl	8000bb8 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	f241 3288 	movw	r2, #5000	; 0x1388
 800311c:	4293      	cmp	r3, r2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e0be      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003124:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	429a      	cmp	r2, r3
 8003134:	d1eb      	bne.n	800310e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d010      	beq.n	8003164 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	4b14      	ldr	r3, [pc, #80]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	429a      	cmp	r2, r3
 8003150:	d208      	bcs.n	8003164 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003152:	4b11      	ldr	r3, [pc, #68]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f023 020f 	bic.w	r2, r3, #15
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	490e      	ldr	r1, [pc, #56]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003160:	4313      	orrs	r3, r2
 8003162:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003164:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d214      	bcs.n	800319c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b08      	ldr	r3, [pc, #32]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 020f 	bic.w	r2, r3, #15
 800317a:	4906      	ldr	r1, [pc, #24]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b04      	ldr	r3, [pc, #16]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d005      	beq.n	800319c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e086      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
 8003194:	52002000 	.word	0x52002000
 8003198:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d010      	beq.n	80031ca <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	4b3f      	ldr	r3, [pc, #252]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d208      	bcs.n	80031ca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031b8:	4b3c      	ldr	r3, [pc, #240]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	4939      	ldr	r1, [pc, #228]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d010      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	4b34      	ldr	r3, [pc, #208]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d208      	bcs.n	80031f8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031e6:	4b31      	ldr	r3, [pc, #196]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	492e      	ldr	r1, [pc, #184]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b00      	cmp	r3, #0
 8003202:	d010      	beq.n	8003226 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699a      	ldr	r2, [r3, #24]
 8003208:	4b28      	ldr	r3, [pc, #160]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003210:	429a      	cmp	r2, r3
 8003212:	d208      	bcs.n	8003226 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003214:	4b25      	ldr	r3, [pc, #148]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	4922      	ldr	r1, [pc, #136]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003222:	4313      	orrs	r3, r2
 8003224:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d010      	beq.n	8003254 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	4b1d      	ldr	r3, [pc, #116]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800323e:	429a      	cmp	r2, r3
 8003240:	d208      	bcs.n	8003254 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003242:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	4917      	ldr	r1, [pc, #92]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003250:	4313      	orrs	r3, r2
 8003252:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003254:	f000 f834 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 8003258:	4602      	mov	r2, r0
 800325a:	4b14      	ldr	r3, [pc, #80]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	0a1b      	lsrs	r3, r3, #8
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	4912      	ldr	r1, [pc, #72]	; (80032b0 <HAL_RCC_ClockConfig+0x35c>)
 8003266:	5ccb      	ldrb	r3, [r1, r3]
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003272:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	4a0d      	ldr	r2, [pc, #52]	; (80032b0 <HAL_RCC_ClockConfig+0x35c>)
 800327c:	5cd3      	ldrb	r3, [r2, r3]
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <HAL_RCC_ClockConfig+0x360>)
 800328a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800328c:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <HAL_RCC_ClockConfig+0x364>)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <HAL_RCC_ClockConfig+0x368>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd fc44 	bl	8000b24 <HAL_InitTick>
 800329c:	4603      	mov	r3, r0
 800329e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	58024400 	.word	0x58024400
 80032b0:	08009fc4 	.word	0x08009fc4
 80032b4:	24000004 	.word	0x24000004
 80032b8:	24000000 	.word	0x24000000
 80032bc:	24000008 	.word	0x24000008

080032c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b089      	sub	sp, #36	; 0x24
 80032c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c6:	4bb3      	ldr	r3, [pc, #716]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032ce:	2b18      	cmp	r3, #24
 80032d0:	f200 8155 	bhi.w	800357e <HAL_RCC_GetSysClockFreq+0x2be>
 80032d4:	a201      	add	r2, pc, #4	; (adr r2, 80032dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80032d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032da:	bf00      	nop
 80032dc:	08003341 	.word	0x08003341
 80032e0:	0800357f 	.word	0x0800357f
 80032e4:	0800357f 	.word	0x0800357f
 80032e8:	0800357f 	.word	0x0800357f
 80032ec:	0800357f 	.word	0x0800357f
 80032f0:	0800357f 	.word	0x0800357f
 80032f4:	0800357f 	.word	0x0800357f
 80032f8:	0800357f 	.word	0x0800357f
 80032fc:	08003367 	.word	0x08003367
 8003300:	0800357f 	.word	0x0800357f
 8003304:	0800357f 	.word	0x0800357f
 8003308:	0800357f 	.word	0x0800357f
 800330c:	0800357f 	.word	0x0800357f
 8003310:	0800357f 	.word	0x0800357f
 8003314:	0800357f 	.word	0x0800357f
 8003318:	0800357f 	.word	0x0800357f
 800331c:	0800336d 	.word	0x0800336d
 8003320:	0800357f 	.word	0x0800357f
 8003324:	0800357f 	.word	0x0800357f
 8003328:	0800357f 	.word	0x0800357f
 800332c:	0800357f 	.word	0x0800357f
 8003330:	0800357f 	.word	0x0800357f
 8003334:	0800357f 	.word	0x0800357f
 8003338:	0800357f 	.word	0x0800357f
 800333c:	08003373 	.word	0x08003373
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003340:	4b94      	ldr	r3, [pc, #592]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b00      	cmp	r3, #0
 800334a:	d009      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800334c:	4b91      	ldr	r3, [pc, #580]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	08db      	lsrs	r3, r3, #3
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	4a90      	ldr	r2, [pc, #576]	; (8003598 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
 800335c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800335e:	e111      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003360:	4b8d      	ldr	r3, [pc, #564]	; (8003598 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003362:	61bb      	str	r3, [r7, #24]
    break;
 8003364:	e10e      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003366:	4b8d      	ldr	r3, [pc, #564]	; (800359c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003368:	61bb      	str	r3, [r7, #24]
    break;
 800336a:	e10b      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800336c:	4b8c      	ldr	r3, [pc, #560]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800336e:	61bb      	str	r3, [r7, #24]
    break;
 8003370:	e108      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003372:	4b88      	ldr	r3, [pc, #544]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800337c:	4b85      	ldr	r3, [pc, #532]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003386:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003388:	4b82      	ldr	r3, [pc, #520]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003392:	4b80      	ldr	r3, [pc, #512]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003396:	08db      	lsrs	r3, r3, #3
 8003398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033aa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80e1 	beq.w	8003578 <HAL_RCC_GetSysClockFreq+0x2b8>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	f000 8083 	beq.w	80034c4 <HAL_RCC_GetSysClockFreq+0x204>
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	f200 80a1 	bhi.w	8003508 <HAL_RCC_GetSysClockFreq+0x248>
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0x114>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d056      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x1c0>
 80033d2:	e099      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033d4:	4b6f      	ldr	r3, [pc, #444]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d02d      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033e0:	4b6c      	ldr	r3, [pc, #432]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	08db      	lsrs	r3, r3, #3
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	4a6b      	ldr	r2, [pc, #428]	; (8003598 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
 80033f0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	ee07 3a90 	vmov	s15, r3
 80033f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800340a:	4b62      	ldr	r3, [pc, #392]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341a:	ed97 6a02 	vldr	s12, [r7, #8]
 800341e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800342a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800342e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003436:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800343a:	e087      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003446:	eddf 6a58 	vldr	s13, [pc, #352]	; 80035a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800344a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800344e:	4b51      	ldr	r3, [pc, #324]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003462:	eddf 5a50 	vldr	s11, [pc, #320]	; 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800346a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800346e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800347e:	e065      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80035ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800348e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003492:	4b40      	ldr	r3, [pc, #256]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034c2:	e043      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80035b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80034d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034d6:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003506:	e021      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003512:	eddf 6a26 	vldr	s13, [pc, #152]	; 80035ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8003516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800351a:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003522:	ee07 3a90 	vmov	s15, r3
 8003526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800352a:	ed97 6a02 	vldr	s12, [r7, #8]
 800352e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800353a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800353e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800354a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800354c:	4b11      	ldr	r3, [pc, #68]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	0a5b      	lsrs	r3, r3, #9
 8003552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003556:	3301      	adds	r3, #1
 8003558:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	ee07 3a90 	vmov	s15, r3
 8003560:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003564:	edd7 6a07 	vldr	s13, [r7, #28]
 8003568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800356c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003570:	ee17 3a90 	vmov	r3, s15
 8003574:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003576:	e005      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	61bb      	str	r3, [r7, #24]
    break;
 800357c:	e002      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800357e:	4b07      	ldr	r3, [pc, #28]	; (800359c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003580:	61bb      	str	r3, [r7, #24]
    break;
 8003582:	bf00      	nop
  }

  return sysclockfreq;
 8003584:	69bb      	ldr	r3, [r7, #24]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3724      	adds	r7, #36	; 0x24
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	58024400 	.word	0x58024400
 8003598:	03d09000 	.word	0x03d09000
 800359c:	003d0900 	.word	0x003d0900
 80035a0:	007a1200 	.word	0x007a1200
 80035a4:	46000000 	.word	0x46000000
 80035a8:	4c742400 	.word	0x4c742400
 80035ac:	4a742400 	.word	0x4a742400
 80035b0:	4af42400 	.word	0x4af42400

080035b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035ba:	f7ff fe81 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 80035be:	4602      	mov	r2, r0
 80035c0:	4b10      	ldr	r3, [pc, #64]	; (8003604 <HAL_RCC_GetHCLKFreq+0x50>)
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	490f      	ldr	r1, [pc, #60]	; (8003608 <HAL_RCC_GetHCLKFreq+0x54>)
 80035cc:	5ccb      	ldrb	r3, [r1, r3]
 80035ce:	f003 031f 	and.w	r3, r3, #31
 80035d2:	fa22 f303 	lsr.w	r3, r2, r3
 80035d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035d8:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <HAL_RCC_GetHCLKFreq+0x50>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	4a09      	ldr	r2, [pc, #36]	; (8003608 <HAL_RCC_GetHCLKFreq+0x54>)
 80035e2:	5cd3      	ldrb	r3, [r2, r3]
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	fa22 f303 	lsr.w	r3, r2, r3
 80035ee:	4a07      	ldr	r2, [pc, #28]	; (800360c <HAL_RCC_GetHCLKFreq+0x58>)
 80035f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035f2:	4a07      	ldr	r2, [pc, #28]	; (8003610 <HAL_RCC_GetHCLKFreq+0x5c>)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <HAL_RCC_GetHCLKFreq+0x58>)
 80035fa:	681b      	ldr	r3, [r3, #0]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	58024400 	.word	0x58024400
 8003608:	08009fc4 	.word	0x08009fc4
 800360c:	24000004 	.word	0x24000004
 8003610:	24000000 	.word	0x24000000

08003614 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800361c:	2300      	movs	r3, #0
 800361e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003620:	2300      	movs	r3, #0
 8003622:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d03f      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003634:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003638:	d02a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800363a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800363e:	d824      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003640:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003644:	d018      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800364a:	d81e      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003654:	d007      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003656:	e018      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003658:	4ba4      	ldr	r3, [pc, #656]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	4aa3      	ldr	r2, [pc, #652]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800365e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003662:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003664:	e015      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3304      	adds	r3, #4
 800366a:	2102      	movs	r1, #2
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fecb 	bl	8004408 <RCCEx_PLL2_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003676:	e00c      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3324      	adds	r3, #36	; 0x24
 800367c:	2102      	movs	r1, #2
 800367e:	4618      	mov	r0, r3
 8003680:	f000 ff74 	bl	800456c <RCCEx_PLL3_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003688:	e003      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	75fb      	strb	r3, [r7, #23]
      break;
 800368e:	e000      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003692:	7dfb      	ldrb	r3, [r7, #23]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d109      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003698:	4b94      	ldr	r3, [pc, #592]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800369a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a4:	4991      	ldr	r1, [pc, #580]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	650b      	str	r3, [r1, #80]	; 0x50
 80036aa:	e001      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ac:	7dfb      	ldrb	r3, [r7, #23]
 80036ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d03d      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d826      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80036c4:	a201      	add	r2, pc, #4	; (adr r2, 80036cc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80036c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ca:	bf00      	nop
 80036cc:	080036e1 	.word	0x080036e1
 80036d0:	080036ef 	.word	0x080036ef
 80036d4:	08003701 	.word	0x08003701
 80036d8:	08003719 	.word	0x08003719
 80036dc:	08003719 	.word	0x08003719
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e0:	4b82      	ldr	r3, [pc, #520]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	4a81      	ldr	r2, [pc, #516]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80036e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036ec:	e015      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3304      	adds	r3, #4
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fe87 	bl	8004408 <RCCEx_PLL2_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036fe:	e00c      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3324      	adds	r3, #36	; 0x24
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f000 ff30 	bl	800456c <RCCEx_PLL3_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003710:	e003      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	75fb      	strb	r3, [r7, #23]
      break;
 8003716:	e000      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003718:	bf00      	nop
    }

    if(ret == HAL_OK)
 800371a:	7dfb      	ldrb	r3, [r7, #23]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d109      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003720:	4b72      	ldr	r3, [pc, #456]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003724:	f023 0207 	bic.w	r2, r3, #7
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372c:	496f      	ldr	r1, [pc, #444]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800372e:	4313      	orrs	r3, r2
 8003730:	650b      	str	r3, [r1, #80]	; 0x50
 8003732:	e001      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003734:	7dfb      	ldrb	r3, [r7, #23]
 8003736:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003740:	2b00      	cmp	r3, #0
 8003742:	d051      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800374a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800374e:	d036      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003750:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003754:	d830      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003756:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800375a:	d032      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800375c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003760:	d82a      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003762:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003766:	d02e      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003768:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800376c:	d824      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800376e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003772:	d018      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003778:	d81e      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800377e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003782:	d007      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003784:	e018      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003786:	4b59      	ldr	r3, [pc, #356]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378a:	4a58      	ldr	r2, [pc, #352]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800378c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003790:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003792:	e019      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3304      	adds	r3, #4
 8003798:	2100      	movs	r1, #0
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fe34 	bl	8004408 <RCCEx_PLL2_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037a4:	e010      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3324      	adds	r3, #36	; 0x24
 80037aa:	2100      	movs	r1, #0
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fedd 	bl	800456c <RCCEx_PLL3_Config>
 80037b2:	4603      	mov	r3, r0
 80037b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037b6:	e007      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	75fb      	strb	r3, [r7, #23]
      break;
 80037bc:	e004      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80037be:	bf00      	nop
 80037c0:	e002      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80037c2:	bf00      	nop
 80037c4:	e000      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80037c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037ce:	4b47      	ldr	r3, [pc, #284]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80037d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037dc:	4943      	ldr	r1, [pc, #268]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	658b      	str	r3, [r1, #88]	; 0x58
 80037e2:	e001      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e4:	7dfb      	ldrb	r3, [r7, #23]
 80037e6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d051      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037fa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80037fe:	d036      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003800:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003804:	d830      	bhi.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003806:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800380a:	d032      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800380c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003810:	d82a      	bhi.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003812:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003816:	d02e      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003818:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800381c:	d824      	bhi.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800381e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003822:	d018      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003824:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003828:	d81e      	bhi.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800382e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003832:	d007      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003834:	e018      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003836:	4b2d      	ldr	r3, [pc, #180]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	4a2c      	ldr	r2, [pc, #176]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800383c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003840:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003842:	e019      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3304      	adds	r3, #4
 8003848:	2100      	movs	r1, #0
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fddc 	bl	8004408 <RCCEx_PLL2_Config>
 8003850:	4603      	mov	r3, r0
 8003852:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003854:	e010      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3324      	adds	r3, #36	; 0x24
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fe85 	bl	800456c <RCCEx_PLL3_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003866:	e007      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	75fb      	strb	r3, [r7, #23]
      break;
 800386c:	e004      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800386e:	bf00      	nop
 8003870:	e002      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003872:	bf00      	nop
 8003874:	e000      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003876:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003878:	7dfb      	ldrb	r3, [r7, #23]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10a      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800387e:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003882:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800388c:	4917      	ldr	r1, [pc, #92]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800388e:	4313      	orrs	r3, r2
 8003890:	658b      	str	r3, [r1, #88]	; 0x58
 8003892:	e001      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003894:	7dfb      	ldrb	r3, [r7, #23]
 8003896:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d035      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a8:	2b30      	cmp	r3, #48	; 0x30
 80038aa:	d01c      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80038ac:	2b30      	cmp	r3, #48	; 0x30
 80038ae:	d817      	bhi.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	d00c      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	d813      	bhi.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d019      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d10f      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c0:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	4a09      	ldr	r2, [pc, #36]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80038c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80038cc:	e011      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3304      	adds	r3, #4
 80038d2:	2102      	movs	r1, #2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fd97 	bl	8004408 <RCCEx_PLL2_Config>
 80038da:	4603      	mov	r3, r0
 80038dc:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80038de:	e008      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	75fb      	strb	r3, [r7, #23]
      break;
 80038e4:	e005      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 80038e6:	bf00      	nop
 80038e8:	e003      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80038ea:	bf00      	nop
 80038ec:	58024400 	.word	0x58024400
      break;
 80038f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80038f8:	4ba3      	ldr	r3, [pc, #652]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80038fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003904:	49a0      	ldr	r1, [pc, #640]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003906:	4313      	orrs	r3, r2
 8003908:	64cb      	str	r3, [r1, #76]	; 0x4c
 800390a:	e001      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390c:	7dfb      	ldrb	r3, [r7, #23]
 800390e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d047      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003924:	d030      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003926:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800392a:	d82a      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800392c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003930:	d02c      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003932:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003936:	d824      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800393c:	d018      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800393e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003942:	d81e      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800394c:	d007      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800394e:	e018      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003950:	4b8d      	ldr	r3, [pc, #564]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	4a8c      	ldr	r2, [pc, #560]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800395a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800395c:	e017      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3304      	adds	r3, #4
 8003962:	2100      	movs	r1, #0
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fd4f 	bl	8004408 <RCCEx_PLL2_Config>
 800396a:	4603      	mov	r3, r0
 800396c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800396e:	e00e      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3324      	adds	r3, #36	; 0x24
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fdf8 	bl	800456c <RCCEx_PLL3_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003980:	e005      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	75fb      	strb	r3, [r7, #23]
      break;
 8003986:	e002      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003988:	bf00      	nop
 800398a:	e000      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800398c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800398e:	7dfb      	ldrb	r3, [r7, #23]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d109      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003994:	4b7c      	ldr	r3, [pc, #496]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003998:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a0:	4979      	ldr	r1, [pc, #484]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	650b      	str	r3, [r1, #80]	; 0x50
 80039a6:	e001      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a8:	7dfb      	ldrb	r3, [r7, #23]
 80039aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d049      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c0:	d02e      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80039c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c6:	d828      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80039c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039cc:	d02a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80039ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039d2:	d822      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80039d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039d8:	d026      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80039da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039de:	d81c      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80039e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039e4:	d010      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80039e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039ea:	d816      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d01d      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80039f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f4:	d111      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3304      	adds	r3, #4
 80039fa:	2101      	movs	r1, #1
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fd03 	bl	8004408 <RCCEx_PLL2_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a06:	e012      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3324      	adds	r3, #36	; 0x24
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fdac 	bl	800456c <RCCEx_PLL3_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a18:	e009      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a1e:	e006      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a20:	bf00      	nop
 8003a22:	e004      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a24:	bf00      	nop
 8003a26:	e002      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a28:	bf00      	nop
 8003a2a:	e000      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d109      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a34:	4b54      	ldr	r3, [pc, #336]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a38:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a40:	4951      	ldr	r1, [pc, #324]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	650b      	str	r3, [r1, #80]	; 0x50
 8003a46:	e001      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
 8003a4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d04b      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a62:	d02e      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a68:	d828      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6e:	d02a      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a74:	d822      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a7a:	d026      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003a7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a80:	d81c      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a86:	d010      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a8c:	d816      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01d      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a96:	d111      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fcb2 	bl	8004408 <RCCEx_PLL2_Config>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003aa8:	e012      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3324      	adds	r3, #36	; 0x24
 8003aae:	2101      	movs	r1, #1
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fd5b 	bl	800456c <RCCEx_PLL3_Config>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003aba:	e009      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	75fb      	strb	r3, [r7, #23]
      break;
 8003ac0:	e006      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e004      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e002      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003aca:	bf00      	nop
 8003acc:	e000      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003ace:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ad0:	7dfb      	ldrb	r3, [r7, #23]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ad6:	4b2c      	ldr	r3, [pc, #176]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ada:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ae4:	4928      	ldr	r1, [pc, #160]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	658b      	str	r3, [r1, #88]	; 0x58
 8003aea:	e001      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
 8003aee:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d02f      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b04:	d00e      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b0a:	d814      	bhi.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d015      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003b10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b14:	d10f      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b16:	4b1c      	ldr	r3, [pc, #112]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	4a1b      	ldr	r2, [pc, #108]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b22:	e00c      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3304      	adds	r3, #4
 8003b28:	2101      	movs	r1, #1
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fc6c 	bl	8004408 <RCCEx_PLL2_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b34:	e003      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	75fb      	strb	r3, [r7, #23]
      break;
 8003b3a:	e000      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003b3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d109      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b44:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b48:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b50:	490d      	ldr	r1, [pc, #52]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	650b      	str	r3, [r1, #80]	; 0x50
 8003b56:	e001      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b58:	7dfb      	ldrb	r3, [r7, #23]
 8003b5a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d034      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d81d      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003b70:	a201      	add	r2, pc, #4	; (adr r2, 8003b78 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b76:	bf00      	nop
 8003b78:	08003bb3 	.word	0x08003bb3
 8003b7c:	08003b8d 	.word	0x08003b8d
 8003b80:	08003b9b 	.word	0x08003b9b
 8003b84:	08003bb3 	.word	0x08003bb3
 8003b88:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b8c:	4bb1      	ldr	r3, [pc, #708]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	4ab0      	ldr	r2, [pc, #704]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b98:	e00c      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	2102      	movs	r1, #2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fc31 	bl	8004408 <RCCEx_PLL2_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003baa:	e003      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	75fb      	strb	r3, [r7, #23]
      break;
 8003bb0:	e000      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8003bb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb4:	7dfb      	ldrb	r3, [r7, #23]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d109      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003bba:	4ba6      	ldr	r3, [pc, #664]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bbe:	f023 0203 	bic.w	r2, r3, #3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	49a3      	ldr	r1, [pc, #652]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003bcc:	e001      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bce:	7dfb      	ldrb	r3, [r7, #23]
 8003bd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 8086 	beq.w	8003cec <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be0:	4b9d      	ldr	r3, [pc, #628]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a9c      	ldr	r2, [pc, #624]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bec:	f7fc ffe4 	bl	8000bb8 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bf2:	e009      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf4:	f7fc ffe0 	bl	8000bb8 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	; 0x64
 8003c00:	d902      	bls.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	75fb      	strb	r3, [r7, #23]
        break;
 8003c06:	e005      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c08:	4b93      	ldr	r3, [pc, #588]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0ef      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d166      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c1a:	4b8e      	ldr	r3, [pc, #568]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c24:	4053      	eors	r3, r2
 8003c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d013      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c2e:	4b89      	ldr	r3, [pc, #548]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c36:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c38:	4b86      	ldr	r3, [pc, #536]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	4a85      	ldr	r2, [pc, #532]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c42:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c44:	4b83      	ldr	r3, [pc, #524]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	4a82      	ldr	r2, [pc, #520]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c50:	4a80      	ldr	r2, [pc, #512]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c60:	d115      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c62:	f7fc ffa9 	bl	8000bb8 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c68:	e00b      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6a:	f7fc ffa5 	bl	8000bb8 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d902      	bls.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	75fb      	strb	r3, [r7, #23]
            break;
 8003c80:	e005      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c82:	4b74      	ldr	r3, [pc, #464]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0ed      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8003c8e:	7dfb      	ldrb	r3, [r7, #23]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d126      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ca2:	d10d      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003ca4:	4b6b      	ldr	r3, [pc, #428]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cb2:	0919      	lsrs	r1, r3, #4
 8003cb4:	4b69      	ldr	r3, [pc, #420]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cb6:	400b      	ands	r3, r1
 8003cb8:	4966      	ldr	r1, [pc, #408]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	610b      	str	r3, [r1, #16]
 8003cbe:	e005      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003cc0:	4b64      	ldr	r3, [pc, #400]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	4a63      	ldr	r2, [pc, #396]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cc6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003cca:	6113      	str	r3, [r2, #16]
 8003ccc:	4b61      	ldr	r3, [pc, #388]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cda:	495e      	ldr	r1, [pc, #376]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	670b      	str	r3, [r1, #112]	; 0x70
 8003ce0:	e004      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ce2:	7dfb      	ldrb	r3, [r7, #23]
 8003ce4:	75bb      	strb	r3, [r7, #22]
 8003ce6:	e001      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d07e      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfc:	2b28      	cmp	r3, #40	; 0x28
 8003cfe:	d867      	bhi.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003d00:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003dd7 	.word	0x08003dd7
 8003d0c:	08003dd1 	.word	0x08003dd1
 8003d10:	08003dd1 	.word	0x08003dd1
 8003d14:	08003dd1 	.word	0x08003dd1
 8003d18:	08003dd1 	.word	0x08003dd1
 8003d1c:	08003dd1 	.word	0x08003dd1
 8003d20:	08003dd1 	.word	0x08003dd1
 8003d24:	08003dd1 	.word	0x08003dd1
 8003d28:	08003dad 	.word	0x08003dad
 8003d2c:	08003dd1 	.word	0x08003dd1
 8003d30:	08003dd1 	.word	0x08003dd1
 8003d34:	08003dd1 	.word	0x08003dd1
 8003d38:	08003dd1 	.word	0x08003dd1
 8003d3c:	08003dd1 	.word	0x08003dd1
 8003d40:	08003dd1 	.word	0x08003dd1
 8003d44:	08003dd1 	.word	0x08003dd1
 8003d48:	08003dbf 	.word	0x08003dbf
 8003d4c:	08003dd1 	.word	0x08003dd1
 8003d50:	08003dd1 	.word	0x08003dd1
 8003d54:	08003dd1 	.word	0x08003dd1
 8003d58:	08003dd1 	.word	0x08003dd1
 8003d5c:	08003dd1 	.word	0x08003dd1
 8003d60:	08003dd1 	.word	0x08003dd1
 8003d64:	08003dd1 	.word	0x08003dd1
 8003d68:	08003dd7 	.word	0x08003dd7
 8003d6c:	08003dd1 	.word	0x08003dd1
 8003d70:	08003dd1 	.word	0x08003dd1
 8003d74:	08003dd1 	.word	0x08003dd1
 8003d78:	08003dd1 	.word	0x08003dd1
 8003d7c:	08003dd1 	.word	0x08003dd1
 8003d80:	08003dd1 	.word	0x08003dd1
 8003d84:	08003dd1 	.word	0x08003dd1
 8003d88:	08003dd7 	.word	0x08003dd7
 8003d8c:	08003dd1 	.word	0x08003dd1
 8003d90:	08003dd1 	.word	0x08003dd1
 8003d94:	08003dd1 	.word	0x08003dd1
 8003d98:	08003dd1 	.word	0x08003dd1
 8003d9c:	08003dd1 	.word	0x08003dd1
 8003da0:	08003dd1 	.word	0x08003dd1
 8003da4:	08003dd1 	.word	0x08003dd1
 8003da8:	08003dd7 	.word	0x08003dd7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	2101      	movs	r1, #1
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fb28 	bl	8004408 <RCCEx_PLL2_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003dbc:	e00c      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3324      	adds	r3, #36	; 0x24
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fbd1 	bl	800456c <RCCEx_PLL3_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003dce:	e003      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd4:	e000      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003dd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd8:	7dfb      	ldrb	r3, [r7, #23]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003dde:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dea:	491a      	ldr	r1, [pc, #104]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	654b      	str	r3, [r1, #84]	; 0x54
 8003df0:	e001      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df2:	7dfb      	ldrb	r3, [r7, #23]
 8003df4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d03e      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	2b05      	cmp	r3, #5
 8003e08:	d820      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x838>
 8003e0a:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8003e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e10:	08003e61 	.word	0x08003e61
 8003e14:	08003e29 	.word	0x08003e29
 8003e18:	08003e3b 	.word	0x08003e3b
 8003e1c:	08003e61 	.word	0x08003e61
 8003e20:	08003e61 	.word	0x08003e61
 8003e24:	08003e61 	.word	0x08003e61
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 faea 	bl	8004408 <RCCEx_PLL2_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e38:	e013      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3324      	adds	r3, #36	; 0x24
 8003e3e:	2101      	movs	r1, #1
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 fb93 	bl	800456c <RCCEx_PLL3_Config>
 8003e46:	4603      	mov	r3, r0
 8003e48:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e50:	e007      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8003e52:	bf00      	nop
 8003e54:	58024400 	.word	0x58024400
 8003e58:	58024800 	.word	0x58024800
 8003e5c:	00ffffcf 	.word	0x00ffffcf
      break;
 8003e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d109      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e68:	4b9f      	ldr	r3, [pc, #636]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6c:	f023 0207 	bic.w	r2, r3, #7
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	499c      	ldr	r1, [pc, #624]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	654b      	str	r3, [r1, #84]	; 0x54
 8003e7a:	e001      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
 8003e7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d039      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e92:	2b05      	cmp	r3, #5
 8003e94:	d820      	bhi.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8003e96:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8003e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9c:	08003edf 	.word	0x08003edf
 8003ea0:	08003eb5 	.word	0x08003eb5
 8003ea4:	08003ec7 	.word	0x08003ec7
 8003ea8:	08003edf 	.word	0x08003edf
 8003eac:	08003edf 	.word	0x08003edf
 8003eb0:	08003edf 	.word	0x08003edf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	2101      	movs	r1, #1
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 faa4 	bl	8004408 <RCCEx_PLL2_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ec4:	e00c      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3324      	adds	r3, #36	; 0x24
 8003eca:	2101      	movs	r1, #1
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fb4d 	bl	800456c <RCCEx_PLL3_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ed6:	e003      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	75fb      	strb	r3, [r7, #23]
      break;
 8003edc:	e000      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8003ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee0:	7dfb      	ldrb	r3, [r7, #23]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10a      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ee6:	4b80      	ldr	r3, [pc, #512]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eea:	f023 0207 	bic.w	r2, r3, #7
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ef4:	497c      	ldr	r1, [pc, #496]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	658b      	str	r3, [r1, #88]	; 0x58
 8003efa:	e001      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
 8003efe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d04b      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f16:	d02e      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8003f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f1c:	d828      	bhi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f22:	d02a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f28:	d822      	bhi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f2e:	d026      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003f30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f34:	d81c      	bhi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f3a:	d010      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8003f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f40:	d816      	bhi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01d      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f4a:	d111      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	2100      	movs	r1, #0
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fa58 	bl	8004408 <RCCEx_PLL2_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f5c:	e012      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3324      	adds	r3, #36	; 0x24
 8003f62:	2102      	movs	r1, #2
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fb01 	bl	800456c <RCCEx_PLL3_Config>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f6e:	e009      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	75fb      	strb	r3, [r7, #23]
      break;
 8003f74:	e006      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f76:	bf00      	nop
 8003f78:	e004      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f7a:	bf00      	nop
 8003f7c:	e002      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f7e:	bf00      	nop
 8003f80:	e000      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f8a:	4b57      	ldr	r3, [pc, #348]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f98:	4953      	ldr	r1, [pc, #332]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	654b      	str	r3, [r1, #84]	; 0x54
 8003f9e:	e001      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
 8003fa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d04b      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fb6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fba:	d02e      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8003fbc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fc0:	d828      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc6:	d02a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fcc:	d822      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003fce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fd2:	d026      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003fd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fd8:	d81c      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fde:	d010      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8003fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe4:	d816      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01d      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fee:	d111      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fa06 	bl	8004408 <RCCEx_PLL2_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004000:	e012      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3324      	adds	r3, #36	; 0x24
 8004006:	2102      	movs	r1, #2
 8004008:	4618      	mov	r0, r3
 800400a:	f000 faaf 	bl	800456c <RCCEx_PLL3_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004012:	e009      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	75fb      	strb	r3, [r7, #23]
      break;
 8004018:	e006      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800401a:	bf00      	nop
 800401c:	e004      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800401e:	bf00      	nop
 8004020:	e002      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004022:	bf00      	nop
 8004024:	e000      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10a      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800402e:	4b2e      	ldr	r3, [pc, #184]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004032:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800403c:	492a      	ldr	r1, [pc, #168]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800403e:	4313      	orrs	r3, r2
 8004040:	658b      	str	r3, [r1, #88]	; 0x58
 8004042:	e001      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004044:	7dfb      	ldrb	r3, [r7, #23]
 8004046:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004050:	2b00      	cmp	r3, #0
 8004052:	d04d      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800405a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800405e:	d02e      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8004060:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004064:	d828      	bhi.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800406a:	d02a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800406c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004070:	d822      	bhi.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004072:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004076:	d026      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004078:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800407c:	d81c      	bhi.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800407e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004082:	d010      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8004084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004088:	d816      	bhi.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01d      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800408e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004092:	d111      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3304      	adds	r3, #4
 8004098:	2100      	movs	r1, #0
 800409a:	4618      	mov	r0, r3
 800409c:	f000 f9b4 	bl	8004408 <RCCEx_PLL2_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040a4:	e012      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3324      	adds	r3, #36	; 0x24
 80040aa:	2102      	movs	r1, #2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fa5d 	bl	800456c <RCCEx_PLL3_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040b6:	e009      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	75fb      	strb	r3, [r7, #23]
      break;
 80040bc:	e006      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80040be:	bf00      	nop
 80040c0:	e004      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80040c2:	bf00      	nop
 80040c4:	e002      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80040c6:	bf00      	nop
 80040c8:	e000      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80040ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040cc:	7dfb      	ldrb	r3, [r7, #23]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10c      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80040d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040e0:	4901      	ldr	r1, [pc, #4]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	658b      	str	r3, [r1, #88]	; 0x58
 80040e6:	e003      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80040e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
 80040ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d018      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004104:	d10a      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3324      	adds	r3, #36	; 0x24
 800410a:	2102      	movs	r1, #2
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fa2d 	bl	800456c <RCCEx_PLL3_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800411c:	4b8a      	ldr	r3, [pc, #552]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800411e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004120:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004128:	4987      	ldr	r1, [pc, #540]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800412a:	4313      	orrs	r3, r2
 800412c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0310 	and.w	r3, r3, #16
 8004136:	2b00      	cmp	r3, #0
 8004138:	d01a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004144:	d10a      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3324      	adds	r3, #36	; 0x24
 800414a:	2102      	movs	r1, #2
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fa0d 	bl	800456c <RCCEx_PLL3_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800415c:	4b7a      	ldr	r3, [pc, #488]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800415e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004160:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	4977      	ldr	r1, [pc, #476]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800416c:	4313      	orrs	r3, r2
 800416e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d034      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004182:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004186:	d01d      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004188:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800418c:	d817      	bhi.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004196:	d009      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004198:	e011      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3304      	adds	r3, #4
 800419e:	2100      	movs	r1, #0
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 f931 	bl	8004408 <RCCEx_PLL2_Config>
 80041a6:	4603      	mov	r3, r0
 80041a8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041aa:	e00c      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3324      	adds	r3, #36	; 0x24
 80041b0:	2102      	movs	r1, #2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f9da 	bl	800456c <RCCEx_PLL3_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041bc:	e003      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	75fb      	strb	r3, [r7, #23]
      break;
 80041c2:	e000      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80041c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041c6:	7dfb      	ldrb	r3, [r7, #23]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10a      	bne.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041cc:	4b5e      	ldr	r3, [pc, #376]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80041ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041da:	495b      	ldr	r1, [pc, #364]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	658b      	str	r3, [r1, #88]	; 0x58
 80041e0:	e001      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e2:	7dfb      	ldrb	r3, [r7, #23]
 80041e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d033      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041fc:	d01c      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80041fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004202:	d816      	bhi.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004208:	d003      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800420a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800420e:	d007      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004210:	e00f      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004212:	4b4d      	ldr	r3, [pc, #308]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	4a4c      	ldr	r2, [pc, #304]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800421c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800421e:	e00c      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3324      	adds	r3, #36	; 0x24
 8004224:	2101      	movs	r1, #1
 8004226:	4618      	mov	r0, r3
 8004228:	f000 f9a0 	bl	800456c <RCCEx_PLL3_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004230:	e003      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	75fb      	strb	r3, [r7, #23]
      break;
 8004236:	e000      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800423a:	7dfb      	ldrb	r3, [r7, #23]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004240:	4b41      	ldr	r3, [pc, #260]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004244:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800424e:	493e      	ldr	r1, [pc, #248]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004250:	4313      	orrs	r3, r2
 8004252:	654b      	str	r3, [r1, #84]	; 0x54
 8004254:	e001      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004256:	7dfb      	ldrb	r3, [r7, #23]
 8004258:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d029      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800426e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004272:	d007      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004274:	e00f      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004276:	4b34      	ldr	r3, [pc, #208]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	4a33      	ldr	r2, [pc, #204]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800427c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004280:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004282:	e00b      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3304      	adds	r3, #4
 8004288:	2102      	movs	r1, #2
 800428a:	4618      	mov	r0, r3
 800428c:	f000 f8bc 	bl	8004408 <RCCEx_PLL2_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004294:	e002      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	75fb      	strb	r3, [r7, #23]
      break;
 800429a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800429c:	7dfb      	ldrb	r3, [r7, #23]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042a2:	4b29      	ldr	r3, [pc, #164]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80042a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ae:	4926      	ldr	r1, [pc, #152]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042b4:	e001      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
 80042b8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3324      	adds	r3, #36	; 0x24
 80042ca:	2102      	movs	r1, #2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 f94d 	bl	800456c <RCCEx_PLL3_Config>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d033      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f0:	d017      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80042f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f6:	d811      	bhi.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80042f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042fc:	d013      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 80042fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004302:	d80b      	bhi.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004304:	2b00      	cmp	r3, #0
 8004306:	d010      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8004308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800430c:	d106      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800430e:	4b0e      	ldr	r3, [pc, #56]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004312:	4a0d      	ldr	r2, [pc, #52]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004318:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800431a:	e007      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	75fb      	strb	r3, [r7, #23]
      break;
 8004320:	e004      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004322:	bf00      	nop
 8004324:	e002      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004326:	bf00      	nop
 8004328:	e000      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800432a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10c      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004332:	4b05      	ldr	r3, [pc, #20]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004336:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800433e:	4902      	ldr	r1, [pc, #8]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004340:	4313      	orrs	r3, r2
 8004342:	654b      	str	r3, [r1, #84]	; 0x54
 8004344:	e004      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8004346:	bf00      	nop
 8004348:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434c:	7dfb      	ldrb	r3, [r7, #23]
 800434e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800435c:	4b29      	ldr	r3, [pc, #164]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800435e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004360:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004368:	4926      	ldr	r1, [pc, #152]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800436a:	4313      	orrs	r3, r2
 800436c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d008      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800437a:	4b22      	ldr	r3, [pc, #136]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800437c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004386:	491f      	ldr	r1, [pc, #124]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004388:	4313      	orrs	r3, r2
 800438a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00d      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004398:	4b1a      	ldr	r3, [pc, #104]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	4a19      	ldr	r2, [pc, #100]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800439e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043a2:	6113      	str	r3, [r2, #16]
 80043a4:	4b17      	ldr	r3, [pc, #92]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043ae:	4915      	ldr	r1, [pc, #84]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	da08      	bge.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80043bc:	4b11      	ldr	r3, [pc, #68]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c8:	490e      	ldr	r1, [pc, #56]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d009      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043da:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e8:	4906      	ldr	r1, [pc, #24]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80043ee:	7dbb      	ldrb	r3, [r7, #22]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	e000      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	58024400 	.word	0x58024400

08004408 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004416:	4b53      	ldr	r3, [pc, #332]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	2b03      	cmp	r3, #3
 8004420:	d101      	bne.n	8004426 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e099      	b.n	800455a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004426:	4b4f      	ldr	r3, [pc, #316]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a4e      	ldr	r2, [pc, #312]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 800442c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004432:	f7fc fbc1 	bl	8000bb8 <HAL_GetTick>
 8004436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004438:	e008      	b.n	800444c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800443a:	f7fc fbbd 	bl	8000bb8 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e086      	b.n	800455a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800444c:	4b45      	ldr	r3, [pc, #276]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1f0      	bne.n	800443a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004458:	4b42      	ldr	r3, [pc, #264]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 800445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	031b      	lsls	r3, r3, #12
 8004466:	493f      	ldr	r1, [pc, #252]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 8004468:	4313      	orrs	r3, r2
 800446a:	628b      	str	r3, [r1, #40]	; 0x28
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	3b01      	subs	r3, #1
 8004472:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	3b01      	subs	r3, #1
 800447c:	025b      	lsls	r3, r3, #9
 800447e:	b29b      	uxth	r3, r3
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	3b01      	subs	r3, #1
 8004488:	041b      	lsls	r3, r3, #16
 800448a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	3b01      	subs	r3, #1
 8004496:	061b      	lsls	r3, r3, #24
 8004498:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800449c:	4931      	ldr	r1, [pc, #196]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80044a2:	4b30      	ldr	r3, [pc, #192]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	492d      	ldr	r1, [pc, #180]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80044b4:	4b2b      	ldr	r3, [pc, #172]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	f023 0220 	bic.w	r2, r3, #32
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	4928      	ldr	r1, [pc, #160]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80044c6:	4b27      	ldr	r3, [pc, #156]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 80044c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ca:	4a26      	ldr	r2, [pc, #152]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 80044cc:	f023 0310 	bic.w	r3, r3, #16
 80044d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80044d2:	4b24      	ldr	r3, [pc, #144]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 80044d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044d6:	4b24      	ldr	r3, [pc, #144]	; (8004568 <RCCEx_PLL2_Config+0x160>)
 80044d8:	4013      	ands	r3, r2
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	69d2      	ldr	r2, [r2, #28]
 80044de:	00d2      	lsls	r2, r2, #3
 80044e0:	4920      	ldr	r1, [pc, #128]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80044e6:	4b1f      	ldr	r3, [pc, #124]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	4a1e      	ldr	r2, [pc, #120]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 80044ec:	f043 0310 	orr.w	r3, r3, #16
 80044f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d106      	bne.n	8004506 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80044f8:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	4a19      	ldr	r2, [pc, #100]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 80044fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004502:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004504:	e00f      	b.n	8004526 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d106      	bne.n	800451a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800450c:	4b15      	ldr	r3, [pc, #84]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	4a14      	ldr	r2, [pc, #80]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 8004512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004516:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004518:	e005      	b.n	8004526 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800451a:	4b12      	ldr	r3, [pc, #72]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	4a11      	ldr	r2, [pc, #68]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 8004520:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004524:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004526:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a0e      	ldr	r2, [pc, #56]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 800452c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004532:	f7fc fb41 	bl	8000bb8 <HAL_GetTick>
 8004536:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004538:	e008      	b.n	800454c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800453a:	f7fc fb3d 	bl	8000bb8 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e006      	b.n	800455a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800454c:	4b05      	ldr	r3, [pc, #20]	; (8004564 <RCCEx_PLL2_Config+0x15c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f0      	beq.n	800453a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004558:	7bfb      	ldrb	r3, [r7, #15]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	58024400 	.word	0x58024400
 8004568:	ffff0007 	.word	0xffff0007

0800456c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800457a:	4b53      	ldr	r3, [pc, #332]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 800457c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	2b03      	cmp	r3, #3
 8004584:	d101      	bne.n	800458a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e099      	b.n	80046be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800458a:	4b4f      	ldr	r3, [pc, #316]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a4e      	ldr	r2, [pc, #312]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 8004590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004596:	f7fc fb0f 	bl	8000bb8 <HAL_GetTick>
 800459a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800459c:	e008      	b.n	80045b0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800459e:	f7fc fb0b 	bl	8000bb8 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e086      	b.n	80046be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045b0:	4b45      	ldr	r3, [pc, #276]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f0      	bne.n	800459e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80045bc:	4b42      	ldr	r3, [pc, #264]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	051b      	lsls	r3, r3, #20
 80045ca:	493f      	ldr	r1, [pc, #252]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	628b      	str	r3, [r1, #40]	; 0x28
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	3b01      	subs	r3, #1
 80045e0:	025b      	lsls	r3, r3, #9
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	041b      	lsls	r3, r3, #16
 80045ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	061b      	lsls	r3, r3, #24
 80045fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004600:	4931      	ldr	r1, [pc, #196]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 8004602:	4313      	orrs	r3, r2
 8004604:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004606:	4b30      	ldr	r3, [pc, #192]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	492d      	ldr	r1, [pc, #180]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 8004614:	4313      	orrs	r3, r2
 8004616:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004618:	4b2b      	ldr	r3, [pc, #172]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	4928      	ldr	r1, [pc, #160]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 8004626:	4313      	orrs	r3, r2
 8004628:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800462a:	4b27      	ldr	r3, [pc, #156]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	4a26      	ldr	r2, [pc, #152]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 8004630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004634:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004636:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 8004638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800463a:	4b24      	ldr	r3, [pc, #144]	; (80046cc <RCCEx_PLL3_Config+0x160>)
 800463c:	4013      	ands	r3, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	69d2      	ldr	r2, [r2, #28]
 8004642:	00d2      	lsls	r2, r2, #3
 8004644:	4920      	ldr	r1, [pc, #128]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 8004646:	4313      	orrs	r3, r2
 8004648:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800464a:	4b1f      	ldr	r3, [pc, #124]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	4a1e      	ldr	r2, [pc, #120]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 8004650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004654:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d106      	bne.n	800466a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800465c:	4b1a      	ldr	r3, [pc, #104]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	4a19      	ldr	r2, [pc, #100]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 8004662:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004666:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004668:	e00f      	b.n	800468a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d106      	bne.n	800467e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004670:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	4a14      	ldr	r2, [pc, #80]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 8004676:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800467a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800467c:	e005      	b.n	800468a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800467e:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	4a11      	ldr	r2, [pc, #68]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 8004684:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004688:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800468a:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a0e      	ldr	r2, [pc, #56]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 8004690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004696:	f7fc fa8f 	bl	8000bb8 <HAL_GetTick>
 800469a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800469c:	e008      	b.n	80046b0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800469e:	f7fc fa8b 	bl	8000bb8 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e006      	b.n	80046be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046b0:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <RCCEx_PLL3_Config+0x15c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0f0      	beq.n	800469e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	58024400 	.word	0x58024400
 80046cc:	ffff0007 	.word	0xffff0007

080046d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046d0:	b084      	sub	sp, #16
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	f107 001c 	add.w	r0, r7, #28
 80046de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d120      	bne.n	800472a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	4b2a      	ldr	r3, [pc, #168]	; (80047a4 <USB_CoreInit+0xd4>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800470c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800470e:	2b01      	cmp	r3, #1
 8004710:	d105      	bne.n	800471e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f001 fc04 	bl	8005f2c <USB_CoreReset>
 8004724:	4603      	mov	r3, r0
 8004726:	73fb      	strb	r3, [r7, #15]
 8004728:	e01a      	b.n	8004760 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f001 fbf8 	bl	8005f2c <USB_CoreReset>
 800473c:	4603      	mov	r3, r0
 800473e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	639a      	str	r2, [r3, #56]	; 0x38
 8004752:	e005      	b.n	8004760 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004758:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	2b01      	cmp	r3, #1
 8004764:	d116      	bne.n	8004794 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476a:	b29a      	uxth	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004774:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <USB_CoreInit+0xd8>)
 8004776:	4313      	orrs	r3, r2
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f043 0206 	orr.w	r2, r3, #6
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f043 0220 	orr.w	r2, r3, #32
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004794:	7bfb      	ldrb	r3, [r7, #15]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047a0:	b004      	add	sp, #16
 80047a2:	4770      	bx	lr
 80047a4:	ffbdffbf 	.word	0xffbdffbf
 80047a8:	03ee0000 	.word	0x03ee0000

080047ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	4613      	mov	r3, r2
 80047b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d165      	bne.n	800488c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4a41      	ldr	r2, [pc, #260]	; (80048c8 <USB_SetTurnaroundTime+0x11c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d906      	bls.n	80047d6 <USB_SetTurnaroundTime+0x2a>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4a40      	ldr	r2, [pc, #256]	; (80048cc <USB_SetTurnaroundTime+0x120>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d202      	bcs.n	80047d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80047d0:	230f      	movs	r3, #15
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	e062      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	4a3c      	ldr	r2, [pc, #240]	; (80048cc <USB_SetTurnaroundTime+0x120>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d306      	bcc.n	80047ec <USB_SetTurnaroundTime+0x40>
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4a3b      	ldr	r2, [pc, #236]	; (80048d0 <USB_SetTurnaroundTime+0x124>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d202      	bcs.n	80047ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80047e6:	230e      	movs	r3, #14
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	e057      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	4a38      	ldr	r2, [pc, #224]	; (80048d0 <USB_SetTurnaroundTime+0x124>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d306      	bcc.n	8004802 <USB_SetTurnaroundTime+0x56>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4a37      	ldr	r2, [pc, #220]	; (80048d4 <USB_SetTurnaroundTime+0x128>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d202      	bcs.n	8004802 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80047fc:	230d      	movs	r3, #13
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	e04c      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4a33      	ldr	r2, [pc, #204]	; (80048d4 <USB_SetTurnaroundTime+0x128>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d306      	bcc.n	8004818 <USB_SetTurnaroundTime+0x6c>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	4a32      	ldr	r2, [pc, #200]	; (80048d8 <USB_SetTurnaroundTime+0x12c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d802      	bhi.n	8004818 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004812:	230c      	movs	r3, #12
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	e041      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4a2f      	ldr	r2, [pc, #188]	; (80048d8 <USB_SetTurnaroundTime+0x12c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d906      	bls.n	800482e <USB_SetTurnaroundTime+0x82>
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4a2e      	ldr	r2, [pc, #184]	; (80048dc <USB_SetTurnaroundTime+0x130>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d802      	bhi.n	800482e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004828:	230b      	movs	r3, #11
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	e036      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	4a2a      	ldr	r2, [pc, #168]	; (80048dc <USB_SetTurnaroundTime+0x130>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d906      	bls.n	8004844 <USB_SetTurnaroundTime+0x98>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4a29      	ldr	r2, [pc, #164]	; (80048e0 <USB_SetTurnaroundTime+0x134>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d802      	bhi.n	8004844 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800483e:	230a      	movs	r3, #10
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	e02b      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4a26      	ldr	r2, [pc, #152]	; (80048e0 <USB_SetTurnaroundTime+0x134>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d906      	bls.n	800485a <USB_SetTurnaroundTime+0xae>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4a25      	ldr	r2, [pc, #148]	; (80048e4 <USB_SetTurnaroundTime+0x138>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d202      	bcs.n	800485a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004854:	2309      	movs	r3, #9
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	e020      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	4a21      	ldr	r2, [pc, #132]	; (80048e4 <USB_SetTurnaroundTime+0x138>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d306      	bcc.n	8004870 <USB_SetTurnaroundTime+0xc4>
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	4a20      	ldr	r2, [pc, #128]	; (80048e8 <USB_SetTurnaroundTime+0x13c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d802      	bhi.n	8004870 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800486a:	2308      	movs	r3, #8
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	e015      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4a1d      	ldr	r2, [pc, #116]	; (80048e8 <USB_SetTurnaroundTime+0x13c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d906      	bls.n	8004886 <USB_SetTurnaroundTime+0xda>
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4a1c      	ldr	r2, [pc, #112]	; (80048ec <USB_SetTurnaroundTime+0x140>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d202      	bcs.n	8004886 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004880:	2307      	movs	r3, #7
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	e00a      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004886:	2306      	movs	r3, #6
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	e007      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d102      	bne.n	8004898 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004892:	2309      	movs	r3, #9
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	e001      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004898:	2309      	movs	r3, #9
 800489a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	029b      	lsls	r3, r3, #10
 80048b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80048b4:	431a      	orrs	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	00d8acbf 	.word	0x00d8acbf
 80048cc:	00e4e1c0 	.word	0x00e4e1c0
 80048d0:	00f42400 	.word	0x00f42400
 80048d4:	01067380 	.word	0x01067380
 80048d8:	011a499f 	.word	0x011a499f
 80048dc:	01312cff 	.word	0x01312cff
 80048e0:	014ca43f 	.word	0x014ca43f
 80048e4:	016e3600 	.word	0x016e3600
 80048e8:	01a6ab1f 	.word	0x01a6ab1f
 80048ec:	01e84800 	.word	0x01e84800

080048f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f043 0201 	orr.w	r2, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f023 0201 	bic.w	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d115      	bne.n	8004982 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004962:	2001      	movs	r0, #1
 8004964:	f7fc f934 	bl	8000bd0 <HAL_Delay>
      ms++;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3301      	adds	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f001 fa4b 	bl	8005e0a <USB_GetMode>
 8004974:	4603      	mov	r3, r0
 8004976:	2b01      	cmp	r3, #1
 8004978:	d01e      	beq.n	80049b8 <USB_SetCurrentMode+0x84>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b31      	cmp	r3, #49	; 0x31
 800497e:	d9f0      	bls.n	8004962 <USB_SetCurrentMode+0x2e>
 8004980:	e01a      	b.n	80049b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004982:	78fb      	ldrb	r3, [r7, #3]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d115      	bne.n	80049b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004994:	2001      	movs	r0, #1
 8004996:	f7fc f91b 	bl	8000bd0 <HAL_Delay>
      ms++;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3301      	adds	r3, #1
 800499e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f001 fa32 	bl	8005e0a <USB_GetMode>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <USB_SetCurrentMode+0x84>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b31      	cmp	r3, #49	; 0x31
 80049b0:	d9f0      	bls.n	8004994 <USB_SetCurrentMode+0x60>
 80049b2:	e001      	b.n	80049b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e005      	b.n	80049c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b32      	cmp	r3, #50	; 0x32
 80049bc:	d101      	bne.n	80049c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049cc:	b084      	sub	sp, #16
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b086      	sub	sp, #24
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80049da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049e6:	2300      	movs	r3, #0
 80049e8:	613b      	str	r3, [r7, #16]
 80049ea:	e009      	b.n	8004a00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	3340      	adds	r3, #64	; 0x40
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	2200      	movs	r2, #0
 80049f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	3301      	adds	r3, #1
 80049fe:	613b      	str	r3, [r7, #16]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	2b0e      	cmp	r3, #14
 8004a04:	d9f2      	bls.n	80049ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d11c      	bne.n	8004a46 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a1a:	f043 0302 	orr.w	r3, r3, #2
 8004a1e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	e005      	b.n	8004a52 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a58:	461a      	mov	r2, r3
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a64:	4619      	mov	r1, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	680b      	ldr	r3, [r1, #0]
 8004a70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d10c      	bne.n	8004a92 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d104      	bne.n	8004a88 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a7e:	2100      	movs	r1, #0
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f965 	bl	8004d50 <USB_SetDevSpeed>
 8004a86:	e008      	b.n	8004a9a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a88:	2101      	movs	r1, #1
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f960 	bl	8004d50 <USB_SetDevSpeed>
 8004a90:	e003      	b.n	8004a9a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a92:	2103      	movs	r1, #3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f95b 	bl	8004d50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a9a:	2110      	movs	r1, #16
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f8f3 	bl	8004c88 <USB_FlushTxFifo>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f91f 	bl	8004cf0 <USB_FlushRxFifo>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ace:	461a      	mov	r2, r3
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ada:	461a      	mov	r2, r3
 8004adc:	2300      	movs	r3, #0
 8004ade:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	e043      	b.n	8004b6e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004af8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004afc:	d118      	bne.n	8004b30 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10a      	bne.n	8004b1a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b10:	461a      	mov	r2, r3
 8004b12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	e013      	b.n	8004b42 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b26:	461a      	mov	r2, r3
 8004b28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	e008      	b.n	8004b42 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	2300      	movs	r3, #0
 8004b40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4e:	461a      	mov	r2, r3
 8004b50:	2300      	movs	r3, #0
 8004b52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b60:	461a      	mov	r2, r3
 8004b62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	613b      	str	r3, [r7, #16]
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d3b7      	bcc.n	8004ae6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b76:	2300      	movs	r3, #0
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	e043      	b.n	8004c04 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b92:	d118      	bne.n	8004bc6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10a      	bne.n	8004bb0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	e013      	b.n	8004bd8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	e008      	b.n	8004bd8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be4:	461a      	mov	r2, r3
 8004be6:	2300      	movs	r3, #0
 8004be8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	3301      	adds	r3, #1
 8004c02:	613b      	str	r3, [r7, #16]
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d3b7      	bcc.n	8004b7c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d105      	bne.n	8004c40 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	f043 0210 	orr.w	r2, r3, #16
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699a      	ldr	r2, [r3, #24]
 8004c44:	4b0e      	ldr	r3, [pc, #56]	; (8004c80 <USB_DevInit+0x2b4>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	f043 0208 	orr.w	r2, r3, #8
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d105      	bne.n	8004c70 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699a      	ldr	r2, [r3, #24]
 8004c68:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <USB_DevInit+0x2b8>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c7c:	b004      	add	sp, #16
 8004c7e:	4770      	bx	lr
 8004c80:	803c3800 	.word	0x803c3800
 8004c84:	40000004 	.word	0x40000004

08004c88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4a13      	ldr	r2, [pc, #76]	; (8004cec <USB_FlushTxFifo+0x64>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d901      	bls.n	8004ca8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e01b      	b.n	8004ce0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	daf2      	bge.n	8004c96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	019b      	lsls	r3, r3, #6
 8004cb8:	f043 0220 	orr.w	r2, r3, #32
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4a08      	ldr	r2, [pc, #32]	; (8004cec <USB_FlushTxFifo+0x64>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d901      	bls.n	8004cd2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e006      	b.n	8004ce0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b20      	cmp	r3, #32
 8004cdc:	d0f0      	beq.n	8004cc0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	00030d40 	.word	0x00030d40

08004cf0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4a11      	ldr	r2, [pc, #68]	; (8004d4c <USB_FlushRxFifo+0x5c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d901      	bls.n	8004d0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e018      	b.n	8004d40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	daf2      	bge.n	8004cfc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2210      	movs	r2, #16
 8004d1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3301      	adds	r3, #1
 8004d24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4a08      	ldr	r2, [pc, #32]	; (8004d4c <USB_FlushRxFifo+0x5c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e006      	b.n	8004d40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f003 0310 	and.w	r3, r3, #16
 8004d3a:	2b10      	cmp	r3, #16
 8004d3c:	d0f0      	beq.n	8004d20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	00030d40 	.word	0x00030d40

08004d50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	78fb      	ldrb	r3, [r7, #3]
 8004d6a:	68f9      	ldr	r1, [r7, #12]
 8004d6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d70:	4313      	orrs	r3, r2
 8004d72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b087      	sub	sp, #28
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 0306 	and.w	r3, r3, #6
 8004d9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d102      	bne.n	8004da8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004da2:	2300      	movs	r3, #0
 8004da4:	75fb      	strb	r3, [r7, #23]
 8004da6:	e00a      	b.n	8004dbe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d002      	beq.n	8004db4 <USB_GetDevSpeed+0x32>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2b06      	cmp	r3, #6
 8004db2:	d102      	bne.n	8004dba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004db4:	2302      	movs	r3, #2
 8004db6:	75fb      	strb	r3, [r7, #23]
 8004db8:	e001      	b.n	8004dbe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004dba:	230f      	movs	r3, #15
 8004dbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	785b      	ldrb	r3, [r3, #1]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d139      	bne.n	8004e5c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dee:	69da      	ldr	r2, [r3, #28]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	2101      	movs	r1, #1
 8004dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	68f9      	ldr	r1, [r7, #12]
 8004e02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d153      	bne.n	8004ec8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	791b      	ldrb	r3, [r3, #4]
 8004e3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	059b      	lsls	r3, r3, #22
 8004e42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e44:	431a      	orrs	r2, r3
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	0159      	lsls	r1, r3, #5
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	440b      	add	r3, r1
 8004e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e52:	4619      	mov	r1, r3
 8004e54:	4b20      	ldr	r3, [pc, #128]	; (8004ed8 <USB_ActivateEndpoint+0x10c>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	600b      	str	r3, [r1, #0]
 8004e5a:	e035      	b.n	8004ec8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e62:	69da      	ldr	r2, [r3, #28]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e72:	041b      	lsls	r3, r3, #16
 8004e74:	68f9      	ldr	r1, [r7, #12]
 8004e76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d119      	bne.n	8004ec8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	791b      	ldrb	r3, [r3, #4]
 8004eae:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	0159      	lsls	r1, r3, #5
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	440b      	add	r3, r1
 8004ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <USB_ActivateEndpoint+0x10c>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	10008000 	.word	0x10008000

08004edc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	785b      	ldrb	r3, [r3, #1]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d161      	bne.n	8004fbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f0e:	d11f      	bne.n	8004f50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	0151      	lsls	r1, r2, #5
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	440a      	add	r2, r1
 8004f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	0151      	lsls	r1, r2, #5
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	440a      	add	r2, r1
 8004f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	2101      	movs	r1, #1
 8004f62:	fa01 f303 	lsl.w	r3, r1, r3
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	68f9      	ldr	r1, [r7, #12]
 8004f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f70:	4013      	ands	r3, r2
 8004f72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7a:	69da      	ldr	r2, [r3, #28]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	f003 030f 	and.w	r3, r3, #15
 8004f84:	2101      	movs	r1, #1
 8004f86:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	68f9      	ldr	r1, [r7, #12]
 8004f90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f94:	4013      	ands	r3, r2
 8004f96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	0159      	lsls	r1, r3, #5
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	440b      	add	r3, r1
 8004fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4b35      	ldr	r3, [pc, #212]	; (800508c <USB_DeactivateEndpoint+0x1b0>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	600b      	str	r3, [r1, #0]
 8004fba:	e060      	b.n	800507e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fd2:	d11f      	bne.n	8005014 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	0151      	lsls	r1, r2, #5
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	440a      	add	r2, r1
 8004fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ff2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	0151      	lsls	r1, r2, #5
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	440a      	add	r2, r1
 800500a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800500e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005012:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	f003 030f 	and.w	r3, r3, #15
 8005024:	2101      	movs	r1, #1
 8005026:	fa01 f303 	lsl.w	r3, r1, r3
 800502a:	041b      	lsls	r3, r3, #16
 800502c:	43db      	mvns	r3, r3
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005034:	4013      	ands	r3, r2
 8005036:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503e:	69da      	ldr	r2, [r3, #28]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	2101      	movs	r1, #1
 800504a:	fa01 f303 	lsl.w	r3, r1, r3
 800504e:	041b      	lsls	r3, r3, #16
 8005050:	43db      	mvns	r3, r3
 8005052:	68f9      	ldr	r1, [r7, #12]
 8005054:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005058:	4013      	ands	r3, r2
 800505a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	0159      	lsls	r1, r3, #5
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	440b      	add	r3, r1
 8005072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005076:	4619      	mov	r1, r3
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <USB_DeactivateEndpoint+0x1b4>)
 800507a:	4013      	ands	r3, r2
 800507c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	ec337800 	.word	0xec337800
 8005090:	eff37800 	.word	0xeff37800

08005094 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08a      	sub	sp, #40	; 0x28
 8005098:	af02      	add	r7, sp, #8
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	4613      	mov	r3, r2
 80050a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	785b      	ldrb	r3, [r3, #1]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	f040 8163 	bne.w	800537c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d132      	bne.n	8005124 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ca:	691a      	ldr	r2, [r3, #16]
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	0159      	lsls	r1, r3, #5
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	440b      	add	r3, r1
 80050d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d8:	4619      	mov	r1, r3
 80050da:	4ba5      	ldr	r3, [pc, #660]	; (8005370 <USB_EPStartXfer+0x2dc>)
 80050dc:	4013      	ands	r3, r2
 80050de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	0151      	lsls	r1, r2, #5
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	440a      	add	r2, r1
 80050f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	0159      	lsls	r1, r3, #5
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	440b      	add	r3, r1
 8005116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511a:	4619      	mov	r1, r3
 800511c:	4b95      	ldr	r3, [pc, #596]	; (8005374 <USB_EPStartXfer+0x2e0>)
 800511e:	4013      	ands	r3, r2
 8005120:	610b      	str	r3, [r1, #16]
 8005122:	e074      	b.n	800520e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005130:	691a      	ldr	r2, [r3, #16]
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	0159      	lsls	r1, r3, #5
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	440b      	add	r3, r1
 800513a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513e:	4619      	mov	r1, r3
 8005140:	4b8c      	ldr	r3, [pc, #560]	; (8005374 <USB_EPStartXfer+0x2e0>)
 8005142:	4013      	ands	r3, r2
 8005144:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	0159      	lsls	r1, r3, #5
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	440b      	add	r3, r1
 800515c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005160:	4619      	mov	r1, r3
 8005162:	4b83      	ldr	r3, [pc, #524]	; (8005370 <USB_EPStartXfer+0x2dc>)
 8005164:	4013      	ands	r3, r2
 8005166:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005174:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	6999      	ldr	r1, [r3, #24]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	440b      	add	r3, r1
 8005180:	1e59      	subs	r1, r3, #1
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	fbb1 f3f3 	udiv	r3, r1, r3
 800518a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800518c:	4b7a      	ldr	r3, [pc, #488]	; (8005378 <USB_EPStartXfer+0x2e4>)
 800518e:	400b      	ands	r3, r1
 8005190:	69b9      	ldr	r1, [r7, #24]
 8005192:	0148      	lsls	r0, r1, #5
 8005194:	69f9      	ldr	r1, [r7, #28]
 8005196:	4401      	add	r1, r0
 8005198:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800519c:	4313      	orrs	r3, r2
 800519e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ac:	691a      	ldr	r2, [r3, #16]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b6:	69b9      	ldr	r1, [r7, #24]
 80051b8:	0148      	lsls	r0, r1, #5
 80051ba:	69f9      	ldr	r1, [r7, #28]
 80051bc:	4401      	add	r1, r0
 80051be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051c2:	4313      	orrs	r3, r2
 80051c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	791b      	ldrb	r3, [r3, #4]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d11f      	bne.n	800520e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	0151      	lsls	r1, r2, #5
 80051e0:	69fa      	ldr	r2, [r7, #28]
 80051e2:	440a      	add	r2, r1
 80051e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80051ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	0151      	lsls	r1, r2, #5
 8005200:	69fa      	ldr	r2, [r7, #28]
 8005202:	440a      	add	r2, r1
 8005204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005208:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800520c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d14b      	bne.n	80052ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d009      	beq.n	8005230 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005228:	461a      	mov	r2, r3
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	791b      	ldrb	r3, [r3, #4]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d128      	bne.n	800528a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d110      	bne.n	800526a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	440a      	add	r2, r1
 800525e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005262:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	e00f      	b.n	800528a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	69fa      	ldr	r2, [r7, #28]
 800527e:	440a      	add	r2, r1
 8005280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005288:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	0151      	lsls	r1, r2, #5
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	440a      	add	r2, r1
 80052a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	e137      	b.n	800551c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	0151      	lsls	r1, r2, #5
 80052be:	69fa      	ldr	r2, [r7, #28]
 80052c0:	440a      	add	r2, r1
 80052c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	791b      	ldrb	r3, [r3, #4]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d015      	beq.n	8005300 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 811f 	beq.w	800551c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	2101      	movs	r1, #1
 80052f0:	fa01 f303 	lsl.w	r3, r1, r3
 80052f4:	69f9      	ldr	r1, [r7, #28]
 80052f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052fa:	4313      	orrs	r3, r2
 80052fc:	634b      	str	r3, [r1, #52]	; 0x34
 80052fe:	e10d      	b.n	800551c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d110      	bne.n	8005332 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	0151      	lsls	r1, r2, #5
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	440a      	add	r2, r1
 8005326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800532a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	e00f      	b.n	8005352 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	0151      	lsls	r1, r2, #5
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	440a      	add	r2, r1
 8005348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800534c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005350:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	6919      	ldr	r1, [r3, #16]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	781a      	ldrb	r2, [r3, #0]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	b298      	uxth	r0, r3
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	4603      	mov	r3, r0
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 faea 	bl	8005940 <USB_WritePacket>
 800536c:	e0d6      	b.n	800551c <USB_EPStartXfer+0x488>
 800536e:	bf00      	nop
 8005370:	e007ffff 	.word	0xe007ffff
 8005374:	fff80000 	.word	0xfff80000
 8005378:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005388:	691a      	ldr	r2, [r3, #16]
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	0159      	lsls	r1, r3, #5
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	440b      	add	r3, r1
 8005392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005396:	4619      	mov	r1, r3
 8005398:	4b63      	ldr	r3, [pc, #396]	; (8005528 <USB_EPStartXfer+0x494>)
 800539a:	4013      	ands	r3, r2
 800539c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	0159      	lsls	r1, r3, #5
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	440b      	add	r3, r1
 80053b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b8:	4619      	mov	r1, r3
 80053ba:	4b5c      	ldr	r3, [pc, #368]	; (800552c <USB_EPStartXfer+0x498>)
 80053bc:	4013      	ands	r3, r2
 80053be:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d123      	bne.n	8005410 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d4:	691a      	ldr	r2, [r3, #16]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053de:	69b9      	ldr	r1, [r7, #24]
 80053e0:	0148      	lsls	r0, r1, #5
 80053e2:	69f9      	ldr	r1, [r7, #28]
 80053e4:	4401      	add	r1, r0
 80053e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053ea:	4313      	orrs	r3, r2
 80053ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	0151      	lsls	r1, r2, #5
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	440a      	add	r2, r1
 8005404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005408:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800540c:	6113      	str	r3, [r2, #16]
 800540e:	e037      	b.n	8005480 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	699a      	ldr	r2, [r3, #24]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	4413      	add	r3, r2
 800541a:	1e5a      	subs	r2, r3, #1
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	fbb2 f3f3 	udiv	r3, r2, r3
 8005424:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	8afa      	ldrh	r2, [r7, #22]
 800542c:	fb03 f202 	mul.w	r2, r3, r2
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	8afb      	ldrh	r3, [r7, #22]
 8005444:	04d9      	lsls	r1, r3, #19
 8005446:	4b3a      	ldr	r3, [pc, #232]	; (8005530 <USB_EPStartXfer+0x49c>)
 8005448:	400b      	ands	r3, r1
 800544a:	69b9      	ldr	r1, [r7, #24]
 800544c:	0148      	lsls	r0, r1, #5
 800544e:	69f9      	ldr	r1, [r7, #28]
 8005450:	4401      	add	r1, r0
 8005452:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005456:	4313      	orrs	r3, r2
 8005458:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005470:	69b9      	ldr	r1, [r7, #24]
 8005472:	0148      	lsls	r0, r1, #5
 8005474:	69f9      	ldr	r1, [r7, #28]
 8005476:	4401      	add	r1, r0
 8005478:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800547c:	4313      	orrs	r3, r2
 800547e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005480:	79fb      	ldrb	r3, [r7, #7]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d10d      	bne.n	80054a2 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d009      	beq.n	80054a2 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	6919      	ldr	r1, [r3, #16]
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549e:	460a      	mov	r2, r1
 80054a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	791b      	ldrb	r3, [r3, #4]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d128      	bne.n	80054fc <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d110      	bne.n	80054dc <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	e00f      	b.n	80054fc <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	69fa      	ldr	r2, [r7, #28]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	0151      	lsls	r1, r2, #5
 800550e:	69fa      	ldr	r2, [r7, #28]
 8005510:	440a      	add	r2, r1
 8005512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005516:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800551a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	fff80000 	.word	0xfff80000
 800552c:	e007ffff 	.word	0xe007ffff
 8005530:	1ff80000 	.word	0x1ff80000

08005534 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	4613      	mov	r3, r2
 8005540:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	785b      	ldrb	r3, [r3, #1]
 8005550:	2b01      	cmp	r3, #1
 8005552:	f040 80ce 	bne.w	80056f2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d132      	bne.n	80055c4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	0159      	lsls	r1, r3, #5
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	440b      	add	r3, r1
 8005574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005578:	4619      	mov	r1, r3
 800557a:	4b9a      	ldr	r3, [pc, #616]	; (80057e4 <USB_EP0StartXfer+0x2b0>)
 800557c:	4013      	ands	r3, r2
 800557e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	0151      	lsls	r1, r2, #5
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	440a      	add	r2, r1
 8005596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800559a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800559e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ac:	691a      	ldr	r2, [r3, #16]
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	0159      	lsls	r1, r3, #5
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	440b      	add	r3, r1
 80055b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ba:	4619      	mov	r1, r3
 80055bc:	4b8a      	ldr	r3, [pc, #552]	; (80057e8 <USB_EP0StartXfer+0x2b4>)
 80055be:	4013      	ands	r3, r2
 80055c0:	610b      	str	r3, [r1, #16]
 80055c2:	e04e      	b.n	8005662 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	0159      	lsls	r1, r3, #5
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	440b      	add	r3, r1
 80055da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055de:	4619      	mov	r1, r3
 80055e0:	4b81      	ldr	r3, [pc, #516]	; (80057e8 <USB_EP0StartXfer+0x2b4>)
 80055e2:	4013      	ands	r3, r2
 80055e4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	0159      	lsls	r1, r3, #5
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	440b      	add	r3, r1
 80055fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005600:	4619      	mov	r1, r3
 8005602:	4b78      	ldr	r3, [pc, #480]	; (80057e4 <USB_EP0StartXfer+0x2b0>)
 8005604:	4013      	ands	r3, r2
 8005606:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	699a      	ldr	r2, [r3, #24]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	429a      	cmp	r2, r3
 8005612:	d903      	bls.n	800561c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	68da      	ldr	r2, [r3, #12]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	0151      	lsls	r1, r2, #5
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	440a      	add	r2, r1
 8005632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005636:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800563a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005648:	691a      	ldr	r2, [r3, #16]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005652:	6939      	ldr	r1, [r7, #16]
 8005654:	0148      	lsls	r0, r1, #5
 8005656:	6979      	ldr	r1, [r7, #20]
 8005658:	4401      	add	r1, r0
 800565a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800565e:	4313      	orrs	r3, r2
 8005660:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005662:	79fb      	ldrb	r3, [r7, #7]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d11e      	bne.n	80056a6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d009      	beq.n	8005684 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567c:	461a      	mov	r2, r3
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	0151      	lsls	r1, r2, #5
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	440a      	add	r2, r1
 800569a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800569e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	e097      	b.n	80057d6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	0151      	lsls	r1, r2, #5
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	440a      	add	r2, r1
 80056bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056c4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 8083 	beq.w	80057d6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	f003 030f 	and.w	r3, r3, #15
 80056e0:	2101      	movs	r1, #1
 80056e2:	fa01 f303 	lsl.w	r3, r1, r3
 80056e6:	6979      	ldr	r1, [r7, #20]
 80056e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056ec:	4313      	orrs	r3, r2
 80056ee:	634b      	str	r3, [r1, #52]	; 0x34
 80056f0:	e071      	b.n	80057d6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	0159      	lsls	r1, r3, #5
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	440b      	add	r3, r1
 8005708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570c:	4619      	mov	r1, r3
 800570e:	4b36      	ldr	r3, [pc, #216]	; (80057e8 <USB_EP0StartXfer+0x2b4>)
 8005710:	4013      	ands	r3, r2
 8005712:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	0159      	lsls	r1, r3, #5
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	440b      	add	r3, r1
 800572a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572e:	4619      	mov	r1, r3
 8005730:	4b2c      	ldr	r3, [pc, #176]	; (80057e4 <USB_EP0StartXfer+0x2b0>)
 8005732:	4013      	ands	r3, r2
 8005734:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	0151      	lsls	r1, r2, #5
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	440a      	add	r2, r1
 8005764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005768:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800576c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	4413      	add	r3, r2
 8005776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577a:	691a      	ldr	r2, [r3, #16]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	69db      	ldr	r3, [r3, #28]
 8005780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005784:	6939      	ldr	r1, [r7, #16]
 8005786:	0148      	lsls	r0, r1, #5
 8005788:	6979      	ldr	r1, [r7, #20]
 800578a:	4401      	add	r1, r0
 800578c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005790:	4313      	orrs	r3, r2
 8005792:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005794:	79fb      	ldrb	r3, [r7, #7]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d10d      	bne.n	80057b6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d009      	beq.n	80057b6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	6919      	ldr	r1, [r3, #16]
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b2:	460a      	mov	r2, r1
 80057b4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	0151      	lsls	r1, r2, #5
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	440a      	add	r2, r1
 80057cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	e007ffff 	.word	0xe007ffff
 80057e8:	fff80000 	.word	0xfff80000

080057ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80057fa:	2300      	movs	r3, #0
 80057fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	785b      	ldrb	r3, [r3, #1]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d14a      	bne.n	80058a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800581e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005822:	f040 8086 	bne.w	8005932 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	7812      	ldrb	r2, [r2, #0]
 800583a:	0151      	lsls	r1, r2, #5
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	440a      	add	r2, r1
 8005840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005844:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005848:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	7812      	ldrb	r2, [r2, #0]
 800585e:	0151      	lsls	r1, r2, #5
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	440a      	add	r2, r1
 8005864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005868:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800586c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	3301      	adds	r3, #1
 8005872:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f242 7210 	movw	r2, #10000	; 0x2710
 800587a:	4293      	cmp	r3, r2
 800587c:	d902      	bls.n	8005884 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	75fb      	strb	r3, [r7, #23]
          break;
 8005882:	e056      	b.n	8005932 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005898:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800589c:	d0e7      	beq.n	800586e <USB_EPStopXfer+0x82>
 800589e:	e048      	b.n	8005932 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058b8:	d13b      	bne.n	8005932 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	7812      	ldrb	r2, [r2, #0]
 80058ce:	0151      	lsls	r1, r2, #5
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	440a      	add	r2, r1
 80058d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	7812      	ldrb	r2, [r2, #0]
 80058f2:	0151      	lsls	r1, r2, #5
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	440a      	add	r2, r1
 80058f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005900:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3301      	adds	r3, #1
 8005906:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f242 7210 	movw	r2, #10000	; 0x2710
 800590e:	4293      	cmp	r3, r2
 8005910:	d902      	bls.n	8005918 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	75fb      	strb	r3, [r7, #23]
          break;
 8005916:	e00c      	b.n	8005932 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800592c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005930:	d0e7      	beq.n	8005902 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005932:	7dfb      	ldrb	r3, [r7, #23]
}
 8005934:	4618      	mov	r0, r3
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005940:	b480      	push	{r7}
 8005942:	b089      	sub	sp, #36	; 0x24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	4611      	mov	r1, r2
 800594c:	461a      	mov	r2, r3
 800594e:	460b      	mov	r3, r1
 8005950:	71fb      	strb	r3, [r7, #7]
 8005952:	4613      	mov	r3, r2
 8005954:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800595e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005962:	2b00      	cmp	r3, #0
 8005964:	d123      	bne.n	80059ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005966:	88bb      	ldrh	r3, [r7, #4]
 8005968:	3303      	adds	r3, #3
 800596a:	089b      	lsrs	r3, r3, #2
 800596c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800596e:	2300      	movs	r3, #0
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	e018      	b.n	80059a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005974:	79fb      	ldrb	r3, [r7, #7]
 8005976:	031a      	lsls	r2, r3, #12
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	4413      	add	r3, r2
 800597c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005980:	461a      	mov	r2, r3
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	3301      	adds	r3, #1
 800598c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	3301      	adds	r3, #1
 8005992:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	3301      	adds	r3, #1
 8005998:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	3301      	adds	r3, #1
 800599e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	3301      	adds	r3, #1
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d3e2      	bcc.n	8005974 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3724      	adds	r7, #36	; 0x24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059bc:	b480      	push	{r7}
 80059be:	b08b      	sub	sp, #44	; 0x2c
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	4613      	mov	r3, r2
 80059c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80059d2:	88fb      	ldrh	r3, [r7, #6]
 80059d4:	089b      	lsrs	r3, r3, #2
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80059da:	88fb      	ldrh	r3, [r7, #6]
 80059dc:	f003 0303 	and.w	r3, r3, #3
 80059e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80059e2:	2300      	movs	r3, #0
 80059e4:	623b      	str	r3, [r7, #32]
 80059e6:	e014      	b.n	8005a12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	3301      	adds	r3, #1
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	3301      	adds	r3, #1
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	3301      	adds	r3, #1
 8005a04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	3301      	adds	r3, #1
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	623b      	str	r3, [r7, #32]
 8005a12:	6a3a      	ldr	r2, [r7, #32]
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d3e6      	bcc.n	80059e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a1a:	8bfb      	ldrh	r3, [r7, #30]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d01e      	beq.n	8005a5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f107 0310 	add.w	r3, r7, #16
 8005a30:	6812      	ldr	r2, [r2, #0]
 8005a32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	701a      	strb	r2, [r3, #0]
      i++;
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	3301      	adds	r3, #1
 8005a50:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005a52:	8bfb      	ldrh	r3, [r7, #30]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a58:	8bfb      	ldrh	r3, [r7, #30]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1ea      	bne.n	8005a34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	372c      	adds	r7, #44	; 0x2c
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	785b      	ldrb	r3, [r3, #1]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d12c      	bne.n	8005ae2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	db12      	blt.n	8005ac0 <USB_EPSetStall+0x54>
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00f      	beq.n	8005ac0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005abe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	0151      	lsls	r1, r2, #5
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	440a      	add	r2, r1
 8005ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ada:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	e02b      	b.n	8005b3a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	db12      	blt.n	8005b1a <USB_EPSetStall+0xae>
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00f      	beq.n	8005b1a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	0151      	lsls	r1, r2, #5
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	440a      	add	r2, r1
 8005b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b18:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	0151      	lsls	r1, r2, #5
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	440a      	add	r2, r1
 8005b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	785b      	ldrb	r3, [r3, #1]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d128      	bne.n	8005bb6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b82:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	791b      	ldrb	r3, [r3, #4]
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d003      	beq.n	8005b94 <USB_EPClearStall+0x4c>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	791b      	ldrb	r3, [r3, #4]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d138      	bne.n	8005c06 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	0151      	lsls	r1, r2, #5
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	440a      	add	r2, r1
 8005baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	6013      	str	r3, [r2, #0]
 8005bb4:	e027      	b.n	8005c06 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	0151      	lsls	r1, r2, #5
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bd4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	791b      	ldrb	r3, [r3, #4]
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d003      	beq.n	8005be6 <USB_EPClearStall+0x9e>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	791b      	ldrb	r3, [r3, #4]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d10f      	bne.n	8005c06 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	0151      	lsls	r1, r2, #5
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	440a      	add	r2, r1
 8005bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c04:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c32:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c36:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005c48:	68f9      	ldr	r1, [r7, #12]
 8005c4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c7a:	f023 0303 	bic.w	r3, r3, #3
 8005c7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c8e:	f023 0302 	bic.w	r3, r3, #2
 8005c92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b085      	sub	sp, #20
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cbc:	f023 0303 	bic.w	r3, r3, #3
 8005cc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cd0:	f043 0302 	orr.w	r3, r3, #2
 8005cd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b085      	sub	sp, #20
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	0c1b      	lsrs	r3, r3, #16
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b085      	sub	sp, #20
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	b29b      	uxth	r3, r3
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b085      	sub	sp, #20
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005d82:	78fb      	ldrb	r3, [r7, #3]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005da0:	68bb      	ldr	r3, [r7, #8]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b087      	sub	sp, #28
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	460b      	mov	r3, r1
 8005db8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005dd2:	78fb      	ldrb	r3, [r7, #3]
 8005dd4:	f003 030f 	and.w	r3, r3, #15
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	fa22 f303 	lsr.w	r3, r2, r3
 8005dde:	01db      	lsls	r3, r3, #7
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005dfc:	68bb      	ldr	r3, [r7, #8]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	f003 0301 	and.w	r3, r3, #1
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
	...

08005e28 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e42:	4619      	mov	r1, r3
 8005e44:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <USB_ActivateSetup+0x44>)
 8005e46:	4013      	ands	r3, r2
 8005e48:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	fffff800 	.word	0xfffff800

08005e70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	333c      	adds	r3, #60	; 0x3c
 8005e86:	3304      	adds	r3, #4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	4a26      	ldr	r2, [pc, #152]	; (8005f28 <USB_EP0_OutStart+0xb8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d90a      	bls.n	8005eaa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ea4:	d101      	bne.n	8005eaa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	e037      	b.n	8005f1a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ec8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed8:	f043 0318 	orr.w	r3, r3, #24
 8005edc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005ef0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005ef2:	7afb      	ldrb	r3, [r7, #11]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d10f      	bne.n	8005f18 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efe:	461a      	mov	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f12:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005f16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	371c      	adds	r7, #28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	4f54300a 	.word	0x4f54300a

08005f2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4a13      	ldr	r2, [pc, #76]	; (8005f90 <USB_CoreReset+0x64>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d901      	bls.n	8005f4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e01b      	b.n	8005f82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	daf2      	bge.n	8005f38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f043 0201 	orr.w	r2, r3, #1
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3301      	adds	r3, #1
 8005f66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4a09      	ldr	r2, [pc, #36]	; (8005f90 <USB_CoreReset+0x64>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d901      	bls.n	8005f74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e006      	b.n	8005f82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d0f0      	beq.n	8005f62 <USB_CoreReset+0x36>

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	00030d40 	.word	0x00030d40

08005f94 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
 uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8005fa0:	f643 4050 	movw	r0, #15440	; 0x3c50
 8005fa4:	f002 fb56 	bl	8008654 <USBD_static_malloc>
 8005fa8:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d109      	bne.n	8005fc4 <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	32b0      	adds	r2, #176	; 0xb0
 8005fba:	2100      	movs	r1, #0
 8005fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e07e      	b.n	80060c2 <USBD_AUDIO_Init+0x12e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	32b0      	adds	r2, #176	; 0xb0
 8005fce:	68f9      	ldr	r1, [r7, #12]
 8005fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	32b0      	adds	r2, #176	; 0xb0
 8005fde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	7c1b      	ldrb	r3, [r3, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10e      	bne.n	800600e <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8005ff0:	4b36      	ldr	r3, [pc, #216]	; (80060cc <USBD_AUDIO_Init+0x138>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	f003 020f 	and.w	r2, r3, #15
 8005ff8:	6879      	ldr	r1, [r7, #4]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	440b      	add	r3, r1
 8006004:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006008:	2201      	movs	r2, #1
 800600a:	801a      	strh	r2, [r3, #0]
 800600c:	e00d      	b.n	800602a <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 800600e:	4b2f      	ldr	r3, [pc, #188]	; (80060cc <USBD_AUDIO_Init+0x138>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	f003 020f 	and.w	r2, r3, #15
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	440b      	add	r3, r1
 8006022:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006026:	2201      	movs	r2, #1
 8006028:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800602a:	4b28      	ldr	r3, [pc, #160]	; (80060cc <USBD_AUDIO_Init+0x138>)
 800602c:	7819      	ldrb	r1, [r3, #0]
 800602e:	23c0      	movs	r3, #192	; 0xc0
 8006030:	2201      	movs	r2, #1
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f002 f9eb 	bl	800840e <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 8006038:	4b24      	ldr	r3, [pc, #144]	; (80060cc <USBD_AUDIO_Init+0x138>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	f003 020f 	and.w	r2, r3, #15
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	4613      	mov	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	440b      	add	r3, r1
 800604c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006050:	2201      	movs	r2, #1
 8006052:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006060:	2203      	movs	r2, #3
 8006062:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
  haudio->wr_ptr = 0U;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800606c:	2200      	movs	r2, #0
 800606e:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08
  haudio->rd_ptr = 0U;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006078:	2200      	movs	r2, #0
 800607a:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
  haudio->rd_enable = 0U;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	33b0      	adds	r3, #176	; 0xb0
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2200      	movs	r2, #0
 800609e:	2146      	movs	r1, #70	; 0x46
 80060a0:	f64b 3080 	movw	r0, #48000	; 0xbb80
 80060a4:	4798      	blx	r3
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <USBD_AUDIO_Init+0x11c>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e008      	b.n	80060c2 <USBD_AUDIO_Init+0x12e>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 80060b0:	4b06      	ldr	r3, [pc, #24]	; (80060cc <USBD_AUDIO_Init+0x138>)
 80060b2:	7819      	ldrb	r1, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	1d1a      	adds	r2, r3, #4
 80060b8:	23c0      	movs	r3, #192	; 0xc0
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f002 fa96 	bl	80085ec <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	240000c2 	.word	0x240000c2

080060d0 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
 uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 80060dc:	4b28      	ldr	r3, [pc, #160]	; (8006180 <USBD_AUDIO_DeInit+0xb0>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	4619      	mov	r1, r3
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f002 f9b9 	bl	800845a <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 80060e8:	4b25      	ldr	r3, [pc, #148]	; (8006180 <USBD_AUDIO_DeInit+0xb0>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	f003 020f 	and.w	r2, r3, #15
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006100:	2200      	movs	r2, #0
 8006102:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 8006104:	4b1e      	ldr	r3, [pc, #120]	; (8006180 <USBD_AUDIO_DeInit+0xb0>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	f003 020f 	and.w	r2, r3, #15
 800610c:	6879      	ldr	r1, [r7, #4]
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	440b      	add	r3, r1
 8006118:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800611c:	2200      	movs	r2, #0
 800611e:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	32b0      	adds	r2, #176	; 0xb0
 800612a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d020      	beq.n	8006174 <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	33b0      	adds	r3, #176	; 0xb0
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2000      	movs	r0, #0
 8006146:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	32b0      	adds	r2, #176	; 0xb0
 8006152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006156:	4618      	mov	r0, r3
 8006158:	f002 fa8a 	bl	8008670 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	32b0      	adds	r2, #176	; 0xb0
 8006166:	2100      	movs	r1, #0
 8006168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	240000c2 	.word	0x240000c2

08006184 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
 uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	32b0      	adds	r2, #176	; 0xb0
 80061a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a4:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e0c1      	b.n	8006334 <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01a      	beq.n	80061f2 <USBD_AUDIO_Setup+0x6e>
 80061bc:	2b20      	cmp	r3, #32
 80061be:	f040 80b1 	bne.w	8006324 <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	785b      	ldrb	r3, [r3, #1]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d006      	beq.n	80061d8 <USBD_AUDIO_Setup+0x54>
 80061ca:	2b81      	cmp	r3, #129	; 0x81
 80061cc:	d109      	bne.n	80061e2 <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 80061ce:	6839      	ldr	r1, [r7, #0]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fa0d 	bl	80065f0 <AUDIO_REQ_GetCurrent>
          break;
 80061d6:	e00b      	b.n	80061f0 <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fa34 	bl	8006648 <AUDIO_REQ_SetCurrent>
          break;
 80061e0:	e006      	b.n	80061f0 <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f001 fcb4 	bl	8007b52 <USBD_CtlError>
          ret = USBD_FAIL;
 80061ea:	2303      	movs	r3, #3
 80061ec:	75fb      	strb	r3, [r7, #23]
          break;
 80061ee:	bf00      	nop
      }
      break;
 80061f0:	e09f      	b.n	8006332 <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	785b      	ldrb	r3, [r3, #1]
 80061f6:	2b0b      	cmp	r3, #11
 80061f8:	f200 8089 	bhi.w	800630e <USBD_AUDIO_Setup+0x18a>
 80061fc:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <USBD_AUDIO_Setup+0x80>)
 80061fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006202:	bf00      	nop
 8006204:	08006235 	.word	0x08006235
 8006208:	0800631d 	.word	0x0800631d
 800620c:	0800630f 	.word	0x0800630f
 8006210:	0800630f 	.word	0x0800630f
 8006214:	0800630f 	.word	0x0800630f
 8006218:	0800630f 	.word	0x0800630f
 800621c:	0800625f 	.word	0x0800625f
 8006220:	0800630f 	.word	0x0800630f
 8006224:	0800630f 	.word	0x0800630f
 8006228:	0800630f 	.word	0x0800630f
 800622c:	080062a7 	.word	0x080062a7
 8006230:	080062cf 	.word	0x080062cf
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b03      	cmp	r3, #3
 800623e:	d107      	bne.n	8006250 <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006240:	f107 0308 	add.w	r3, r7, #8
 8006244:	2202      	movs	r2, #2
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f001 fcf3 	bl	8007c34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800624e:	e068      	b.n	8006322 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f001 fc7d 	bl	8007b52 <USBD_CtlError>
            ret = USBD_FAIL;
 8006258:	2303      	movs	r3, #3
 800625a:	75fb      	strb	r3, [r7, #23]
          break;
 800625c:	e061      	b.n	8006322 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	885b      	ldrh	r3, [r3, #2]
 8006262:	0a1b      	lsrs	r3, r3, #8
 8006264:	b29b      	uxth	r3, r3
 8006266:	2b21      	cmp	r3, #33	; 0x21
 8006268:	d15a      	bne.n	8006320 <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8006270:	4618      	mov	r0, r3
 8006272:	f000 fa57 	bl	8006724 <USBD_AUDIO_GetAudioHeaderDesc>
 8006276:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00c      	beq.n	8006298 <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	88db      	ldrh	r3, [r3, #6]
 8006282:	2b09      	cmp	r3, #9
 8006284:	bf28      	it	cs
 8006286:	2309      	movcs	r3, #9
 8006288:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 800628a:	897b      	ldrh	r3, [r7, #10]
 800628c:	461a      	mov	r2, r3
 800628e:	68f9      	ldr	r1, [r7, #12]
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f001 fccf 	bl	8007c34 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 8006296:	e043      	b.n	8006320 <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f001 fc59 	bl	8007b52 <USBD_CtlError>
              ret = USBD_FAIL;
 80062a0:	2303      	movs	r3, #3
 80062a2:	75fb      	strb	r3, [r7, #23]
          break;
 80062a4:	e03c      	b.n	8006320 <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d106      	bne.n	80062c0 <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	2201      	movs	r2, #1
 80062b6:	4619      	mov	r1, r3
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f001 fcbb 	bl	8007c34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062be:	e030      	b.n	8006322 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80062c0:	6839      	ldr	r1, [r7, #0]
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f001 fc45 	bl	8007b52 <USBD_CtlError>
            ret = USBD_FAIL;
 80062c8:	2303      	movs	r3, #3
 80062ca:	75fb      	strb	r3, [r7, #23]
          break;
 80062cc:	e029      	b.n	8006322 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d112      	bne.n	8006300 <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	885b      	ldrh	r3, [r3, #2]
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d806      	bhi.n	80062f2 <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	885b      	ldrh	r3, [r3, #2]
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	461a      	mov	r2, r3
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062f0:	e017      	b.n	8006322 <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f001 fc2c 	bl	8007b52 <USBD_CtlError>
              ret = USBD_FAIL;
 80062fa:	2303      	movs	r3, #3
 80062fc:	75fb      	strb	r3, [r7, #23]
          break;
 80062fe:	e010      	b.n	8006322 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 fc25 	bl	8007b52 <USBD_CtlError>
            ret = USBD_FAIL;
 8006308:	2303      	movs	r3, #3
 800630a:	75fb      	strb	r3, [r7, #23]
          break;
 800630c:	e009      	b.n	8006322 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f001 fc1e 	bl	8007b52 <USBD_CtlError>
          ret = USBD_FAIL;
 8006316:	2303      	movs	r3, #3
 8006318:	75fb      	strb	r3, [r7, #23]
          break;
 800631a:	e002      	b.n	8006322 <USBD_AUDIO_Setup+0x19e>
          break;
 800631c:	bf00      	nop
 800631e:	e008      	b.n	8006332 <USBD_AUDIO_Setup+0x1ae>
          break;
 8006320:	bf00      	nop
      }
      break;
 8006322:	e006      	b.n	8006332 <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f001 fc13 	bl	8007b52 <USBD_CtlError>
      ret = USBD_FAIL;
 800632c:	2303      	movs	r3, #3
 800632e:	75fb      	strb	r3, [r7, #23]
      break;
 8006330:	bf00      	nop
  }

  return (uint8_t)ret;
 8006332:	7dfb      	ldrb	r3, [r7, #23]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
 uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	226d      	movs	r2, #109	; 0x6d
 8006348:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 800634a:	4b03      	ldr	r3, [pc, #12]	; (8006358 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 800634c:	4618      	mov	r0, r3
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	24000048 	.word	0x24000048

0800635c <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
 uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
 {
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	460b      	mov	r3, r1
 8006366:	70fb      	strb	r3, [r7, #3]

   /* Only OUT data are processed */
   uint16_t PacketSize = AUDIO_OUT_PACKET;
 8006368:	23c0      	movs	r3, #192	; 0xc0
 800636a:	81fb      	strh	r3, [r7, #14]
   USBD_AUDIO_HandleTypeDef *haudio;
   pdev->ep0_state = USBD_EP0_DATA_IN;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
   haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	32b0      	adds	r2, #176	; 0xb0
 800637e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006382:	60bb      	str	r3, [r7, #8]


   /* Increment the Buffer pointer or roll it back when all buffers are full */
   haudio->wr_ptr += PacketSize;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800638a:	f8b3 2c08 	ldrh.w	r2, [r3, #3080]	; 0xc08
 800638e:	89fb      	ldrh	r3, [r7, #14]
 8006390:	4413      	add	r3, r2
 8006392:	b29a      	uxth	r2, r3
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800639a:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08


   if (haudio->rd_enable == 0U)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80063a4:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10d      	bne.n	80063c8 <USBD_AUDIO_DataIn+0x6c>
   {
     if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80063b2:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80063b6:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80063ba:	d105      	bne.n	80063c8 <USBD_AUDIO_DataIn+0x6c>
     {
       haudio->rd_enable = 1U;
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05

// 	memset(data+14, 1 , 2048-14);
     /* Prepare Out endpoint to receive next audio packet */
 #define ep_add 1
 //	memcpy(haudio->buffer[haudio->wr_ptr] , data, 2048);
     (void)USBD_LL_Transmit(pdev, 0,"QUANTTRONIX\n",AUDIO_OUT_PACKET);
 80063c8:	23c0      	movs	r3, #192	; 0xc0
 80063ca:	4a05      	ldr	r2, [pc, #20]	; (80063e0 <USBD_AUDIO_DataIn+0x84>)
 80063cc:	2100      	movs	r1, #0
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f002 f8eb 	bl	80085aa <USBD_LL_Transmit>


   return (uint8_t)USBD_OK;
 80063d4:	2300      	movs	r3, #0
 }
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	08009f30 	.word	0x08009f30

080063e4 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
 uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	32b0      	adds	r2, #176	; 0xb0
 80063f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fa:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006402:	2303      	movs	r3, #3
 8006404:	e02a      	b.n	800645c <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800640c:	f893 3c0a 	ldrb.w	r3, [r3, #3082]	; 0xc0a
 8006410:	2b01      	cmp	r3, #1
 8006412:	d122      	bne.n	800645a <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800641a:	f893 3c4c 	ldrb.w	r3, [r3, #3148]	; 0xc4c
 800641e:	2b02      	cmp	r3, #2
 8006420:	d11b      	bne.n	800645a <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	33b0      	adds	r3, #176	; 0xb0
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800643a:	f892 2c0b 	ldrb.w	r2, [r2, #3083]	; 0xc0b
 800643e:	4610      	mov	r0, r2
 8006440:	4798      	blx	r3
      haudio->control.cmd = 0U;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
      haudio->control.len = 0U;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    }
  }

  return (uint8_t)USBD_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
 uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
 uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
 uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	460b      	mov	r3, r1
 800649a:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
 uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	460b      	mov	r3, r1
 80064b4:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
 uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	32b0      	adds	r2, #176	; 0xb0
 80064da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064de:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e07c      	b.n	80065e4 <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 80064ea:	4b40      	ldr	r3, [pc, #256]	; (80065ec <USBD_AUDIO_DataOut+0x128>)
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	78fa      	ldrb	r2, [r7, #3]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d176      	bne.n	80065e2 <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 80064f4:	78fb      	ldrb	r3, [r7, #3]
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f002 f898 	bl	800862e <USBD_LL_GetRxDataSize>
 80064fe:	4603      	mov	r3, r0
 8006500:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	33b0      	adds	r3, #176	; 0xb0
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800651a:	f8b2 2c08 	ldrh.w	r2, [r2, #3080]	; 0xc08
 800651e:	4611      	mov	r1, r2
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	440a      	add	r2, r1
 8006524:	1d10      	adds	r0, r2, #4
 8006526:	8979      	ldrh	r1, [r7, #10]
 8006528:	2201      	movs	r2, #1
 800652a:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006532:	f8b3 2c08 	ldrh.w	r2, [r3, #3080]	; 0xc08
 8006536:	897b      	ldrh	r3, [r7, #10]
 8006538:	4413      	add	r3, r2
 800653a:	b29a      	uxth	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006542:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800654c:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8006550:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8006554:	d121      	bne.n	800659a <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800655c:	2200      	movs	r2, #0
 800655e:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006568:	f893 3c04 	ldrb.w	r3, [r3, #3076]	; 0xc04
 800656c:	2b03      	cmp	r3, #3
 800656e:	d114      	bne.n	800659a <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	33b0      	adds	r3, #176	; 0xb0
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	1d10      	adds	r0, r2, #4
 8006586:	2201      	movs	r2, #1
 8006588:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 800658c:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
      }
    }

    if (haudio->rd_enable == 0U)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80065a0:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10d      	bne.n	80065c4 <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80065ae:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80065b2:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80065b6:	d105      	bne.n	80065c4 <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 80065c4:	4b09      	ldr	r3, [pc, #36]	; (80065ec <USBD_AUDIO_DataOut+0x128>)
 80065c6:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80065ce:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80065d2:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	1d1a      	adds	r2, r3, #4
 80065da:	23c0      	movs	r3, #192	; 0xc0
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f002 f805 	bl	80085ec <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	240000c2 	.word	0x240000c2

080065f0 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
 void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	32b0      	adds	r2, #176	; 0xb0
 8006604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006608:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d017      	beq.n	8006640 <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	f643 430b 	movw	r3, #15371	; 0x3c0b
 8006616:	4413      	add	r3, r2
 8006618:	2240      	movs	r2, #64	; 0x40
 800661a:	2100      	movs	r1, #0
 800661c:	4618      	mov	r0, r3
 800661e:	f002 f887 	bl	8008730 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	f643 430b 	movw	r3, #15371	; 0x3c0b
 8006628:	4413      	add	r3, r2
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	88d2      	ldrh	r2, [r2, #6]
 800662e:	2a40      	cmp	r2, #64	; 0x40
 8006630:	bf28      	it	cs
 8006632:	2240      	movcs	r2, #64	; 0x40
 8006634:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8006636:	4619      	mov	r1, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f001 fafb 	bl	8007c34 <USBD_CtlSendData>
 800663e:	e000      	b.n	8006642 <AUDIO_REQ_GetCurrent+0x52>
    return;
 8006640:	bf00      	nop
}
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
 void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	32b0      	adds	r2, #176	; 0xb0
 800665c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006660:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d02f      	beq.n	80066c8 <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	88db      	ldrh	r3, [r3, #6]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d02c      	beq.n	80066ca <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	88db      	ldrh	r3, [r3, #6]
 8006680:	2b3f      	cmp	r3, #63	; 0x3f
 8006682:	d803      	bhi.n	800668c <AUDIO_REQ_SetCurrent+0x44>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	88db      	ldrh	r3, [r3, #6]
 8006688:	b2da      	uxtb	r2, r3
 800668a:	e000      	b.n	800668e <AUDIO_REQ_SetCurrent+0x46>
 800668c:	2240      	movs	r2, #64	; 0x40
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006694:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	889b      	ldrh	r3, [r3, #4]
 800669c:	0a1b      	lsrs	r3, r3, #8
 800669e:	b29b      	uxth	r3, r3
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80066a8:	f883 2c4c 	strb.w	r2, [r3, #3148]	; 0xc4c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	f643 430b 	movw	r3, #15371	; 0x3c0b
 80066b2:	4413      	add	r3, r2
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80066ba:	f892 2c4b 	ldrb.w	r2, [r2, #3147]	; 0xc4b
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f001 fae3 	bl	8007c8c <USBD_CtlPrepareRx>
 80066c6:	e000      	b.n	80066ca <AUDIO_REQ_SetCurrent+0x82>
    return;
 80066c8:	bf00      	nop
  }
}
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
 uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	220a      	movs	r2, #10
 80066dc:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 80066de:	4b03      	ldr	r3, [pc, #12]	; (80066ec <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	240000b8 	.word	0x240000b8

080066f0 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006700:	2303      	movs	r3, #3
 8006702:	e009      	b.n	8006718 <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	33b0      	adds	r3, #176	; 0xb0
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
 void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 8006734:	2300      	movs	r3, #0
 8006736:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	885b      	ldrh	r3, [r3, #2]
 800673c:	b29a      	uxth	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	b29b      	uxth	r3, r3
 8006744:	429a      	cmp	r2, r3
 8006746:	d91c      	bls.n	8006782 <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
  {
    ptr = desc->bLength;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	b29b      	uxth	r3, r3
 800674e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006750:	e011      	b.n	8006776 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006752:	f107 030a 	add.w	r3, r7, #10
 8006756:	4619      	mov	r1, r3
 8006758:	6978      	ldr	r0, [r7, #20]
 800675a:	f000 fbfc 	bl	8006f56 <USBD_GetNextDesc>
 800675e:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	785b      	ldrb	r3, [r3, #1]
 8006764:	2b24      	cmp	r3, #36	; 0x24
 8006766:	d106      	bne.n	8006776 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800676c:	2b01      	cmp	r3, #1
 800676e:	d102      	bne.n	8006776 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
      {
        pAudioDesc = (uint8_t *)pdesc;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	613b      	str	r3, [r7, #16]
        break;
 8006774:	e005      	b.n	8006782 <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
    while (ptr < desc->wTotalLength)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	885b      	ldrh	r3, [r3, #2]
 800677a:	b29a      	uxth	r2, r3
 800677c:	897b      	ldrh	r3, [r7, #10]
 800677e:	429a      	cmp	r2, r3
 8006780:	d8e7      	bhi.n	8006752 <USBD_AUDIO_GetAudioHeaderDesc+0x2e>
      }
    }
  }
  return pAudioDesc;
 8006782:	693b      	ldr	r3, [r7, #16]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	4613      	mov	r3, r2
 8006798:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10a      	bne.n	80067b6 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 80067a0:	4817      	ldr	r0, [pc, #92]	; (8006800 <USBD_Init+0x74>)
 80067a2:	f001 ffcd 	bl	8008740 <iprintf>
 80067a6:	4817      	ldr	r0, [pc, #92]	; (8006804 <USBD_Init+0x78>)
 80067a8:	f001 ffca 	bl	8008740 <iprintf>
 80067ac:	200a      	movs	r0, #10
 80067ae:	f001 ffdf 	bl	8008770 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e01f      	b.n	80067f6 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d003      	beq.n	80067dc <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	79fa      	ldrb	r2, [r7, #7]
 80067e8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f001 fda2 	bl	8008334 <USBD_LL_Init>
 80067f0:	4603      	mov	r3, r0
 80067f2:	75fb      	strb	r3, [r7, #23]

  return ret;
 80067f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	08009f40 	.word	0x08009f40
 8006804:	08009f48 	.word	0x08009f48

08006808 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800681c:	481a      	ldr	r0, [pc, #104]	; (8006888 <USBD_RegisterClass+0x80>)
 800681e:	f001 ff8f 	bl	8008740 <iprintf>
 8006822:	481a      	ldr	r0, [pc, #104]	; (800688c <USBD_RegisterClass+0x84>)
 8006824:	f001 ff8c 	bl	8008740 <iprintf>
 8006828:	200a      	movs	r0, #10
 800682a:	f001 ffa1 	bl	8008770 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800682e:	2303      	movs	r3, #3
 8006830:	e025      	b.n	800687e <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	32ae      	adds	r2, #174	; 0xae
 8006844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00f      	beq.n	800686e <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	32ae      	adds	r2, #174	; 0xae
 8006858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685e:	f107 020e 	add.w	r2, r7, #14
 8006862:	4610      	mov	r0, r2
 8006864:	4798      	blx	r3
 8006866:	4602      	mov	r2, r0
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	08009f40 	.word	0x08009f40
 800688c:	08009f60 	.word	0x08009f60

08006890 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 fd9d 	bl	80083d8 <USBD_LL_Start>
 800689e:	4603      	mov	r3, r0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	460b      	mov	r3, r1
 80068c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d009      	beq.n	80068ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	78fa      	ldrb	r2, [r7, #3]
 80068e2:	4611      	mov	r1, r2
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	4798      	blx	r3
 80068e8:	4603      	mov	r3, r0
 80068ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b084      	sub	sp, #16
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	460b      	mov	r3, r1
 8006900:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	78fa      	ldrb	r2, [r7, #3]
 8006910:	4611      	mov	r1, r2
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	4798      	blx	r3
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800691c:	2303      	movs	r3, #3
 800691e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006920:	7bfb      	ldrb	r3, [r7, #15]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	4618      	mov	r0, r3
 800693e:	f001 f8ce 	bl	8007ade <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006950:	461a      	mov	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800695e:	f003 031f 	and.w	r3, r3, #31
 8006962:	2b02      	cmp	r3, #2
 8006964:	d01a      	beq.n	800699c <USBD_LL_SetupStage+0x72>
 8006966:	2b02      	cmp	r3, #2
 8006968:	d822      	bhi.n	80069b0 <USBD_LL_SetupStage+0x86>
 800696a:	2b00      	cmp	r3, #0
 800696c:	d002      	beq.n	8006974 <USBD_LL_SetupStage+0x4a>
 800696e:	2b01      	cmp	r3, #1
 8006970:	d00a      	beq.n	8006988 <USBD_LL_SetupStage+0x5e>
 8006972:	e01d      	b.n	80069b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800697a:	4619      	mov	r1, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fb25 	bl	8006fcc <USBD_StdDevReq>
 8006982:	4603      	mov	r3, r0
 8006984:	73fb      	strb	r3, [r7, #15]
      break;
 8006986:	e020      	b.n	80069ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fb8d 	bl	80070b0 <USBD_StdItfReq>
 8006996:	4603      	mov	r3, r0
 8006998:	73fb      	strb	r3, [r7, #15]
      break;
 800699a:	e016      	b.n	80069ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fbef 	bl	8007188 <USBD_StdEPReq>
 80069aa:	4603      	mov	r3, r0
 80069ac:	73fb      	strb	r3, [r7, #15]
      break;
 80069ae:	e00c      	b.n	80069ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	4619      	mov	r1, r3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 fd6a 	bl	8008498 <USBD_LL_StallEP>
 80069c4:	4603      	mov	r3, r0
 80069c6:	73fb      	strb	r3, [r7, #15]
      break;
 80069c8:	bf00      	nop
  }

  return ret;
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	460b      	mov	r3, r1
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80069e6:	7afb      	ldrb	r3, [r7, #11]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d16e      	bne.n	8006aca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80069f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	f040 8098 	bne.w	8006b30 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d913      	bls.n	8006a34 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	1ad2      	subs	r2, r2, r3
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	4293      	cmp	r3, r2
 8006a24:	bf28      	it	cs
 8006a26:	4613      	movcs	r3, r2
 8006a28:	461a      	mov	r2, r3
 8006a2a:	6879      	ldr	r1, [r7, #4]
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f001 f94a 	bl	8007cc6 <USBD_CtlContinueRx>
 8006a32:	e07d      	b.n	8006b30 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a3a:	f003 031f 	and.w	r3, r3, #31
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d014      	beq.n	8006a6c <USBD_LL_DataOutStage+0x98>
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d81d      	bhi.n	8006a82 <USBD_LL_DataOutStage+0xae>
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d002      	beq.n	8006a50 <USBD_LL_DataOutStage+0x7c>
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d003      	beq.n	8006a56 <USBD_LL_DataOutStage+0x82>
 8006a4e:	e018      	b.n	8006a82 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	75bb      	strb	r3, [r7, #22]
            break;
 8006a54:	e018      	b.n	8006a88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	4619      	mov	r1, r3
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 fa5e 	bl	8006f22 <USBD_CoreFindIF>
 8006a66:	4603      	mov	r3, r0
 8006a68:	75bb      	strb	r3, [r7, #22]
            break;
 8006a6a:	e00d      	b.n	8006a88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	4619      	mov	r1, r3
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 fa60 	bl	8006f3c <USBD_CoreFindEP>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	75bb      	strb	r3, [r7, #22]
            break;
 8006a80:	e002      	b.n	8006a88 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	75bb      	strb	r3, [r7, #22]
            break;
 8006a86:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006a88:	7dbb      	ldrb	r3, [r7, #22]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d119      	bne.n	8006ac2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d113      	bne.n	8006ac2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006a9a:	7dba      	ldrb	r2, [r7, #22]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	32ae      	adds	r2, #174	; 0xae
 8006aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00b      	beq.n	8006ac2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006aaa:	7dba      	ldrb	r2, [r7, #22]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006ab2:	7dba      	ldrb	r2, [r7, #22]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	32ae      	adds	r2, #174	; 0xae
 8006ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f001 f910 	bl	8007ce8 <USBD_CtlSendStatus>
 8006ac8:	e032      	b.n	8006b30 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006aca:	7afb      	ldrb	r3, [r7, #11]
 8006acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 fa31 	bl	8006f3c <USBD_CoreFindEP>
 8006ada:	4603      	mov	r3, r0
 8006adc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ade:	7dbb      	ldrb	r3, [r7, #22]
 8006ae0:	2bff      	cmp	r3, #255	; 0xff
 8006ae2:	d025      	beq.n	8006b30 <USBD_LL_DataOutStage+0x15c>
 8006ae4:	7dbb      	ldrb	r3, [r7, #22]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d122      	bne.n	8006b30 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d117      	bne.n	8006b26 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006af6:	7dba      	ldrb	r2, [r7, #22]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	32ae      	adds	r2, #174	; 0xae
 8006afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00f      	beq.n	8006b26 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006b06:	7dba      	ldrb	r2, [r7, #22]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006b0e:	7dba      	ldrb	r2, [r7, #22]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	32ae      	adds	r2, #174	; 0xae
 8006b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	7afa      	ldrb	r2, [r7, #11]
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	4798      	blx	r3
 8006b22:	4603      	mov	r3, r0
 8006b24:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006b26:	7dfb      	ldrb	r3, [r7, #23]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
 8006b2e:	e000      	b.n	8006b32 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b086      	sub	sp, #24
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	460b      	mov	r3, r1
 8006b44:	607a      	str	r2, [r7, #4]
 8006b46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006b48:	7afb      	ldrb	r3, [r7, #11]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d16f      	bne.n	8006c2e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3314      	adds	r3, #20
 8006b52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d15a      	bne.n	8006c14 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	689a      	ldr	r2, [r3, #8]
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d914      	bls.n	8006b94 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	689a      	ldr	r2, [r3, #8]
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	1ad2      	subs	r2, r2, r3
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	6879      	ldr	r1, [r7, #4]
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f001 f872 	bl	8007c6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b86:	2300      	movs	r3, #0
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f001 fd2d 	bl	80085ec <USBD_LL_PrepareReceive>
 8006b92:	e03f      	b.n	8006c14 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d11c      	bne.n	8006bda <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d316      	bcc.n	8006bda <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d20f      	bcs.n	8006bda <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006bba:	2200      	movs	r2, #0
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f001 f853 	bl	8007c6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bcc:	2300      	movs	r3, #0
 8006bce:	2200      	movs	r2, #0
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f001 fd0a 	bl	80085ec <USBD_LL_PrepareReceive>
 8006bd8:	e01c      	b.n	8006c14 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d10f      	bne.n	8006c06 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c06:	2180      	movs	r1, #128	; 0x80
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f001 fc45 	bl	8008498 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f001 f87d 	bl	8007d0e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d03a      	beq.n	8006c94 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f7ff fe42 	bl	80068a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006c2c:	e032      	b.n	8006c94 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006c2e:	7afb      	ldrb	r3, [r7, #11]
 8006c30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	4619      	mov	r1, r3
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 f97f 	bl	8006f3c <USBD_CoreFindEP>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	2bff      	cmp	r3, #255	; 0xff
 8006c46:	d025      	beq.n	8006c94 <USBD_LL_DataInStage+0x15a>
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d122      	bne.n	8006c94 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d11c      	bne.n	8006c94 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006c5a:	7dfa      	ldrb	r2, [r7, #23]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	32ae      	adds	r2, #174	; 0xae
 8006c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d014      	beq.n	8006c94 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006c6a:	7dfa      	ldrb	r2, [r7, #23]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006c72:	7dfa      	ldrb	r2, [r7, #23]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	32ae      	adds	r2, #174	; 0xae
 8006c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	7afa      	ldrb	r2, [r7, #11]
 8006c80:	4611      	mov	r1, r2
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	4798      	blx	r3
 8006c86:	4603      	mov	r3, r0
 8006c88:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006c8a:	7dbb      	ldrb	r3, [r7, #22]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006c90:	7dbb      	ldrb	r3, [r7, #22]
 8006c92:	e000      	b.n	8006c96 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d014      	beq.n	8006d04 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00e      	beq.n	8006d04 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	6852      	ldr	r2, [r2, #4]
 8006cf2:	b2d2      	uxtb	r2, r2
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	4798      	blx	r3
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006d00:	2303      	movs	r3, #3
 8006d02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d04:	2340      	movs	r3, #64	; 0x40
 8006d06:	2200      	movs	r2, #0
 8006d08:	2100      	movs	r1, #0
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f001 fb7f 	bl	800840e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2240      	movs	r2, #64	; 0x40
 8006d1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d20:	2340      	movs	r3, #64	; 0x40
 8006d22:	2200      	movs	r2, #0
 8006d24:	2180      	movs	r1, #128	; 0x80
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 fb71 	bl	800840e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2240      	movs	r2, #64	; 0x40
 8006d36:	621a      	str	r2, [r3, #32]

  return ret;
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	78fa      	ldrb	r2, [r7, #3]
 8006d52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2204      	movs	r2, #4
 8006d7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d106      	bne.n	8006db0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d110      	bne.n	8006df4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00b      	beq.n	8006df4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d005      	beq.n	8006df4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b082      	sub	sp, #8
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	460b      	mov	r3, r1
 8006e08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	32ae      	adds	r2, #174	; 0xae
 8006e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e01c      	b.n	8006e5a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b03      	cmp	r3, #3
 8006e2a:	d115      	bne.n	8006e58 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	32ae      	adds	r2, #174	; 0xae
 8006e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00b      	beq.n	8006e58 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	32ae      	adds	r2, #174	; 0xae
 8006e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	78fa      	ldrb	r2, [r7, #3]
 8006e52:	4611      	mov	r1, r2
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b082      	sub	sp, #8
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	32ae      	adds	r2, #174	; 0xae
 8006e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e01c      	b.n	8006ebe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b03      	cmp	r3, #3
 8006e8e:	d115      	bne.n	8006ebc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	32ae      	adds	r2, #174	; 0xae
 8006e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00b      	beq.n	8006ebc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	32ae      	adds	r2, #174	; 0xae
 8006eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	78fa      	ldrb	r2, [r7, #3]
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b083      	sub	sp, #12
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00e      	beq.n	8006f18 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6852      	ldr	r2, [r2, #4]
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	4611      	mov	r1, r2
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	4798      	blx	r3
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006f14:	2303      	movs	r3, #3
 8006f16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b083      	sub	sp, #12
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f2e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f48:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b085      	sub	sp, #20
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	881a      	ldrh	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	4413      	add	r3, r2
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4413      	add	r3, r2
 8006f80:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f82:	68fb      	ldr	r3, [r7, #12]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006fae:	8a3b      	ldrh	r3, [r7, #16]
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	b21a      	sxth	r2, r3
 8006fb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	b21b      	sxth	r3, r3
 8006fbc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006fbe:	89fb      	ldrh	r3, [r7, #14]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	371c      	adds	r7, #28
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fe2:	2b40      	cmp	r3, #64	; 0x40
 8006fe4:	d005      	beq.n	8006ff2 <USBD_StdDevReq+0x26>
 8006fe6:	2b40      	cmp	r3, #64	; 0x40
 8006fe8:	d857      	bhi.n	800709a <USBD_StdDevReq+0xce>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00f      	beq.n	800700e <USBD_StdDevReq+0x42>
 8006fee:	2b20      	cmp	r3, #32
 8006ff0:	d153      	bne.n	800709a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	32ae      	adds	r2, #174	; 0xae
 8006ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	4798      	blx	r3
 8007008:	4603      	mov	r3, r0
 800700a:	73fb      	strb	r3, [r7, #15]
      break;
 800700c:	e04a      	b.n	80070a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	785b      	ldrb	r3, [r3, #1]
 8007012:	2b09      	cmp	r3, #9
 8007014:	d83b      	bhi.n	800708e <USBD_StdDevReq+0xc2>
 8007016:	a201      	add	r2, pc, #4	; (adr r2, 800701c <USBD_StdDevReq+0x50>)
 8007018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701c:	08007071 	.word	0x08007071
 8007020:	08007085 	.word	0x08007085
 8007024:	0800708f 	.word	0x0800708f
 8007028:	0800707b 	.word	0x0800707b
 800702c:	0800708f 	.word	0x0800708f
 8007030:	0800704f 	.word	0x0800704f
 8007034:	08007045 	.word	0x08007045
 8007038:	0800708f 	.word	0x0800708f
 800703c:	08007067 	.word	0x08007067
 8007040:	08007059 	.word	0x08007059
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fa3c 	bl	80074c4 <USBD_GetDescriptor>
          break;
 800704c:	e024      	b.n	8007098 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fba1 	bl	8007798 <USBD_SetAddress>
          break;
 8007056:	e01f      	b.n	8007098 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fbe0 	bl	8007820 <USBD_SetConfig>
 8007060:	4603      	mov	r3, r0
 8007062:	73fb      	strb	r3, [r7, #15]
          break;
 8007064:	e018      	b.n	8007098 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fc83 	bl	8007974 <USBD_GetConfig>
          break;
 800706e:	e013      	b.n	8007098 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fcb4 	bl	80079e0 <USBD_GetStatus>
          break;
 8007078:	e00e      	b.n	8007098 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fce3 	bl	8007a48 <USBD_SetFeature>
          break;
 8007082:	e009      	b.n	8007098 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007084:	6839      	ldr	r1, [r7, #0]
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fd07 	bl	8007a9a <USBD_ClrFeature>
          break;
 800708c:	e004      	b.n	8007098 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fd5e 	bl	8007b52 <USBD_CtlError>
          break;
 8007096:	bf00      	nop
      }
      break;
 8007098:	e004      	b.n	80070a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fd58 	bl	8007b52 <USBD_CtlError>
      break;
 80070a2:	bf00      	nop
  }

  return ret;
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop

080070b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070c6:	2b40      	cmp	r3, #64	; 0x40
 80070c8:	d005      	beq.n	80070d6 <USBD_StdItfReq+0x26>
 80070ca:	2b40      	cmp	r3, #64	; 0x40
 80070cc:	d852      	bhi.n	8007174 <USBD_StdItfReq+0xc4>
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <USBD_StdItfReq+0x26>
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	d14e      	bne.n	8007174 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	3b01      	subs	r3, #1
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d840      	bhi.n	8007166 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	889b      	ldrh	r3, [r3, #4]
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d836      	bhi.n	800715c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	889b      	ldrh	r3, [r3, #4]
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	4619      	mov	r1, r3
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff ff13 	bl	8006f22 <USBD_CoreFindIF>
 80070fc:	4603      	mov	r3, r0
 80070fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	2bff      	cmp	r3, #255	; 0xff
 8007104:	d01d      	beq.n	8007142 <USBD_StdItfReq+0x92>
 8007106:	7bbb      	ldrb	r3, [r7, #14]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d11a      	bne.n	8007142 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800710c:	7bba      	ldrb	r2, [r7, #14]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	32ae      	adds	r2, #174	; 0xae
 8007112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00f      	beq.n	800713c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800711c:	7bba      	ldrb	r2, [r7, #14]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007124:	7bba      	ldrb	r2, [r7, #14]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	32ae      	adds	r2, #174	; 0xae
 800712a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	4798      	blx	r3
 8007136:	4603      	mov	r3, r0
 8007138:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800713a:	e004      	b.n	8007146 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800713c:	2303      	movs	r3, #3
 800713e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007140:	e001      	b.n	8007146 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007142:	2303      	movs	r3, #3
 8007144:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	88db      	ldrh	r3, [r3, #6]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d110      	bne.n	8007170 <USBD_StdItfReq+0xc0>
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10d      	bne.n	8007170 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fdc7 	bl	8007ce8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800715a:	e009      	b.n	8007170 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fcf7 	bl	8007b52 <USBD_CtlError>
          break;
 8007164:	e004      	b.n	8007170 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fcf2 	bl	8007b52 <USBD_CtlError>
          break;
 800716e:	e000      	b.n	8007172 <USBD_StdItfReq+0xc2>
          break;
 8007170:	bf00      	nop
      }
      break;
 8007172:	e004      	b.n	800717e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fceb 	bl	8007b52 <USBD_CtlError>
      break;
 800717c:	bf00      	nop
  }

  return ret;
 800717e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	889b      	ldrh	r3, [r3, #4]
 800719a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071a4:	2b40      	cmp	r3, #64	; 0x40
 80071a6:	d007      	beq.n	80071b8 <USBD_StdEPReq+0x30>
 80071a8:	2b40      	cmp	r3, #64	; 0x40
 80071aa:	f200 817f 	bhi.w	80074ac <USBD_StdEPReq+0x324>
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d02a      	beq.n	8007208 <USBD_StdEPReq+0x80>
 80071b2:	2b20      	cmp	r3, #32
 80071b4:	f040 817a 	bne.w	80074ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7ff febd 	bl	8006f3c <USBD_CoreFindEP>
 80071c2:	4603      	mov	r3, r0
 80071c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071c6:	7b7b      	ldrb	r3, [r7, #13]
 80071c8:	2bff      	cmp	r3, #255	; 0xff
 80071ca:	f000 8174 	beq.w	80074b6 <USBD_StdEPReq+0x32e>
 80071ce:	7b7b      	ldrb	r3, [r7, #13]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f040 8170 	bne.w	80074b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80071d6:	7b7a      	ldrb	r2, [r7, #13]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80071de:	7b7a      	ldrb	r2, [r7, #13]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	32ae      	adds	r2, #174	; 0xae
 80071e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 8163 	beq.w	80074b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80071f0:	7b7a      	ldrb	r2, [r7, #13]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	32ae      	adds	r2, #174	; 0xae
 80071f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	6839      	ldr	r1, [r7, #0]
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	4798      	blx	r3
 8007202:	4603      	mov	r3, r0
 8007204:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007206:	e156      	b.n	80074b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	785b      	ldrb	r3, [r3, #1]
 800720c:	2b03      	cmp	r3, #3
 800720e:	d008      	beq.n	8007222 <USBD_StdEPReq+0x9a>
 8007210:	2b03      	cmp	r3, #3
 8007212:	f300 8145 	bgt.w	80074a0 <USBD_StdEPReq+0x318>
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 809b 	beq.w	8007352 <USBD_StdEPReq+0x1ca>
 800721c:	2b01      	cmp	r3, #1
 800721e:	d03c      	beq.n	800729a <USBD_StdEPReq+0x112>
 8007220:	e13e      	b.n	80074a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b02      	cmp	r3, #2
 800722c:	d002      	beq.n	8007234 <USBD_StdEPReq+0xac>
 800722e:	2b03      	cmp	r3, #3
 8007230:	d016      	beq.n	8007260 <USBD_StdEPReq+0xd8>
 8007232:	e02c      	b.n	800728e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007234:	7bbb      	ldrb	r3, [r7, #14]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00d      	beq.n	8007256 <USBD_StdEPReq+0xce>
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	2b80      	cmp	r3, #128	; 0x80
 800723e:	d00a      	beq.n	8007256 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007240:	7bbb      	ldrb	r3, [r7, #14]
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 f927 	bl	8008498 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800724a:	2180      	movs	r1, #128	; 0x80
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 f923 	bl	8008498 <USBD_LL_StallEP>
 8007252:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007254:	e020      	b.n	8007298 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fc7a 	bl	8007b52 <USBD_CtlError>
              break;
 800725e:	e01b      	b.n	8007298 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	885b      	ldrh	r3, [r3, #2]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10e      	bne.n	8007286 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007268:	7bbb      	ldrb	r3, [r7, #14]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00b      	beq.n	8007286 <USBD_StdEPReq+0xfe>
 800726e:	7bbb      	ldrb	r3, [r7, #14]
 8007270:	2b80      	cmp	r3, #128	; 0x80
 8007272:	d008      	beq.n	8007286 <USBD_StdEPReq+0xfe>
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	88db      	ldrh	r3, [r3, #6]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d104      	bne.n	8007286 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800727c:	7bbb      	ldrb	r3, [r7, #14]
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f001 f909 	bl	8008498 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fd2e 	bl	8007ce8 <USBD_CtlSendStatus>

              break;
 800728c:	e004      	b.n	8007298 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fc5e 	bl	8007b52 <USBD_CtlError>
              break;
 8007296:	bf00      	nop
          }
          break;
 8007298:	e107      	b.n	80074aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d002      	beq.n	80072ac <USBD_StdEPReq+0x124>
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d016      	beq.n	80072d8 <USBD_StdEPReq+0x150>
 80072aa:	e04b      	b.n	8007344 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072ac:	7bbb      	ldrb	r3, [r7, #14]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00d      	beq.n	80072ce <USBD_StdEPReq+0x146>
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	2b80      	cmp	r3, #128	; 0x80
 80072b6:	d00a      	beq.n	80072ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072b8:	7bbb      	ldrb	r3, [r7, #14]
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 f8eb 	bl	8008498 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072c2:	2180      	movs	r1, #128	; 0x80
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 f8e7 	bl	8008498 <USBD_LL_StallEP>
 80072ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072cc:	e040      	b.n	8007350 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fc3e 	bl	8007b52 <USBD_CtlError>
              break;
 80072d6:	e03b      	b.n	8007350 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	885b      	ldrh	r3, [r3, #2]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d136      	bne.n	800734e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d004      	beq.n	80072f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072ea:	7bbb      	ldrb	r3, [r7, #14]
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f001 f8f1 	bl	80084d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fcf7 	bl	8007ce8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff fe1c 	bl	8006f3c <USBD_CoreFindEP>
 8007304:	4603      	mov	r3, r0
 8007306:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007308:	7b7b      	ldrb	r3, [r7, #13]
 800730a:	2bff      	cmp	r3, #255	; 0xff
 800730c:	d01f      	beq.n	800734e <USBD_StdEPReq+0x1c6>
 800730e:	7b7b      	ldrb	r3, [r7, #13]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d11c      	bne.n	800734e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007314:	7b7a      	ldrb	r2, [r7, #13]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800731c:	7b7a      	ldrb	r2, [r7, #13]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	32ae      	adds	r2, #174	; 0xae
 8007322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d010      	beq.n	800734e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800732c:	7b7a      	ldrb	r2, [r7, #13]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	32ae      	adds	r2, #174	; 0xae
 8007332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	4798      	blx	r3
 800733e:	4603      	mov	r3, r0
 8007340:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007342:	e004      	b.n	800734e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fc03 	bl	8007b52 <USBD_CtlError>
              break;
 800734c:	e000      	b.n	8007350 <USBD_StdEPReq+0x1c8>
              break;
 800734e:	bf00      	nop
          }
          break;
 8007350:	e0ab      	b.n	80074aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b02      	cmp	r3, #2
 800735c:	d002      	beq.n	8007364 <USBD_StdEPReq+0x1dc>
 800735e:	2b03      	cmp	r3, #3
 8007360:	d032      	beq.n	80073c8 <USBD_StdEPReq+0x240>
 8007362:	e097      	b.n	8007494 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d007      	beq.n	800737a <USBD_StdEPReq+0x1f2>
 800736a:	7bbb      	ldrb	r3, [r7, #14]
 800736c:	2b80      	cmp	r3, #128	; 0x80
 800736e:	d004      	beq.n	800737a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fbed 	bl	8007b52 <USBD_CtlError>
                break;
 8007378:	e091      	b.n	800749e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800737a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800737e:	2b00      	cmp	r3, #0
 8007380:	da0b      	bge.n	800739a <USBD_StdEPReq+0x212>
 8007382:	7bbb      	ldrb	r3, [r7, #14]
 8007384:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007388:	4613      	mov	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	3310      	adds	r3, #16
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	4413      	add	r3, r2
 8007396:	3304      	adds	r3, #4
 8007398:	e00b      	b.n	80073b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800739a:	7bbb      	ldrb	r3, [r7, #14]
 800739c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073a0:	4613      	mov	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	4413      	add	r3, r2
 80073b0:	3304      	adds	r3, #4
 80073b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2200      	movs	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2202      	movs	r2, #2
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 fc37 	bl	8007c34 <USBD_CtlSendData>
              break;
 80073c6:	e06a      	b.n	800749e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	da11      	bge.n	80073f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073d0:	7bbb      	ldrb	r3, [r7, #14]
 80073d2:	f003 020f 	and.w	r2, r3, #15
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	4613      	mov	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	440b      	add	r3, r1
 80073e2:	3324      	adds	r3, #36	; 0x24
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d117      	bne.n	800741a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fbb0 	bl	8007b52 <USBD_CtlError>
                  break;
 80073f2:	e054      	b.n	800749e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	f003 020f 	and.w	r2, r3, #15
 80073fa:	6879      	ldr	r1, [r7, #4]
 80073fc:	4613      	mov	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	440b      	add	r3, r1
 8007406:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d104      	bne.n	800741a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fb9d 	bl	8007b52 <USBD_CtlError>
                  break;
 8007418:	e041      	b.n	800749e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800741a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800741e:	2b00      	cmp	r3, #0
 8007420:	da0b      	bge.n	800743a <USBD_StdEPReq+0x2b2>
 8007422:	7bbb      	ldrb	r3, [r7, #14]
 8007424:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007428:	4613      	mov	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	3310      	adds	r3, #16
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	4413      	add	r3, r2
 8007436:	3304      	adds	r3, #4
 8007438:	e00b      	b.n	8007452 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007440:	4613      	mov	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	4413      	add	r3, r2
 8007450:	3304      	adds	r3, #4
 8007452:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007454:	7bbb      	ldrb	r3, [r7, #14]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <USBD_StdEPReq+0x2d8>
 800745a:	7bbb      	ldrb	r3, [r7, #14]
 800745c:	2b80      	cmp	r3, #128	; 0x80
 800745e:	d103      	bne.n	8007468 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2200      	movs	r2, #0
 8007464:	601a      	str	r2, [r3, #0]
 8007466:	e00e      	b.n	8007486 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007468:	7bbb      	ldrb	r3, [r7, #14]
 800746a:	4619      	mov	r1, r3
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f001 f851 	bl	8008514 <USBD_LL_IsStallEP>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d003      	beq.n	8007480 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2201      	movs	r2, #1
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	e002      	b.n	8007486 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2200      	movs	r2, #0
 8007484:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2202      	movs	r2, #2
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fbd1 	bl	8007c34 <USBD_CtlSendData>
              break;
 8007492:	e004      	b.n	800749e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fb5b 	bl	8007b52 <USBD_CtlError>
              break;
 800749c:	bf00      	nop
          }
          break;
 800749e:	e004      	b.n	80074aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fb55 	bl	8007b52 <USBD_CtlError>
          break;
 80074a8:	bf00      	nop
      }
      break;
 80074aa:	e005      	b.n	80074b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fb4f 	bl	8007b52 <USBD_CtlError>
      break;
 80074b4:	e000      	b.n	80074b8 <USBD_StdEPReq+0x330>
      break;
 80074b6:	bf00      	nop
  }

  return ret;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074d2:	2300      	movs	r3, #0
 80074d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	885b      	ldrh	r3, [r3, #2]
 80074de:	0a1b      	lsrs	r3, r3, #8
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	3b01      	subs	r3, #1
 80074e4:	2b06      	cmp	r3, #6
 80074e6:	f200 8128 	bhi.w	800773a <USBD_GetDescriptor+0x276>
 80074ea:	a201      	add	r2, pc, #4	; (adr r2, 80074f0 <USBD_GetDescriptor+0x2c>)
 80074ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f0:	0800750d 	.word	0x0800750d
 80074f4:	08007525 	.word	0x08007525
 80074f8:	08007565 	.word	0x08007565
 80074fc:	0800773b 	.word	0x0800773b
 8007500:	0800773b 	.word	0x0800773b
 8007504:	080076db 	.word	0x080076db
 8007508:	08007707 	.word	0x08007707
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	7c12      	ldrb	r2, [r2, #16]
 8007518:	f107 0108 	add.w	r1, r7, #8
 800751c:	4610      	mov	r0, r2
 800751e:	4798      	blx	r3
 8007520:	60f8      	str	r0, [r7, #12]
      break;
 8007522:	e112      	b.n	800774a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	7c1b      	ldrb	r3, [r3, #16]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10d      	bne.n	8007548 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007534:	f107 0208 	add.w	r2, r7, #8
 8007538:	4610      	mov	r0, r2
 800753a:	4798      	blx	r3
 800753c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3301      	adds	r3, #1
 8007542:	2202      	movs	r2, #2
 8007544:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007546:	e100      	b.n	800774a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800754e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007550:	f107 0208 	add.w	r2, r7, #8
 8007554:	4610      	mov	r0, r2
 8007556:	4798      	blx	r3
 8007558:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	2202      	movs	r2, #2
 8007560:	701a      	strb	r2, [r3, #0]
      break;
 8007562:	e0f2      	b.n	800774a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	885b      	ldrh	r3, [r3, #2]
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b05      	cmp	r3, #5
 800756c:	f200 80ac 	bhi.w	80076c8 <USBD_GetDescriptor+0x204>
 8007570:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <USBD_GetDescriptor+0xb4>)
 8007572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007576:	bf00      	nop
 8007578:	08007591 	.word	0x08007591
 800757c:	080075c5 	.word	0x080075c5
 8007580:	080075f9 	.word	0x080075f9
 8007584:	0800762d 	.word	0x0800762d
 8007588:	08007661 	.word	0x08007661
 800758c:	08007695 	.word	0x08007695
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00b      	beq.n	80075b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	7c12      	ldrb	r2, [r2, #16]
 80075a8:	f107 0108 	add.w	r1, r7, #8
 80075ac:	4610      	mov	r0, r2
 80075ae:	4798      	blx	r3
 80075b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075b2:	e091      	b.n	80076d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 facb 	bl	8007b52 <USBD_CtlError>
            err++;
 80075bc:	7afb      	ldrb	r3, [r7, #11]
 80075be:	3301      	adds	r3, #1
 80075c0:	72fb      	strb	r3, [r7, #11]
          break;
 80075c2:	e089      	b.n	80076d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00b      	beq.n	80075e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	7c12      	ldrb	r2, [r2, #16]
 80075dc:	f107 0108 	add.w	r1, r7, #8
 80075e0:	4610      	mov	r0, r2
 80075e2:	4798      	blx	r3
 80075e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075e6:	e077      	b.n	80076d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fab1 	bl	8007b52 <USBD_CtlError>
            err++;
 80075f0:	7afb      	ldrb	r3, [r7, #11]
 80075f2:	3301      	adds	r3, #1
 80075f4:	72fb      	strb	r3, [r7, #11]
          break;
 80075f6:	e06f      	b.n	80076d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00b      	beq.n	800761c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	7c12      	ldrb	r2, [r2, #16]
 8007610:	f107 0108 	add.w	r1, r7, #8
 8007614:	4610      	mov	r0, r2
 8007616:	4798      	blx	r3
 8007618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800761a:	e05d      	b.n	80076d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fa97 	bl	8007b52 <USBD_CtlError>
            err++;
 8007624:	7afb      	ldrb	r3, [r7, #11]
 8007626:	3301      	adds	r3, #1
 8007628:	72fb      	strb	r3, [r7, #11]
          break;
 800762a:	e055      	b.n	80076d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00b      	beq.n	8007650 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	7c12      	ldrb	r2, [r2, #16]
 8007644:	f107 0108 	add.w	r1, r7, #8
 8007648:	4610      	mov	r0, r2
 800764a:	4798      	blx	r3
 800764c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800764e:	e043      	b.n	80076d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fa7d 	bl	8007b52 <USBD_CtlError>
            err++;
 8007658:	7afb      	ldrb	r3, [r7, #11]
 800765a:	3301      	adds	r3, #1
 800765c:	72fb      	strb	r3, [r7, #11]
          break;
 800765e:	e03b      	b.n	80076d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	7c12      	ldrb	r2, [r2, #16]
 8007678:	f107 0108 	add.w	r1, r7, #8
 800767c:	4610      	mov	r0, r2
 800767e:	4798      	blx	r3
 8007680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007682:	e029      	b.n	80076d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fa63 	bl	8007b52 <USBD_CtlError>
            err++;
 800768c:	7afb      	ldrb	r3, [r7, #11]
 800768e:	3301      	adds	r3, #1
 8007690:	72fb      	strb	r3, [r7, #11]
          break;
 8007692:	e021      	b.n	80076d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00b      	beq.n	80076b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	7c12      	ldrb	r2, [r2, #16]
 80076ac:	f107 0108 	add.w	r1, r7, #8
 80076b0:	4610      	mov	r0, r2
 80076b2:	4798      	blx	r3
 80076b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076b6:	e00f      	b.n	80076d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fa49 	bl	8007b52 <USBD_CtlError>
            err++;
 80076c0:	7afb      	ldrb	r3, [r7, #11]
 80076c2:	3301      	adds	r3, #1
 80076c4:	72fb      	strb	r3, [r7, #11]
          break;
 80076c6:	e007      	b.n	80076d8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fa41 	bl	8007b52 <USBD_CtlError>
          err++;
 80076d0:	7afb      	ldrb	r3, [r7, #11]
 80076d2:	3301      	adds	r3, #1
 80076d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80076d6:	bf00      	nop
      }
      break;
 80076d8:	e037      	b.n	800774a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	7c1b      	ldrb	r3, [r3, #16]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d109      	bne.n	80076f6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ea:	f107 0208 	add.w	r2, r7, #8
 80076ee:	4610      	mov	r0, r2
 80076f0:	4798      	blx	r3
 80076f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076f4:	e029      	b.n	800774a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fa2a 	bl	8007b52 <USBD_CtlError>
        err++;
 80076fe:	7afb      	ldrb	r3, [r7, #11]
 8007700:	3301      	adds	r3, #1
 8007702:	72fb      	strb	r3, [r7, #11]
      break;
 8007704:	e021      	b.n	800774a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	7c1b      	ldrb	r3, [r3, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10d      	bne.n	800772a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007716:	f107 0208 	add.w	r2, r7, #8
 800771a:	4610      	mov	r0, r2
 800771c:	4798      	blx	r3
 800771e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	3301      	adds	r3, #1
 8007724:	2207      	movs	r2, #7
 8007726:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007728:	e00f      	b.n	800774a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fa10 	bl	8007b52 <USBD_CtlError>
        err++;
 8007732:	7afb      	ldrb	r3, [r7, #11]
 8007734:	3301      	adds	r3, #1
 8007736:	72fb      	strb	r3, [r7, #11]
      break;
 8007738:	e007      	b.n	800774a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fa08 	bl	8007b52 <USBD_CtlError>
      err++;
 8007742:	7afb      	ldrb	r3, [r7, #11]
 8007744:	3301      	adds	r3, #1
 8007746:	72fb      	strb	r3, [r7, #11]
      break;
 8007748:	bf00      	nop
  }

  if (err != 0U)
 800774a:	7afb      	ldrb	r3, [r7, #11]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d11e      	bne.n	800778e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	88db      	ldrh	r3, [r3, #6]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d016      	beq.n	8007786 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007758:	893b      	ldrh	r3, [r7, #8]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00e      	beq.n	800777c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	88da      	ldrh	r2, [r3, #6]
 8007762:	893b      	ldrh	r3, [r7, #8]
 8007764:	4293      	cmp	r3, r2
 8007766:	bf28      	it	cs
 8007768:	4613      	movcs	r3, r2
 800776a:	b29b      	uxth	r3, r3
 800776c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800776e:	893b      	ldrh	r3, [r7, #8]
 8007770:	461a      	mov	r2, r3
 8007772:	68f9      	ldr	r1, [r7, #12]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fa5d 	bl	8007c34 <USBD_CtlSendData>
 800777a:	e009      	b.n	8007790 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f9e7 	bl	8007b52 <USBD_CtlError>
 8007784:	e004      	b.n	8007790 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 faae 	bl	8007ce8 <USBD_CtlSendStatus>
 800778c:	e000      	b.n	8007790 <USBD_GetDescriptor+0x2cc>
    return;
 800778e:	bf00      	nop
  }
}
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop

08007798 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	889b      	ldrh	r3, [r3, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d131      	bne.n	800780e <USBD_SetAddress+0x76>
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	88db      	ldrh	r3, [r3, #6]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d12d      	bne.n	800780e <USBD_SetAddress+0x76>
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	885b      	ldrh	r3, [r3, #2]
 80077b6:	2b7f      	cmp	r3, #127	; 0x7f
 80077b8:	d829      	bhi.n	800780e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	885b      	ldrh	r3, [r3, #2]
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b03      	cmp	r3, #3
 80077d0:	d104      	bne.n	80077dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f9bc 	bl	8007b52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077da:	e01d      	b.n	8007818 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	7bfa      	ldrb	r2, [r7, #15]
 80077e0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 febf 	bl	800856c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fa7a 	bl	8007ce8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d004      	beq.n	8007804 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2202      	movs	r2, #2
 80077fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007802:	e009      	b.n	8007818 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800780c:	e004      	b.n	8007818 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f99e 	bl	8007b52 <USBD_CtlError>
  }
}
 8007816:	bf00      	nop
 8007818:	bf00      	nop
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	885b      	ldrh	r3, [r3, #2]
 8007832:	b2da      	uxtb	r2, r3
 8007834:	4b4e      	ldr	r3, [pc, #312]	; (8007970 <USBD_SetConfig+0x150>)
 8007836:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007838:	4b4d      	ldr	r3, [pc, #308]	; (8007970 <USBD_SetConfig+0x150>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d905      	bls.n	800784c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f985 	bl	8007b52 <USBD_CtlError>
    return USBD_FAIL;
 8007848:	2303      	movs	r3, #3
 800784a:	e08c      	b.n	8007966 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b02      	cmp	r3, #2
 8007856:	d002      	beq.n	800785e <USBD_SetConfig+0x3e>
 8007858:	2b03      	cmp	r3, #3
 800785a:	d029      	beq.n	80078b0 <USBD_SetConfig+0x90>
 800785c:	e075      	b.n	800794a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800785e:	4b44      	ldr	r3, [pc, #272]	; (8007970 <USBD_SetConfig+0x150>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d020      	beq.n	80078a8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007866:	4b42      	ldr	r3, [pc, #264]	; (8007970 <USBD_SetConfig+0x150>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	461a      	mov	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007870:	4b3f      	ldr	r3, [pc, #252]	; (8007970 <USBD_SetConfig+0x150>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	4619      	mov	r1, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7ff f821 	bl	80068be <USBD_SetClassConfig>
 800787c:	4603      	mov	r3, r0
 800787e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007880:	7bfb      	ldrb	r3, [r7, #15]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d008      	beq.n	8007898 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f962 	bl	8007b52 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2202      	movs	r2, #2
 8007892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007896:	e065      	b.n	8007964 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fa25 	bl	8007ce8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2203      	movs	r2, #3
 80078a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078a6:	e05d      	b.n	8007964 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fa1d 	bl	8007ce8 <USBD_CtlSendStatus>
      break;
 80078ae:	e059      	b.n	8007964 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80078b0:	4b2f      	ldr	r3, [pc, #188]	; (8007970 <USBD_SetConfig+0x150>)
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d112      	bne.n	80078de <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2202      	movs	r2, #2
 80078bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80078c0:	4b2b      	ldr	r3, [pc, #172]	; (8007970 <USBD_SetConfig+0x150>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078ca:	4b29      	ldr	r3, [pc, #164]	; (8007970 <USBD_SetConfig+0x150>)
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7ff f810 	bl	80068f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fa06 	bl	8007ce8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078dc:	e042      	b.n	8007964 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80078de:	4b24      	ldr	r3, [pc, #144]	; (8007970 <USBD_SetConfig+0x150>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	461a      	mov	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d02a      	beq.n	8007942 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7fe fffe 	bl	80068f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80078fa:	4b1d      	ldr	r3, [pc, #116]	; (8007970 <USBD_SetConfig+0x150>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	461a      	mov	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007904:	4b1a      	ldr	r3, [pc, #104]	; (8007970 <USBD_SetConfig+0x150>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	4619      	mov	r1, r3
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7fe ffd7 	bl	80068be <USBD_SetClassConfig>
 8007910:	4603      	mov	r3, r0
 8007912:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007914:	7bfb      	ldrb	r3, [r7, #15]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00f      	beq.n	800793a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f918 	bl	8007b52 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	b2db      	uxtb	r3, r3
 8007928:	4619      	mov	r1, r3
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7fe ffe3 	bl	80068f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007938:	e014      	b.n	8007964 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f9d4 	bl	8007ce8 <USBD_CtlSendStatus>
      break;
 8007940:	e010      	b.n	8007964 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f9d0 	bl	8007ce8 <USBD_CtlSendStatus>
      break;
 8007948:	e00c      	b.n	8007964 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f900 	bl	8007b52 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007952:	4b07      	ldr	r3, [pc, #28]	; (8007970 <USBD_SetConfig+0x150>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7fe ffcc 	bl	80068f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800795e:	2303      	movs	r3, #3
 8007960:	73fb      	strb	r3, [r7, #15]
      break;
 8007962:	bf00      	nop
  }

  return ret;
 8007964:	7bfb      	ldrb	r3, [r7, #15]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	240001b8 	.word	0x240001b8

08007974 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	88db      	ldrh	r3, [r3, #6]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d004      	beq.n	8007990 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f8e2 	bl	8007b52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800798e:	e023      	b.n	80079d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b02      	cmp	r3, #2
 800799a:	dc02      	bgt.n	80079a2 <USBD_GetConfig+0x2e>
 800799c:	2b00      	cmp	r3, #0
 800799e:	dc03      	bgt.n	80079a8 <USBD_GetConfig+0x34>
 80079a0:	e015      	b.n	80079ce <USBD_GetConfig+0x5a>
 80079a2:	2b03      	cmp	r3, #3
 80079a4:	d00b      	beq.n	80079be <USBD_GetConfig+0x4a>
 80079a6:	e012      	b.n	80079ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	3308      	adds	r3, #8
 80079b2:	2201      	movs	r2, #1
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f93c 	bl	8007c34 <USBD_CtlSendData>
        break;
 80079bc:	e00c      	b.n	80079d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	3304      	adds	r3, #4
 80079c2:	2201      	movs	r2, #1
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f934 	bl	8007c34 <USBD_CtlSendData>
        break;
 80079cc:	e004      	b.n	80079d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f8be 	bl	8007b52 <USBD_CtlError>
        break;
 80079d6:	bf00      	nop
}
 80079d8:	bf00      	nop
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	3b01      	subs	r3, #1
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d81e      	bhi.n	8007a36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	88db      	ldrh	r3, [r3, #6]
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d004      	beq.n	8007a0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f8a5 	bl	8007b52 <USBD_CtlError>
        break;
 8007a08:	e01a      	b.n	8007a40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d005      	beq.n	8007a26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	f043 0202 	orr.w	r2, r3, #2
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	330c      	adds	r3, #12
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f900 	bl	8007c34 <USBD_CtlSendData>
      break;
 8007a34:	e004      	b.n	8007a40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f88a 	bl	8007b52 <USBD_CtlError>
      break;
 8007a3e:	bf00      	nop
  }
}
 8007a40:	bf00      	nop
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	885b      	ldrh	r3, [r3, #2]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d107      	bne.n	8007a6a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f940 	bl	8007ce8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007a68:	e013      	b.n	8007a92 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	885b      	ldrh	r3, [r3, #2]
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d10b      	bne.n	8007a8a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	889b      	ldrh	r3, [r3, #4]
 8007a76:	0a1b      	lsrs	r3, r3, #8
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f930 	bl	8007ce8 <USBD_CtlSendStatus>
}
 8007a88:	e003      	b.n	8007a92 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f860 	bl	8007b52 <USBD_CtlError>
}
 8007a92:	bf00      	nop
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b082      	sub	sp, #8
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	3b01      	subs	r3, #1
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d80b      	bhi.n	8007aca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	885b      	ldrh	r3, [r3, #2]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d10c      	bne.n	8007ad4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f910 	bl	8007ce8 <USBD_CtlSendStatus>
      }
      break;
 8007ac8:	e004      	b.n	8007ad4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f840 	bl	8007b52 <USBD_CtlError>
      break;
 8007ad2:	e000      	b.n	8007ad6 <USBD_ClrFeature+0x3c>
      break;
 8007ad4:	bf00      	nop
  }
}
 8007ad6:	bf00      	nop
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b084      	sub	sp, #16
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	781a      	ldrb	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	3301      	adds	r3, #1
 8007af8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	781a      	ldrb	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	3301      	adds	r3, #1
 8007b06:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f7ff fa41 	bl	8006f90 <SWAPBYTE>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	461a      	mov	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f7ff fa34 	bl	8006f90 <SWAPBYTE>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	3301      	adds	r3, #1
 8007b34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f7ff fa27 	bl	8006f90 <SWAPBYTE>
 8007b42:	4603      	mov	r3, r0
 8007b44:	461a      	mov	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	80da      	strh	r2, [r3, #6]
}
 8007b4a:	bf00      	nop
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b082      	sub	sp, #8
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b5c:	2180      	movs	r1, #128	; 0x80
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fc9a 	bl	8008498 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b64:	2100      	movs	r1, #0
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fc96 	bl	8008498 <USBD_LL_StallEP>
}
 8007b6c:	bf00      	nop
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b80:	2300      	movs	r3, #0
 8007b82:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d036      	beq.n	8007bf8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007b8e:	6938      	ldr	r0, [r7, #16]
 8007b90:	f000 f836 	bl	8007c00 <USBD_GetLen>
 8007b94:	4603      	mov	r3, r0
 8007b96:	3301      	adds	r3, #1
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	005b      	lsls	r3, r3, #1
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	7812      	ldrb	r2, [r2, #0]
 8007bac:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007bb4:	7dfb      	ldrb	r3, [r7, #23]
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	4413      	add	r3, r2
 8007bba:	2203      	movs	r2, #3
 8007bbc:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007bc4:	e013      	b.n	8007bee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	4413      	add	r3, r2
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	7812      	ldrb	r2, [r2, #0]
 8007bd0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	613b      	str	r3, [r7, #16]
    idx++;
 8007bd8:	7dfb      	ldrb	r3, [r7, #23]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007bde:	7dfb      	ldrb	r3, [r7, #23]
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	4413      	add	r3, r2
 8007be4:	2200      	movs	r2, #0
 8007be6:	701a      	strb	r2, [r3, #0]
    idx++;
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	3301      	adds	r3, #1
 8007bec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e7      	bne.n	8007bc6 <USBD_GetString+0x52>
 8007bf6:	e000      	b.n	8007bfa <USBD_GetString+0x86>
    return;
 8007bf8:	bf00      	nop
  }
}
 8007bfa:	3718      	adds	r7, #24
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c10:	e005      	b.n	8007c1e <USBD_GetLen+0x1e>
  {
    len++;
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
 8007c14:	3301      	adds	r3, #1
 8007c16:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1f5      	bne.n	8007c12 <USBD_GetLen+0x12>
  }

  return len;
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	2100      	movs	r1, #0
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 fca5 	bl	80085aa <USBD_LL_Transmit>

  return USBD_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	60f8      	str	r0, [r7, #12]
 8007c72:	60b9      	str	r1, [r7, #8]
 8007c74:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 fc94 	bl	80085aa <USBD_LL_Transmit>

  return USBD_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2203      	movs	r2, #3
 8007c9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 fc98 	bl	80085ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b084      	sub	sp, #16
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	60b9      	str	r1, [r7, #8]
 8007cd0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 fc87 	bl	80085ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2204      	movs	r2, #4
 8007cf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fc53 	bl	80085aa <USBD_LL_Transmit>

  return USBD_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b082      	sub	sp, #8
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2205      	movs	r2, #5
 8007d1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d1e:	2300      	movs	r3, #0
 8007d20:	2200      	movs	r2, #0
 8007d22:	2100      	movs	r1, #0
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fc61 	bl	80085ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8007d38:	2201      	movs	r2, #1
 8007d3a:	4913      	ldr	r1, [pc, #76]	; (8007d88 <MX_USB_DEVICE_Init+0x54>)
 8007d3c:	4813      	ldr	r0, [pc, #76]	; (8007d8c <MX_USB_DEVICE_Init+0x58>)
 8007d3e:	f7fe fd25 	bl	800678c <USBD_Init>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d48:	f7f8 fd16 	bl	8000778 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_AUDIO) != USBD_OK)
 8007d4c:	4910      	ldr	r1, [pc, #64]	; (8007d90 <MX_USB_DEVICE_Init+0x5c>)
 8007d4e:	480f      	ldr	r0, [pc, #60]	; (8007d8c <MX_USB_DEVICE_Init+0x58>)
 8007d50:	f7fe fd5a 	bl	8006808 <USBD_RegisterClass>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d001      	beq.n	8007d5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d5a:	f7f8 fd0d 	bl	8000778 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceHS, &USBD_AUDIO_fops_HS) != USBD_OK)
 8007d5e:	490d      	ldr	r1, [pc, #52]	; (8007d94 <MX_USB_DEVICE_Init+0x60>)
 8007d60:	480a      	ldr	r0, [pc, #40]	; (8007d8c <MX_USB_DEVICE_Init+0x58>)
 8007d62:	f7fe fcc5 	bl	80066f0 <USBD_AUDIO_RegisterInterface>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d001      	beq.n	8007d70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d6c:	f7f8 fd04 	bl	8000778 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8007d70:	4806      	ldr	r0, [pc, #24]	; (8007d8c <MX_USB_DEVICE_Init+0x58>)
 8007d72:	f7fe fd8d 	bl	8006890 <USBD_Start>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d7c:	f7f8 fcfc 	bl	8000778 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8007d80:	f7fa fd2a 	bl	80027d8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d84:	bf00      	nop
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	240000e0 	.word	0x240000e0
 8007d8c:	240001bc 	.word	0x240001bc
 8007d90:	24000010 	.word	0x24000010
 8007d94:	240000c4 	.word	0x240000c4

08007d98 <AUDIO_Init_HS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_HS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 9 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 8007da4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <AUDIO_DeInit_HS>:
  * @brief  DeInitializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_HS(uint32_t options)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 10 */
  UNUSED(options);
  return (USBD_OK);
 8007dba:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <AUDIO_AudioCmd_HS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_HS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 11 */
  switch(cmd)
 8007dd6:	79fb      	ldrb	r3, [r7, #7]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d001      	beq.n	8007de0 <AUDIO_AudioCmd_HS+0x18>
 8007ddc:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 8007dde:	e000      	b.n	8007de2 <AUDIO_AudioCmd_HS+0x1a>
    break;
 8007de0:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8007de2:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <AUDIO_VolumeCtl_HS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_HS(uint8_t vol)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	4603      	mov	r3, r0
 8007df8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 12 */
  UNUSED(vol);
  return (USBD_OK);
 8007dfa:	2300      	movs	r3, #0
  /* USER CODE END 12 */
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <AUDIO_MuteCtl_HS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_HS(uint8_t cmd)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	4603      	mov	r3, r0
 8007e10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 13 */
  UNUSED(cmd);
  return (USBD_OK);
 8007e12:	2300      	movs	r3, #0
  /* USER CODE END 13 */
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <AUDIO_PeriodicTC_HS>:
  * @brief  AUDIO_PeriodicTC_HS
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_HS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 14 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8007e2e:	2300      	movs	r3, #0
  /* USER CODE END 14 */
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <AUDIO_GetState_HS>:
/**
  * @brief  Gets AUDIO state.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_HS(void)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 15 */
  return (USBD_OK);
 8007e40:	2300      	movs	r3, #0
  /* USER CODE END 15 */
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	4603      	mov	r3, r0
 8007e54:	6039      	str	r1, [r7, #0]
 8007e56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2212      	movs	r2, #18
 8007e5c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8007e5e:	4b03      	ldr	r3, [pc, #12]	; (8007e6c <USBD_HS_DeviceDescriptor+0x20>)
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	240000fc 	.word	0x240000fc

08007e70 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	4603      	mov	r3, r0
 8007e78:	6039      	str	r1, [r7, #0]
 8007e7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	2204      	movs	r2, #4
 8007e80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e82:	4b03      	ldr	r3, [pc, #12]	; (8007e90 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	24000110 	.word	0x24000110

08007e94 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	6039      	str	r1, [r7, #0]
 8007e9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ea0:	79fb      	ldrb	r3, [r7, #7]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d105      	bne.n	8007eb2 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	4907      	ldr	r1, [pc, #28]	; (8007ec8 <USBD_HS_ProductStrDescriptor+0x34>)
 8007eaa:	4808      	ldr	r0, [pc, #32]	; (8007ecc <USBD_HS_ProductStrDescriptor+0x38>)
 8007eac:	f7ff fe62 	bl	8007b74 <USBD_GetString>
 8007eb0:	e004      	b.n	8007ebc <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	4904      	ldr	r1, [pc, #16]	; (8007ec8 <USBD_HS_ProductStrDescriptor+0x34>)
 8007eb6:	4805      	ldr	r0, [pc, #20]	; (8007ecc <USBD_HS_ProductStrDescriptor+0x38>)
 8007eb8:	f7ff fe5c 	bl	8007b74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ebc:	4b02      	ldr	r3, [pc, #8]	; (8007ec8 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	24000498 	.word	0x24000498
 8007ecc:	08009f78 	.word	0x08009f78

08007ed0 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	6039      	str	r1, [r7, #0]
 8007eda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	4904      	ldr	r1, [pc, #16]	; (8007ef0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8007ee0:	4804      	ldr	r0, [pc, #16]	; (8007ef4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8007ee2:	f7ff fe47 	bl	8007b74 <USBD_GetString>
  return USBD_StrDesc;
 8007ee6:	4b02      	ldr	r3, [pc, #8]	; (8007ef0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	24000498 	.word	0x24000498
 8007ef4:	08009f90 	.word	0x08009f90

08007ef8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	4603      	mov	r3, r0
 8007f00:	6039      	str	r1, [r7, #0]
 8007f02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	221a      	movs	r2, #26
 8007f08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f0a:	f000 f843 	bl	8007f94 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8007f0e:	4b02      	ldr	r3, [pc, #8]	; (8007f18 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	24000114 	.word	0x24000114

08007f1c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	4603      	mov	r3, r0
 8007f24:	6039      	str	r1, [r7, #0]
 8007f26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f28:	79fb      	ldrb	r3, [r7, #7]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d105      	bne.n	8007f3a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	4907      	ldr	r1, [pc, #28]	; (8007f50 <USBD_HS_ConfigStrDescriptor+0x34>)
 8007f32:	4808      	ldr	r0, [pc, #32]	; (8007f54 <USBD_HS_ConfigStrDescriptor+0x38>)
 8007f34:	f7ff fe1e 	bl	8007b74 <USBD_GetString>
 8007f38:	e004      	b.n	8007f44 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	4904      	ldr	r1, [pc, #16]	; (8007f50 <USBD_HS_ConfigStrDescriptor+0x34>)
 8007f3e:	4805      	ldr	r0, [pc, #20]	; (8007f54 <USBD_HS_ConfigStrDescriptor+0x38>)
 8007f40:	f7ff fe18 	bl	8007b74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f44:	4b02      	ldr	r3, [pc, #8]	; (8007f50 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	24000498 	.word	0x24000498
 8007f54:	08009fa4 	.word	0x08009fa4

08007f58 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	6039      	str	r1, [r7, #0]
 8007f62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f64:	79fb      	ldrb	r3, [r7, #7]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d105      	bne.n	8007f76 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	4907      	ldr	r1, [pc, #28]	; (8007f8c <USBD_HS_InterfaceStrDescriptor+0x34>)
 8007f6e:	4808      	ldr	r0, [pc, #32]	; (8007f90 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8007f70:	f7ff fe00 	bl	8007b74 <USBD_GetString>
 8007f74:	e004      	b.n	8007f80 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	4904      	ldr	r1, [pc, #16]	; (8007f8c <USBD_HS_InterfaceStrDescriptor+0x34>)
 8007f7a:	4805      	ldr	r0, [pc, #20]	; (8007f90 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8007f7c:	f7ff fdfa 	bl	8007b74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f80:	4b02      	ldr	r3, [pc, #8]	; (8007f8c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	24000498 	.word	0x24000498
 8007f90:	08009fb4 	.word	0x08009fb4

08007f94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f9a:	4b0f      	ldr	r3, [pc, #60]	; (8007fd8 <Get_SerialNum+0x44>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007fa0:	4b0e      	ldr	r3, [pc, #56]	; (8007fdc <Get_SerialNum+0x48>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007fa6:	4b0e      	ldr	r3, [pc, #56]	; (8007fe0 <Get_SerialNum+0x4c>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d009      	beq.n	8007fce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007fba:	2208      	movs	r2, #8
 8007fbc:	4909      	ldr	r1, [pc, #36]	; (8007fe4 <Get_SerialNum+0x50>)
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f000 f814 	bl	8007fec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007fc4:	2204      	movs	r2, #4
 8007fc6:	4908      	ldr	r1, [pc, #32]	; (8007fe8 <Get_SerialNum+0x54>)
 8007fc8:	68b8      	ldr	r0, [r7, #8]
 8007fca:	f000 f80f 	bl	8007fec <IntToUnicode>
  }
}
 8007fce:	bf00      	nop
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	1ff1e800 	.word	0x1ff1e800
 8007fdc:	1ff1e804 	.word	0x1ff1e804
 8007fe0:	1ff1e808 	.word	0x1ff1e808
 8007fe4:	24000116 	.word	0x24000116
 8007fe8:	24000126 	.word	0x24000126

08007fec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ffe:	2300      	movs	r3, #0
 8008000:	75fb      	strb	r3, [r7, #23]
 8008002:	e027      	b.n	8008054 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	0f1b      	lsrs	r3, r3, #28
 8008008:	2b09      	cmp	r3, #9
 800800a:	d80b      	bhi.n	8008024 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	0f1b      	lsrs	r3, r3, #28
 8008010:	b2da      	uxtb	r2, r3
 8008012:	7dfb      	ldrb	r3, [r7, #23]
 8008014:	005b      	lsls	r3, r3, #1
 8008016:	4619      	mov	r1, r3
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	440b      	add	r3, r1
 800801c:	3230      	adds	r2, #48	; 0x30
 800801e:	b2d2      	uxtb	r2, r2
 8008020:	701a      	strb	r2, [r3, #0]
 8008022:	e00a      	b.n	800803a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	0f1b      	lsrs	r3, r3, #28
 8008028:	b2da      	uxtb	r2, r3
 800802a:	7dfb      	ldrb	r3, [r7, #23]
 800802c:	005b      	lsls	r3, r3, #1
 800802e:	4619      	mov	r1, r3
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	440b      	add	r3, r1
 8008034:	3237      	adds	r2, #55	; 0x37
 8008036:	b2d2      	uxtb	r2, r2
 8008038:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008040:	7dfb      	ldrb	r3, [r7, #23]
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	3301      	adds	r3, #1
 8008046:	68ba      	ldr	r2, [r7, #8]
 8008048:	4413      	add	r3, r2
 800804a:	2200      	movs	r2, #0
 800804c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	3301      	adds	r3, #1
 8008052:	75fb      	strb	r3, [r7, #23]
 8008054:	7dfa      	ldrb	r2, [r7, #23]
 8008056:	79fb      	ldrb	r3, [r7, #7]
 8008058:	429a      	cmp	r2, r3
 800805a:	d3d3      	bcc.n	8008004 <IntToUnicode+0x18>
  }
}
 800805c:	bf00      	nop
 800805e:	bf00      	nop
 8008060:	371c      	adds	r7, #28
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
	...

0800806c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b0b6      	sub	sp, #216	; 0xd8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008074:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008078:	2200      	movs	r2, #0
 800807a:	601a      	str	r2, [r3, #0]
 800807c:	605a      	str	r2, [r3, #4]
 800807e:	609a      	str	r2, [r3, #8]
 8008080:	60da      	str	r2, [r3, #12]
 8008082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008084:	f107 0310 	add.w	r3, r7, #16
 8008088:	22b4      	movs	r2, #180	; 0xb4
 800808a:	2100      	movs	r1, #0
 800808c:	4618      	mov	r0, r3
 800808e:	f000 fb4f 	bl	8008730 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a2b      	ldr	r2, [pc, #172]	; (8008144 <HAL_PCD_MspInit+0xd8>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d14e      	bne.n	800813a <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800809c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80080a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80080a2:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80080a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80080aa:	f107 0310 	add.w	r3, r7, #16
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fb fab0 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80080ba:	f7f8 fb5d 	bl	8000778 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80080be:	f7fa fb8b 	bl	80027d8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080c2:	4b21      	ldr	r3, [pc, #132]	; (8008148 <HAL_PCD_MspInit+0xdc>)
 80080c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080c8:	4a1f      	ldr	r2, [pc, #124]	; (8008148 <HAL_PCD_MspInit+0xdc>)
 80080ca:	f043 0301 	orr.w	r3, r3, #1
 80080ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80080d2:	4b1d      	ldr	r3, [pc, #116]	; (8008148 <HAL_PCD_MspInit+0xdc>)
 80080d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	60fb      	str	r3, [r7, #12]
 80080de:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA10     ------> USB_OTG_HS_ID
    */
    GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80080e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080e8:	2302      	movs	r3, #2
 80080ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080f4:	2300      	movs	r3, #0
 80080f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80080fa:	230a      	movs	r3, #10
 80080fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8008100:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008104:	4619      	mov	r1, r3
 8008106:	4811      	ldr	r0, [pc, #68]	; (800814c <HAL_PCD_MspInit+0xe0>)
 8008108:	f7f8 fe96 	bl	8000e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800810c:	4b0e      	ldr	r3, [pc, #56]	; (8008148 <HAL_PCD_MspInit+0xdc>)
 800810e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008112:	4a0d      	ldr	r2, [pc, #52]	; (8008148 <HAL_PCD_MspInit+0xdc>)
 8008114:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008118:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800811c:	4b0a      	ldr	r3, [pc, #40]	; (8008148 <HAL_PCD_MspInit+0xdc>)
 800811e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008126:	60bb      	str	r3, [r7, #8]
 8008128:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800812a:	2200      	movs	r2, #0
 800812c:	2100      	movs	r1, #0
 800812e:	204d      	movs	r0, #77	; 0x4d
 8008130:	f7f8 fe4d 	bl	8000dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8008134:	204d      	movs	r0, #77	; 0x4d
 8008136:	f7f8 fe64 	bl	8000e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800813a:	bf00      	nop
 800813c:	37d8      	adds	r7, #216	; 0xd8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	40040000 	.word	0x40040000
 8008148:	58024400 	.word	0x58024400
 800814c:	58020000 	.word	0x58020000

08008150 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008164:	4619      	mov	r1, r3
 8008166:	4610      	mov	r0, r2
 8008168:	f7fe fbdf 	bl	800692a <USBD_LL_SetupStage>
}
 800816c:	bf00      	nop
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	460b      	mov	r3, r1
 800817e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008186:	78fa      	ldrb	r2, [r7, #3]
 8008188:	6879      	ldr	r1, [r7, #4]
 800818a:	4613      	mov	r3, r2
 800818c:	00db      	lsls	r3, r3, #3
 800818e:	4413      	add	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	440b      	add	r3, r1
 8008194:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	78fb      	ldrb	r3, [r7, #3]
 800819c:	4619      	mov	r1, r3
 800819e:	f7fe fc19 	bl	80069d4 <USBD_LL_DataOutStage>
}
 80081a2:	bf00      	nop
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b082      	sub	sp, #8
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	460b      	mov	r3, r1
 80081b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80081bc:	78fa      	ldrb	r2, [r7, #3]
 80081be:	6879      	ldr	r1, [r7, #4]
 80081c0:	4613      	mov	r3, r2
 80081c2:	00db      	lsls	r3, r3, #3
 80081c4:	4413      	add	r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	440b      	add	r3, r1
 80081ca:	334c      	adds	r3, #76	; 0x4c
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	78fb      	ldrb	r3, [r7, #3]
 80081d0:	4619      	mov	r1, r3
 80081d2:	f7fe fcb2 	bl	8006b3a <USBD_LL_DataInStage>
}
 80081d6:	bf00      	nop
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fe fde6 	bl	8006dbe <USBD_LL_SOF>
}
 80081f2:	bf00      	nop
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b084      	sub	sp, #16
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008202:	2301      	movs	r3, #1
 8008204:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d102      	bne.n	8008214 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800820e:	2300      	movs	r3, #0
 8008210:	73fb      	strb	r3, [r7, #15]
 8008212:	e008      	b.n	8008226 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	2b02      	cmp	r3, #2
 800821a:	d102      	bne.n	8008222 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800821c:	2301      	movs	r3, #1
 800821e:	73fb      	strb	r3, [r7, #15]
 8008220:	e001      	b.n	8008226 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008222:	f7f8 faa9 	bl	8000778 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800822c:	7bfa      	ldrb	r2, [r7, #15]
 800822e:	4611      	mov	r1, r2
 8008230:	4618      	mov	r0, r3
 8008232:	f7fe fd86 	bl	8006d42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800823c:	4618      	mov	r0, r3
 800823e:	f7fe fd2e 	bl	8006c9e <USBD_LL_Reset>
}
 8008242:	bf00      	nop
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
	...

0800824c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800825a:	4618      	mov	r0, r3
 800825c:	f7fe fd81 	bl	8006d62 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	6812      	ldr	r2, [r2, #0]
 800826e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008272:	f043 0301 	orr.w	r3, r3, #1
 8008276:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d005      	beq.n	800828c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008280:	4b04      	ldr	r3, [pc, #16]	; (8008294 <HAL_PCD_SuspendCallback+0x48>)
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	4a03      	ldr	r2, [pc, #12]	; (8008294 <HAL_PCD_SuspendCallback+0x48>)
 8008286:	f043 0306 	orr.w	r3, r3, #6
 800828a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	e000ed00 	.word	0xe000ed00

08008298 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7fe fd71 	bl	8006d8e <USBD_LL_Resume>
}
 80082ac:	bf00      	nop
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082c6:	78fa      	ldrb	r2, [r7, #3]
 80082c8:	4611      	mov	r1, r2
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fe fdc9 	bl	8006e62 <USBD_LL_IsoOUTIncomplete>
}
 80082d0:	bf00      	nop
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082ea:	78fa      	ldrb	r2, [r7, #3]
 80082ec:	4611      	mov	r1, r2
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fe fd85 	bl	8006dfe <USBD_LL_IsoINIncomplete>
}
 80082f4:	bf00      	nop
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800830a:	4618      	mov	r0, r3
 800830c:	f7fe fddb 	bl	8006ec6 <USBD_LL_DevConnected>
}
 8008310:	bf00      	nop
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008326:	4618      	mov	r0, r3
 8008328:	f7fe fdd8 	bl	8006edc <USBD_LL_DevDisconnected>
}
 800832c:	bf00      	nop
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d140      	bne.n	80083c6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8008344:	4a22      	ldr	r2, [pc, #136]	; (80083d0 <USBD_LL_Init+0x9c>)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a20      	ldr	r2, [pc, #128]	; (80083d0 <USBD_LL_Init+0x9c>)
 8008350:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008354:	4b1e      	ldr	r3, [pc, #120]	; (80083d0 <USBD_LL_Init+0x9c>)
 8008356:	4a1f      	ldr	r2, [pc, #124]	; (80083d4 <USBD_LL_Init+0xa0>)
 8008358:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800835a:	4b1d      	ldr	r3, [pc, #116]	; (80083d0 <USBD_LL_Init+0x9c>)
 800835c:	2209      	movs	r2, #9
 800835e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8008360:	4b1b      	ldr	r3, [pc, #108]	; (80083d0 <USBD_LL_Init+0x9c>)
 8008362:	2202      	movs	r2, #2
 8008364:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = ENABLE;
 8008366:	4b1a      	ldr	r3, [pc, #104]	; (80083d0 <USBD_LL_Init+0x9c>)
 8008368:	2201      	movs	r2, #1
 800836a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800836c:	4b18      	ldr	r3, [pc, #96]	; (80083d0 <USBD_LL_Init+0x9c>)
 800836e:	2202      	movs	r2, #2
 8008370:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8008372:	4b17      	ldr	r3, [pc, #92]	; (80083d0 <USBD_LL_Init+0x9c>)
 8008374:	2200      	movs	r2, #0
 8008376:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8008378:	4b15      	ldr	r3, [pc, #84]	; (80083d0 <USBD_LL_Init+0x9c>)
 800837a:	2200      	movs	r2, #0
 800837c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800837e:	4b14      	ldr	r3, [pc, #80]	; (80083d0 <USBD_LL_Init+0x9c>)
 8008380:	2200      	movs	r2, #0
 8008382:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8008384:	4b12      	ldr	r3, [pc, #72]	; (80083d0 <USBD_LL_Init+0x9c>)
 8008386:	2200      	movs	r2, #0
 8008388:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800838a:	4b11      	ldr	r3, [pc, #68]	; (80083d0 <USBD_LL_Init+0x9c>)
 800838c:	2200      	movs	r2, #0
 800838e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8008390:	4b0f      	ldr	r3, [pc, #60]	; (80083d0 <USBD_LL_Init+0x9c>)
 8008392:	2200      	movs	r2, #0
 8008394:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8008396:	480e      	ldr	r0, [pc, #56]	; (80083d0 <USBD_LL_Init+0x9c>)
 8008398:	f7f8 ff0f 	bl	80011ba <HAL_PCD_Init>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80083a2:	f7f8 f9e9 	bl	8000778 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80083a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80083aa:	4809      	ldr	r0, [pc, #36]	; (80083d0 <USBD_LL_Init+0x9c>)
 80083ac:	f7fa f999 	bl	80026e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80083b0:	2280      	movs	r2, #128	; 0x80
 80083b2:	2100      	movs	r1, #0
 80083b4:	4806      	ldr	r0, [pc, #24]	; (80083d0 <USBD_LL_Init+0x9c>)
 80083b6:	f7fa f94d 	bl	8002654 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80083ba:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80083be:	2101      	movs	r1, #1
 80083c0:	4803      	ldr	r0, [pc, #12]	; (80083d0 <USBD_LL_Init+0x9c>)
 80083c2:	f7fa f947 	bl	8002654 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	24000c98 	.word	0x24000c98
 80083d4:	40040000 	.word	0x40040000

080083d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7f9 f807 	bl	8001402 <HAL_PCD_Start>
 80083f4:	4603      	mov	r3, r0
 80083f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 f942 	bl	8008684 <USBD_Get_USB_Status>
 8008400:	4603      	mov	r3, r0
 8008402:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008404:	7bbb      	ldrb	r3, [r7, #14]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	4608      	mov	r0, r1
 8008418:	4611      	mov	r1, r2
 800841a:	461a      	mov	r2, r3
 800841c:	4603      	mov	r3, r0
 800841e:	70fb      	strb	r3, [r7, #3]
 8008420:	460b      	mov	r3, r1
 8008422:	70bb      	strb	r3, [r7, #2]
 8008424:	4613      	mov	r3, r2
 8008426:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008428:	2300      	movs	r3, #0
 800842a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008436:	78bb      	ldrb	r3, [r7, #2]
 8008438:	883a      	ldrh	r2, [r7, #0]
 800843a:	78f9      	ldrb	r1, [r7, #3]
 800843c:	f7f9 fd05 	bl	8001e4a <HAL_PCD_EP_Open>
 8008440:	4603      	mov	r3, r0
 8008442:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008444:	7bfb      	ldrb	r3, [r7, #15]
 8008446:	4618      	mov	r0, r3
 8008448:	f000 f91c 	bl	8008684 <USBD_Get_USB_Status>
 800844c:	4603      	mov	r3, r0
 800844e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008450:	7bbb      	ldrb	r3, [r7, #14]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	460b      	mov	r3, r1
 8008464:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008474:	78fa      	ldrb	r2, [r7, #3]
 8008476:	4611      	mov	r1, r2
 8008478:	4618      	mov	r0, r3
 800847a:	f7f9 fd4e 	bl	8001f1a <HAL_PCD_EP_Close>
 800847e:	4603      	mov	r3, r0
 8008480:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008482:	7bfb      	ldrb	r3, [r7, #15]
 8008484:	4618      	mov	r0, r3
 8008486:	f000 f8fd 	bl	8008684 <USBD_Get_USB_Status>
 800848a:	4603      	mov	r3, r0
 800848c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800848e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	460b      	mov	r3, r1
 80084a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084b2:	78fa      	ldrb	r2, [r7, #3]
 80084b4:	4611      	mov	r1, r2
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7f9 fe26 	bl	8002108 <HAL_PCD_EP_SetStall>
 80084bc:	4603      	mov	r3, r0
 80084be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 f8de 	bl	8008684 <USBD_Get_USB_Status>
 80084c8:	4603      	mov	r3, r0
 80084ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b084      	sub	sp, #16
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	460b      	mov	r3, r1
 80084e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084f0:	78fa      	ldrb	r2, [r7, #3]
 80084f2:	4611      	mov	r1, r2
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7f9 fe6b 	bl	80021d0 <HAL_PCD_EP_ClrStall>
 80084fa:	4603      	mov	r3, r0
 80084fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084fe:	7bfb      	ldrb	r3, [r7, #15]
 8008500:	4618      	mov	r0, r3
 8008502:	f000 f8bf 	bl	8008684 <USBD_Get_USB_Status>
 8008506:	4603      	mov	r3, r0
 8008508:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800850a:	7bbb      	ldrb	r3, [r7, #14]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008526:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008528:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800852c:	2b00      	cmp	r3, #0
 800852e:	da0b      	bge.n	8008548 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008530:	78fb      	ldrb	r3, [r7, #3]
 8008532:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008536:	68f9      	ldr	r1, [r7, #12]
 8008538:	4613      	mov	r3, r2
 800853a:	00db      	lsls	r3, r3, #3
 800853c:	4413      	add	r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	440b      	add	r3, r1
 8008542:	333e      	adds	r3, #62	; 0x3e
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	e00b      	b.n	8008560 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008548:	78fb      	ldrb	r3, [r7, #3]
 800854a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800854e:	68f9      	ldr	r1, [r7, #12]
 8008550:	4613      	mov	r3, r2
 8008552:	00db      	lsls	r3, r3, #3
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	440b      	add	r3, r1
 800855a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800855e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008560:	4618      	mov	r0, r3
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	460b      	mov	r3, r1
 8008576:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008586:	78fa      	ldrb	r2, [r7, #3]
 8008588:	4611      	mov	r1, r2
 800858a:	4618      	mov	r0, r3
 800858c:	f7f9 fc38 	bl	8001e00 <HAL_PCD_SetAddress>
 8008590:	4603      	mov	r3, r0
 8008592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008594:	7bfb      	ldrb	r3, [r7, #15]
 8008596:	4618      	mov	r0, r3
 8008598:	f000 f874 	bl	8008684 <USBD_Get_USB_Status>
 800859c:	4603      	mov	r3, r0
 800859e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b086      	sub	sp, #24
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	60f8      	str	r0, [r7, #12]
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	603b      	str	r3, [r7, #0]
 80085b6:	460b      	mov	r3, r1
 80085b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80085c8:	7af9      	ldrb	r1, [r7, #11]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	f7f9 fd51 	bl	8002074 <HAL_PCD_EP_Transmit>
 80085d2:	4603      	mov	r3, r0
 80085d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085d6:	7dfb      	ldrb	r3, [r7, #23]
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 f853 	bl	8008684 <USBD_Get_USB_Status>
 80085de:	4603      	mov	r3, r0
 80085e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b086      	sub	sp, #24
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	607a      	str	r2, [r7, #4]
 80085f6:	603b      	str	r3, [r7, #0]
 80085f8:	460b      	mov	r3, r1
 80085fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800860a:	7af9      	ldrb	r1, [r7, #11]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	f7f9 fccd 	bl	8001fae <HAL_PCD_EP_Receive>
 8008614:	4603      	mov	r3, r0
 8008616:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008618:	7dfb      	ldrb	r3, [r7, #23]
 800861a:	4618      	mov	r0, r3
 800861c:	f000 f832 	bl	8008684 <USBD_Get_USB_Status>
 8008620:	4603      	mov	r3, r0
 8008622:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008624:	7dbb      	ldrb	r3, [r7, #22]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3718      	adds	r7, #24
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b082      	sub	sp, #8
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	460b      	mov	r3, r1
 8008638:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008640:	78fa      	ldrb	r2, [r7, #3]
 8008642:	4611      	mov	r1, r2
 8008644:	4618      	mov	r0, r3
 8008646:	f7f9 fcfd 	bl	8002044 <HAL_PCD_EP_GetRxCount>
 800864a:	4603      	mov	r3, r0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800865c:	4b03      	ldr	r3, [pc, #12]	; (800866c <USBD_static_malloc+0x18>)
}
 800865e:	4618      	mov	r0, r3
 8008660:	370c      	adds	r7, #12
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	240011a4 	.word	0x240011a4

08008670 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]

}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	4603      	mov	r3, r0
 800868c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008692:	79fb      	ldrb	r3, [r7, #7]
 8008694:	2b03      	cmp	r3, #3
 8008696:	d817      	bhi.n	80086c8 <USBD_Get_USB_Status+0x44>
 8008698:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <USBD_Get_USB_Status+0x1c>)
 800869a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869e:	bf00      	nop
 80086a0:	080086b1 	.word	0x080086b1
 80086a4:	080086b7 	.word	0x080086b7
 80086a8:	080086bd 	.word	0x080086bd
 80086ac:	080086c3 	.word	0x080086c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	73fb      	strb	r3, [r7, #15]
    break;
 80086b4:	e00b      	b.n	80086ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086b6:	2303      	movs	r3, #3
 80086b8:	73fb      	strb	r3, [r7, #15]
    break;
 80086ba:	e008      	b.n	80086ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086bc:	2301      	movs	r3, #1
 80086be:	73fb      	strb	r3, [r7, #15]
    break;
 80086c0:	e005      	b.n	80086ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086c2:	2303      	movs	r3, #3
 80086c4:	73fb      	strb	r3, [r7, #15]
    break;
 80086c6:	e002      	b.n	80086ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80086c8:	2303      	movs	r3, #3
 80086ca:	73fb      	strb	r3, [r7, #15]
    break;
 80086cc:	bf00      	nop
  }
  return usb_status;
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <__errno>:
 80086dc:	4b01      	ldr	r3, [pc, #4]	; (80086e4 <__errno+0x8>)
 80086de:	6818      	ldr	r0, [r3, #0]
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	24000130 	.word	0x24000130

080086e8 <__libc_init_array>:
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	4d0d      	ldr	r5, [pc, #52]	; (8008720 <__libc_init_array+0x38>)
 80086ec:	4c0d      	ldr	r4, [pc, #52]	; (8008724 <__libc_init_array+0x3c>)
 80086ee:	1b64      	subs	r4, r4, r5
 80086f0:	10a4      	asrs	r4, r4, #2
 80086f2:	2600      	movs	r6, #0
 80086f4:	42a6      	cmp	r6, r4
 80086f6:	d109      	bne.n	800870c <__libc_init_array+0x24>
 80086f8:	4d0b      	ldr	r5, [pc, #44]	; (8008728 <__libc_init_array+0x40>)
 80086fa:	4c0c      	ldr	r4, [pc, #48]	; (800872c <__libc_init_array+0x44>)
 80086fc:	f001 f80c 	bl	8009718 <_init>
 8008700:	1b64      	subs	r4, r4, r5
 8008702:	10a4      	asrs	r4, r4, #2
 8008704:	2600      	movs	r6, #0
 8008706:	42a6      	cmp	r6, r4
 8008708:	d105      	bne.n	8008716 <__libc_init_array+0x2e>
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008710:	4798      	blx	r3
 8008712:	3601      	adds	r6, #1
 8008714:	e7ee      	b.n	80086f4 <__libc_init_array+0xc>
 8008716:	f855 3b04 	ldr.w	r3, [r5], #4
 800871a:	4798      	blx	r3
 800871c:	3601      	adds	r6, #1
 800871e:	e7f2      	b.n	8008706 <__libc_init_array+0x1e>
 8008720:	0800a06c 	.word	0x0800a06c
 8008724:	0800a06c 	.word	0x0800a06c
 8008728:	0800a06c 	.word	0x0800a06c
 800872c:	0800a070 	.word	0x0800a070

08008730 <memset>:
 8008730:	4402      	add	r2, r0
 8008732:	4603      	mov	r3, r0
 8008734:	4293      	cmp	r3, r2
 8008736:	d100      	bne.n	800873a <memset+0xa>
 8008738:	4770      	bx	lr
 800873a:	f803 1b01 	strb.w	r1, [r3], #1
 800873e:	e7f9      	b.n	8008734 <memset+0x4>

08008740 <iprintf>:
 8008740:	b40f      	push	{r0, r1, r2, r3}
 8008742:	4b0a      	ldr	r3, [pc, #40]	; (800876c <iprintf+0x2c>)
 8008744:	b513      	push	{r0, r1, r4, lr}
 8008746:	681c      	ldr	r4, [r3, #0]
 8008748:	b124      	cbz	r4, 8008754 <iprintf+0x14>
 800874a:	69a3      	ldr	r3, [r4, #24]
 800874c:	b913      	cbnz	r3, 8008754 <iprintf+0x14>
 800874e:	4620      	mov	r0, r4
 8008750:	f000 f87c 	bl	800884c <__sinit>
 8008754:	ab05      	add	r3, sp, #20
 8008756:	9a04      	ldr	r2, [sp, #16]
 8008758:	68a1      	ldr	r1, [r4, #8]
 800875a:	9301      	str	r3, [sp, #4]
 800875c:	4620      	mov	r0, r4
 800875e:	f000 f9d3 	bl	8008b08 <_vfiprintf_r>
 8008762:	b002      	add	sp, #8
 8008764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008768:	b004      	add	sp, #16
 800876a:	4770      	bx	lr
 800876c:	24000130 	.word	0x24000130

08008770 <putchar>:
 8008770:	4b09      	ldr	r3, [pc, #36]	; (8008798 <putchar+0x28>)
 8008772:	b513      	push	{r0, r1, r4, lr}
 8008774:	681c      	ldr	r4, [r3, #0]
 8008776:	4601      	mov	r1, r0
 8008778:	b134      	cbz	r4, 8008788 <putchar+0x18>
 800877a:	69a3      	ldr	r3, [r4, #24]
 800877c:	b923      	cbnz	r3, 8008788 <putchar+0x18>
 800877e:	9001      	str	r0, [sp, #4]
 8008780:	4620      	mov	r0, r4
 8008782:	f000 f863 	bl	800884c <__sinit>
 8008786:	9901      	ldr	r1, [sp, #4]
 8008788:	68a2      	ldr	r2, [r4, #8]
 800878a:	4620      	mov	r0, r4
 800878c:	b002      	add	sp, #8
 800878e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008792:	f000 bc7d 	b.w	8009090 <_putc_r>
 8008796:	bf00      	nop
 8008798:	24000130 	.word	0x24000130

0800879c <std>:
 800879c:	2300      	movs	r3, #0
 800879e:	b510      	push	{r4, lr}
 80087a0:	4604      	mov	r4, r0
 80087a2:	e9c0 3300 	strd	r3, r3, [r0]
 80087a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087aa:	6083      	str	r3, [r0, #8]
 80087ac:	8181      	strh	r1, [r0, #12]
 80087ae:	6643      	str	r3, [r0, #100]	; 0x64
 80087b0:	81c2      	strh	r2, [r0, #14]
 80087b2:	6183      	str	r3, [r0, #24]
 80087b4:	4619      	mov	r1, r3
 80087b6:	2208      	movs	r2, #8
 80087b8:	305c      	adds	r0, #92	; 0x5c
 80087ba:	f7ff ffb9 	bl	8008730 <memset>
 80087be:	4b05      	ldr	r3, [pc, #20]	; (80087d4 <std+0x38>)
 80087c0:	6263      	str	r3, [r4, #36]	; 0x24
 80087c2:	4b05      	ldr	r3, [pc, #20]	; (80087d8 <std+0x3c>)
 80087c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80087c6:	4b05      	ldr	r3, [pc, #20]	; (80087dc <std+0x40>)
 80087c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087ca:	4b05      	ldr	r3, [pc, #20]	; (80087e0 <std+0x44>)
 80087cc:	6224      	str	r4, [r4, #32]
 80087ce:	6323      	str	r3, [r4, #48]	; 0x30
 80087d0:	bd10      	pop	{r4, pc}
 80087d2:	bf00      	nop
 80087d4:	08009141 	.word	0x08009141
 80087d8:	08009163 	.word	0x08009163
 80087dc:	0800919b 	.word	0x0800919b
 80087e0:	080091bf 	.word	0x080091bf

080087e4 <_cleanup_r>:
 80087e4:	4901      	ldr	r1, [pc, #4]	; (80087ec <_cleanup_r+0x8>)
 80087e6:	f000 b8af 	b.w	8008948 <_fwalk_reent>
 80087ea:	bf00      	nop
 80087ec:	08009499 	.word	0x08009499

080087f0 <__sfmoreglue>:
 80087f0:	b570      	push	{r4, r5, r6, lr}
 80087f2:	2268      	movs	r2, #104	; 0x68
 80087f4:	1e4d      	subs	r5, r1, #1
 80087f6:	4355      	muls	r5, r2
 80087f8:	460e      	mov	r6, r1
 80087fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80087fe:	f000 f8e5 	bl	80089cc <_malloc_r>
 8008802:	4604      	mov	r4, r0
 8008804:	b140      	cbz	r0, 8008818 <__sfmoreglue+0x28>
 8008806:	2100      	movs	r1, #0
 8008808:	e9c0 1600 	strd	r1, r6, [r0]
 800880c:	300c      	adds	r0, #12
 800880e:	60a0      	str	r0, [r4, #8]
 8008810:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008814:	f7ff ff8c 	bl	8008730 <memset>
 8008818:	4620      	mov	r0, r4
 800881a:	bd70      	pop	{r4, r5, r6, pc}

0800881c <__sfp_lock_acquire>:
 800881c:	4801      	ldr	r0, [pc, #4]	; (8008824 <__sfp_lock_acquire+0x8>)
 800881e:	f000 b8b3 	b.w	8008988 <__retarget_lock_acquire_recursive>
 8008822:	bf00      	nop
 8008824:	24004df9 	.word	0x24004df9

08008828 <__sfp_lock_release>:
 8008828:	4801      	ldr	r0, [pc, #4]	; (8008830 <__sfp_lock_release+0x8>)
 800882a:	f000 b8ae 	b.w	800898a <__retarget_lock_release_recursive>
 800882e:	bf00      	nop
 8008830:	24004df9 	.word	0x24004df9

08008834 <__sinit_lock_acquire>:
 8008834:	4801      	ldr	r0, [pc, #4]	; (800883c <__sinit_lock_acquire+0x8>)
 8008836:	f000 b8a7 	b.w	8008988 <__retarget_lock_acquire_recursive>
 800883a:	bf00      	nop
 800883c:	24004dfa 	.word	0x24004dfa

08008840 <__sinit_lock_release>:
 8008840:	4801      	ldr	r0, [pc, #4]	; (8008848 <__sinit_lock_release+0x8>)
 8008842:	f000 b8a2 	b.w	800898a <__retarget_lock_release_recursive>
 8008846:	bf00      	nop
 8008848:	24004dfa 	.word	0x24004dfa

0800884c <__sinit>:
 800884c:	b510      	push	{r4, lr}
 800884e:	4604      	mov	r4, r0
 8008850:	f7ff fff0 	bl	8008834 <__sinit_lock_acquire>
 8008854:	69a3      	ldr	r3, [r4, #24]
 8008856:	b11b      	cbz	r3, 8008860 <__sinit+0x14>
 8008858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800885c:	f7ff bff0 	b.w	8008840 <__sinit_lock_release>
 8008860:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008864:	6523      	str	r3, [r4, #80]	; 0x50
 8008866:	4b13      	ldr	r3, [pc, #76]	; (80088b4 <__sinit+0x68>)
 8008868:	4a13      	ldr	r2, [pc, #76]	; (80088b8 <__sinit+0x6c>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	62a2      	str	r2, [r4, #40]	; 0x28
 800886e:	42a3      	cmp	r3, r4
 8008870:	bf04      	itt	eq
 8008872:	2301      	moveq	r3, #1
 8008874:	61a3      	streq	r3, [r4, #24]
 8008876:	4620      	mov	r0, r4
 8008878:	f000 f820 	bl	80088bc <__sfp>
 800887c:	6060      	str	r0, [r4, #4]
 800887e:	4620      	mov	r0, r4
 8008880:	f000 f81c 	bl	80088bc <__sfp>
 8008884:	60a0      	str	r0, [r4, #8]
 8008886:	4620      	mov	r0, r4
 8008888:	f000 f818 	bl	80088bc <__sfp>
 800888c:	2200      	movs	r2, #0
 800888e:	60e0      	str	r0, [r4, #12]
 8008890:	2104      	movs	r1, #4
 8008892:	6860      	ldr	r0, [r4, #4]
 8008894:	f7ff ff82 	bl	800879c <std>
 8008898:	68a0      	ldr	r0, [r4, #8]
 800889a:	2201      	movs	r2, #1
 800889c:	2109      	movs	r1, #9
 800889e:	f7ff ff7d 	bl	800879c <std>
 80088a2:	68e0      	ldr	r0, [r4, #12]
 80088a4:	2202      	movs	r2, #2
 80088a6:	2112      	movs	r1, #18
 80088a8:	f7ff ff78 	bl	800879c <std>
 80088ac:	2301      	movs	r3, #1
 80088ae:	61a3      	str	r3, [r4, #24]
 80088b0:	e7d2      	b.n	8008858 <__sinit+0xc>
 80088b2:	bf00      	nop
 80088b4:	08009fd4 	.word	0x08009fd4
 80088b8:	080087e5 	.word	0x080087e5

080088bc <__sfp>:
 80088bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088be:	4607      	mov	r7, r0
 80088c0:	f7ff ffac 	bl	800881c <__sfp_lock_acquire>
 80088c4:	4b1e      	ldr	r3, [pc, #120]	; (8008940 <__sfp+0x84>)
 80088c6:	681e      	ldr	r6, [r3, #0]
 80088c8:	69b3      	ldr	r3, [r6, #24]
 80088ca:	b913      	cbnz	r3, 80088d2 <__sfp+0x16>
 80088cc:	4630      	mov	r0, r6
 80088ce:	f7ff ffbd 	bl	800884c <__sinit>
 80088d2:	3648      	adds	r6, #72	; 0x48
 80088d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80088d8:	3b01      	subs	r3, #1
 80088da:	d503      	bpl.n	80088e4 <__sfp+0x28>
 80088dc:	6833      	ldr	r3, [r6, #0]
 80088de:	b30b      	cbz	r3, 8008924 <__sfp+0x68>
 80088e0:	6836      	ldr	r6, [r6, #0]
 80088e2:	e7f7      	b.n	80088d4 <__sfp+0x18>
 80088e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80088e8:	b9d5      	cbnz	r5, 8008920 <__sfp+0x64>
 80088ea:	4b16      	ldr	r3, [pc, #88]	; (8008944 <__sfp+0x88>)
 80088ec:	60e3      	str	r3, [r4, #12]
 80088ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80088f2:	6665      	str	r5, [r4, #100]	; 0x64
 80088f4:	f000 f847 	bl	8008986 <__retarget_lock_init_recursive>
 80088f8:	f7ff ff96 	bl	8008828 <__sfp_lock_release>
 80088fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008900:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008904:	6025      	str	r5, [r4, #0]
 8008906:	61a5      	str	r5, [r4, #24]
 8008908:	2208      	movs	r2, #8
 800890a:	4629      	mov	r1, r5
 800890c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008910:	f7ff ff0e 	bl	8008730 <memset>
 8008914:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008918:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800891c:	4620      	mov	r0, r4
 800891e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008920:	3468      	adds	r4, #104	; 0x68
 8008922:	e7d9      	b.n	80088d8 <__sfp+0x1c>
 8008924:	2104      	movs	r1, #4
 8008926:	4638      	mov	r0, r7
 8008928:	f7ff ff62 	bl	80087f0 <__sfmoreglue>
 800892c:	4604      	mov	r4, r0
 800892e:	6030      	str	r0, [r6, #0]
 8008930:	2800      	cmp	r0, #0
 8008932:	d1d5      	bne.n	80088e0 <__sfp+0x24>
 8008934:	f7ff ff78 	bl	8008828 <__sfp_lock_release>
 8008938:	230c      	movs	r3, #12
 800893a:	603b      	str	r3, [r7, #0]
 800893c:	e7ee      	b.n	800891c <__sfp+0x60>
 800893e:	bf00      	nop
 8008940:	08009fd4 	.word	0x08009fd4
 8008944:	ffff0001 	.word	0xffff0001

08008948 <_fwalk_reent>:
 8008948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800894c:	4606      	mov	r6, r0
 800894e:	4688      	mov	r8, r1
 8008950:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008954:	2700      	movs	r7, #0
 8008956:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800895a:	f1b9 0901 	subs.w	r9, r9, #1
 800895e:	d505      	bpl.n	800896c <_fwalk_reent+0x24>
 8008960:	6824      	ldr	r4, [r4, #0]
 8008962:	2c00      	cmp	r4, #0
 8008964:	d1f7      	bne.n	8008956 <_fwalk_reent+0xe>
 8008966:	4638      	mov	r0, r7
 8008968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800896c:	89ab      	ldrh	r3, [r5, #12]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d907      	bls.n	8008982 <_fwalk_reent+0x3a>
 8008972:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008976:	3301      	adds	r3, #1
 8008978:	d003      	beq.n	8008982 <_fwalk_reent+0x3a>
 800897a:	4629      	mov	r1, r5
 800897c:	4630      	mov	r0, r6
 800897e:	47c0      	blx	r8
 8008980:	4307      	orrs	r7, r0
 8008982:	3568      	adds	r5, #104	; 0x68
 8008984:	e7e9      	b.n	800895a <_fwalk_reent+0x12>

08008986 <__retarget_lock_init_recursive>:
 8008986:	4770      	bx	lr

08008988 <__retarget_lock_acquire_recursive>:
 8008988:	4770      	bx	lr

0800898a <__retarget_lock_release_recursive>:
 800898a:	4770      	bx	lr

0800898c <sbrk_aligned>:
 800898c:	b570      	push	{r4, r5, r6, lr}
 800898e:	4e0e      	ldr	r6, [pc, #56]	; (80089c8 <sbrk_aligned+0x3c>)
 8008990:	460c      	mov	r4, r1
 8008992:	6831      	ldr	r1, [r6, #0]
 8008994:	4605      	mov	r5, r0
 8008996:	b911      	cbnz	r1, 800899e <sbrk_aligned+0x12>
 8008998:	f000 fbc2 	bl	8009120 <_sbrk_r>
 800899c:	6030      	str	r0, [r6, #0]
 800899e:	4621      	mov	r1, r4
 80089a0:	4628      	mov	r0, r5
 80089a2:	f000 fbbd 	bl	8009120 <_sbrk_r>
 80089a6:	1c43      	adds	r3, r0, #1
 80089a8:	d00a      	beq.n	80089c0 <sbrk_aligned+0x34>
 80089aa:	1cc4      	adds	r4, r0, #3
 80089ac:	f024 0403 	bic.w	r4, r4, #3
 80089b0:	42a0      	cmp	r0, r4
 80089b2:	d007      	beq.n	80089c4 <sbrk_aligned+0x38>
 80089b4:	1a21      	subs	r1, r4, r0
 80089b6:	4628      	mov	r0, r5
 80089b8:	f000 fbb2 	bl	8009120 <_sbrk_r>
 80089bc:	3001      	adds	r0, #1
 80089be:	d101      	bne.n	80089c4 <sbrk_aligned+0x38>
 80089c0:	f04f 34ff 	mov.w	r4, #4294967295
 80089c4:	4620      	mov	r0, r4
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	24004e00 	.word	0x24004e00

080089cc <_malloc_r>:
 80089cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d0:	1ccd      	adds	r5, r1, #3
 80089d2:	f025 0503 	bic.w	r5, r5, #3
 80089d6:	3508      	adds	r5, #8
 80089d8:	2d0c      	cmp	r5, #12
 80089da:	bf38      	it	cc
 80089dc:	250c      	movcc	r5, #12
 80089de:	2d00      	cmp	r5, #0
 80089e0:	4607      	mov	r7, r0
 80089e2:	db01      	blt.n	80089e8 <_malloc_r+0x1c>
 80089e4:	42a9      	cmp	r1, r5
 80089e6:	d905      	bls.n	80089f4 <_malloc_r+0x28>
 80089e8:	230c      	movs	r3, #12
 80089ea:	603b      	str	r3, [r7, #0]
 80089ec:	2600      	movs	r6, #0
 80089ee:	4630      	mov	r0, r6
 80089f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f4:	4e2e      	ldr	r6, [pc, #184]	; (8008ab0 <_malloc_r+0xe4>)
 80089f6:	f000 fe03 	bl	8009600 <__malloc_lock>
 80089fa:	6833      	ldr	r3, [r6, #0]
 80089fc:	461c      	mov	r4, r3
 80089fe:	bb34      	cbnz	r4, 8008a4e <_malloc_r+0x82>
 8008a00:	4629      	mov	r1, r5
 8008a02:	4638      	mov	r0, r7
 8008a04:	f7ff ffc2 	bl	800898c <sbrk_aligned>
 8008a08:	1c43      	adds	r3, r0, #1
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	d14d      	bne.n	8008aaa <_malloc_r+0xde>
 8008a0e:	6834      	ldr	r4, [r6, #0]
 8008a10:	4626      	mov	r6, r4
 8008a12:	2e00      	cmp	r6, #0
 8008a14:	d140      	bne.n	8008a98 <_malloc_r+0xcc>
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	4631      	mov	r1, r6
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	eb04 0803 	add.w	r8, r4, r3
 8008a20:	f000 fb7e 	bl	8009120 <_sbrk_r>
 8008a24:	4580      	cmp	r8, r0
 8008a26:	d13a      	bne.n	8008a9e <_malloc_r+0xd2>
 8008a28:	6821      	ldr	r1, [r4, #0]
 8008a2a:	3503      	adds	r5, #3
 8008a2c:	1a6d      	subs	r5, r5, r1
 8008a2e:	f025 0503 	bic.w	r5, r5, #3
 8008a32:	3508      	adds	r5, #8
 8008a34:	2d0c      	cmp	r5, #12
 8008a36:	bf38      	it	cc
 8008a38:	250c      	movcc	r5, #12
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	4638      	mov	r0, r7
 8008a3e:	f7ff ffa5 	bl	800898c <sbrk_aligned>
 8008a42:	3001      	adds	r0, #1
 8008a44:	d02b      	beq.n	8008a9e <_malloc_r+0xd2>
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	442b      	add	r3, r5
 8008a4a:	6023      	str	r3, [r4, #0]
 8008a4c:	e00e      	b.n	8008a6c <_malloc_r+0xa0>
 8008a4e:	6822      	ldr	r2, [r4, #0]
 8008a50:	1b52      	subs	r2, r2, r5
 8008a52:	d41e      	bmi.n	8008a92 <_malloc_r+0xc6>
 8008a54:	2a0b      	cmp	r2, #11
 8008a56:	d916      	bls.n	8008a86 <_malloc_r+0xba>
 8008a58:	1961      	adds	r1, r4, r5
 8008a5a:	42a3      	cmp	r3, r4
 8008a5c:	6025      	str	r5, [r4, #0]
 8008a5e:	bf18      	it	ne
 8008a60:	6059      	strne	r1, [r3, #4]
 8008a62:	6863      	ldr	r3, [r4, #4]
 8008a64:	bf08      	it	eq
 8008a66:	6031      	streq	r1, [r6, #0]
 8008a68:	5162      	str	r2, [r4, r5]
 8008a6a:	604b      	str	r3, [r1, #4]
 8008a6c:	4638      	mov	r0, r7
 8008a6e:	f104 060b 	add.w	r6, r4, #11
 8008a72:	f000 fdcb 	bl	800960c <__malloc_unlock>
 8008a76:	f026 0607 	bic.w	r6, r6, #7
 8008a7a:	1d23      	adds	r3, r4, #4
 8008a7c:	1af2      	subs	r2, r6, r3
 8008a7e:	d0b6      	beq.n	80089ee <_malloc_r+0x22>
 8008a80:	1b9b      	subs	r3, r3, r6
 8008a82:	50a3      	str	r3, [r4, r2]
 8008a84:	e7b3      	b.n	80089ee <_malloc_r+0x22>
 8008a86:	6862      	ldr	r2, [r4, #4]
 8008a88:	42a3      	cmp	r3, r4
 8008a8a:	bf0c      	ite	eq
 8008a8c:	6032      	streq	r2, [r6, #0]
 8008a8e:	605a      	strne	r2, [r3, #4]
 8008a90:	e7ec      	b.n	8008a6c <_malloc_r+0xa0>
 8008a92:	4623      	mov	r3, r4
 8008a94:	6864      	ldr	r4, [r4, #4]
 8008a96:	e7b2      	b.n	80089fe <_malloc_r+0x32>
 8008a98:	4634      	mov	r4, r6
 8008a9a:	6876      	ldr	r6, [r6, #4]
 8008a9c:	e7b9      	b.n	8008a12 <_malloc_r+0x46>
 8008a9e:	230c      	movs	r3, #12
 8008aa0:	603b      	str	r3, [r7, #0]
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	f000 fdb2 	bl	800960c <__malloc_unlock>
 8008aa8:	e7a1      	b.n	80089ee <_malloc_r+0x22>
 8008aaa:	6025      	str	r5, [r4, #0]
 8008aac:	e7de      	b.n	8008a6c <_malloc_r+0xa0>
 8008aae:	bf00      	nop
 8008ab0:	24004dfc 	.word	0x24004dfc

08008ab4 <__sfputc_r>:
 8008ab4:	6893      	ldr	r3, [r2, #8]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	b410      	push	{r4}
 8008abc:	6093      	str	r3, [r2, #8]
 8008abe:	da08      	bge.n	8008ad2 <__sfputc_r+0x1e>
 8008ac0:	6994      	ldr	r4, [r2, #24]
 8008ac2:	42a3      	cmp	r3, r4
 8008ac4:	db01      	blt.n	8008aca <__sfputc_r+0x16>
 8008ac6:	290a      	cmp	r1, #10
 8008ac8:	d103      	bne.n	8008ad2 <__sfputc_r+0x1e>
 8008aca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ace:	f000 bb7b 	b.w	80091c8 <__swbuf_r>
 8008ad2:	6813      	ldr	r3, [r2, #0]
 8008ad4:	1c58      	adds	r0, r3, #1
 8008ad6:	6010      	str	r0, [r2, #0]
 8008ad8:	7019      	strb	r1, [r3, #0]
 8008ada:	4608      	mov	r0, r1
 8008adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <__sfputs_r>:
 8008ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae4:	4606      	mov	r6, r0
 8008ae6:	460f      	mov	r7, r1
 8008ae8:	4614      	mov	r4, r2
 8008aea:	18d5      	adds	r5, r2, r3
 8008aec:	42ac      	cmp	r4, r5
 8008aee:	d101      	bne.n	8008af4 <__sfputs_r+0x12>
 8008af0:	2000      	movs	r0, #0
 8008af2:	e007      	b.n	8008b04 <__sfputs_r+0x22>
 8008af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af8:	463a      	mov	r2, r7
 8008afa:	4630      	mov	r0, r6
 8008afc:	f7ff ffda 	bl	8008ab4 <__sfputc_r>
 8008b00:	1c43      	adds	r3, r0, #1
 8008b02:	d1f3      	bne.n	8008aec <__sfputs_r+0xa>
 8008b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b08 <_vfiprintf_r>:
 8008b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	460d      	mov	r5, r1
 8008b0e:	b09d      	sub	sp, #116	; 0x74
 8008b10:	4614      	mov	r4, r2
 8008b12:	4698      	mov	r8, r3
 8008b14:	4606      	mov	r6, r0
 8008b16:	b118      	cbz	r0, 8008b20 <_vfiprintf_r+0x18>
 8008b18:	6983      	ldr	r3, [r0, #24]
 8008b1a:	b90b      	cbnz	r3, 8008b20 <_vfiprintf_r+0x18>
 8008b1c:	f7ff fe96 	bl	800884c <__sinit>
 8008b20:	4b89      	ldr	r3, [pc, #548]	; (8008d48 <_vfiprintf_r+0x240>)
 8008b22:	429d      	cmp	r5, r3
 8008b24:	d11b      	bne.n	8008b5e <_vfiprintf_r+0x56>
 8008b26:	6875      	ldr	r5, [r6, #4]
 8008b28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b2a:	07d9      	lsls	r1, r3, #31
 8008b2c:	d405      	bmi.n	8008b3a <_vfiprintf_r+0x32>
 8008b2e:	89ab      	ldrh	r3, [r5, #12]
 8008b30:	059a      	lsls	r2, r3, #22
 8008b32:	d402      	bmi.n	8008b3a <_vfiprintf_r+0x32>
 8008b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b36:	f7ff ff27 	bl	8008988 <__retarget_lock_acquire_recursive>
 8008b3a:	89ab      	ldrh	r3, [r5, #12]
 8008b3c:	071b      	lsls	r3, r3, #28
 8008b3e:	d501      	bpl.n	8008b44 <_vfiprintf_r+0x3c>
 8008b40:	692b      	ldr	r3, [r5, #16]
 8008b42:	b9eb      	cbnz	r3, 8008b80 <_vfiprintf_r+0x78>
 8008b44:	4629      	mov	r1, r5
 8008b46:	4630      	mov	r0, r6
 8008b48:	f000 fba2 	bl	8009290 <__swsetup_r>
 8008b4c:	b1c0      	cbz	r0, 8008b80 <_vfiprintf_r+0x78>
 8008b4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b50:	07dc      	lsls	r4, r3, #31
 8008b52:	d50e      	bpl.n	8008b72 <_vfiprintf_r+0x6a>
 8008b54:	f04f 30ff 	mov.w	r0, #4294967295
 8008b58:	b01d      	add	sp, #116	; 0x74
 8008b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b5e:	4b7b      	ldr	r3, [pc, #492]	; (8008d4c <_vfiprintf_r+0x244>)
 8008b60:	429d      	cmp	r5, r3
 8008b62:	d101      	bne.n	8008b68 <_vfiprintf_r+0x60>
 8008b64:	68b5      	ldr	r5, [r6, #8]
 8008b66:	e7df      	b.n	8008b28 <_vfiprintf_r+0x20>
 8008b68:	4b79      	ldr	r3, [pc, #484]	; (8008d50 <_vfiprintf_r+0x248>)
 8008b6a:	429d      	cmp	r5, r3
 8008b6c:	bf08      	it	eq
 8008b6e:	68f5      	ldreq	r5, [r6, #12]
 8008b70:	e7da      	b.n	8008b28 <_vfiprintf_r+0x20>
 8008b72:	89ab      	ldrh	r3, [r5, #12]
 8008b74:	0598      	lsls	r0, r3, #22
 8008b76:	d4ed      	bmi.n	8008b54 <_vfiprintf_r+0x4c>
 8008b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b7a:	f7ff ff06 	bl	800898a <__retarget_lock_release_recursive>
 8008b7e:	e7e9      	b.n	8008b54 <_vfiprintf_r+0x4c>
 8008b80:	2300      	movs	r3, #0
 8008b82:	9309      	str	r3, [sp, #36]	; 0x24
 8008b84:	2320      	movs	r3, #32
 8008b86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b8e:	2330      	movs	r3, #48	; 0x30
 8008b90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008d54 <_vfiprintf_r+0x24c>
 8008b94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b98:	f04f 0901 	mov.w	r9, #1
 8008b9c:	4623      	mov	r3, r4
 8008b9e:	469a      	mov	sl, r3
 8008ba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ba4:	b10a      	cbz	r2, 8008baa <_vfiprintf_r+0xa2>
 8008ba6:	2a25      	cmp	r2, #37	; 0x25
 8008ba8:	d1f9      	bne.n	8008b9e <_vfiprintf_r+0x96>
 8008baa:	ebba 0b04 	subs.w	fp, sl, r4
 8008bae:	d00b      	beq.n	8008bc8 <_vfiprintf_r+0xc0>
 8008bb0:	465b      	mov	r3, fp
 8008bb2:	4622      	mov	r2, r4
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	f7ff ff93 	bl	8008ae2 <__sfputs_r>
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	f000 80aa 	beq.w	8008d16 <_vfiprintf_r+0x20e>
 8008bc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bc4:	445a      	add	r2, fp
 8008bc6:	9209      	str	r2, [sp, #36]	; 0x24
 8008bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 80a2 	beq.w	8008d16 <_vfiprintf_r+0x20e>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bdc:	f10a 0a01 	add.w	sl, sl, #1
 8008be0:	9304      	str	r3, [sp, #16]
 8008be2:	9307      	str	r3, [sp, #28]
 8008be4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008be8:	931a      	str	r3, [sp, #104]	; 0x68
 8008bea:	4654      	mov	r4, sl
 8008bec:	2205      	movs	r2, #5
 8008bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf2:	4858      	ldr	r0, [pc, #352]	; (8008d54 <_vfiprintf_r+0x24c>)
 8008bf4:	f7f7 fb8c 	bl	8000310 <memchr>
 8008bf8:	9a04      	ldr	r2, [sp, #16]
 8008bfa:	b9d8      	cbnz	r0, 8008c34 <_vfiprintf_r+0x12c>
 8008bfc:	06d1      	lsls	r1, r2, #27
 8008bfe:	bf44      	itt	mi
 8008c00:	2320      	movmi	r3, #32
 8008c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c06:	0713      	lsls	r3, r2, #28
 8008c08:	bf44      	itt	mi
 8008c0a:	232b      	movmi	r3, #43	; 0x2b
 8008c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c10:	f89a 3000 	ldrb.w	r3, [sl]
 8008c14:	2b2a      	cmp	r3, #42	; 0x2a
 8008c16:	d015      	beq.n	8008c44 <_vfiprintf_r+0x13c>
 8008c18:	9a07      	ldr	r2, [sp, #28]
 8008c1a:	4654      	mov	r4, sl
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	f04f 0c0a 	mov.w	ip, #10
 8008c22:	4621      	mov	r1, r4
 8008c24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c28:	3b30      	subs	r3, #48	; 0x30
 8008c2a:	2b09      	cmp	r3, #9
 8008c2c:	d94e      	bls.n	8008ccc <_vfiprintf_r+0x1c4>
 8008c2e:	b1b0      	cbz	r0, 8008c5e <_vfiprintf_r+0x156>
 8008c30:	9207      	str	r2, [sp, #28]
 8008c32:	e014      	b.n	8008c5e <_vfiprintf_r+0x156>
 8008c34:	eba0 0308 	sub.w	r3, r0, r8
 8008c38:	fa09 f303 	lsl.w	r3, r9, r3
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	9304      	str	r3, [sp, #16]
 8008c40:	46a2      	mov	sl, r4
 8008c42:	e7d2      	b.n	8008bea <_vfiprintf_r+0xe2>
 8008c44:	9b03      	ldr	r3, [sp, #12]
 8008c46:	1d19      	adds	r1, r3, #4
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	9103      	str	r1, [sp, #12]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	bfbb      	ittet	lt
 8008c50:	425b      	neglt	r3, r3
 8008c52:	f042 0202 	orrlt.w	r2, r2, #2
 8008c56:	9307      	strge	r3, [sp, #28]
 8008c58:	9307      	strlt	r3, [sp, #28]
 8008c5a:	bfb8      	it	lt
 8008c5c:	9204      	strlt	r2, [sp, #16]
 8008c5e:	7823      	ldrb	r3, [r4, #0]
 8008c60:	2b2e      	cmp	r3, #46	; 0x2e
 8008c62:	d10c      	bne.n	8008c7e <_vfiprintf_r+0x176>
 8008c64:	7863      	ldrb	r3, [r4, #1]
 8008c66:	2b2a      	cmp	r3, #42	; 0x2a
 8008c68:	d135      	bne.n	8008cd6 <_vfiprintf_r+0x1ce>
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	1d1a      	adds	r2, r3, #4
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	9203      	str	r2, [sp, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	bfb8      	it	lt
 8008c76:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c7a:	3402      	adds	r4, #2
 8008c7c:	9305      	str	r3, [sp, #20]
 8008c7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d64 <_vfiprintf_r+0x25c>
 8008c82:	7821      	ldrb	r1, [r4, #0]
 8008c84:	2203      	movs	r2, #3
 8008c86:	4650      	mov	r0, sl
 8008c88:	f7f7 fb42 	bl	8000310 <memchr>
 8008c8c:	b140      	cbz	r0, 8008ca0 <_vfiprintf_r+0x198>
 8008c8e:	2340      	movs	r3, #64	; 0x40
 8008c90:	eba0 000a 	sub.w	r0, r0, sl
 8008c94:	fa03 f000 	lsl.w	r0, r3, r0
 8008c98:	9b04      	ldr	r3, [sp, #16]
 8008c9a:	4303      	orrs	r3, r0
 8008c9c:	3401      	adds	r4, #1
 8008c9e:	9304      	str	r3, [sp, #16]
 8008ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca4:	482c      	ldr	r0, [pc, #176]	; (8008d58 <_vfiprintf_r+0x250>)
 8008ca6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008caa:	2206      	movs	r2, #6
 8008cac:	f7f7 fb30 	bl	8000310 <memchr>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d03f      	beq.n	8008d34 <_vfiprintf_r+0x22c>
 8008cb4:	4b29      	ldr	r3, [pc, #164]	; (8008d5c <_vfiprintf_r+0x254>)
 8008cb6:	bb1b      	cbnz	r3, 8008d00 <_vfiprintf_r+0x1f8>
 8008cb8:	9b03      	ldr	r3, [sp, #12]
 8008cba:	3307      	adds	r3, #7
 8008cbc:	f023 0307 	bic.w	r3, r3, #7
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	9303      	str	r3, [sp, #12]
 8008cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc6:	443b      	add	r3, r7
 8008cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cca:	e767      	b.n	8008b9c <_vfiprintf_r+0x94>
 8008ccc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cd0:	460c      	mov	r4, r1
 8008cd2:	2001      	movs	r0, #1
 8008cd4:	e7a5      	b.n	8008c22 <_vfiprintf_r+0x11a>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	3401      	adds	r4, #1
 8008cda:	9305      	str	r3, [sp, #20]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	f04f 0c0a 	mov.w	ip, #10
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ce8:	3a30      	subs	r2, #48	; 0x30
 8008cea:	2a09      	cmp	r2, #9
 8008cec:	d903      	bls.n	8008cf6 <_vfiprintf_r+0x1ee>
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d0c5      	beq.n	8008c7e <_vfiprintf_r+0x176>
 8008cf2:	9105      	str	r1, [sp, #20]
 8008cf4:	e7c3      	b.n	8008c7e <_vfiprintf_r+0x176>
 8008cf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e7f0      	b.n	8008ce2 <_vfiprintf_r+0x1da>
 8008d00:	ab03      	add	r3, sp, #12
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	462a      	mov	r2, r5
 8008d06:	4b16      	ldr	r3, [pc, #88]	; (8008d60 <_vfiprintf_r+0x258>)
 8008d08:	a904      	add	r1, sp, #16
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	f3af 8000 	nop.w
 8008d10:	4607      	mov	r7, r0
 8008d12:	1c78      	adds	r0, r7, #1
 8008d14:	d1d6      	bne.n	8008cc4 <_vfiprintf_r+0x1bc>
 8008d16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d18:	07d9      	lsls	r1, r3, #31
 8008d1a:	d405      	bmi.n	8008d28 <_vfiprintf_r+0x220>
 8008d1c:	89ab      	ldrh	r3, [r5, #12]
 8008d1e:	059a      	lsls	r2, r3, #22
 8008d20:	d402      	bmi.n	8008d28 <_vfiprintf_r+0x220>
 8008d22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d24:	f7ff fe31 	bl	800898a <__retarget_lock_release_recursive>
 8008d28:	89ab      	ldrh	r3, [r5, #12]
 8008d2a:	065b      	lsls	r3, r3, #25
 8008d2c:	f53f af12 	bmi.w	8008b54 <_vfiprintf_r+0x4c>
 8008d30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d32:	e711      	b.n	8008b58 <_vfiprintf_r+0x50>
 8008d34:	ab03      	add	r3, sp, #12
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	462a      	mov	r2, r5
 8008d3a:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <_vfiprintf_r+0x258>)
 8008d3c:	a904      	add	r1, sp, #16
 8008d3e:	4630      	mov	r0, r6
 8008d40:	f000 f880 	bl	8008e44 <_printf_i>
 8008d44:	e7e4      	b.n	8008d10 <_vfiprintf_r+0x208>
 8008d46:	bf00      	nop
 8008d48:	08009ff8 	.word	0x08009ff8
 8008d4c:	0800a018 	.word	0x0800a018
 8008d50:	08009fd8 	.word	0x08009fd8
 8008d54:	0800a038 	.word	0x0800a038
 8008d58:	0800a042 	.word	0x0800a042
 8008d5c:	00000000 	.word	0x00000000
 8008d60:	08008ae3 	.word	0x08008ae3
 8008d64:	0800a03e 	.word	0x0800a03e

08008d68 <_printf_common>:
 8008d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d6c:	4616      	mov	r6, r2
 8008d6e:	4699      	mov	r9, r3
 8008d70:	688a      	ldr	r2, [r1, #8]
 8008d72:	690b      	ldr	r3, [r1, #16]
 8008d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	bfb8      	it	lt
 8008d7c:	4613      	movlt	r3, r2
 8008d7e:	6033      	str	r3, [r6, #0]
 8008d80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d84:	4607      	mov	r7, r0
 8008d86:	460c      	mov	r4, r1
 8008d88:	b10a      	cbz	r2, 8008d8e <_printf_common+0x26>
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	6033      	str	r3, [r6, #0]
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	0699      	lsls	r1, r3, #26
 8008d92:	bf42      	ittt	mi
 8008d94:	6833      	ldrmi	r3, [r6, #0]
 8008d96:	3302      	addmi	r3, #2
 8008d98:	6033      	strmi	r3, [r6, #0]
 8008d9a:	6825      	ldr	r5, [r4, #0]
 8008d9c:	f015 0506 	ands.w	r5, r5, #6
 8008da0:	d106      	bne.n	8008db0 <_printf_common+0x48>
 8008da2:	f104 0a19 	add.w	sl, r4, #25
 8008da6:	68e3      	ldr	r3, [r4, #12]
 8008da8:	6832      	ldr	r2, [r6, #0]
 8008daa:	1a9b      	subs	r3, r3, r2
 8008dac:	42ab      	cmp	r3, r5
 8008dae:	dc26      	bgt.n	8008dfe <_printf_common+0x96>
 8008db0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008db4:	1e13      	subs	r3, r2, #0
 8008db6:	6822      	ldr	r2, [r4, #0]
 8008db8:	bf18      	it	ne
 8008dba:	2301      	movne	r3, #1
 8008dbc:	0692      	lsls	r2, r2, #26
 8008dbe:	d42b      	bmi.n	8008e18 <_printf_common+0xb0>
 8008dc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008dc4:	4649      	mov	r1, r9
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	47c0      	blx	r8
 8008dca:	3001      	adds	r0, #1
 8008dcc:	d01e      	beq.n	8008e0c <_printf_common+0xa4>
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	68e5      	ldr	r5, [r4, #12]
 8008dd2:	6832      	ldr	r2, [r6, #0]
 8008dd4:	f003 0306 	and.w	r3, r3, #6
 8008dd8:	2b04      	cmp	r3, #4
 8008dda:	bf08      	it	eq
 8008ddc:	1aad      	subeq	r5, r5, r2
 8008dde:	68a3      	ldr	r3, [r4, #8]
 8008de0:	6922      	ldr	r2, [r4, #16]
 8008de2:	bf0c      	ite	eq
 8008de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008de8:	2500      	movne	r5, #0
 8008dea:	4293      	cmp	r3, r2
 8008dec:	bfc4      	itt	gt
 8008dee:	1a9b      	subgt	r3, r3, r2
 8008df0:	18ed      	addgt	r5, r5, r3
 8008df2:	2600      	movs	r6, #0
 8008df4:	341a      	adds	r4, #26
 8008df6:	42b5      	cmp	r5, r6
 8008df8:	d11a      	bne.n	8008e30 <_printf_common+0xc8>
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	e008      	b.n	8008e10 <_printf_common+0xa8>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	4652      	mov	r2, sl
 8008e02:	4649      	mov	r1, r9
 8008e04:	4638      	mov	r0, r7
 8008e06:	47c0      	blx	r8
 8008e08:	3001      	adds	r0, #1
 8008e0a:	d103      	bne.n	8008e14 <_printf_common+0xac>
 8008e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e14:	3501      	adds	r5, #1
 8008e16:	e7c6      	b.n	8008da6 <_printf_common+0x3e>
 8008e18:	18e1      	adds	r1, r4, r3
 8008e1a:	1c5a      	adds	r2, r3, #1
 8008e1c:	2030      	movs	r0, #48	; 0x30
 8008e1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e22:	4422      	add	r2, r4
 8008e24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e2c:	3302      	adds	r3, #2
 8008e2e:	e7c7      	b.n	8008dc0 <_printf_common+0x58>
 8008e30:	2301      	movs	r3, #1
 8008e32:	4622      	mov	r2, r4
 8008e34:	4649      	mov	r1, r9
 8008e36:	4638      	mov	r0, r7
 8008e38:	47c0      	blx	r8
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	d0e6      	beq.n	8008e0c <_printf_common+0xa4>
 8008e3e:	3601      	adds	r6, #1
 8008e40:	e7d9      	b.n	8008df6 <_printf_common+0x8e>
	...

08008e44 <_printf_i>:
 8008e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e48:	7e0f      	ldrb	r7, [r1, #24]
 8008e4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e4c:	2f78      	cmp	r7, #120	; 0x78
 8008e4e:	4691      	mov	r9, r2
 8008e50:	4680      	mov	r8, r0
 8008e52:	460c      	mov	r4, r1
 8008e54:	469a      	mov	sl, r3
 8008e56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e5a:	d807      	bhi.n	8008e6c <_printf_i+0x28>
 8008e5c:	2f62      	cmp	r7, #98	; 0x62
 8008e5e:	d80a      	bhi.n	8008e76 <_printf_i+0x32>
 8008e60:	2f00      	cmp	r7, #0
 8008e62:	f000 80d8 	beq.w	8009016 <_printf_i+0x1d2>
 8008e66:	2f58      	cmp	r7, #88	; 0x58
 8008e68:	f000 80a3 	beq.w	8008fb2 <_printf_i+0x16e>
 8008e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e74:	e03a      	b.n	8008eec <_printf_i+0xa8>
 8008e76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e7a:	2b15      	cmp	r3, #21
 8008e7c:	d8f6      	bhi.n	8008e6c <_printf_i+0x28>
 8008e7e:	a101      	add	r1, pc, #4	; (adr r1, 8008e84 <_printf_i+0x40>)
 8008e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e84:	08008edd 	.word	0x08008edd
 8008e88:	08008ef1 	.word	0x08008ef1
 8008e8c:	08008e6d 	.word	0x08008e6d
 8008e90:	08008e6d 	.word	0x08008e6d
 8008e94:	08008e6d 	.word	0x08008e6d
 8008e98:	08008e6d 	.word	0x08008e6d
 8008e9c:	08008ef1 	.word	0x08008ef1
 8008ea0:	08008e6d 	.word	0x08008e6d
 8008ea4:	08008e6d 	.word	0x08008e6d
 8008ea8:	08008e6d 	.word	0x08008e6d
 8008eac:	08008e6d 	.word	0x08008e6d
 8008eb0:	08008ffd 	.word	0x08008ffd
 8008eb4:	08008f21 	.word	0x08008f21
 8008eb8:	08008fdf 	.word	0x08008fdf
 8008ebc:	08008e6d 	.word	0x08008e6d
 8008ec0:	08008e6d 	.word	0x08008e6d
 8008ec4:	0800901f 	.word	0x0800901f
 8008ec8:	08008e6d 	.word	0x08008e6d
 8008ecc:	08008f21 	.word	0x08008f21
 8008ed0:	08008e6d 	.word	0x08008e6d
 8008ed4:	08008e6d 	.word	0x08008e6d
 8008ed8:	08008fe7 	.word	0x08008fe7
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	1d1a      	adds	r2, r3, #4
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	602a      	str	r2, [r5, #0]
 8008ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008eec:	2301      	movs	r3, #1
 8008eee:	e0a3      	b.n	8009038 <_printf_i+0x1f4>
 8008ef0:	6820      	ldr	r0, [r4, #0]
 8008ef2:	6829      	ldr	r1, [r5, #0]
 8008ef4:	0606      	lsls	r6, r0, #24
 8008ef6:	f101 0304 	add.w	r3, r1, #4
 8008efa:	d50a      	bpl.n	8008f12 <_printf_i+0xce>
 8008efc:	680e      	ldr	r6, [r1, #0]
 8008efe:	602b      	str	r3, [r5, #0]
 8008f00:	2e00      	cmp	r6, #0
 8008f02:	da03      	bge.n	8008f0c <_printf_i+0xc8>
 8008f04:	232d      	movs	r3, #45	; 0x2d
 8008f06:	4276      	negs	r6, r6
 8008f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f0c:	485e      	ldr	r0, [pc, #376]	; (8009088 <_printf_i+0x244>)
 8008f0e:	230a      	movs	r3, #10
 8008f10:	e019      	b.n	8008f46 <_printf_i+0x102>
 8008f12:	680e      	ldr	r6, [r1, #0]
 8008f14:	602b      	str	r3, [r5, #0]
 8008f16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f1a:	bf18      	it	ne
 8008f1c:	b236      	sxthne	r6, r6
 8008f1e:	e7ef      	b.n	8008f00 <_printf_i+0xbc>
 8008f20:	682b      	ldr	r3, [r5, #0]
 8008f22:	6820      	ldr	r0, [r4, #0]
 8008f24:	1d19      	adds	r1, r3, #4
 8008f26:	6029      	str	r1, [r5, #0]
 8008f28:	0601      	lsls	r1, r0, #24
 8008f2a:	d501      	bpl.n	8008f30 <_printf_i+0xec>
 8008f2c:	681e      	ldr	r6, [r3, #0]
 8008f2e:	e002      	b.n	8008f36 <_printf_i+0xf2>
 8008f30:	0646      	lsls	r6, r0, #25
 8008f32:	d5fb      	bpl.n	8008f2c <_printf_i+0xe8>
 8008f34:	881e      	ldrh	r6, [r3, #0]
 8008f36:	4854      	ldr	r0, [pc, #336]	; (8009088 <_printf_i+0x244>)
 8008f38:	2f6f      	cmp	r7, #111	; 0x6f
 8008f3a:	bf0c      	ite	eq
 8008f3c:	2308      	moveq	r3, #8
 8008f3e:	230a      	movne	r3, #10
 8008f40:	2100      	movs	r1, #0
 8008f42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f46:	6865      	ldr	r5, [r4, #4]
 8008f48:	60a5      	str	r5, [r4, #8]
 8008f4a:	2d00      	cmp	r5, #0
 8008f4c:	bfa2      	ittt	ge
 8008f4e:	6821      	ldrge	r1, [r4, #0]
 8008f50:	f021 0104 	bicge.w	r1, r1, #4
 8008f54:	6021      	strge	r1, [r4, #0]
 8008f56:	b90e      	cbnz	r6, 8008f5c <_printf_i+0x118>
 8008f58:	2d00      	cmp	r5, #0
 8008f5a:	d04d      	beq.n	8008ff8 <_printf_i+0x1b4>
 8008f5c:	4615      	mov	r5, r2
 8008f5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f62:	fb03 6711 	mls	r7, r3, r1, r6
 8008f66:	5dc7      	ldrb	r7, [r0, r7]
 8008f68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f6c:	4637      	mov	r7, r6
 8008f6e:	42bb      	cmp	r3, r7
 8008f70:	460e      	mov	r6, r1
 8008f72:	d9f4      	bls.n	8008f5e <_printf_i+0x11a>
 8008f74:	2b08      	cmp	r3, #8
 8008f76:	d10b      	bne.n	8008f90 <_printf_i+0x14c>
 8008f78:	6823      	ldr	r3, [r4, #0]
 8008f7a:	07de      	lsls	r6, r3, #31
 8008f7c:	d508      	bpl.n	8008f90 <_printf_i+0x14c>
 8008f7e:	6923      	ldr	r3, [r4, #16]
 8008f80:	6861      	ldr	r1, [r4, #4]
 8008f82:	4299      	cmp	r1, r3
 8008f84:	bfde      	ittt	le
 8008f86:	2330      	movle	r3, #48	; 0x30
 8008f88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f90:	1b52      	subs	r2, r2, r5
 8008f92:	6122      	str	r2, [r4, #16]
 8008f94:	f8cd a000 	str.w	sl, [sp]
 8008f98:	464b      	mov	r3, r9
 8008f9a:	aa03      	add	r2, sp, #12
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	4640      	mov	r0, r8
 8008fa0:	f7ff fee2 	bl	8008d68 <_printf_common>
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	d14c      	bne.n	8009042 <_printf_i+0x1fe>
 8008fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fac:	b004      	add	sp, #16
 8008fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb2:	4835      	ldr	r0, [pc, #212]	; (8009088 <_printf_i+0x244>)
 8008fb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008fb8:	6829      	ldr	r1, [r5, #0]
 8008fba:	6823      	ldr	r3, [r4, #0]
 8008fbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008fc0:	6029      	str	r1, [r5, #0]
 8008fc2:	061d      	lsls	r5, r3, #24
 8008fc4:	d514      	bpl.n	8008ff0 <_printf_i+0x1ac>
 8008fc6:	07df      	lsls	r7, r3, #31
 8008fc8:	bf44      	itt	mi
 8008fca:	f043 0320 	orrmi.w	r3, r3, #32
 8008fce:	6023      	strmi	r3, [r4, #0]
 8008fd0:	b91e      	cbnz	r6, 8008fda <_printf_i+0x196>
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	f023 0320 	bic.w	r3, r3, #32
 8008fd8:	6023      	str	r3, [r4, #0]
 8008fda:	2310      	movs	r3, #16
 8008fdc:	e7b0      	b.n	8008f40 <_printf_i+0xfc>
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	f043 0320 	orr.w	r3, r3, #32
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	2378      	movs	r3, #120	; 0x78
 8008fe8:	4828      	ldr	r0, [pc, #160]	; (800908c <_printf_i+0x248>)
 8008fea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008fee:	e7e3      	b.n	8008fb8 <_printf_i+0x174>
 8008ff0:	0659      	lsls	r1, r3, #25
 8008ff2:	bf48      	it	mi
 8008ff4:	b2b6      	uxthmi	r6, r6
 8008ff6:	e7e6      	b.n	8008fc6 <_printf_i+0x182>
 8008ff8:	4615      	mov	r5, r2
 8008ffa:	e7bb      	b.n	8008f74 <_printf_i+0x130>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	6826      	ldr	r6, [r4, #0]
 8009000:	6961      	ldr	r1, [r4, #20]
 8009002:	1d18      	adds	r0, r3, #4
 8009004:	6028      	str	r0, [r5, #0]
 8009006:	0635      	lsls	r5, r6, #24
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	d501      	bpl.n	8009010 <_printf_i+0x1cc>
 800900c:	6019      	str	r1, [r3, #0]
 800900e:	e002      	b.n	8009016 <_printf_i+0x1d2>
 8009010:	0670      	lsls	r0, r6, #25
 8009012:	d5fb      	bpl.n	800900c <_printf_i+0x1c8>
 8009014:	8019      	strh	r1, [r3, #0]
 8009016:	2300      	movs	r3, #0
 8009018:	6123      	str	r3, [r4, #16]
 800901a:	4615      	mov	r5, r2
 800901c:	e7ba      	b.n	8008f94 <_printf_i+0x150>
 800901e:	682b      	ldr	r3, [r5, #0]
 8009020:	1d1a      	adds	r2, r3, #4
 8009022:	602a      	str	r2, [r5, #0]
 8009024:	681d      	ldr	r5, [r3, #0]
 8009026:	6862      	ldr	r2, [r4, #4]
 8009028:	2100      	movs	r1, #0
 800902a:	4628      	mov	r0, r5
 800902c:	f7f7 f970 	bl	8000310 <memchr>
 8009030:	b108      	cbz	r0, 8009036 <_printf_i+0x1f2>
 8009032:	1b40      	subs	r0, r0, r5
 8009034:	6060      	str	r0, [r4, #4]
 8009036:	6863      	ldr	r3, [r4, #4]
 8009038:	6123      	str	r3, [r4, #16]
 800903a:	2300      	movs	r3, #0
 800903c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009040:	e7a8      	b.n	8008f94 <_printf_i+0x150>
 8009042:	6923      	ldr	r3, [r4, #16]
 8009044:	462a      	mov	r2, r5
 8009046:	4649      	mov	r1, r9
 8009048:	4640      	mov	r0, r8
 800904a:	47d0      	blx	sl
 800904c:	3001      	adds	r0, #1
 800904e:	d0ab      	beq.n	8008fa8 <_printf_i+0x164>
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	079b      	lsls	r3, r3, #30
 8009054:	d413      	bmi.n	800907e <_printf_i+0x23a>
 8009056:	68e0      	ldr	r0, [r4, #12]
 8009058:	9b03      	ldr	r3, [sp, #12]
 800905a:	4298      	cmp	r0, r3
 800905c:	bfb8      	it	lt
 800905e:	4618      	movlt	r0, r3
 8009060:	e7a4      	b.n	8008fac <_printf_i+0x168>
 8009062:	2301      	movs	r3, #1
 8009064:	4632      	mov	r2, r6
 8009066:	4649      	mov	r1, r9
 8009068:	4640      	mov	r0, r8
 800906a:	47d0      	blx	sl
 800906c:	3001      	adds	r0, #1
 800906e:	d09b      	beq.n	8008fa8 <_printf_i+0x164>
 8009070:	3501      	adds	r5, #1
 8009072:	68e3      	ldr	r3, [r4, #12]
 8009074:	9903      	ldr	r1, [sp, #12]
 8009076:	1a5b      	subs	r3, r3, r1
 8009078:	42ab      	cmp	r3, r5
 800907a:	dcf2      	bgt.n	8009062 <_printf_i+0x21e>
 800907c:	e7eb      	b.n	8009056 <_printf_i+0x212>
 800907e:	2500      	movs	r5, #0
 8009080:	f104 0619 	add.w	r6, r4, #25
 8009084:	e7f5      	b.n	8009072 <_printf_i+0x22e>
 8009086:	bf00      	nop
 8009088:	0800a049 	.word	0x0800a049
 800908c:	0800a05a 	.word	0x0800a05a

08009090 <_putc_r>:
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	460d      	mov	r5, r1
 8009094:	4614      	mov	r4, r2
 8009096:	4606      	mov	r6, r0
 8009098:	b118      	cbz	r0, 80090a2 <_putc_r+0x12>
 800909a:	6983      	ldr	r3, [r0, #24]
 800909c:	b90b      	cbnz	r3, 80090a2 <_putc_r+0x12>
 800909e:	f7ff fbd5 	bl	800884c <__sinit>
 80090a2:	4b1c      	ldr	r3, [pc, #112]	; (8009114 <_putc_r+0x84>)
 80090a4:	429c      	cmp	r4, r3
 80090a6:	d124      	bne.n	80090f2 <_putc_r+0x62>
 80090a8:	6874      	ldr	r4, [r6, #4]
 80090aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090ac:	07d8      	lsls	r0, r3, #31
 80090ae:	d405      	bmi.n	80090bc <_putc_r+0x2c>
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	0599      	lsls	r1, r3, #22
 80090b4:	d402      	bmi.n	80090bc <_putc_r+0x2c>
 80090b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090b8:	f7ff fc66 	bl	8008988 <__retarget_lock_acquire_recursive>
 80090bc:	68a3      	ldr	r3, [r4, #8]
 80090be:	3b01      	subs	r3, #1
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	60a3      	str	r3, [r4, #8]
 80090c4:	da05      	bge.n	80090d2 <_putc_r+0x42>
 80090c6:	69a2      	ldr	r2, [r4, #24]
 80090c8:	4293      	cmp	r3, r2
 80090ca:	db1c      	blt.n	8009106 <_putc_r+0x76>
 80090cc:	b2eb      	uxtb	r3, r5
 80090ce:	2b0a      	cmp	r3, #10
 80090d0:	d019      	beq.n	8009106 <_putc_r+0x76>
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	1c5a      	adds	r2, r3, #1
 80090d6:	6022      	str	r2, [r4, #0]
 80090d8:	701d      	strb	r5, [r3, #0]
 80090da:	b2ed      	uxtb	r5, r5
 80090dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090de:	07da      	lsls	r2, r3, #31
 80090e0:	d405      	bmi.n	80090ee <_putc_r+0x5e>
 80090e2:	89a3      	ldrh	r3, [r4, #12]
 80090e4:	059b      	lsls	r3, r3, #22
 80090e6:	d402      	bmi.n	80090ee <_putc_r+0x5e>
 80090e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090ea:	f7ff fc4e 	bl	800898a <__retarget_lock_release_recursive>
 80090ee:	4628      	mov	r0, r5
 80090f0:	bd70      	pop	{r4, r5, r6, pc}
 80090f2:	4b09      	ldr	r3, [pc, #36]	; (8009118 <_putc_r+0x88>)
 80090f4:	429c      	cmp	r4, r3
 80090f6:	d101      	bne.n	80090fc <_putc_r+0x6c>
 80090f8:	68b4      	ldr	r4, [r6, #8]
 80090fa:	e7d6      	b.n	80090aa <_putc_r+0x1a>
 80090fc:	4b07      	ldr	r3, [pc, #28]	; (800911c <_putc_r+0x8c>)
 80090fe:	429c      	cmp	r4, r3
 8009100:	bf08      	it	eq
 8009102:	68f4      	ldreq	r4, [r6, #12]
 8009104:	e7d1      	b.n	80090aa <_putc_r+0x1a>
 8009106:	4629      	mov	r1, r5
 8009108:	4622      	mov	r2, r4
 800910a:	4630      	mov	r0, r6
 800910c:	f000 f85c 	bl	80091c8 <__swbuf_r>
 8009110:	4605      	mov	r5, r0
 8009112:	e7e3      	b.n	80090dc <_putc_r+0x4c>
 8009114:	08009ff8 	.word	0x08009ff8
 8009118:	0800a018 	.word	0x0800a018
 800911c:	08009fd8 	.word	0x08009fd8

08009120 <_sbrk_r>:
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	4d06      	ldr	r5, [pc, #24]	; (800913c <_sbrk_r+0x1c>)
 8009124:	2300      	movs	r3, #0
 8009126:	4604      	mov	r4, r0
 8009128:	4608      	mov	r0, r1
 800912a:	602b      	str	r3, [r5, #0]
 800912c:	f7f7 fbe6 	bl	80008fc <_sbrk>
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	d102      	bne.n	800913a <_sbrk_r+0x1a>
 8009134:	682b      	ldr	r3, [r5, #0]
 8009136:	b103      	cbz	r3, 800913a <_sbrk_r+0x1a>
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	bd38      	pop	{r3, r4, r5, pc}
 800913c:	24004e04 	.word	0x24004e04

08009140 <__sread>:
 8009140:	b510      	push	{r4, lr}
 8009142:	460c      	mov	r4, r1
 8009144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009148:	f000 fab2 	bl	80096b0 <_read_r>
 800914c:	2800      	cmp	r0, #0
 800914e:	bfab      	itete	ge
 8009150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009152:	89a3      	ldrhlt	r3, [r4, #12]
 8009154:	181b      	addge	r3, r3, r0
 8009156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800915a:	bfac      	ite	ge
 800915c:	6563      	strge	r3, [r4, #84]	; 0x54
 800915e:	81a3      	strhlt	r3, [r4, #12]
 8009160:	bd10      	pop	{r4, pc}

08009162 <__swrite>:
 8009162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009166:	461f      	mov	r7, r3
 8009168:	898b      	ldrh	r3, [r1, #12]
 800916a:	05db      	lsls	r3, r3, #23
 800916c:	4605      	mov	r5, r0
 800916e:	460c      	mov	r4, r1
 8009170:	4616      	mov	r6, r2
 8009172:	d505      	bpl.n	8009180 <__swrite+0x1e>
 8009174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009178:	2302      	movs	r3, #2
 800917a:	2200      	movs	r2, #0
 800917c:	f000 f9c8 	bl	8009510 <_lseek_r>
 8009180:	89a3      	ldrh	r3, [r4, #12]
 8009182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800918a:	81a3      	strh	r3, [r4, #12]
 800918c:	4632      	mov	r2, r6
 800918e:	463b      	mov	r3, r7
 8009190:	4628      	mov	r0, r5
 8009192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009196:	f000 b869 	b.w	800926c <_write_r>

0800919a <__sseek>:
 800919a:	b510      	push	{r4, lr}
 800919c:	460c      	mov	r4, r1
 800919e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a2:	f000 f9b5 	bl	8009510 <_lseek_r>
 80091a6:	1c43      	adds	r3, r0, #1
 80091a8:	89a3      	ldrh	r3, [r4, #12]
 80091aa:	bf15      	itete	ne
 80091ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80091ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091b6:	81a3      	strheq	r3, [r4, #12]
 80091b8:	bf18      	it	ne
 80091ba:	81a3      	strhne	r3, [r4, #12]
 80091bc:	bd10      	pop	{r4, pc}

080091be <__sclose>:
 80091be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091c2:	f000 b8d3 	b.w	800936c <_close_r>
	...

080091c8 <__swbuf_r>:
 80091c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ca:	460e      	mov	r6, r1
 80091cc:	4614      	mov	r4, r2
 80091ce:	4605      	mov	r5, r0
 80091d0:	b118      	cbz	r0, 80091da <__swbuf_r+0x12>
 80091d2:	6983      	ldr	r3, [r0, #24]
 80091d4:	b90b      	cbnz	r3, 80091da <__swbuf_r+0x12>
 80091d6:	f7ff fb39 	bl	800884c <__sinit>
 80091da:	4b21      	ldr	r3, [pc, #132]	; (8009260 <__swbuf_r+0x98>)
 80091dc:	429c      	cmp	r4, r3
 80091de:	d12b      	bne.n	8009238 <__swbuf_r+0x70>
 80091e0:	686c      	ldr	r4, [r5, #4]
 80091e2:	69a3      	ldr	r3, [r4, #24]
 80091e4:	60a3      	str	r3, [r4, #8]
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	071a      	lsls	r2, r3, #28
 80091ea:	d52f      	bpl.n	800924c <__swbuf_r+0x84>
 80091ec:	6923      	ldr	r3, [r4, #16]
 80091ee:	b36b      	cbz	r3, 800924c <__swbuf_r+0x84>
 80091f0:	6923      	ldr	r3, [r4, #16]
 80091f2:	6820      	ldr	r0, [r4, #0]
 80091f4:	1ac0      	subs	r0, r0, r3
 80091f6:	6963      	ldr	r3, [r4, #20]
 80091f8:	b2f6      	uxtb	r6, r6
 80091fa:	4283      	cmp	r3, r0
 80091fc:	4637      	mov	r7, r6
 80091fe:	dc04      	bgt.n	800920a <__swbuf_r+0x42>
 8009200:	4621      	mov	r1, r4
 8009202:	4628      	mov	r0, r5
 8009204:	f000 f948 	bl	8009498 <_fflush_r>
 8009208:	bb30      	cbnz	r0, 8009258 <__swbuf_r+0x90>
 800920a:	68a3      	ldr	r3, [r4, #8]
 800920c:	3b01      	subs	r3, #1
 800920e:	60a3      	str	r3, [r4, #8]
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	1c5a      	adds	r2, r3, #1
 8009214:	6022      	str	r2, [r4, #0]
 8009216:	701e      	strb	r6, [r3, #0]
 8009218:	6963      	ldr	r3, [r4, #20]
 800921a:	3001      	adds	r0, #1
 800921c:	4283      	cmp	r3, r0
 800921e:	d004      	beq.n	800922a <__swbuf_r+0x62>
 8009220:	89a3      	ldrh	r3, [r4, #12]
 8009222:	07db      	lsls	r3, r3, #31
 8009224:	d506      	bpl.n	8009234 <__swbuf_r+0x6c>
 8009226:	2e0a      	cmp	r6, #10
 8009228:	d104      	bne.n	8009234 <__swbuf_r+0x6c>
 800922a:	4621      	mov	r1, r4
 800922c:	4628      	mov	r0, r5
 800922e:	f000 f933 	bl	8009498 <_fflush_r>
 8009232:	b988      	cbnz	r0, 8009258 <__swbuf_r+0x90>
 8009234:	4638      	mov	r0, r7
 8009236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009238:	4b0a      	ldr	r3, [pc, #40]	; (8009264 <__swbuf_r+0x9c>)
 800923a:	429c      	cmp	r4, r3
 800923c:	d101      	bne.n	8009242 <__swbuf_r+0x7a>
 800923e:	68ac      	ldr	r4, [r5, #8]
 8009240:	e7cf      	b.n	80091e2 <__swbuf_r+0x1a>
 8009242:	4b09      	ldr	r3, [pc, #36]	; (8009268 <__swbuf_r+0xa0>)
 8009244:	429c      	cmp	r4, r3
 8009246:	bf08      	it	eq
 8009248:	68ec      	ldreq	r4, [r5, #12]
 800924a:	e7ca      	b.n	80091e2 <__swbuf_r+0x1a>
 800924c:	4621      	mov	r1, r4
 800924e:	4628      	mov	r0, r5
 8009250:	f000 f81e 	bl	8009290 <__swsetup_r>
 8009254:	2800      	cmp	r0, #0
 8009256:	d0cb      	beq.n	80091f0 <__swbuf_r+0x28>
 8009258:	f04f 37ff 	mov.w	r7, #4294967295
 800925c:	e7ea      	b.n	8009234 <__swbuf_r+0x6c>
 800925e:	bf00      	nop
 8009260:	08009ff8 	.word	0x08009ff8
 8009264:	0800a018 	.word	0x0800a018
 8009268:	08009fd8 	.word	0x08009fd8

0800926c <_write_r>:
 800926c:	b538      	push	{r3, r4, r5, lr}
 800926e:	4d07      	ldr	r5, [pc, #28]	; (800928c <_write_r+0x20>)
 8009270:	4604      	mov	r4, r0
 8009272:	4608      	mov	r0, r1
 8009274:	4611      	mov	r1, r2
 8009276:	2200      	movs	r2, #0
 8009278:	602a      	str	r2, [r5, #0]
 800927a:	461a      	mov	r2, r3
 800927c:	f7f7 faed 	bl	800085a <_write>
 8009280:	1c43      	adds	r3, r0, #1
 8009282:	d102      	bne.n	800928a <_write_r+0x1e>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	b103      	cbz	r3, 800928a <_write_r+0x1e>
 8009288:	6023      	str	r3, [r4, #0]
 800928a:	bd38      	pop	{r3, r4, r5, pc}
 800928c:	24004e04 	.word	0x24004e04

08009290 <__swsetup_r>:
 8009290:	4b32      	ldr	r3, [pc, #200]	; (800935c <__swsetup_r+0xcc>)
 8009292:	b570      	push	{r4, r5, r6, lr}
 8009294:	681d      	ldr	r5, [r3, #0]
 8009296:	4606      	mov	r6, r0
 8009298:	460c      	mov	r4, r1
 800929a:	b125      	cbz	r5, 80092a6 <__swsetup_r+0x16>
 800929c:	69ab      	ldr	r3, [r5, #24]
 800929e:	b913      	cbnz	r3, 80092a6 <__swsetup_r+0x16>
 80092a0:	4628      	mov	r0, r5
 80092a2:	f7ff fad3 	bl	800884c <__sinit>
 80092a6:	4b2e      	ldr	r3, [pc, #184]	; (8009360 <__swsetup_r+0xd0>)
 80092a8:	429c      	cmp	r4, r3
 80092aa:	d10f      	bne.n	80092cc <__swsetup_r+0x3c>
 80092ac:	686c      	ldr	r4, [r5, #4]
 80092ae:	89a3      	ldrh	r3, [r4, #12]
 80092b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092b4:	0719      	lsls	r1, r3, #28
 80092b6:	d42c      	bmi.n	8009312 <__swsetup_r+0x82>
 80092b8:	06dd      	lsls	r5, r3, #27
 80092ba:	d411      	bmi.n	80092e0 <__swsetup_r+0x50>
 80092bc:	2309      	movs	r3, #9
 80092be:	6033      	str	r3, [r6, #0]
 80092c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092c4:	81a3      	strh	r3, [r4, #12]
 80092c6:	f04f 30ff 	mov.w	r0, #4294967295
 80092ca:	e03e      	b.n	800934a <__swsetup_r+0xba>
 80092cc:	4b25      	ldr	r3, [pc, #148]	; (8009364 <__swsetup_r+0xd4>)
 80092ce:	429c      	cmp	r4, r3
 80092d0:	d101      	bne.n	80092d6 <__swsetup_r+0x46>
 80092d2:	68ac      	ldr	r4, [r5, #8]
 80092d4:	e7eb      	b.n	80092ae <__swsetup_r+0x1e>
 80092d6:	4b24      	ldr	r3, [pc, #144]	; (8009368 <__swsetup_r+0xd8>)
 80092d8:	429c      	cmp	r4, r3
 80092da:	bf08      	it	eq
 80092dc:	68ec      	ldreq	r4, [r5, #12]
 80092de:	e7e6      	b.n	80092ae <__swsetup_r+0x1e>
 80092e0:	0758      	lsls	r0, r3, #29
 80092e2:	d512      	bpl.n	800930a <__swsetup_r+0x7a>
 80092e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092e6:	b141      	cbz	r1, 80092fa <__swsetup_r+0x6a>
 80092e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092ec:	4299      	cmp	r1, r3
 80092ee:	d002      	beq.n	80092f6 <__swsetup_r+0x66>
 80092f0:	4630      	mov	r0, r6
 80092f2:	f000 f991 	bl	8009618 <_free_r>
 80092f6:	2300      	movs	r3, #0
 80092f8:	6363      	str	r3, [r4, #52]	; 0x34
 80092fa:	89a3      	ldrh	r3, [r4, #12]
 80092fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009300:	81a3      	strh	r3, [r4, #12]
 8009302:	2300      	movs	r3, #0
 8009304:	6063      	str	r3, [r4, #4]
 8009306:	6923      	ldr	r3, [r4, #16]
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	89a3      	ldrh	r3, [r4, #12]
 800930c:	f043 0308 	orr.w	r3, r3, #8
 8009310:	81a3      	strh	r3, [r4, #12]
 8009312:	6923      	ldr	r3, [r4, #16]
 8009314:	b94b      	cbnz	r3, 800932a <__swsetup_r+0x9a>
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800931c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009320:	d003      	beq.n	800932a <__swsetup_r+0x9a>
 8009322:	4621      	mov	r1, r4
 8009324:	4630      	mov	r0, r6
 8009326:	f000 f92b 	bl	8009580 <__smakebuf_r>
 800932a:	89a0      	ldrh	r0, [r4, #12]
 800932c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009330:	f010 0301 	ands.w	r3, r0, #1
 8009334:	d00a      	beq.n	800934c <__swsetup_r+0xbc>
 8009336:	2300      	movs	r3, #0
 8009338:	60a3      	str	r3, [r4, #8]
 800933a:	6963      	ldr	r3, [r4, #20]
 800933c:	425b      	negs	r3, r3
 800933e:	61a3      	str	r3, [r4, #24]
 8009340:	6923      	ldr	r3, [r4, #16]
 8009342:	b943      	cbnz	r3, 8009356 <__swsetup_r+0xc6>
 8009344:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009348:	d1ba      	bne.n	80092c0 <__swsetup_r+0x30>
 800934a:	bd70      	pop	{r4, r5, r6, pc}
 800934c:	0781      	lsls	r1, r0, #30
 800934e:	bf58      	it	pl
 8009350:	6963      	ldrpl	r3, [r4, #20]
 8009352:	60a3      	str	r3, [r4, #8]
 8009354:	e7f4      	b.n	8009340 <__swsetup_r+0xb0>
 8009356:	2000      	movs	r0, #0
 8009358:	e7f7      	b.n	800934a <__swsetup_r+0xba>
 800935a:	bf00      	nop
 800935c:	24000130 	.word	0x24000130
 8009360:	08009ff8 	.word	0x08009ff8
 8009364:	0800a018 	.word	0x0800a018
 8009368:	08009fd8 	.word	0x08009fd8

0800936c <_close_r>:
 800936c:	b538      	push	{r3, r4, r5, lr}
 800936e:	4d06      	ldr	r5, [pc, #24]	; (8009388 <_close_r+0x1c>)
 8009370:	2300      	movs	r3, #0
 8009372:	4604      	mov	r4, r0
 8009374:	4608      	mov	r0, r1
 8009376:	602b      	str	r3, [r5, #0]
 8009378:	f7f7 fa8b 	bl	8000892 <_close>
 800937c:	1c43      	adds	r3, r0, #1
 800937e:	d102      	bne.n	8009386 <_close_r+0x1a>
 8009380:	682b      	ldr	r3, [r5, #0]
 8009382:	b103      	cbz	r3, 8009386 <_close_r+0x1a>
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	bd38      	pop	{r3, r4, r5, pc}
 8009388:	24004e04 	.word	0x24004e04

0800938c <__sflush_r>:
 800938c:	898a      	ldrh	r2, [r1, #12]
 800938e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009392:	4605      	mov	r5, r0
 8009394:	0710      	lsls	r0, r2, #28
 8009396:	460c      	mov	r4, r1
 8009398:	d458      	bmi.n	800944c <__sflush_r+0xc0>
 800939a:	684b      	ldr	r3, [r1, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	dc05      	bgt.n	80093ac <__sflush_r+0x20>
 80093a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	dc02      	bgt.n	80093ac <__sflush_r+0x20>
 80093a6:	2000      	movs	r0, #0
 80093a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093ae:	2e00      	cmp	r6, #0
 80093b0:	d0f9      	beq.n	80093a6 <__sflush_r+0x1a>
 80093b2:	2300      	movs	r3, #0
 80093b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093b8:	682f      	ldr	r7, [r5, #0]
 80093ba:	602b      	str	r3, [r5, #0]
 80093bc:	d032      	beq.n	8009424 <__sflush_r+0x98>
 80093be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093c0:	89a3      	ldrh	r3, [r4, #12]
 80093c2:	075a      	lsls	r2, r3, #29
 80093c4:	d505      	bpl.n	80093d2 <__sflush_r+0x46>
 80093c6:	6863      	ldr	r3, [r4, #4]
 80093c8:	1ac0      	subs	r0, r0, r3
 80093ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093cc:	b10b      	cbz	r3, 80093d2 <__sflush_r+0x46>
 80093ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093d0:	1ac0      	subs	r0, r0, r3
 80093d2:	2300      	movs	r3, #0
 80093d4:	4602      	mov	r2, r0
 80093d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093d8:	6a21      	ldr	r1, [r4, #32]
 80093da:	4628      	mov	r0, r5
 80093dc:	47b0      	blx	r6
 80093de:	1c43      	adds	r3, r0, #1
 80093e0:	89a3      	ldrh	r3, [r4, #12]
 80093e2:	d106      	bne.n	80093f2 <__sflush_r+0x66>
 80093e4:	6829      	ldr	r1, [r5, #0]
 80093e6:	291d      	cmp	r1, #29
 80093e8:	d82c      	bhi.n	8009444 <__sflush_r+0xb8>
 80093ea:	4a2a      	ldr	r2, [pc, #168]	; (8009494 <__sflush_r+0x108>)
 80093ec:	40ca      	lsrs	r2, r1
 80093ee:	07d6      	lsls	r6, r2, #31
 80093f0:	d528      	bpl.n	8009444 <__sflush_r+0xb8>
 80093f2:	2200      	movs	r2, #0
 80093f4:	6062      	str	r2, [r4, #4]
 80093f6:	04d9      	lsls	r1, r3, #19
 80093f8:	6922      	ldr	r2, [r4, #16]
 80093fa:	6022      	str	r2, [r4, #0]
 80093fc:	d504      	bpl.n	8009408 <__sflush_r+0x7c>
 80093fe:	1c42      	adds	r2, r0, #1
 8009400:	d101      	bne.n	8009406 <__sflush_r+0x7a>
 8009402:	682b      	ldr	r3, [r5, #0]
 8009404:	b903      	cbnz	r3, 8009408 <__sflush_r+0x7c>
 8009406:	6560      	str	r0, [r4, #84]	; 0x54
 8009408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800940a:	602f      	str	r7, [r5, #0]
 800940c:	2900      	cmp	r1, #0
 800940e:	d0ca      	beq.n	80093a6 <__sflush_r+0x1a>
 8009410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009414:	4299      	cmp	r1, r3
 8009416:	d002      	beq.n	800941e <__sflush_r+0x92>
 8009418:	4628      	mov	r0, r5
 800941a:	f000 f8fd 	bl	8009618 <_free_r>
 800941e:	2000      	movs	r0, #0
 8009420:	6360      	str	r0, [r4, #52]	; 0x34
 8009422:	e7c1      	b.n	80093a8 <__sflush_r+0x1c>
 8009424:	6a21      	ldr	r1, [r4, #32]
 8009426:	2301      	movs	r3, #1
 8009428:	4628      	mov	r0, r5
 800942a:	47b0      	blx	r6
 800942c:	1c41      	adds	r1, r0, #1
 800942e:	d1c7      	bne.n	80093c0 <__sflush_r+0x34>
 8009430:	682b      	ldr	r3, [r5, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d0c4      	beq.n	80093c0 <__sflush_r+0x34>
 8009436:	2b1d      	cmp	r3, #29
 8009438:	d001      	beq.n	800943e <__sflush_r+0xb2>
 800943a:	2b16      	cmp	r3, #22
 800943c:	d101      	bne.n	8009442 <__sflush_r+0xb6>
 800943e:	602f      	str	r7, [r5, #0]
 8009440:	e7b1      	b.n	80093a6 <__sflush_r+0x1a>
 8009442:	89a3      	ldrh	r3, [r4, #12]
 8009444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009448:	81a3      	strh	r3, [r4, #12]
 800944a:	e7ad      	b.n	80093a8 <__sflush_r+0x1c>
 800944c:	690f      	ldr	r7, [r1, #16]
 800944e:	2f00      	cmp	r7, #0
 8009450:	d0a9      	beq.n	80093a6 <__sflush_r+0x1a>
 8009452:	0793      	lsls	r3, r2, #30
 8009454:	680e      	ldr	r6, [r1, #0]
 8009456:	bf08      	it	eq
 8009458:	694b      	ldreq	r3, [r1, #20]
 800945a:	600f      	str	r7, [r1, #0]
 800945c:	bf18      	it	ne
 800945e:	2300      	movne	r3, #0
 8009460:	eba6 0807 	sub.w	r8, r6, r7
 8009464:	608b      	str	r3, [r1, #8]
 8009466:	f1b8 0f00 	cmp.w	r8, #0
 800946a:	dd9c      	ble.n	80093a6 <__sflush_r+0x1a>
 800946c:	6a21      	ldr	r1, [r4, #32]
 800946e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009470:	4643      	mov	r3, r8
 8009472:	463a      	mov	r2, r7
 8009474:	4628      	mov	r0, r5
 8009476:	47b0      	blx	r6
 8009478:	2800      	cmp	r0, #0
 800947a:	dc06      	bgt.n	800948a <__sflush_r+0xfe>
 800947c:	89a3      	ldrh	r3, [r4, #12]
 800947e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009482:	81a3      	strh	r3, [r4, #12]
 8009484:	f04f 30ff 	mov.w	r0, #4294967295
 8009488:	e78e      	b.n	80093a8 <__sflush_r+0x1c>
 800948a:	4407      	add	r7, r0
 800948c:	eba8 0800 	sub.w	r8, r8, r0
 8009490:	e7e9      	b.n	8009466 <__sflush_r+0xda>
 8009492:	bf00      	nop
 8009494:	20400001 	.word	0x20400001

08009498 <_fflush_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	690b      	ldr	r3, [r1, #16]
 800949c:	4605      	mov	r5, r0
 800949e:	460c      	mov	r4, r1
 80094a0:	b913      	cbnz	r3, 80094a8 <_fflush_r+0x10>
 80094a2:	2500      	movs	r5, #0
 80094a4:	4628      	mov	r0, r5
 80094a6:	bd38      	pop	{r3, r4, r5, pc}
 80094a8:	b118      	cbz	r0, 80094b2 <_fflush_r+0x1a>
 80094aa:	6983      	ldr	r3, [r0, #24]
 80094ac:	b90b      	cbnz	r3, 80094b2 <_fflush_r+0x1a>
 80094ae:	f7ff f9cd 	bl	800884c <__sinit>
 80094b2:	4b14      	ldr	r3, [pc, #80]	; (8009504 <_fflush_r+0x6c>)
 80094b4:	429c      	cmp	r4, r3
 80094b6:	d11b      	bne.n	80094f0 <_fflush_r+0x58>
 80094b8:	686c      	ldr	r4, [r5, #4]
 80094ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d0ef      	beq.n	80094a2 <_fflush_r+0xa>
 80094c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094c4:	07d0      	lsls	r0, r2, #31
 80094c6:	d404      	bmi.n	80094d2 <_fflush_r+0x3a>
 80094c8:	0599      	lsls	r1, r3, #22
 80094ca:	d402      	bmi.n	80094d2 <_fflush_r+0x3a>
 80094cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094ce:	f7ff fa5b 	bl	8008988 <__retarget_lock_acquire_recursive>
 80094d2:	4628      	mov	r0, r5
 80094d4:	4621      	mov	r1, r4
 80094d6:	f7ff ff59 	bl	800938c <__sflush_r>
 80094da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094dc:	07da      	lsls	r2, r3, #31
 80094de:	4605      	mov	r5, r0
 80094e0:	d4e0      	bmi.n	80094a4 <_fflush_r+0xc>
 80094e2:	89a3      	ldrh	r3, [r4, #12]
 80094e4:	059b      	lsls	r3, r3, #22
 80094e6:	d4dd      	bmi.n	80094a4 <_fflush_r+0xc>
 80094e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094ea:	f7ff fa4e 	bl	800898a <__retarget_lock_release_recursive>
 80094ee:	e7d9      	b.n	80094a4 <_fflush_r+0xc>
 80094f0:	4b05      	ldr	r3, [pc, #20]	; (8009508 <_fflush_r+0x70>)
 80094f2:	429c      	cmp	r4, r3
 80094f4:	d101      	bne.n	80094fa <_fflush_r+0x62>
 80094f6:	68ac      	ldr	r4, [r5, #8]
 80094f8:	e7df      	b.n	80094ba <_fflush_r+0x22>
 80094fa:	4b04      	ldr	r3, [pc, #16]	; (800950c <_fflush_r+0x74>)
 80094fc:	429c      	cmp	r4, r3
 80094fe:	bf08      	it	eq
 8009500:	68ec      	ldreq	r4, [r5, #12]
 8009502:	e7da      	b.n	80094ba <_fflush_r+0x22>
 8009504:	08009ff8 	.word	0x08009ff8
 8009508:	0800a018 	.word	0x0800a018
 800950c:	08009fd8 	.word	0x08009fd8

08009510 <_lseek_r>:
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	4d07      	ldr	r5, [pc, #28]	; (8009530 <_lseek_r+0x20>)
 8009514:	4604      	mov	r4, r0
 8009516:	4608      	mov	r0, r1
 8009518:	4611      	mov	r1, r2
 800951a:	2200      	movs	r2, #0
 800951c:	602a      	str	r2, [r5, #0]
 800951e:	461a      	mov	r2, r3
 8009520:	f7f7 f9de 	bl	80008e0 <_lseek>
 8009524:	1c43      	adds	r3, r0, #1
 8009526:	d102      	bne.n	800952e <_lseek_r+0x1e>
 8009528:	682b      	ldr	r3, [r5, #0]
 800952a:	b103      	cbz	r3, 800952e <_lseek_r+0x1e>
 800952c:	6023      	str	r3, [r4, #0]
 800952e:	bd38      	pop	{r3, r4, r5, pc}
 8009530:	24004e04 	.word	0x24004e04

08009534 <__swhatbuf_r>:
 8009534:	b570      	push	{r4, r5, r6, lr}
 8009536:	460e      	mov	r6, r1
 8009538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800953c:	2900      	cmp	r1, #0
 800953e:	b096      	sub	sp, #88	; 0x58
 8009540:	4614      	mov	r4, r2
 8009542:	461d      	mov	r5, r3
 8009544:	da08      	bge.n	8009558 <__swhatbuf_r+0x24>
 8009546:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	602a      	str	r2, [r5, #0]
 800954e:	061a      	lsls	r2, r3, #24
 8009550:	d410      	bmi.n	8009574 <__swhatbuf_r+0x40>
 8009552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009556:	e00e      	b.n	8009576 <__swhatbuf_r+0x42>
 8009558:	466a      	mov	r2, sp
 800955a:	f000 f8bb 	bl	80096d4 <_fstat_r>
 800955e:	2800      	cmp	r0, #0
 8009560:	dbf1      	blt.n	8009546 <__swhatbuf_r+0x12>
 8009562:	9a01      	ldr	r2, [sp, #4]
 8009564:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009568:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800956c:	425a      	negs	r2, r3
 800956e:	415a      	adcs	r2, r3
 8009570:	602a      	str	r2, [r5, #0]
 8009572:	e7ee      	b.n	8009552 <__swhatbuf_r+0x1e>
 8009574:	2340      	movs	r3, #64	; 0x40
 8009576:	2000      	movs	r0, #0
 8009578:	6023      	str	r3, [r4, #0]
 800957a:	b016      	add	sp, #88	; 0x58
 800957c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009580 <__smakebuf_r>:
 8009580:	898b      	ldrh	r3, [r1, #12]
 8009582:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009584:	079d      	lsls	r5, r3, #30
 8009586:	4606      	mov	r6, r0
 8009588:	460c      	mov	r4, r1
 800958a:	d507      	bpl.n	800959c <__smakebuf_r+0x1c>
 800958c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	6123      	str	r3, [r4, #16]
 8009594:	2301      	movs	r3, #1
 8009596:	6163      	str	r3, [r4, #20]
 8009598:	b002      	add	sp, #8
 800959a:	bd70      	pop	{r4, r5, r6, pc}
 800959c:	ab01      	add	r3, sp, #4
 800959e:	466a      	mov	r2, sp
 80095a0:	f7ff ffc8 	bl	8009534 <__swhatbuf_r>
 80095a4:	9900      	ldr	r1, [sp, #0]
 80095a6:	4605      	mov	r5, r0
 80095a8:	4630      	mov	r0, r6
 80095aa:	f7ff fa0f 	bl	80089cc <_malloc_r>
 80095ae:	b948      	cbnz	r0, 80095c4 <__smakebuf_r+0x44>
 80095b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b4:	059a      	lsls	r2, r3, #22
 80095b6:	d4ef      	bmi.n	8009598 <__smakebuf_r+0x18>
 80095b8:	f023 0303 	bic.w	r3, r3, #3
 80095bc:	f043 0302 	orr.w	r3, r3, #2
 80095c0:	81a3      	strh	r3, [r4, #12]
 80095c2:	e7e3      	b.n	800958c <__smakebuf_r+0xc>
 80095c4:	4b0d      	ldr	r3, [pc, #52]	; (80095fc <__smakebuf_r+0x7c>)
 80095c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80095c8:	89a3      	ldrh	r3, [r4, #12]
 80095ca:	6020      	str	r0, [r4, #0]
 80095cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095d0:	81a3      	strh	r3, [r4, #12]
 80095d2:	9b00      	ldr	r3, [sp, #0]
 80095d4:	6163      	str	r3, [r4, #20]
 80095d6:	9b01      	ldr	r3, [sp, #4]
 80095d8:	6120      	str	r0, [r4, #16]
 80095da:	b15b      	cbz	r3, 80095f4 <__smakebuf_r+0x74>
 80095dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095e0:	4630      	mov	r0, r6
 80095e2:	f000 f889 	bl	80096f8 <_isatty_r>
 80095e6:	b128      	cbz	r0, 80095f4 <__smakebuf_r+0x74>
 80095e8:	89a3      	ldrh	r3, [r4, #12]
 80095ea:	f023 0303 	bic.w	r3, r3, #3
 80095ee:	f043 0301 	orr.w	r3, r3, #1
 80095f2:	81a3      	strh	r3, [r4, #12]
 80095f4:	89a0      	ldrh	r0, [r4, #12]
 80095f6:	4305      	orrs	r5, r0
 80095f8:	81a5      	strh	r5, [r4, #12]
 80095fa:	e7cd      	b.n	8009598 <__smakebuf_r+0x18>
 80095fc:	080087e5 	.word	0x080087e5

08009600 <__malloc_lock>:
 8009600:	4801      	ldr	r0, [pc, #4]	; (8009608 <__malloc_lock+0x8>)
 8009602:	f7ff b9c1 	b.w	8008988 <__retarget_lock_acquire_recursive>
 8009606:	bf00      	nop
 8009608:	24004df8 	.word	0x24004df8

0800960c <__malloc_unlock>:
 800960c:	4801      	ldr	r0, [pc, #4]	; (8009614 <__malloc_unlock+0x8>)
 800960e:	f7ff b9bc 	b.w	800898a <__retarget_lock_release_recursive>
 8009612:	bf00      	nop
 8009614:	24004df8 	.word	0x24004df8

08009618 <_free_r>:
 8009618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800961a:	2900      	cmp	r1, #0
 800961c:	d044      	beq.n	80096a8 <_free_r+0x90>
 800961e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009622:	9001      	str	r0, [sp, #4]
 8009624:	2b00      	cmp	r3, #0
 8009626:	f1a1 0404 	sub.w	r4, r1, #4
 800962a:	bfb8      	it	lt
 800962c:	18e4      	addlt	r4, r4, r3
 800962e:	f7ff ffe7 	bl	8009600 <__malloc_lock>
 8009632:	4a1e      	ldr	r2, [pc, #120]	; (80096ac <_free_r+0x94>)
 8009634:	9801      	ldr	r0, [sp, #4]
 8009636:	6813      	ldr	r3, [r2, #0]
 8009638:	b933      	cbnz	r3, 8009648 <_free_r+0x30>
 800963a:	6063      	str	r3, [r4, #4]
 800963c:	6014      	str	r4, [r2, #0]
 800963e:	b003      	add	sp, #12
 8009640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009644:	f7ff bfe2 	b.w	800960c <__malloc_unlock>
 8009648:	42a3      	cmp	r3, r4
 800964a:	d908      	bls.n	800965e <_free_r+0x46>
 800964c:	6825      	ldr	r5, [r4, #0]
 800964e:	1961      	adds	r1, r4, r5
 8009650:	428b      	cmp	r3, r1
 8009652:	bf01      	itttt	eq
 8009654:	6819      	ldreq	r1, [r3, #0]
 8009656:	685b      	ldreq	r3, [r3, #4]
 8009658:	1949      	addeq	r1, r1, r5
 800965a:	6021      	streq	r1, [r4, #0]
 800965c:	e7ed      	b.n	800963a <_free_r+0x22>
 800965e:	461a      	mov	r2, r3
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	b10b      	cbz	r3, 8009668 <_free_r+0x50>
 8009664:	42a3      	cmp	r3, r4
 8009666:	d9fa      	bls.n	800965e <_free_r+0x46>
 8009668:	6811      	ldr	r1, [r2, #0]
 800966a:	1855      	adds	r5, r2, r1
 800966c:	42a5      	cmp	r5, r4
 800966e:	d10b      	bne.n	8009688 <_free_r+0x70>
 8009670:	6824      	ldr	r4, [r4, #0]
 8009672:	4421      	add	r1, r4
 8009674:	1854      	adds	r4, r2, r1
 8009676:	42a3      	cmp	r3, r4
 8009678:	6011      	str	r1, [r2, #0]
 800967a:	d1e0      	bne.n	800963e <_free_r+0x26>
 800967c:	681c      	ldr	r4, [r3, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	6053      	str	r3, [r2, #4]
 8009682:	4421      	add	r1, r4
 8009684:	6011      	str	r1, [r2, #0]
 8009686:	e7da      	b.n	800963e <_free_r+0x26>
 8009688:	d902      	bls.n	8009690 <_free_r+0x78>
 800968a:	230c      	movs	r3, #12
 800968c:	6003      	str	r3, [r0, #0]
 800968e:	e7d6      	b.n	800963e <_free_r+0x26>
 8009690:	6825      	ldr	r5, [r4, #0]
 8009692:	1961      	adds	r1, r4, r5
 8009694:	428b      	cmp	r3, r1
 8009696:	bf04      	itt	eq
 8009698:	6819      	ldreq	r1, [r3, #0]
 800969a:	685b      	ldreq	r3, [r3, #4]
 800969c:	6063      	str	r3, [r4, #4]
 800969e:	bf04      	itt	eq
 80096a0:	1949      	addeq	r1, r1, r5
 80096a2:	6021      	streq	r1, [r4, #0]
 80096a4:	6054      	str	r4, [r2, #4]
 80096a6:	e7ca      	b.n	800963e <_free_r+0x26>
 80096a8:	b003      	add	sp, #12
 80096aa:	bd30      	pop	{r4, r5, pc}
 80096ac:	24004dfc 	.word	0x24004dfc

080096b0 <_read_r>:
 80096b0:	b538      	push	{r3, r4, r5, lr}
 80096b2:	4d07      	ldr	r5, [pc, #28]	; (80096d0 <_read_r+0x20>)
 80096b4:	4604      	mov	r4, r0
 80096b6:	4608      	mov	r0, r1
 80096b8:	4611      	mov	r1, r2
 80096ba:	2200      	movs	r2, #0
 80096bc:	602a      	str	r2, [r5, #0]
 80096be:	461a      	mov	r2, r3
 80096c0:	f7f7 f8ae 	bl	8000820 <_read>
 80096c4:	1c43      	adds	r3, r0, #1
 80096c6:	d102      	bne.n	80096ce <_read_r+0x1e>
 80096c8:	682b      	ldr	r3, [r5, #0]
 80096ca:	b103      	cbz	r3, 80096ce <_read_r+0x1e>
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	bd38      	pop	{r3, r4, r5, pc}
 80096d0:	24004e04 	.word	0x24004e04

080096d4 <_fstat_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	4d07      	ldr	r5, [pc, #28]	; (80096f4 <_fstat_r+0x20>)
 80096d8:	2300      	movs	r3, #0
 80096da:	4604      	mov	r4, r0
 80096dc:	4608      	mov	r0, r1
 80096de:	4611      	mov	r1, r2
 80096e0:	602b      	str	r3, [r5, #0]
 80096e2:	f7f7 f8e2 	bl	80008aa <_fstat>
 80096e6:	1c43      	adds	r3, r0, #1
 80096e8:	d102      	bne.n	80096f0 <_fstat_r+0x1c>
 80096ea:	682b      	ldr	r3, [r5, #0]
 80096ec:	b103      	cbz	r3, 80096f0 <_fstat_r+0x1c>
 80096ee:	6023      	str	r3, [r4, #0]
 80096f0:	bd38      	pop	{r3, r4, r5, pc}
 80096f2:	bf00      	nop
 80096f4:	24004e04 	.word	0x24004e04

080096f8 <_isatty_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	4d06      	ldr	r5, [pc, #24]	; (8009714 <_isatty_r+0x1c>)
 80096fc:	2300      	movs	r3, #0
 80096fe:	4604      	mov	r4, r0
 8009700:	4608      	mov	r0, r1
 8009702:	602b      	str	r3, [r5, #0]
 8009704:	f7f7 f8e1 	bl	80008ca <_isatty>
 8009708:	1c43      	adds	r3, r0, #1
 800970a:	d102      	bne.n	8009712 <_isatty_r+0x1a>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	b103      	cbz	r3, 8009712 <_isatty_r+0x1a>
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	bd38      	pop	{r3, r4, r5, pc}
 8009714:	24004e04 	.word	0x24004e04

08009718 <_init>:
 8009718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971a:	bf00      	nop
 800971c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971e:	bc08      	pop	{r3}
 8009720:	469e      	mov	lr, r3
 8009722:	4770      	bx	lr

08009724 <_fini>:
 8009724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009726:	bf00      	nop
 8009728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800972a:	bc08      	pop	{r3}
 800972c:	469e      	mov	lr, r3
 800972e:	4770      	bx	lr
